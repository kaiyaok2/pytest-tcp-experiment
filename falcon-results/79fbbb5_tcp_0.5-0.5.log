============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.2.2, pluggy-1.3.0
Using --randomly-seed=1706684959
PyQt5 5.15.10 -- Qt runtime 5.15.2 -- Qt compiled 5.15.2
rootdir: /home/kaiyaok2/PythonProjects/falcon, configfile: pyproject.toml, testpaths: tests
plugins: hypothesis-6.81.1, cov-4.1.0, randomly-3.1.0, typeguard-4.1.5, timeout-1.4.2, qt-4.3.1, nbval-0.10.0, mock-3.12.0, tcp-0.1.1, textual-snapshot-0.4.0, asyncio-0.21.1, xdist-3.2.1, cookies-0.7.0, instafail-0.5.0, syrupy-4.6.0, anyio-3.7.1
asyncio: mode=strict
collected 3662 items
Using TCP weights 0.5-0.5
Collect TCP features took 0.21623945236206055s.
Compute TCP order took 0.06822681427001953s.

tests/asgi/test_buffered_reader.py .
current test PASSED/SKIPPED -- test_small_reads_with_delimiter in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 0.6405222415924072s cumulative, 0.6405222415924072s individual


tests/test_wsgi_servers.py 127.0.0.1 - - [31/Jan/2024:07:09:50 +0000] "GET /hello HTTP/1.1" 200 14 "-" "python-requests/2.31.0"
127.0.0.1 - - [31/Jan/2024:07:09:50 +0000] "POST /forms HTTP/1.1" 200 180 "-" "python-requests/2.31.0"
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:54203 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_post_multipart_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 2.304797410964966s cumulative, 1.6642751693725586s individual


tests/asgi/test_boundedstream_asgi.py .
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.322270631790161s cumulative, 0.017473220825195312s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.3267650604248047s cumulative, 0.004494428634643555s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.33105731010437s cumulative, 0.00429224967956543s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.334866523742676s cumulative, 0.003809213638305664s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.3386311531066895s cumulative, 0.003764629364013672s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.3423306941986084s cumulative, 0.0036995410919189453s individual

.
current test PASSED/SKIPPED -- test_iterate_streaming_request in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.3451335430145264s cumulative, 0.0028028488159179688s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.3488500118255615s cumulative, 0.0037164688110351562s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.353177070617676s cumulative, 0.004327058792114258s individual

.
current test PASSED/SKIPPED -- test_filelike in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.3564107418060303s cumulative, 0.003233671188354492s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.3605024814605713s cumulative, 0.004091739654541016s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.365773916244507s cumulative, 0.005271434783935547s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.370009183883667s cumulative, 0.004235267639160156s individual

.
current test PASSED/SKIPPED -- test_iteration_already_started in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.3766133785247803s cumulative, 0.006604194641113281s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.380352735519409s cumulative, 0.0037393569946289062s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.384141445159912s cumulative, 0.0037887096405029297s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.387740135192871s cumulative, 0.0035986900329589844s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.391993761062622s cumulative, 0.0042536258697509766s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.395930051803589s cumulative, 0.003936290740966797s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.401013135910034s cumulative, 0.0050830841064453125s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.4052066802978516s cumulative, 0.004193544387817383s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.4093215465545654s cumulative, 0.004114866256713867s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.413647174835205s cumulative, 0.0043256282806396484s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.4172933101654053s cumulative, 0.0036461353302001953s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.4212772846221924s cumulative, 0.003983974456787109s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.4250662326812744s cumulative, 0.0037889480590820312s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.429680824279785s cumulative, 0.004614591598510742s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.43500018119812s cumulative, 0.005319356918334961s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.440305471420288s cumulative, 0.005305290222167969s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.4447383880615234s cumulative, 0.0044329166412353516s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.448420286178589s cumulative, 0.0036818981170654297s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.4523062705993652s cumulative, 0.003885984420776367s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.4625487327575684s cumulative, 0.010242462158203125s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.466367244720459s cumulative, 0.003818511962890625s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.470062732696533s cumulative, 0.0036954879760742188s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.473644495010376s cumulative, 0.0035817623138427734s individual

.
current test PASSED/SKIPPED -- test_exhaust_with_disconnect in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.4762990474700928s cumulative, 0.002654552459716797s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.4890213012695312s cumulative, 0.012722253799438477s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.4935121536254883s cumulative, 0.004490852355957031s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.500148057937622s cumulative, 0.006635904312133789s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.5043017864227295s cumulative, 0.004153728485107422s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.50789213180542s cumulative, 0.0035903453826904297s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.511479377746582s cumulative, 0.0035872459411621094s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.515188694000244s cumulative, 0.0037093162536621094s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.5188465118408203s cumulative, 0.003657817840576172s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.522461414337158s cumulative, 0.0036149024963378906s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.5260093212127686s cumulative, 0.0035479068756103516s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.5296149253845215s cumulative, 0.0036056041717529297s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.5330982208251953s cumulative, 0.003483295440673828s individual

.
current test PASSED/SKIPPED -- test_exhaust in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.5357444286346436s cumulative, 0.002646207809448242s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.5394532680511475s cumulative, 0.0037088394165039062s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.543574333190918s cumulative, 0.004121065139770508s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.547855854034424s cumulative, 0.004281520843505859s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.5514211654663086s cumulative, 0.0035653114318847656s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.555316925048828s cumulative, 0.0038957595825195312s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.558905839920044s cumulative, 0.0035889148712158203s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.563995122909546s cumulative, 0.005089282989501953s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.5682387351989746s cumulative, 0.004243612289428711s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.5721375942230225s cumulative, 0.0038988590240478516s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.5758652687072754s cumulative, 0.0037276744842529297s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.579467535018921s cumulative, 0.003602266311645508s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.5830719470977783s cumulative, 0.003604412078857422s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.5868778228759766s cumulative, 0.003805875778198242s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.5946788787841797s cumulative, 0.007801055908203125s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 2.5984177589416504s cumulative, 0.003738880157470703s individual


tests/test_python_version_requirements.py .
current test PASSED/SKIPPED -- test_asgi in /home/kaiyaok2/PythonProjects/falcon/tests/test_python_version_requirements.py: 2.601116418838501s cumulative, 0.002698659896850586s individual


tests/asgi/test_boundedstream_asgi.py .
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 14.995744705200195s cumulative, 12.394628286361694s individual


tests/asgi/test_buffered_reader.py .
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 14.999980688095093s cumulative, 0.004235982894897461s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.00385069847107s cumulative, 0.0038700103759765625s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.0074622631073s cumulative, 0.0036115646362304688s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.011056423187256s cumulative, 0.0035941600799560547s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.013872861862183s cumulative, 0.002816438674926758s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.016700029373169s cumulative, 0.002827167510986328s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.019469976425171s cumulative, 0.002769947052001953s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.023211479187012s cumulative, 0.0037415027618408203s individual

.
current test PASSED/SKIPPED -- test_read in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.026448011398315s cumulative, 0.003236532211303711s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.030045509338379s cumulative, 0.0035974979400634766s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.033457517623901s cumulative, 0.003412008285522461s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.037426471710205s cumulative, 0.003968954086303711s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.041202306747437s cumulative, 0.0037758350372314453s individual

.
current test PASSED/SKIPPED -- test_read_until_with_buffer_edge_case in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.044471740722656s cumulative, 0.0032694339752197266s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.048098087310791s cumulative, 0.0036263465881347656s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.051718950271606s cumulative, 0.0036208629608154297s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.056269645690918s cumulative, 0.0045506954193115234s individual

.
current test PASSED/SKIPPED -- test_delimit in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.059970378875732s cumulative, 0.003700733184814453s individual

.
current test PASSED/SKIPPED -- test_placeholder_methods in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.0629403591156s cumulative, 0.002969980239868164s individual

.
current test PASSED/SKIPPED -- test_peek in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.065996646881104s cumulative, 0.0030562877655029297s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.069087266921997s cumulative, 0.0030906200408935547s individual

.
current test PASSED/SKIPPED -- test_exhaust in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.074849367141724s cumulative, 0.0057621002197265625s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.078534841537476s cumulative, 0.003685474395751953s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.082075357437134s cumulative, 0.003540515899658203s individual

.
current test PASSED/SKIPPED -- test_pipe in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.0848388671875s cumulative, 0.002763509750366211s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.088322401046753s cumulative, 0.0034835338592529297s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.091845989227295s cumulative, 0.003523588180541992s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.095667362213135s cumulative, 0.0038213729858398438s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.099053859710693s cumulative, 0.0033864974975585938s individual

.
current test PASSED/SKIPPED -- test_readall in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.102156162261963s cumulative, 0.0031023025512695312s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.107834577560425s cumulative, 0.005678415298461914s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.112324953079224s cumulative, 0.004490375518798828s individual

.
current test PASSED/SKIPPED -- test_delimit in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.116220235824585s cumulative, 0.003895282745361328s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.119395732879639s cumulative, 0.003175497055053711s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.123508930206299s cumulative, 0.004113197326660156s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.127670526504517s cumulative, 0.0041615962982177734s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.13108205795288s cumulative, 0.003411531448364258s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.134740591049194s cumulative, 0.0036585330963134766s individual

.
current test PASSED/SKIPPED -- test_peek_at_eof in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.13747501373291s cumulative, 0.0027344226837158203s individual

.
current test PASSED/SKIPPED -- test_readall in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.140724182128906s cumulative, 0.0032491683959960938s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.144798994064331s cumulative, 0.004074811935424805s individual

.
current test PASSED/SKIPPED -- test_read in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.149764776229858s cumulative, 0.004965782165527344s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.154027938842773s cumulative, 0.004263162612915039s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.156970024108887s cumulative, 0.0029420852661132812s individual

.
current test PASSED/SKIPPED -- test_basic_aiter in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.159922122955322s cumulative, 0.002952098846435547s individual

.
current test PASSED/SKIPPED -- test_peek in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.16309905052185s cumulative, 0.0031769275665283203s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.168485164642334s cumulative, 0.0053861141204833984s individual

.
current test PASSED/SKIPPED -- test_read in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.172152519226074s cumulative, 0.0036673545837402344s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.175143480300903s cumulative, 0.0029909610748291016s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.179099321365356s cumulative, 0.003955841064453125s individual

.
current test PASSED/SKIPPED -- test_aiter_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.182094097137451s cumulative, 0.0029947757720947266s individual

.
current test PASSED/SKIPPED -- test_pipe_until_delimiter_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.185064554214478s cumulative, 0.002970457077026367s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.188069343566895s cumulative, 0.003004789352416992s individual

.
current test PASSED/SKIPPED -- test_peek in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.191100835800171s cumulative, 0.003031492233276367s individual

.
current test PASSED/SKIPPED -- test_iteration_started in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.193970441818237s cumulative, 0.0028696060180664062s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.19669246673584s cumulative, 0.002722024917602539s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.200257301330566s cumulative, 0.0035648345947265625s individual

.
current test PASSED/SKIPPED -- test_readall in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.203162431716919s cumulative, 0.002905130386352539s individual

.
current test PASSED/SKIPPED -- test_peek in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.206141948699951s cumulative, 0.0029795169830322266s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.209580659866333s cumulative, 0.003438711166381836s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.213038444519043s cumulative, 0.003457784652709961s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.216508150100708s cumulative, 0.003469705581665039s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.220991373062134s cumulative, 0.004483222961425781s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.225953578948975s cumulative, 0.00496220588684082s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.228734254837036s cumulative, 0.0027806758880615234s individual

.
current test PASSED/SKIPPED -- test_peek in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.231560945510864s cumulative, 0.002826690673828125s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.234986543655396s cumulative, 0.00342559814453125s individual

.
current test PASSED/SKIPPED -- test_read in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.238095998764038s cumulative, 0.003109455108642578s individual

.
current test PASSED/SKIPPED -- test_invalid_delimiter_length in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.240985631942749s cumulative, 0.0028896331787109375s individual

.
current test PASSED/SKIPPED -- test_delimit in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.244017124176025s cumulative, 0.003031492233276367s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.247650861740112s cumulative, 0.003633737564086914s individual

.
current test PASSED/SKIPPED -- test_peek in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.250531435012817s cumulative, 0.002880573272705078s individual

.
current test PASSED/SKIPPED -- test_delimit in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.253900527954102s cumulative, 0.0033690929412841797s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.258111238479614s cumulative, 0.004210710525512695s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.263671875s cumulative, 0.005560636520385742s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.26807427406311s cumulative, 0.0044023990631103516s individual

.
current test PASSED/SKIPPED -- test_delimit in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.27137541770935s cumulative, 0.0033011436462402344s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.275391101837158s cumulative, 0.004015684127807617s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.278502941131592s cumulative, 0.0031118392944335938s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.282686471939087s cumulative, 0.004183530807495117s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.285956144332886s cumulative, 0.003269672393798828s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.289175748825073s cumulative, 0.0032196044921875s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 15.293281555175781s cumulative, 0.004105806350708008s individual


tests/test_sinks.py .
current test PASSED/SKIPPED -- test_route_precedence_with_both_id in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 15.311736822128296s cumulative, 0.01845526695251465s individual

.
current test PASSED/SKIPPED -- test_route_precedence in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 15.320369958877563s cumulative, 0.008633136749267578s individual

.
current test PASSED/SKIPPED -- test_route_precedence_with_id in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 15.333580732345581s cumulative, 0.013210773468017578s individual

.
current test PASSED/SKIPPED -- test_with_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 15.34485912322998s cumulative, 0.011278390884399414s individual

.
current test PASSED/SKIPPED -- test_add_sync_sink_with_wrapping in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 15.351869344711304s cumulative, 0.007010221481323242s individual


tests/asgi/test_request_asgi.py .
current test PASSED/SKIPPED -- test_log_error_not_supported in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_asgi.py: 15.354978084564209s cumulative, 0.0031087398529052734s individual

.
current test PASSED/SKIPPED -- test_missing_server_in_scope in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_asgi.py: 15.358161687850952s cumulative, 0.003183603286743164s individual


tests/asgi/test_asgi_servers.py INFO:     127.0.0.1:54724 - "GET / HTTP/1.1" 200 OK

[Starting server process...]
.on_websocket:send_text

[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_close_code_on_unhandled_http_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 16.53565287590027s cumulative, 1.1774911880493164s individual

INFO:     127.0.0.1:39798 - "GET / HTTP/1.1" 200 OK

[Starting server process...]
.on_websocket:send_text

[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_close_code_on_unhandled_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 17.76002597808838s cumulative, 1.2243731021881104s individual

INFO:     127.0.0.1:54424 - "GET / HTTP/1.1" 200 OK
INFO:     127.0.0.1:54430 - "PUT /bucket/drops HTTP/1.1" 200 OK

[Starting server process...]
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_post_read_bounded_stream_large in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 18.823222637176514s cumulative, 1.0631966590881348s individual

INFO:     127.0.0.1:36866 - "GET / HTTP/1.1" 200 OK
INFO:     127.0.0.1:36880 - "PUT /bucket/drops HTTP/1.1" 200 OK

[Starting server process...]
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_stream_chunked_request in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 20.060984134674072s cumulative, 1.2377614974975586s individual

INFO:     127.0.0.1:49514 - "GET / HTTP/1.1" 200 OK

[Starting server process...]
.on_websocket:send_text
on_websocket:send_text
on_websocket:send_text
on_websocket:send_text
on_websocket:send_text

[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 21.83908700942993s cumulative, 1.7781028747558594s individual

INFO:     127.0.0.1:34976 - "GET / HTTP/1.1" 200 OK

[Starting server process...]
.on_websocket:send_text
on_websocket:send_text
on_websocket:send_text
on_websocket:send_text
on_websocket:send_text

[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 23.839663982391357s cumulative, 2.000576972961426s individual

INFO:     127.0.0.1:45020 - "GET / HTTP/1.1" 200 OK

[Starting server process...]
.on_websocket:send_text
on_websocket:send_text
on_websocket:send_text
on_websocket:send_text
on_websocket:send_text

[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 25.869726181030273s cumulative, 2.030062198638916s individual

INFO:     127.0.0.1:37458 - "GET / HTTP/1.1" 200 OK

[Starting server process...]
.on_websocket:send_text
on_websocket:send_text
on_websocket:send_text
on_websocket:send_text
on_websocket:send_text

[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_invalid_close_code in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 27.903631448745728s cumulative, 2.033905267715454s individual

INFO:     127.0.0.1:47910 - "GET / HTTP/1.1" 200 OK

[Starting server process...]
.on_websocket:send_text
on_websocket:send_text
on_websocket:send_text
on_websocket:send_text
on_websocket:send_text

[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 29.926403760910034s cumulative, 2.0227723121643066s individual

INFO:     127.0.0.1:35824 - "GET / HTTP/1.1" 200 OK
INFO:     127.0.0.1:35838 - "POST / HTTP/1.1" 200 OK
INFO:     127.0.0.1:35840 - "POST / HTTP/1.1" 200 OK

[Starting server process...]
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_post_multiple in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 32.022732734680176s cumulative, 2.0963289737701416s individual


tests/test_wsgi_servers.py Starting uWSGI...
uwsgi --http 127.0.0.1:55085 --wsgi-file _wsgi_test_app.py
s
current test PASSED/SKIPPED -- test_get_deprecated in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 32.03486752510071s cumulative, 0.012134790420532227s individual

s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 32.04147243499756s cumulative, 0.006604909896850586s individual

Starting uWSGI...
uwsgi --http 127.0.0.1:46713 --wsgi-file _wsgi_test_app.py
s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 32.04939031600952s cumulative, 0.00791788101196289s individual

Starting uWSGI...
uwsgi --http 127.0.0.1:47967 --wsgi-file _wsgi_test_app.py
s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 32.058714151382446s cumulative, 0.009323835372924805s individual

s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 32.064321994781494s cumulative, 0.0056078433990478516s individual

s
current test PASSED/SKIPPED -- test_static_file in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 32.06859350204468s cumulative, 0.004271507263183594s individual

s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 32.07321810722351s cumulative, 0.004624605178833008s individual

s
current test PASSED/SKIPPED -- test_post_multipart_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 32.0776264667511s cumulative, 0.004408359527587891s individual

s
current test PASSED/SKIPPED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 32.08212971687317s cumulative, 0.0045032501220703125s individual

s
current test PASSED/SKIPPED -- test_get_deprecated in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 32.08702731132507s cumulative, 0.004897594451904297s individual

s
current test PASSED/SKIPPED -- test_post_multipart_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 32.09088373184204s cumulative, 0.0038564205169677734s individual

Starting uWSGI...
uwsgi --http 127.0.0.1:49899 --wsgi-file _wsgi_test_app.py
s
current test PASSED/SKIPPED -- test_post_multipart_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 32.095067501068115s cumulative, 0.004183769226074219s individual

s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 32.09889769554138s cumulative, 0.0038301944732666016s individual

Starting uWSGI...
uwsgi --http 127.0.0.1:37395 --wsgi-file _wsgi_test_app.py
s
current test PASSED/SKIPPED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 32.10230469703674s cumulative, 0.003407001495361328s individual

s
current test PASSED/SKIPPED -- test_get_deprecated in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 32.10625958442688s cumulative, 0.003954887390136719s individual

s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 32.10996127128601s cumulative, 0.0037016868591308594s individual

s
current test PASSED/SKIPPED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 32.11343050003052s cumulative, 0.003469228744506836s individual

s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 32.11714291572571s cumulative, 0.0037124156951904297s individual

s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 32.12100410461426s cumulative, 0.0038611888885498047s individual

Starting uWSGI...
uwsgi --http 127.0.0.1:40739 --wsgi-file _wsgi_test_app.py
s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 32.12524175643921s cumulative, 0.004237651824951172s individual

s
current test PASSED/SKIPPED -- test_static_file in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 32.12914848327637s cumulative, 0.003906726837158203s individual

s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 32.132904052734375s cumulative, 0.0037555694580078125s individual

Starting uWSGI...
uwsgi --http 127.0.0.1:49329 --wsgi-file _wsgi_test_app.py
s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 32.136619329452515s cumulative, 0.0037152767181396484s individual

Starting uWSGI...
uwsgi --http 127.0.0.1:46259 --wsgi-file _wsgi_test_app.py
s
current test PASSED/SKIPPED -- test_static_file in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 32.139790773391724s cumulative, 0.0031714439392089844s individual


tests/test_httperror.py .
current test PASSED/SKIPPED -- test_411 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.15035533905029s cumulative, 0.010564565658569336s individual

.
current test PASSED/SKIPPED -- test_invalid_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.157522678375244s cumulative, 0.007167339324951172s individual

.
current test PASSED/SKIPPED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.163230419158936s cumulative, 0.005707740783691406s individual

.
current test PASSED/SKIPPED -- test_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.17094159126282s cumulative, 0.007711172103881836s individual

.
current test PASSED/SKIPPED -- test_unicode_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.18336629867554s cumulative, 0.012424707412719727s individual

.
current test PASSED/SKIPPED -- test_414 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.196533203125s cumulative, 0.01316690444946289s individual

.
current test PASSED/SKIPPED -- test_epic_fail_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.20732569694519s cumulative, 0.01079249382019043s individual

.
current test PASSED/SKIPPED -- test_misc in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.222633361816406s cumulative, 0.01530766487121582s individual

.
current test PASSED/SKIPPED -- test_no_description_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.230841636657715s cumulative, 0.008208274841308594s individual

.
current test PASSED/SKIPPED -- test_forbidden in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.23801517486572s cumulative, 0.0071735382080078125s individual

.
current test PASSED/SKIPPED -- test_custom_error_serializer_optional_representation in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.245272397994995s cumulative, 0.007257223129272461s individual

.
current test PASSED/SKIPPED -- test_405_without_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.25026512145996s cumulative, 0.00499272346496582s individual

.
current test PASSED/SKIPPED -- test_405_without_body_with_extra_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.25872445106506s cumulative, 0.008459329605102539s individual

.
current test PASSED/SKIPPED -- test_client_does_not_accept_anything in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.26548647880554s cumulative, 0.006762027740478516s individual

.
current test PASSED/SKIPPED -- test_414_with_description in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.27222514152527s cumulative, 0.0067386627197265625s individual

.
current test PASSED/SKIPPED -- test_414 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.27752375602722s cumulative, 0.005298614501953125s individual

.
current test PASSED/SKIPPED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.284300804138184s cumulative, 0.006777048110961914s individual

.
current test PASSED/SKIPPED -- test_custom_error_serializer_optional_representation in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.28930068016052s cumulative, 0.004999876022338867s individual

.
current test PASSED/SKIPPED -- test_503_integer_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.29505109786987s cumulative, 0.005750417709350586s individual

.
current test PASSED/SKIPPED -- test_epic_fail_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.300055742263794s cumulative, 0.0050046443939208984s individual

.
current test PASSED/SKIPPED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.30592584609985s cumulative, 0.00587010383605957s individual

.
current test PASSED/SKIPPED -- test_custom_error_serializer_optional_representation in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.311506509780884s cumulative, 0.0055806636810302734s individual

.
current test PASSED/SKIPPED -- test_404_without_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.31720185279846s cumulative, 0.005695343017578125s individual

.
current test PASSED/SKIPPED -- test_client_does_not_accept_anything in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.32180571556091s cumulative, 0.004603862762451172s individual

.
current test PASSED/SKIPPED -- test_410_without_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.32706880569458s cumulative, 0.005263090133666992s individual

.
current test PASSED/SKIPPED -- test_413 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.331836223602295s cumulative, 0.004767417907714844s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.3350396156311s cumulative, 0.0032033920288085938s individual

.
current test PASSED/SKIPPED -- test_429_datetime in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.341052293777466s cumulative, 0.006012678146362305s individual

.
current test PASSED/SKIPPED -- test_forbidden in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.34796977043152s cumulative, 0.006917476654052734s individual

.
current test PASSED/SKIPPED -- test_414_with_description in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.355860233306885s cumulative, 0.007890462875366211s individual

.
current test PASSED/SKIPPED -- test_client_does_not_accept_json_or_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.36086392402649s cumulative, 0.005003690719604492s individual

.
current test PASSED/SKIPPED -- test_custom_error_serializer_optional_representation in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.367663860321045s cumulative, 0.006799936294555664s individual

.
current test PASSED/SKIPPED -- test_429 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.37275719642639s cumulative, 0.00509333610534668s individual

.
current test PASSED/SKIPPED -- test_429_datetime in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.3785138130188s cumulative, 0.0057566165924072266s individual

.
current test PASSED/SKIPPED -- test_custom_error_serializer_optional_representation in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.38507413864136s cumulative, 0.006560325622558594s individual

.
current test PASSED/SKIPPED -- test_416 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.39040446281433s cumulative, 0.005330324172973633s individual

.
current test PASSED/SKIPPED -- test_503_integer_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.39576554298401s cumulative, 0.005361080169677734s individual

.
current test PASSED/SKIPPED -- test_base_class in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.402820110321045s cumulative, 0.007054567337036133s individual

.
current test PASSED/SKIPPED -- test_temporary_413_datetime_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.40894556045532s cumulative, 0.006125450134277344s individual

.
current test PASSED/SKIPPED -- test_custom_error_serializer_optional_representation in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.41457414627075s cumulative, 0.0056285858154296875s individual

.
current test PASSED/SKIPPED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.419591188430786s cumulative, 0.00501704216003418s individual

.
current test PASSED/SKIPPED -- test_temporary_413_integer_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.426350831985474s cumulative, 0.0067596435546875s individual

.
current test PASSED/SKIPPED -- test_misc in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.44778800010681s cumulative, 0.02143716812133789s individual

.
current test PASSED/SKIPPED -- test_custom_serializer_no_representation in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.45453882217407s cumulative, 0.006750822067260742s individual

.
current test PASSED/SKIPPED -- test_404_with_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.461875200271606s cumulative, 0.00733637809753418s individual

.
current test PASSED/SKIPPED -- test_MediaMalformedError in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.464783668518066s cumulative, 0.002908468246459961s individual

.
current test PASSED/SKIPPED -- test_invalid_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.46986484527588s cumulative, 0.0050811767578125s individual

.
current test PASSED/SKIPPED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.47474694252014s cumulative, 0.004882097244262695s individual

.
current test PASSED/SKIPPED -- test_411 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.47996473312378s cumulative, 0.005217790603637695s individual

.
current test PASSED/SKIPPED -- test_unicode_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.484567642211914s cumulative, 0.004602909088134766s individual

.
current test PASSED/SKIPPED -- test_404_without_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.489649057388306s cumulative, 0.0050814151763916016s individual

.
current test PASSED/SKIPPED -- test_410_without_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.49748969078064s cumulative, 0.007840633392333984s individual

.
current test PASSED/SKIPPED -- test_416 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.5081889629364s cumulative, 0.010699272155761719s individual

.
current test PASSED/SKIPPED -- test_405_without_body_with_extra_headers_double_check in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.51344871520996s cumulative, 0.00525975227355957s individual

.
current test PASSED/SKIPPED -- test_serialize_no_json_media_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.5191810131073s cumulative, 0.005732297897338867s individual

.
current test PASSED/SKIPPED -- test_invalid_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.52408266067505s cumulative, 0.0049016475677490234s individual

.
current test PASSED/SKIPPED -- test_epic_fail_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.530511140823364s cumulative, 0.00642848014831543s individual

.
current test PASSED/SKIPPED -- test_405_without_body_with_extra_headers_double_check in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.53581500053406s cumulative, 0.005303859710693359s individual

.
current test PASSED/SKIPPED -- test_epic_fail_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.54096221923828s cumulative, 0.005147218704223633s individual

.
current test PASSED/SKIPPED -- test_serialize_error_uses_media_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.54541850090027s cumulative, 0.004456281661987305s individual

.
current test PASSED/SKIPPED -- test_414_with_custom_kwargs in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.55348324775696s cumulative, 0.008064746856689453s individual

.
current test PASSED/SKIPPED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.558841705322266s cumulative, 0.005358457565307617s individual

.
current test PASSED/SKIPPED -- test_503_datetime_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.56384038925171s cumulative, 0.004998683929443359s individual

.
current test PASSED/SKIPPED -- test_forbidden in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.56981563568115s cumulative, 0.005975246429443359s individual

.
current test PASSED/SKIPPED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.57744073867798s cumulative, 0.007625102996826172s individual

.
current test PASSED/SKIPPED -- test_temporary_413_integer_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.58307766914368s cumulative, 0.005636930465698242s individual

.
current test PASSED/SKIPPED -- test_405_with_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.58790421485901s cumulative, 0.004826545715332031s individual

.
current test PASSED/SKIPPED -- test_no_description_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.5928897857666s cumulative, 0.0049855709075927734s individual

.
current test PASSED/SKIPPED -- test_epic_fail_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.601808309555054s cumulative, 0.008918523788452148s individual

.
current test PASSED/SKIPPED -- test_unicode_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.60699701309204s cumulative, 0.005188703536987305s individual

.
current test PASSED/SKIPPED -- test_serialize_error_uses_media_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.61330580711365s cumulative, 0.006308794021606445s individual

.
current test PASSED/SKIPPED -- test_414_with_title in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.6203076839447s cumulative, 0.0070018768310546875s individual

.
current test PASSED/SKIPPED -- test_temporary_413_datetime_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.62653064727783s cumulative, 0.006222963333129883s individual

.
current test PASSED/SKIPPED -- test_no_description_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.6320743560791s cumulative, 0.005543708801269531s individual

.
current test PASSED/SKIPPED -- test_custom_error_serializer in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.64198589324951s cumulative, 0.009911537170410156s individual

.
current test PASSED/SKIPPED -- test_429 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.649250745773315s cumulative, 0.007264852523803711s individual

.
current test PASSED/SKIPPED -- test_invalid_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.6578426361084s cumulative, 0.008591890335083008s individual

.
current test PASSED/SKIPPED -- test_429_no_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.663813829422s cumulative, 0.005971193313598633s individual

.
current test PASSED/SKIPPED -- test_414_with_title in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.67048716545105s cumulative, 0.006673336029052734s individual

.
current test PASSED/SKIPPED -- test_414_with_custom_kwargs in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.67611861228943s cumulative, 0.005631446838378906s individual

.
current test PASSED/SKIPPED -- test_no_description_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.68056893348694s cumulative, 0.004450321197509766s individual

.
current test PASSED/SKIPPED -- test_503_datetime_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.686344385147095s cumulative, 0.00577545166015625s individual

.
current test PASSED/SKIPPED -- test_client_does_not_accept_json_or_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.6915283203125s cumulative, 0.0051839351654052734s individual

.
current test PASSED/SKIPPED -- test_custom_error_serializer in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.69871377944946s cumulative, 0.007185459136962891s individual

.
current test PASSED/SKIPPED -- test_custom_serializer_no_representation in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.70353412628174s cumulative, 0.004820346832275391s individual

.
current test PASSED/SKIPPED -- test_410_with_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.709041595458984s cumulative, 0.005507469177246094s individual

.
current test PASSED/SKIPPED -- test_forbidden in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.71432852745056s cumulative, 0.0052869319915771484s individual

.
current test PASSED/SKIPPED -- test_custom_error_serializer_optional_representation in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.7197699546814s cumulative, 0.005441427230834961s individual

.
current test PASSED/SKIPPED -- test_410_with_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.72427797317505s cumulative, 0.004508018493652344s individual

.
current test PASSED/SKIPPED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.72959923744202s cumulative, 0.0053212642669677734s individual

.
current test PASSED/SKIPPED -- test_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.734209060668945s cumulative, 0.004609823226928711s individual

.
current test PASSED/SKIPPED -- test_forbidden in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.73912072181702s cumulative, 0.004911661148071289s individual

.
current test PASSED/SKIPPED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.74367380142212s cumulative, 0.004553079605102539s individual

.
current test PASSED/SKIPPED -- test_custom_error_serializer_optional_representation in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.749112129211426s cumulative, 0.005438327789306641s individual

.
current test PASSED/SKIPPED -- test_405_with_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.75434708595276s cumulative, 0.005234956741333008s individual

.
current test PASSED/SKIPPED -- test_401 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.762845277786255s cumulative, 0.008498191833496094s individual

.
current test PASSED/SKIPPED -- test_epic_fail_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.76796770095825s cumulative, 0.00512242317199707s individual

.
current test PASSED/SKIPPED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.77410364151001s cumulative, 0.0061359405517578125s individual

.
current test PASSED/SKIPPED -- test_405_without_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.77989649772644s cumulative, 0.005792856216430664s individual

.
current test PASSED/SKIPPED -- test_serialize_no_json_media_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.7852840423584s cumulative, 0.005387544631958008s individual

.
current test PASSED/SKIPPED -- test_base_class in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.79005551338196s cumulative, 0.00477147102355957s individual

.
current test PASSED/SKIPPED -- test_413 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.797529458999634s cumulative, 0.007473945617675781s individual

.
current test PASSED/SKIPPED -- test_epic_fail_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.80324196815491s cumulative, 0.0057125091552734375s individual

.
current test PASSED/SKIPPED -- test_epic_fail_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.80890202522278s cumulative, 0.005660057067871094s individual

.
current test PASSED/SKIPPED -- test_401 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.81428027153015s cumulative, 0.005378246307373047s individual

.
current test PASSED/SKIPPED -- test_missing_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.81904673576355s cumulative, 0.0047664642333984375s individual

.
current test PASSED/SKIPPED -- test_429_no_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.8237943649292s cumulative, 0.004747629165649414s individual

.
current test PASSED/SKIPPED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.83198928833008s cumulative, 0.008194923400878906s individual

.
current test PASSED/SKIPPED -- test_epic_fail_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.83721375465393s cumulative, 0.005224466323852539s individual

.
current test PASSED/SKIPPED -- test_to_json_dumps in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.84098672866821s cumulative, 0.0037729740142822266s individual

.
current test PASSED/SKIPPED -- test_405_without_body_with_extra_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.84770631790161s cumulative, 0.0067195892333984375s individual

.
current test PASSED/SKIPPED -- test_missing_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.853296756744385s cumulative, 0.0055904388427734375s individual

.
current test PASSED/SKIPPED -- test_unicode_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.859293699264526s cumulative, 0.0059969425201416016s individual

.
current test PASSED/SKIPPED -- test_epic_fail_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.86447763442993s cumulative, 0.0051839351654052734s individual

.
current test PASSED/SKIPPED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.86927604675293s cumulative, 0.004798412322998047s individual

.
current test PASSED/SKIPPED -- test_forbidden in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.87427806854248s cumulative, 0.005002021789550781s individual

.
current test PASSED/SKIPPED -- test_404_with_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 32.87872362136841s cumulative, 0.004445552825927734s individual


tests/asgi/test_request_context_asgi.py .
current test PASSED/SKIPPED -- test_custom_request_context_failure in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_context_asgi.py: 32.88156771659851s cumulative, 0.002844095230102539s individual

.
current test PASSED/SKIPPED -- test_custom_request_context_request_access in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_context_asgi.py: 32.88450479507446s cumulative, 0.0029370784759521484s individual

.
current test PASSED/SKIPPED -- test_custom_request_context in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_context_asgi.py: 32.88718628883362s cumulative, 0.0026814937591552734s individual

.
current test PASSED/SKIPPED -- test_default_request_context in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_context_asgi.py: 32.889864683151245s cumulative, 0.002678394317626953s individual


tests/asgi/test_asgi_servers.py INFO:     127.0.0.1:34114 - "GET / HTTP/1.1" 200 OK
INFO:     127.0.0.1:34120 - "POST /forms HTTP/1.1" 200 OK

[Starting server process...]
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_post_multipart_form in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 34.59204411506653s cumulative, 1.7021794319152832s individual


tests/test_uri_templates_legacy.py .
current test PASSED/SKIPPED -- test_one_field in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 34.59947466850281s cumulative, 0.007430553436279297s individual

.
current test PASSED/SKIPPED -- test_template_may_not_contain_double_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 34.604900598526s cumulative, 0.005425930023193359s individual

.
current test PASSED/SKIPPED -- test_template_must_start_with_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 34.6080105304718s cumulative, 0.0031099319458007812s individual

.
current test PASSED/SKIPPED -- test_template_may_not_contain_double_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 34.61168313026428s cumulative, 0.0036725997924804688s individual

.
current test PASSED/SKIPPED -- test_template_may_not_contain_double_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 34.61456322669983s cumulative, 0.002880096435546875s individual

.
current test PASSED/SKIPPED -- test_no_fields in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 34.61840605735779s cumulative, 0.0038428306579589844s individual

.
current test PASSED/SKIPPED -- test_malformed_field in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 34.621299266815186s cumulative, 0.002893209457397461s individual

.
current test PASSED/SKIPPED -- test_one_field_with_digits in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 34.624900341033936s cumulative, 0.00360107421875s individual

.
current test PASSED/SKIPPED -- test_no_fields in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 34.628151416778564s cumulative, 0.0032510757446289062s individual

.
current test PASSED/SKIPPED -- test_three_fields in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 34.63155913352966s cumulative, 0.003407716751098633s individual

.
current test PASSED/SKIPPED -- test_deprecated_warning in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 34.636839389801025s cumulative, 0.005280256271362305s individual

.
current test PASSED/SKIPPED -- test_string_type_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 34.63983488082886s cumulative, 0.0029954910278320312s individual

.
current test PASSED/SKIPPED -- test_template_may_not_contain_double_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 34.64284372329712s cumulative, 0.0030088424682617188s individual

.
current test PASSED/SKIPPED -- test_root in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 34.64548468589783s cumulative, 0.002640962600708008s individual

.
current test PASSED/SKIPPED -- test_two_fields in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 34.64894676208496s cumulative, 0.003462076187133789s individual

.
current test PASSED/SKIPPED -- test_template_must_start_with_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 34.65231108665466s cumulative, 0.0033643245697021484s individual

.
current test PASSED/SKIPPED -- test_no_fields in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 34.65574622154236s cumulative, 0.0034351348876953125s individual

.
current test PASSED/SKIPPED -- test_template_may_not_contain_double_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 34.65861511230469s cumulative, 0.0028688907623291016s individual

.
current test PASSED/SKIPPED -- test_two_fields in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 34.66150093078613s cumulative, 0.0028858184814453125s individual

.
current test PASSED/SKIPPED -- test_template_may_not_contain_double_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 34.66440272331238s cumulative, 0.002901792526245117s individual

.
current test PASSED/SKIPPED -- test_one_field_with_prefixed_digits in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 34.66708254814148s cumulative, 0.0026798248291015625s individual

.
current test PASSED/SKIPPED -- test_string_type_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 34.669766426086426s cumulative, 0.002683877944946289s individual


tests/asgi/test_buffered_reader.py .
current test PASSED/SKIPPED -- test_irregular_large_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 36.61890649795532s cumulative, 1.9491400718688965s individual

.
current test PASSED/SKIPPED -- test_varying_read_size in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 40.774314165115356s cumulative, 4.155407667160034s individual


tests/asgi/test_scheduled_callbacks.py .
current test PASSED/SKIPPED -- test_callback in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scheduled_callbacks.py: 40.847593545913696s cumulative, 0.07327938079833984s individual

.
current test PASSED/SKIPPED -- test_callback in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scheduled_callbacks.py: 40.8621289730072s cumulative, 0.01453542709350586s individual

.
current test PASSED/SKIPPED -- test_callback in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scheduled_callbacks.py: 40.87103796005249s cumulative, 0.008908987045288086s individual

.
current test PASSED/SKIPPED -- test_callback in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scheduled_callbacks.py: 40.87830448150635s cumulative, 0.007266521453857422s individual


tests/test_response_body.py .
current test PASSED/SKIPPED -- test_append_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 40.88173198699951s cumulative, 0.0034275054931640625s individual

.
current test PASSED/SKIPPED -- test_content_length_not_set_when_streaming_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 40.88693976402283s cumulative, 0.00520777702331543s individual

.
current test PASSED/SKIPPED -- test_content_length_not_set_when_streaming_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 40.89155316352844s cumulative, 0.004613399505615234s individual

.
current test PASSED/SKIPPED -- test_response_repr in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 40.894901752471924s cumulative, 0.0033485889434814453s individual

.
current test PASSED/SKIPPED -- test_content_length_not_set_when_streaming_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 40.899821281433105s cumulative, 0.004919528961181641s individual

.
current test PASSED/SKIPPED -- test_response_repr in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 40.90318036079407s cumulative, 0.003359079360961914s individual

.
current test PASSED/SKIPPED -- test_content_length_not_set_when_streaming_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 40.908743381500244s cumulative, 0.005563020706176758s individual

.
current test PASSED/SKIPPED -- test_append_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 40.912814140319824s cumulative, 0.004070758819580078s individual

.
current test PASSED/SKIPPED -- test_unsupported_response_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 40.917457818984985s cumulative, 0.004643678665161133s individual

.
current test PASSED/SKIPPED -- test_response_body_rendition_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 40.92262005805969s cumulative, 0.005162239074707031s individual

.
current test PASSED/SKIPPED -- test_content_length_set_on_head_with_no_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 40.92734360694885s cumulative, 0.004723548889160156s individual


tests/asgi/test_ws.py .
current test PASSED/SKIPPED -- test_echo in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 51.14514636993408s cumulative, 10.21780276298523s individual


tests/test_wsgi_servers.py INFO:     127.0.0.1:60620 - "GET /hello HTTP/1.1" 200 OK
INFO:     127.0.0.1:60628 - "POST /forms HTTP/1.1" 200 OK
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 56791 --interface wsgi _wsgi_test_app:app
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_post_multipart_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 52.496265172958374s cumulative, 1.351118803024292s individual


tests/asgi/test_ws.py .
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.508445262908936s cumulative, 0.012180089950561523s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.51446461677551s cumulative, 0.0060193538665771484s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.52020239830017s cumulative, 0.005737781524658203s individual

.
current test PASSED/SKIPPED -- test_accept_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.52516222000122s cumulative, 0.004959821701049805s individual

.
current test PASSED/SKIPPED -- test_bad_first_event in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.529534339904785s cumulative, 0.004372119903564453s individual

.
current test PASSED/SKIPPED -- test_accept_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.53424334526062s cumulative, 0.004709005355834961s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.539494037628174s cumulative, 0.005250692367553711s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.545737504959106s cumulative, 0.006243467330932617s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.551239252090454s cumulative, 0.005501747131347656s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.55620074272156s cumulative, 0.004961490631103516s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.56259083747864s cumulative, 0.006390094757080078s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.5689423084259s cumulative, 0.006351470947265625s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.574270248413086s cumulative, 0.005327939987182617s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.58202934265137s cumulative, 0.00775909423828125s individual

.
current test PASSED/SKIPPED -- test_ws_base_not_implemented in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.58471155166626s cumulative, 0.002682209014892578s individual

.
current test PASSED/SKIPPED -- test_path_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.58996295928955s cumulative, 0.005251407623291016s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.595195055007935s cumulative, 0.005232095718383789s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.604623317718506s cumulative, 0.009428262710571289s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.61231088638306s cumulative, 0.007687568664550781s individual

.
current test PASSED/SKIPPED -- test_bad_spec_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.616833209991455s cumulative, 0.0045223236083984375s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.627094984054565s cumulative, 0.010261774063110352s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.63366770744324s cumulative, 0.006572723388671875s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.6393358707428s cumulative, 0.005668163299560547s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.64592623710632s cumulative, 0.006590366363525391s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.65172076225281s cumulative, 0.005794525146484375s individual

.
current test PASSED/SKIPPED -- test_bad_spec_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.65585994720459s cumulative, 0.0041391849517822266s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.66271638870239s cumulative, 0.006856441497802734s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.669039249420166s cumulative, 0.0063228607177734375s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.6753785610199s cumulative, 0.006339311599731445s individual

.
current test PASSED/SKIPPED -- test_media in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.68449807167053s cumulative, 0.009119510650634766s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.68973398208618s cumulative, 0.005235910415649414s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.6945526599884s cumulative, 0.00481867790222168s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.70175242424011s cumulative, 0.007199764251708984s individual

.
current test PASSED/SKIPPED -- test_ws_not_accepted in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.7065532207489s cumulative, 0.0048007965087890625s individual

.
current test PASSED/SKIPPED -- test_accept_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.71134662628174s cumulative, 0.004793405532836914s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.71703100204468s cumulative, 0.005684375762939453s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.721765995025635s cumulative, 0.004734992980957031s individual

.
current test PASSED/SKIPPED -- test_subprotocol in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.726433992385864s cumulative, 0.004667997360229492s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.73203086853027s cumulative, 0.00559687614440918s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.73798727989197s cumulative, 0.005956411361694336s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.74389576911926s cumulative, 0.005908489227294922s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.74964261054993s cumulative, 0.0057468414306640625s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.75543975830078s cumulative, 0.005797147750854492s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.76263880729675s cumulative, 0.00719904899597168s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.76820516586304s cumulative, 0.00556635856628418s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.77289390563965s cumulative, 0.004688739776611328s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.77801299095154s cumulative, 0.0051190853118896484s individual

.
current test PASSED/SKIPPED -- test_send_receive_data in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.783336877822876s cumulative, 0.005323886871337891s individual

.
current test PASSED/SKIPPED -- test_missing_spec_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.786792039871216s cumulative, 0.0034551620483398438s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.79148292541504s cumulative, 0.004690885543823242s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.79647874832153s cumulative, 0.004995822906494141s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.80456733703613s cumulative, 0.00808858871459961s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.80957531929016s cumulative, 0.00500798225402832s individual

.
current test PASSED/SKIPPED -- test_media in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.81565451622009s cumulative, 0.006079196929931641s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.820451736450195s cumulative, 0.004797220230102539s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.826059341430664s cumulative, 0.00560760498046875s individual

.
current test PASSED/SKIPPED -- test_accept_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.830607891082764s cumulative, 0.004548549652099609s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.83533549308777s cumulative, 0.004727602005004883s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.8406126499176s cumulative, 0.005277156829833984s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.846055030822754s cumulative, 0.005442380905151367s individual

.
current test PASSED/SKIPPED -- test_bad_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.84985971450806s cumulative, 0.0038046836853027344s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.856300592422485s cumulative, 0.006440877914428711s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.86376190185547s cumulative, 0.0074613094329833984s individual

.
current test PASSED/SKIPPED -- test_media in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.87079334259033s cumulative, 0.007031440734863281s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.87791132926941s cumulative, 0.0071179866790771484s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.88365602493286s cumulative, 0.0057446956634521484s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.89024615287781s cumulative, 0.006590127944946289s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.89760208129883s cumulative, 0.007355928421020508s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.90262460708618s cumulative, 0.005022525787353516s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.90810751914978s cumulative, 0.005482912063598633s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.91326713562012s cumulative, 0.005159616470336914s individual

.
current test PASSED/SKIPPED -- test_send_receive_wrong_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.91787314414978s cumulative, 0.004606008529663086s individual

.
current test PASSED/SKIPPED -- test_bad_spec_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.92171883583069s cumulative, 0.003845691680908203s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.92743396759033s cumulative, 0.005715131759643555s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.932522773742676s cumulative, 0.00508880615234375s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.93779253959656s cumulative, 0.005269765853881836s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.94301199913025s cumulative, 0.005219459533691406s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.94798970222473s cumulative, 0.004977703094482422s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.95307207107544s cumulative, 0.005082368850708008s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.95811581611633s cumulative, 0.005043745040893555s individual

.
current test PASSED/SKIPPED -- test_responder_raises_unhandled_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.96361517906189s cumulative, 0.005499362945556641s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.968756675720215s cumulative, 0.005141496658325195s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.97471642494202s cumulative, 0.005959749221801758s individual

.
current test PASSED/SKIPPED -- test_unexpected_param in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.97932815551758s cumulative, 0.0046117305755615234s individual

.
current test PASSED/SKIPPED -- test_accept_with_headers_not_supported in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.98349118232727s cumulative, 0.004163026809692383s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.989004135131836s cumulative, 0.00551295280456543s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.99385094642639s cumulative, 0.004846811294555664s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 52.99865102767944s cumulative, 0.004800081253051758s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.003939151763916s cumulative, 0.005288124084472656s individual

.
current test PASSED/SKIPPED -- test_accept_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.00845503807068s cumulative, 0.004515886306762695s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.01361083984375s cumulative, 0.005155801773071289s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.0184600353241s cumulative, 0.00484919548034668s individual

.
current test PASSED/SKIPPED -- test_mw_methods_must_be_coroutines in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.026785135269165s cumulative, 0.00832509994506836s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.03195548057556s cumulative, 0.005170345306396484s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.0364887714386s cumulative, 0.004533290863037109s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.041749000549316s cumulative, 0.0052602291107177734s individual

.
current test PASSED/SKIPPED -- test_subprotocol in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.046215295791626s cumulative, 0.00446629524230957s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.05133509635925s cumulative, 0.005119800567626953s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.057193994522095s cumulative, 0.005858898162841797s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.0621452331543s cumulative, 0.0049512386322021484s individual

.
current test PASSED/SKIPPED -- test_subprotocol_bad_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.06660318374634s cumulative, 0.004457950592041016s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.07191729545593s cumulative, 0.0053141117095947266s individual

.
current test PASSED/SKIPPED -- test_subprotocol_bad_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.07662081718445s cumulative, 0.004703521728515625s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.08167624473572s cumulative, 0.005055427551269531s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.08680057525635s cumulative, 0.005124330520629883s individual

.
current test PASSED/SKIPPED -- test_accept_with_bad_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.09106802940369s cumulative, 0.004267454147338867s individual

.
current test PASSED/SKIPPED -- test_media in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.096750259399414s cumulative, 0.005682229995727539s individual

.
current test PASSED/SKIPPED -- test_subprotocol in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.10166835784912s cumulative, 0.004918098449707031s individual

.
current test PASSED/SKIPPED -- test_ws_simulator_client_require_accepted in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.10595941543579s cumulative, 0.004291057586669922s individual

.
current test PASSED/SKIPPED -- test_subprotocol_bad_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.110774517059326s cumulative, 0.004815101623535156s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.116764307022095s cumulative, 0.005989789962768555s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.1216516494751s cumulative, 0.00488734245300293s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.126715898513794s cumulative, 0.005064249038696289s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.13221192359924s cumulative, 0.005496025085449219s individual

.
current test PASSED/SKIPPED -- test_subprotocol_bad_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.137012004852295s cumulative, 0.004800081253051758s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.14167833328247s cumulative, 0.004666328430175781s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.147822856903076s cumulative, 0.006144523620605469s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.15522861480713s cumulative, 0.007405757904052734s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.16059851646423s cumulative, 0.005369901657104492s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.1662015914917s cumulative, 0.00560307502746582s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.171162366867065s cumulative, 0.004960775375366211s individual

.
current test PASSED/SKIPPED -- test_send_receive_data in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.176071882247925s cumulative, 0.004909515380859375s individual

.
current test PASSED/SKIPPED -- test_accept_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.18251180648804s cumulative, 0.006439924240112305s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.188395261764526s cumulative, 0.005883455276489258s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.19538450241089s cumulative, 0.006989240646362305s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.20287084579468s cumulative, 0.0074863433837890625s individual

.
current test PASSED/SKIPPED -- test_subprotocol_bad_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.21076059341431s cumulative, 0.007889747619628906s individual

.
current test PASSED/SKIPPED -- test_send_receive_data in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.21840500831604s cumulative, 0.0076444149017333984s individual

.
current test PASSED/SKIPPED -- test_subprotocol in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.229674100875854s cumulative, 0.011269092559814453s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.23504948616028s cumulative, 0.005375385284423828s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.23974943161011s cumulative, 0.0046999454498291016s individual

.
current test PASSED/SKIPPED -- test_send_receive_data in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.244895935058594s cumulative, 0.005146503448486328s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.24996876716614s cumulative, 0.005072832107543945s individual

.
current test PASSED/SKIPPED -- test_translate_webserver_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.25423979759216s cumulative, 0.004271030426025391s individual

.
current test PASSED/SKIPPED -- test_responder_raises_unhandled_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.25908422470093s cumulative, 0.0048444271087646484s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.2640962600708s cumulative, 0.005012035369873047s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.26891851425171s cumulative, 0.004822254180908203s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.27434492111206s cumulative, 0.0054264068603515625s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.28163146972656s cumulative, 0.007286548614501953s individual

.
current test PASSED/SKIPPED -- test_bad_spec_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.28778862953186s cumulative, 0.0061571598052978516s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.29439902305603s cumulative, 0.006610393524169922s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.29928660392761s cumulative, 0.004887580871582031s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.30433797836304s cumulative, 0.005051374435424805s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.30953359603882s cumulative, 0.00519561767578125s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.31455159187317s cumulative, 0.005017995834350586s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.31933522224426s cumulative, 0.00478363037109375s individual

.
current test PASSED/SKIPPED -- test_bad_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.32312035560608s cumulative, 0.0037851333618164062s individual

.
current test PASSED/SKIPPED -- test_missing_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.32738018035889s cumulative, 0.004259824752807617s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.33206915855408s cumulative, 0.00468897819519043s individual

.
current test PASSED/SKIPPED -- test_ws_simulator_collect_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.338826179504395s cumulative, 0.006757020950317383s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.3443500995636s cumulative, 0.0055239200592041016s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.3490936756134s cumulative, 0.0047435760498046875s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.355000734329224s cumulative, 0.0059070587158203125s individual

.
current test PASSED/SKIPPED -- test_accept_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.35989832878113s cumulative, 0.004897594451904297s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.36568737030029s cumulative, 0.005789041519165039s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.37215781211853s cumulative, 0.006470441818237305s individual

.
current test PASSED/SKIPPED -- test_missing_ws_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.37683153152466s cumulative, 0.00467371940612793s individual

.
current test PASSED/SKIPPED -- test_accept_with_bad_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.38163876533508s cumulative, 0.004807233810424805s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.386258363723755s cumulative, 0.004619598388671875s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.39132237434387s cumulative, 0.0050640106201171875s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.39694046974182s cumulative, 0.005618095397949219s individual

.
current test PASSED/SKIPPED -- test_subprotocol_bad_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.401729583740234s cumulative, 0.004789113998413086s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.406705379486084s cumulative, 0.004975795745849609s individual

.
current test PASSED/SKIPPED -- test_accept_with_bad_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.41151404380798s cumulative, 0.004808664321899414s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.418731927871704s cumulative, 0.007217884063720703s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.423948764801025s cumulative, 0.005216836929321289s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.43216037750244s cumulative, 0.008211612701416016s individual

.
current test PASSED/SKIPPED -- test_ws_not_accepted in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 53.43722462654114s cumulative, 0.005064249038696289s individual


tests/test_buffered_reader.py .
current test PASSED/SKIPPED -- test_pipe_until_without_destination in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 53.61583399772644s cumulative, 0.17860937118530273s individual


tests/test_sink_and_static.py .
current test PASSED/SKIPPED -- test_sink_after_static_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_sink_and_static.py: 53.62731862068176s cumulative, 0.011484622955322266s individual

.
current test PASSED/SKIPPED -- test_sink_before_static_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_sink_and_static.py: 53.6343777179718s cumulative, 0.0070590972900390625s individual

.
current test PASSED/SKIPPED -- test_sink_before_static_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_sink_and_static.py: 53.640268325805664s cumulative, 0.005890607833862305s individual

.
current test PASSED/SKIPPED -- test_sink_after_static_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_sink_and_static.py: 53.64971375465393s cumulative, 0.009445428848266602s individual


tests/test_buffered_reader.py .
current test PASSED/SKIPPED -- test_fragmented_reads in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 55.164921283721924s cumulative, 1.5152075290679932s individual


tests/test_request_context.py .
current test PASSED/SKIPPED -- test_custom_request_context_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_context.py: 55.17039108276367s cumulative, 0.005469799041748047s individual

.
current test PASSED/SKIPPED -- test_default_request_context in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_context.py: 55.174516916275024s cumulative, 0.004125833511352539s individual

.
current test PASSED/SKIPPED -- test_custom_request_context in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_context.py: 55.17838740348816s cumulative, 0.0038704872131347656s individual

.
current test PASSED/SKIPPED -- test_custom_request_context_request_access in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_context.py: 55.182453870773315s cumulative, 0.00406646728515625s individual


tests/test_buffered_reader.py .
current test PASSED/SKIPPED -- test_irregular_large_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 57.795727014541626s cumulative, 2.6132731437683105s individual

.
current test PASSED/SKIPPED -- test_irregular_large_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 60.222100496292114s cumulative, 2.4263734817504883s individual


tests/asgi/test_sse.py .
current test PASSED/SKIPPED -- test_multiple_events in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_sse.py: 60.24631881713867s cumulative, 0.024218320846557617s individual

.
current test PASSED/SKIPPED -- test_use_media_handler_dumps in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_sse.py: 60.25438451766968s cumulative, 0.00806570053100586s individual

.
current test PASSED/SKIPPED -- test_no_json_media_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_sse.py: 60.261422634124756s cumulative, 0.007038116455078125s individual

.
current test PASSED/SKIPPED -- test_non_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_sse.py: 60.267951011657715s cumulative, 0.006528377532958984s individual

.
current test PASSED/SKIPPED -- test_single_event in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_sse.py: 60.2750940322876s cumulative, 0.0071430206298828125s individual

.
current test PASSED/SKIPPED -- test_invalid_event_values in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_sse.py: 60.27815532684326s cumulative, 0.0030612945556640625s individual

.
current test PASSED/SKIPPED -- test_no_events in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_sse.py: 60.28854155540466s cumulative, 0.010386228561401367s individual


tests/test_buffered_reader.py .
current test PASSED/SKIPPED -- test_pipe_until in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 60.9602165222168s cumulative, 0.6716749668121338s individual


tests/test_default_router.py .
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 60.98275113105774s cumulative, 0.022534608840942383s individual


tests/test_alias.py .
current test PASSED/SKIPPED -- test_cookies in /home/kaiyaok2/PythonProjects/falcon/tests/test_alias.py: 60.99165463447571s cumulative, 0.00890350341796875s individual

.
current test PASSED/SKIPPED -- test_alias_equals_to_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_alias.py: 60.996195793151855s cumulative, 0.004541158676147461s individual


tests/asgi/test_lifespan_handlers.py .
current test PASSED/SKIPPED -- test_asgi_conductor_raised_error_skips_shutdown in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_lifespan_handlers.py: 61.0014111995697s cumulative, 0.00521540641784668s individual

.
current test PASSED/SKIPPED -- test_shutdown_only in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_lifespan_handlers.py: 61.0075101852417s cumulative, 0.00609898567199707s individual

.
current test PASSED/SKIPPED -- test_multiple_handlers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_lifespan_handlers.py: 61.01401615142822s cumulative, 0.0065059661865234375s individual

.
current test PASSED/SKIPPED -- test_startup_only in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_lifespan_handlers.py: 61.01839327812195s cumulative, 0.004377126693725586s individual

.
current test PASSED/SKIPPED -- test_shutdown_raises in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_lifespan_handlers.py: 61.02395796775818s cumulative, 0.005564689636230469s individual

.
current test PASSED/SKIPPED -- test_startup_raises in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_lifespan_handlers.py: 61.0285427570343s cumulative, 0.004584789276123047s individual

.
current test PASSED/SKIPPED -- test_at_least_one_event_method_required in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_lifespan_handlers.py: 61.031734466552734s cumulative, 0.003191709518432617s individual


tests/asgi/test_asgi_servers.py INFO:     127.0.0.1:35694 - "GET / HTTP/1.1" 200 OK
INFO:     127.0.0.1:35696 - "PUT / HTTP/1.1" 200 OK

[Starting server process...]
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_put in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 63.44142150878906s cumulative, 2.409687042236328s individual

INFO:     127.0.0.1:39314 - "GET / HTTP/1.1" 200 OK

[Starting server process...]
closed
.on_websocket:send_text
on_websocket:send_text
on_websocket:WebSocketDisconnected

[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_disconnecting_client_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 65.66881108283997s cumulative, 2.2273895740509033s individual


tests/asgi/test_asgi_conductor.py .
current test PASSED/SKIPPED -- test_generic_request in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 65.67870140075684s cumulative, 0.009890317916870117s individual

.
current test PASSED/SKIPPED -- test_generic_request in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 65.68337535858154s cumulative, 0.004673957824707031s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 65.68812656402588s cumulative, 0.0047512054443359375s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 65.6925060749054s cumulative, 0.0043795108795166016s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 65.69748139381409s cumulative, 0.004975318908691406s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 65.70175695419312s cumulative, 0.00427556037902832s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 65.70604276657104s cumulative, 0.0042858123779296875s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 65.71029925346375s cumulative, 0.004256486892700195s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 65.71515417098999s cumulative, 0.004854917526245117s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 65.72120308876038s cumulative, 0.006048917770385742s individual

.
current test PASSED/SKIPPED -- test_default_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 65.72744417190552s cumulative, 0.0062410831451416016s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 65.7321629524231s cumulative, 0.004718780517578125s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 65.74046325683594s cumulative, 0.008300304412841797s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 65.74487209320068s cumulative, 0.004408836364746094s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 65.7492105960846s cumulative, 0.004338502883911133s individual

.
current test PASSED/SKIPPED -- test_wsgi_not_supported in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 65.7532091140747s cumulative, 0.003998517990112305s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 65.75776028633118s cumulative, 0.0045511722564697266s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 65.76189684867859s cumulative, 0.004136562347412109s individual


tests/test_query_params.py .
current test PASSED/SKIPPED -- test_explicitly_disable_auto_parse in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 65.7665069103241s cumulative, 0.0046100616455078125s individual

.
current test PASSED/SKIPPED -- test_http_methods_body_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 65.77096438407898s cumulative, 0.0044574737548828125s individual

.
current test PASSED/SKIPPED -- test_http_methods_body_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 65.77542352676392s cumulative, 0.0044591426849365234s individual

.
current test PASSED/SKIPPED -- test_http_methods_body_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 65.77978205680847s cumulative, 0.004358530044555664s individual

.
current test PASSED/SKIPPED -- test_http_methods_body_not_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 65.7849428653717s cumulative, 0.005160808563232422s individual

.
current test PASSED/SKIPPED -- test_http_methods_body_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 65.78930521011353s cumulative, 0.004362344741821289s individual

.
current test PASSED/SKIPPED -- test_empty_body_no_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 65.79352879524231s cumulative, 0.00422358512878418s individual

.
current test PASSED/SKIPPED -- test_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 65.79780173301697s cumulative, 0.004272937774658203s individual

.
current test PASSED/SKIPPED -- test_http_methods_body_not_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 65.80211997032166s cumulative, 0.0043182373046875s individual

.
current test PASSED/SKIPPED -- test_non_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 65.80717921257019s cumulative, 0.005059242248535156s individual

.
current test PASSED/SKIPPED -- test_http_methods_body_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 65.81171178817749s cumulative, 0.004532575607299805s individual

.
current test PASSED/SKIPPED -- test_get_param_as_json_no_handler_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 65.81638097763062s cumulative, 0.004669189453125s individual

.
current test PASSED/SKIPPED -- test_get_param_as_json_handler_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 65.82072901725769s cumulative, 0.004348039627075195s individual

.
current test PASSED/SKIPPED -- test_dont_auto_parse_by_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 65.82469701766968s cumulative, 0.003968000411987305s individual


tests/test_compiled_router.py .
current test PASSED/SKIPPED -- test_no_compile_kw in /home/kaiyaok2/PythonProjects/falcon/tests/test_compiled_router.py: 65.8290605545044s cumulative, 0.004363536834716797s individual

.
current test PASSED/SKIPPED -- test_no_compile_kw in /home/kaiyaok2/PythonProjects/falcon/tests/test_compiled_router.py: 65.83255696296692s cumulative, 0.003496408462524414s individual

.
current test PASSED/SKIPPED -- test_no_compile_kw in /home/kaiyaok2/PythonProjects/falcon/tests/test_compiled_router.py: 65.83605599403381s cumulative, 0.0034990310668945312s individual

.
current test PASSED/SKIPPED -- test_add_route_after_first_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_compiled_router.py: 65.83931231498718s cumulative, 0.0032563209533691406s individual

.
current test PASSED/SKIPPED -- test_find_src in /home/kaiyaok2/PythonProjects/falcon/tests/test_compiled_router.py: 65.84205746650696s cumulative, 0.0027451515197753906s individual

.
current test PASSED/SKIPPED -- test_converter_not_subclass in /home/kaiyaok2/PythonProjects/falcon/tests/test_compiled_router.py: 65.84552931785583s cumulative, 0.003471851348876953s individual

.
current test PASSED/SKIPPED -- test_cannot_replace_compiled in /home/kaiyaok2/PythonProjects/falcon/tests/test_compiled_router.py: 65.84853005409241s cumulative, 0.0030007362365722656s individual

.
current test PASSED/SKIPPED -- test_no_compile_kw in /home/kaiyaok2/PythonProjects/falcon/tests/test_compiled_router.py: 65.85316371917725s cumulative, 0.004633665084838867s individual

.
current test PASSED/SKIPPED -- test_compile in /home/kaiyaok2/PythonProjects/falcon/tests/test_compiled_router.py: 65.85781121253967s cumulative, 0.004647493362426758s individual


tests/test_testing.py .
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 65.86219549179077s cumulative, 0.004384279251098633s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 65.8661880493164s cumulative, 0.003992557525634766s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 65.87058734893799s cumulative, 0.004399299621582031s individual

.
current test PASSED/SKIPPED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 65.87471318244934s cumulative, 0.004125833511352539s individual

.
current test PASSED/SKIPPED -- test_simulate_request_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 65.88097405433655s cumulative, 0.006260871887207031s individual

.
current test PASSED/SKIPPED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 65.88490033149719s cumulative, 0.003926277160644531s individual

.
current test PASSED/SKIPPED -- test_cookies_jar in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 65.88932085037231s cumulative, 0.00442051887512207s individual

.
current test PASSED/SKIPPED -- test_closed_wsgi_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 65.89196252822876s cumulative, 0.0026416778564453125s individual

.
current test PASSED/SKIPPED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 65.89625430107117s cumulative, 0.0042917728424072266s individual

.
current test PASSED/SKIPPED -- test_create_environ_cookies in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 65.89891529083252s cumulative, 0.002660989761352539s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 65.90284943580627s cumulative, 0.003934144973754883s individual

.
current test PASSED/SKIPPED -- test_closed_wsgi_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 65.9054765701294s cumulative, 0.002627134323120117s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 65.9088842868805s cumulative, 0.003407716751098633s individual

.
current test PASSED/SKIPPED -- test_testing_client_handles_wsgi_generator_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 65.9117362499237s cumulative, 0.0028519630432128906s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 65.91511678695679s cumulative, 0.0033805370330810547s individual

.
current test PASSED/SKIPPED -- test_closed_wsgi_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 65.9177520275116s cumulative, 0.0026352405548095703s individual

.
current test PASSED/SKIPPED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 65.92153024673462s cumulative, 0.003778219223022461s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 65.92483139038086s cumulative, 0.0033011436462402344s individual

.
current test PASSED/SKIPPED -- test_create_environ_cookies in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 65.92742919921875s cumulative, 0.002597808837890625s individual

.
current test PASSED/SKIPPED -- test_missing_header_is_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 65.9303126335144s cumulative, 0.002883434295654297s individual

.
current test PASSED/SKIPPED -- test_closed_wsgi_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 65.93297028541565s cumulative, 0.002657651901245117s individual

.
current test PASSED/SKIPPED -- test_create_environ_preserve_raw_uri in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 65.93544340133667s cumulative, 0.002473115921020508s individual

.
current test PASSED/SKIPPED -- test_create_environ_cookies_options_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 65.93792200088501s cumulative, 0.0024785995483398438s individual

.
current test PASSED/SKIPPED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 65.94170498847961s cumulative, 0.003782987594604492s individual

.
current test PASSED/SKIPPED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 65.945729970932s cumulative, 0.004024982452392578s individual

.
current test PASSED/SKIPPED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 65.94949340820312s cumulative, 0.003763437271118164s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 65.95280265808105s cumulative, 0.0033092498779296875s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 65.95636510848999s cumulative, 0.003562450408935547s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 65.96025848388672s cumulative, 0.0038933753967285156s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 65.964195728302s cumulative, 0.003937244415283203s individual

.
current test PASSED/SKIPPED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 65.96820187568665s cumulative, 0.004006147384643555s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 65.97246074676514s cumulative, 0.004258871078491211s individual

.
current test PASSED/SKIPPED -- test_create_environ_default_ua in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 65.97561621665955s cumulative, 0.0031554698944091797s individual

.
current test PASSED/SKIPPED -- test_create_environ_default_ua_override in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 65.97833204269409s cumulative, 0.0027158260345458984s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 65.98270583152771s cumulative, 0.004373788833618164s individual


tests/test_cookies.py .
current test PASSED/SKIPPED -- test_cookies_setable in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 65.98770070075989s cumulative, 0.004994869232177734s individual

.
current test PASSED/SKIPPED -- test_duplicate_cookie in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 65.99078965187073s cumulative, 0.0030889511108398438s individual

.
current test PASSED/SKIPPED -- test_unset_cookies in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 66.00547575950623s cumulative, 0.014686107635498047s individual

.
current test PASSED/SKIPPED -- test_request_cookie_parsing in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 66.00829005241394s cumulative, 0.0028142929077148438s individual

.
current test PASSED/SKIPPED -- test_cookie_max_age_float_and_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 66.01414847373962s cumulative, 0.005858421325683594s individual

.
current test PASSED/SKIPPED -- test_unset_cookies in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 66.02199912071228s cumulative, 0.00785064697265625s individual

.
current test PASSED/SKIPPED -- test_response_complex_case in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 66.02740001678467s cumulative, 0.005400896072387695s individual

.
current test PASSED/SKIPPED -- test_same_site_value_case_insensitive in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 66.0302140712738s cumulative, 0.002814054489135742s individual

.
current test PASSED/SKIPPED -- test_strict_same_site_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 66.03523993492126s cumulative, 0.0050258636474609375s individual

.
current test PASSED/SKIPPED -- test_unset_cookies_samesite in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 66.04379343986511s cumulative, 0.008553504943847656s individual

.
current test PASSED/SKIPPED -- test_strict_same_site_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 66.0506522655487s cumulative, 0.00685882568359375s individual

.
current test PASSED/SKIPPED -- test_same_site_empty_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 66.0557177066803s cumulative, 0.005065441131591797s individual

.
current test PASSED/SKIPPED -- test_invalid_same_site_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 66.0589668750763s cumulative, 0.0032491683959960938s individual

.
current test PASSED/SKIPPED -- test_lax_same_site_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 66.06408977508545s cumulative, 0.0051229000091552734s individual

.
current test PASSED/SKIPPED -- test_cookie_expires_aware in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 66.07039546966553s cumulative, 0.006305694580078125s individual

.
current test PASSED/SKIPPED -- test_none_same_site_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 66.07568907737732s cumulative, 0.005293607711791992s individual

.
current test PASSED/SKIPPED -- test_invalid_cookies_are_ignored in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 66.10357618331909s cumulative, 0.02788710594177246s individual

.
current test PASSED/SKIPPED -- test_response_unset_cookie in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 66.11001062393188s cumulative, 0.006434440612792969s individual

.
current test PASSED/SKIPPED -- test_response_unset_cookie in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 66.11558508872986s cumulative, 0.005574464797973633s individual

.
current test PASSED/SKIPPED -- test_response_base_case in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 66.12262606620789s cumulative, 0.007040977478027344s individual

.
current test PASSED/SKIPPED -- test_unset_cookies_samesite in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 66.13937616348267s cumulative, 0.016750097274780273s individual

.
current test PASSED/SKIPPED -- test_response_complex_case in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 66.14729070663452s cumulative, 0.007914543151855469s individual

.
current test PASSED/SKIPPED -- test_same_site_empty_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 66.1529130935669s cumulative, 0.005622386932373047s individual

.
current test PASSED/SKIPPED -- test_cookie_expires_naive in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 66.15970802307129s cumulative, 0.006794929504394531s individual

.
current test PASSED/SKIPPED -- test_cookie_max_age_float_and_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 66.16503810882568s cumulative, 0.005330085754394531s individual

.
current test PASSED/SKIPPED -- test_same_site_value_case_insensitive in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 66.16796112060547s cumulative, 0.0029230117797851562s individual

.
current test PASSED/SKIPPED -- test_response_disable_secure_globally in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 66.175785779953s cumulative, 0.00782465934753418s individual

.
current test PASSED/SKIPPED -- test_none_same_site_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 66.18147993087769s cumulative, 0.005694150924682617s individual

.
current test PASSED/SKIPPED -- test_same_site_value_case_insensitive in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 66.18431210517883s cumulative, 0.002832174301147461s individual

.
current test PASSED/SKIPPED -- test_cookie_timezone in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 66.18942594528198s cumulative, 0.005113840103149414s individual

.
current test PASSED/SKIPPED -- test_cookie_max_age_float_and_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 66.1971743106842s cumulative, 0.00774836540222168s individual

.
current test PASSED/SKIPPED -- test_cookies_setable in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 66.20207166671753s cumulative, 0.004897356033325195s individual

.
current test PASSED/SKIPPED -- test_cookie_header_is_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 66.20494484901428s cumulative, 0.0028731822967529297s individual

.
current test PASSED/SKIPPED -- test_invalid_same_site_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 66.20800447463989s cumulative, 0.0030596256256103516s individual

.
current test PASSED/SKIPPED -- test_unicode_inside_ascii_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 66.21097660064697s cumulative, 0.002972126007080078s individual

.
current test PASSED/SKIPPED -- test_invalid_same_site_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 66.21391797065735s cumulative, 0.0029413700103759766s individual

.
current test PASSED/SKIPPED -- test_same_site_value_case_insensitive in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 66.21684455871582s cumulative, 0.0029265880584716797s individual

.
current test PASSED/SKIPPED -- test_non_ascii_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 66.22012114524841s cumulative, 0.0032765865325927734s individual

.
current test PASSED/SKIPPED -- test_non_ascii_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 66.22303080558777s cumulative, 0.0029096603393554688s individual

.
current test PASSED/SKIPPED -- test_same_site_value_case_insensitive in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 66.22601270675659s cumulative, 0.002981901168823242s individual

.
current test PASSED/SKIPPED -- test_cookie_max_age_float_and_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 66.2327630519867s cumulative, 0.006750345230102539s individual

.
current test PASSED/SKIPPED -- test_cookie_timezone in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 66.2372055053711s cumulative, 0.004442453384399414s individual

.
current test PASSED/SKIPPED -- test_cookie_expires_naive in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 66.24301266670227s cumulative, 0.005807161331176758s individual

.
current test PASSED/SKIPPED -- test_lax_same_site_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 66.2492151260376s cumulative, 0.0062024593353271484s individual

.
current test PASSED/SKIPPED -- test_same_site_value_case_insensitive in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 66.2523901462555s cumulative, 0.003175020217895508s individual

.
current test PASSED/SKIPPED -- test_response_disable_secure_globally in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 66.25856828689575s cumulative, 0.006178140640258789s individual

.
current test PASSED/SKIPPED -- test_cookie_expires_aware in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 66.26423287391663s cumulative, 0.0056645870208740234s individual

.
current test PASSED/SKIPPED -- test_non_ascii_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 66.26726722717285s cumulative, 0.003034353256225586s individual

.
current test PASSED/SKIPPED -- test_response_base_case in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 66.27574944496155s cumulative, 0.008482217788696289s individual

.
current test PASSED/SKIPPED -- test_non_ascii_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 66.27977728843689s cumulative, 0.004027843475341797s individual

.
current test PASSED/SKIPPED -- test_non_ascii_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 66.28250551223755s cumulative, 0.0027282238006591797s individual

.
current test PASSED/SKIPPED -- test_non_ascii_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 66.28524780273438s cumulative, 0.002742290496826172s individual


tests/test_error.py .
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.28821182250977s cumulative, 0.002964019775390625s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.29107069969177s cumulative, 0.002858877182006836s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.29369449615479s cumulative, 0.0026237964630126953s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.29656267166138s cumulative, 0.002868175506591797s individual

.
current test PASSED/SKIPPED -- test_no_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.29985523223877s cumulative, 0.003292560577392578s individual

.
current test PASSED/SKIPPED -- test_custom_400 in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.30297470092773s cumulative, 0.0031194686889648438s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.30563735961914s cumulative, 0.00266265869140625s individual

.
current test PASSED/SKIPPED -- test_other_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.30928778648376s cumulative, 0.0036504268646240234s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.31200432777405s cumulative, 0.002716541290283203s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.31466817855835s cumulative, 0.002663850784301758s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.31869530677795s cumulative, 0.004027128219604492s individual

.
current test PASSED/SKIPPED -- test_override_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.32198929786682s cumulative, 0.0032939910888671875s individual

.
current test PASSED/SKIPPED -- test_http_error_repr in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.32445287704468s cumulative, 0.0024635791778564453s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.32736587524414s cumulative, 0.0029129981994628906s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.33008074760437s cumulative, 0.002714872360229492s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.33267426490784s cumulative, 0.002593517303466797s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.33561301231384s cumulative, 0.0029387474060058594s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.33820748329163s cumulative, 0.002594470977783203s individual

.
current test PASSED/SKIPPED -- test_override_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.34145879745483s cumulative, 0.003251314163208008s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.34417009353638s cumulative, 0.0027112960815429688s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.34688329696655s cumulative, 0.0027132034301757812s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.34946537017822s cumulative, 0.002582073211669922s individual

.
current test PASSED/SKIPPED -- test_with_retry_after_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.35240936279297s cumulative, 0.0029439926147460938s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.35501217842102s cumulative, 0.002602815628051758s individual

.
current test PASSED/SKIPPED -- test_custom_400 in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.35798287391663s cumulative, 0.0029706954956054688s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.36062455177307s cumulative, 0.0026416778564453125s individual

.
current test PASSED/SKIPPED -- test_with_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.36327981948853s cumulative, 0.0026552677154541016s individual

.
current test PASSED/SKIPPED -- test_args_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.3660740852356s cumulative, 0.0027942657470703125s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.3689215183258s cumulative, 0.002847433090209961s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.37169003486633s cumulative, 0.0027685165405273438s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.37447333335876s cumulative, 0.0027832984924316406s individual

.
current test PASSED/SKIPPED -- test_override_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.37774896621704s cumulative, 0.003275632858276367s individual

.
current test PASSED/SKIPPED -- test_other_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.3811457157135s cumulative, 0.003396749496459961s individual

.
current test PASSED/SKIPPED -- test_with_retry_after_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.38410711288452s cumulative, 0.002961397171020508s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.38758206367493s cumulative, 0.0034749507904052734s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.39246368408203s cumulative, 0.004881620407104492s individual

.
current test PASSED/SKIPPED -- test_override_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.40021276473999s cumulative, 0.007749080657958984s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.40421772003174s cumulative, 0.004004955291748047s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.40812993049622s cumulative, 0.003912210464477539s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.41183042526245s cumulative, 0.0037004947662353516s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.41496992111206s cumulative, 0.003139495849609375s individual

.
current test PASSED/SKIPPED -- test_args_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.41851234436035s cumulative, 0.0035424232482910156s individual

.
current test PASSED/SKIPPED -- test_other_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.42254900932312s cumulative, 0.004036664962768555s individual

.
current test PASSED/SKIPPED -- test_override_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.42624950408936s cumulative, 0.0037004947662353516s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.42932438850403s cumulative, 0.0030748844146728516s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.43237972259521s cumulative, 0.0030553340911865234s individual

.
current test PASSED/SKIPPED -- test_override_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.4360020160675s cumulative, 0.003622293472290039s individual

.
current test PASSED/SKIPPED -- test_other_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.43955397605896s cumulative, 0.003551959991455078s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.44251132011414s cumulative, 0.0029573440551757812s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.44559478759766s cumulative, 0.003083467483520508s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.4487042427063s cumulative, 0.003109455108642578s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.45161008834839s cumulative, 0.0029058456420898438s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.45454668998718s cumulative, 0.0029366016387939453s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.45797777175903s cumulative, 0.003431081771850586s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.46089935302734s cumulative, 0.002921581268310547s individual

.
current test PASSED/SKIPPED -- test_no_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.46440982818604s cumulative, 0.0035104751586914062s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.46731114387512s cumulative, 0.002901315689086914s individual

.
current test PASSED/SKIPPED -- test_override_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.47071099281311s cumulative, 0.0033998489379882812s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.47344136238098s cumulative, 0.0027303695678710938s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.47621035575867s cumulative, 0.002768993377685547s individual

.
current test PASSED/SKIPPED -- test_other_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.47967219352722s cumulative, 0.0034618377685546875s individual

.
current test PASSED/SKIPPED -- test_other_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.4831030368805s cumulative, 0.0034308433532714844s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.4858751296997s cumulative, 0.002772092819213867s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.48904538154602s cumulative, 0.0031702518463134766s individual

.
current test PASSED/SKIPPED -- test_override_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.4929187297821s cumulative, 0.0038733482360839844s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.49593949317932s cumulative, 0.003020763397216797s individual

.
current test PASSED/SKIPPED -- test_override_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.4995219707489s cumulative, 0.003582477569580078s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.50256085395813s cumulative, 0.0030388832092285156s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.50548648834229s cumulative, 0.0029256343841552734s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.50857162475586s cumulative, 0.0030851364135742188s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.51240563392639s cumulative, 0.0038340091705322266s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.51548314094543s cumulative, 0.0030775070190429688s individual

.
current test PASSED/SKIPPED -- test_custom_400 in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.51874446868896s cumulative, 0.0032613277435302734s individual

.
current test PASSED/SKIPPED -- test_no_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.52242922782898s cumulative, 0.0036847591400146484s individual

.
current test PASSED/SKIPPED -- test_with_retry_after_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.52576422691345s cumulative, 0.0033349990844726562s individual

.
current test PASSED/SKIPPED -- test_args_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.52891159057617s cumulative, 0.0031473636627197266s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.53210067749023s cumulative, 0.0031890869140625s individual

.
current test PASSED/SKIPPED -- test_args_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.53505516052246s cumulative, 0.0029544830322265625s individual

.
current test PASSED/SKIPPED -- test_with_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.53789138793945s cumulative, 0.0028362274169921875s individual

.
current test PASSED/SKIPPED -- test_no_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.54140329360962s cumulative, 0.0035119056701660156s individual

.
current test PASSED/SKIPPED -- test_other_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.54489946365356s cumulative, 0.0034961700439453125s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.54784083366394s cumulative, 0.0029413700103759766s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.55051469802856s cumulative, 0.0026738643646240234s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.55331611633301s cumulative, 0.0028014183044433594s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.55612325668335s cumulative, 0.002807140350341797s individual

.
current test PASSED/SKIPPED -- test_override_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.56081986427307s cumulative, 0.00469660758972168s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.56412553787231s cumulative, 0.003305673599243164s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.56698179244995s cumulative, 0.0028562545776367188s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.56976056098938s cumulative, 0.002778768539428711s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.57246661186218s cumulative, 0.0027060508728027344s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.57541990280151s cumulative, 0.0029532909393310547s individual

.
current test PASSED/SKIPPED -- test_override_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.57893562316895s cumulative, 0.0035157203674316406s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.58174109458923s cumulative, 0.002805471420288086s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.58486008644104s cumulative, 0.0031189918518066406s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.58781671524048s cumulative, 0.0029566287994384766s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.59093046188354s cumulative, 0.0031137466430664062s individual

.
current test PASSED/SKIPPED -- test_no_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.59475588798523s cumulative, 0.0038254261016845703s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.5977714061737s cumulative, 0.0030155181884765625s individual

.
current test PASSED/SKIPPED -- test_args_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.60107493400574s cumulative, 0.00330352783203125s individual

.
current test PASSED/SKIPPED -- test_no_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.60486006736755s cumulative, 0.0037851333618164062s individual

.
current test PASSED/SKIPPED -- test_other_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.60859990119934s cumulative, 0.0037398338317871094s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.61163854598999s cumulative, 0.003038644790649414s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.61775135993958s cumulative, 0.006112813949584961s individual

.
current test PASSED/SKIPPED -- test_other_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.62171816825867s cumulative, 0.003966808319091797s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.6245768070221s cumulative, 0.0028586387634277344s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.62736558914185s cumulative, 0.0027887821197509766s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.63008880615234s cumulative, 0.002723217010498047s individual

.
current test PASSED/SKIPPED -- test_args_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.63293671607971s cumulative, 0.002847909927368164s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.63558745384216s cumulative, 0.002650737762451172s individual

.
current test PASSED/SKIPPED -- test_other_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.63933515548706s cumulative, 0.003747701644897461s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.64228796958923s cumulative, 0.0029528141021728516s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.64509987831116s cumulative, 0.002811908721923828s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.64800095558167s cumulative, 0.0029010772705078125s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.65094876289368s cumulative, 0.0029478073120117188s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.65423727035522s cumulative, 0.0032885074615478516s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.65763926506042s cumulative, 0.0034019947052001953s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.66041707992554s cumulative, 0.0027778148651123047s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.66315984725952s cumulative, 0.002742767333984375s individual

.
current test PASSED/SKIPPED -- test_override_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.66732716560364s cumulative, 0.004167318344116211s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.6702344417572s cumulative, 0.002907276153564453s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.67312335968018s cumulative, 0.002888917922973633s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.67587924003601s cumulative, 0.002755880355834961s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.67874097824097s cumulative, 0.0028617382049560547s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.6816143989563s cumulative, 0.0028734207153320312s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.68471956253052s cumulative, 0.00310516357421875s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.68746447563171s cumulative, 0.002744913101196289s individual

.
current test PASSED/SKIPPED -- test_with_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.69055318832397s cumulative, 0.003088712692260742s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.69345045089722s cumulative, 0.0028972625732421875s individual

.
current test PASSED/SKIPPED -- test_custom_400 in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.69677376747131s cumulative, 0.0033233165740966797s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.70034122467041s cumulative, 0.0035674571990966797s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.70330858230591s cumulative, 0.002967357635498047s individual

.
current test PASSED/SKIPPED -- test_other_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.70687294006348s cumulative, 0.0035643577575683594s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.70963740348816s cumulative, 0.002764463424682617s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.7128210067749s cumulative, 0.003183603286743164s individual

.
current test PASSED/SKIPPED -- test_other_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.71644258499146s cumulative, 0.0036215782165527344s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.71923470497131s cumulative, 0.0027921199798583984s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.72187614440918s cumulative, 0.002641439437866211s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 66.72470474243164s cumulative, 0.0028285980224609375s individual


tests/test_deprecations.py .
current test PASSED/SKIPPED -- test_bounded_stream in /home/kaiyaok2/PythonProjects/falcon/tests/test_deprecations.py: 66.72737193107605s cumulative, 0.0026671886444091797s individual


tests/asgi/test_cythonized_asgi.py .
current test PASSED/SKIPPED -- test_scheduled_jobs in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 67.23943758010864s cumulative, 0.5120656490325928s individual


tests/test_request_media.py .
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.24664402008057s cumulative, 0.007206439971923828s individual

.
current test PASSED/SKIPPED -- test_complete_consumption in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.2516577243805s cumulative, 0.005013704299926758s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.25920605659485s cumulative, 0.007548332214355469s individual

.
current test PASSED/SKIPPED -- test_fallback_not_for_error_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.26491379737854s cumulative, 0.005707740783691406s individual

.
current test PASSED/SKIPPED -- test_fallback_not_for_error_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.27017045021057s cumulative, 0.00525665283203125s individual

.
current test PASSED/SKIPPED -- test_error_after_first_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.27682590484619s cumulative, 0.006655454635620117s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.28200840950012s cumulative, 0.005182504653930664s individual

.
current test PASSED/SKIPPED -- test_invalid_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.28656554222107s cumulative, 0.004557132720947266s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.29122185707092s cumulative, 0.004656314849853516s individual

.
current test PASSED/SKIPPED -- test_repeated_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.29578137397766s cumulative, 0.004559516906738281s individual

.
current test PASSED/SKIPPED -- test_fallback_not_for_error_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.30130195617676s cumulative, 0.00552058219909668s individual

.
current test PASSED/SKIPPED -- test_repeated_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.30603170394897s cumulative, 0.004729747772216797s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.31066799163818s cumulative, 0.004636287689208984s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.31534028053284s cumulative, 0.00467228889465332s individual

.
current test PASSED/SKIPPED -- test_null_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.32027864456177s cumulative, 0.004938364028930664s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.32503986358643s cumulative, 0.004761219024658203s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.32989859580994s cumulative, 0.004858732223510742s individual

.
current test PASSED/SKIPPED -- test_invalid_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.33411836624146s cumulative, 0.004219770431518555s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.34005784988403s cumulative, 0.005939483642578125s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.34429097175598s cumulative, 0.004233121871948242s individual

.
current test PASSED/SKIPPED -- test_unknown_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.34873986244202s cumulative, 0.004448890686035156s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.35505104064941s cumulative, 0.006311178207397461s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.36189341545105s cumulative, 0.006842374801635742s individual

.
current test PASSED/SKIPPED -- test_fallback_not_for_error_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.36656451225281s cumulative, 0.0046710968017578125s individual

.
current test PASSED/SKIPPED -- test_error_after_first_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.37107396125793s cumulative, 0.004509449005126953s individual

.
current test PASSED/SKIPPED -- test_repeated_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.376056432724s cumulative, 0.004982471466064453s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.38020181655884s cumulative, 0.004145383834838867s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.3850028514862s cumulative, 0.004801034927368164s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.38952803611755s cumulative, 0.004525184631347656s individual

.
current test PASSED/SKIPPED -- test_fallback in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.39406895637512s cumulative, 0.004540920257568359s individual

.
current test PASSED/SKIPPED -- test_unknown_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.39916396141052s cumulative, 0.005095005035400391s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.4034309387207s cumulative, 0.004266977310180664s individual

.
current test PASSED/SKIPPED -- test_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.40786957740784s cumulative, 0.004438638687133789s individual

.
current test PASSED/SKIPPED -- test_invalid_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.41197109222412s cumulative, 0.00410151481628418s individual

.
current test PASSED/SKIPPED -- test_fallback_does_not_override_media_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.41678619384766s cumulative, 0.004815101623535156s individual

.
current test PASSED/SKIPPED -- test_repeated_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.42109417915344s cumulative, 0.004307985305786133s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.42569470405579s cumulative, 0.00460052490234375s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.43006753921509s cumulative, 0.004372835159301758s individual

.
current test PASSED/SKIPPED -- test_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.43608903884888s cumulative, 0.0060214996337890625s individual

.
current test PASSED/SKIPPED -- test_null_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.44034481048584s cumulative, 0.004255771636962891s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.44455409049988s cumulative, 0.004209280014038086s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.44894552230835s cumulative, 0.00439143180847168s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.45357894897461s cumulative, 0.004633426666259766s individual

.
current test PASSED/SKIPPED -- test_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.45878100395203s cumulative, 0.005202054977416992s individual

.
current test PASSED/SKIPPED -- test_fallback in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.4633195400238s cumulative, 0.004538536071777344s individual

.
current test PASSED/SKIPPED -- test_complete_consumption in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.46757555007935s cumulative, 0.004256010055541992s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.47199749946594s cumulative, 0.00442194938659668s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.47633385658264s cumulative, 0.004336357116699219s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.48155570030212s cumulative, 0.005221843719482422s individual

.
current test PASSED/SKIPPED -- test_fallback_not_for_error_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.48723816871643s cumulative, 0.005682468414306641s individual

.
current test PASSED/SKIPPED -- test_fallback_not_for_error_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.49529194831848s cumulative, 0.008053779602050781s individual

.
current test PASSED/SKIPPED -- test_invalid_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.50226616859436s cumulative, 0.006974220275878906s individual

.
current test PASSED/SKIPPED -- test_fallback_does_not_override_media_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.50988578796387s cumulative, 0.007619619369506836s individual

.
current test PASSED/SKIPPED -- test_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.51450777053833s cumulative, 0.004621982574462891s individual

.
current test PASSED/SKIPPED -- test_fallback_not_for_error_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.51908707618713s cumulative, 0.004579305648803711s individual

.
current test PASSED/SKIPPED -- test_fallback_not_for_error_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.5243558883667s cumulative, 0.00526881217956543s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.52928638458252s cumulative, 0.0049304962158203125s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 67.53458333015442s cumulative, 0.005296945571899414s individual


tests/test_app_initializers.py .
current test PASSED/SKIPPED -- test_api_media_type_overriding in /home/kaiyaok2/PythonProjects/falcon/tests/test_app_initializers.py: 67.54008078575134s cumulative, 0.005497455596923828s individual

.
current test PASSED/SKIPPED -- test_api_media_type_overriding in /home/kaiyaok2/PythonProjects/falcon/tests/test_app_initializers.py: 67.54514813423157s cumulative, 0.005067348480224609s individual


tests/test_sinks.py .
current test PASSED/SKIPPED -- test_single_simple_pattern in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 67.55018353462219s cumulative, 0.005035400390625s individual

.
current test PASSED/SKIPPED -- test_single_compiled_pattern in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 67.55528664588928s cumulative, 0.005103111267089844s individual

.
current test PASSED/SKIPPED -- test_single_default_pattern in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 67.5606164932251s cumulative, 0.00532984733581543s individual

.
current test PASSED/SKIPPED -- test_route_precedence_with_both_id in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 67.56517124176025s cumulative, 0.00455474853515625s individual

.
current test PASSED/SKIPPED -- test_single_simple_pattern in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 67.57246351242065s cumulative, 0.007292270660400391s individual

.
current test PASSED/SKIPPED -- test_multiple_patterns in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 67.58297967910767s cumulative, 0.010516166687011719s individual

.
current test PASSED/SKIPPED -- test_single_compiled_pattern in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 67.59159660339355s cumulative, 0.008616924285888672s individual

.
current test PASSED/SKIPPED -- test_multiple_patterns in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 67.60028266906738s cumulative, 0.008686065673828125s individual

.
current test PASSED/SKIPPED -- test_single_default_pattern in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 67.60553455352783s cumulative, 0.005251884460449219s individual

.
current test PASSED/SKIPPED -- test_route_precedence in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 67.61202597618103s cumulative, 0.006491422653198242s individual

.
current test PASSED/SKIPPED -- test_route_precedence_with_id in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 67.61872243881226s cumulative, 0.006696462631225586s individual

.
current test PASSED/SKIPPED -- test_named_groups in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 67.62654829025269s cumulative, 0.007825851440429688s individual

.
current test PASSED/SKIPPED -- test_with_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 67.63358068466187s cumulative, 0.0070323944091796875s individual

.
current test PASSED/SKIPPED -- test_named_groups in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 67.64095711708069s cumulative, 0.007376432418823242s individual

.
current test PASSED/SKIPPED -- test_add_sync_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 67.64624524116516s cumulative, 0.005288124084472656s individual

.
current test PASSED/SKIPPED -- test_add_sync_sink_with_wrapping in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 67.65333342552185s cumulative, 0.007088184356689453s individual

.
current test PASSED/SKIPPED -- test_add_async_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 67.65953803062439s cumulative, 0.0062046051025390625s individual

.
current test PASSED/SKIPPED -- test_add_async_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 67.66427659988403s cumulative, 0.004738569259643555s individual

.
current test PASSED/SKIPPED -- test_add_sync_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 67.66943645477295s cumulative, 0.005159854888916016s individual


tests/asgi/test_scope.py .
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.67397570610046s cumulative, 0.0045392513275146484s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.67832469940186s cumulative, 0.0043489933013916016s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.68417930603027s cumulative, 0.005854606628417969s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_default_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.68963384628296s cumulative, 0.005454540252685547s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.69444179534912s cumulative, 0.004807949066162109s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.6995735168457s cumulative, 0.005131721496582031s individual

.
current test PASSED/SKIPPED -- test_missing_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.70324540138245s cumulative, 0.003671884536743164s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.70671582221985s cumulative, 0.0034704208374023438s individual

.
current test PASSED/SKIPPED -- test_unsupported_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.70993876457214s cumulative, 0.003222942352294922s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.71512579917908s cumulative, 0.005187034606933594s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.71859693527222s cumulative, 0.0034711360931396484s individual

.
current test PASSED/SKIPPED -- test_unsupported_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.7218337059021s cumulative, 0.0032367706298828125s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.72513341903687s cumulative, 0.003299713134765625s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.7289171218872s cumulative, 0.003783702850341797s individual

.
current test PASSED/SKIPPED -- test_scheme in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.73166346549988s cumulative, 0.0027463436126708984s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.7352352142334s cumulative, 0.003571748733520508s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.73837065696716s cumulative, 0.0031354427337646484s individual

.
current test PASSED/SKIPPED -- test_scheme in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.74109029769897s cumulative, 0.0027196407318115234s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.74663138389587s cumulative, 0.005541086196899414s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.75021624565125s cumulative, 0.0035848617553710938s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.75391268730164s cumulative, 0.003696441650390625s individual

.
current test PASSED/SKIPPED -- test_cookies_options_meathod in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.7563726902008s cumulative, 0.002460002899169922s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.75996613502502s cumulative, 0.00359344482421875s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.76340699195862s cumulative, 0.00344085693359375s individual

.
current test PASSED/SKIPPED -- test_unsupported_scope_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.76700115203857s cumulative, 0.0035941600799560547s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.77134037017822s cumulative, 0.0043392181396484375s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.77606201171875s cumulative, 0.004721641540527344s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.78343462944031s cumulative, 0.007372617721557617s individual

.
current test PASSED/SKIPPED -- test_scheme in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.78683066368103s cumulative, 0.0033960342407226562s individual

.
current test PASSED/SKIPPED -- test_unsupported_scope_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.79106283187866s cumulative, 0.004232168197631836s individual

.
current test PASSED/SKIPPED -- test_scheme in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.79410672187805s cumulative, 0.0030438899993896484s individual

.
current test PASSED/SKIPPED -- test_cookies in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.7982234954834s cumulative, 0.00411677360534668s individual

.
current test PASSED/SKIPPED -- test_scheme in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.80123925209045s cumulative, 0.003015756607055664s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.8070240020752s cumulative, 0.005784749984741211s individual

.
current test PASSED/SKIPPED -- test_unsupported_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.81198501586914s cumulative, 0.0049610137939453125s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.81675291061401s cumulative, 0.004767894744873047s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.82272148132324s cumulative, 0.005968570709228516s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.8283998966217s cumulative, 0.005678415298461914s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.83388161659241s cumulative, 0.005481719970703125s individual

.
current test PASSED/SKIPPED -- test_query_string_values in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.84093499183655s cumulative, 0.007053375244140625s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.84688520431519s cumulative, 0.005950212478637695s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.85054135322571s cumulative, 0.003656148910522461s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.85439538955688s cumulative, 0.003854036331176758s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.85816955566406s cumulative, 0.0037741661071777344s individual

.
current test PASSED/SKIPPED -- test_unsupported_scope_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.86234784126282s cumulative, 0.004178285598754883s individual

.
current test PASSED/SKIPPED -- test_scheme in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.86585593223572s cumulative, 0.0035080909729003906s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.86951184272766s cumulative, 0.0036559104919433594s individual

.
current test PASSED/SKIPPED -- test_cookies in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.87242698669434s cumulative, 0.0029151439666748047s individual

.
current test PASSED/SKIPPED -- test_scheme in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.87528777122498s cumulative, 0.0028607845306396484s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.87883687019348s cumulative, 0.0035490989685058594s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.88277435302734s cumulative, 0.003937482833862305s individual

.
current test PASSED/SKIPPED -- test_unsupported_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.88732552528381s cumulative, 0.0045511722564697266s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.89053249359131s cumulative, 0.003206968307495117s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.89416265487671s cumulative, 0.0036301612854003906s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.89784908294678s cumulative, 0.0036864280700683594s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 67.90103387832642s cumulative, 0.003184795379638672s individual


tests/test_before_hooks.py .
current test PASSED/SKIPPED -- test_piggybacking_resource_post_item in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 67.91023778915405s cumulative, 0.009203910827636719s individual

.
current test PASSED/SKIPPED -- test_field_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 67.91993546485901s cumulative, 0.009697675704956055s individual

.
current test PASSED/SKIPPED -- test_input_validator_inherited in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 67.92623662948608s cumulative, 0.006301164627075195s individual

.
current test PASSED/SKIPPED -- test_parser_sync in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 67.93058180809021s cumulative, 0.0043451786041259766s individual

.
current test PASSED/SKIPPED -- test_input_validator_inherited in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 67.93866276741028s cumulative, 0.00808095932006836s individual

.
current test PASSED/SKIPPED -- test_parser_async in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 67.94449830055237s cumulative, 0.005835533142089844s individual

.
current test PASSED/SKIPPED -- test_field_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 67.95158910751343s cumulative, 0.00709080696105957s individual

.
current test PASSED/SKIPPED -- test_wrapped_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 67.96110415458679s cumulative, 0.009515047073364258s individual

.
current test PASSED/SKIPPED -- test_parser_async in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 67.97075963020325s cumulative, 0.009655475616455078s individual

.
current test PASSED/SKIPPED -- test_wrapped_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 67.98492693901062s cumulative, 0.014167308807373047s individual

.
current test PASSED/SKIPPED -- test_field_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 67.99053692817688s cumulative, 0.005609989166259766s individual

.
current test PASSED/SKIPPED -- test_piggybacking_resource_post_and_delete in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 68.0104022026062s cumulative, 0.01986527442932129s individual

.
current test PASSED/SKIPPED -- test_multiple_resource_hooks in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 68.01540923118591s cumulative, 0.005007028579711914s individual

.
current test PASSED/SKIPPED -- test_param_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 68.02294182777405s cumulative, 0.007532596588134766s individual

.
current test PASSED/SKIPPED -- test_parser_async in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 68.02972793579102s cumulative, 0.0067861080169677734s individual

.
current test PASSED/SKIPPED -- test_piggybacking_resource_post_item in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 68.0356719493866s cumulative, 0.005944013595581055s individual

.
current test PASSED/SKIPPED -- test_wrapped_resource_with_hooks_aware_of_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 68.04800128936768s cumulative, 0.012329339981079102s individual

.
current test PASSED/SKIPPED -- test_parser_sync in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 68.05243706703186s cumulative, 0.00443577766418457s individual

.
current test PASSED/SKIPPED -- test_param_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 68.05743551254272s cumulative, 0.004998445510864258s individual

.
current test PASSED/SKIPPED -- test_field_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 68.06526684761047s cumulative, 0.007831335067749023s individual

.
current test PASSED/SKIPPED -- test_parser_async in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 68.07360601425171s cumulative, 0.008339166641235352s individual

.
current test PASSED/SKIPPED -- test_decorable_name_pattern in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 68.07607221603394s cumulative, 0.0024662017822265625s individual

.
current test PASSED/SKIPPED -- test_parser_sync in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 68.08056235313416s cumulative, 0.0044901371002197266s individual

.
current test PASSED/SKIPPED -- test_field_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 68.08665609359741s cumulative, 0.006093740463256836s individual

.
current test PASSED/SKIPPED -- test_field_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 68.09287810325623s cumulative, 0.0062220096588134766s individual

.
current test PASSED/SKIPPED -- test_input_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 68.09921312332153s cumulative, 0.006335020065307617s individual

.
current test PASSED/SKIPPED -- test_wrapped_resource_with_hooks_aware_of_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 68.10648488998413s cumulative, 0.007271766662597656s individual

.
current test PASSED/SKIPPED -- test_parser_sync in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 68.11122369766235s cumulative, 0.004738807678222656s individual

.
current test PASSED/SKIPPED -- test_multiple_resource_hooks in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 68.11699509620667s cumulative, 0.0057713985443115234s individual

.
current test PASSED/SKIPPED -- test_piggybacking_resource_post_and_delete in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 68.13467407226562s cumulative, 0.01767897605895996s individual

.
current test PASSED/SKIPPED -- test_input_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 68.13924837112427s cumulative, 0.004574298858642578s individual

.
current test PASSED/SKIPPED -- test_multiple_resource_hooks in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 68.14522957801819s cumulative, 0.0059812068939208984s individual

.
current test PASSED/SKIPPED -- test_multiple_resource_hooks in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 68.14992690086365s cumulative, 0.004697322845458984s individual


tests/test_uri_templates.py .
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 68.15586757659912s cumulative, 0.005940675735473633s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 68.1615948677063s cumulative, 0.005727291107177734s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 68.16762852668762s cumulative, 0.006033658981323242s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 68.1733980178833s cumulative, 0.005769491195678711s individual

.
current test PASSED/SKIPPED -- test_converter_custom in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 68.17965483665466s cumulative, 0.006256818771362305s individual

.
current test PASSED/SKIPPED -- test_uuid_converter_complex_segment in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 68.18576073646545s cumulative, 0.006105899810791016s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 68.19316267967224s cumulative, 0.007401943206787109s individual

.
current test PASSED/SKIPPED -- test_multiple in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 68.19818019866943s cumulative, 0.005017518997192383s individual

.
current test PASSED/SKIPPED -- test_single_path_segment in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 68.20403242111206s cumulative, 0.005852222442626953s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 68.20976829528809s cumulative, 0.005735874176025391s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 68.21837449073792s cumulative, 0.008606195449829102s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 68.22398638725281s cumulative, 0.005611896514892578s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 68.23128747940063s cumulative, 0.0073010921478271484s individual

.
current test PASSED/SKIPPED -- test_with_and_without_trailing_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 68.2444200515747s cumulative, 0.013132572174072266s individual

.
current test PASSED/SKIPPED -- test_root_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 68.24986457824707s cumulative, 0.005444526672363281s individual

.
current test PASSED/SKIPPED -- test_no_vars in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 68.2558946609497s cumulative, 0.006030082702636719s individual

.
current test PASSED/SKIPPED -- test_converter_custom in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 68.26249480247498s cumulative, 0.006600141525268555s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 68.27142143249512s cumulative, 0.008926630020141602s individual

.
current test PASSED/SKIPPED -- test_single in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 68.28113985061646s cumulative, 0.00971841812133789s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 68.28599786758423s cumulative, 0.0048580169677734375s individual

.
current test PASSED/SKIPPED -- test_with_and_without_trailing_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 68.29888486862183s cumulative, 0.012887001037597656s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 68.3041410446167s cumulative, 0.005256175994873047s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 68.30954551696777s cumulative, 0.005404472351074219s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 68.314786195755s cumulative, 0.005240678787231445s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 68.32156753540039s cumulative, 0.006781339645385742s individual

.
current test PASSED/SKIPPED -- test_converter_custom in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 68.32698225975037s cumulative, 0.005414724349975586s individual

.
current test PASSED/SKIPPED -- test_single in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 68.33207750320435s cumulative, 0.005095243453979492s individual

.
current test PASSED/SKIPPED -- test_int_converter_rejections in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 68.33671379089355s cumulative, 0.004636287689208984s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 68.34368252754211s cumulative, 0.00696873664855957s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 68.34850311279297s cumulative, 0.004820585250854492s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 68.35343551635742s cumulative, 0.004932403564453125s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 68.35828137397766s cumulative, 0.004845857620239258s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 68.36433720588684s cumulative, 0.0060558319091796875s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 68.36910390853882s cumulative, 0.004766702651977539s individual

.
current test PASSED/SKIPPED -- test_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 68.3762264251709s cumulative, 0.007122516632080078s individual

.
current test PASSED/SKIPPED -- test_same_level_complex_var in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 68.38533544540405s cumulative, 0.009109020233154297s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 68.39067649841309s cumulative, 0.005341053009033203s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 68.39606213569641s cumulative, 0.005385637283325195s individual

.
current test PASSED/SKIPPED -- test_same_level_complex_var in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 68.40365815162659s cumulative, 0.007596015930175781s individual

.
current test PASSED/SKIPPED -- test_single in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 68.41027474403381s cumulative, 0.0066165924072265625s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 68.41561388969421s cumulative, 0.005339145660400391s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 68.42179489135742s cumulative, 0.006181001663208008s individual

.
current test PASSED/SKIPPED -- test_adding_suffix_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 68.44303727149963s cumulative, 0.021242380142211914s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 68.44880294799805s cumulative, 0.005765676498413086s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 68.4544906616211s cumulative, 0.005687713623046875s individual

.
current test PASSED/SKIPPED -- test_single_trailing_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 68.46482586860657s cumulative, 0.010335206985473633s individual

.
current test PASSED/SKIPPED -- test_int_converter_rejections in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 68.469486951828s cumulative, 0.004661083221435547s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 68.47487497329712s cumulative, 0.005388021469116211s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 68.48027753829956s cumulative, 0.005402565002441406s individual

.
current test PASSED/SKIPPED -- test_int_converter_rejections in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 68.48628878593445s cumulative, 0.006011247634887695s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 68.49404692649841s cumulative, 0.007758140563964844s individual


tests/test_cors_middleware.py .
current test PASSED/SKIPPED -- test_allow_credential_list_or_str in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 68.50146508216858s cumulative, 0.007418155670166016s individual

.
current test PASSED/SKIPPED -- test_allow_origin in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 68.50794529914856s cumulative, 0.006480216979980469s individual

.
current test PASSED/SKIPPED -- test_allow_credential_wildcard in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 68.51229763031006s cumulative, 0.0043523311614990234s individual

.
current test PASSED/SKIPPED -- test_allow_origin in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 68.51739311218262s cumulative, 0.005095481872558594s individual

.
current test PASSED/SKIPPED -- test_allow_credential_list_or_str in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 68.52422595024109s cumulative, 0.00683283805847168s individual

.
current test PASSED/SKIPPED -- test_allow_origin in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 68.52972626686096s cumulative, 0.005500316619873047s individual

.
current test PASSED/SKIPPED -- test_raises in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 68.5326132774353s cumulative, 0.0028870105743408203s individual

.
current test PASSED/SKIPPED -- test_expose_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 68.53706741333008s cumulative, 0.004454135894775391s individual

.
current test PASSED/SKIPPED -- test_expose_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 68.54147934913635s cumulative, 0.004411935806274414s individual

.
current test PASSED/SKIPPED -- test_allow_origin_allow_credential in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 68.54617094993591s cumulative, 0.004691600799560547s individual

.
current test PASSED/SKIPPED -- test_expose_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 68.5508623123169s cumulative, 0.004691362380981445s individual

.
current test PASSED/SKIPPED -- test_allow_credential_existing_origin in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 68.55495071411133s cumulative, 0.004088401794433594s individual

.
current test PASSED/SKIPPED -- test_disabled_cors_should_not_add_any_extra_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 68.55898070335388s cumulative, 0.004029989242553711s individual

.
current test PASSED/SKIPPED -- test_enabled_cors_handles_preflighting in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 68.56316661834717s cumulative, 0.004185914993286133s individual

.
current test PASSED/SKIPPED -- test_enabled_cors_handles_preflighting_no_headers_in_req in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 68.56736731529236s cumulative, 0.00420069694519043s individual

.
current test PASSED/SKIPPED -- test_enabled_cors_no_origin in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 68.57187604904175s cumulative, 0.0045087337493896484s individual

.
current test PASSED/SKIPPED -- test_enabled_cors_should_accept_all_origins_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 68.57834100723267s cumulative, 0.006464958190917969s individual

.
current test PASSED/SKIPPED -- test_enabled_cors_should_add_extra_headers_on_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 68.58347249031067s cumulative, 0.00513148307800293s individual


tests/test_after_hooks.py .
current test PASSED/SKIPPED -- test_wrapped_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 68.59236979484558s cumulative, 0.00889730453491211s individual

.
current test PASSED/SKIPPED -- test_resource_with_uri_fields in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 68.59754204750061s cumulative, 0.005172252655029297s individual

.
current test PASSED/SKIPPED -- test_wrapped_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 68.60631489753723s cumulative, 0.008772850036621094s individual

.
current test PASSED/SKIPPED -- test_wrapped_resource_with_hooks_aware_of_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 68.61626052856445s cumulative, 0.00994563102722168s individual

.
current test PASSED/SKIPPED -- test_resource_with_uri_fields in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 68.62153196334839s cumulative, 0.005271434783935547s individual


tests/test_request_access_route.py .
current test PASSED/SKIPPED -- test_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 68.62440967559814s cumulative, 0.0028777122497558594s individual

.
current test PASSED/SKIPPED -- test_remote_addr_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 68.6269941329956s cumulative, 0.0025844573974609375s individual

.
current test PASSED/SKIPPED -- test_malformed_rfc_forwarded in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 68.62967824935913s cumulative, 0.0026841163635253906s individual

.
current test PASSED/SKIPPED -- test_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 68.63243913650513s cumulative, 0.0027608871459960938s individual

.
current test PASSED/SKIPPED -- test_remote_addr_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 68.63518857955933s cumulative, 0.0027494430541992188s individual

.
current test PASSED/SKIPPED -- test_remote_addr_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 68.63823509216309s cumulative, 0.0030465126037597656s individual

.
current test PASSED/SKIPPED -- test_remote_addr_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 68.64093494415283s cumulative, 0.0026998519897460938s individual

.
current test PASSED/SKIPPED -- test_x_forwarded_for in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 68.64373421669006s cumulative, 0.0027992725372314453s individual

.
current test PASSED/SKIPPED -- test_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 68.64659094810486s cumulative, 0.002856731414794922s individual

.
current test PASSED/SKIPPED -- test_x_real_ip in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 68.6492235660553s cumulative, 0.002632617950439453s individual

.
current test PASSED/SKIPPED -- test_x_forwarded_for in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 68.6519947052002s cumulative, 0.002771139144897461s individual

.
current test PASSED/SKIPPED -- test_malformed_rfc_forwarded in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 68.65481042861938s cumulative, 0.002815723419189453s individual

.
current test PASSED/SKIPPED -- test_rfc_forwarded in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 68.65808749198914s cumulative, 0.0032770633697509766s individual

.
current test PASSED/SKIPPED -- test_remote_addr_non_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 68.66092133522034s cumulative, 0.002833843231201172s individual

.
current test PASSED/SKIPPED -- test_x_real_ip in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 68.66357159614563s cumulative, 0.0026502609252929688s individual

.
current test PASSED/SKIPPED -- test_x_forwarded_for in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 68.66633820533752s cumulative, 0.0027666091918945312s individual

.
current test PASSED/SKIPPED -- test_remote_addr_non_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 68.66899013519287s cumulative, 0.0026519298553466797s individual

.
current test PASSED/SKIPPED -- test_remote_addr_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 68.6718339920044s cumulative, 0.0028438568115234375s individual

.
current test PASSED/SKIPPED -- test_x_forwarded_for in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 68.67478919029236s cumulative, 0.002955198287963867s individual

.
current test PASSED/SKIPPED -- test_rfc_forwarded in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 68.67791724205017s cumulative, 0.0031280517578125s individual

.
current test PASSED/SKIPPED -- test_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 68.6807656288147s cumulative, 0.002848386764526367s individual


tests/test_httpstatus.py .
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 68.68543720245361s cumulative, 0.004671573638916016s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 68.69053387641907s cumulative, 0.0050966739654541016s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 68.69502186775208s cumulative, 0.0044879913330078125s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 68.69964528083801s cumulative, 0.0046234130859375s individual

.
current test PASSED/SKIPPED -- test_body_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 68.70624423027039s cumulative, 0.006598949432373047s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 68.71174478530884s cumulative, 0.0055005550384521484s individual

.
current test PASSED/SKIPPED -- test_data_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 68.7168071269989s cumulative, 0.0050623416900634766s individual

.
current test PASSED/SKIPPED -- test_deprecated_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 68.71978163719177s cumulative, 0.0029745101928710938s individual

.
current test PASSED/SKIPPED -- test_body_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 68.72692275047302s cumulative, 0.00714111328125s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 68.73205757141113s cumulative, 0.0051348209381103516s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 68.73646473884583s cumulative, 0.004407167434692383s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 68.74091696739197s cumulative, 0.004452228546142578s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 68.74527263641357s cumulative, 0.004355669021606445s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 68.75002026557922s cumulative, 0.004747629165649414s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 68.75446152687073s cumulative, 0.004441261291503906s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 68.75882935523987s cumulative, 0.004367828369140625s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 68.76313328742981s cumulative, 0.004303932189941406s individual

.
current test PASSED/SKIPPED -- test_media_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 68.76812267303467s cumulative, 0.0049893856048583984s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 68.77284026145935s cumulative, 0.004717588424682617s individual

.
current test PASSED/SKIPPED -- test_media_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 68.77697348594666s cumulative, 0.0041332244873046875s individual

.
current test PASSED/SKIPPED -- test_data_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 68.78212761878967s cumulative, 0.005154132843017578s individual

.
current test PASSED/SKIPPED -- test_raise_status_runs_after_hooks in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 68.78622961044312s cumulative, 0.004101991653442383s individual

.
current test PASSED/SKIPPED -- test_raise_status_in_responder in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 68.79088544845581s cumulative, 0.0046558380126953125s individual

.
current test PASSED/SKIPPED -- test_raise_status_in_before_hook in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 68.7955310344696s cumulative, 0.004645586013793945s individual

.
current test PASSED/SKIPPED -- test_raise_status_in_before_hook in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 68.79947233200073s cumulative, 0.00394129753112793s individual

.
current test PASSED/SKIPPED -- test_raise_status_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 68.80401825904846s cumulative, 0.004545927047729492s individual

.
current test PASSED/SKIPPED -- test_raise_status_in_responder in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 68.80912399291992s cumulative, 0.005105733871459961s individual

.
current test PASSED/SKIPPED -- test_raise_status_survives_after_hooks in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 68.81364583969116s cumulative, 0.004521846771240234s individual

.
current test PASSED/SKIPPED -- test_raise_status_runs_after_hooks in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 68.81840085983276s cumulative, 0.0047550201416015625s individual

.
current test PASSED/SKIPPED -- test_raise_status_survives_after_hooks in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 68.82340288162231s cumulative, 0.005002021789550781s individual

.
current test PASSED/SKIPPED -- test_raise_status_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 68.82842063903809s cumulative, 0.005017757415771484s individual

.
current test PASSED/SKIPPED -- test_raise_status_in_process_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 68.8330671787262s cumulative, 0.0046465396881103516s individual

.
current test PASSED/SKIPPED -- test_raise_status_in_process_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 68.83688020706177s cumulative, 0.003813028335571289s individual

.
current test PASSED/SKIPPED -- test_raise_status_runs_process_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 68.84099268913269s cumulative, 0.0041124820709228516s individual

.
current test PASSED/SKIPPED -- test_raise_status_in_process_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 68.84835267066956s cumulative, 0.007359981536865234s individual

.
current test PASSED/SKIPPED -- test_raise_status_runs_process_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 68.85840177536011s cumulative, 0.010049104690551758s individual

.
current test PASSED/SKIPPED -- test_raise_status_in_process_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 68.86220622062683s cumulative, 0.003804445266723633s individual


tests/test_response.py .
current test PASSED/SKIPPED -- test_response_set_content_type_not_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 68.86496305465698s cumulative, 0.002756834030151367s individual

.
current test PASSED/SKIPPED -- test_response_attempt_to_set_read_only_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 68.8678138256073s cumulative, 0.002850770950317383s individual

.
current test PASSED/SKIPPED -- test_response_removed_stream_len in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 68.87053847312927s cumulative, 0.0027246475219726562s individual

.
current test PASSED/SKIPPED -- test_response_removed_stream_len in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 68.87326288223267s cumulative, 0.0027244091033935547s individual

.
current test PASSED/SKIPPED -- test_response_attempt_to_set_read_only_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 68.87636065483093s cumulative, 0.0030977725982666016s individual

.
current test PASSED/SKIPPED -- test_response_set_content_type_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 68.87934684753418s cumulative, 0.0029861927032470703s individual

.
current test PASSED/SKIPPED -- test_response_option_mimetype_init in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 68.88404560089111s cumulative, 0.004698753356933594s individual

.
current test PASSED/SKIPPED -- test_response_get_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 68.88706636428833s cumulative, 0.003020763397216797s individual

.
current test PASSED/SKIPPED -- test_response_set_content_type_not_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 68.89003610610962s cumulative, 0.0029697418212890625s individual

.
current test PASSED/SKIPPED -- test_response_set_content_type_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 68.89271473884583s cumulative, 0.0026786327362060547s individual

.
current test PASSED/SKIPPED -- test_response_get_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 68.89547538757324s cumulative, 0.002760648727416992s individual


tests/test_http_custom_method_routing.py .
current test PASSED/SKIPPED -- test_map_http_methods in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_custom_method_routing.py: 68.90230369567871s cumulative, 0.00682830810546875s individual

.
current test PASSED/SKIPPED -- test_bar in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_custom_method_routing.py: 68.90815782546997s cumulative, 0.005854129791259766s individual

.
current test PASSED/SKIPPED -- test_foo in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_custom_method_routing.py: 68.91368627548218s cumulative, 0.005528450012207031s individual

.
current test PASSED/SKIPPED -- test_bar in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_custom_method_routing.py: 68.91913557052612s cumulative, 0.0054492950439453125s individual

.
current test PASSED/SKIPPED -- test_foo in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_custom_method_routing.py: 68.92585444450378s cumulative, 0.006718873977661133s individual

.
current test PASSED/SKIPPED -- test_map_http_methods in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_custom_method_routing.py: 68.93326568603516s cumulative, 0.00741124153137207s individual


tests/asgi/test_buffered_reader.py .
current test PASSED/SKIPPED -- test_varying_read_size in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 71.5424861907959s cumulative, 2.609220504760742s individual

.
current test PASSED/SKIPPED -- test_irregular_large_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 73.47138404846191s cumulative, 1.9288978576660156s individual


tests/test_uri_converters.py .
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.47546362876892s cumulative, 0.004079580307006836s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.47834992408752s cumulative, 0.0028862953186035156s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.48100757598877s cumulative, 0.002657651901245117s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.48376321792603s cumulative, 0.0027556419372558594s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.48644018173218s cumulative, 0.0026769638061523438s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.48906803131104s cumulative, 0.002627849578857422s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.49301338195801s cumulative, 0.003945350646972656s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.49705862998962s cumulative, 0.004045248031616211s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.50021767616272s cumulative, 0.003159046173095703s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.50400304794312s cumulative, 0.003785371780395508s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.50721836090088s cumulative, 0.003215312957763672s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.51073288917542s cumulative, 0.003514528274536133s individual

.
current test PASSED/SKIPPED -- test_datetime_converter_default_format in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.51354265213013s cumulative, 0.002809762954711914s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.51780986785889s cumulative, 0.004267215728759766s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.52038264274597s cumulative, 0.002572774887084961s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.52342462539673s cumulative, 0.003041982650756836s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.52663445472717s cumulative, 0.003209829330444336s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.53077292442322s cumulative, 0.004138469696044922s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.53384828567505s cumulative, 0.0030753612518310547s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.53689169883728s cumulative, 0.0030434131622314453s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.53997993469238s cumulative, 0.003088235855102539s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.54273295402527s cumulative, 0.002753019332885742s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.54548239707947s cumulative, 0.0027494430541992188s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.54866194725037s cumulative, 0.0031795501708984375s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.55177593231201s cumulative, 0.003113985061645508s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.55630350112915s cumulative, 0.004527568817138672s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.55947613716125s cumulative, 0.003172636032104492s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.56286883354187s cumulative, 0.0033926963806152344s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.56629729270935s cumulative, 0.0034284591674804688s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.56952667236328s cumulative, 0.003229379653930664s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.57227802276611s cumulative, 0.0027513504028320312s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.57519197463989s cumulative, 0.002913951873779297s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.57793188095093s cumulative, 0.0027399063110351562s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.58102297782898s cumulative, 0.003091096878051758s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.58360695838928s cumulative, 0.0025839805603027344s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.58629107475281s cumulative, 0.0026841163635253906s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.58921408653259s cumulative, 0.0029230117797851562s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.59176754951477s cumulative, 0.0025534629821777344s individual

.
current test PASSED/SKIPPED -- test_int_converter_invalid_config in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.59519052505493s cumulative, 0.003422975540161133s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.59861469268799s cumulative, 0.0034241676330566406s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.60164594650269s cumulative, 0.0030312538146972656s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.60482358932495s cumulative, 0.003177642822265625s individual

.
current test PASSED/SKIPPED -- test_int_converter_invalid_config in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.60738945007324s cumulative, 0.0025658607482910156s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.60993218421936s cumulative, 0.002542734146118164s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.61313152313232s cumulative, 0.003199338912963867s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.61632561683655s cumulative, 0.003194093704223633s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.61886715888977s cumulative, 0.0025415420532226562s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.62140798568726s cumulative, 0.0025408267974853516s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.62464118003845s cumulative, 0.003233194351196289s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.6272177696228s cumulative, 0.002576589584350586s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.63040852546692s cumulative, 0.003190755844116211s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.63344645500183s cumulative, 0.0030379295349121094s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.63721752166748s cumulative, 0.003771066665649414s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.63991785049438s cumulative, 0.002700328826904297s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.64283561706543s cumulative, 0.002917766571044922s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.64619541168213s cumulative, 0.0033597946166992188s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.64912724494934s cumulative, 0.002931833267211914s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.65217232704163s cumulative, 0.0030450820922851562s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.65472888946533s cumulative, 0.0025565624237060547s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.65766215324402s cumulative, 0.0029332637786865234s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.66057586669922s cumulative, 0.0029137134552001953s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.66311836242676s cumulative, 0.0025424957275390625s individual

.
current test PASSED/SKIPPED -- test_int_converter_invalid_config in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.66569113731384s cumulative, 0.002572774887084961s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.6682345867157s cumulative, 0.0025434494018554688s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.67092180252075s cumulative, 0.002687215805053711s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.67360544204712s cumulative, 0.0026836395263671875s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.67614936828613s cumulative, 0.002543926239013672s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.67882800102234s cumulative, 0.0026786327362060547s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.6817524433136s cumulative, 0.0029244422912597656s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.68428659439087s cumulative, 0.002534151077270508s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.6874213218689s cumulative, 0.0031347274780273438s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.68996071815491s cumulative, 0.002539396286010742s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.69250082969666s cumulative, 0.002540111541748047s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.69540357589722s cumulative, 0.0029027462005615234s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.69898104667664s cumulative, 0.0035774707794189453s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.70706939697266s cumulative, 0.008088350296020508s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.71040892601013s cumulative, 0.003339529037475586s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.71308493614197s cumulative, 0.0026760101318359375s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.71576166152954s cumulative, 0.002676725387573242s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.71858358383179s cumulative, 0.0028219223022460938s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.72275900840759s cumulative, 0.004175424575805664s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.72693037986755s cumulative, 0.0041713714599609375s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.72963571548462s cumulative, 0.0027053356170654297s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.73269581794739s cumulative, 0.0030601024627685547s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.73593330383301s cumulative, 0.003237485885620117s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.73910689353943s cumulative, 0.0031735897064208984s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.74176025390625s cumulative, 0.002653360366821289s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.74496579170227s cumulative, 0.003205537796020508s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.74806904792786s cumulative, 0.0031032562255859375s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.75128626823425s cumulative, 0.0032172203063964844s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.75394201278687s cumulative, 0.0026557445526123047s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.75662207603455s cumulative, 0.002680063247680664s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.75931239128113s cumulative, 0.0026903152465820312s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.76203632354736s cumulative, 0.0027239322662353516s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.76484680175781s cumulative, 0.0028104782104492188s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.76797437667847s cumulative, 0.003127574920654297s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.77118921279907s cumulative, 0.0032148361206054688s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.77442216873169s cumulative, 0.0032329559326171875s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.77752423286438s cumulative, 0.0031020641326904297s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.78058767318726s cumulative, 0.0030634403228759766s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.7837815284729s cumulative, 0.0031938552856445312s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.7867591381073s cumulative, 0.002977609634399414s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.79011917114258s cumulative, 0.0033600330352783203s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.79281854629517s cumulative, 0.0026993751525878906s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.79606509208679s cumulative, 0.0032465457916259766s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.79869771003723s cumulative, 0.002632617950439453s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.80181431770325s cumulative, 0.003116607666015625s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.80488276481628s cumulative, 0.0030684471130371094s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.80763077735901s cumulative, 0.0027480125427246094s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.8103711605072s cumulative, 0.0027403831481933594s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.81323599815369s cumulative, 0.002864837646484375s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 73.8161952495575s cumulative, 0.0029592514038085938s individual


tests/test_media_handlers.py .
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 73.81923580169678s cumulative, 0.0030405521392822266s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 73.82648277282715s cumulative, 0.007246971130371094s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 73.82959008216858s cumulative, 0.003107309341430664s individual

.
current test PASSED/SKIPPED -- test_json_err_no_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 73.83495283126831s cumulative, 0.005362749099731445s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 73.84692692756653s cumulative, 0.011974096298217773s individual

.
current test PASSED/SKIPPED -- test_deserialization_raises in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 73.85612607002258s cumulative, 0.009199142456054688s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 73.85915970802307s cumulative, 0.0030336380004882812s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 73.86389756202698s cumulative, 0.00473785400390625s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 73.86704564094543s cumulative, 0.0031480789184570312s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 73.87162017822266s cumulative, 0.00457453727722168s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 73.87762117385864s cumulative, 0.006000995635986328s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 73.88047957420349s cumulative, 0.002858400344848633s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 73.88370323181152s cumulative, 0.0032236576080322266s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 73.88676953315735s cumulative, 0.0030663013458251953s individual

.
current test PASSED/SKIPPED -- test_deserialization_raises in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 73.89302802085876s cumulative, 0.006258487701416016s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 73.90169382095337s cumulative, 0.008665800094604492s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 73.90655136108398s cumulative, 0.004857540130615234s individual

.
current test PASSED/SKIPPED -- test_defaultError in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 73.9097671508789s cumulative, 0.003215789794921875s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 73.91382384300232s cumulative, 0.004056692123413086s individual

.
current test PASSED/SKIPPED -- test_deserialization_raises in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 73.92102003097534s cumulative, 0.007196187973022461s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 73.92913246154785s cumulative, 0.008112430572509766s individual

.
current test PASSED/SKIPPED -- test_sync_methods_not_overridden in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 73.94342494010925s cumulative, 0.014292478561401367s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 73.94995260238647s cumulative, 0.00652766227722168s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 73.95583820343018s cumulative, 0.005885601043701172s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 73.95925188064575s cumulative, 0.003413677215576172s individual

.
current test PASSED/SKIPPED -- test_async_handler_returning_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 73.96552968025208s cumulative, 0.006277799606323242s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 73.96893692016602s cumulative, 0.0034072399139404297s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 73.9722466468811s cumulative, 0.0033097267150878906s individual

.
current test PASSED/SKIPPED -- test_deserialization_raises in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 73.97878837585449s cumulative, 0.006541728973388672s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 73.98597502708435s cumulative, 0.0071866512298583984s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 74.0091495513916s cumulative, 0.023174524307250977s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 74.0138418674469s cumulative, 0.0046923160552978516s individual

.
current test PASSED/SKIPPED -- test_sync_methods_not_overridden in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 74.02366805076599s cumulative, 0.009826183319091797s individual

.
current test PASSED/SKIPPED -- test_deserialization_raises in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 74.03115630149841s cumulative, 0.007488250732421875s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 74.03482937812805s cumulative, 0.003673076629638672s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 74.04427242279053s cumulative, 0.009443044662475586s individual

.
current test PASSED/SKIPPED -- test_json_err_no_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 74.05381798744202s cumulative, 0.009545564651489258s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 74.0589451789856s cumulative, 0.0051271915435791016s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 74.06410336494446s cumulative, 0.005158185958862305s individual

.
current test PASSED/SKIPPED -- test_async_methods_not_overridden in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 74.06881785392761s cumulative, 0.004714488983154297s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 74.07206988334656s cumulative, 0.0032520294189453125s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 74.07562351226807s cumulative, 0.003553628921508789s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 74.07919836044312s cumulative, 0.003574848175048828s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 74.08584928512573s cumulative, 0.0066509246826171875s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 74.09207677841187s cumulative, 0.0062274932861328125s individual

.
current test PASSED/SKIPPED -- test_deserialization_raises in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 74.09952449798584s cumulative, 0.007447719573974609s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 74.10759687423706s cumulative, 0.008072376251220703s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 74.11808514595032s cumulative, 0.010488271713256836s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 74.1268002986908s cumulative, 0.008715152740478516s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 74.1329939365387s cumulative, 0.006193637847900391s individual

.
current test PASSED/SKIPPED -- test_deserialization_raises in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 74.14336013793945s cumulative, 0.010366201400756836s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 74.14975476264954s cumulative, 0.006394624710083008s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 74.15285539627075s cumulative, 0.0031006336212158203s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 74.15607833862305s cumulative, 0.003222942352294922s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 74.15943813323975s cumulative, 0.0033597946166992188s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 74.16365694999695s cumulative, 0.0042188167572021484s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 74.16762375831604s cumulative, 0.003966808319091797s individual

.
current test PASSED/SKIPPED -- test_deserialization_raises in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 74.1739194393158s cumulative, 0.006295680999755859s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 74.19353461265564s cumulative, 0.01961517333984375s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 74.19725036621094s cumulative, 0.0037157535552978516s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 74.20055031776428s cumulative, 0.0032999515533447266s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 74.20440149307251s cumulative, 0.003851175308227539s individual


tests/asgi/test_boundedstream_asgi.py s
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 74.20826411247253s cumulative, 0.003862619400024414s individual

s
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 74.21227216720581s cumulative, 0.004008054733276367s individual

s
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 74.21583867073059s cumulative, 0.0035665035247802734s individual

s
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 74.21912384033203s cumulative, 0.0032851696014404297s individual

s
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 74.22231841087341s cumulative, 0.003194570541381836s individual

s
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 74.22813177108765s cumulative, 0.0058133602142333984s individual

s
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 74.23143935203552s cumulative, 0.0033075809478759766s individual


tests/asgi/test_asgi_servers.py INFO:     127.0.0.1:34884 - "GET / HTTP/1.1" 200 OK

[Starting server process...]
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 75.25058579444885s cumulative, 1.01914644241333s individual

INFO:     127.0.0.1:58946 - "GET / HTTP/1.1" 200 OK

[Starting server process...]
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 76.23432445526123s cumulative, 0.9837386608123779s individual

INFO:     127.0.0.1:48078 - "GET / HTTP/1.1" 200 OK

[Starting server process...]
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 77.26556468009949s cumulative, 1.0312402248382568s individual

INFO:     127.0.0.1:43092 - "GET / HTTP/1.1" 200 OK

[Starting server process...]
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 78.2424578666687s cumulative, 0.9768931865692139s individual

INFO:     127.0.0.1:51318 - "GET / HTTP/1.1" 200 OK

[Starting server process...]
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_missing_responder in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 79.27165675163269s cumulative, 1.0291988849639893s individual

INFO:     127.0.0.1:37904 - "GET / HTTP/1.1" 200 OK

[Starting server process...]
.on_websocket:send_text
on_websocket:WebSocketDisconnected

[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_select_subprotocol_known in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 80.34126830101013s cumulative, 1.0696115493774414s individual

INFO:     127.0.0.1:59828 - "GET / HTTP/1.1" 200 OK

[Starting server process...]
.on_websocket:send_text
on_websocket:WebSocketDisconnected

[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_select_subprotocol_unknown in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 81.4092218875885s cumulative, 1.0679535865783691s individual

INFO:     127.0.0.1:34856 - "GET / HTTP/1.1" 200 OK

[Starting server process...]
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 82.17125940322876s cumulative, 0.7620375156402588s individual

INFO:     127.0.0.1:59728 - "GET / HTTP/1.1" 200 OK

[Starting server process...]
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 83.09134864807129s cumulative, 0.9200892448425293s individual

INFO:     127.0.0.1:54358 - "GET / HTTP/1.1" 200 OK

[Starting server process...]
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_passing_path_params in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 84.17220067977905s cumulative, 1.0808520317077637s individual

INFO:     127.0.0.1:39572 - "GET / HTTP/1.1" 200 OK

[Starting server process...]
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_send_before_accept in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 85.21021389961243s cumulative, 1.038013219833374s individual

INFO:     127.0.0.1:44226 - "GET / HTTP/1.1" 200 OK

[Starting server process...]
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 86.26776933670044s cumulative, 1.0575554370880127s individual

INFO:     127.0.0.1:37014 - "GET / HTTP/1.1" 200 OK

[Starting server process...]
.on_websocket:send_text
on_websocket:WebSocketDisconnected

[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_select_subprotocol_known in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 87.31297087669373s cumulative, 1.0452015399932861s individual

INFO:     127.0.0.1:43264 - "GET / HTTP/1.1" 200 OK

[Starting server process...]
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 88.23632311820984s cumulative, 0.9233522415161133s individual

INFO:     127.0.0.1:44180 - "GET / HTTP/1.1" 200 OK

[Starting server process...]
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_recv_before_accept in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 89.26721954345703s cumulative, 1.0308964252471924s individual

INFO:     127.0.0.1:57432 - "GET / HTTP/1.1" 200 OK
INFO:     127.0.0.1:57446 - "POST /bucket HTTP/1.1" 200 OK

[Starting server process...]
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_post_read_bounded_stream in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 90.0233781337738s cumulative, 0.7561585903167725s individual

INFO:     127.0.0.1:48222 - "GET / HTTP/1.1" 200 OK
INFO:     127.0.0.1:48226 - "POST /bucket HTTP/1.1" 200 OK

[Starting server process...]
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_post_read_bounded_stream_no_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 90.98811483383179s cumulative, 0.9647367000579834s individual

INFO:     127.0.0.1:39714 - "GET / HTTP/1.1" 200 OK

[Starting server process...]
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_post_invalid_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 92.0744857788086s cumulative, 1.0863709449768066s individual

INFO:     127.0.0.1:59156 - "GET / HTTP/1.1" 200 OK
INFO:     127.0.0.1:59170 - "GET / HTTP/1.1" 200 OK

[Starting server process...]
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 93.01671385765076s cumulative, 0.9422280788421631s individual

INFO:     127.0.0.1:59800 - "GET / HTTP/1.1" 200 OK
INFO:     127.0.0.1:59804 - "HEAD / HTTP/1.1" 405 Method Not Allowed

[Starting server process...]
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_head_405 in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 93.99885416030884s cumulative, 0.982140302658081s individual


tests/asgi/test_cythonized_asgi.py F
current test FAILED -- test_jsonchema_validator in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 94.09726333618164s cumulative, 0.09840917587280273s individual

F
current test FAILED -- test_hooks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 94.16367316246033s cumulative, 0.06640982627868652s individual


tests/test_validators.py .
current test PASSED/SKIPPED -- test_both_schemas_validation_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 94.1754560470581s cumulative, 0.01178288459777832s individual

.
current test PASSED/SKIPPED -- test_both_schemas_validation_success in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 94.18495106697083s cumulative, 0.009495019912719727s individual

.
current test PASSED/SKIPPED -- test_req_schema_validation_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 94.18980526924133s cumulative, 0.0048542022705078125s individual

.
current test PASSED/SKIPPED -- test_req_schema_validation_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 94.19375228881836s cumulative, 0.003947019577026367s individual

.
current test PASSED/SKIPPED -- test_req_schema_validation_success in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 94.19763660430908s cumulative, 0.0038843154907226562s individual

.
current test PASSED/SKIPPED -- test_req_schema_validation_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 94.2016396522522s cumulative, 0.004003047943115234s individual

.
current test PASSED/SKIPPED -- test_req_schema_validation_success in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 94.20533180236816s cumulative, 0.003692150115966797s individual

.
current test PASSED/SKIPPED -- test_resp_schema_validation_success in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 94.20916223526001s cumulative, 0.003830432891845703s individual

.
current test PASSED/SKIPPED -- test_resp_schema_validation_success in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 94.21327996253967s cumulative, 0.004117727279663086s individual

.
current test PASSED/SKIPPED -- test_req_schema_validation_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 94.21812081336975s cumulative, 0.004840850830078125s individual

.
current test PASSED/SKIPPED -- test_both_schemas_validation_success in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 94.22684049606323s cumulative, 0.008719682693481445s individual

.
current test PASSED/SKIPPED -- test_resp_schema_validation_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 94.23094701766968s cumulative, 0.0041065216064453125s individual

.
current test PASSED/SKIPPED -- test_both_schemas_validation_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 94.24151945114136s cumulative, 0.010572433471679688s individual

.
current test PASSED/SKIPPED -- test_resp_schema_validation_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 94.24549698829651s cumulative, 0.003977537155151367s individual


tests/asgi/test_request_body_asgi.py .
current test PASSED/SKIPPED -- test_tiny_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 94.24968791007996s cumulative, 0.004190921783447266s individual

.
current test PASSED/SKIPPED -- test_content_length_smaller_than_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 94.25276637077332s cumulative, 0.003078460693359375s individual

.
current test PASSED/SKIPPED -- test_content_length_smaller_than_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 94.25581884384155s cumulative, 0.0030524730682373047s individual

.
current test PASSED/SKIPPED -- test_bounded_stream_alias in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 94.25839972496033s cumulative, 0.002580881118774414s individual

.
current test PASSED/SKIPPED -- test_content_length_smaller_than_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 94.26144552230835s cumulative, 0.003045797348022461s individual

.
current test PASSED/SKIPPED -- test_read_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 94.26749873161316s cumulative, 0.00605320930480957s individual

.
current test PASSED/SKIPPED -- test_tiny_body_overflow in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 94.27156043052673s cumulative, 0.004061698913574219s individual

.
current test PASSED/SKIPPED -- test_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 94.27599430084229s cumulative, 0.004433870315551758s individual

.
current test PASSED/SKIPPED -- test_content_length_smaller_than_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 94.2794017791748s cumulative, 0.0034074783325195312s individual

.
current test PASSED/SKIPPED -- test_content_length_smaller_than_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 94.2838385105133s cumulative, 0.0044367313385009766s individual

.
current test PASSED/SKIPPED -- test_request_repr in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 94.28821516036987s cumulative, 0.004376649856567383s individual

.
current test PASSED/SKIPPED -- test_content_length_smaller_than_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 94.2927896976471s cumulative, 0.00457453727722168s individual


tests/test_request_forwarded.py .
current test PASSED/SKIPPED -- test_escape_malformed_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 94.29778289794922s cumulative, 0.0049932003021240234s individual

.
current test PASSED/SKIPPED -- test_x_forwarded_host_with_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 94.3018958568573s cumulative, 0.004112958908081055s individual

.
current test PASSED/SKIPPED -- test_escape_malformed_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 94.3093945980072s cumulative, 0.007498741149902344s individual

.
current test PASSED/SKIPPED -- test_x_forwarded_proto in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 94.3130235671997s cumulative, 0.003628969192504883s individual

.
current test PASSED/SKIPPED -- test_no_forwarded_headers_with_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 94.3161690235138s cumulative, 0.003145456314086914s individual

.
current test PASSED/SKIPPED -- test_escape_malformed_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 94.31949400901794s cumulative, 0.0033249855041503906s individual

.
current test PASSED/SKIPPED -- test_forwarded_quote_escaping in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 94.32278442382812s cumulative, 0.003290414810180664s individual

.
current test PASSED/SKIPPED -- test_forwarded_missing_first_hop_host in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 94.3259346485138s cumulative, 0.0031502246856689453s individual

.
current test PASSED/SKIPPED -- test_escape_malformed_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 94.32938981056213s cumulative, 0.0034551620483398438s individual

.
current test PASSED/SKIPPED -- test_forwarded_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 94.33236813545227s cumulative, 0.0029783248901367188s individual

.
current test PASSED/SKIPPED -- test_forwarded_host in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 94.33545398712158s cumulative, 0.0030858516693115234s individual

.
current test PASSED/SKIPPED -- test_escape_malformed_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 94.33867692947388s cumulative, 0.003222942352294922s individual

.
current test PASSED/SKIPPED -- test_escape_malformed_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 94.34223175048828s cumulative, 0.003554821014404297s individual

.
current test PASSED/SKIPPED -- test_escape_malformed_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 94.34556841850281s cumulative, 0.003336668014526367s individual

.
current test PASSED/SKIPPED -- test_no_forwarded_headers_with_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 94.34878301620483s cumulative, 0.003214597702026367s individual

.
current test PASSED/SKIPPED -- test_escape_malformed_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 94.35235857963562s cumulative, 0.003575563430786133s individual

.
current test PASSED/SKIPPED -- test_forwarded_quote_escaping in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 94.3558132648468s cumulative, 0.0034546852111816406s individual

.
current test PASSED/SKIPPED -- test_no_forwarded_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 94.35947561264038s cumulative, 0.0036623477935791016s individual

.
current test PASSED/SKIPPED -- test_x_forwarded_host_with_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 94.362548828125s cumulative, 0.0030732154846191406s individual

.
current test PASSED/SKIPPED -- test_forwarded_missing_first_hop_host in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 94.3655834197998s cumulative, 0.0030345916748046875s individual

.
current test PASSED/SKIPPED -- test_x_forwarded_host in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 94.36876797676086s cumulative, 0.0031845569610595703s individual

.
current test PASSED/SKIPPED -- test_escape_malformed_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 94.37236404418945s cumulative, 0.003596067428588867s individual

.
current test PASSED/SKIPPED -- test_forwarded_host in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 94.37521314620972s cumulative, 0.002849102020263672s individual

.
current test PASSED/SKIPPED -- test_x_forwarded_host in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 94.37822389602661s cumulative, 0.0030107498168945312s individual

.
current test PASSED/SKIPPED -- test_escape_malformed_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 94.38133025169373s cumulative, 0.003106355667114258s individual

.
current test PASSED/SKIPPED -- test_x_forwarded_proto in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 94.38430833816528s cumulative, 0.002978086471557617s individual

.
current test PASSED/SKIPPED -- test_no_forwarded_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 94.3875732421875s cumulative, 0.003264904022216797s individual

.
current test PASSED/SKIPPED -- test_forwarded_multiple_params in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 94.3906614780426s cumulative, 0.003088235855102539s individual

.
current test PASSED/SKIPPED -- test_forwarded_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 94.39378643035889s cumulative, 0.0031249523162841797s individual

.
current test PASSED/SKIPPED -- test_forwarded_multiple_params in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 94.39719033241272s cumulative, 0.003403902053833008s individual


tests/test_wsgi_servers.py INFO:     127.0.0.1:37090 - "GET /hello HTTP/1.1" 200 OK
INFO:     127.0.0.1:37092 - "GET /tests/test_wsgi_servers.py HTTP/1.1" 206 Partial Content
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 46027 --interface wsgi _wsgi_test_app:app
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 95.41725993156433s cumulative, 1.0200695991516113s individual

INFO:     127.0.0.1:50652 - "GET /hello HTTP/1.1" 200 OK
INFO:     127.0.0.1:50662 - "GET /tests/test_wsgi_servers.py HTTP/1.1" 206 Partial Content
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 34867 --interface wsgi _wsgi_test_app:app
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 96.4336359500885s cumulative, 1.01637601852417s individual

127.0.0.1 - - [31/Jan/2024:07:11:29 +0000] "GET /hello HTTP/1.1" 200 14 "-" "python-requests/2.31.0"
127.0.0.1 - - [31/Jan/2024:07:11:29 +0000] "GET /tests/test_wsgi_servers.py HTTP/1.1" 206 7 "-" "python-requests/2.31.0"
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:37131 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 97.54396867752075s cumulative, 1.110332727432251s individual

127.0.0.1 - - [31/Jan/2024:07:11:30 +0000] "GET /hello HTTP/1.1" 200 14 "-" "python-requests/2.31.0"
127.0.0.1 - - [31/Jan/2024:07:11:30 +0000] "GET /deprecated HTTP/1.1" 500 38 "-" "python-requests/2.31.0"
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:51653 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_get_deprecated in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 98.6570086479187s cumulative, 1.1130399703979492s individual

127.0.0.1 - - [31/Jan/2024:07:11:31 +0000] "GET /hello HTTP/1.1" 200 14 "-" "python-requests/2.31.0"
127.0.0.1 - - [31/Jan/2024:07:11:31 +0000] "GET /hello HTTP/1.1" 200 14 "-" "python-requests/2.31.0"
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:46269 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 99.76719403266907s cumulative, 1.1101853847503662s individual

INFO:     127.0.0.1:56098 - "GET /hello HTTP/1.1" 200 OK
INFO:     127.0.0.1:56102 - "GET /tests/test_wsgi_servers.py HTTP/1.1" 206 Partial Content
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 43073 --interface wsgi _wsgi_test_app:app
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 100.52129888534546s cumulative, 0.7541048526763916s individual

127.0.0.1 - - [31/Jan/2024:07:11:33 +0000] "GET /hello HTTP/1.1" 200 14 "-" "python-requests/2.31.0"
127.0.0.1 - - [31/Jan/2024:07:11:33 +0000] "GET /tests/test_wsgi_servers.py HTTP/1.1" 206 5 "-" "python-requests/2.31.0"
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:49091 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 101.59200763702393s cumulative, 1.0707087516784668s individual

INFO:     127.0.0.1:37502 - "GET /hello HTTP/1.1" 200 OK
INFO:     127.0.0.1:37504 - "GET /tests/test_wsgi_servers.py HTTP/1.1" 206 Partial Content
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 53101 --interface wsgi _wsgi_test_app:app
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 102.55326199531555s cumulative, 0.961254358291626s individual

INFO:     127.0.0.1:43886 - "GET /hello HTTP/1.1" 200 OK
2024-01-31 07:11:35 [FALCON] [ERROR] GET /deprecated => Traceback (most recent call last):
  File "falcon/app.py", line 372, in falcon.app.App.__call__
  File "/home/kaiyaok2/PythonProjects/falcon/tests/_wsgi_test_app.py", line 45, in on_get_deprecated
    resp.body = 'Hello, World!\n'
  File "falcon/response.py", line 220, in falcon.response.Response.body
falcon.util.deprecation.AttributeRemovedError: The body attribute is no longer supported. Please use the text attribute instead.

INFO:     127.0.0.1:43892 - "GET /deprecated HTTP/1.1" 500 Internal Server Error
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 33531 --interface wsgi _wsgi_test_app:app
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_get_deprecated in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 103.51405715942383s cumulative, 0.9607951641082764s individual

INFO:     127.0.0.1:50824 - "GET /hello HTTP/1.1" 200 OK
INFO:     127.0.0.1:50828 - "GET /tests/test_wsgi_servers.py HTTP/1.1" 200 OK
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 40651 --interface wsgi _wsgi_test_app:app
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_static_file in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 104.48338270187378s cumulative, 0.9693255424499512s individual

127.0.0.1 - - [31/Jan/2024:07:11:37 +0000] "GET /hello HTTP/1.1" 200 14 "-" "python-requests/2.31.0"
127.0.0.1 - - [31/Jan/2024:07:11:37 +0000] "GET /tests/test_wsgi_servers.py HTTP/1.1" 206 8544 "-" "python-requests/2.31.0"
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:41311 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 105.53436541557312s cumulative, 1.0509827136993408s individual

127.0.0.1 - - [31/Jan/2024:07:11:38 +0000] "GET /hello HTTP/1.1" 200 14 "-" "python-requests/2.31.0"
127.0.0.1 - - [31/Jan/2024:07:11:38 +0000] "GET /tests/test_wsgi_servers.py HTTP/1.1" 206 47 "-" "python-requests/2.31.0"
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:60441 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 106.62895226478577s cumulative, 1.0945868492126465s individual

127.0.0.1 - - [31/Jan/2024:07:11:39 +0000] "GET /hello HTTP/1.1" 200 14 "-" "python-requests/2.31.0"
127.0.0.1 - - [31/Jan/2024:07:11:39 +0000] "GET /tests/test_wsgi_servers.py HTTP/1.1" 200 0 "-" "python-requests/2.31.0"
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:46523 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_static_file in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 107.68770384788513s cumulative, 1.0587515830993652s individual

INFO:     127.0.0.1:48910 - "GET /hello HTTP/1.1" 200 OK
INFO:     127.0.0.1:48916 - "GET /hello HTTP/1.1" 200 OK
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 50813 --interface wsgi _wsgi_test_app:app
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 108.44069027900696s cumulative, 0.7529864311218262s individual


tests/test_headers.py .
current test PASSED/SKIPPED -- test_custom_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.44793367385864s cumulative, 0.00724339485168457s individual

.
current test PASSED/SKIPPED -- test_append_link_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.4523823261261s cumulative, 0.004448652267456055s individual

.
current test PASSED/SKIPPED -- test_declared_content_length_overridden_by_no_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.4569730758667s cumulative, 0.004590749740600586s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.4630331993103s cumulative, 0.006060123443603516s individual

.
current test PASSED/SKIPPED -- test_append_link_multiple in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.4686439037323s cumulative, 0.00561070442199707s individual

.
current test PASSED/SKIPPED -- test_request_latin1_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.47408747673035s cumulative, 0.005443572998046875s individual

.
current test PASSED/SKIPPED -- test_response_append_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.47942590713501s cumulative, 0.005338430404663086s individual

.
current test PASSED/SKIPPED -- test_get_header_as_int in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.4847321510315s cumulative, 0.005306243896484375s individual

.
current test PASSED/SKIPPED -- test_unicode_headers_contain_non_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.4903392791748s cumulative, 0.005607128143310547s individual

.
current test PASSED/SKIPPED -- test_request_multiple_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.49496650695801s cumulative, 0.004627227783203125s individual

.
current test PASSED/SKIPPED -- test_override_default_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.49977731704712s cumulative, 0.004810810089111328s individual

.
current test PASSED/SKIPPED -- test_no_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.50392031669617s cumulative, 0.0041429996490478516s individual

.
current test PASSED/SKIPPED -- test_response_header_helpers_on_get in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.50934863090515s cumulative, 0.005428314208984375s individual

.
current test PASSED/SKIPPED -- test_append_link_invalid_crossorigin_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.51232862472534s cumulative, 0.0029799938201904297s individual

.
current test PASSED/SKIPPED -- test_unicode_headers_contain_only_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.51647162437439s cumulative, 0.0041429996490478516s individual

.
current test PASSED/SKIPPED -- test_declared_content_length_overriden_by_body_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.52279758453369s cumulative, 0.006325960159301758s individual

.
current test PASSED/SKIPPED -- test_default_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.55437970161438s cumulative, 0.03158211708068848s individual

.
current test PASSED/SKIPPED -- test_content_length_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.55908584594727s cumulative, 0.004706144332885742s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.56420540809631s cumulative, 0.0051195621490478516s individual

.
current test PASSED/SKIPPED -- test_set_headers_with_custom_class in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.56914639472961s cumulative, 0.004940986633300781s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.5733687877655s cumulative, 0.004222393035888672s individual

.
current test PASSED/SKIPPED -- test_content_header_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.57663679122925s cumulative, 0.003268003463745117s individual

.
current test PASSED/SKIPPED -- test_unicode_headers_contain_non_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.58209991455078s cumulative, 0.005463123321533203s individual

.
current test PASSED/SKIPPED -- test_override_default_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.58789730072021s cumulative, 0.005797386169433594s individual

.
current test PASSED/SKIPPED -- test_override_default_media_type_missing_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.59303164482117s cumulative, 0.0051343441009521484s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.59690642356873s cumulative, 0.0038747787475585938s individual

.
current test PASSED/SKIPPED -- test_content_type_no_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.60178327560425s cumulative, 0.004876852035522461s individual

.
current test PASSED/SKIPPED -- test_append_link_invalid_crossorigin_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.60536408424377s cumulative, 0.003580808639526367s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.6092758178711s cumulative, 0.003911733627319336s individual

.
current test PASSED/SKIPPED -- test_headers_as_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.61362743377686s cumulative, 0.004351615905761719s individual

.
current test PASSED/SKIPPED -- test_unicode_location_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.61810350418091s cumulative, 0.004476070404052734s individual

.
current test PASSED/SKIPPED -- test_append_link_with_hreflang_multi in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.62220239639282s cumulative, 0.0040988922119140625s individual

.
current test PASSED/SKIPPED -- test_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.62646007537842s cumulative, 0.004257678985595703s individual

.
current test PASSED/SKIPPED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.63215684890747s cumulative, 0.005696773529052734s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.63574743270874s cumulative, 0.0035905838012695312s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.64035606384277s cumulative, 0.004608631134033203s individual

.
current test PASSED/SKIPPED -- test_append_link_with_title_star in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.64451289176941s cumulative, 0.004156827926635742s individual

.
current test PASSED/SKIPPED -- test_declared_content_length_overriden_by_data_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.64878845214844s cumulative, 0.00427556037902832s individual

.
current test PASSED/SKIPPED -- test_vary_star in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.65366983413696s cumulative, 0.004881381988525391s individual

.
current test PASSED/SKIPPED -- test_append_link_with_hreflang in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.65774726867676s cumulative, 0.004077434539794922s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.66214418411255s cumulative, 0.004396915435791016s individual

.
current test PASSED/SKIPPED -- test_content_length_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.66704201698303s cumulative, 0.0048978328704833984s individual

.
current test PASSED/SKIPPED -- test_required_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.6776909828186s cumulative, 0.010648965835571289s individual

.
current test PASSED/SKIPPED -- test_no_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.68322491645813s cumulative, 0.005533933639526367s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.68790745735168s cumulative, 0.0046825408935546875s individual

.
current test PASSED/SKIPPED -- test_passthrough_request_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.69245052337646s cumulative, 0.0045430660247802734s individual

.
current test PASSED/SKIPPED -- test_response_set_and_get_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.6973307132721s cumulative, 0.004880189895629883s individual

.
current test PASSED/SKIPPED -- test_content_header_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.70066785812378s cumulative, 0.0033371448516845703s individual

.
current test PASSED/SKIPPED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.70528554916382s cumulative, 0.0046176910400390625s individual

.
current test PASSED/SKIPPED -- test_append_link_invalid_crossorigin_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.70810770988464s cumulative, 0.0028221607208251953s individual

.
current test PASSED/SKIPPED -- test_append_link_invalid_crossorigin_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.71129894256592s cumulative, 0.003191232681274414s individual

.
current test PASSED/SKIPPED -- test_content_disposition_inline_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.71567440032959s cumulative, 0.004375457763671875s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.71937346458435s cumulative, 0.003699064254760742s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.72305417060852s cumulative, 0.003680706024169922s individual

.
current test PASSED/SKIPPED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.727623462677s cumulative, 0.004569292068481445s individual

.
current test PASSED/SKIPPED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.73193144798279s cumulative, 0.004307985305786133s individual

.
current test PASSED/SKIPPED -- test_no_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.73606967926025s cumulative, 0.00413823127746582s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.73979568481445s cumulative, 0.0037260055541992188s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.74376630783081s cumulative, 0.003970623016357422s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.74834823608398s cumulative, 0.004581928253173828s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.75213742256165s cumulative, 0.003789186477661133s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.75608134269714s cumulative, 0.003943920135498047s individual

.
current test PASSED/SKIPPED -- test_default_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.76035141944885s cumulative, 0.004270076751708984s individual

.
current test PASSED/SKIPPED -- test_append_link_single in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.7644145488739s cumulative, 0.004063129425048828s individual

.
current test PASSED/SKIPPED -- test_vary_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.7691285610199s cumulative, 0.004714012145996094s individual

.
current test PASSED/SKIPPED -- test_append_link_invalid_crossorigin_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.77192711830139s cumulative, 0.0027985572814941406s individual

.
current test PASSED/SKIPPED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.77617168426514s cumulative, 0.004244565963745117s individual

.
current test PASSED/SKIPPED -- test_declared_content_length_on_head in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.78016543388367s cumulative, 0.0039937496185302734s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.78384494781494s cumulative, 0.003679513931274414s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.78813171386719s cumulative, 0.004286766052246094s individual

.
current test PASSED/SKIPPED -- test_append_link_with_type_hint in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.79399371147156s cumulative, 0.005861997604370117s individual

.
current test PASSED/SKIPPED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.79850435256958s cumulative, 0.004510641098022461s individual

.
current test PASSED/SKIPPED -- test_append_link_with_anchor in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.80255055427551s cumulative, 0.004046201705932617s individual

.
current test PASSED/SKIPPED -- test_no_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.80762314796448s cumulative, 0.005072593688964844s individual

.
current test PASSED/SKIPPED -- test_append_link_with_link_extension in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.81277704238892s cumulative, 0.0051538944244384766s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.81746888160706s cumulative, 0.0046918392181396484s individual

.
current test PASSED/SKIPPED -- test_content_disposition_inline_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.82184338569641s cumulative, 0.004374504089355469s individual

.
current test PASSED/SKIPPED -- test_unicode_headers_contain_non_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.82615780830383s cumulative, 0.004314422607421875s individual

.
current test PASSED/SKIPPED -- test_content_disposition_inline_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.83045983314514s cumulative, 0.004302024841308594s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.8347475528717s cumulative, 0.0042877197265625s individual

.
current test PASSED/SKIPPED -- test_headers_with_custom_class_not_callable in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.84108209609985s cumulative, 0.006334543228149414s individual

.
current test PASSED/SKIPPED -- test_append_link_invalid_crossorigin_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.8439474105835s cumulative, 0.002865314483642578s individual

.
current test PASSED/SKIPPED -- test_unset_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.84809684753418s cumulative, 0.004149436950683594s individual

.
current test PASSED/SKIPPED -- test_vary_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.85241436958313s cumulative, 0.004317522048950195s individual

.
current test PASSED/SKIPPED -- test_unset_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.85668921470642s cumulative, 0.004274845123291016s individual

.
current test PASSED/SKIPPED -- test_expires_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.86071252822876s cumulative, 0.004023313522338867s individual

.
current test PASSED/SKIPPED -- test_append_link_with_title in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 108.86539554595947s cumulative, 0.004683017730712891s individual


tests/asgi/test_testing_asgi.py .
current test PASSED/SKIPPED -- test_invalid_asgi_events in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_testing_asgi.py: 108.8683853149414s cumulative, 0.0029897689819335938s individual

.
current test PASSED/SKIPPED -- test_is_asgi_app_cls in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_testing_asgi.py: 108.87106084823608s cumulative, 0.0026755332946777344s individual

.
current test PASSED/SKIPPED -- test_ignore_extra_asgi_events in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_testing_asgi.py: 108.87365198135376s cumulative, 0.0025911331176757812s individual

.
current test PASSED/SKIPPED -- test_create_scope_default_ua in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_testing_asgi.py: 108.87631297111511s cumulative, 0.002660989761352539s individual

.
current test PASSED/SKIPPED -- test_immediate_disconnect in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_testing_asgi.py: 108.87941384315491s cumulative, 0.003100872039794922s individual

.
current test PASSED/SKIPPED -- test_missing_header_is_none in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_testing_asgi.py: 108.8819887638092s cumulative, 0.002574920654296875s individual

.
current test PASSED/SKIPPED -- test_cookies_jar in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_testing_asgi.py: 108.88641262054443s cumulative, 0.004423856735229492s individual

.
current test PASSED/SKIPPED -- test_create_scope_default_ua_override in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_testing_asgi.py: 108.88896489143372s cumulative, 0.0025522708892822266s individual

.
current test PASSED/SKIPPED -- test_create_scope_default_ua_modify_global in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_testing_asgi.py: 108.89146590232849s cumulative, 0.0025010108947753906s individual


tests/asgi/test_cythonized_asgi.py .
current test PASSED/SKIPPED -- test_is_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 108.89406108856201s cumulative, 0.002595186233520508s individual

.
current test PASSED/SKIPPED -- test_not_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 108.89663290977478s cumulative, 0.0025718212127685547s individual

.
current test PASSED/SKIPPED -- test_not_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 108.89923095703125s cumulative, 0.0025980472564697266s individual

.
current test PASSED/SKIPPED -- test_is_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 108.90180683135986s cumulative, 0.0025758743286132812s individual

.
current test PASSED/SKIPPED -- test_is_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 108.90436434745789s cumulative, 0.002557516098022461s individual

.
current test PASSED/SKIPPED -- test_not_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 108.9072277545929s cumulative, 0.0028634071350097656s individual

.
current test PASSED/SKIPPED -- test_is_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 108.9098629951477s cumulative, 0.0026352405548095703s individual

.
current test PASSED/SKIPPED -- test_is_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 108.91262078285217s cumulative, 0.0027577877044677734s individual

.
current test PASSED/SKIPPED -- test_not_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 108.91519045829773s cumulative, 0.0025696754455566406s individual

.
current test PASSED/SKIPPED -- test_scheduled_jobs_type_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 108.91969347000122s cumulative, 0.004503011703491211s individual

.
current test PASSED/SKIPPED -- test_not_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 108.92226004600525s cumulative, 0.0025665760040283203s individual

.
current test PASSED/SKIPPED -- test_is_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 108.92515277862549s cumulative, 0.002892732620239258s individual

.
current test PASSED/SKIPPED -- test_not_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 108.92820644378662s cumulative, 0.0030536651611328125s individual


tests/test_media_urlencoded.py .
current test PASSED/SKIPPED -- test_urlencoded_form_handler_serialize in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 108.9320912361145s cumulative, 0.0038847923278808594s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 108.94090723991394s cumulative, 0.008816003799438477s individual

.
current test PASSED/SKIPPED -- test_empty_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 108.94747304916382s cumulative, 0.00656580924987793s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 108.9578948020935s cumulative, 0.0104217529296875s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 108.96436476707458s cumulative, 0.0064699649810791016s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 108.97013068199158s cumulative, 0.0057659149169921875s individual

.
current test PASSED/SKIPPED -- test_deserialize_empty_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 108.97301149368286s cumulative, 0.0028808116912841797s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 108.97887110710144s cumulative, 0.0058596134185791016s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form_handler_serialize in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 108.98220133781433s cumulative, 0.003330230712890625s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 108.98848009109497s cumulative, 0.0062787532806396484s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 108.99477696418762s cumulative, 0.006296873092651367s individual

.
current test PASSED/SKIPPED -- test_empty_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 108.99923920631409s cumulative, 0.004462242126464844s individual

.
current test PASSED/SKIPPED -- test_deserialize_invalid_unicode in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 109.00199055671692s cumulative, 0.0027513504028320312s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 109.00689172744751s cumulative, 0.00490117073059082s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 109.01231551170349s cumulative, 0.005423784255981445s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 109.01755142211914s cumulative, 0.005235910415649414s individual


tests/asgi/test_middleware_asgi.py .
current test PASSED/SKIPPED -- test_raise_on_incompatible in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_middleware_asgi.py: 109.02115225791931s cumulative, 0.0036008358001708984s individual

.
current test PASSED/SKIPPED -- test_raise_on_incompatible in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_middleware_asgi.py: 109.02522277832031s cumulative, 0.0040705204010009766s individual

.
current test PASSED/SKIPPED -- test_raise_on_incompatible in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_middleware_asgi.py: 109.02898359298706s cumulative, 0.003760814666748047s individual

.
current test PASSED/SKIPPED -- test_raise_on_incompatible in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_middleware_asgi.py: 109.03287720680237s cumulative, 0.003893613815307617s individual


tests/test_inspect.py F
current test FAILED -- test_middleware_tree in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 109.12557554244995s cumulative, 0.09269833564758301s individual

F
current test FAILED -- test_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 110.8483898639679s cumulative, 1.7228143215179443s individual

F
current test FAILED -- test_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 110.9127676486969s cumulative, 0.0643777847290039s individual

F
current test FAILED -- test_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 110.97593975067139s cumulative, 0.0631721019744873s individual

F
current test FAILED -- test_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 111.04796242713928s cumulative, 0.07202267646789551s individual

F
current test FAILED -- test_static_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 111.11127710342407s cumulative, 0.06331467628479004s individual

F
current test FAILED -- test_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 111.17370986938477s cumulative, 0.06243276596069336s individual


tests/asgi/test_sse.py .
current test PASSED/SKIPPED -- test_multiple_events_early_disconnect in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_sse.py: 111.24277019500732s cumulative, 0.0690603256225586s individual


tests/asgi/test_scheduled_callbacks.py .
current test PASSED/SKIPPED -- test_multiple in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scheduled_callbacks.py: 111.76132369041443s cumulative, 0.5185534954071045s individual


tests/test_cython.py F
current test FAILED -- test_stream_has_private_read in /home/kaiyaok2/PythonProjects/falcon/tests/test_cython.py: 111.76951575279236s cumulative, 0.008192062377929688s individual

F
current test FAILED -- test_imported_from_c_modules in /home/kaiyaok2/PythonProjects/falcon/tests/test_cython.py: 111.77571415901184s cumulative, 0.006198406219482422s individual


tests/test_request_attrs.py .
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.77970123291016s cumulative, 0.00398707389831543s individual

.
current test PASSED/SKIPPED -- test_netloc_nondefault_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.78315615653992s cumulative, 0.003454923629760742s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.78687834739685s cumulative, 0.0037221908569335938s individual

.
current test PASSED/SKIPPED -- test_date_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.79144549369812s cumulative, 0.004567146301269531s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.79591393470764s cumulative, 0.004468441009521484s individual

.
current test PASSED/SKIPPED -- test_date_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.79993557929993s cumulative, 0.004021644592285156s individual

.
current test PASSED/SKIPPED -- test_etag_parsing_helper in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.80299234390259s cumulative, 0.003056764602661133s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.80725574493408s cumulative, 0.004263401031494141s individual

.
current test PASSED/SKIPPED -- test_subdomain in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.81131887435913s cumulative, 0.004063129425048828s individual

.
current test PASSED/SKIPPED -- test_client_accepts_props in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.81545186042786s cumulative, 0.004132986068725586s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.81945013999939s cumulative, 0.003998279571533203s individual

.
current test PASSED/SKIPPED -- test_host in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.82246971130371s cumulative, 0.003019571304321289s individual

.
current test PASSED/SKIPPED -- test_bogus_content_length_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.82589983940125s cumulative, 0.0034301280975341797s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.82944369316101s cumulative, 0.003543853759765625s individual

.
current test PASSED/SKIPPED -- test_netloc_from_env in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.83264183998108s cumulative, 0.0031981468200683594s individual

.
current test PASSED/SKIPPED -- test_date in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.83601307868958s cumulative, 0.0033712387084960938s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.83954048156738s cumulative, 0.003527402877807617s individual

.
current test PASSED/SKIPPED -- test_date_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.84369897842407s cumulative, 0.004158496856689453s individual

.
current test PASSED/SKIPPED -- test_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.84673738479614s cumulative, 0.0030384063720703125s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.85035300254822s cumulative, 0.0036156177520751953s individual

.
current test PASSED/SKIPPED -- test_netloc_nondefault_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.85361242294312s cumulative, 0.003259420394897461s individual

.
current test PASSED/SKIPPED -- test_scheme_https in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.85683941841125s cumulative, 0.0032269954681396484s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.86070537567139s cumulative, 0.003865957260131836s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.86429858207703s cumulative, 0.0035932064056396484s individual

.
current test PASSED/SKIPPED -- test_scheme_https in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.86749911308289s cumulative, 0.003200531005859375s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.8708062171936s cumulative, 0.0033071041107177734s individual

.
current test PASSED/SKIPPED -- test_port_explicit in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.87399983406067s cumulative, 0.0031936168670654297s individual

.
current test PASSED/SKIPPED -- test_port_explicit in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.87723016738892s cumulative, 0.0032303333282470703s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.88111567497253s cumulative, 0.003885507583618164s individual

.
current test PASSED/SKIPPED -- test_date_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.88505578041077s cumulative, 0.003940105438232422s individual

.
current test PASSED/SKIPPED -- test_netloc_nondefault_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.88831734657288s cumulative, 0.003261566162109375s individual

.
current test PASSED/SKIPPED -- test_netloc_from_env in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.89163136482239s cumulative, 0.0033140182495117188s individual

.
current test PASSED/SKIPPED -- test_netloc_default_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.89517402648926s cumulative, 0.003542661666870117s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.89902472496033s cumulative, 0.003850698471069336s individual

.
current test PASSED/SKIPPED -- test_missing_attribute_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.90217876434326s cumulative, 0.0031540393829345703s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.90578269958496s cumulative, 0.0036039352416992188s individual

.
current test PASSED/SKIPPED -- test_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.90972995758057s cumulative, 0.003947257995605469s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.91349530220032s cumulative, 0.0037653446197509766s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.91779088973999s cumulative, 0.0042955875396728516s individual

.
current test PASSED/SKIPPED -- test_etag_is_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.92115998268127s cumulative, 0.0033690929412841797s individual

.
current test PASSED/SKIPPED -- test_netloc_from_env in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.92526745796204s cumulative, 0.004107475280761719s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.92893385887146s cumulative, 0.003666400909423828s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.93276834487915s cumulative, 0.0038344860076904297s individual

.
current test PASSED/SKIPPED -- test_nonlatin_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.93597149848938s cumulative, 0.003203153610229492s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.93971538543701s cumulative, 0.003743886947631836s individual

.
current test PASSED/SKIPPED -- test_app_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.94318914413452s cumulative, 0.0034737586975097656s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.94771981239319s cumulative, 0.004530668258666992s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.95286059379578s cumulative, 0.005140781402587891s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.95876026153564s cumulative, 0.005899667739868164s individual

.
current test PASSED/SKIPPED -- test_missing_qs in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.9621639251709s cumulative, 0.0034036636352539062s individual

.
current test PASSED/SKIPPED -- test_date in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.96710991859436s cumulative, 0.004945993423461914s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.9717628955841s cumulative, 0.004652976989746094s individual

.
current test PASSED/SKIPPED -- test_netloc_default_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.97600269317627s cumulative, 0.004239797592163086s individual

.
current test PASSED/SKIPPED -- test_date_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.9798698425293s cumulative, 0.0038671493530273438s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.9841365814209s cumulative, 0.0042667388916015625s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.98831081390381s cumulative, 0.004174232482910156s individual

.
current test PASSED/SKIPPED -- test_etag_parsing_helper in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.99159145355225s cumulative, 0.0032806396484375s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.99553394317627s cumulative, 0.0039424896240234375s individual

.
current test PASSED/SKIPPED -- test_content_length_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 111.99892354011536s cumulative, 0.003389596939086914s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.00372099876404s cumulative, 0.004797458648681641s individual

.
current test PASSED/SKIPPED -- test_host in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.00754594802856s cumulative, 0.003824949264526367s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.01207947731018s cumulative, 0.004533529281616211s individual

.
current test PASSED/SKIPPED -- test_date_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.0165662765503s cumulative, 0.004486799240112305s individual

.
current test PASSED/SKIPPED -- test_app_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.01925110816956s cumulative, 0.0026848316192626953s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.02374053001404s cumulative, 0.004489421844482422s individual

.
current test PASSED/SKIPPED -- test_uri in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.02697849273682s cumulative, 0.0032379627227783203s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.03125619888306s cumulative, 0.004277706146240234s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.03558588027954s cumulative, 0.004329681396484375s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.03951144218445s cumulative, 0.0039255619049072266s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.04358291625977s cumulative, 0.004071474075317383s individual

.
current test PASSED/SKIPPED -- test_nonlatin_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.04705476760864s cumulative, 0.003471851348876953s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.0516107082367s cumulative, 0.004555940628051758s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.05653786659241s cumulative, 0.004927158355712891s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.06128811836243s cumulative, 0.004750251770019531s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.06539726257324s cumulative, 0.00410914421081543s individual

.
current test PASSED/SKIPPED -- test_date_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.06934785842896s cumulative, 0.003950595855712891s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.07391166687012s cumulative, 0.004563808441162109s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.07836198806763s cumulative, 0.004450321197509766s individual

.
current test PASSED/SKIPPED -- test_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.08168506622314s cumulative, 0.003323078155517578s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.08684372901917s cumulative, 0.005158662796020508s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.09149932861328s cumulative, 0.004655599594116211s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.09581542015076s cumulative, 0.004316091537475586s individual

.
current test PASSED/SKIPPED -- test_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.0991461277008s cumulative, 0.003330707550048828s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.10326266288757s cumulative, 0.004116535186767578s individual

.
current test PASSED/SKIPPED -- test_empty_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.10697102546692s cumulative, 0.003708362579345703s individual

.
current test PASSED/SKIPPED -- test_content_type_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.11018562316895s cumulative, 0.003214597702026367s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.11465787887573s cumulative, 0.004472255706787109s individual

.
current test PASSED/SKIPPED -- test_missing_attribute_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.11852669715881s cumulative, 0.0038688182830810547s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.1226315498352s cumulative, 0.0041048526763916016s individual

.
current test PASSED/SKIPPED -- test_subdomain in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.1267421245575s cumulative, 0.004110574722290039s individual

.
current test PASSED/SKIPPED -- test_content_type_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.13015127182007s cumulative, 0.003409147262573242s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.13444209098816s cumulative, 0.00429081916809082s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.13855981826782s cumulative, 0.004117727279663086s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.14263725280762s cumulative, 0.004077434539794922s individual

.
current test PASSED/SKIPPED -- test_uri in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.1460165977478s cumulative, 0.003379344940185547s individual

.
current test PASSED/SKIPPED -- test_uri_http_1_0 in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.15002989768982s cumulative, 0.0040132999420166016s individual

.
current test PASSED/SKIPPED -- test_uri_http_1_0 in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.15390849113464s cumulative, 0.0038785934448242188s individual

.
current test PASSED/SKIPPED -- test_date in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.15771794319153s cumulative, 0.0038094520568847656s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.16160345077515s cumulative, 0.003885507583618164s individual

.
current test PASSED/SKIPPED -- test_netloc_nondefault_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.16494727134705s cumulative, 0.003343820571899414s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.16861939430237s cumulative, 0.0036721229553222656s individual

.
current test PASSED/SKIPPED -- test_empty_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.17163443565369s cumulative, 0.0030150413513183594s individual

.
current test PASSED/SKIPPED -- test_port_explicit in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.17512512207031s cumulative, 0.0034906864166259766s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.17944049835205s cumulative, 0.004315376281738281s individual

.
current test PASSED/SKIPPED -- test_reconstruct_url in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.18363618850708s cumulative, 0.004195690155029297s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.18875885009766s cumulative, 0.005122661590576172s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.19362211227417s cumulative, 0.004863262176513672s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.19870185852051s cumulative, 0.005079746246337891s individual

.
current test PASSED/SKIPPED -- test_port_explicit in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.20253252983093s cumulative, 0.0038306713104248047s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.20624542236328s cumulative, 0.003712892532348633s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.20967650413513s cumulative, 0.003431081771850586s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.21374320983887s cumulative, 0.0040667057037353516s individual

.
current test PASSED/SKIPPED -- test_netloc_nondefault_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.2174322605133s cumulative, 0.0036890506744384766s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.2213966846466s cumulative, 0.003964424133300781s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.2249608039856s cumulative, 0.003564119338989258s individual

.
current test PASSED/SKIPPED -- test_client_accepts in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.22992324829102s cumulative, 0.004962444305419922s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.23376870155334s cumulative, 0.0038454532623291016s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.23720717430115s cumulative, 0.0034384727478027344s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.24077534675598s cumulative, 0.0035681724548339844s individual

.
current test PASSED/SKIPPED -- test_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.24569535255432s cumulative, 0.004920005798339844s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.24998664855957s cumulative, 0.0042912960052490234s individual

.
current test PASSED/SKIPPED -- test_client_accepts_bogus in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.25354194641113s cumulative, 0.0035552978515625s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.25890612602234s cumulative, 0.005364179611206055s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.26303839683533s cumulative, 0.004132270812988281s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.26748132705688s cumulative, 0.004442930221557617s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.27243781089783s cumulative, 0.004956483840942383s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.27705955505371s cumulative, 0.004621744155883789s individual

.
current test PASSED/SKIPPED -- test_range_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.28452968597412s cumulative, 0.007470130920410156s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.288907289505s cumulative, 0.004377603530883789s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.29345679283142s cumulative, 0.004549503326416016s individual

.
current test PASSED/SKIPPED -- test_date in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.29782629013062s cumulative, 0.004369497299194336s individual

.
current test PASSED/SKIPPED -- test_date_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.30174136161804s cumulative, 0.003915071487426758s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.30905103683472s cumulative, 0.007309675216674805s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.31340909004211s cumulative, 0.004358053207397461s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.31796550750732s cumulative, 0.004556417465209961s individual

.
current test PASSED/SKIPPED -- test_date in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.3217408657074s cumulative, 0.003775358200073242s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.32544922828674s cumulative, 0.003708362579345703s individual

.
current test PASSED/SKIPPED -- test_etag_parsing_helper in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.32854723930359s cumulative, 0.003098011016845703s individual

.
current test PASSED/SKIPPED -- test_relative_uri in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.33205676078796s cumulative, 0.003509521484375s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.33602476119995s cumulative, 0.003968000411987305s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.34071135520935s cumulative, 0.004686594009399414s individual

.
current test PASSED/SKIPPED -- test_etag_is_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.34428477287292s cumulative, 0.0035734176635742188s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.34812474250793s cumulative, 0.0038399696350097656s individual

.
current test PASSED/SKIPPED -- test_date_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.35176396369934s cumulative, 0.00363922119140625s individual

.
current test PASSED/SKIPPED -- test_client_accepts_props in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.35554242134094s cumulative, 0.0037784576416015625s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.3591160774231s cumulative, 0.0035736560821533203s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.36284923553467s cumulative, 0.0037331581115722656s individual

.
current test PASSED/SKIPPED -- test_netloc_from_env in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.36613202095032s cumulative, 0.003282785415649414s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.37026071548462s cumulative, 0.004128694534301758s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.37418293952942s cumulative, 0.003922224044799805s individual

.
current test PASSED/SKIPPED -- test_bogus_content_length_nan in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.37765836715698s cumulative, 0.0034754276275634766s individual

.
current test PASSED/SKIPPED -- test_date_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.38160753250122s cumulative, 0.003949165344238281s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.38539409637451s cumulative, 0.0037865638732910156s individual

.
current test PASSED/SKIPPED -- test_nonlatin_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.38883137702942s cumulative, 0.0034372806549072266s individual

.
current test PASSED/SKIPPED -- test_empty in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.39201784133911s cumulative, 0.003186464309692383s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.39560842514038s cumulative, 0.0035905838012695312s individual

.
current test PASSED/SKIPPED -- test_scheme_https in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.39895987510681s cumulative, 0.003351449966430664s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.40390133857727s cumulative, 0.004941463470458984s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.40851378440857s cumulative, 0.004612445831298828s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.4122359752655s cumulative, 0.0037221908569335938s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.41620063781738s cumulative, 0.003964662551879883s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.41992163658142s cumulative, 0.003720998764038086s individual

.
current test PASSED/SKIPPED -- test_client_accepts in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.42472553253174s cumulative, 0.004803895950317383s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.4284815788269s cumulative, 0.0037560462951660156s individual

.
current test PASSED/SKIPPED -- test_netloc_default_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.43170762062073s cumulative, 0.003226041793823242s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.43573713302612s cumulative, 0.004029512405395508s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.4391655921936s cumulative, 0.0034284591674804688s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.44275164604187s cumulative, 0.0035860538482666016s individual

.
current test PASSED/SKIPPED -- test_app_present in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.44593739509583s cumulative, 0.003185749053955078s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.44970107078552s cumulative, 0.0037636756896972656s individual

.
current test PASSED/SKIPPED -- test_uri_https in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.45348072052002s cumulative, 0.0037796497344970703s individual

.
current test PASSED/SKIPPED -- test_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.45671701431274s cumulative, 0.0032362937927246094s individual

.
current test PASSED/SKIPPED -- test_uri_https in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.46013379096985s cumulative, 0.003416776657104492s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.46394801139832s cumulative, 0.003814220428466797s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.467768907547s cumulative, 0.0038208961486816406s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.47212791442871s cumulative, 0.004359006881713867s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.47588682174683s cumulative, 0.0037589073181152344s individual

.
current test PASSED/SKIPPED -- test_date in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.480881690979s cumulative, 0.004994869232177734s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.48678660392761s cumulative, 0.0059049129486083984s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.49338579177856s cumulative, 0.0065991878509521484s individual

.
current test PASSED/SKIPPED -- test_nonlatin_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.49837684631348s cumulative, 0.004991054534912109s individual

.
current test PASSED/SKIPPED -- test_bogus_content_length_nan in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.50238299369812s cumulative, 0.004006147384643555s individual

.
current test PASSED/SKIPPED -- test_nonlatin_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.50597739219666s cumulative, 0.0035943984985351562s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.51016283035278s cumulative, 0.00418543815612793s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.5149507522583s cumulative, 0.004787921905517578s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.51950240135193s cumulative, 0.00455164909362793s individual

.
current test PASSED/SKIPPED -- test_port_explicit in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.52283000946045s cumulative, 0.003327608108520508s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.52672815322876s cumulative, 0.003898143768310547s individual

.
current test PASSED/SKIPPED -- test_nonlatin_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.53085684776306s cumulative, 0.004128694534301758s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.53572535514832s cumulative, 0.004868507385253906s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.54182076454163s cumulative, 0.006095409393310547s individual

.
current test PASSED/SKIPPED -- test_netloc_from_env in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.54561376571655s cumulative, 0.003793001174926758s individual

.
current test PASSED/SKIPPED -- test_scheme_https in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.54966449737549s cumulative, 0.004050731658935547s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.55397415161133s cumulative, 0.004309654235839844s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.55825757980347s cumulative, 0.004283428192138672s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.56305813789368s cumulative, 0.004800558090209961s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.56715726852417s cumulative, 0.004099130630493164s individual

.
current test PASSED/SKIPPED -- test_netloc_from_env in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.5709068775177s cumulative, 0.0037496089935302734s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.57509326934814s cumulative, 0.004186391830444336s individual

.
current test PASSED/SKIPPED -- test_etag_parsing_helper in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.57834458351135s cumulative, 0.003251314163208008s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.58209013938904s cumulative, 0.003745555877685547s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.5853853225708s cumulative, 0.0032951831817626953s individual

.
current test PASSED/SKIPPED -- test_netloc_nondefault_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.5885796546936s cumulative, 0.0031943321228027344s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.59220147132874s cumulative, 0.003621816635131836s individual

.
current test PASSED/SKIPPED -- test_scheme_https in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.5955638885498s cumulative, 0.003362417221069336s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.60004210472107s cumulative, 0.0044782161712646484s individual

.
current test PASSED/SKIPPED -- test_range_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.60706543922424s cumulative, 0.007023334503173828s individual

.
current test PASSED/SKIPPED -- test_port_explicit in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.6108980178833s cumulative, 0.003832578659057617s individual

.
current test PASSED/SKIPPED -- test_content_length_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.61414098739624s cumulative, 0.003242969512939453s individual

.
current test PASSED/SKIPPED -- test_app_present in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.61719393730164s cumulative, 0.003052949905395508s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.62085819244385s cumulative, 0.003664255142211914s individual

.
current test PASSED/SKIPPED -- test_client_prefers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.62421154975891s cumulative, 0.0033533573150634766s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.62802124023438s cumulative, 0.003809690475463867s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.63162803649902s cumulative, 0.0036067962646484375s individual

.
current test PASSED/SKIPPED -- test_netloc_default_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.63521432876587s cumulative, 0.003586292266845703s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.63889074325562s cumulative, 0.0036764144897460938s individual

.
current test PASSED/SKIPPED -- test_bogus_content_length_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.6419723033905s cumulative, 0.0030815601348876953s individual

.
current test PASSED/SKIPPED -- test_relative_uri in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.64552021026611s cumulative, 0.0035479068756103516s individual

.
current test PASSED/SKIPPED -- test_range_unit in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.64889144897461s cumulative, 0.0033712387084960938s individual

.
current test PASSED/SKIPPED -- test_empty in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.65188574790955s cumulative, 0.0029942989349365234s individual

.
current test PASSED/SKIPPED -- test_app_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.65503764152527s cumulative, 0.0031518936157226562s individual

.
current test PASSED/SKIPPED -- test_client_prefers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.65865731239319s cumulative, 0.003619670867919922s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.66222143173218s cumulative, 0.003564119338989258s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.66631722450256s cumulative, 0.004095792770385742s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.67064166069031s cumulative, 0.004324436187744141s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.674387216568s cumulative, 0.003745555877685547s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.67815852165222s cumulative, 0.0037713050842285156s individual

.
current test PASSED/SKIPPED -- test_netloc_default_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.68133068084717s cumulative, 0.003172159194946289s individual

.
current test PASSED/SKIPPED -- test_date_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.684898853302s cumulative, 0.0035681724548339844s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.68843865394592s cumulative, 0.0035398006439208984s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.69204759597778s cumulative, 0.0036089420318603516s individual

.
current test PASSED/SKIPPED -- test_client_accepts_bogus in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.69529485702515s cumulative, 0.0032472610473632812s individual

.
current test PASSED/SKIPPED -- test_reconstruct_url in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.69837379455566s cumulative, 0.003078937530517578s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.70250606536865s cumulative, 0.004132270812988281s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.70600271224976s cumulative, 0.0034966468811035156s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.70969867706299s cumulative, 0.003695964813232422s individual

.
current test PASSED/SKIPPED -- test_scheme_https in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.71295094490051s cumulative, 0.003252267837524414s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.71675300598145s cumulative, 0.003802061080932617s individual

.
current test PASSED/SKIPPED -- test_netloc_default_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.72036480903625s cumulative, 0.0036118030548095703s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.72407484054565s cumulative, 0.003710031509399414s individual

.
current test PASSED/SKIPPED -- test_etag_parsing_helper in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.72713947296143s cumulative, 0.0030646324157714844s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.73068070411682s cumulative, 0.003541231155395508s individual

.
current test PASSED/SKIPPED -- test_etag_parsing_helper in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.73416543006897s cumulative, 0.0034847259521484375s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.73835897445679s cumulative, 0.004193544387817383s individual

.
current test PASSED/SKIPPED -- test_range_unit in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.74176335334778s cumulative, 0.003404378890991211s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.74550557136536s cumulative, 0.003742218017578125s individual

.
current test PASSED/SKIPPED -- test_date_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.74876713752747s cumulative, 0.003261566162109375s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 112.75339865684509s cumulative, 0.004631519317626953s individual


tests/asgi/test_asgi_helpers.py .
current test PASSED/SKIPPED -- test_intricate_app in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_helpers.py: 112.75648427009583s cumulative, 0.003085613250732422s individual


tests/test_default_router.py .
current test PASSED/SKIPPED -- test_not_str in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 112.76060342788696s cumulative, 0.004119157791137695s individual

.
current test PASSED/SKIPPED -- test_not_str in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 112.76389455795288s cumulative, 0.0032911300659179688s individual

.
current test PASSED/SKIPPED -- test_not_str in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 112.76726222038269s cumulative, 0.0033676624298095703s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 112.77372550964355s cumulative, 0.006463289260864258s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 112.77887916564941s cumulative, 0.005153656005859375s individual

.
current test PASSED/SKIPPED -- test_non_conflict in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 112.79018664360046s cumulative, 0.011307477951049805s individual

.
current test PASSED/SKIPPED -- test_options_converters_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 112.80857419967651s cumulative, 0.018387556076049805s individual

.
current test PASSED/SKIPPED -- test_non_conflict in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 112.81856679916382s cumulative, 0.009992599487304688s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 112.8293707370758s cumulative, 0.010803937911987305s individual

.
current test PASSED/SKIPPED -- test_complex_alt in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 112.84760665893555s cumulative, 0.01823592185974121s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 112.86275291442871s cumulative, 0.015146255493164062s individual

.
current test PASSED/SKIPPED -- test_options_converters_invalid_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 112.87400984764099s cumulative, 0.011256933212280273s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 112.8847975730896s cumulative, 0.010787725448608398s individual

.
current test PASSED/SKIPPED -- test_duplicate_field_names in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 112.88839793205261s cumulative, 0.0036003589630126953s individual

.
current test PASSED/SKIPPED -- test_dead_segment in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 112.90325689315796s cumulative, 0.01485896110534668s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 112.92042660713196s cumulative, 0.017169713973999023s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 112.92992329597473s cumulative, 0.009496688842773438s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 112.94335556030273s cumulative, 0.01343226432800293s individual

.
current test PASSED/SKIPPED -- test_params_in_non_taken_branches in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 112.95096707344055s cumulative, 0.007611513137817383s individual

.
current test PASSED/SKIPPED -- test_user_regression_recipes in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 112.95408415794373s cumulative, 0.003117084503173828s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 112.95769381523132s cumulative, 0.0036096572875976562s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 112.9688675403595s cumulative, 0.011173725128173828s individual

.
current test PASSED/SKIPPED -- test_capture_path_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 112.97301578521729s cumulative, 0.004148244857788086s individual

.
current test PASSED/SKIPPED -- test_converters_malformed_specification in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 112.98217749595642s cumulative, 0.009161710739135742s individual

.
current test PASSED/SKIPPED -- test_dead_segment in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 112.99627923965454s cumulative, 0.014101743698120117s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.0015001296997s cumulative, 0.005220890045166016s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.01524138450623s cumulative, 0.013741254806518555s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.02854442596436s cumulative, 0.013303041458129883s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.03371000289917s cumulative, 0.005165576934814453s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.03732585906982s cumulative, 0.003615856170654297s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.0409209728241s cumulative, 0.003595113754272461s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.05888366699219s cumulative, 0.01796269416809082s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.06768846511841s cumulative, 0.008804798126220703s individual

.
current test PASSED/SKIPPED -- test_options_converters_invalid_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.07876110076904s cumulative, 0.011072635650634766s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.09207892417908s cumulative, 0.01331782341003418s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.10532736778259s cumulative, 0.013248443603515625s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.11036896705627s cumulative, 0.005041599273681641s individual

.
current test PASSED/SKIPPED -- test_options_converters_invalid_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.11921262741089s cumulative, 0.008843660354614258s individual

.
current test PASSED/SKIPPED -- test_user_regression_versioned_url in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.1224901676178s cumulative, 0.0032775402069091797s individual

.
current test PASSED/SKIPPED -- test_options_converters_invalid_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.13117098808289s cumulative, 0.00868082046508789s individual

.
current test PASSED/SKIPPED -- test_converters in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.14429116249084s cumulative, 0.013120174407958984s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.1590633392334s cumulative, 0.014772176742553711s individual

.
current test PASSED/SKIPPED -- test_dead_segment in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.17208075523376s cumulative, 0.013017416000366211s individual

.
current test PASSED/SKIPPED -- test_conflict in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.18249368667603s cumulative, 0.010412931442260742s individual

.
current test PASSED/SKIPPED -- test_capture_path_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.18667435646057s cumulative, 0.0041806697845458984s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.19040179252625s cumulative, 0.003727436065673828s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.19987535476685s cumulative, 0.009473562240600586s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.21623349189758s cumulative, 0.016358137130737305s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.22606539726257s cumulative, 0.009831905364990234s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.22969126701355s cumulative, 0.0036258697509765625s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.24308824539185s cumulative, 0.013396978378295898s individual

.
current test PASSED/SKIPPED -- test_duplicate_field_names in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.24591326713562s cumulative, 0.002825021743774414s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.25461935997009s cumulative, 0.008706092834472656s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.25833249092102s cumulative, 0.0037131309509277344s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.26542687416077s cumulative, 0.007094383239746094s individual

.
current test PASSED/SKIPPED -- test_conflict in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.27473831176758s cumulative, 0.009311437606811523s individual

.
current test PASSED/SKIPPED -- test_options_converters_update in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.28783512115479s cumulative, 0.013096809387207031s individual



def find(path, return_values, patterns, converters, params):
    path_len = len(path)
    if path_len > 0:
        if path[0] == 'repos':
            if path_len > 1:
                if path_len > 2:
                    if path_len > 3:
                        if path[3] == 'commits':
                            if path_len == 4:
                                params['org'] = path[1]
                                params['repo'] = path[2]
                                return return_values[3]
                            return None
                        if path[3] == 'compare':
                            if path_len > 4:
                                if path[4] == 'all':
                                    if path_len == 5:
                                        params['org'] = path[1]
                                        params['repo'] = path[2]
                                        return return_values[4]
                                match = patterns[0].match(path[4])  # ^(?P<usr0>.+):(?P<branch0>.+)\.\.\.(?P<usr1>.+):(?P<branch1>.+)$
                                if match is not None:
                                    dict_match_3 = match.groupdict()
                                    if path_len > 5:
                                        if path[5] == 'full':
                                            if path_len == 6:
                                                params['org'] = path[1]
                                                params['repo'] = path[2]
                                                params.update(dict_match_3)
                                                return return_values[6]
                                        if path[5] == 'part':
                                            if path_len == 6:
                                                params['org'] = path[1]
                                                params['repo'] = path[2]
                                                params.update(dict_match_3)
                                                return return_values[7]
                                    if path_len == 5:
                                        params['org'] = path[1]
                                        params['repo'] = path[2]
                                        params.update(dict_match_3)
                                        return return_values[5]
                                match = patterns[1].match(path[4])  # ^(?P<usr0>.+):(?P<branch0>.+)$
                                if match is not None:
                                    dict_match_3 = match.groupdict()
                                    if path_len > 5:
                                        if path[5] == 'full':
                                            if path_len == 6:
                                                params['org'] = path[1]
                                                params['repo'] = path[2]
                                                params.update(dict_match_3)
                                                return return_values[9]
                                    if path_len == 5:
                                        params['org'] = path[1]
                                        params['repo'] = path[2]
                                        params.update(dict_match_3)
                                        return return_values[8]
                            return None
                        return None
                    if path_len == 3:
                        params['org'] = path[1]
                        params['repo'] = path[2]
                        return return_values[2]
                    return None
                if path_len == 2:
                    params['org'] = path[1]
                    return return_values[1]
                return None
            if path_len == 1:
                return return_values[0]
            return None
        if path[0] == 'teams':
            if path_len > 1:
                if path[1] == 'default':
                    if path_len > 2:
                        if path[2] == 'members':
                            if path_len > 3:
                                if path[3] == 'thing':
                                    if path_len == 4:
                                        return return_values[11]
                    if path_len == 2:
                        return return_values[10]
                if path_len > 2:
                    if path[2] == 'members':
                        if path_len == 3:
                            params['id'] = path[1]
                            return return_values[13]
                if path_len == 2:
                    params['id'] = path[1]
                    return return_values[12]
            return None
        if path[0] == 'user':
            if path_len > 1:
                if path[1] == 'memberships':
                    if path_len == 2:
                        return return_values[14]
                    return None
                return None
            return None
        if path[0] == 'emojis':
            if path_len > 1:
                if path[1] == 'signs':
                    if path_len > 2:
                        if path[2] == '0':
                            if path_len == 3:
                                return return_values[16]
                        if path[2] == '42':
                            if path_len > 3:
                                if path[3] == 'small.jpg':
                                    if path_len == 4:
                                        return return_values[18]
                            if path_len == 3:
                                return return_values[17]
                        if path[2] == '78':
                            if path_len > 3:
                                if path[3] == 'small.png':
                                    if path_len == 4:
                                        return return_values[19]
                                if path[3] == 'small(png)':
                                    if path_len == 4:
                                        return return_values[20]
                                if path[3] == 'small_png':
                                    if path_len == 4:
                                        return return_values[21]
                        if path_len == 3:
                            params['id'] = path[2]
                            return return_values[22]
                    return None
                return None
            if path_len == 1:
                return return_values[15]
            return None
        if path[0] == 'images':
            if path_len > 1:
                match = patterns[2].match(path[1])  # ^(?P<id>.+)\.gif$
                if match is not None:
                    dict_match_1 = match.groupdict()
                    if path_len == 2:
                        params.update(dict_match_1)
                        return return_values[23]
                    return None
                return None
            return None
        if path[0] == 'gists':
            if path_len > 1:
                if path[1] == 'first':
                    if path_len == 2:
                        return return_values[24]
                if path_len > 2:
                    if path[2] == 'raw':
                        if path_len == 3:
                            params['id'] = path[1]
                            return return_values[25]
                    if path_len == 3:
                        params['id'] = path[1]
                        params['representation'] = path[2]
                        return return_values[26]
            return None
        if path[0] == 'item':
            if path_len > 1:
                if path_len == 2:
                    params['q'] = path[1]
                    return return_values[27]
                return None
            return None
        if path[0] == 'cvt':
            if path_len > 1:
                if path[1] == 'teams':
                    if path_len > 2:
                        if path[2] == 'default':
                            if path_len > 3:
                                if path[3] == 'members':
                                    if path_len > 4:
                                        match = patterns[3].match(path[4])  # ^(?P<id>.+)-(?P<tenure>.+)$
                                        if match is not None:
                                            groups = match.groupdict()
                                            fragment = groups.pop('id')
                                            field_value_1 = converters[0].convert(fragment)
                                            if field_value_1 is not None:
                                                fragment = groups.pop('tenure')
                                                field_value_2 = converters[1].convert(fragment)
                                                if field_value_2 is not None:
                                                    if path_len == 5:
                                                        params['id'] = field_value_1
                                                        params['tenure'] = field_value_2
                                                        return return_values[29]
                            if path_len == 3:
                                return return_values[28]
                        fragment = path[2]
                        field_value_1 = converters[2].convert(fragment)
                        if field_value_1 is not None:
                            if path_len > 3:
                                if path[3] == 'members':
                                    if path_len == 4:
                                        params['id'] = field_value_1
                                        return return_values[31]
                            if path_len == 3:
                                params['id'] = field_value_1
                                return return_values[30]
                    return None
                if path[1] == 'repos':
                    if path_len > 2:
                        if path_len > 3:
                            if path_len > 4:
                                if path[4] == 'compare':
                                    if path_len > 5:
                                        match = patterns[4].match(path[5])  # ^(?P<usr0>.+):(?P<branch0>.+)\.\.\.(?P<usr1>.+):(?P<branch1>.+)$
                                        if match is not None:
                                            groups = match.groupdict()
                                            fragment = groups.pop('branch0')
                                            field_value_3 = converters[3].convert(fragment)
                                            if field_value_3 is not None:
                                                fragment = groups.pop('branch1')
                                                field_value_4 = converters[4].convert(fragment)
                                                if field_value_4 is not None:
                                                    dict_groups_5 = groups
                                                    if path_len > 6:
                                                        if path[6] == 'part':
                                                            if path_len == 7:
                                                                params['org'] = path[2]
                                                                params['repo'] = path[3]
                                                                params['branch0'] = field_value_3
                                                                params['branch1'] = field_value_4
                                                                params.update(dict_groups_5)
                                                                return return_values[32]
                                        match = patterns[5].match(path[5])  # ^(?P<usr0>.+):(?P<branch0>.+)$
                                        if match is not None:
                                            groups = match.groupdict()
                                            fragment = groups.pop('branch0')
                                            field_value_3 = converters[5].convert(fragment)
                                            if field_value_3 is not None:
                                                dict_groups_4 = groups
                                                if path_len > 6:
                                                    if path[6] == 'full':
                                                        if path_len == 7:
                                                            params['org'] = path[2]
                                                            params['repo'] = path[3]
                                                            params['branch0'] = field_value_3
                                                            params.update(dict_groups_4)
                                                            return return_values[34]
                                                if path_len == 6:
                                                    params['org'] = path[2]
                                                    params['repo'] = path[3]
                                                    params['branch0'] = field_value_3
                                                    params.update(dict_groups_4)
                                                    return return_values[33]
                                    return None
                                return None
                            return None
                        return None
                    return None
                return None
            return None
        return None
    return None

.
current test PASSED/SKIPPED -- test_print_src in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.30095434188843s cumulative, 0.013119220733642578s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.31428408622742s cumulative, 0.013329744338989258s individual

.
current test PASSED/SKIPPED -- test_converters in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.32871866226196s cumulative, 0.014434576034545898s individual

.
current test PASSED/SKIPPED -- test_capture_path_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.33226871490479s cumulative, 0.0035500526428222656s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.33613300323486s cumulative, 0.003864288330078125s individual

.
current test PASSED/SKIPPED -- test_params_in_non_taken_branches in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.34193015098572s cumulative, 0.005797147750854492s individual

.
current test PASSED/SKIPPED -- test_options_converters_invalid_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.35085368156433s cumulative, 0.008923530578613281s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.35584306716919s cumulative, 0.0049893856048583984s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.36684370040894s cumulative, 0.011000633239746094s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.38293671607971s cumulative, 0.016093015670776367s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.39715075492859s cumulative, 0.014214038848876953s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.41053533554077s cumulative, 0.013384580612182617s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.42457151412964s cumulative, 0.014036178588867188s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.43400359153748s cumulative, 0.009432077407836914s individual

.
current test PASSED/SKIPPED -- test_converters_with_invalid_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.44465589523315s cumulative, 0.010652303695678711s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.45608615875244s cumulative, 0.01143026351928711s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.461993932724s cumulative, 0.005907773971557617s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.46587991714478s cumulative, 0.003885984420776367s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.47148370742798s cumulative, 0.005603790283203125s individual

.
current test PASSED/SKIPPED -- test_converters in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.48610138893127s cumulative, 0.014617681503295898s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.50055050849915s cumulative, 0.014449119567871094s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.5097188949585s cumulative, 0.009168386459350586s individual

.
current test PASSED/SKIPPED -- test_match_entire_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.51356887817383s cumulative, 0.0038499832153320312s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.51767086982727s cumulative, 0.004101991653442383s individual

.
current test PASSED/SKIPPED -- test_converters_malformed_specification in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.52719831466675s cumulative, 0.009527444839477539s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.53755450248718s cumulative, 0.01035618782043457s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.55740809440613s cumulative, 0.019853591918945312s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.56704330444336s cumulative, 0.009635210037231445s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.57095289230347s cumulative, 0.003909587860107422s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.58518052101135s cumulative, 0.014227628707885742s individual

.
current test PASSED/SKIPPED -- test_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.59908080101013s cumulative, 0.013900279998779297s individual

.
current test PASSED/SKIPPED -- test_duplicate_field_names in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.60209941864014s cumulative, 0.003018617630004883s individual

.
current test PASSED/SKIPPED -- test_converters in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.61615371704102s cumulative, 0.014054298400878906s individual

.
current test PASSED/SKIPPED -- test_options_converters_invalid_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.62487840652466s cumulative, 0.008724689483642578s individual

.
current test PASSED/SKIPPED -- test_params_in_non_taken_branches in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.63076829910278s cumulative, 0.005889892578125s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.64468693733215s cumulative, 0.013918638229370117s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.66072726249695s cumulative, 0.016040325164794922s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.67531299591064s cumulative, 0.014585733413696289s individual

.
current test PASSED/SKIPPED -- test_root_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.6787941455841s cumulative, 0.003481149673461914s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.68866801261902s cumulative, 0.00987386703491211s individual

.
current test PASSED/SKIPPED -- test_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.70299005508423s cumulative, 0.014322042465209961s individual

.
current test PASSED/SKIPPED -- test_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.72064590454102s cumulative, 0.01765584945678711s individual

.
current test PASSED/SKIPPED -- test_malformed_pattern in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.73515033721924s cumulative, 0.014504432678222656s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.74201655387878s cumulative, 0.0068662166595458984s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.74756360054016s cumulative, 0.005547046661376953s individual

.
current test PASSED/SKIPPED -- test_subsegment_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.76373505592346s cumulative, 0.01617145538330078s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.77766275405884s cumulative, 0.013927698135375977s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.7813196182251s cumulative, 0.0036568641662597656s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.790602684021s cumulative, 0.009283065795898438s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.79466032981873s cumulative, 0.004057645797729492s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.79838418960571s cumulative, 0.0037238597869873047s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.80369853973389s cumulative, 0.005314350128173828s individual

.
current test PASSED/SKIPPED -- test_capture_path_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.8067398071289s cumulative, 0.0030412673950195312s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.81996512413025s cumulative, 0.013225317001342773s individual

.
current test PASSED/SKIPPED -- test_converters in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.83327770233154s cumulative, 0.013312578201293945s individual

.
current test PASSED/SKIPPED -- test_capture_path_no_children in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.83730864524841s cumulative, 0.004030942916870117s individual

.
current test PASSED/SKIPPED -- test_converters_with_invalid_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.84624600410461s cumulative, 0.008937358856201172s individual

.
current test PASSED/SKIPPED -- test_options_converters_invalid_name_on_update in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.85670375823975s cumulative, 0.010457754135131836s individual

.
current test PASSED/SKIPPED -- test_params_in_non_taken_branches in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.86229801177979s cumulative, 0.0055942535400390625s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.8666877746582s cumulative, 0.004389762878417969s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.88205909729004s cumulative, 0.015371322631835938s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.89165472984314s cumulative, 0.009595632553100586s individual

.
current test PASSED/SKIPPED -- test_conflict in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.90138602256775s cumulative, 0.009731292724609375s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.90520310401917s cumulative, 0.0038170814514160156s individual

.
current test PASSED/SKIPPED -- test_converters_with_invalid_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.91479206085205s cumulative, 0.009588956832885742s individual

.
current test PASSED/SKIPPED -- test_not_str in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.91889595985413s cumulative, 0.004103899002075195s individual

.
current test PASSED/SKIPPED -- test_match_entire_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.92255592346191s cumulative, 0.003659963607788086s individual

.
current test PASSED/SKIPPED -- test_literal in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.9361572265625s cumulative, 0.013601303100585938s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.94499230384827s cumulative, 0.008835077285766602s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.95005059242249s cumulative, 0.00505828857421875s individual

.
current test PASSED/SKIPPED -- test_params_in_non_taken_branches in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.95623731613159s cumulative, 0.006186723709106445s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.9604766368866s cumulative, 0.004239320755004883s individual

.
current test PASSED/SKIPPED -- test_options_converters_invalid_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.97283148765564s cumulative, 0.012354850769042969s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.98756575584412s cumulative, 0.014734268188476562s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 113.9970920085907s cumulative, 0.009526252746582031s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 114.01036596298218s cumulative, 0.013273954391479492s individual

.
current test PASSED/SKIPPED -- test_match_entire_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 114.0139536857605s cumulative, 0.0035877227783203125s individual

.
current test PASSED/SKIPPED -- test_override in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 114.02713441848755s cumulative, 0.013180732727050781s individual

.
current test PASSED/SKIPPED -- test_converters_with_invalid_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 114.03922080993652s cumulative, 0.01208639144897461s individual

.
current test PASSED/SKIPPED -- test_literal_segment in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 114.05378270149231s cumulative, 0.014561891555786133s individual

.
current test PASSED/SKIPPED -- test_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 114.06870651245117s cumulative, 0.014923810958862305s individual

.
current test PASSED/SKIPPED -- test_non_conflict in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 114.07815670967102s cumulative, 0.009450197219848633s individual

.
current test PASSED/SKIPPED -- test_converters in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 114.0915641784668s cumulative, 0.013407468795776367s individual

.
current test PASSED/SKIPPED -- test_complex_alt in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 114.10529327392578s cumulative, 0.013729095458984375s individual

.
current test PASSED/SKIPPED -- test_not_str in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 114.10970783233643s cumulative, 0.004414558410644531s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 114.1251654624939s cumulative, 0.015457630157470703s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 114.12912344932556s cumulative, 0.003957986831665039s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 114.13803672790527s cumulative, 0.008913278579711914s individual

.
current test PASSED/SKIPPED -- test_malformed_pattern in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 114.15288424491882s cumulative, 0.014847517013549805s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 114.16887426376343s cumulative, 0.015990018844604492s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 114.18223309516907s cumulative, 0.013358831405639648s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 114.19262433052063s cumulative, 0.0103912353515625s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 114.20190930366516s cumulative, 0.00928497314453125s individual

.
current test PASSED/SKIPPED -- test_dead_segment in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 114.21880197525024s cumulative, 0.016892671585083008s individual

.
current test PASSED/SKIPPED -- test_multivar in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 114.23230028152466s cumulative, 0.013498306274414062s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 114.24760556221008s cumulative, 0.015305280685424805s individual

.
current test PASSED/SKIPPED -- test_match_entire_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 114.25087642669678s cumulative, 0.003270864486694336s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 114.26422095298767s cumulative, 0.013344526290893555s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 114.26836562156677s cumulative, 0.0041446685791015625s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 114.2819254398346s cumulative, 0.013559818267822266s individual

.
current test PASSED/SKIPPED -- test_capture_path_no_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 114.28594422340393s cumulative, 0.0040187835693359375s individual

.
current test PASSED/SKIPPED -- test_conflict in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 114.29505681991577s cumulative, 0.00911259651184082s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 114.30020642280579s cumulative, 0.0051496028900146484s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 114.30907464027405s cumulative, 0.008868217468261719s individual

.
current test PASSED/SKIPPED -- test_duplicate_field_names in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 114.31189036369324s cumulative, 0.002815723419189453s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 114.32519626617432s cumulative, 0.013305902481079102s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 114.33024573326111s cumulative, 0.005049467086791992s individual

.
current test PASSED/SKIPPED -- test_options_converters_update in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 114.34527397155762s cumulative, 0.015028238296508789s individual

.
current test PASSED/SKIPPED -- test_not_str in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 114.34891963005066s cumulative, 0.003645658493041992s individual

.
current test PASSED/SKIPPED -- test_single_character_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 114.36211681365967s cumulative, 0.013197183609008789s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 114.37726616859436s cumulative, 0.015149354934692383s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 114.39106726646423s cumulative, 0.013801097869873047s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 114.4012439250946s cumulative, 0.010176658630371094s individual


tests/test_media_multipart.py .
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.40858292579651s cumulative, 0.007339000701904297s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.41218304634094s cumulative, 0.0036001205444335938s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.41788530349731s cumulative, 0.00570225715637207s individual

.
current test PASSED/SKIPPED -- test_body_part_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.42058181762695s cumulative, 0.002696514129638672s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.4241898059845s cumulative, 0.0036079883575439453s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.42754912376404s cumulative, 0.0033593177795410156s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.4306275844574s cumulative, 0.003078460693359375s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.43449568748474s cumulative, 0.00386810302734375s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.44120955467224s cumulative, 0.0067138671875s individual

.
current test PASSED/SKIPPED -- test_upload_multipart in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.44687008857727s cumulative, 0.005660533905029297s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.45090246200562s cumulative, 0.0040323734283447266s individual

.
current test PASSED/SKIPPED -- test_parse in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.45376777648926s cumulative, 0.002865314483642578s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.4598548412323s cumulative, 0.006087064743041992s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.46371150016785s cumulative, 0.003856658935546875s individual

.
current test PASSED/SKIPPED -- test_invalid_text_or_charset in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.46684384346008s cumulative, 0.003132343292236328s individual

.
current test PASSED/SKIPPED -- test_invalid_text_or_charset in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.46970009803772s cumulative, 0.0028562545776367188s individual

.
current test PASSED/SKIPPED -- test_deserialize_custom_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.47506189346313s cumulative, 0.005361795425415039s individual

.
current test PASSED/SKIPPED -- test_truncated_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.48159337043762s cumulative, 0.006531476974487305s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.48709106445312s cumulative, 0.00549769401550293s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.49337434768677s cumulative, 0.006283283233642578s individual

.
current test PASSED/SKIPPED -- test_body_part_properties in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.49638628959656s cumulative, 0.003011941909790039s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.49990105628967s cumulative, 0.0035147666931152344s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.5035650730133s cumulative, 0.0036640167236328125s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.50824689865112s cumulative, 0.004681825637817383s individual

.
current test PASSED/SKIPPED -- test_parse in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.51173162460327s cumulative, 0.0034847259521484375s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.52022624015808s cumulative, 0.00849461555480957s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.52583837509155s cumulative, 0.00561213493347168s individual

.
current test PASSED/SKIPPED -- test_truncated_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.53127765655518s cumulative, 0.005439281463623047s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.53446555137634s cumulative, 0.003187894821166992s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.54304599761963s cumulative, 0.008580446243286133s individual

.
current test PASSED/SKIPPED -- test_upload_multipart in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.5487232208252s cumulative, 0.005677223205566406s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.55203795433044s cumulative, 0.0033147335052490234s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.55711889266968s cumulative, 0.0050809383392333984s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.56413316726685s cumulative, 0.007014274597167969s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.56748294830322s cumulative, 0.003349781036376953s individual

.
current test PASSED/SKIPPED -- test_truncated_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.5744993686676s cumulative, 0.007016420364379883s individual

.
current test PASSED/SKIPPED -- test_empty_input in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.57744121551514s cumulative, 0.0029418468475341797s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.58341717720032s cumulative, 0.005975961685180664s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.58952736854553s cumulative, 0.006110191345214844s individual

.
current test PASSED/SKIPPED -- test_empty_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.59237241744995s cumulative, 0.0028450489044189453s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.59606981277466s cumulative, 0.0036973953247070312s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.59947800636292s cumulative, 0.003408193588256836s individual

.
current test PASSED/SKIPPED -- test_truncated_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.60494184494019s cumulative, 0.005463838577270508s individual

.
current test PASSED/SKIPPED -- test_missing_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.60761094093323s cumulative, 0.002669095993041992s individual

.
current test PASSED/SKIPPED -- test_deserialize_custom_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.61406350135803s cumulative, 0.0064525604248046875s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.61975979804993s cumulative, 0.005696296691894531s individual

.
current test PASSED/SKIPPED -- test_content_transfer_encoding_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.62506937980652s cumulative, 0.005309581756591797s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.62843370437622s cumulative, 0.0033643245697021484s individual

.
current test PASSED/SKIPPED -- test_truncated_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.6346447467804s cumulative, 0.006211042404174805s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.63778305053711s cumulative, 0.003138303756713867s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.64111018180847s cumulative, 0.0033271312713623047s individual

.
current test PASSED/SKIPPED -- test_invalid_text_or_charset in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.64407730102539s cumulative, 0.0029671192169189453s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.64766573905945s cumulative, 0.003588438034057617s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.6553840637207s cumulative, 0.007718324661254883s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.66092824935913s cumulative, 0.005544185638427734s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.66640591621399s cumulative, 0.0054776668548583984s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.6712908744812s cumulative, 0.004884958267211914s individual

.
current test PASSED/SKIPPED -- test_invalid_text_or_charset in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.67530250549316s cumulative, 0.004011631011962891s individual

.
current test PASSED/SKIPPED -- test_truncated_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.68139338493347s cumulative, 0.006090879440307617s individual

.
current test PASSED/SKIPPED -- test_deserialize_part_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.68746638298035s cumulative, 0.006072998046875s individual

.
current test PASSED/SKIPPED -- test_truncated_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.69300627708435s cumulative, 0.005539894104003906s individual

.
current test PASSED/SKIPPED -- test_unexected_form_structure in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.69944286346436s cumulative, 0.006436586380004883s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.70266771316528s cumulative, 0.0032248497009277344s individual

.
current test PASSED/SKIPPED -- test_unexected_form_structure in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.70982527732849s cumulative, 0.007157564163208008s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.71539235115051s cumulative, 0.005567073822021484s individual

.
current test PASSED/SKIPPED -- test_invalid_random_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.7351496219635s cumulative, 0.01975727081298828s individual

.
current test PASSED/SKIPPED -- test_from_buffered_stream in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.73775339126587s cumulative, 0.002603769302368164s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.74411678314209s cumulative, 0.006363391876220703s individual

.
current test PASSED/SKIPPED -- test_content_transfer_encoding_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.74919581413269s cumulative, 0.005079030990600586s individual

.
current test PASSED/SKIPPED -- test_data_too_large in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.76353645324707s cumulative, 0.014340639114379883s individual

.
current test PASSED/SKIPPED -- test_unsupported_charset in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.77013063430786s cumulative, 0.006594181060791016s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.77369785308838s cumulative, 0.003567218780517578s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.77683234214783s cumulative, 0.003134489059448242s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.78224992752075s cumulative, 0.005417585372924805s individual

.
current test PASSED/SKIPPED -- test_invalid_random_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.81194710731506s cumulative, 0.029697179794311523s individual

.
current test PASSED/SKIPPED -- test_filename_star in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.81993222236633s cumulative, 0.007985115051269531s individual

.
current test PASSED/SKIPPED -- test_parse in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.83871245384216s cumulative, 0.018780231475830078s individual

.
current test PASSED/SKIPPED -- test_unknown_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.8413290977478s cumulative, 0.0026166439056396484s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.84908509254456s cumulative, 0.00775599479675293s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.8545560836792s cumulative, 0.005470991134643555s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.85763716697693s cumulative, 0.003081083297729492s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.86139154434204s cumulative, 0.0037543773651123047s individual

.
current test PASSED/SKIPPED -- test_unsupported_charset in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.86739301681519s cumulative, 0.006001472473144531s individual

.
current test PASSED/SKIPPED -- test_truncated_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.87329530715942s cumulative, 0.005902290344238281s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.87662291526794s cumulative, 0.003327608108520508s individual

.
current test PASSED/SKIPPED -- test_filename_star in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.88697838783264s cumulative, 0.010355472564697266s individual

.
current test PASSED/SKIPPED -- test_data_too_large in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.89628839492798s cumulative, 0.009310007095336914s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.8999092578888s cumulative, 0.0036208629608154297s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.90581965446472s cumulative, 0.005910396575927734s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.91225671768188s cumulative, 0.006437063217163086s individual

.
current test PASSED/SKIPPED -- test_nested_multipart_mixed in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.91707849502563s cumulative, 0.00482177734375s individual

.
current test PASSED/SKIPPED -- test_parse in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.92004823684692s cumulative, 0.0029697418212890625s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.92388486862183s cumulative, 0.0038366317749023438s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.92906332015991s cumulative, 0.0051784515380859375s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.93578290939331s cumulative, 0.0067195892333984375s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.93949055671692s cumulative, 0.0037076473236083984s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.94535803794861s cumulative, 0.005867481231689453s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.95193552970886s cumulative, 0.006577491760253906s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.95553755760193s cumulative, 0.0036020278930664062s individual

.
current test PASSED/SKIPPED -- test_serialize in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.95884227752686s cumulative, 0.003304719924926758s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.96235060691833s cumulative, 0.003508329391479492s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.96622252464294s cumulative, 0.003871917724609375s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.97180199623108s cumulative, 0.005579471588134766s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.98633980751038s cumulative, 0.014537811279296875s individual

.
current test PASSED/SKIPPED -- test_deserialize_part_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 114.99664354324341s cumulative, 0.010303735733032227s individual


tests/test_error_handlers.py E
current test FAILED -- test_data_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 115.10519027709961s cumulative, 0.10854673385620117s individual

E
current test FAILED -- test_media_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 116.78879642486572s cumulative, 1.6836061477661133s individual

.
current test PASSED/SKIPPED -- test_body_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 116.79586863517761s cumulative, 0.0070722103118896484s individual

.
current test PASSED/SKIPPED -- test_media_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 116.80026841163635s cumulative, 0.004399776458740234s individual

E
current test FAILED -- test_body_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 116.88726234436035s cumulative, 0.08699393272399902s individual

.
current test PASSED/SKIPPED -- test_data_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 116.89290881156921s cumulative, 0.005646467208862305s individual

E
current test FAILED -- test_media_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 116.96917605400085s cumulative, 0.07626724243164062s individual

E
current test FAILED -- test_body_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 117.05707573890686s cumulative, 0.08789968490600586s individual

E
current test FAILED -- test_data_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 117.13218545913696s cumulative, 0.07510972023010254s individual

.
current test PASSED/SKIPPED -- test_data_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 117.13813948631287s cumulative, 0.00595402717590332s individual

.
current test PASSED/SKIPPED -- test_body_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 117.14248991012573s cumulative, 0.004350423812866211s individual

.
current test PASSED/SKIPPED -- test_media_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 117.14688229560852s cumulative, 0.004392385482788086s individual

E
current test FAILED -- test_subclass_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 117.22656393051147s cumulative, 0.0796816349029541s individual

.
current test PASSED/SKIPPED -- test_error_precedence_duplicate in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 117.23185968399048s cumulative, 0.005295753479003906s individual

.
current test PASSED/SKIPPED -- test_caught_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 117.23640584945679s cumulative, 0.004546165466308594s individual

.
current test PASSED/SKIPPED -- test_invalid_add_exception_handler_input in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 117.24010229110718s cumulative, 0.003696441650390625s individual

E
current test FAILED -- test_handler_multiple_exception_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 117.31304812431335s cumulative, 0.07294583320617676s individual

E
current test FAILED -- test_error_precedence_subclass_order_indifference in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 117.39295244216919s cumulative, 0.07990431785583496s individual

.
current test PASSED/SKIPPED -- test_catch_http_no_route_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 117.3990249633789s cumulative, 0.006072521209716797s individual

.
current test PASSED/SKIPPED -- test_error_precedence_subclass_order_indifference in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 117.40325164794922s cumulative, 0.0042266845703125s individual

E
current test FAILED -- test_handle_not_defined in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 117.47894859313965s cumulative, 0.07569694519042969s individual

.
current test PASSED/SKIPPED -- test_uncaught_python_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 117.48527932167053s cumulative, 0.006330728530883789s individual

E
current test FAILED -- test_invalid_add_exception_handler_input in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 117.5608241558075s cumulative, 0.07554483413696289s individual

E
current test FAILED -- test_caught_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 119.50230312347412s cumulative, 1.941478967666626s individual

E
current test FAILED -- test_error_precedence_subclass in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 119.58472442626953s cumulative, 0.08242130279541016s individual

E
current test FAILED -- test_uncaught_python_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 119.6616621017456s cumulative, 0.07693767547607422s individual

E
current test FAILED -- test_invalid_add_exception_handler_input in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 119.74594354629517s cumulative, 0.08428144454956055s individual

.
current test PASSED/SKIPPED -- test_uncaught_python_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 119.75696110725403s cumulative, 0.011017560958862305s individual

.
current test PASSED/SKIPPED -- test_uncaught_python_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 119.76330399513245s cumulative, 0.006342887878417969s individual

E
current test FAILED -- test_uncaught_python_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 119.8502185344696s cumulative, 0.0869145393371582s individual

E
current test FAILED -- test_handler_multiple_exception_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 119.954416513443s cumulative, 0.10419797897338867s individual

.
current test PASSED/SKIPPED -- test_handler_single_exception_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 119.96399784088135s cumulative, 0.009581327438354492s individual

.
current test PASSED/SKIPPED -- test_invalid_add_exception_handler_input in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 119.96904683113098s cumulative, 0.005048990249633789s individual

.
current test PASSED/SKIPPED -- test_invalid_add_exception_handler_input in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 119.97344946861267s cumulative, 0.004402637481689453s individual

E
current test FAILED -- test_uncaught_error_else in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 120.05777788162231s cumulative, 0.08432841300964355s individual

.
current test PASSED/SKIPPED -- test_uncaught_error_else in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 120.06663727760315s cumulative, 0.008859395980834961s individual

.
current test PASSED/SKIPPED -- test_handler_multiple_exception_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 120.07311606407166s cumulative, 0.006478786468505859s individual

E
current test FAILED -- test_error_precedence_duplicate in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 120.1526050567627s cumulative, 0.07948899269104004s individual

.
current test PASSED/SKIPPED -- test_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 120.1590986251831s cumulative, 0.006493568420410156s individual

.
current test PASSED/SKIPPED -- test_handler_multiple_exception_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 120.16384434700012s cumulative, 0.0047457218170166016s individual

E
current test FAILED -- test_invalid_add_exception_handler_input in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 120.24089336395264s cumulative, 0.07704901695251465s individual

.
current test PASSED/SKIPPED -- test_subclass_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 120.25431799888611s cumulative, 0.01342463493347168s individual

E
current test FAILED -- test_invalid_add_exception_handler_input in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 120.33920788764954s cumulative, 0.08488988876342773s individual

.
current test PASSED/SKIPPED -- test_handle_not_defined in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 120.34419989585876s cumulative, 0.004992008209228516s individual

.
current test PASSED/SKIPPED -- test_invalid_add_exception_handler_input in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 120.34821152687073s cumulative, 0.004011631011962891s individual

.
current test PASSED/SKIPPED -- test_handler_must_be_coroutine_for_asgi in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 120.35197186470032s cumulative, 0.0037603378295898438s individual

.
current test PASSED/SKIPPED -- test_handler_signature_shim in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 120.35762476921082s cumulative, 0.005652904510498047s individual

E
current test FAILED -- test_handler_single_exception_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 120.45801854133606s cumulative, 0.10039377212524414s individual

E
current test FAILED -- test_uncaught_python_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 120.5507698059082s cumulative, 0.09275126457214355s individual

E
current test FAILED -- test_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 122.3061854839325s cumulative, 1.755415678024292s individual

.
current test PASSED/SKIPPED -- test_error_precedence_subclass in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 122.31429076194763s cumulative, 0.008105278015136719s individual

E
current test FAILED -- test_converted_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 122.40711379051208s cumulative, 0.09282302856445312s individual

.
current test PASSED/SKIPPED -- test_converted_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 122.41334104537964s cumulative, 0.006227254867553711s individual


tests/test_utils.py .
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.41928553581238s cumulative, 0.005944490432739258s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.42284631729126s cumulative, 0.003560781478881836s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.4262797832489s cumulative, 0.0034334659576416016s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.42948651313782s cumulative, 0.0032067298889160156s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.43329334259033s cumulative, 0.0038068294525146484s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.43705296516418s cumulative, 0.003759622573852539s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.44018030166626s cumulative, 0.0031273365020751953s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.44404292106628s cumulative, 0.003862619400024414s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.44721698760986s cumulative, 0.0031740665435791016s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.45033931732178s cumulative, 0.0031223297119140625s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.45356345176697s cumulative, 0.0032241344451904297s individual

.
current test PASSED/SKIPPED -- test_something in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.4588897228241s cumulative, 0.005326271057128906s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.46282005310059s cumulative, 0.003930330276489258s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.46621298789978s cumulative, 0.003392934799194336s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.47013282775879s cumulative, 0.003919839859008789s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.4743378162384s cumulative, 0.004204988479614258s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.4781608581543s cumulative, 0.0038230419158935547s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.48156547546387s cumulative, 0.0034046173095703125s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.48660349845886s cumulative, 0.005038022994995117s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.4906394481659s cumulative, 0.00403594970703125s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.49435257911682s cumulative, 0.0037131309509277344s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.49769520759583s cumulative, 0.0033426284790039062s individual

.
current test PASSED/SKIPPED -- test_get_argnames in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.50048065185547s cumulative, 0.0027854442596435547s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.50423502922058s cumulative, 0.0037543773651123047s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.50754618644714s cumulative, 0.0033111572265625s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.51197218894958s cumulative, 0.004426002502441406s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.51915407180786s cumulative, 0.007181882858276367s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.5226662158966s cumulative, 0.003512144088745117s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.52673363685608s cumulative, 0.004067420959472656s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.53011679649353s cumulative, 0.003383159637451172s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.53377938270569s cumulative, 0.003662586212158203s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.53691244125366s cumulative, 0.003133058547973633s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.54152369499207s cumulative, 0.00461125373840332s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.54500031471252s cumulative, 0.0034766197204589844s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.54815006256104s cumulative, 0.003149747848510742s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.55135917663574s cumulative, 0.0032091140747070312s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.55510544776917s cumulative, 0.0037462711334228516s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.55916094779968s cumulative, 0.004055500030517578s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.56267762184143s cumulative, 0.003516674041748047s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.56618762016296s cumulative, 0.003509998321533203s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.56963896751404s cumulative, 0.0034513473510742188s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.57309532165527s cumulative, 0.0034563541412353516s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.57631325721741s cumulative, 0.003217935562133789s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.57984519004822s cumulative, 0.003531932830810547s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.58313751220703s cumulative, 0.0032923221588134766s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.58701729774475s cumulative, 0.0038797855377197266s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.59142327308655s cumulative, 0.004405975341796875s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.59526634216309s cumulative, 0.003843069076538086s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.59853029251099s cumulative, 0.0032639503479003906s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.6022276878357s cumulative, 0.0036973953247070312s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.6060721874237s cumulative, 0.0038444995880126953s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.60970330238342s cumulative, 0.003631114959716797s individual

.
current test PASSED/SKIPPED -- test_json_deprecation in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.61255192756653s cumulative, 0.0028486251831054688s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.61755299568176s cumulative, 0.005001068115234375s individual

.
current test PASSED/SKIPPED -- test_cached_text_in_result in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.62174272537231s cumulative, 0.004189729690551758s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.62690234184265s cumulative, 0.005159616470336914s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.63152647018433s cumulative, 0.004624128341674805s individual

.
current test PASSED/SKIPPED -- test_path_must_start_with_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.63500571250916s cumulative, 0.0034792423248291016s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.64024257659912s cumulative, 0.00523686408996582s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.64565992355347s cumulative, 0.005417346954345703s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.65053343772888s cumulative, 0.004873514175415039s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.65516591072083s cumulative, 0.004632472991943359s individual

.
current test PASSED/SKIPPED -- test_simulate_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.65969347953796s cumulative, 0.004527568817138672s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.66417241096497s cumulative, 0.004478931427001953s individual

.
current test PASSED/SKIPPED -- test_query_string_in_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.6684947013855s cumulative, 0.0043222904205322266s individual

.
current test PASSED/SKIPPED -- test_simulate_with_environ_extras in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.6727020740509s cumulative, 0.0042073726654052734s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.677414894104s cumulative, 0.004712820053100586s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.68187928199768s cumulative, 0.004464387893676758s individual

.
current test PASSED/SKIPPED -- test_repr_without_content_type_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.68452548980713s cumulative, 0.002646207809448242s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type_extra_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.69059133529663s cumulative, 0.006065845489501953s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.69664239883423s cumulative, 0.006051063537597656s individual

.
current test PASSED/SKIPPED -- test_override_method_with_extras in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.70227360725403s cumulative, 0.005631208419799805s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type_extra_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.70650124549866s cumulative, 0.004227638244628906s individual

.
current test PASSED/SKIPPED -- test_default_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.71091222763062s cumulative, 0.004410982131958008s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.7153742313385s cumulative, 0.004462003707885742s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.72022414207458s cumulative, 0.004849910736083984s individual

.
current test PASSED/SKIPPED -- test_no_prefix_allowed_for_query_strings_in_create_environ in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.72278594970703s cumulative, 0.002561807632446289s individual

.
current test PASSED/SKIPPED -- test_repr_without_content_type_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.72542524337769s cumulative, 0.002639293670654297s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.72954869270325s cumulative, 0.0041234493255615234s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.73375511169434s cumulative, 0.004206418991088867s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.73786973953247s cumulative, 0.004114627838134766s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type_extra_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.74321722984314s cumulative, 0.005347490310668945s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.7475357055664s cumulative, 0.0043184757232666016s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type_extra_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.75252985954285s cumulative, 0.00499415397644043s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.75677251815796s cumulative, 0.004242658615112305s individual

.
current test PASSED/SKIPPED -- test_query_string_no_question in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.76041889190674s cumulative, 0.003646373748779297s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.76779341697693s cumulative, 0.00737452507019043s individual

.
current test PASSED/SKIPPED -- test_simple_resource_body_json_xor in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.77055859565735s cumulative, 0.002765178680419922s individual

.
current test PASSED/SKIPPED -- test_decode_empty_result in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.77627730369568s cumulative, 0.005718708038330078s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.78205013275146s cumulative, 0.005772829055786133s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.78940773010254s cumulative, 0.007357597351074219s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.7944438457489s cumulative, 0.005036115646362305s individual

.
current test PASSED/SKIPPED -- test_decode_empty_result in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.79928779602051s cumulative, 0.004843950271606445s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type_extra_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.80585646629333s cumulative, 0.0065686702728271484s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.81088042259216s cumulative, 0.005023956298828125s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.81638360023499s cumulative, 0.005503177642822266s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.820805311203s cumulative, 0.004421710968017578s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.82519102096558s cumulative, 0.004385709762573242s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type_extra_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.82974433898926s cumulative, 0.004553318023681641s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.83468842506409s cumulative, 0.0049440860748291016s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.83898329734802s cumulative, 0.004294872283935547s individual

.
current test PASSED/SKIPPED -- test_wsgi_iterable_not_closeable in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.8415002822876s cumulative, 0.0025169849395751953s individual

.
current test PASSED/SKIPPED -- test_simulate_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.84631037712097s cumulative, 0.0048100948333740234s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.85106015205383s cumulative, 0.004749774932861328s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.85620379447937s cumulative, 0.005143642425537109s individual

.
current test PASSED/SKIPPED -- test_plus_in_path_in_create_environ in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.85868501663208s cumulative, 0.002481222152709961s individual

.
current test PASSED/SKIPPED -- test_simple_resource_body_json_xor in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.8614010810852s cumulative, 0.002716064453125s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.86708378791809s cumulative, 0.005682706832885742s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type_extra_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.8727331161499s cumulative, 0.0056493282318115234s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type_extra_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.87979936599731s cumulative, 0.007066249847412109s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.88500261306763s cumulative, 0.0052032470703125s individual

.
current test PASSED/SKIPPED -- test_path_escape_chars_in_create_environ in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.88764238357544s cumulative, 0.0026397705078125s individual

.
current test PASSED/SKIPPED -- test_simulate_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.8922507762909s cumulative, 0.0046083927154541016s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.89803695678711s cumulative, 0.00578618049621582s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.90336418151855s cumulative, 0.0053272247314453125s individual

.
current test PASSED/SKIPPED -- test_simulate_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.90794730186462s cumulative, 0.004583120346069336s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.91262698173523s cumulative, 0.004679679870605469s individual

.
current test PASSED/SKIPPED -- test_simulate_hostname in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.9172773361206s cumulative, 0.0046503543853759766s individual

.
current test PASSED/SKIPPED -- test_simulate_with_environ_extras in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.9230363368988s cumulative, 0.005759000778198242s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.92861843109131s cumulative, 0.005582094192504883s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.93403482437134s cumulative, 0.005416393280029297s individual

.
current test PASSED/SKIPPED -- test_none_header_value_in_create_environ in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.93651986122131s cumulative, 0.002485036849975586s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type_extra_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.94109678268433s cumulative, 0.004576921463012695s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.94563961029053s cumulative, 0.004542827606201172s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.95008993148804s cumulative, 0.004450321197509766s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.9550268650055s cumulative, 0.004936933517456055s individual

.
current test PASSED/SKIPPED -- test_default_headers_with_override in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.95910835266113s cumulative, 0.0040814876556396484s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.96389627456665s cumulative, 0.004787921905517578s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.96858024597168s cumulative, 0.004683971405029297s individual

.
current test PASSED/SKIPPED -- test_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.97268724441528s cumulative, 0.004106998443603516s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type_extra_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.97745180130005s cumulative, 0.004764556884765625s individual

.
current test PASSED/SKIPPED -- test_query_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.98322939872742s cumulative, 0.005777597427368164s individual

.
current test PASSED/SKIPPED -- test_httpnow_alias_for_backwards_compat in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.98618602752686s cumulative, 0.0029566287994384766s individual

.
current test PASSED/SKIPPED -- test_simulate_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.99084067344666s cumulative, 0.004654645919799805s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.99519729614258s cumulative, 0.0043566226959228516s individual

.
current test PASSED/SKIPPED -- test_something in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 122.99850845336914s cumulative, 0.0033111572265625s individual

.
current test PASSED/SKIPPED -- test_dict_interface in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.00210547447205s cumulative, 0.0035970211029052734s individual

.
current test PASSED/SKIPPED -- test_attributes in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.00482225418091s cumulative, 0.0027167797088623047s individual

.
current test PASSED/SKIPPED -- test_attributes_from_items in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.00780510902405s cumulative, 0.0029828548431396484s individual

.
current test PASSED/SKIPPED -- test_items_from_attributes in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.0104718208313s cumulative, 0.0026667118072509766s individual

.
current test PASSED/SKIPPED -- test_items_from_attributes in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.01307320594788s cumulative, 0.0026013851165771484s individual

.
current test PASSED/SKIPPED -- test_dict_interface in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.01604294776917s cumulative, 0.0029697418212890625s individual

.
current test PASSED/SKIPPED -- test_attributes in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.01863956451416s cumulative, 0.002596616744995117s individual

.
current test PASSED/SKIPPED -- test_attributes_from_items in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.02127647399902s cumulative, 0.0026369094848632812s individual

.
current test PASSED/SKIPPED -- test_keys_and_values in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.02388310432434s cumulative, 0.002606630325317383s individual

.
current test PASSED/SKIPPED -- test_keys_and_values in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.02657270431519s cumulative, 0.0026895999908447266s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.02961587905884s cumulative, 0.0030431747436523438s individual

.
current test PASSED/SKIPPED -- test_unquote_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.03224992752075s cumulative, 0.0026340484619140625s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.03516840934753s cumulative, 0.0029184818267822266s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.03809118270874s cumulative, 0.0029227733612060547s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.04128241539001s cumulative, 0.003191232681274414s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.0445785522461s cumulative, 0.0032961368560791016s individual

.
current test PASSED/SKIPPED -- test_etag_dumps_to_header_format in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.04767322540283s cumulative, 0.0030946731567382812s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.0510642528534s cumulative, 0.0033910274505615234s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.05402636528015s cumulative, 0.0029621124267578125s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.05712103843689s cumulative, 0.0030946731567382812s individual

.
current test PASSED/SKIPPED -- test_parse_query_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.059889793396s cumulative, 0.0027687549591064453s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.06272459030151s cumulative, 0.002834796905517578s individual

.
current test PASSED/SKIPPED -- test_get_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.06555223464966s cumulative, 0.0028276443481445312s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.06841993331909s cumulative, 0.0028676986694335938s individual

.
current test PASSED/SKIPPED -- test_to_query_str_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.07135009765625s cumulative, 0.002930164337158203s individual

.
current test PASSED/SKIPPED -- test_dt_to_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.07430267333984s cumulative, 0.00295257568359375s individual

.
current test PASSED/SKIPPED -- test_secure_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.0771803855896s cumulative, 0.0028777122497558594s individual

.
current test PASSED/SKIPPED -- test_secure_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.08003759384155s cumulative, 0.002857208251953125s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_unicode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.08327984809875s cumulative, 0.0032422542572021484s individual

.
current test PASSED/SKIPPED -- test_http_date_to_dt in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.09082770347595s cumulative, 0.007547855377197266s individual

.
current test PASSED/SKIPPED -- test_pack_query_params_one in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.09355425834656s cumulative, 0.0027265548706054688s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.09645771980286s cumulative, 0.002903461456298828s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.09960126876831s cumulative, 0.0031435489654541016s individual

.
current test PASSED/SKIPPED -- test_to_query_str_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.10256290435791s cumulative, 0.0029616355895996094s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.1054584980011s cumulative, 0.0028955936431884766s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.10820984840393s cumulative, 0.0027513504028320312s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.11095976829529s cumulative, 0.002749919891357422s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.11376452445984s cumulative, 0.0028047561645507812s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_coding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.11849021911621s cumulative, 0.00472569465637207s individual

.
current test PASSED/SKIPPED -- test_uri_decode_unquote_plus in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.1214611530304s cumulative, 0.0029709339141845703s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.1242425441742s cumulative, 0.002781391143798828s individual

.
current test PASSED/SKIPPED -- test_secure_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.12713813781738s cumulative, 0.0028955936431884766s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_coding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.1304759979248s cumulative, 0.003337860107421875s individual

.
current test PASSED/SKIPPED -- test_to_query_str_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.13348770141602s cumulative, 0.0030117034912109375s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.13637685775757s cumulative, 0.0028891563415527344s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_coding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.1395616531372s cumulative, 0.003184795379638672s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.14268016815186s cumulative, 0.0031185150146484375s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.14561319351196s cumulative, 0.002933025360107422s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.14849042892456s cumulative, 0.0028772354125976562s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.151376247406s cumulative, 0.0028858184814453125s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.15426468849182s cumulative, 0.0028884410858154297s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.15711998939514s cumulative, 0.0028553009033203125s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.16017293930054s cumulative, 0.003052949905395508s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.1630392074585s cumulative, 0.0028662681579589844s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.16603374481201s cumulative, 0.002994537353515625s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.16935682296753s cumulative, 0.003323078155517578s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.17302417755127s cumulative, 0.0036673545837402344s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.17658185958862s cumulative, 0.0035576820373535156s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.17978954315186s cumulative, 0.003207683563232422s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.18304944038391s cumulative, 0.003259897232055664s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.18608784675598s cumulative, 0.0030384063720703125s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.18898224830627s cumulative, 0.0028944015502929688s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.19176578521729s cumulative, 0.002783536911010742s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.19499778747559s cumulative, 0.0032320022583007812s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.1978087425232s cumulative, 0.002810955047607422s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.200918674469s cumulative, 0.0031099319458007812s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.20386600494385s cumulative, 0.0029473304748535156s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.20709872245789s cumulative, 0.003232717514038086s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_coding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.21235060691833s cumulative, 0.005251884460449219s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.21669840812683s cumulative, 0.004347801208496094s individual

.
current test PASSED/SKIPPED -- test_parse_host in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.22068214416504s cumulative, 0.003983736038208008s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.22557735443115s cumulative, 0.004895210266113281s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.22936701774597s cumulative, 0.003789663314819336s individual

.
current test PASSED/SKIPPED -- test_secure_filename_empty_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.23267197608948s cumulative, 0.0033049583435058594s individual

.
current test PASSED/SKIPPED -- test_to_query_str_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.23625111579895s cumulative, 0.0035791397094726562s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_unicode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.2399480342865s cumulative, 0.003696918487548828s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_unicode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.24345326423645s cumulative, 0.003505229949951172s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.24690198898315s cumulative, 0.0034487247467041016s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.25027656555176s cumulative, 0.0033745765686035156s individual

.
current test PASSED/SKIPPED -- test_prop_uri_encode_models_stdlib_quote in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.25717782974243s cumulative, 0.006901264190673828s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.26066184043884s cumulative, 0.003484010696411133s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_unicode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.26412534713745s cumulative, 0.0034635066986083984s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.26708436012268s cumulative, 0.002959012985229492s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_unicode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.2705090045929s cumulative, 0.0034246444702148438s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.27370023727417s cumulative, 0.003191232681274414s individual

.
current test PASSED/SKIPPED -- test_deprecated_decorator in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.27697110176086s cumulative, 0.003270864486694336s individual

.
current test PASSED/SKIPPED -- test_secure_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.27995347976685s cumulative, 0.0029823780059814453s individual

.
current test PASSED/SKIPPED -- test_uri_decode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.28294897079468s cumulative, 0.0029954910278320312s individual

.
current test PASSED/SKIPPED -- test_to_query_str_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.28590989112854s cumulative, 0.0029609203338623047s individual

.
current test PASSED/SKIPPED -- test_secure_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.28884434700012s cumulative, 0.0029344558715820312s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.29199886322021s cumulative, 0.0031545162200927734s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.29530954360962s cumulative, 0.003310680389404297s individual

.
current test PASSED/SKIPPED -- test_get_http_status_warns in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.29952359199524s cumulative, 0.004214048385620117s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.30291676521301s cumulative, 0.0033931732177734375s individual

.
current test PASSED/SKIPPED -- test_to_query_str_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.30629920959473s cumulative, 0.003382444381713867s individual

.
current test PASSED/SKIPPED -- test_to_query_str_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.30928421020508s cumulative, 0.0029850006103515625s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_unicode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.31249499320984s cumulative, 0.003210783004760742s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.31552624702454s cumulative, 0.0030312538146972656s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.31833410263062s cumulative, 0.0028078556060791016s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.32110500335693s cumulative, 0.0027709007263183594s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.32424283027649s cumulative, 0.003137826919555664s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.3272078037262s cumulative, 0.0029649734497070312s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.330251455307s cumulative, 0.003043651580810547s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_unicode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.3335371017456s cumulative, 0.003285646438598633s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.33642387390137s cumulative, 0.0028867721557617188s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.33922290802002s cumulative, 0.0027990341186523438s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_coding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.34288477897644s cumulative, 0.0036618709564208984s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.34608721733093s cumulative, 0.0032024383544921875s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.34912991523743s cumulative, 0.0030426979064941406s individual

.
current test PASSED/SKIPPED -- test_secure_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.35216403007507s cumulative, 0.0030341148376464844s individual

.
current test PASSED/SKIPPED -- test_prop_uri_decode_models_stdlib_unquote_plus in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.36177635192871s cumulative, 0.009612321853637695s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.36476182937622s cumulative, 0.0029854774475097656s individual

.
current test PASSED/SKIPPED -- test_to_query_str_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.36784720420837s cumulative, 0.0030853748321533203s individual

.
current test PASSED/SKIPPED -- test_secure_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.37081408500671s cumulative, 0.0029668807983398438s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.37387609481812s cumulative, 0.003062009811401367s individual

.
current test PASSED/SKIPPED -- test_http_now in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.37704634666443s cumulative, 0.0031702518463134766s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.38014769554138s cumulative, 0.003101348876953125s individual

.
current test PASSED/SKIPPED -- test_to_query_str_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.38331747055054s cumulative, 0.0031697750091552734s individual

.
current test PASSED/SKIPPED -- test_uri_encode_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.38609862327576s cumulative, 0.0027811527252197266s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.38915681838989s cumulative, 0.003058195114135742s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_unicode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.39262676239014s cumulative, 0.0034699440002441406s individual

.
current test PASSED/SKIPPED -- test_pack_query_params_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.39523267745972s cumulative, 0.002605915069580078s individual

.
current test PASSED/SKIPPED -- test_pack_query_params_several in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.39835619926453s cumulative, 0.0031235218048095703s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.40231442451477s cumulative, 0.003958225250244141s individual

.
current test PASSED/SKIPPED -- test_uri_decode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.4053087234497s cumulative, 0.0029942989349365234s individual

.
current test PASSED/SKIPPED -- test_etag_strong_vs_weak_comparison in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.40816473960876s cumulative, 0.002856016159057617s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.41125893592834s cumulative, 0.003094196319580078s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_coding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.41485047340393s cumulative, 0.0035915374755859375s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.41810727119446s cumulative, 0.0032567977905273438s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.42201972007751s cumulative, 0.003912448883056641s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.4256100654602s cumulative, 0.0035903453826904297s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.4286720752716s cumulative, 0.003062009811401367s individual

.
current test PASSED/SKIPPED -- test_uri_encode_double in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.43399405479431s cumulative, 0.005321979522705078s individual

.
current test PASSED/SKIPPED -- test_uri_encode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.43686127662659s cumulative, 0.0028672218322753906s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.4400691986084s cumulative, 0.0032079219818115234s individual

.
current test PASSED/SKIPPED -- test_uri_decode_unquote_plus in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.4432384967804s cumulative, 0.0031692981719970703s individual

.
current test PASSED/SKIPPED -- test_prop_uri_encode_value_models_stdlib_quote_safe_tilde in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.45088315010071s cumulative, 0.0076446533203125s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.45404601097107s cumulative, 0.003162860870361328s individual

.
current test PASSED/SKIPPED -- test_to_query_str_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.45729613304138s cumulative, 0.0032501220703125s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.46056246757507s cumulative, 0.0032663345336914062s individual

.
current test PASSED/SKIPPED -- test_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.4639573097229s cumulative, 0.0033948421478271484s individual

.
current test PASSED/SKIPPED -- test_function in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 123.46667957305908s cumulative, 0.0027222633361816406s individual


tests/test_buffered_reader.py .
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.46965312957764s cumulative, 0.0029735565185546875s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.47239518165588s cumulative, 0.0027420520782470703s individual

.
current test PASSED/SKIPPED -- test_exhaust in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.47495579719543s cumulative, 0.0025606155395507812s individual

.
current test PASSED/SKIPPED -- test_readline_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.47745609283447s cumulative, 0.002500295639038086s individual

.
current test PASSED/SKIPPED -- test_readlines_hint in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.48080682754517s cumulative, 0.0033507347106933594s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.48341488838196s cumulative, 0.002608060836791992s individual

.
current test PASSED/SKIPPED -- test_readlines_hint in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.48652172088623s cumulative, 0.003106832504272461s individual

.
current test PASSED/SKIPPED -- test_peek_eof in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.48895502090454s cumulative, 0.002433300018310547s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.49156379699707s cumulative, 0.002608776092529297s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.49434304237366s cumulative, 0.002779245376586914s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.4970543384552s cumulative, 0.0027112960815429688s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.49963021278381s cumulative, 0.0025758743286132812s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.50232458114624s cumulative, 0.002694368362426758s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.5049078464508s cumulative, 0.0025832653045654297s individual

.
current test PASSED/SKIPPED -- test_pipe in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.50761795043945s cumulative, 0.002710103988647461s individual

.
current test PASSED/SKIPPED -- test_duck_compatibility_with_io_base in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.51045560836792s cumulative, 0.002837657928466797s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.51323413848877s cumulative, 0.0027785301208496094s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.5159637928009s cumulative, 0.002729654312133789s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.51875734329224s cumulative, 0.002793550491333008s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.52149605751038s cumulative, 0.0027387142181396484s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.52418494224548s cumulative, 0.002688884735107422s individual

.
current test PASSED/SKIPPED -- test_readlines in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.5271897315979s cumulative, 0.003004789352416992s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.52997851371765s cumulative, 0.0027887821197509766s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.53504395484924s cumulative, 0.005065441131591797s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.53798151016235s cumulative, 0.0029375553131103516s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.54101729393005s cumulative, 0.0030357837677001953s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.54392290115356s cumulative, 0.002905607223510742s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.54697012901306s cumulative, 0.0030472278594970703s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.54967546463013s cumulative, 0.0027053356170654297s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.55237627029419s cumulative, 0.0027008056640625s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.55501461029053s cumulative, 0.0026383399963378906s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.5576982498169s cumulative, 0.0026836395263671875s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.5603621006012s cumulative, 0.002663850784301758s individual

.
current test PASSED/SKIPPED -- test_readlines_hint in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.56339383125305s cumulative, 0.0030317306518554688s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.56608414649963s cumulative, 0.0026903152465820312s individual

.
current test PASSED/SKIPPED -- test_read_until_delimiter_size_check in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.5706307888031s cumulative, 0.004546642303466797s individual

.
current test PASSED/SKIPPED -- test_readlines_hint in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.57431650161743s cumulative, 0.0036857128143310547s individual

.
current test PASSED/SKIPPED -- test_read_until_missing_delimiter in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.57708764076233s cumulative, 0.002771139144897461s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.57973313331604s cumulative, 0.0026454925537109375s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.58230948448181s cumulative, 0.0025763511657714844s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.58498406410217s cumulative, 0.002674579620361328s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.58755016326904s cumulative, 0.002566099166870117s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.59023714065552s cumulative, 0.0026869773864746094s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.5928270816803s cumulative, 0.0025899410247802734s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.59551858901978s cumulative, 0.002691507339477539s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.59826254844666s cumulative, 0.002743959426879883s individual

.
current test PASSED/SKIPPED -- test_peek in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.60088157653809s cumulative, 0.002619028091430664s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.60356187820435s cumulative, 0.0026803016662597656s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.60629844665527s cumulative, 0.0027365684509277344s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.60901594161987s cumulative, 0.0027174949645996094s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.61164999008179s cumulative, 0.0026340484619140625s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.6142737865448s cumulative, 0.0026237964630126953s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.61698317527771s cumulative, 0.0027093887329101562s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.6201171875s cumulative, 0.003134012222290039s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.6229293346405s cumulative, 0.0028121471405029297s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.62573385238647s cumulative, 0.0028045177459716797s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.62932968139648s cumulative, 0.0035958290100097656s individual

.
current test PASSED/SKIPPED -- test_readline in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.63196444511414s cumulative, 0.002634763717651367s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.63489747047424s cumulative, 0.002933025360107422s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.637704372406s cumulative, 0.0028069019317626953s individual

.
current test PASSED/SKIPPED -- test_consume_delimiter in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.64044642448425s cumulative, 0.0027420520782470703s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.64313864707947s cumulative, 0.0026922225952148438s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.64586782455444s cumulative, 0.002729177474975586s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.64854836463928s cumulative, 0.002680540084838867s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.65123009681702s cumulative, 0.002681732177734375s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.65379905700684s cumulative, 0.002568960189819336s individual

.
current test PASSED/SKIPPED -- test_bounded_read in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.65645790100098s cumulative, 0.002658843994140625s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.66004776954651s cumulative, 0.0035898685455322266s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.66272401809692s cumulative, 0.002676248550415039s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.66541457176208s cumulative, 0.002690553665161133s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.66797828674316s cumulative, 0.0025637149810791016s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.67067503929138s cumulative, 0.0026967525482177734s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.6733832359314s cumulative, 0.0027081966400146484s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.67607045173645s cumulative, 0.002687215805053711s individual

.
current test PASSED/SKIPPED -- test_readlines_hint in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 123.67899966239929s cumulative, 0.002929210662841797s individual


tests/test_response_context.py .
current test PASSED/SKIPPED -- test_custom_response_context in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_context.py: 123.68238639831543s cumulative, 0.0033867359161376953s individual

.
current test PASSED/SKIPPED -- test_default_response_context in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_context.py: 123.68518614768982s cumulative, 0.0027997493743896484s individual

.
current test PASSED/SKIPPED -- test_custom_response_context_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_context.py: 123.68797969818115s cumulative, 0.002793550491333008s individual

.
current test PASSED/SKIPPED -- test_custom_response_context_factory in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_context.py: 123.69073152542114s cumulative, 0.0027518272399902344s individual

.
current test PASSED/SKIPPED -- test_custom_response_context in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_context.py: 123.69353604316711s cumulative, 0.0028045177459716797s individual

.
current test PASSED/SKIPPED -- test_custom_response_context_factory in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_context.py: 123.69629454612732s cumulative, 0.002758502960205078s individual

.
current test PASSED/SKIPPED -- test_default_response_context in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_context.py: 123.69914865493774s cumulative, 0.0028541088104248047s individual

.
current test PASSED/SKIPPED -- test_custom_response_context_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_context.py: 123.7019395828247s cumulative, 0.0027909278869628906s individual


tests/test_httpstatus.py F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 123.78662109375s cumulative, 0.08468151092529297s individual

F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 123.8706169128418s cumulative, 0.08399581909179688s individual

F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 123.94342923164368s cumulative, 0.07281231880187988s individual

F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 124.02164244651794s cumulative, 0.07821321487426758s individual

F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 124.0964686870575s cumulative, 0.07482624053955078s individual

F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 124.17158484458923s cumulative, 0.07511615753173828s individual

F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 124.24915194511414s cumulative, 0.07756710052490234s individual

F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 124.32509207725525s cumulative, 0.07594013214111328s individual

F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 124.40209221839905s cumulative, 0.07700014114379883s individual

F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 126.08199858665466s cumulative, 1.6799063682556152s individual

F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 126.19447016716003s cumulative, 0.1124715805053711s individual

F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 126.27954435348511s cumulative, 0.08507418632507324s individual

F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 126.40215229988098s cumulative, 0.12260794639587402s individual

F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 126.52171802520752s cumulative, 0.11956572532653809s individual


tests/test_testing.py F
current test FAILED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 126.56867718696594s cumulative, 0.04695916175842285s individual

F
current test FAILED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 126.60655236244202s cumulative, 0.03787517547607422s individual

F
current test FAILED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 126.64582967758179s cumulative, 0.03927731513977051s individual

F
current test FAILED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 126.69004774093628s cumulative, 0.04421806335449219s individual

F
current test FAILED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 126.72494649887085s cumulative, 0.03489875793457031s individual

F
current test FAILED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 126.75827646255493s cumulative, 0.03332996368408203s individual

F
current test FAILED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 126.79810190200806s cumulative, 0.039825439453125s individual

F
current test FAILED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 126.83682036399841s cumulative, 0.038718461990356445s individual


tests/test_http_custom_method_routing.py ssssss
tests/asgi/test_asgi_servers.py INFO:     127.0.0.1:34622 - "GET / HTTP/1.1" 200 OK
INFO:     127.0.0.1:34628 - "GET /events HTTP/1.1" 200 OK

[Starting server process...]
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_sse_client_disconnects_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 129.28526282310486s cumulative, 2.4484424591064453s individual


tests/asgi/test_ws.py .
current test PASSED/SKIPPED -- test_ws_context_timeout in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 134.31226348876953s cumulative, 5.027000665664673s individual


tests/asgi/test_misc.py .
current test PASSED/SKIPPED -- test_http_error_not_impl in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_misc.py: 134.32153511047363s cumulative, 0.009271621704101562s individual

.
current test PASSED/SKIPPED -- test_python_error_not_impl in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_misc.py: 134.32573342323303s cumulative, 0.004198312759399414s individual

.
current test PASSED/SKIPPED -- test_http_status_not_impl in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_misc.py: 134.32935285568237s cumulative, 0.0036194324493408203s individual


tests/test_wsgiref_inputwrapper_with_size.py .
current test PASSED/SKIPPED -- test_resources_can_read_request_stream_during_tests in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgiref_inputwrapper_with_size.py: 134.33592796325684s cumulative, 0.006575107574462891s individual


tests/asgi/test_testing_asgi.py .
current test PASSED/SKIPPED -- test_asgi_request_event_emitter_hang in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_testing_asgi.py: 135.33950805664062s cumulative, 1.003580093383789s individual


tests/test_wsgi.py .
current test PASSED/SKIPPED -- test_post_read_bounded_stream_no_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi.py: 135.3653528690338s cumulative, 0.025844812393188477s individual

.
current test PASSED/SKIPPED -- test_post in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi.py: 135.3821370601654s cumulative, 0.016784191131591797s individual

.
current test PASSED/SKIPPED -- test_post_invalid_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi.py: 135.39976477622986s cumulative, 0.017627716064453125s individual

.
current test PASSED/SKIPPED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi.py: 135.41700339317322s cumulative, 0.017238616943359375s individual

.
current test PASSED/SKIPPED -- test_post_read_bounded_stream in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi.py: 135.42934370040894s cumulative, 0.012340307235717773s individual

.
current test PASSED/SKIPPED -- test_head_405 in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi.py: 135.43987345695496s cumulative, 0.010529756546020508s individual

.
current test PASSED/SKIPPED -- test_put in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi.py: 135.44897365570068s cumulative, 0.009100198745727539s individual


tests/test_headers.py F
current test FAILED -- test_unicode_headers_contain_only_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 135.62451839447021s cumulative, 0.17554473876953125s individual

s
current test PASSED/SKIPPED -- test_unicode_headers_contain_non_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 135.63293385505676s cumulative, 0.008415460586547852s individual

F
current test FAILED -- test_append_link_with_link_extension in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 135.77103447914124s cumulative, 0.13810062408447266s individual

F
current test FAILED -- test_content_disposition_inline_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 137.64872121810913s cumulative, 1.8776867389678955s individual

F
current test FAILED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 137.79972910881042s cumulative, 0.15100789070129395s individual

F
current test FAILED -- test_response_set_and_get_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 137.90554809570312s cumulative, 0.1058189868927002s individual

F
current test FAILED -- test_no_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 138.01234769821167s cumulative, 0.10679960250854492s individual

F
current test FAILED -- test_get_header_as_int in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 138.1184937953949s cumulative, 0.10614609718322754s individual

F
current test FAILED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 138.2193877696991s cumulative, 0.10089397430419922s individual

F
current test FAILED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 138.32078075408936s cumulative, 0.10139298439025879s individual

F
current test FAILED -- test_declared_content_length_overriden_by_data_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 138.4306423664093s cumulative, 0.10986161231994629s individual

F
current test FAILED -- test_unset_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 140.15059232711792s cumulative, 1.7199499607086182s individual

F
current test FAILED -- test_unicode_headers_contain_non_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 140.25903797149658s cumulative, 0.10844564437866211s individual

F
current test FAILED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 140.38020634651184s cumulative, 0.12116837501525879s individual

F
current test FAILED -- test_append_link_with_type_hint in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 140.50278973579407s cumulative, 0.12258338928222656s individual

F
current test FAILED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 140.6072289943695s cumulative, 0.10443925857543945s individual

F
current test FAILED -- test_unicode_headers_contain_non_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 140.73366832733154s cumulative, 0.12643933296203613s individual

F
current test FAILED -- test_headers_as_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 140.85848999023438s cumulative, 0.12482166290283203s individual

F
current test FAILED -- test_required_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 142.54289841651917s cumulative, 1.68440842628479s individual

F
current test FAILED -- test_append_link_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 142.67450714111328s cumulative, 0.1316087245941162s individual

F
current test FAILED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 142.80277943611145s cumulative, 0.12827229499816895s individual

F
current test FAILED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 142.896329164505s cumulative, 0.09354972839355469s individual

F
current test FAILED -- test_append_link_with_anchor in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 143.01746249198914s cumulative, 0.12113332748413086s individual

F
current test FAILED -- test_override_default_media_type_missing_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 143.10865354537964s cumulative, 0.09119105339050293s individual

F
current test FAILED -- test_content_type_no_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 143.20610332489014s cumulative, 0.09744977951049805s individual

F
current test FAILED -- test_headers_with_custom_class_not_callable in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 143.29873299598694s cumulative, 0.09262967109680176s individual

F
current test FAILED -- test_content_disposition_inline_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 145.2528157234192s cumulative, 1.954082727432251s individual

F
current test FAILED -- test_append_link_single in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 145.38843321800232s cumulative, 0.13561749458312988s individual

F
current test FAILED -- test_unicode_headers_contain_non_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 145.48433661460876s cumulative, 0.09590339660644531s individual

F
current test FAILED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 145.58872604370117s cumulative, 0.10438942909240723s individual

F
current test FAILED -- test_declared_content_length_overridden_by_no_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 145.70798206329346s cumulative, 0.11925601959228516s individual

F
current test FAILED -- test_vary_star in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 145.82358837127686s cumulative, 0.11560630798339844s individual

F
current test FAILED -- test_append_link_with_hreflang in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 145.95221877098083s cumulative, 0.1286303997039795s individual

F
current test FAILED -- test_unicode_location_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 146.0481641292572s cumulative, 0.09594535827636719s individual

F
current test FAILED -- test_content_disposition_inline_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 147.81264472007751s cumulative, 1.7644805908203125s individual

F
current test FAILED -- test_no_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 147.94946026802063s cumulative, 0.13681554794311523s individual

F
current test FAILED -- test_no_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 148.07124137878418s cumulative, 0.1217811107635498s individual

F
current test FAILED -- test_vary_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 148.19759440422058s cumulative, 0.12635302543640137s individual

F
current test FAILED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 148.32465291023254s cumulative, 0.1270585060119629s individual

F
current test FAILED -- test_response_append_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 148.42303562164307s cumulative, 0.09838271141052246s individual

F
current test FAILED -- test_request_latin1_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 148.52987051010132s cumulative, 0.10683488845825195s individual

F
current test FAILED -- test_response_header_helpers_on_get in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 148.64585995674133s cumulative, 0.11598944664001465s individual

F
current test FAILED -- test_request_multiple_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 150.3902599811554s cumulative, 1.7444000244140625s individual

F
current test FAILED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 150.5027208328247s cumulative, 0.11246085166931152s individual

F
current test FAILED -- test_declared_content_length_overriden_by_body_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 150.60822868347168s cumulative, 0.10550785064697266s individual

F
current test FAILED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 150.7165071964264s cumulative, 0.10827851295471191s individual

F
current test FAILED -- test_default_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 150.83492279052734s cumulative, 0.11841559410095215s individual

F
current test FAILED -- test_default_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 150.93970584869385s cumulative, 0.1047830581665039s individual

F
current test FAILED -- test_custom_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 151.05263829231262s cumulative, 0.11293244361877441s individual

F
current test FAILED -- test_set_headers_with_custom_class in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 152.77652621269226s cumulative, 1.7238879203796387s individual

F
current test FAILED -- test_no_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 152.87403082847595s cumulative, 0.0975046157836914s individual

F
current test FAILED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 152.9964120388031s cumulative, 0.12238121032714844s individual

F
current test FAILED -- test_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 153.0894331932068s cumulative, 0.09302115440368652s individual

F
current test FAILED -- test_unset_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 153.19388008117676s cumulative, 0.1044468879699707s individual

F
current test FAILED -- test_passthrough_request_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 153.32936573028564s cumulative, 0.13548564910888672s individual

F
current test FAILED -- test_unicode_headers_contain_non_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 153.42563772201538s cumulative, 0.09627199172973633s individual

F
current test FAILED -- test_append_link_with_title_star in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 153.55692648887634s cumulative, 0.13128876686096191s individual

F
current test FAILED -- test_append_link_with_title in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 155.30385828018188s cumulative, 1.746931791305542s individual

F
current test FAILED -- test_declared_content_length_on_head in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 155.39925146102905s cumulative, 0.09539318084716797s individual

F
current test FAILED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 155.50437355041504s cumulative, 0.10512208938598633s individual

F
current test FAILED -- test_override_default_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 155.6008448600769s cumulative, 0.09647130966186523s individual

F
current test FAILED -- test_override_default_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 155.6969826221466s cumulative, 0.09613776206970215s individual

F
current test FAILED -- test_vary_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 155.8151149749756s cumulative, 0.11813235282897949s individual

F
current test FAILED -- test_expires_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 155.95419430732727s cumulative, 0.13907933235168457s individual

F
current test FAILED -- test_append_link_multiple in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 156.09064650535583s cumulative, 0.13645219802856445s individual

F
current test FAILED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 158.086501121521s cumulative, 1.9958546161651611s individual

F
current test FAILED -- test_append_link_with_hreflang_multi in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 158.2269458770752s cumulative, 0.14044475555419922s individual


tests/test_buffered_reader.py .
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 160.17748856544495s cumulative, 1.950542688369751s individual


tests/asgi/test_hello_asgi.py .
current test PASSED/SKIPPED -- test_stream_known_len in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 160.1926612854004s cumulative, 0.015172719955444336s individual

.
current test PASSED/SKIPPED -- test_closing_stream in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 160.19858813285828s cumulative, 0.005926847457885742s individual

.
current test PASSED/SKIPPED -- test_status_not_set in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 160.20332503318787s cumulative, 0.004736900329589844s individual

.
current test PASSED/SKIPPED -- test_stream_chunked in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 160.20873880386353s cumulative, 0.00541377067565918s individual

.
current test PASSED/SKIPPED -- test_no_body_on_head in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 160.21272683143616s cumulative, 0.003988027572631836s individual

.
current test PASSED/SKIPPED -- test_filelike_using_helper in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 160.2169623374939s cumulative, 0.004235506057739258s individual

.
current test PASSED/SKIPPED -- test_env_headers_list_of_tuples in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 160.21951627731323s cumulative, 0.0025539398193359375s individual

.
current test PASSED/SKIPPED -- test_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 160.22420120239258s cumulative, 0.004684925079345703s individual

.
current test PASSED/SKIPPED -- test_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 160.22958540916443s cumulative, 0.005384206771850586s individual

.
current test PASSED/SKIPPED -- test_closing_stream in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 160.23460006713867s cumulative, 0.005014657974243164s individual

.
current test PASSED/SKIPPED -- test_filelike in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 160.2392852306366s cumulative, 0.004685163497924805s individual

.
current test PASSED/SKIPPED -- test_filelike_closing in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 160.24386382102966s cumulative, 0.004578590393066406s individual

.
current test PASSED/SKIPPED -- test_closing_stream in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 160.24968433380127s cumulative, 0.005820512771606445s individual

.
current test PASSED/SKIPPED -- test_genfunc_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 160.25406050682068s cumulative, 0.00437617301940918s individual

.
current test PASSED/SKIPPED -- test_closing_stream in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 160.25869703292847s cumulative, 0.004636526107788086s individual

.
current test PASSED/SKIPPED -- test_nongenfunc_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 160.26427578926086s cumulative, 0.005578756332397461s individual

.
current test PASSED/SKIPPED -- test_noncoroutine_required in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 160.26756048202515s cumulative, 0.0032846927642822266s individual

.
current test PASSED/SKIPPED -- test_root_route in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 160.27195763587952s cumulative, 0.004397153854370117s individual

.
current test PASSED/SKIPPED -- test_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 160.27677750587463s cumulative, 0.0048198699951171875s individual

.
current test PASSED/SKIPPED -- test_filelike_closing in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 160.28198218345642s cumulative, 0.005204677581787109s individual

.
current test PASSED/SKIPPED -- test_coroutine_required in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 160.28514742851257s cumulative, 0.0031652450561523438s individual

.
current test PASSED/SKIPPED -- test_no_route in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 160.28911542892456s cumulative, 0.003968000411987305s individual

.
current test PASSED/SKIPPED -- test_filelike_closing_aiofiles in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 160.32112765312195s cumulative, 0.032012224197387695s individual


tests/test_cmd_inspect_app.py F
current test FAILED -- test_load_app_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 160.42590427398682s cumulative, 0.10477662086486816s individual

F
current test FAILED -- test_load_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 160.49105048179626s cumulative, 0.06514620780944824s individual

F
current test FAILED -- test_load_app_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 160.56109404563904s cumulative, 0.07004356384277344s individual

F
current test FAILED -- test_load_app_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 160.6171214580536s cumulative, 0.05602741241455078s individual

F
current test FAILED -- test_load_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 160.6785590648651s cumulative, 0.06143760681152344s individual

F
current test FAILED -- test_inspect in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 160.75661492347717s cumulative, 0.07805585861206055s individual

F
current test FAILED -- test_inspect in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 160.83220052719116s cumulative, 0.07558560371398926s individual

F
current test FAILED -- test_routes_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 160.90377736091614s cumulative, 0.07157683372497559s individual

F
current test FAILED -- test_inspect in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 160.99062824249268s cumulative, 0.08685088157653809s individual

F
current test FAILED -- test_inspect in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 161.05838680267334s cumulative, 0.06775856018066406s individual

F
current test FAILED -- test_routes_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 161.1361002922058s cumulative, 0.0777134895324707s individual

F
current test FAILED -- test_routes_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 161.2132909297943s cumulative, 0.07719063758850098s individual

F
current test FAILED -- test_routes_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 161.2785041332245s cumulative, 0.06521320343017578s individual


tests/asgi/test_sync.py .
current test PASSED/SKIPPED -- test_sync_helpers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_sync.py: 165.06964898109436s cumulative, 3.791144847869873s individual


tests/test_cmd_inspect_app.py .
current test PASSED/SKIPPED -- test_load_app_module_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 165.07464861869812s cumulative, 0.004999637603759766s individual

.
current test PASSED/SKIPPED -- test_make_parser in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 165.08046627044678s cumulative, 0.0058176517486572266s individual

.
current test PASSED/SKIPPED -- test_make_parser in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 165.08635878562927s cumulative, 0.005892515182495117s individual

.
current test PASSED/SKIPPED -- test_make_parser in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 165.0900604724884s cumulative, 0.0037016868591308594s individual

.
current test PASSED/SKIPPED -- test_make_parser_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 165.09406638145447s cumulative, 0.004005908966064453s individual

.
current test PASSED/SKIPPED -- test_make_parser in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 165.097758769989s cumulative, 0.0036923885345458984s individual

.
current test PASSED/SKIPPED -- test_make_parser in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 165.10144543647766s cumulative, 0.003686666488647461s individual

.
current test PASSED/SKIPPED -- test_route_main in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 165.10422444343567s cumulative, 0.0027790069580078125s individual

.
current test PASSED/SKIPPED -- test_make_parser in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 165.10804224014282s cumulative, 0.0038177967071533203s individual

.
current test PASSED/SKIPPED -- test_make_parser in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 165.11380910873413s cumulative, 0.005766868591308594s individual

.
current test PASSED/SKIPPED -- test_make_parser in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 165.1175365447998s cumulative, 0.003727436065673828s individual


tests/test_middleware.py .
current test PASSED/SKIPPED -- test_api_initialization_with_cors_enabled_and_middleware_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 165.12481260299683s cumulative, 0.007276058197021484s individual

.
current test PASSED/SKIPPED -- test_api_initialization_with_cors_enabled_and_middleware_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 165.13066005706787s cumulative, 0.005847454071044922s individual

.
current test PASSED/SKIPPED -- test_api_initialization_with_cors_enabled_and_middleware_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 165.1349515914917s cumulative, 0.004291534423828125s individual

.
current test PASSED/SKIPPED -- test_api_initialization_with_cors_enabled_and_middleware_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 165.1393337249756s cumulative, 0.004382133483886719s individual

.
current test PASSED/SKIPPED -- test_process_resource_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 165.14497113227844s cumulative, 0.005637407302856445s individual

.
current test PASSED/SKIPPED -- test_process_request_not_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 165.1497859954834s cumulative, 0.004814863204956055s individual

.
current test PASSED/SKIPPED -- test_process_resource_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 165.15472412109375s cumulative, 0.0049381256103515625s individual

.
current test PASSED/SKIPPED -- test_process_request_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 165.15909576416016s cumulative, 0.00437164306640625s individual

.
current test PASSED/SKIPPED -- test_process_request_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 165.1637065410614s cumulative, 0.004610776901245117s individual

.
current test PASSED/SKIPPED -- test_http_status_raised_from_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 165.16805362701416s cumulative, 0.004347085952758789s individual

.
current test PASSED/SKIPPED -- test_error_composed_before_resp_middleware_called in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 165.17235016822815s cumulative, 0.004296541213989258s individual

.
current test PASSED/SKIPPED -- test_middleware_execution_order in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 165.17669081687927s cumulative, 0.004340648651123047s individual

.
current test PASSED/SKIPPED -- test_generate_trans_id_and_time_with_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 165.18108439445496s cumulative, 0.004393577575683594s individual

.
current test PASSED/SKIPPED -- test_independent_middleware_execution_order in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 165.18578600883484s cumulative, 0.0047016143798828125s individual

.
current test PASSED/SKIPPED -- test_order_mw_executed_when_exception_in_req in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 165.18975615501404s cumulative, 0.003970146179199219s individual

.
current test PASSED/SKIPPED -- test_inner_mw_throw_exception in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 165.19357800483704s cumulative, 0.003821849822998047s individual

.
current test PASSED/SKIPPED -- test_inner_mw_with_ex_handler_throw_exception in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 165.19761538505554s cumulative, 0.004037380218505859s individual

.
current test PASSED/SKIPPED -- test_order_mw_executed_when_exception_in_rsrc in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 165.20176362991333s cumulative, 0.004148244857788086s individual

.
current test PASSED/SKIPPED -- test_generate_trans_id_and_time_with_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 165.2066719532013s cumulative, 0.004908323287963867s individual

.
current test PASSED/SKIPPED -- test_order_independent_mw_executed_when_exception_in_req in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 165.21062636375427s cumulative, 0.003954410552978516s individual

.
current test PASSED/SKIPPED -- test_order_mw_executed_when_exception_in_resp in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 165.21710729599s cumulative, 0.0064809322357177734s individual

.
current test PASSED/SKIPPED -- test_multiple_response_mw_throw_exception in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 165.2246379852295s cumulative, 0.007530689239501953s individual

.
current test PASSED/SKIPPED -- test_order_independent_mw_executed_when_exception_in_rsrc in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 165.2301642894745s cumulative, 0.005526304244995117s individual

.
current test PASSED/SKIPPED -- test_outer_mw_with_ex_handler_throw_exception in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 165.23456048965454s cumulative, 0.004396200180053711s individual

.
current test PASSED/SKIPPED -- test_legacy_middleware_called_with_correct_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 165.2387204170227s cumulative, 0.0041599273681640625s individual

.
current test PASSED/SKIPPED -- test_inner_mw_throw_exception_while_processing_resp in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 165.2428376674652s cumulative, 0.004117250442504883s individual

.
current test PASSED/SKIPPED -- test_order_independent_mw_executed_when_exception_in_resp in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 165.24712085723877s cumulative, 0.00428318977355957s individual

.
current test PASSED/SKIPPED -- test_base_path_is_removed_before_routing in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 165.25173258781433s cumulative, 0.0046117305755615234s individual

.
current test PASSED/SKIPPED -- test_generate_trans_id_with_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 165.2564399242401s cumulative, 0.00470733642578125s individual

.
current test PASSED/SKIPPED -- test_skip_process_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 165.26074886322021s cumulative, 0.004308938980102539s individual

.
current test PASSED/SKIPPED -- test_log_get_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 165.26510620117188s cumulative, 0.004357337951660156s individual

.
current test PASSED/SKIPPED -- test_log_get_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 165.26939296722412s cumulative, 0.004286766052246094s individual

.
current test PASSED/SKIPPED -- test_add_invalid_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 165.2723731994629s cumulative, 0.0029802322387695312s individual

.
current test PASSED/SKIPPED -- test_add_invalid_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 165.27540183067322s cumulative, 0.0030286312103271484s individual

.
current test PASSED/SKIPPED -- test_response_middleware_raises_exception in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 165.28048753738403s cumulative, 0.00508570671081543s individual

.
current test PASSED/SKIPPED -- test_can_access_resource_params in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 165.28542804718018s cumulative, 0.004940509796142578s individual

.
current test PASSED/SKIPPED -- test_can_access_resource_params in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 165.2898304462433s cumulative, 0.0044023990631103516s individual

.
current test PASSED/SKIPPED -- test_dont_need_params_in_signature in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 165.293301820755s cumulative, 0.00347137451171875s individual


tests/test_inspect.py .
current test PASSED/SKIPPED -- test_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.31621479988098s cumulative, 0.022912979125976562s individual

.
current test PASSED/SKIPPED -- test_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.32111501693726s cumulative, 0.004900217056274414s individual

.
current test PASSED/SKIPPED -- test_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.32667541503906s cumulative, 0.005560398101806641s individual

.
current test PASSED/SKIPPED -- test_dependent_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.33017230033875s cumulative, 0.003496885299682617s individual

.
current test PASSED/SKIPPED -- test_empty_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.33339381217957s cumulative, 0.0032215118408203125s individual

.
current test PASSED/SKIPPED -- test_routes_empty_paths in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.33959412574768s cumulative, 0.006200313568115234s individual

.
current test PASSED/SKIPPED -- test_empty_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.3430881500244s cumulative, 0.0034940242767333984s individual

.
current test PASSED/SKIPPED -- test_dependent_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.34648966789246s cumulative, 0.003401517868041992s individual

.
current test PASSED/SKIPPED -- test_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.3581371307373s cumulative, 0.011647462844848633s individual

.
current test PASSED/SKIPPED -- test_routes_empty_paths in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.36688542366028s cumulative, 0.008748292922973633s individual

.
current test PASSED/SKIPPED -- test_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.390154838562s cumulative, 0.0232694149017334s individual

.
current test PASSED/SKIPPED -- test_static_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.3940179347992s cumulative, 0.003863096237182617s individual

.
current test PASSED/SKIPPED -- test_middleware_tree in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.4086573123932s cumulative, 0.01463937759399414s individual

.
current test PASSED/SKIPPED -- test_inspect_visitor in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.41168546676636s cumulative, 0.0030281543731689453s individual

.
current test PASSED/SKIPPED -- test_process in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.41428685188293s cumulative, 0.0026013851165771484s individual

.
current test PASSED/SKIPPED -- test_compiled_no_method_map in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.41771745681763s cumulative, 0.003430604934692383s individual

.
current test PASSED/SKIPPED -- test_register_router_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.42115879058838s cumulative, 0.003441333770751953s individual

.
current test PASSED/SKIPPED -- test_compiled_partial in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.42649054527283s cumulative, 0.005331754684448242s individual

.
current test PASSED/SKIPPED -- test_register_other_router in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.42963910102844s cumulative, 0.0031485557556152344s individual

.
current test PASSED/SKIPPED -- test_register_router_multiple_time in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.43254351615906s cumulative, 0.0029044151306152344s individual

.
current test PASSED/SKIPPED -- test_info_class_repr_to_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.45597195625305s cumulative, 0.02342844009399414s individual

.
current test PASSED/SKIPPED -- test_middleware_class in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.4705526828766s cumulative, 0.014580726623535156s individual

.
current test PASSED/SKIPPED -- test_app_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.49654698371887s cumulative, 0.025994300842285156s individual

.
current test PASSED/SKIPPED -- test_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.51147556304932s cumulative, 0.014928579330444336s individual

.
current test PASSED/SKIPPED -- test_route_no_methods in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.52270889282227s cumulative, 0.011233329772949219s individual

.
current test PASSED/SKIPPED -- test_middleware_method_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.53913927078247s cumulative, 0.016430377960205078s individual

.
current test PASSED/SKIPPED -- test_middleware_tree_item in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.5538468360901s cumulative, 0.014707565307617188s individual

.
current test PASSED/SKIPPED -- test_route_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.56458616256714s cumulative, 0.010739326477050781s individual

.
current test PASSED/SKIPPED -- test_static_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.56852793693542s cumulative, 0.003941774368286133s individual

.
current test PASSED/SKIPPED -- test_app_no_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.59150671958923s cumulative, 0.022978782653808594s individual

.
current test PASSED/SKIPPED -- test_app_static_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.61501026153564s cumulative, 0.023503541946411133s individual

.
current test PASSED/SKIPPED -- test_app_no_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.63956093788147s cumulative, 0.024550676345825195s individual

.
current test PASSED/SKIPPED -- test_middleware_tree_no_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.6543207168579s cumulative, 0.01475977897644043s individual

.
current test PASSED/SKIPPED -- test_middleware_tree in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.66907477378845s cumulative, 0.014754056930541992s individual

.
current test PASSED/SKIPPED -- test_app_no_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.6925220489502s cumulative, 0.023447275161743164s individual

.
current test PASSED/SKIPPED -- test_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.70654106140137s cumulative, 0.014019012451171875s individual

.
current test PASSED/SKIPPED -- test_middleware_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.72283959388733s cumulative, 0.016298532485961914s individual

.
current test PASSED/SKIPPED -- test_middleware_tree_no_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.7372395992279s cumulative, 0.014400005340576172s individual

.
current test PASSED/SKIPPED -- test_middleware_class_no_methods in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.75167655944824s cumulative, 0.014436960220336914s individual

.
current test PASSED/SKIPPED -- test_middleware_tree_item in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.76682305335999s cumulative, 0.015146493911743164s individual

.
current test PASSED/SKIPPED -- test_route_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.7777020931244s cumulative, 0.010879039764404297s individual

.
current test PASSED/SKIPPED -- test_sink_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.7831199169159s cumulative, 0.005417823791503906s individual

.
current test PASSED/SKIPPED -- test_middleware_tree_no_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.79852509498596s cumulative, 0.01540517807006836s individual

.
current test PASSED/SKIPPED -- test_middleware_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.81338024139404s cumulative, 0.014855146408081055s individual

.
current test PASSED/SKIPPED -- test_static_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.81772136688232s cumulative, 0.00434112548828125s individual

.
current test PASSED/SKIPPED -- test_app_no_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.84186959266663s cumulative, 0.024148225784301758s individual

.
current test PASSED/SKIPPED -- test_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.84620094299316s cumulative, 0.004331350326538086s individual

.
current test PASSED/SKIPPED -- test_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.85804772377014s cumulative, 0.011846780776977539s individual

.
current test PASSED/SKIPPED -- test_route_method_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.87105202674866s cumulative, 0.013004302978515625s individual

.
current test PASSED/SKIPPED -- test_app_static_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.89895677566528s cumulative, 0.027904748916625977s individual

.
current test PASSED/SKIPPED -- test_route_no_methods in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.91017055511475s cumulative, 0.01121377944946289s individual

.
current test PASSED/SKIPPED -- test_middleware_method_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.92517948150635s cumulative, 0.015008926391601562s individual

.
current test PASSED/SKIPPED -- test_app_static_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.94875574111938s cumulative, 0.02357625961303711s individual

.
current test PASSED/SKIPPED -- test_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.97322392463684s cumulative, 0.024468183517456055s individual

.
current test PASSED/SKIPPED -- test_middleware_class_no_methods in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 165.9888379573822s cumulative, 0.015614032745361328s individual

.
current test PASSED/SKIPPED -- test_middleware_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 166.00459814071655s cumulative, 0.015760183334350586s individual

.
current test PASSED/SKIPPED -- test_string_visitor_class in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 166.00705432891846s cumulative, 0.002456188201904297s individual

.
current test PASSED/SKIPPED -- test_middleware_tree in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 166.02184557914734s cumulative, 0.014791250228881836s individual

.
current test PASSED/SKIPPED -- test_app_no_errors in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 166.04543733596802s cumulative, 0.02359175682067871s individual

.
current test PASSED/SKIPPED -- test_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 166.0506854057312s cumulative, 0.005248069763183594s individual

.
current test PASSED/SKIPPED -- test_middleware_class in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 166.0684781074524s cumulative, 0.017792701721191406s individual

.
current test PASSED/SKIPPED -- test_error_handler_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 166.07360935211182s cumulative, 0.005131244659423828s individual

.
current test PASSED/SKIPPED -- test_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 166.09742379188538s cumulative, 0.02381443977355957s individual

.
current test PASSED/SKIPPED -- test_static_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 166.10155057907104s cumulative, 0.004126787185668945s individual

.
current test PASSED/SKIPPED -- test_middleware_class_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 166.11605548858643s cumulative, 0.01450490951538086s individual

.
current test PASSED/SKIPPED -- test_middleware_tree_item in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 166.1306130886078s cumulative, 0.014557600021362305s individual

.
current test PASSED/SKIPPED -- test_app_no_errors in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 166.15491318702698s cumulative, 0.024300098419189453s individual

.
current test PASSED/SKIPPED -- test_app_no_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 166.17792177200317s cumulative, 0.02300858497619629s individual

.
current test PASSED/SKIPPED -- test_app_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 166.20063185691833s cumulative, 0.022710084915161133s individual

.
current test PASSED/SKIPPED -- test_app_no_errors in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 166.2263011932373s cumulative, 0.025669336318969727s individual

.
current test PASSED/SKIPPED -- test_route_method_info_suffix in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 166.2291774749756s cumulative, 0.00287628173828125s individual

.
current test PASSED/SKIPPED -- test_app_no_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 166.2532353401184s cumulative, 0.024057865142822266s individual

.
current test PASSED/SKIPPED -- test_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 166.25861430168152s cumulative, 0.0053789615631103516s individual

.
current test PASSED/SKIPPED -- test_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 166.28257060050964s cumulative, 0.023956298828125s individual

.
current test PASSED/SKIPPED -- test_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 166.30645394325256s cumulative, 0.023883342742919922s individual

.
current test PASSED/SKIPPED -- test_middleware_tree_item in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 166.32110905647278s cumulative, 0.014655113220214844s individual

.
current test PASSED/SKIPPED -- test_middleware_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 166.33636379241943s cumulative, 0.015254735946655273s individual

.
current test PASSED/SKIPPED -- test_route_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 166.3512773513794s cumulative, 0.014913558959960938s individual

.
current test PASSED/SKIPPED -- test_app_no_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 166.38787460327148s cumulative, 0.036597251892089844s individual

.
current test PASSED/SKIPPED -- test_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 166.4073486328125s cumulative, 0.019474029541015625s individual

.
current test PASSED/SKIPPED -- test_middleware_tree_no_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 166.4275324344635s cumulative, 0.020183801651000977s individual

.
current test PASSED/SKIPPED -- test_middleware_class_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 166.4462878704071s cumulative, 0.018755435943603516s individual

.
current test PASSED/SKIPPED -- test_static_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 166.45198583602905s cumulative, 0.005697965621948242s individual

.
current test PASSED/SKIPPED -- test_app_no_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 166.4817271232605s cumulative, 0.029741287231445312s individual

.
current test PASSED/SKIPPED -- test_route_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 166.4957947731018s cumulative, 0.014067649841308594s individual

.
current test PASSED/SKIPPED -- test_app_no_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 166.525404214859s cumulative, 0.02960944175720215s individual

.
current test PASSED/SKIPPED -- test_app_no_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 166.55307173728943s cumulative, 0.027667522430419922s individual

.
current test PASSED/SKIPPED -- test_app_static_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 166.58159184455872s cumulative, 0.02852010726928711s individual

.
current test PASSED/SKIPPED -- test_middleware_tree in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 166.60107684135437s cumulative, 0.019484996795654297s individual

.
current test PASSED/SKIPPED -- test_middleware_tree_response_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 166.6176552772522s cumulative, 0.01657843589782715s individual

.
current test PASSED/SKIPPED -- test_app_no_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 166.64607334136963s cumulative, 0.02841806411743164s individual

.
current test PASSED/SKIPPED -- test_middleware_tree_response_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 166.66675186157227s cumulative, 0.02067852020263672s individual

.
current test PASSED/SKIPPED -- test_app_no_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 166.69513368606567s cumulative, 0.028381824493408203s individual

.
current test PASSED/SKIPPED -- test_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 166.70162272453308s cumulative, 0.0064890384674072266s individual

.
current test PASSED/SKIPPED -- test_is_internal in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 166.70417428016663s cumulative, 0.002551555633544922s individual

.
current test PASSED/SKIPPED -- test_middleware_tree in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 166.7204134464264s cumulative, 0.016239166259765625s individual

.
current test PASSED/SKIPPED -- test_error_handler_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 166.7256498336792s cumulative, 0.005236387252807617s individual

.
current test PASSED/SKIPPED -- test_route_method_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 166.73861932754517s cumulative, 0.012969493865966797s individual

.
current test PASSED/SKIPPED -- test_app_no_errors in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 166.7657971382141s cumulative, 0.027177810668945312s individual

.
current test PASSED/SKIPPED -- test_sink_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 166.7754728794098s cumulative, 0.009675741195678711s individual


tests/test_media_multipart.py .
current test PASSED/SKIPPED -- test_random_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 167.1109902858734s cumulative, 0.33551740646362305s individual


tests/test_things_example.py .
current test PASSED/SKIPPED -- test_things_resource_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_things_example.py: 167.11627888679504s cumulative, 0.005288600921630859s individual


tests/asgi/test_asgi_servers.py s
current test PASSED/SKIPPED -- test_post_multiple in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.1224069595337s cumulative, 0.006128072738647461s individual

s
current test PASSED/SKIPPED -- test_post_read_bounded_stream_large in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.12604403495789s cumulative, 0.003637075424194336s individual

s
current test PASSED/SKIPPED -- test_sse_client_disconnects_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.13074207305908s cumulative, 0.004698038101196289s individual

s
current test PASSED/SKIPPED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.13397693634033s cumulative, 0.00323486328125s individual

s
current test PASSED/SKIPPED -- test_head_405 in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.1374340057373s cumulative, 0.0034570693969726562s individual

s
current test PASSED/SKIPPED -- test_stream_chunked_request in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.1448895931244s cumulative, 0.007455587387084961s individual

s
current test PASSED/SKIPPED -- test_post_invalid_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.15036129951477s cumulative, 0.005471706390380859s individual

s
current test PASSED/SKIPPED -- test_stream_chunked_request in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.1536090373993s cumulative, 0.0032477378845214844s individual

s
current test PASSED/SKIPPED -- test_head_405 in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.15699553489685s cumulative, 0.0033864974975585938s individual

s
current test PASSED/SKIPPED -- test_post_read_bounded_stream in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.16176223754883s cumulative, 0.004766702651977539s individual

s
current test PASSED/SKIPPED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.1661696434021s cumulative, 0.004407405853271484s individual

s
current test PASSED/SKIPPED -- test_post_read_bounded_stream_no_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.17086839675903s cumulative, 0.004698753356933594s individual

s
current test PASSED/SKIPPED -- test_post_multipart_form in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.17409300804138s cumulative, 0.003224611282348633s individual

s
current test PASSED/SKIPPED -- test_post_read_bounded_stream in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.17723965644836s cumulative, 0.003146648406982422s individual

s
current test PASSED/SKIPPED -- test_sse in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.18032574653625s cumulative, 0.003086090087890625s individual

s
current test PASSED/SKIPPED -- test_sse_client_disconnects_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.18337297439575s cumulative, 0.0030472278594970703s individual

s
current test PASSED/SKIPPED -- test_post_multiple in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.18641471862793s cumulative, 0.0030417442321777344s individual

s
current test PASSED/SKIPPED -- test_post_read_bounded_stream_no_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.19011759757996s cumulative, 0.003702878952026367s individual

s
current test PASSED/SKIPPED -- test_put in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.19338130950928s cumulative, 0.003263711929321289s individual

s
current test PASSED/SKIPPED -- test_sse in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.1965835094452s cumulative, 0.003202199935913086s individual

s
current test PASSED/SKIPPED -- test_post_read_bounded_stream_large in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.19995832443237s cumulative, 0.003374814987182617s individual

s
current test PASSED/SKIPPED -- test_post_invalid_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.20301914215088s cumulative, 0.0030608177185058594s individual

s
current test PASSED/SKIPPED -- test_post_multipart_form in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.20602178573608s cumulative, 0.003002643585205078s individual

s
current test PASSED/SKIPPED -- test_put in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.21221137046814s cumulative, 0.006189584732055664s individual

s
current test PASSED/SKIPPED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.21610045433044s cumulative, 0.0038890838623046875s individual

s
current test PASSED/SKIPPED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.21997928619385s cumulative, 0.0038788318634033203s individual

s
current test PASSED/SKIPPED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.22409534454346s cumulative, 0.004116058349609375s individual

s
current test PASSED/SKIPPED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.22760462760925s cumulative, 0.0035092830657958984s individual

s
current test PASSED/SKIPPED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.23175573349s cumulative, 0.004151105880737305s individual

s
current test PASSED/SKIPPED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.2353060245514s cumulative, 0.003550291061401367s individual

s
current test PASSED/SKIPPED -- test_send_before_accept in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.23865604400635s cumulative, 0.0033500194549560547s individual

s
current test PASSED/SKIPPED -- test_disconnecting_client_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.24206113815308s cumulative, 0.0034050941467285156s individual

s
current test PASSED/SKIPPED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.2471137046814s cumulative, 0.0050525665283203125s individual

s
current test PASSED/SKIPPED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.25158715248108s cumulative, 0.004473447799682617s individual

s
current test PASSED/SKIPPED -- test_close_code_on_unhandled_http_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.2549979686737s cumulative, 0.003410816192626953s individual

s
current test PASSED/SKIPPED -- test_passing_path_params in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.25833797454834s cumulative, 0.003340005874633789s individual

s
current test PASSED/SKIPPED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.26210141181946s cumulative, 0.003763437271118164s individual

s
current test PASSED/SKIPPED -- test_close_code_on_unhandled_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.26550316810608s cumulative, 0.0034017562866210938s individual

s
current test PASSED/SKIPPED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.26947379112244s cumulative, 0.003970623016357422s individual

s
current test PASSED/SKIPPED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.27302956581116s cumulative, 0.003555774688720703s individual

s
current test PASSED/SKIPPED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.2769899368286s cumulative, 0.003960371017456055s individual

s
current test PASSED/SKIPPED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.28116416931152s cumulative, 0.004174232482910156s individual

s
current test PASSED/SKIPPED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.2853717803955s cumulative, 0.004207611083984375s individual

s
current test PASSED/SKIPPED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.29097604751587s cumulative, 0.005604267120361328s individual

s
current test PASSED/SKIPPED -- test_missing_responder in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.29416489601135s cumulative, 0.0031888484954833984s individual

s
current test PASSED/SKIPPED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.29886627197266s cumulative, 0.004701375961303711s individual

s
current test PASSED/SKIPPED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.30417442321777s cumulative, 0.0053081512451171875s individual

s
current test PASSED/SKIPPED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.30952191352844s cumulative, 0.005347490310668945s individual

s
current test PASSED/SKIPPED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.31415820121765s cumulative, 0.004636287689208984s individual

s
current test PASSED/SKIPPED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.3178005218506s cumulative, 0.0036423206329345703s individual

s
current test PASSED/SKIPPED -- test_recv_before_accept in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.32156252861023s cumulative, 0.0037620067596435547s individual

s
current test PASSED/SKIPPED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.32525730133057s cumulative, 0.003694772720336914s individual

s
current test PASSED/SKIPPED -- test_select_subprotocol_known in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.3289225101471s cumulative, 0.0036652088165283203s individual

s
current test PASSED/SKIPPED -- test_missing_responder in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.3333191871643s cumulative, 0.004396677017211914s individual

s
current test PASSED/SKIPPED -- test_select_subprotocol_unknown in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.33706068992615s cumulative, 0.0037415027618408203s individual

s
current test PASSED/SKIPPED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.34062886238098s cumulative, 0.0035681724548339844s individual

s
current test PASSED/SKIPPED -- test_invalid_close_code in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.34462881088257s cumulative, 0.003999948501586914s individual

s
current test PASSED/SKIPPED -- test_select_subprotocol_known in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.3487730026245s cumulative, 0.004144191741943359s individual

s
current test PASSED/SKIPPED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.35665726661682s cumulative, 0.00788426399230957s individual

s
current test PASSED/SKIPPED -- test_select_subprotocol_unknown in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.3609745502472s cumulative, 0.004317283630371094s individual

s
current test PASSED/SKIPPED -- test_send_before_accept in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.36446070671082s cumulative, 0.003486156463623047s individual

s
current test PASSED/SKIPPED -- test_select_subprotocol_known in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.36864614486694s cumulative, 0.00418543815612793s individual

s
current test PASSED/SKIPPED -- test_disconnecting_client_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.37263083457947s cumulative, 0.003984689712524414s individual

s
current test PASSED/SKIPPED -- test_close_code_on_unhandled_http_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.37698411941528s cumulative, 0.00435328483581543s individual

s
current test PASSED/SKIPPED -- test_invalid_close_code in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.38027143478394s cumulative, 0.0032873153686523438s individual

s
current test PASSED/SKIPPED -- test_recv_before_accept in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.38356637954712s cumulative, 0.0032949447631835938s individual

s
current test PASSED/SKIPPED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.38726043701172s cumulative, 0.0036940574645996094s individual

s
current test PASSED/SKIPPED -- test_passing_path_params in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.39039397239685s cumulative, 0.003133535385131836s individual

s
current test PASSED/SKIPPED -- test_select_subprotocol_known in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.39447736740112s cumulative, 0.004083395004272461s individual

s
current test PASSED/SKIPPED -- test_close_code_on_unhandled_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 167.39842891693115s cumulative, 0.003951549530029297s individual


tests/test_wsgi_interface.py .
current test PASSED/SKIPPED -- test_srmock in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_interface.py: 167.40274357795715s cumulative, 0.0043146610260009766s individual

.
current test PASSED/SKIPPED -- test_pep3333 in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_interface.py: 167.4085841178894s cumulative, 0.0058405399322509766s individual


tests/asgi/test_asgi_servers.py INFO:     127.0.0.1:35204 - "GET / HTTP/1.1" 200 OK
INFO:     127.0.0.1:35218 - "GET /events HTTP/1.1" 200 OK

[Starting server process...]
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_sse in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 170.83117055892944s cumulative, 3.422586441040039s individual


tests/test_response_media.py .
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 170.83959531784058s cumulative, 0.008424758911132812s individual

.
current test PASSED/SKIPPED -- test_mimeparse_edgecases in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 170.84479689598083s cumulative, 0.005201578140258789s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 170.8494691848755s cumulative, 0.00467228889465332s individual

.
current test PASSED/SKIPPED -- test_unknown_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 170.8592483997345s cumulative, 0.009779214859008789s individual

.
current test PASSED/SKIPPED -- test_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 170.86623811721802s cumulative, 0.006989717483520508s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 170.87055039405823s cumulative, 0.004312276840209961s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 170.87474370002747s cumulative, 0.004193305969238281s individual

.
current test PASSED/SKIPPED -- test_use_cached_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 170.87870287895203s cumulative, 0.003959178924560547s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 170.88295364379883s cumulative, 0.004250764846801758s individual

.
current test PASSED/SKIPPED -- test_non_ascii_json_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 170.89075422286987s cumulative, 0.007800579071044922s individual

.
current test PASSED/SKIPPED -- test_default_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 170.89479899406433s cumulative, 0.004044771194458008s individual

.
current test PASSED/SKIPPED -- test_non_ascii_json_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 170.89869666099548s cumulative, 0.0038976669311523438s individual

.
current test PASSED/SKIPPED -- test_non_ascii_json_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 170.90260195732117s cumulative, 0.0039052963256835938s individual

.
current test PASSED/SKIPPED -- test_non_ascii_json_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 170.90689063072205s cumulative, 0.004288673400878906s individual

.
current test PASSED/SKIPPED -- test_non_ascii_json_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 170.91121292114258s cumulative, 0.0043222904205322266s individual

.
current test PASSED/SKIPPED -- test_media_rendered_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 170.91527557373047s cumulative, 0.004062652587890625s individual

.
current test PASSED/SKIPPED -- test_text in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 170.9191653728485s cumulative, 0.003889799118041992s individual

.
current test PASSED/SKIPPED -- test_data in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 170.92494773864746s cumulative, 0.005782365798950195s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 170.92981386184692s cumulative, 0.004866123199462891s individual


tests/test_media_handlers.py F
current test FAILED -- test_json_err_no_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 171.02277374267578s cumulative, 0.09295988082885742s individual

F
current test FAILED -- test_json_err_no_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 171.09533786773682s cumulative, 0.07256412506103516s individual


tests/test_uri_templates.py .
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.1012670993805s cumulative, 0.005929231643676758s individual

.
current test PASSED/SKIPPED -- test_root_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.10554122924805s cumulative, 0.004274129867553711s individual

.
current test PASSED/SKIPPED -- test_converter_custom in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.11084532737732s cumulative, 0.005304098129272461s individual

.
current test PASSED/SKIPPED -- test_with_and_without_trailing_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.1180431842804s cumulative, 0.007197856903076172s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.12236857414246s cumulative, 0.004325389862060547s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.1269600391388s cumulative, 0.004591464996337891s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.13190698623657s cumulative, 0.00494694709777832s individual

.
current test PASSED/SKIPPED -- test_same_level_complex_var in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.1375710964203s cumulative, 0.00566411018371582s individual

.
current test PASSED/SKIPPED -- test_relative_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.14100861549377s cumulative, 0.003437519073486328s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.14658379554749s cumulative, 0.0055751800537109375s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.15264916419983s cumulative, 0.00606536865234375s individual

.
current test PASSED/SKIPPED -- test_custom_error_on_suffix_route_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.156569480896s cumulative, 0.003920316696166992s individual

.
current test PASSED/SKIPPED -- test_adding_suffix_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.16305112838745s cumulative, 0.006481647491455078s individual

.
current test PASSED/SKIPPED -- test_relative_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.16658854484558s cumulative, 0.003537416458129883s individual

.
current test PASSED/SKIPPED -- test_single in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.17102646827698s cumulative, 0.004437923431396484s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.17544889450073s cumulative, 0.004422426223754883s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.1807599067688s cumulative, 0.005311012268066406s individual

.
current test PASSED/SKIPPED -- test_custom_error_on_suffix_route_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.18436574935913s cumulative, 0.0036058425903320312s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.18868708610535s cumulative, 0.00432133674621582s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.19342756271362s cumulative, 0.004740476608276367s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.19858503341675s cumulative, 0.005157470703125s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.2052345275879s cumulative, 0.006649494171142578s individual

.
current test PASSED/SKIPPED -- test_converter_custom in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.21233129501343s cumulative, 0.007096767425537109s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.2168686389923s cumulative, 0.004537343978881836s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.22130918502808s cumulative, 0.0044405460357666016s individual

.
current test PASSED/SKIPPED -- test_no_vars in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.2257058620453s cumulative, 0.004396677017211914s individual

.
current test PASSED/SKIPPED -- test_single in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.2306365966797s cumulative, 0.004930734634399414s individual

.
current test PASSED/SKIPPED -- test_empty_path_component in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.23401498794556s cumulative, 0.0033783912658691406s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.23895072937012s cumulative, 0.004935741424560547s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.24330806732178s cumulative, 0.004357337951660156s individual

.
current test PASSED/SKIPPED -- test_empty_path_component in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.24678897857666s cumulative, 0.0034809112548828125s individual

.
current test PASSED/SKIPPED -- test_single in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.2517213821411s cumulative, 0.004932403564453125s individual

.
current test PASSED/SKIPPED -- test_multiple in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.2560043334961s cumulative, 0.004282951354980469s individual

.
current test PASSED/SKIPPED -- test_converter_custom in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.2610309123993s cumulative, 0.005026578903198242s individual

.
current test PASSED/SKIPPED -- test_uuid_converter_complex_segment in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.26567006111145s cumulative, 0.004639148712158203s individual

.
current test PASSED/SKIPPED -- test_relative_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.2690510749817s cumulative, 0.003381013870239258s individual

.
current test PASSED/SKIPPED -- test_relative_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.27302765846252s cumulative, 0.003976583480834961s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.27751755714417s cumulative, 0.004489898681640625s individual

.
current test PASSED/SKIPPED -- test_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.28348231315613s cumulative, 0.005964756011962891s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.28907752037048s cumulative, 0.005595207214355469s individual

.
current test PASSED/SKIPPED -- test_empty_path_component in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.29363012313843s cumulative, 0.004552602767944336s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.3002815246582s cumulative, 0.006651401519775391s individual

.
current test PASSED/SKIPPED -- test_single_trailing_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.30832743644714s cumulative, 0.00804591178894043s individual

.
current test PASSED/SKIPPED -- test_empty_path_component in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.3118486404419s cumulative, 0.0035212039947509766s individual

.
current test PASSED/SKIPPED -- test_int_converter_rejections in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.3162932395935s cumulative, 0.004444599151611328s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.32388019561768s cumulative, 0.007586956024169922s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.32838797569275s cumulative, 0.004507780075073242s individual

.
current test PASSED/SKIPPED -- test_same_level_complex_var in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.3333659172058s cumulative, 0.0049779415130615234s individual

.
current test PASSED/SKIPPED -- test_empty_path_component in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.33703017234802s cumulative, 0.003664255142211914s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.34199142456055s cumulative, 0.004961252212524414s individual

.
current test PASSED/SKIPPED -- test_int_converter_rejections in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.34793710708618s cumulative, 0.005945682525634766s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.3530809879303s cumulative, 0.005143880844116211s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.3574571609497s cumulative, 0.00437617301940918s individual

.
current test PASSED/SKIPPED -- test_relative_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.36103987693787s cumulative, 0.0035827159881591797s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.36609196662903s cumulative, 0.005052089691162109s individual

.
current test PASSED/SKIPPED -- test_empty_path_component in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.3698525428772s cumulative, 0.0037605762481689453s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.37514925003052s cumulative, 0.0052967071533203125s individual

.
current test PASSED/SKIPPED -- test_with_and_without_trailing_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.38178515434265s cumulative, 0.006635904312133789s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.38607668876648s cumulative, 0.004291534423828125s individual

.
current test PASSED/SKIPPED -- test_relative_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.38979935646057s cumulative, 0.003722667694091797s individual

.
current test PASSED/SKIPPED -- test_empty_path_component in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.39310312271118s cumulative, 0.0033037662506103516s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.39804792404175s cumulative, 0.004944801330566406s individual

.
current test PASSED/SKIPPED -- test_single_path_segment in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.40226650238037s cumulative, 0.004218578338623047s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.40691924095154s cumulative, 0.004652738571166992s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.41314935684204s cumulative, 0.00623011589050293s individual

.
current test PASSED/SKIPPED -- test_int_converter_rejections in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.4176630973816s cumulative, 0.004513740539550781s individual

.
current test PASSED/SKIPPED -- test_empty_path_component in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 171.42121767997742s cumulative, 0.0035545825958251953s individual


tests/test_media_multipart.py .
current test PASSED/SKIPPED -- test_random_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 171.71124649047852s cumulative, 0.29002881050109863s individual


tests/test_hello.py .
current test PASSED/SKIPPED -- test_status_not_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 171.7188811302185s cumulative, 0.007634639739990234s individual

.
current test PASSED/SKIPPED -- test_filelike_using_helper in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 171.72412371635437s cumulative, 0.005242586135864258s individual

.
current test PASSED/SKIPPED -- test_env_headers_list_of_tuples in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 171.72699856758118s cumulative, 0.0028748512268066406s individual

.
current test PASSED/SKIPPED -- test_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 171.73502612113953s cumulative, 0.00802755355834961s individual

.
current test PASSED/SKIPPED -- test_stream_known_len in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 171.7394576072693s cumulative, 0.004431486129760742s individual

.
current test PASSED/SKIPPED -- test_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 171.74428844451904s cumulative, 0.004830837249755859s individual

.
current test PASSED/SKIPPED -- test_no_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 171.7485110759735s cumulative, 0.0042226314544677734s individual

.
current test PASSED/SKIPPED -- test_filelike_closing in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 171.7532057762146s cumulative, 0.004694700241088867s individual

.
current test PASSED/SKIPPED -- test_root_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 171.75775861740112s cumulative, 0.0045528411865234375s individual

.
current test PASSED/SKIPPED -- test_stream_chunked in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 171.76163125038147s cumulative, 0.0038726329803466797s individual

.
current test PASSED/SKIPPED -- test_filelike_closing in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 171.76579332351685s cumulative, 0.0041620731353759766s individual

.
current test PASSED/SKIPPED -- test_no_body_on_head in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 171.76976132392883s cumulative, 0.003968000411987305s individual

.
current test PASSED/SKIPPED -- test_filelike in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 171.77487540245056s cumulative, 0.005114078521728516s individual

.
current test PASSED/SKIPPED -- test_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 171.77978825569153s cumulative, 0.004912853240966797s individual


tests/test_static.py .
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 171.78442192077637s cumulative, 0.004633665084838867s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 171.7906312942505s cumulative, 0.006209373474121094s individual

.
current test PASSED/SKIPPED -- test_invalid_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 171.794282913208s cumulative, 0.0036516189575195312s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 171.79761576652527s cumulative, 0.003332853317260742s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 171.8021683692932s cumulative, 0.004552602767944336s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 171.8053982257843s cumulative, 0.003229856491088867s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 171.81749272346497s cumulative, 0.012094497680664062s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 171.82380032539368s cumulative, 0.0063076019287109375s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 171.8273389339447s cumulative, 0.0035386085510253906s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 171.83421754837036s cumulative, 0.00687861442565918s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 171.83772778511047s cumulative, 0.0035102367401123047s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 171.8410358428955s cumulative, 0.0033080577850341797s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 171.8443784713745s cumulative, 0.0033426284790039062s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 171.8478102684021s cumulative, 0.0034317970275878906s individual

.
current test PASSED/SKIPPED -- test_file_closed in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 171.85241174697876s cumulative, 0.004601478576660156s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 171.85639882087708s cumulative, 0.00398707389831543s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 171.860933303833s cumulative, 0.004534482955932617s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 171.86429929733276s cumulative, 0.0033659934997558594s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 171.87002730369568s cumulative, 0.005728006362915039s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 171.87619996070862s cumulative, 0.006172657012939453s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 171.87937688827515s cumulative, 0.0031769275665283203s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 171.88487219810486s cumulative, 0.005495309829711914s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 171.88818764686584s cumulative, 0.003315448760986328s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 171.89285826683044s cumulative, 0.004670619964599609s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 171.89617896080017s cumulative, 0.0033206939697265625s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 171.89938807487488s cumulative, 0.0032091140747070312s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 171.9038851261139s cumulative, 0.004497051239013672s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 171.91397786140442s cumulative, 0.010092735290527344s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 171.91747403144836s cumulative, 0.0034961700439453125s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 171.92061614990234s cumulative, 0.003142118453979492s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 171.92424178123474s cumulative, 0.003625631332397461s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 171.92756390571594s cumulative, 0.003322124481201172s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 171.9309380054474s cumulative, 0.0033740997314453125s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 171.9364001750946s cumulative, 0.005462169647216797s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 171.94110822677612s cumulative, 0.004708051681518555s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 171.9465675354004s cumulative, 0.005459308624267578s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 171.95334887504578s cumulative, 0.006781339645385742s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 171.95713090896606s cumulative, 0.003782033920288086s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 171.96051573753357s cumulative, 0.003384828567504883s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 171.96770572662354s cumulative, 0.00718998908996582s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 171.97175860404968s cumulative, 0.004052877426147461s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 171.97669124603271s cumulative, 0.0049326419830322266s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 171.98301029205322s cumulative, 0.0063190460205078125s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 171.98711943626404s cumulative, 0.00410914421081543s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 171.9911105632782s cumulative, 0.003991127014160156s individual

.
current test PASSED/SKIPPED -- test_filesystem_traversal_fuse in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 171.9957892894745s cumulative, 0.0046787261962890625s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 171.9993302822113s cumulative, 0.0035409927368164062s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.00396943092346s cumulative, 0.004639148712158203s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.0071964263916s cumulative, 0.0032269954681396484s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.01053595542908s cumulative, 0.003339529037475586s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.01409530639648s cumulative, 0.0035593509674072266s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.01857924461365s cumulative, 0.004483938217163086s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.02229237556458s cumulative, 0.0037131309509277344s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.02628540992737s cumulative, 0.003993034362792969s individual

.
current test PASSED/SKIPPED -- test_filesystem_traversal_fuse in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.03069138526917s cumulative, 0.004405975341796875s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.03563976287842s cumulative, 0.00494837760925293s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.040536403656s cumulative, 0.004896640777587891s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.04695343971252s cumulative, 0.006417036056518555s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.05011200904846s cumulative, 0.0031585693359375s individual

.
current test PASSED/SKIPPED -- test_invalid_args_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.05398440361023s cumulative, 0.003872394561767578s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.05730080604553s cumulative, 0.0033164024353027344s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.063982963562s cumulative, 0.006682157516479492s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.06846833229065s cumulative, 0.004485368728637695s individual

.
current test PASSED/SKIPPED -- test_invalid_args_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.07206439971924s cumulative, 0.003596067428588867s individual

.
current test PASSED/SKIPPED -- test_downloadable in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.0813455581665s cumulative, 0.009281158447265625s individual

.
current test PASSED/SKIPPED -- test_file_closed in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.08902716636658s cumulative, 0.007681608200073242s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.09286212921143s cumulative, 0.003834962844848633s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.09721660614014s cumulative, 0.0043544769287109375s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.10172724723816s cumulative, 0.004510641098022461s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.1067669391632s cumulative, 0.005039691925048828s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.11131262779236s cumulative, 0.004545688629150391s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.11480712890625s cumulative, 0.0034945011138916016s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.1197624206543s cumulative, 0.004955291748046875s individual

.
current test PASSED/SKIPPED -- test_invalid_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.12338280677795s cumulative, 0.0036203861236572266s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.1268241405487s cumulative, 0.003441333770751953s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.13115096092224s cumulative, 0.004326820373535156s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.13448286056519s cumulative, 0.003331899642944336s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.13971042633057s cumulative, 0.005227565765380859s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.14511466026306s cumulative, 0.005404233932495117s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.15006804466248s cumulative, 0.0049533843994140625s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.15420031547546s cumulative, 0.004132270812988281s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.16077518463135s cumulative, 0.006574869155883789s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.16609692573547s cumulative, 0.0053217411041259766s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.17085886001587s cumulative, 0.004761934280395508s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.17622208595276s cumulative, 0.0053632259368896484s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.18249440193176s cumulative, 0.006272315979003906s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.1874978542328s cumulative, 0.005003452301025391s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.1920130252838s cumulative, 0.004515171051025391s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.19601249694824s cumulative, 0.003999471664428711s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.1999170780182s cumulative, 0.003904581069946289s individual

.
current test PASSED/SKIPPED -- test_downloadable in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.20557832717896s cumulative, 0.0056612491607666016s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.21551847457886s cumulative, 0.009940147399902344s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.21939659118652s cumulative, 0.0038781166076660156s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.22494339942932s cumulative, 0.0055468082427978516s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.23029804229736s cumulative, 0.005354642868041992s individual

.
current test PASSED/SKIPPED -- test_invalid_args_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.23473286628723s cumulative, 0.004434823989868164s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.24604964256287s cumulative, 0.011316776275634766s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.2510633468628s cumulative, 0.005013704299926758s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.25830125808716s cumulative, 0.007237911224365234s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.26165795326233s cumulative, 0.0033566951751708984s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.26518774032593s cumulative, 0.003529787063598633s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.26867699623108s cumulative, 0.003489255905151367s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.27464771270752s cumulative, 0.00597071647644043s individual

.
current test PASSED/SKIPPED -- test_invalid_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.27818536758423s cumulative, 0.0035376548767089844s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.28441333770752s cumulative, 0.006227970123291016s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.28786301612854s cumulative, 0.003449678421020508s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.29188990592957s cumulative, 0.004026889801025391s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.29893016815186s cumulative, 0.007040262222290039s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.30740666389465s cumulative, 0.008476495742797852s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.3105719089508s cumulative, 0.0031652450561523438s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.3162817955017s cumulative, 0.00570988655090332s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.31964635849s cumulative, 0.00336456298828125s individual

.
current test PASSED/SKIPPED -- test_invalid_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.3230893611908s cumulative, 0.003443002700805664s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.32652068138123s cumulative, 0.0034313201904296875s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.32982635498047s cumulative, 0.003305673599243164s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.3335473537445s cumulative, 0.003720998764038086s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.33847308158875s cumulative, 0.004925727844238281s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.3430826663971s cumulative, 0.004609584808349609s individual

.
current test PASSED/SKIPPED -- test_pathlib_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.34637570381165s cumulative, 0.0032930374145507812s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.3497874736786s cumulative, 0.0034117698669433594s individual

.
current test PASSED/SKIPPED -- test_invalid_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.35328602790833s cumulative, 0.003498554229736328s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.35882759094238s cumulative, 0.005541563034057617s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.362154006958s cumulative, 0.003326416015625s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.36936616897583s cumulative, 0.007212162017822266s individual

.
current test PASSED/SKIPPED -- test_invalid_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.37370681762695s cumulative, 0.004340648651123047s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.3813033103943s cumulative, 0.007596492767333984s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.38589596748352s cumulative, 0.0045926570892333984s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.38958048820496s cumulative, 0.003684520721435547s individual

.
current test PASSED/SKIPPED -- test_lifo_negative in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.3942551612854s cumulative, 0.004674673080444336s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.3987648487091s cumulative, 0.004509687423706055s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.40358543395996s cumulative, 0.004820585250854492s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.40690279006958s cumulative, 0.0033173561096191406s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.41028785705566s cumulative, 0.0033850669860839844s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.41410541534424s cumulative, 0.0038175582885742188s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.4175124168396s cumulative, 0.003407001495361328s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.42080998420715s cumulative, 0.003297567367553711s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.42419457435608s cumulative, 0.0033845901489257812s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.43113899230957s cumulative, 0.006944417953491211s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.4379334449768s cumulative, 0.006794452667236328s individual

.
current test PASSED/SKIPPED -- test_invalid_args_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.4412956237793s cumulative, 0.0033621788024902344s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.44585871696472s cumulative, 0.004563093185424805s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.44917011260986s cumulative, 0.0033113956451416016s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.45309495925903s cumulative, 0.003924846649169922s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.45829272270203s cumulative, 0.005197763442993164s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.4630172252655s cumulative, 0.0047245025634765625s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.46871089935303s cumulative, 0.005693674087524414s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.47333312034607s cumulative, 0.004622220993041992s individual

.
current test PASSED/SKIPPED -- test_downloadable_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.47766852378845s cumulative, 0.0043354034423828125s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.48459649085999s cumulative, 0.006927967071533203s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.4893810749054s cumulative, 0.004784584045410156s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.49279117584229s cumulative, 0.0034101009368896484s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.4974467754364s cumulative, 0.004655599594116211s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.5006012916565s cumulative, 0.0031545162200927734s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.50556802749634s cumulative, 0.00496673583984375s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.5169243812561s cumulative, 0.011356353759765625s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.52109241485596s cumulative, 0.004168033599853516s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.52450561523438s cumulative, 0.0034132003784179688s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.52902007102966s cumulative, 0.004514455795288086s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.53310561180115s cumulative, 0.004085540771484375s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.53648114204407s cumulative, 0.003375530242919922s individual

.
current test PASSED/SKIPPED -- test_invalid_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.54042053222656s cumulative, 0.003939390182495117s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.54379272460938s cumulative, 0.0033721923828125s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.5469491481781s cumulative, 0.003156423568725586s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.5531017780304s cumulative, 0.006152629852294922s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.55647253990173s cumulative, 0.0033707618713378906s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.5605344772339s cumulative, 0.00406193733215332s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.56433486938477s cumulative, 0.0038003921508789062s individual

.
current test PASSED/SKIPPED -- test_invalid_args_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.5691318511963s cumulative, 0.0047969818115234375s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.57924723625183s cumulative, 0.010115385055541992s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.58351016044617s cumulative, 0.0042629241943359375s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.59083914756775s cumulative, 0.007328987121582031s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.5960087776184s cumulative, 0.00516963005065918s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.59998321533203s cumulative, 0.003974437713623047s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.6055202484131s cumulative, 0.0055370330810546875s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.61072945594788s cumulative, 0.005209207534790039s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.61555290222168s cumulative, 0.004823446273803711s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.62563467025757s cumulative, 0.010081768035888672s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.62966322898865s cumulative, 0.0040285587310791016s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.63339400291443s cumulative, 0.00373077392578125s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.63927364349365s cumulative, 0.005879640579223633s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.6471245288849s cumulative, 0.007850885391235352s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.65391898155212s cumulative, 0.006794452667236328s individual

.
current test PASSED/SKIPPED -- test_lifo_negative in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.669207572937s cumulative, 0.015288591384887695s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.6745150089264s cumulative, 0.005307435989379883s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.67848134040833s cumulative, 0.003966331481933594s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.68573379516602s cumulative, 0.00725245475769043s individual

.
current test PASSED/SKIPPED -- test_bounded_file_wrapper in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.68840146064758s cumulative, 0.002667665481567383s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.69232869148254s cumulative, 0.0039272308349609375s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.69907689094543s cumulative, 0.006748199462890625s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.70282793045044s cumulative, 0.003751039505004883s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.70717787742615s cumulative, 0.004349946975708008s individual

.
current test PASSED/SKIPPED -- test_pathlib_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.71201610565186s cumulative, 0.004838228225708008s individual

.
current test PASSED/SKIPPED -- test_lifo in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.71853256225586s cumulative, 0.006516456604003906s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.7241678237915s cumulative, 0.005635261535644531s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.72832655906677s cumulative, 0.004158735275268555s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.73498487472534s cumulative, 0.006658315658569336s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.73951053619385s cumulative, 0.004525661468505859s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.74468398094177s cumulative, 0.005173444747924805s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.74872636795044s cumulative, 0.004042387008666992s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.7562894821167s cumulative, 0.007563114166259766s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.75994229316711s cumulative, 0.003652811050415039s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.76465225219727s cumulative, 0.004709959030151367s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.76883554458618s cumulative, 0.004183292388916016s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.7752616405487s cumulative, 0.006426095962524414s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.77861261367798s cumulative, 0.003350973129272461s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.7835991382599s cumulative, 0.00498652458190918s individual

.
current test PASSED/SKIPPED -- test_invalid_args_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.78713011741638s cumulative, 0.0035309791564941406s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.7911651134491s cumulative, 0.004034996032714844s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.7992136478424s cumulative, 0.008048534393310547s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.80367612838745s cumulative, 0.004462480545043945s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.81001806259155s cumulative, 0.0063419342041015625s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.81727600097656s cumulative, 0.007257938385009766s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.8231189250946s cumulative, 0.005842924118041992s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.83354663848877s cumulative, 0.010427713394165039s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.837322473526s cumulative, 0.0037758350372314453s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.84222221374512s cumulative, 0.004899740219116211s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.8468987941742s cumulative, 0.0046765804290771484s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.8526692390442s cumulative, 0.005770444869995117s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.8586826324463s cumulative, 0.006013393402099609s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.86532330513s cumulative, 0.00664067268371582s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.869708776474s cumulative, 0.004385471343994141s individual

.
current test PASSED/SKIPPED -- test_downloadable_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.87587022781372s cumulative, 0.00616145133972168s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.88112044334412s cumulative, 0.005250215530395508s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.88561272621155s cumulative, 0.004492282867431641s individual

.
current test PASSED/SKIPPED -- test_lifo in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.8991675376892s cumulative, 0.013554811477661133s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.90539455413818s cumulative, 0.006227016448974609s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.90903282165527s cumulative, 0.0036382675170898438s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.91319394111633s cumulative, 0.00416111946105957s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.91893339157104s cumulative, 0.005739450454711914s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.923024892807s cumulative, 0.004091501235961914s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.92638778686523s cumulative, 0.003362894058227539s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.9313576221466s cumulative, 0.00496983528137207s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.93753266334534s cumulative, 0.006175041198730469s individual

.
current test PASSED/SKIPPED -- test_invalid_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.94118452072144s cumulative, 0.003651857376098633s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.94615960121155s cumulative, 0.004975080490112305s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.95744967460632s cumulative, 0.01129007339477539s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.96399903297424s cumulative, 0.006549358367919922s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.96812319755554s cumulative, 0.004124164581298828s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.97545719146729s cumulative, 0.007333993911743164s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.9800901412964s cumulative, 0.0046329498291015625s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.98407316207886s cumulative, 0.003983020782470703s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.98849868774414s cumulative, 0.004425525665283203s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.99369287490845s cumulative, 0.005194187164306641s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 172.9977490901947s cumulative, 0.004056215286254883s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 173.00147461891174s cumulative, 0.0037255287170410156s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 173.00715970993042s cumulative, 0.005685091018676758s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 173.01092648506165s cumulative, 0.003766775131225586s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 173.01423954963684s cumulative, 0.0033130645751953125s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 173.0199384689331s cumulative, 0.0056989192962646484s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 173.0240273475647s cumulative, 0.004088878631591797s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 173.0279185771942s cumulative, 0.0038912296295166016s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 173.0316481590271s cumulative, 0.003729581832885742s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 173.03761434555054s cumulative, 0.0059661865234375s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 173.0441689491272s cumulative, 0.006554603576660156s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 173.04990458488464s cumulative, 0.005735635757446289s individual


tests/test_request_body.py .
current test PASSED/SKIPPED -- test_bounded_stream_property_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_body.py: 173.05254578590393s cumulative, 0.0026412010192871094s individual

.
current test PASSED/SKIPPED -- test_tiny_body_overflow in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_body.py: 173.05721068382263s cumulative, 0.004664897918701172s individual

.
current test PASSED/SKIPPED -- test_body_stream_wrapper in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_body.py: 173.0625820159912s cumulative, 0.0053713321685791016s individual

.
current test PASSED/SKIPPED -- test_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_body.py: 173.06719160079956s cumulative, 0.004609584808349609s individual

.
current test PASSED/SKIPPED -- test_tiny_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_body.py: 173.07134294509888s cumulative, 0.004151344299316406s individual

.
current test PASSED/SKIPPED -- test_request_repr in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_body.py: 173.0739233493805s cumulative, 0.002580404281616211s individual

.
current test PASSED/SKIPPED -- test_read_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_body.py: 173.08064246177673s cumulative, 0.006719112396240234s individual


tests/test_options.py .
current test PASSED/SKIPPED -- test_options_toggle in /home/kaiyaok2/PythonProjects/falcon/tests/test_options.py: 173.08423519134521s cumulative, 0.0035927295684814453s individual

.
current test PASSED/SKIPPED -- test_options_toggle in /home/kaiyaok2/PythonProjects/falcon/tests/test_options.py: 173.08734726905823s cumulative, 0.0031120777130126953s individual

.
current test PASSED/SKIPPED -- test_incorrect_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_options.py: 173.09062790870667s cumulative, 0.0032806396484375s individual

.
current test PASSED/SKIPPED -- test_options_toggle in /home/kaiyaok2/PythonProjects/falcon/tests/test_options.py: 173.0935037136078s cumulative, 0.002875804901123047s individual

.
current test PASSED/SKIPPED -- test_options_toggle in /home/kaiyaok2/PythonProjects/falcon/tests/test_options.py: 173.09632062911987s cumulative, 0.002816915512084961s individual

.
current test PASSED/SKIPPED -- test_option_defaults in /home/kaiyaok2/PythonProjects/falcon/tests/test_options.py: 173.09913444519043s cumulative, 0.0028138160705566406s individual


tests/asgi/test_boundedstream_asgi.py .
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 182.79818725585938s cumulative, 9.699052810668945s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 192.47383785247803s cumulative, 9.675650596618652s individual


tests/test_query_params.py .
current test PASSED/SKIPPED -- test_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 192.48146152496338s cumulative, 0.0076236724853515625s individual

.
current test PASSED/SKIPPED -- test_get_datetime_valid_with_format in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 192.48797416687012s cumulative, 0.006512641906738281s individual

.
current test PASSED/SKIPPED -- test_uuid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 192.49425077438354s cumulative, 0.006276607513427734s individual

F
current test FAILED -- test_get_date_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 192.61006355285645s cumulative, 0.11581277847290039s individual

.
current test PASSED/SKIPPED -- test_multiple_keys_as_int in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 192.61668276786804s cumulative, 0.00661921501159668s individual

.
current test PASSED/SKIPPED -- test_get_dict_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 192.62106037139893s cumulative, 0.004377603530883789s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_simple_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 192.62536239624023s cumulative, 0.004302024841308594s individual

.
current test PASSED/SKIPPED -- test_get_datetime_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 192.63042569160461s cumulative, 0.005063295364379883s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 192.7461919784546s cumulative, 0.11576628684997559s individual

F
current test FAILED -- test_default_auto_parse_csv_behaviour in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 192.85852313041687s cumulative, 0.11233115196228027s individual

.
current test PASSED/SKIPPED -- test_has_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 192.86684036254883s cumulative, 0.008317232131958008s individual

.
current test PASSED/SKIPPED -- test_get_datetime_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 192.87560510635376s cumulative, 0.00876474380493164s individual

F
current test FAILED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 194.69705748558044s cumulative, 1.8214523792266846s individual

.
current test PASSED/SKIPPED -- test_bad_percentage in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 194.70471143722534s cumulative, 0.007653951644897461s individual

.
current test PASSED/SKIPPED -- test_get_dict_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 194.71053457260132s cumulative, 0.0058231353759765625s individual

.
current test PASSED/SKIPPED -- test_get_datetime_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 194.71709752082825s cumulative, 0.006562948226928711s individual

.
current test PASSED/SKIPPED -- test_get_dict_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 194.72185039520264s cumulative, 0.0047528743743896484s individual

.
current test PASSED/SKIPPED -- test_get_date_valid_with_format in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 194.72683930397034s cumulative, 0.004988908767700195s individual

.
current test PASSED/SKIPPED -- test_param_property in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 194.7311201095581s cumulative, 0.004280805587768555s individual

.
current test PASSED/SKIPPED -- test_simple in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 194.7357268333435s cumulative, 0.004606723785400391s individual

.
current test PASSED/SKIPPED -- test_uuid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 194.74012303352356s cumulative, 0.004396200180053711s individual

F
current test FAILED -- test_get_date_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 194.8637683391571s cumulative, 0.12364530563354492s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 194.97779631614685s cumulative, 0.1140279769897461s individual

F
current test FAILED -- test_get_date_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 195.0808801651001s cumulative, 0.10308384895324707s individual

F
current test FAILED -- test_get_date_valid_with_format in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 195.18753600120544s cumulative, 0.10665583610534668s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 195.19351816177368s cumulative, 0.005982160568237305s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 195.2950894832611s cumulative, 0.10157132148742676s individual

.
current test PASSED/SKIPPED -- test_get_datetime_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 195.30115747451782s cumulative, 0.006067991256713867s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 195.3061065673828s cumulative, 0.004949092864990234s individual

F
current test FAILED -- test_get_date_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 195.43366765975952s cumulative, 0.12756109237670898s individual

F
current test FAILED -- test_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 195.54516291618347s cumulative, 0.1114952564239502s individual

F
current test FAILED -- test_bad_percentage in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 197.57747387886047s cumulative, 2.032310962677002s individual

F
current test FAILED -- test_float_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 197.6894702911377s cumulative, 0.11199641227722168s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 197.80530881881714s cumulative, 0.11583852767944336s individual

F
current test FAILED -- test_has_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 197.93903374671936s cumulative, 0.13372492790222168s individual

.
current test PASSED/SKIPPED -- test_get_date_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 197.94810843467712s cumulative, 0.009074687957763672s individual

F
current test FAILED -- test_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 198.09001207351685s cumulative, 0.14190363883972168s individual

F
current test FAILED -- test_multiple_keys_as_float in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 198.20687222480774s cumulative, 0.11686015129089355s individual

F
current test FAILED -- test_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 198.31978178024292s cumulative, 0.11290955543518066s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 198.32741022109985s cumulative, 0.007628440856933594s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 198.33321452140808s cumulative, 0.005804300308227539s individual

F
current test FAILED -- test_list_type_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 200.25206470489502s cumulative, 1.9188501834869385s individual

.
current test PASSED/SKIPPED -- test_bad_percentage in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 200.26278948783875s cumulative, 0.010724782943725586s individual

F
current test FAILED -- test_get_date_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 200.36981105804443s cumulative, 0.10702157020568848s individual

.
current test PASSED/SKIPPED -- test_multiple_keys_as_int in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 200.37645602226257s cumulative, 0.0066449642181396484s individual

F
current test FAILED -- test_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 200.50210690498352s cumulative, 0.12565088272094727s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 200.51127219200134s cumulative, 0.009165287017822266s individual

F
current test FAILED -- test_percent_encoded in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 200.61963605880737s cumulative, 0.10836386680603027s individual

.
current test PASSED/SKIPPED -- test_simple in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 200.62606692314148s cumulative, 0.006430864334106445s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 200.74409413337708s cumulative, 0.1180272102355957s individual

F
current test FAILED -- test_default_auto_parse_csv_behaviour in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 200.89116764068604s cumulative, 0.14707350730895996s individual

F
current test FAILED -- test_multiple_form_keys_as_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 202.7293508052826s cumulative, 1.8381831645965576s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 202.73703932762146s cumulative, 0.0076885223388671875s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 202.74212789535522s cumulative, 0.0050885677337646484s individual

.
current test PASSED/SKIPPED -- test_get_dict_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 202.7469437122345s cumulative, 0.004815816879272461s individual

.
current test PASSED/SKIPPED -- test_get_date_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 202.75466561317444s cumulative, 0.007721900939941406s individual

.
current test PASSED/SKIPPED -- test_float in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 202.76018023490906s cumulative, 0.005514621734619141s individual

.
current test PASSED/SKIPPED -- test_float_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 202.7647988796234s cumulative, 0.004618644714355469s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 202.89280033111572s cumulative, 0.12800145149230957s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 202.8992052078247s cumulative, 0.006404876708984375s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 202.90414333343506s cumulative, 0.0049381256103515625s individual

F
current test FAILED -- test_int in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 203.03807640075684s cumulative, 0.13393306732177734s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 203.04590725898743s cumulative, 0.00783085823059082s individual

F
current test FAILED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 203.1579349040985s cumulative, 0.11202764511108398s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 203.2727131843567s cumulative, 0.11477828025817871s individual

.
current test PASSED/SKIPPED -- test_list_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 203.27935004234314s cumulative, 0.006636857986450195s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 203.28414154052734s cumulative, 0.0047914981842041016s individual

.
current test PASSED/SKIPPED -- test_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 203.28942894935608s cumulative, 0.0052874088287353516s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 203.2958643436432s cumulative, 0.006435394287109375s individual

.
current test PASSED/SKIPPED -- test_get_date_valid_with_format in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 203.30176305770874s cumulative, 0.005898714065551758s individual

F
current test FAILED -- test_get_datetime_valid_with_format in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 203.4147069454193s cumulative, 0.11294388771057129s individual

F
current test FAILED -- test_boolean in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 203.51546955108643s cumulative, 0.10076260566711426s individual

.
current test PASSED/SKIPPED -- test_percent_encoded in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 203.5216097831726s cumulative, 0.006140232086181641s individual

.
current test PASSED/SKIPPED -- test_get_datetime_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 203.52597379684448s cumulative, 0.004364013671875s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 205.28692817687988s cumulative, 1.7609543800354004s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 205.41530871391296s cumulative, 0.12838053703308105s individual

.
current test PASSED/SKIPPED -- test_get_date_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 205.42192220687866s cumulative, 0.006613492965698242s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_simple_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 205.4262957572937s cumulative, 0.0043735504150390625s individual

.
current test PASSED/SKIPPED -- test_boolean_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 205.43087911605835s cumulative, 0.0045833587646484375s individual

F
current test FAILED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 205.55306959152222s cumulative, 0.12219047546386719s individual

F
current test FAILED -- test_allowed_names in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 205.65716171264648s cumulative, 0.10409212112426758s individual

F
current test FAILED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 205.75763583183289s cumulative, 0.10047411918640137s individual

.
current test PASSED/SKIPPED -- test_has_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 205.76407313346863s cumulative, 0.0064373016357421875s individual

.
current test PASSED/SKIPPED -- test_boolean in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 205.76937580108643s cumulative, 0.0053026676177978516s individual

F
current test FAILED -- test_get_dict_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 205.8788788318634s cumulative, 0.10950303077697754s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 205.88517594337463s cumulative, 0.006297111511230469s individual

.
current test PASSED/SKIPPED -- test_int in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 205.88967204093933s cumulative, 0.004496097564697266s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 206.0566897392273s cumulative, 0.16701769828796387s individual

F
current test FAILED -- test_get_date_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 208.14169883728027s cumulative, 2.0850090980529785s individual

.
current test PASSED/SKIPPED -- test_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 208.1494688987732s cumulative, 0.007770061492919922s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 208.15494322776794s cumulative, 0.0054743289947509766s individual

F
current test FAILED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 208.2735230922699s cumulative, 0.11857986450195312s individual

F
current test FAILED -- test_list_transformer in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 208.38503098487854s cumulative, 0.11150789260864258s individual

F
current test FAILED -- test_int in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 208.5029935836792s cumulative, 0.11796259880065918s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 208.6169035434723s cumulative, 0.11390995979309082s individual

.
current test PASSED/SKIPPED -- test_list_type_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 208.62328481674194s cumulative, 0.00638127326965332s individual

F
current test FAILED -- test_get_datetime_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 208.75261759757996s cumulative, 0.1293327808380127s individual

.
current test PASSED/SKIPPED -- test_get_date_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 208.76128435134888s cumulative, 0.008666753768920898s individual

.
current test PASSED/SKIPPED -- test_percent_encoded in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 208.76742601394653s cumulative, 0.00614166259765625s individual

F
current test FAILED -- test_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 208.92521858215332s cumulative, 0.1577925682067871s individual

F
current test FAILED -- test_list_transformer in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 210.8657672405243s cumulative, 1.9405486583709717s individual

.
current test PASSED/SKIPPED -- test_multiple_form_keys in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 210.87852334976196s cumulative, 0.012756109237670898s individual

.
current test PASSED/SKIPPED -- test_list_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 210.88661170005798s cumulative, 0.008088350296020508s individual

F
current test FAILED -- test_get_datetime_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 211.03078937530518s cumulative, 0.14417767524719238s individual

.
current test PASSED/SKIPPED -- test_multiple_keys_as_bool in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 211.04148888587952s cumulative, 0.01069951057434082s individual

F
current test FAILED -- test_get_datetime_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 211.18215203285217s cumulative, 0.14066314697265625s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 211.18878698349s cumulative, 0.006634950637817383s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 211.19380950927734s cumulative, 0.005022525787353516s individual

.
current test PASSED/SKIPPED -- test_get_dict_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 211.19833254814148s cumulative, 0.004523038864135742s individual

.
current test PASSED/SKIPPED -- test_multiple_keys_as_float in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 211.2032573223114s cumulative, 0.004924774169921875s individual

F
current test FAILED -- test_int_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 211.3102788925171s cumulative, 0.10702157020568848s individual

.
current test PASSED/SKIPPED -- test_multiple_keys_as_bool in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 211.31754350662231s cumulative, 0.007264614105224609s individual

F
current test FAILED -- test_get_dict_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 211.4363284111023s cumulative, 0.11878490447998047s individual

F
current test FAILED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 211.5501446723938s cumulative, 0.1138162612915039s individual

F
current test FAILED -- test_multiple_keys_as_int in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 211.65551924705505s cumulative, 0.10537457466125488s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 211.66337251663208s cumulative, 0.007853269577026367s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 213.47992968559265s cumulative, 1.8165571689605713s individual

F
current test FAILED -- test_get_date_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 213.59363460540771s cumulative, 0.11370491981506348s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 213.60053610801697s cumulative, 0.00690150260925293s individual

.
current test PASSED/SKIPPED -- test_get_date_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 213.60500764846802s cumulative, 0.004471540451049805s individual

F
current test FAILED -- test_multiple_keys_as_float in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 213.7251558303833s cumulative, 0.1201481819152832s individual

F
current test FAILED -- test_get_param_as_json_handler_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 213.83195757865906s cumulative, 0.10680174827575684s individual

.
current test PASSED/SKIPPED -- test_list_transformer in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 213.8407506942749s cumulative, 0.008793115615844727s individual

F
current test FAILED -- test_multiple_form_keys in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 213.9579837322235s cumulative, 0.1172330379486084s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 213.96397829055786s cumulative, 0.005994558334350586s individual

F
current test FAILED -- test_multiple_keys_as_bool in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 214.0704596042633s cumulative, 0.10648131370544434s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_simple_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 214.18354392051697s cumulative, 0.11308431625366211s individual

F
current test FAILED -- test_float in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 216.02630043029785s cumulative, 1.8427565097808838s individual

F
current test FAILED -- test_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 216.1443362236023s cumulative, 0.11803579330444336s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_simple_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 216.2567596435547s cumulative, 0.11242341995239258s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_simple_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 216.26285576820374s cumulative, 0.0060961246490478516s individual

F
current test FAILED -- test_get_datetime_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 216.37504363059998s cumulative, 0.11218786239624023s individual

.
current test PASSED/SKIPPED -- test_boolean_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 216.3825581073761s cumulative, 0.007514476776123047s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 216.48410820960999s cumulative, 0.10155010223388672s individual

.
current test PASSED/SKIPPED -- test_list_type_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 216.4902629852295s cumulative, 0.006154775619506836s individual

F
current test FAILED -- test_allowed_names in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 216.60237431526184s cumulative, 0.11211133003234863s individual

.
current test PASSED/SKIPPED -- test_get_date_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 216.6085021495819s cumulative, 0.006127834320068359s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_complex_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 216.6129105091095s cumulative, 0.004408359527587891s individual

.
current test PASSED/SKIPPED -- test_get_date_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 216.61736059188843s cumulative, 0.004450082778930664s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_complex_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 218.35508131980896s cumulative, 1.7377207279205322s individual

.
current test PASSED/SKIPPED -- test_get_dict_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 218.36222505569458s cumulative, 0.007143735885620117s individual

.
current test PASSED/SKIPPED -- test_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 218.36662530899048s cumulative, 0.0044002532958984375s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 218.3713722229004s cumulative, 0.004746913909912109s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_complex_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 218.50480008125305s cumulative, 0.13342785835266113s individual

F
current test FAILED -- test_multiple_keys_as_bool in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 218.61961388587952s cumulative, 0.11481380462646484s individual

F
current test FAILED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 218.72326612472534s cumulative, 0.1036522388458252s individual

F
current test FAILED -- test_multiple_keys_as_int in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 218.82437944412231s cumulative, 0.10111331939697266s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_simple_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 218.83054208755493s cumulative, 0.0061626434326171875s individual

F
current test FAILED -- test_get_dict_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 218.9336929321289s cumulative, 0.10315084457397461s individual

F
current test FAILED -- test_boolean_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 219.0656201839447s cumulative, 0.1319272518157959s individual

F
current test FAILED -- test_get_param_as_json_no_handler_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 219.23114323616028s cumulative, 0.16552305221557617s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 221.2061665058136s cumulative, 1.9750232696533203s individual

F
current test FAILED -- test_list_type_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 221.32505559921265s cumulative, 0.11888909339904785s individual

.
current test PASSED/SKIPPED -- test_multiple_form_keys_as_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 221.33320140838623s cumulative, 0.008145809173583984s individual

F
current test FAILED -- test_percent_encoded in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 221.47548866271973s cumulative, 0.1422872543334961s individual

F
current test FAILED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 221.6054036617279s cumulative, 0.1299149990081787s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 221.61220908164978s cumulative, 0.006805419921875s individual

.
current test PASSED/SKIPPED -- test_get_dict_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 221.6171534061432s cumulative, 0.004944324493408203s individual

.
current test PASSED/SKIPPED -- test_int_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 221.62184762954712s cumulative, 0.004694223403930664s individual

.
current test PASSED/SKIPPED -- test_get_datetime_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 221.62744855880737s cumulative, 0.005600929260253906s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 221.79367566108704s cumulative, 0.16622710227966309s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 221.8026442527771s cumulative, 0.008968591690063477s individual

F
current test FAILED -- test_boolean in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 221.91541576385498s cumulative, 0.11277151107788086s individual

F
current test FAILED -- test_has_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 222.03525042533875s cumulative, 0.11983466148376465s individual

F
current test FAILED -- test_uuid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 223.85176730155945s cumulative, 1.8165168762207031s individual

F
current test FAILED -- test_multiple_form_keys in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 223.97296595573425s cumulative, 0.12119865417480469s individual

F
current test FAILED -- test_get_dict_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 224.09469747543335s cumulative, 0.12173151969909668s individual

.
current test PASSED/SKIPPED -- test_int_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 224.10243463516235s cumulative, 0.007737159729003906s individual

F
current test FAILED -- test_get_datetime_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 224.21806406974792s cumulative, 0.11562943458557129s individual

.
current test PASSED/SKIPPED -- test_multiple_form_keys in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 224.22505855560303s cumulative, 0.006994485855102539s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 224.33705043792725s cumulative, 0.11199188232421875s individual

.
current test PASSED/SKIPPED -- test_default_auto_parse_csv_behaviour in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 224.3433220386505s cumulative, 0.0062716007232666016s individual

F
current test FAILED -- test_list_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 224.45413732528687s cumulative, 0.11081528663635254s individual

.
current test PASSED/SKIPPED -- test_multiple_keys_as_float in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 224.46037220954895s cumulative, 0.006234884262084961s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 224.46524953842163s cumulative, 0.004877328872680664s individual

F
current test FAILED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 224.57296776771545s cumulative, 0.10771822929382324s individual

F
current test FAILED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 226.45821928977966s cumulative, 1.885251522064209s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 226.46488189697266s cumulative, 0.006662607192993164s individual

F
current test FAILED -- test_multiple_form_keys_as_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 226.58099627494812s cumulative, 0.11611437797546387s individual

F
current test FAILED -- test_get_dict_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 226.70074152946472s cumulative, 0.11974525451660156s individual

F
current test FAILED -- test_float_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 226.8147156238556s cumulative, 0.11397409439086914s individual

F
current test FAILED -- test_simple in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 226.93093252182007s cumulative, 0.11621689796447754s individual

.
current test PASSED/SKIPPED -- test_int in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 226.9396243095398s cumulative, 0.008691787719726562s individual

F
current test FAILED -- test_simple in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 227.04888820648193s cumulative, 0.10926389694213867s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 227.15842533111572s cumulative, 0.10953712463378906s individual

.
current test PASSED/SKIPPED -- test_float_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 227.16482067108154s cumulative, 0.0063953399658203125s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_simple_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 227.26694107055664s cumulative, 0.10212039947509766s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_simple_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 229.23792052268982s cumulative, 1.9709794521331787s individual

.
current test PASSED/SKIPPED -- test_param_property in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 229.25225639343262s cumulative, 0.014335870742797852s individual

F
current test FAILED -- test_param_property in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 229.4113359451294s cumulative, 0.15907955169677734s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_complex_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 229.42104983329773s cumulative, 0.009713888168334961s individual

.
current test PASSED/SKIPPED -- test_list_transformer in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 229.42657613754272s cumulative, 0.005526304244995117s individual

F
current test FAILED -- test_get_datetime_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 229.54748439788818s cumulative, 0.12090826034545898s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 229.5550355911255s cumulative, 0.0075511932373046875s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 229.56005668640137s cumulative, 0.005021095275878906s individual

.
current test PASSED/SKIPPED -- test_default_auto_parse_csv_behaviour in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 229.56539463996887s cumulative, 0.005337953567504883s individual

F
current test FAILED -- test_get_datetime_valid_with_format in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 229.68214678764343s cumulative, 0.11675214767456055s individual

.
current test PASSED/SKIPPED -- test_multiple_form_keys_as_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 229.68888330459595s cumulative, 0.0067365169525146484s individual

F
current test FAILED -- test_float in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 229.8047227859497s cumulative, 0.11583948135375977s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 229.8120574951172s cumulative, 0.007334709167480469s individual

F
current test FAILED -- test_get_date_valid_with_format in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 229.96691751480103s cumulative, 0.1548600196838379s individual

.
current test PASSED/SKIPPED -- test_get_datetime_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 229.97706389427185s cumulative, 0.010146379470825195s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 231.8613305091858s cumulative, 1.8842666149139404s individual

F
current test FAILED -- test_get_date_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 231.97762060165405s cumulative, 0.11629009246826172s individual

.
current test PASSED/SKIPPED -- test_get_datetime_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 231.98407077789307s cumulative, 0.006450176239013672s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 231.98880863189697s cumulative, 0.00473785400390625s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 232.0951051712036s cumulative, 0.10629653930664062s individual

F
current test FAILED -- test_get_datetime_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 232.24603652954102s cumulative, 0.15093135833740234s individual

F
current test FAILED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 232.4302213191986s cumulative, 0.18418478965759277s individual

F
current test FAILED -- test_boolean_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 232.6037631034851s cumulative, 0.17354178428649902s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 232.6154818534851s cumulative, 0.01171875s individual

F
current test FAILED -- test_bad_percentage in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 232.7383062839508s cumulative, 0.12282443046569824s individual

.
current test PASSED/SKIPPED -- test_get_dict_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 232.77397561073303s cumulative, 0.03566932678222656s individual

F
current test FAILED -- test_param_property in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 234.64839792251587s cumulative, 1.874422311782837s individual

F
current test FAILED -- test_get_dict_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 234.7635793685913s cumulative, 0.11518144607543945s individual

F
current test FAILED -- test_get_dict_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 234.87243366241455s cumulative, 0.10885429382324219s individual

.
current test PASSED/SKIPPED -- test_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 234.87906002998352s cumulative, 0.0066263675689697266s individual

.
current test PASSED/SKIPPED -- test_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 234.89107275009155s cumulative, 0.012012720108032227s individual

.
current test PASSED/SKIPPED -- test_allowed_names in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 234.89984250068665s cumulative, 0.008769750595092773s individual

.
current test PASSED/SKIPPED -- test_float in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 234.9056203365326s cumulative, 0.005777835845947266s individual

.
current test PASSED/SKIPPED -- test_get_datetime_valid_with_format in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 234.91072726249695s cumulative, 0.005106925964355469s individual

.
current test PASSED/SKIPPED -- test_boolean in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 234.9153995513916s cumulative, 0.00467228889465332s individual

.
current test PASSED/SKIPPED -- test_allowed_names in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 234.91987657546997s cumulative, 0.004477024078369141s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 235.04327011108398s cumulative, 0.12339353561401367s individual

F
current test FAILED -- test_get_dict_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 235.16720938682556s cumulative, 0.12393927574157715s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 235.17467260360718s cumulative, 0.007463216781616211s individual

F
current test FAILED -- test_int_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 235.3045690059662s cumulative, 0.1298964023590088s individual

F
current test FAILED -- test_list_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 235.41697430610657s cumulative, 0.11240530014038086s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 235.4250283241272s cumulative, 0.008054018020629883s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 235.4306321144104s cumulative, 0.005603790283203125s individual

.
current test PASSED/SKIPPED -- test_get_date_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 235.43562126159668s cumulative, 0.004989147186279297s individual

F
current test FAILED -- test_get_datetime_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 235.55435967445374s cumulative, 0.11873841285705566s individual

F
current test FAILED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 237.36611819267273s cumulative, 1.8117585182189941s individual

F
current test FAILED -- test_uuid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 237.48328471183777s cumulative, 0.11716651916503906s individual

F
current test FAILED -- test_dont_auto_parse_by_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 237.60287523269653s cumulative, 0.11959052085876465s individual

F
current test FAILED -- test_http_methods_body_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 237.70691108703613s cumulative, 0.10403585433959961s individual

F
current test FAILED -- test_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 237.822655916214s cumulative, 0.11574482917785645s individual

F
current test FAILED -- test_asgi_raises_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 237.9559907913208s cumulative, 0.13333487510681152s individual

F
current test FAILED -- test_http_methods_body_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 238.0738127231598s cumulative, 0.11782193183898926s individual

F
current test FAILED -- test_http_methods_body_not_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 239.8486020565033s cumulative, 1.7747893333435059s individual

F
current test FAILED -- test_http_methods_body_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 239.96025466918945s cumulative, 0.11165261268615723s individual

F
current test FAILED -- test_empty_body_no_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 240.0635597705841s cumulative, 0.10330510139465332s individual

F
current test FAILED -- test_http_methods_body_not_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 240.1773338317871s cumulative, 0.11377406120300293s individual

F
current test FAILED -- test_http_methods_body_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 240.29456329345703s cumulative, 0.11722946166992188s individual

F
current test FAILED -- test_http_methods_body_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 240.40023064613342s cumulative, 0.1056673526763916s individual

F
current test FAILED -- test_explicitly_disable_auto_parse in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 240.52321076393127s cumulative, 0.12298011779785156s individual

F
current test FAILED -- test_non_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 242.5386290550232s cumulative, 2.015418291091919s individual


tests/test_redirects.py .
current test PASSED/SKIPPED -- test_redirect in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 242.54726672172546s cumulative, 0.008637666702270508s individual

E
current test FAILED -- test_redirect_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 242.63531279563904s cumulative, 0.08804607391357422s individual

E
current test FAILED -- test_redirect in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 242.71649742126465s cumulative, 0.08118462562561035s individual

E
current test FAILED -- test_redirect_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 242.81628847122192s cumulative, 0.09979104995727539s individual

.
current test PASSED/SKIPPED -- test_redirect_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 242.82944011688232s cumulative, 0.01315164566040039s individual

E
current test FAILED -- test_redirect in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 242.9171965122223s cumulative, 0.08775639533996582s individual

.
current test PASSED/SKIPPED -- test_redirect in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 242.92448139190674s cumulative, 0.007284879684448242s individual

.
current test PASSED/SKIPPED -- test_redirect_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 242.92970752716064s cumulative, 0.00522613525390625s individual

E
current test FAILED -- test_redirect in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 243.00406742095947s cumulative, 0.07435989379882812s individual

.
current test PASSED/SKIPPED -- test_redirect in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 243.0100874900818s cumulative, 0.006020069122314453s individual

.
current test PASSED/SKIPPED -- test_redirect_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 243.01778626441956s cumulative, 0.007698774337768555s individual

.
current test PASSED/SKIPPED -- test_redirect_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 243.02418422698975s cumulative, 0.00639796257019043s individual

E
current test FAILED -- test_redirect_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 243.09704184532166s cumulative, 0.07285761833190918s individual

.
current test PASSED/SKIPPED -- test_redirect in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 243.10348439216614s cumulative, 0.006442546844482422s individual

.
current test PASSED/SKIPPED -- test_redirect_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 243.10849714279175s cumulative, 0.0050127506256103516s individual

E
current test FAILED -- test_redirect in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 243.18625950813293s cumulative, 0.07776236534118652s individual

.
current test PASSED/SKIPPED -- test_redirect in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 243.19318890571594s cumulative, 0.0069293975830078125s individual

E
current test FAILED -- test_redirect_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 243.27707386016846s cumulative, 0.08388495445251465s individual

E
current test FAILED -- test_redirect in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 243.37394499778748s cumulative, 0.09687113761901855s individual

E
current test FAILED -- test_redirect_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 243.45713806152344s cumulative, 0.08319306373596191s individual


tests/asgi/test_ws.py s
tests/test_slots.py .
current test PASSED/SKIPPED -- test_slots_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_slots.py: 243.4611897468567s cumulative, 0.004051685333251953s individual

.
current test PASSED/SKIPPED -- test_slots_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_slots.py: 243.46415615081787s cumulative, 0.0029664039611816406s individual

.
current test PASSED/SKIPPED -- test_slots_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_slots.py: 243.46722745895386s cumulative, 0.003071308135986328s individual

.
current test PASSED/SKIPPED -- test_slots_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_slots.py: 243.46999502182007s cumulative, 0.0027675628662109375s individual


tests/test_http_method_routing.py E
current test FAILED -- test_report in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 243.56700563430786s cumulative, 0.09701061248779297s individual

E
current test FAILED -- test_meta_and_others_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 243.6711905002594s cumulative, 0.10418486595153809s individual

E
current test FAILED -- test_meta_and_others_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 245.48325371742249s cumulative, 1.812063217163086s individual

E
current test FAILED -- test_default_on_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 245.5690197944641s cumulative, 0.08576607704162598s individual

.
current test PASSED/SKIPPED -- test_methods_not_allowed_simple in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 245.5796880722046s cumulative, 0.010668277740478516s individual

.
current test PASSED/SKIPPED -- test_on_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 245.58581686019897s cumulative, 0.006128787994384766s individual

E
current test FAILED -- test_put in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 245.66474437713623s cumulative, 0.07892751693725586s individual

E
current test FAILED -- test_post_not_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 245.74915409088135s cumulative, 0.08440971374511719s individual

.
current test PASSED/SKIPPED -- test_methods_not_allowed_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 245.76902961730957s cumulative, 0.019875526428222656s individual

.
current test PASSED/SKIPPED -- test_default_on_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 245.77505230903625s cumulative, 0.00602269172668457s individual

.
current test PASSED/SKIPPED -- test_misc in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 245.7817554473877s cumulative, 0.00670313835144043s individual

.
current test PASSED/SKIPPED -- test_method_not_allowed_with_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 245.7964780330658s cumulative, 0.014722585678100586s individual

E
current test FAILED -- test_misc in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 245.87459921836853s cumulative, 0.07812118530273438s individual

E
current test FAILED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 245.96118021011353s cumulative, 0.08658099174499512s individual

.
current test PASSED/SKIPPED -- test_meta_and_others_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 245.96806955337524s cumulative, 0.00688934326171875s individual

.
current test PASSED/SKIPPED -- test_post_not_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 245.97491097450256s cumulative, 0.006841421127319336s individual

E
current test FAILED -- test_on_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 246.06149458885193s cumulative, 0.08658361434936523s individual

E
current test FAILED -- test_method_not_allowed_with_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 246.1450538635254s cumulative, 0.08355927467346191s individual

E
current test FAILED -- test_methods_not_allowed_simple in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 246.21592593193054s cumulative, 0.07087206840515137s individual

.
current test PASSED/SKIPPED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 246.22333216667175s cumulative, 0.0074062347412109375s individual

.
current test PASSED/SKIPPED -- test_put in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 246.22947812080383s cumulative, 0.006145954132080078s individual

.
current test PASSED/SKIPPED -- test_meta_and_others_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 246.23458743095398s cumulative, 0.005109310150146484s individual

.
current test PASSED/SKIPPED -- test_report in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 246.2416172027588s cumulative, 0.00702977180480957s individual

E
current test FAILED -- test_methods_not_allowed_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 246.33418703079224s cumulative, 0.09256982803344727s individual


tests/test_middleware.py F
current test FAILED -- test_generate_trans_id_with_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 248.16674089431763s cumulative, 1.8325538635253906s individual

sF
current test FAILED -- test_process_request_not_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 248.26309204101562s cumulative, 0.09635114669799805s individual

F
current test FAILED -- test_process_resource_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 248.35056066513062s cumulative, 0.08746862411499023s individual

F
current test FAILED -- test_process_resource_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 248.44525742530823s cumulative, 0.0946967601776123s individual

F
current test FAILED -- test_process_request_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 248.53681206703186s cumulative, 0.09155464172363281s individual

F
current test FAILED -- test_process_request_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 248.63033771514893s cumulative, 0.09352564811706543s individual

F
current test FAILED -- test_base_path_is_removed_before_routing in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 248.71063041687012s cumulative, 0.0802927017211914s individual

F
current test FAILED -- test_error_composed_before_resp_middleware_called in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 248.79781818389893s cumulative, 0.0871877670288086s individual

F
current test FAILED -- test_http_status_raised_from_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 248.89266657829285s cumulative, 0.0948483943939209s individual

F
current test FAILED -- test_api_initialization_with_cors_enabled_and_middleware_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 248.9713008403778s cumulative, 0.07863426208496094s individual

F
current test FAILED -- test_api_initialization_with_cors_enabled_and_middleware_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 250.8545572757721s cumulative, 1.883256435394287s individual

F
current test FAILED -- test_api_initialization_with_cors_enabled_and_middleware_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 250.96732831001282s cumulative, 0.11277103424072266s individual

F
current test FAILED -- test_api_initialization_with_cors_enabled_and_middleware_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 251.07402539253235s cumulative, 0.10669708251953125s individual

F
current test FAILED -- test_log_get_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 251.18129634857178s cumulative, 0.10727095603942871s individual

F
current test FAILED -- test_skip_process_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 251.2790732383728s cumulative, 0.09777688980102539s individual

F
current test FAILED -- test_log_get_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 251.38469004631042s cumulative, 0.10561680793762207s individual

F
current test FAILED -- test_response_middleware_raises_exception in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 251.47832894325256s cumulative, 0.09363889694213867s individual

F
current test FAILED -- test_can_access_resource_params in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 251.59618043899536s cumulative, 0.11785149574279785s individual

F
current test FAILED -- test_can_access_resource_params in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 251.7531533241272s cumulative, 0.15697288513183594s individual

F
current test FAILED -- test_dont_need_params_in_signature in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 251.86561942100525s cumulative, 0.11246609687805176s individual

F
current test FAILED -- test_order_mw_executed_when_exception_in_resp in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 253.75172185897827s cumulative, 1.8861024379730225s individual

F
current test FAILED -- test_generate_trans_id_and_time_with_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 253.89197993278503s cumulative, 0.1402580738067627s individual

F
current test FAILED -- test_inner_mw_with_ex_handler_throw_exception in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 254.023442029953s cumulative, 0.13146209716796875s individual

F
current test FAILED -- test_middleware_execution_order in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 254.158038854599s cumulative, 0.1345968246459961s individual

F
current test FAILED -- test_generate_trans_id_and_time_with_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 254.25709104537964s cumulative, 0.09905219078063965s individual

F
current test FAILED -- test_order_independent_mw_executed_when_exception_in_req in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 254.35023546218872s cumulative, 0.09314441680908203s individual

F
current test FAILED -- test_order_mw_executed_when_exception_in_rsrc in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 254.43498587608337s cumulative, 0.08475041389465332s individual

F
current test FAILED -- test_order_independent_mw_executed_when_exception_in_rsrc in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 254.53293180465698s cumulative, 0.0979459285736084s individual

F
current test FAILED -- test_legacy_middleware_called_with_correct_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 254.61868000030518s cumulative, 0.08574819564819336s individual

F
current test FAILED -- test_multiple_response_mw_throw_exception in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 254.7415897846222s cumulative, 0.1229097843170166s individual

F
current test FAILED -- test_order_independent_mw_executed_when_exception_in_resp in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 256.572993516922s cumulative, 1.8314037322998047s individual

F
current test FAILED -- test_independent_middleware_execution_order in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 256.67921590805054s cumulative, 0.10622239112854004s individual

F
current test FAILED -- test_inner_mw_throw_exception_while_processing_resp in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 256.77515268325806s cumulative, 0.09593677520751953s individual

F
current test FAILED -- test_outer_mw_with_ex_handler_throw_exception in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 256.8700349330902s cumulative, 0.09488224983215332s individual

F
current test FAILED -- test_inner_mw_throw_exception in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 256.97267961502075s cumulative, 0.10264468193054199s individual

F
current test FAILED -- test_order_mw_executed_when_exception_in_req in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 257.0585653781891s cumulative, 0.08588576316833496s individual


tests/test_error_handlers.py F
current test FAILED -- test_caught_error_async in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 257.14513659477234s cumulative, 0.08657121658325195s individual

s
current test PASSED/SKIPPED -- test_caught_error_async in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 257.1483840942383s cumulative, 0.003247499465942383s individual

F
current test FAILED -- test_catch_http_no_route_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 257.2412624359131s cumulative, 0.09287834167480469s individual


tests/test_utils.py F
current test FAILED -- test_path_must_start_with_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 257.36992835998535s cumulative, 0.12866592407226562s individual

F
current test FAILED -- test_query_string_in_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 257.4907548427582s cumulative, 0.12082648277282715s individual

F
current test FAILED -- test_simulate_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 259.39660000801086s cumulative, 1.9058451652526855s individual

F
current test FAILED -- test_default_headers_with_override in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 259.53270649909973s cumulative, 0.1361064910888672s individual

F
current test FAILED -- test_simulate_hostname in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 259.6824600696564s cumulative, 0.14975357055664062s individual

F
current test FAILED -- test_query_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 259.80581426620483s cumulative, 0.12335419654846191s individual

F
current test FAILED -- test_simulate_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 259.9319121837616s cumulative, 0.1260979175567627s individual

F
current test FAILED -- test_simulate_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 260.0582892894745s cumulative, 0.12637710571289062s individual

F
current test FAILED -- test_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 260.17852902412415s cumulative, 0.1202397346496582s individual

F
current test FAILED -- test_simulate_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 261.96293544769287s cumulative, 1.7844064235687256s individual

F
current test FAILED -- test_override_method_with_extras in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 262.1033160686493s cumulative, 0.1403806209564209s individual

F
current test FAILED -- test_cached_text_in_result in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 262.22818303108215s cumulative, 0.12486696243286133s individual

F
current test FAILED -- test_query_string_no_question in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 262.3530306816101s cumulative, 0.1248476505279541s individual

F
current test FAILED -- test_simulate_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 262.4709267616272s cumulative, 0.11789608001708984s individual

F
current test FAILED -- test_default_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 262.62649059295654s cumulative, 0.1555638313293457s individual


tests/asgi/test_buffered_reader.py .
current test PASSED/SKIPPED -- test_small_reads in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 264.8515667915344s cumulative, 2.225076198577881s individual


tests/test_boundedstream.py .
current test PASSED/SKIPPED -- test_not_writable in /home/kaiyaok2/PythonProjects/falcon/tests/test_boundedstream.py: 264.85567331314087s cumulative, 0.0041065216064453125s individual


tests/asgi/test_response_media_asgi.py .
current test PASSED/SKIPPED -- test_non_ascii_json_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 264.90765166282654s cumulative, 0.051978349685668945s individual

.
current test PASSED/SKIPPED -- test_non_ascii_json_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 264.91421365737915s cumulative, 0.006561994552612305s individual

.
current test PASSED/SKIPPED -- test_default_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 264.91896986961365s cumulative, 0.00475621223449707s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 264.9235007762909s cumulative, 0.004530906677246094s individual

.
current test PASSED/SKIPPED -- test_custom_media_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 264.9302258491516s cumulative, 0.0067250728607177734s individual

.
current test PASSED/SKIPPED -- test_media in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 264.9345440864563s cumulative, 0.0043182373046875s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 264.93925738334656s cumulative, 0.004713296890258789s individual

.
current test PASSED/SKIPPED -- test_non_ascii_json_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 264.94375944137573s cumulative, 0.004502058029174805s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 264.9519233703613s cumulative, 0.008163928985595703s individual

.
current test PASSED/SKIPPED -- test_data_masquerading_as_text in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 264.95938777923584s cumulative, 0.007464408874511719s individual

.
current test PASSED/SKIPPED -- test_custom_render_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 264.96525263786316s cumulative, 0.005864858627319336s individual

.
current test PASSED/SKIPPED -- test_non_ascii_json_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 264.97047424316406s cumulative, 0.00522160530090332s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 264.97678875923157s cumulative, 0.006314516067504883s individual

.
current test PASSED/SKIPPED -- test_mimeparse_edgecases in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 264.9822461605072s cumulative, 0.005457401275634766s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 264.98740315437317s cumulative, 0.005156993865966797s individual

.
current test PASSED/SKIPPED -- test_text in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 264.9923725128174s cumulative, 0.004969358444213867s individual

.
current test PASSED/SKIPPED -- test_data in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 264.9987452030182s cumulative, 0.006372690200805664s individual

.
current test PASSED/SKIPPED -- test_mimeparse_edgecases in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 265.00432682037354s cumulative, 0.00558161735534668s individual

.
current test PASSED/SKIPPED -- test_non_ascii_json_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 265.0093207359314s cumulative, 0.004993915557861328s individual

.
current test PASSED/SKIPPED -- test_media_rendered_cached in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 265.0148596763611s cumulative, 0.0055389404296875s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 265.02153396606445s cumulative, 0.006674289703369141s individual

.
current test PASSED/SKIPPED -- test_unknown_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 265.0267927646637s cumulative, 0.005258798599243164s individual


tests/test_after_hooks.py .
current test PASSED/SKIPPED -- test_serializer in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 265.0337247848511s cumulative, 0.00693202018737793s individual

.
current test PASSED/SKIPPED -- test_resource_with_uri_fields in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 265.0434808731079s cumulative, 0.009756088256835938s individual

.
current test PASSED/SKIPPED -- test_after_hooks_on_suffixed_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 265.04962038993835s cumulative, 0.006139516830444336s individual

.
current test PASSED/SKIPPED -- test_output_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 265.0549213886261s cumulative, 0.005300998687744141s individual

.
current test PASSED/SKIPPED -- test_resource_with_uri_fields_async in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 265.0593886375427s cumulative, 0.0044672489166259766s individual

.
current test PASSED/SKIPPED -- test_resource_with_uri_fields in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 265.0641670227051s cumulative, 0.004778385162353516s individual

.
current test PASSED/SKIPPED -- test_wrapped_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 265.0708179473877s cumulative, 0.0066509246826171875s individual

.
current test PASSED/SKIPPED -- test_serializer in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 265.075834274292s cumulative, 0.005016326904296875s individual

.
current test PASSED/SKIPPED -- test_wrapped_resource_with_hooks_aware_of_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 265.08278703689575s cumulative, 0.006952762603759766s individual

.
current test PASSED/SKIPPED -- test_wrapped_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 265.0893723964691s cumulative, 0.006585359573364258s individual

.
current test PASSED/SKIPPED -- test_after_hooks_on_suffixed_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 265.0954611301422s cumulative, 0.006088733673095703s individual

.
current test PASSED/SKIPPED -- test_output_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 265.1008234024048s cumulative, 0.005362272262573242s individual

.
current test PASSED/SKIPPED -- test_hook_as_callable_class in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 265.10523796081543s cumulative, 0.004414558410644531s individual

.
current test PASSED/SKIPPED -- test_hook_as_callable_class in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 265.10947728157043s cumulative, 0.004239320755004883s individual

.
current test PASSED/SKIPPED -- test_after_hooks_on_suffixed_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 265.1158037185669s cumulative, 0.006326436996459961s individual

.
current test PASSED/SKIPPED -- test_after_hooks_on_suffixed_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 265.1259734630585s cumulative, 0.010169744491577148s individual


tests/test_compiled_router.py .
current test PASSED/SKIPPED -- test_multithread_compile in /home/kaiyaok2/PythonProjects/falcon/tests/test_compiled_router.py: 265.1903865337372s cumulative, 0.06441307067871094s individual


tests/test_deps.py .
current test PASSED/SKIPPED -- test_deps_mimeparse_correct_package in /home/kaiyaok2/PythonProjects/falcon/tests/test_deps.py: 265.1934151649475s cumulative, 0.0030286312103271484s individual


tests/test_custom_router.py .
current test PASSED/SKIPPED -- test_custom_router_find_should_be_used in /home/kaiyaok2/PythonProjects/falcon/tests/test_custom_router.py: 265.20376348495483s cumulative, 0.010348320007324219s individual

.
current test PASSED/SKIPPED -- test_can_pass_additional_params_to_add_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_custom_router.py: 265.20822930336s cumulative, 0.004465818405151367s individual

.
current test PASSED/SKIPPED -- test_custom_router_add_route_should_be_used in /home/kaiyaok2/PythonProjects/falcon/tests/test_custom_router.py: 265.2119851112366s cumulative, 0.003755807876586914s individual

.
current test PASSED/SKIPPED -- test_can_pass_additional_params_to_add_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_custom_router.py: 265.2160692214966s cumulative, 0.004084110260009766s individual

.
current test PASSED/SKIPPED -- test_custom_router_find_should_be_used in /home/kaiyaok2/PythonProjects/falcon/tests/test_custom_router.py: 265.22238969802856s cumulative, 0.006320476531982422s individual

.
current test PASSED/SKIPPED -- test_custom_router_takes_req_positional_argument in /home/kaiyaok2/PythonProjects/falcon/tests/test_custom_router.py: 265.22650122642517s cumulative, 0.004111528396606445s individual

.
current test PASSED/SKIPPED -- test_custom_router_takes_req_keyword_argument in /home/kaiyaok2/PythonProjects/falcon/tests/test_custom_router.py: 265.23156785964966s cumulative, 0.005066633224487305s individual

.
current test PASSED/SKIPPED -- test_custom_router_add_route_should_be_used in /home/kaiyaok2/PythonProjects/falcon/tests/test_custom_router.py: 265.23542976379395s cumulative, 0.0038619041442871094s individual

.
current test PASSED/SKIPPED -- test_custom_router_takes_req_positional_argument in /home/kaiyaok2/PythonProjects/falcon/tests/test_custom_router.py: 265.23931550979614s cumulative, 0.0038857460021972656s individual

.
current test PASSED/SKIPPED -- test_custom_router_takes_req_keyword_argument in /home/kaiyaok2/PythonProjects/falcon/tests/test_custom_router.py: 265.2429986000061s cumulative, 0.0036830902099609375s individual


tests/test_wsgi_errors.py .
current test PASSED/SKIPPED -- test_responder_logged_bytestring in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_errors.py: 265.24874687194824s cumulative, 0.005748271942138672s individual


tests/test_cors_middleware.py F
current test FAILED -- test_allow_credential_list_or_str in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 265.35144662857056s cumulative, 0.10269975662231445s individual

F
current test FAILED -- test_allow_origin in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 265.4492926597595s cumulative, 0.09784603118896484s individual

F
current test FAILED -- test_allow_origin in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 265.54015040397644s cumulative, 0.09085774421691895s individual

F
current test FAILED -- test_allow_credential_list_or_str in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 265.6255910396576s cumulative, 0.08544063568115234s individual

F
current test FAILED -- test_expose_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 265.7120020389557s cumulative, 0.0864109992980957s individual

F
current test FAILED -- test_allow_credential_wildcard in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 265.7998037338257s cumulative, 0.08780169486999512s individual

F
current test FAILED -- test_expose_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 265.8753969669342s cumulative, 0.07559323310852051s individual

F
current test FAILED -- test_allow_origin_allow_credential in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 265.9640281200409s cumulative, 0.08863115310668945s individual

F
current test FAILED -- test_allow_origin in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 266.052618265152s cumulative, 0.08859014511108398s individual

F
current test FAILED -- test_expose_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 266.1278603076935s cumulative, 0.0752420425415039s individual

F
current test FAILED -- test_allow_credential_existing_origin in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 267.9818730354309s cumulative, 1.8540127277374268s individual

F
current test FAILED -- test_enabled_cors_should_accept_all_origins_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 268.0685348510742s cumulative, 0.08666181564331055s individual

F
current test FAILED -- test_enabled_cors_handles_preflighting_no_headers_in_req in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 268.17389273643494s cumulative, 0.10535788536071777s individual

F
current test FAILED -- test_disabled_cors_should_not_add_any_extra_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 268.2586495876312s cumulative, 0.08475685119628906s individual

F
current test FAILED -- test_enabled_cors_no_origin in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 268.34371995925903s cumulative, 0.08507037162780762s individual

F
current test FAILED -- test_enabled_cors_should_add_extra_headers_on_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 268.43309926986694s cumulative, 0.08937931060791016s individual

F
current test FAILED -- test_enabled_cors_handles_preflighting in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 268.5340838432312s cumulative, 0.10098457336425781s individual


tests/test_response_body.py F
current test FAILED -- test_content_length_set_on_head_with_no_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 268.61021304130554s cumulative, 0.07612919807434082s individual

F
current test FAILED -- test_unsupported_response_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 268.68394804000854s cumulative, 0.07373499870300293s individual

F
current test FAILED -- test_response_body_rendition_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 268.7540442943573s cumulative, 0.07009625434875488s individual



==================================== ERRORS ====================================
___________ ERROR at setup of TestCustomError.test_data_is_set[asgi] ___________

self = <test_error_handlers.TestCustomError object at 0x7f09b5d93250>
asgi = True

    @pytest.fixture()
    def body_client(self, asgi):
        app = create_app(asgi=asgi)
>       app.add_route('/error', CustomErrorResource())

tests/test_error_handlers.py:318: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a0fdae30>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0e03130>, 'CHECK...3130>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0e03130>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CustomErrorResource.on_get of <test_error_handlers.CustomErrorResource object at 0x7f09b5e97c10>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________ ERROR at setup of TestCustomError.test_media_is_set[asgi] ___________

self = <test_error_handlers.TestCustomError object at 0x7f09b5d932b0>
asgi = True

    @pytest.fixture()
    def body_client(self, asgi):
        app = create_app(asgi=asgi)
>       app.add_route('/error', CustomErrorResource())

tests/test_error_handlers.py:318: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a09e2260>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0c813f0>, 'CHECK...13f0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0c813f0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CustomErrorResource.on_get of <test_error_handlers.CustomErrorResource object at 0x7f09a0bcd120>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________ ERROR at setup of TestCustomError.test_body_is_set[asgi] ___________

self = <test_error_handlers.TestCustomError object at 0x7f09b5d934f0>
asgi = True

    @pytest.fixture()
    def body_client(self, asgi):
        app = create_app(asgi=asgi)
>       app.add_route('/error', CustomErrorResource())

tests/test_error_handlers.py:318: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a09e3b50>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0e02d40>, 'CHECK...2d40>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0e02d40>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CustomErrorResource.on_get of <test_error_handlers.CustomErrorResource object at 0x7f09a09ea2f0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ ERROR at setup of TestNoBodyWithStatus.test_media_is_set[asgi] ________

self = <test_error_handlers.TestNoBodyWithStatus object at 0x7f09b5d92b30>
asgi = True

    @pytest.fixture()
    def body_client(self, asgi):
        app = create_app(asgi=asgi)
>       app.add_route('/error', NoBodyResource())

tests/test_error_handlers.py:275: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a09e22d0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0cc9cf0>, 'CHECK...9cf0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0cc9cf0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method NoBodyResource.on_get of <test_error_handlers.NoBodyResource object at 0x7f09a097cb80>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ ERROR at setup of TestNoBodyWithStatus.test_body_is_set[asgi] _________

self = <test_error_handlers.TestNoBodyWithStatus object at 0x7f09b5d92d70>
asgi = True

    @pytest.fixture()
    def body_client(self, asgi):
        app = create_app(asgi=asgi)
>       app.add_route('/error', NoBodyResource())

tests/test_error_handlers.py:275: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a09e3680>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0e03ac0>, 'CHECK...3ac0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0e03ac0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method NoBodyResource.on_get of <test_error_handlers.NoBodyResource object at 0x7f09b53ed570>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ ERROR at setup of TestNoBodyWithStatus.test_data_is_set[asgi] _________

self = <test_error_handlers.TestNoBodyWithStatus object at 0x7f09b5d92ad0>
asgi = True

    @pytest.fixture()
    def body_client(self, asgi):
        app = create_app(asgi=asgi)
>       app.add_route('/error', NoBodyResource())

tests/test_error_handlers.py:275: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a0fdb370>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0d67490>, 'CHECK...7490>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0d67490>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method NoBodyResource.on_get of <test_error_handlers.NoBodyResource object at 0x7f09a0b45f30>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________ ERROR at setup of TestErrorHandler.test_subclass_error[asgi] _________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', ErroredClassResource())

tests/test_error_handlers.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a0f725e0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0c320e0>, 'CHECK...20e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0c320e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ErroredClassResource.on_delete of <test_error_handlers.ErroredClassResource object at 0x7f09a09777c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestErrorHandler.test_handler_multiple_exception_iterable[asgi-exceptions0] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', ErroredClassResource())

tests/test_error_handlers.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a0fda2d0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0c33e20>, 'CHECK...3e20>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0c33e20>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ErroredClassResource.on_delete of <test_error_handlers.ErroredClassResource object at 0x7f09a0d3ebf0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestErrorHandler.test_error_precedence_subclass_order_indifference[asgi] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', ErroredClassResource())

tests/test_error_handlers.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a0feb8b0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a1a9d630>, 'CHECK...d630>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a1a9d630>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ErroredClassResource.on_delete of <test_error_handlers.ErroredClassResource object at 0x7f09a09e89a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______ ERROR at setup of TestErrorHandler.test_handle_not_defined[asgi] _______

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', ErroredClassResource())

tests/test_error_handlers.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a0febd80>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0d65750>, 'CHECK...5750>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0d65750>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ErroredClassResource.on_delete of <test_error_handlers.ErroredClassResource object at 0x7f09a0750130>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestErrorHandler.test_invalid_add_exception_handler_input[asgi-exceptions2] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', ErroredClassResource())

tests/test_error_handlers.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a0be7e60>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0d67880>, 'CHECK...7880>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0d67880>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ErroredClassResource.on_delete of <test_error_handlers.ErroredClassResource object at 0x7f09a0906ad0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________ ERROR at setup of TestErrorHandler.test_caught_error[asgi] __________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', ErroredClassResource())

tests/test_error_handlers.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a0be5700>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a19c9e10>, 'CHECK...9e10>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a19c9e10>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ErroredClassResource.on_delete of <test_error_handlers.ErroredClassResource object at 0x7f09a0e491b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___ ERROR at setup of TestErrorHandler.test_error_precedence_subclass[asgi] ____

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', ErroredClassResource())

tests/test_error_handlers.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a0be6180>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0cc9000>, 'CHECK...9000>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0cc9000>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ErroredClassResource.on_delete of <test_error_handlers.ErroredClassResource object at 0x7f09a236ffd0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestErrorHandler.test_uncaught_python_error[asgi-get_headers2-application/xml-<?xml] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', ErroredClassResource())

tests/test_error_handlers.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a0be6c00>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0f205e0>, 'CHECK...05e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0f205e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ErroredClassResource.on_delete of <test_error_handlers.ErroredClassResource object at 0x7f09b576ada0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestErrorHandler.test_invalid_add_exception_handler_input[asgi-Hello, world!] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', ErroredClassResource())

tests/test_error_handlers.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a0be7300>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0d657e0>, 'CHECK...57e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0d657e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ErroredClassResource.on_delete of <test_error_handlers.ErroredClassResource object at 0x7f09b543a3b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestErrorHandler.test_uncaught_python_error[asgi-get_headers1-application/json-{"] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', ErroredClassResource())

tests/test_error_handlers.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a0be4dd0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0cc88b0>, 'CHECK...88b0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0cc88b0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ErroredClassResource.on_delete of <test_error_handlers.ErroredClassResource object at 0x7f09a09015d0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestErrorHandler.test_handler_multiple_exception_iterable[asgi-exceptions1] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', ErroredClassResource())

tests/test_error_handlers.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a0be6ea0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0c80e50>, 'CHECK...0e50>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0c80e50>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ErroredClassResource.on_delete of <test_error_handlers.ErroredClassResource object at 0x7f09a0aa7520>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ ERROR at setup of TestErrorHandler.test_uncaught_error_else[asgi] _______

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', ErroredClassResource())

tests/test_error_handlers.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a0febbc0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0c81990>, 'CHECK...1990>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0c81990>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ErroredClassResource.on_delete of <test_error_handlers.ErroredClassResource object at 0x7f09a0753df0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___ ERROR at setup of TestErrorHandler.test_error_precedence_duplicate[asgi] ___

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', ErroredClassResource())

tests/test_error_handlers.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a0feaea0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0c301f0>, 'CHECK...01f0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0c301f0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ErroredClassResource.on_delete of <test_error_handlers.ErroredClassResource object at 0x7f09a0b46a10>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestErrorHandler.test_invalid_add_exception_handler_input[asgi-exceptions3] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', ErroredClassResource())

tests/test_error_handlers.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a0fa8580>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0e50f70>, 'CHECK...0f70>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0e50f70>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ErroredClassResource.on_delete of <test_error_handlers.ErroredClassResource object at 0x7f09a0bc1c90>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestErrorHandler.test_invalid_add_exception_handler_input[asgi-exceptions0] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', ErroredClassResource())

tests/test_error_handlers.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a0fdb920>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0e53640>, 'CHECK...3640>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0e53640>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ErroredClassResource.on_delete of <test_error_handlers.ErroredClassResource object at 0x7f09a094ec80>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestErrorHandler.test_handler_single_exception_iterable[asgi] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', ErroredClassResource())

tests/test_error_handlers.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a09e3a00>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0b55000>, 'CHECK...5000>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0b55000>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ErroredClassResource.on_delete of <test_error_handlers.ErroredClassResource object at 0x7f09a097ed40>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestErrorHandler.test_uncaught_python_error[asgi-None-application/json-{"] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', ErroredClassResource())

tests/test_error_handlers.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a09e38b0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0e51ea0>, 'CHECK...1ea0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0e51ea0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ErroredClassResource.on_delete of <test_error_handlers.ErroredClassResource object at 0x7f09a0b77820>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________ ERROR at setup of TestErrorHandler.test_uncaught_error[asgi] _________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', ErroredClassResource())

tests/test_error_handlers.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a0969b60>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0e52b90>, 'CHECK...2b90>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0e52b90>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ErroredClassResource.on_delete of <test_error_handlers.ErroredClassResource object at 0x7f09a0bef6d0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ ERROR at setup of TestErrorHandler.test_converted_error[asgi] _________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', ErroredClassResource())

tests/test_error_handlers.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a0968b30>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0c82f80>, 'CHECK...2f80>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0c82f80>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ErroredClassResource.on_delete of <test_error_handlers.ErroredClassResource object at 0x7f09a0b47280>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestRedirects.test_redirect_with_headers[asgi-HEAD-308 Permanent Redirect-/perm/redirect] _

asgi = True

    @pytest.fixture
    def client_exercising_headers(asgi):
        app = create_app(asgi)
    
        resource = RedirectingResourceWithHeaders()
>       app.add_route('/', resource)

tests/test_redirects.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a05bcdd0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5236ef0>, 'CHECK...6ef0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5236ef0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method RedirectingResourceWithHeaders.on_delete of <test_redirects.RedirectingResourceWithHeaders object at 0x7f09ee5d4c10>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestRedirects.test_redirect[asgi-DELETE-307 Temporary Redirect-/tmp/redirect] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = RedirectingResource()
>       app.add_route('/', resource)

tests/test_redirects.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a05bd1c0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52531c0>, 'CHECK...31c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52531c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method RedirectingResource.on_delete of <test_redirects.RedirectingResource object at 0x7f0af4049060>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestRedirects.test_redirect_with_headers[asgi-POST-302 Found-/found] _

asgi = True

    @pytest.fixture
    def client_exercising_headers(asgi):
        app = create_app(asgi)
    
        resource = RedirectingResourceWithHeaders()
>       app.add_route('/', resource)

tests/test_redirects.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a05bc890>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5252c20>, 'CHECK...2c20>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5252c20>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method RedirectingResourceWithHeaders.on_delete of <test_redirects.RedirectingResourceWithHeaders object at 0x7f09ee5d7250>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestRedirects.test_redirect[asgi-GET-301 Moved Permanently-/moved/perm] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = RedirectingResource()
>       app.add_route('/', resource)

tests/test_redirects.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a05be570>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0659a20>, 'CHECK...9a20>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0659a20>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method RedirectingResource.on_delete of <test_redirects.RedirectingResource object at 0x7f09a06b60b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__ ERROR at setup of TestRedirects.test_redirect[asgi-POST-302 Found-/found] ___

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = RedirectingResource()
>       app.add_route('/', resource)

tests/test_redirects.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a05b0040>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a065be20>, 'CHECK...be20>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a065be20>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method RedirectingResource.on_delete of <test_redirects.RedirectingResource object at 0x7f09ee5d4850>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestRedirects.test_redirect_with_headers[asgi-PUT-303 See Other-/see/other] _

asgi = True

    @pytest.fixture
    def client_exercising_headers(asgi):
        app = create_app(asgi)
    
        resource = RedirectingResourceWithHeaders()
>       app.add_route('/', resource)

tests/test_redirects.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a05b3c30>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0643130>, 'CHECK...3130>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0643130>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method RedirectingResourceWithHeaders.on_delete of <test_redirects.RedirectingResourceWithHeaders object at 0x7f0af404b700>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestRedirects.test_redirect[asgi-HEAD-308 Permanent Redirect-/perm/redirect] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = RedirectingResource()
>       app.add_route('/', resource)

tests/test_redirects.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af41bb370>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0641cf0>, 'CHECK...1cf0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0641cf0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method RedirectingResource.on_delete of <test_redirects.RedirectingResource object at 0x7f09a0550fa0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestRedirects.test_redirect_with_headers[asgi-GET-301 Moved Permanently-/moved/perm] _

asgi = True

    @pytest.fixture
    def client_exercising_headers(asgi):
        app = create_app(asgi)
    
        resource = RedirectingResourceWithHeaders()
>       app.add_route('/', resource)

tests/test_redirects.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af4145d20>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a06413f0>, 'CHECK...13f0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a06413f0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method RedirectingResourceWithHeaders.on_delete of <test_redirects.RedirectingResourceWithHeaders object at 0x7f09a06b0b80>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestRedirects.test_redirect[asgi-PUT-303 See Other-/see/other] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = RedirectingResource()
>       app.add_route('/', resource)

tests/test_redirects.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af4146960>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0642560>, 'CHECK...2560>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0642560>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method RedirectingResource.on_delete of <test_redirects.RedirectingResource object at 0x7f09ee5ad660>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestRedirects.test_redirect_with_headers[asgi-DELETE-307 Temporary Redirect-/tmp/redirect] _

asgi = True

    @pytest.fixture
    def client_exercising_headers(asgi):
        app = create_app(asgi)
    
        resource = RedirectingResourceWithHeaders()
>       app.add_route('/', resource)

tests/test_redirects.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a05e4190>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a065a320>, 'CHECK...a320>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a065a320>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method RedirectingResourceWithHeaders.on_delete of <test_redirects.RedirectingResourceWithHeaders object at 0x7f09a06b0c40>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________ ERROR at setup of TestHttpMethodRouting.test_report[asgi] ___________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        app.add_route('/stonewall', Stonewall())
    
        resource_things = ThingsResource()
>       app.add_route('/things', resource_things)

tests/test_http_method_routing.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a05e6570>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0659f30>, 'CHECK...9f30>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0659f30>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ThingsResource.on_get of <test_http_method_routing.ThingsResource object at 0x7f09ee56b700>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHttpMethodRouting.test_meta_and_others_disallowed[asgi-SETECASTRONOMY] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        app.add_route('/stonewall', Stonewall())
    
        resource_things = ThingsResource()
>       app.add_route('/things', resource_things)

tests/test_http_method_routing.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a05e6ea0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0658dc0>, 'CHECK...8dc0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0658dc0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ThingsResource.on_get of <test_http_method_routing.ThingsResource object at 0x7f09a05a6560>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHttpMethodRouting.test_meta_and_others_disallowed[asgi-WEBSOCKET] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        app.add_route('/stonewall', Stonewall())
    
        resource_things = ThingsResource()
>       app.add_route('/things', resource_things)

tests/test_http_method_routing.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a05e7990>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d2b00>, 'CHECK...2b00>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d2b00>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ThingsResource.on_get of <test_http_method_routing.ThingsResource object at 0x7f09ee6e2440>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____ ERROR at setup of TestHttpMethodRouting.test_default_on_options[asgi] _____

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        app.add_route('/stonewall', Stonewall())
    
        resource_things = ThingsResource()
>       app.add_route('/things', resource_things)

tests/test_http_method_routing.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a0574890>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0641000>, 'CHECK...1000>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0641000>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ThingsResource.on_get of <test_http_method_routing.ThingsResource object at 0x7f09a07af010>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ ERROR at setup of TestHttpMethodRouting.test_put[asgi] ____________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        app.add_route('/stonewall', Stonewall())
    
        resource_things = ThingsResource()
>       app.add_route('/things', resource_things)

tests/test_http_method_routing.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a0574dd0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a065ab00>, 'CHECK...ab00>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a065ab00>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ThingsResource.on_get of <test_http_method_routing.ThingsResource object at 0x7f09a05d6470>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____ ERROR at setup of TestHttpMethodRouting.test_post_not_allowed[asgi] ______

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        app.add_route('/stonewall', Stonewall())
    
        resource_things = ThingsResource()
>       app.add_route('/things', resource_things)

tests/test_http_method_routing.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a05e6dc0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52520e0>, 'CHECK...20e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52520e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ThingsResource.on_get of <test_http_method_routing.ThingsResource object at 0x7f09a05b5bd0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________ ERROR at setup of TestHttpMethodRouting.test_misc[asgi] ____________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        app.add_route('/stonewall', Stonewall())
    
        resource_things = ThingsResource()
>       app.add_route('/things', resource_things)

tests/test_http_method_routing.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a05749e0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5252170>, 'CHECK...2170>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5252170>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ThingsResource.on_get of <test_http_method_routing.ThingsResource object at 0x7f09ee5d5f90>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ ERROR at setup of TestHttpMethodRouting.test_get[asgi] ____________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        app.add_route('/stonewall', Stonewall())
    
        resource_things = ThingsResource()
>       app.add_route('/things', resource_things)

tests/test_http_method_routing.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af41452a0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5237eb0>, 'CHECK...7eb0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5237eb0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ThingsResource.on_get of <test_http_method_routing.ThingsResource object at 0x7f09a0b79ab0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ ERROR at setup of TestHttpMethodRouting.test_on_options[asgi] _________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        app.add_route('/stonewall', Stonewall())
    
        resource_things = ThingsResource()
>       app.add_route('/things', resource_things)

tests/test_http_method_routing.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a05765e0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d0ca0>, 'CHECK...0ca0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d0ca0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ThingsResource.on_get of <test_http_method_routing.ThingsResource object at 0x7f09a05e2fb0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHttpMethodRouting.test_method_not_allowed_with_param[asgi] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        app.add_route('/stonewall', Stonewall())
    
        resource_things = ThingsResource()
>       app.add_route('/things', resource_things)

tests/test_http_method_routing.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a05bf290>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5234f70>, 'CHECK...4f70>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5234f70>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ThingsResource.on_get of <test_http_method_routing.ThingsResource object at 0x7f09a06f25c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHttpMethodRouting.test_methods_not_allowed_simple[asgi] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        app.add_route('/stonewall', Stonewall())
    
        resource_things = ThingsResource()
>       app.add_route('/things', resource_things)

tests/test_http_method_routing.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a05bda80>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d17e0>, 'CHECK...17e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d17e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ThingsResource.on_get of <test_http_method_routing.ThingsResource object at 0x7f0af3e71360>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHttpMethodRouting.test_methods_not_allowed_complex[asgi] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        app.add_route('/stonewall', Stonewall())
    
        resource_things = ThingsResource()
>       app.add_route('/things', resource_things)

tests/test_http_method_routing.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a05bdd90>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d20e0>, 'CHECK...20e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d20e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ThingsResource.on_get of <test_http_method_routing.ThingsResource object at 0x7f0af3f31b10>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
=================================== FAILURES ===================================
___________________________ test_jsonchema_validator ___________________________

client = <falcon.testing.client.TestClient object at 0x7f09b53ef940>

    @pytest.mark.skipif(not pyximport, reason='Cython not installed')
    def test_jsonchema_validator(client):
        with disable_asgi_non_coroutine_wrapping():
            if CYTHON_COROUTINE_HINT:
>               client.app.add_route('/', _cythonized.TestResourceWithValidationNoHint())

tests/asgi/test_cythonized_asgi.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a0a42f80>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0f22170>, 'CHECK...2170>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0f22170>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestResourceWithValidationNoHint.on_get of <asgi._cythonized.TestResourceWithValidationNoHint object at 0x7f09a0a607f0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________________________ test_hooks __________________________________

client = <falcon.testing.client.TestClient object at 0x7f09b5438b80>

    @pytest.mark.skipif(not pyximport, reason='Cython not installed')
    def test_hooks(client):
        with disable_asgi_non_coroutine_wrapping():
            if CYTHON_COROUTINE_HINT:
>               client.app.add_route('/', _cythonized.TestResourceWithHooksNoHint())

tests/asgi/test_cythonized_asgi.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a0f72110>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0af3880>, 'CHECK...3880>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0af3880>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestResourceWithHooksNoHint.on_get of <asgi._cythonized.TestResourceWithHooksNoHint object at 0x7f09b54390c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ TestInspectApp.test_middleware_tree[asgi] ___________________

self = <test_inspect.TestInspectApp object at 0x7f09b59bab30>, asgi = True

    def test_middleware_tree(self, asgi):
>       mi = inspect.inspect_middleware(make_app_async() if asgi else make_app())

tests/test_inspect.py:233: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_inspect.py:46: in make_app_async
    app.add_sink(i_f.sinkFn, '/sink_fn')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.asgi.app.App object at 0x7f09a1b99f00>
sink = <function sinkFn at 0x7f09b5b7eb90>, prefix = '/sink_fn'

    def add_sink(self, sink: Callable, prefix: SinkPrefix = r'/'):
        if not iscoroutinefunction(sink) and is_python_func(sink):
            if _should_wrap_non_coroutines():
                sink = wrap_sync_to_async(sink)
            else:
>               raise CompatibilityError(
                    'The sink method must be an awaitable coroutine function '
                    'in order to be used safely with an ASGI app.'
                )
E               falcon.errors.CompatibilityError: The sink method must be an awaitable coroutine function in order to be used safely with an ASGI app.

falcon/asgi/app.py:740: CompatibilityError
___________________ TestInspectApp.test_error_handler[asgi] ____________________

self = <test_inspect.TestInspectApp object at 0x7f09b59ba6b0>, asgi = True

    @pytest.mark.skipif(sys.version_info < (3, 6), reason='dict order is not stable')
    def test_error_handler(self, asgi):
        errors = inspect.inspect_error_handlers(
>           make_app_async() if asgi else make_app()
        )

tests/test_inspect.py:175: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_inspect.py:46: in make_app_async
    app.add_sink(i_f.sinkFn, '/sink_fn')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.asgi.app.App object at 0x7f09a1b9a440>
sink = <function sinkFn at 0x7f09b5b7eb90>, prefix = '/sink_fn'

    def add_sink(self, sink: Callable, prefix: SinkPrefix = r'/'):
        if not iscoroutinefunction(sink) and is_python_func(sink):
            if _should_wrap_non_coroutines():
                sink = wrap_sync_to_async(sink)
            else:
>               raise CompatibilityError(
                    'The sink method must be an awaitable coroutine function '
                    'in order to be used safely with an ASGI app.'
                )
E               falcon.errors.CompatibilityError: The sink method must be an awaitable coroutine function in order to be used safely with an ASGI app.

falcon/asgi/app.py:740: CompatibilityError
_____________________ TestInspectApp.test_middleware[asgi] _____________________

self = <test_inspect.TestInspectApp object at 0x7f09b59ba8f0>, asgi = True

    def test_middleware(self, asgi):
>       mi = inspect.inspect_middleware(make_app_async() if asgi else make_app())

tests/test_inspect.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_inspect.py:46: in make_app_async
    app.add_sink(i_f.sinkFn, '/sink_fn')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.asgi.app.App object at 0x7f09a26c3940>
sink = <function sinkFn at 0x7f09b5b7eb90>, prefix = '/sink_fn'

    def add_sink(self, sink: Callable, prefix: SinkPrefix = r'/'):
        if not iscoroutinefunction(sink) and is_python_func(sink):
            if _should_wrap_non_coroutines():
                sink = wrap_sync_to_async(sink)
            else:
>               raise CompatibilityError(
                    'The sink method must be an awaitable coroutine function '
                    'in order to be used safely with an ASGI app.'
                )
E               falcon.errors.CompatibilityError: The sink method must be an awaitable coroutine function in order to be used safely with an ASGI app.

falcon/asgi/app.py:740: CompatibilityError
________________________ TestInspectApp.test_sink[asgi] ________________________

self = <test_inspect.TestInspectApp object at 0x7f09b59ba470>, asgi = True

    def test_sink(self, asgi):
>       sinks = inspect.inspect_sinks(make_app_async() if asgi else make_app())

tests/test_inspect.py:160: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_inspect.py:46: in make_app_async
    app.add_sink(i_f.sinkFn, '/sink_fn')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.asgi.app.App object at 0x7f09a26c2d40>
sink = <function sinkFn at 0x7f09b5b7eb90>, prefix = '/sink_fn'

    def add_sink(self, sink: Callable, prefix: SinkPrefix = r'/'):
        if not iscoroutinefunction(sink) and is_python_func(sink):
            if _should_wrap_non_coroutines():
                sink = wrap_sync_to_async(sink)
            else:
>               raise CompatibilityError(
                    'The sink method must be an awaitable coroutine function '
                    'in order to be used safely with an ASGI app.'
                )
E               falcon.errors.CompatibilityError: The sink method must be an awaitable coroutine function in order to be used safely with an ASGI app.

falcon/asgi/app.py:740: CompatibilityError
_______________________ TestInspectApp.test_routes[asgi] _______________________

self = <test_inspect.TestInspectApp object at 0x7f09b59b9a80>, asgi = True

    def test_routes(self, asgi):
>       routes = inspect.inspect_routes(make_app_async() if asgi else make_app())

tests/test_inspect.py:113: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_inspect.py:46: in make_app_async
    app.add_sink(i_f.sinkFn, '/sink_fn')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.asgi.app.App object at 0x7f09b4f6db40>
sink = <function sinkFn at 0x7f09b5b7eb90>, prefix = '/sink_fn'

    def add_sink(self, sink: Callable, prefix: SinkPrefix = r'/'):
        if not iscoroutinefunction(sink) and is_python_func(sink):
            if _should_wrap_non_coroutines():
                sink = wrap_sync_to_async(sink)
            else:
>               raise CompatibilityError(
                    'The sink method must be an awaitable coroutine function '
                    'in order to be used safely with an ASGI app.'
                )
E               falcon.errors.CompatibilityError: The sink method must be an awaitable coroutine function in order to be used safely with an ASGI app.

falcon/asgi/app.py:740: CompatibilityError
___________________ TestInspectApp.test_static_routes[asgi] ____________________

self = <test_inspect.TestInspectApp object at 0x7f09b59ba230>, asgi = True

    def test_static_routes(self, asgi):
>       routes = inspect.inspect_static_routes(make_app_async() if asgi else make_app())

tests/test_inspect.py:149: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_inspect.py:46: in make_app_async
    app.add_sink(i_f.sinkFn, '/sink_fn')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.asgi.app.App object at 0x7f09a1b99840>
sink = <function sinkFn at 0x7f09b5b7eb90>, prefix = '/sink_fn'

    def add_sink(self, sink: Callable, prefix: SinkPrefix = r'/'):
        if not iscoroutinefunction(sink) and is_python_func(sink):
            if _should_wrap_non_coroutines():
                sink = wrap_sync_to_async(sink)
            else:
>               raise CompatibilityError(
                    'The sink method must be an awaitable coroutine function '
                    'in order to be used safely with an ASGI app.'
                )
E               falcon.errors.CompatibilityError: The sink method must be an awaitable coroutine function in order to be used safely with an ASGI app.

falcon/asgi/app.py:740: CompatibilityError
________________________ TestInspectApp.test_app[asgi] _________________________

self = <test_inspect.TestInspectApp object at 0x7f09b59b9ae0>, asgi = True

    def test_app(self, asgi):
>       ai = inspect.inspect_app(make_app_async() if asgi else make_app())

tests/test_inspect.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_inspect.py:46: in make_app_async
    app.add_sink(i_f.sinkFn, '/sink_fn')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.asgi.app.App object at 0x7f09a1b99f00>
sink = <function sinkFn at 0x7f09b5b7eb90>, prefix = '/sink_fn'

    def add_sink(self, sink: Callable, prefix: SinkPrefix = r'/'):
        if not iscoroutinefunction(sink) and is_python_func(sink):
            if _should_wrap_non_coroutines():
                sink = wrap_sync_to_async(sink)
            else:
>               raise CompatibilityError(
                    'The sink method must be an awaitable coroutine function '
                    'in order to be used safely with an ASGI app.'
                )
E               falcon.errors.CompatibilityError: The sink method must be an awaitable coroutine function in order to be used safely with an ASGI app.

falcon/asgi/app.py:740: CompatibilityError
_________________ TestCythonized.test_stream_has_private_read __________________

self = <test_cython.TestCythonized object at 0x7f09b5e4d240>

    def test_stream_has_private_read(self):
        stream = falcon.util.BufferedReader(io.BytesIO().read, 8)
    
        if has_cython and falcon.util.IS_64_BITS:
>           assert not hasattr(stream, '_read')
E           AssertionError: assert not True
E            +  where True = hasattr(<falcon.util.reader.BufferedReader object at 0x7f09a0e87ee0>, '_read')

tests/test_cython.py:20: AssertionError
_________________ TestCythonized.test_imported_from_c_modules __________________

self = <test_cython.TestCythonized object at 0x7f09b5e4d0c0>

    @pytest.mark.skipif(not has_cython, reason='Cython not installed')
    def test_imported_from_c_modules(self):
>       assert 'falcon/app.py' not in str(falcon.app)
E       assert 'falcon/app.py' not in "<module 'fa...con/app.py'>"
E         'falcon/app.py' is contained here:
E           ts/falcon/falcon/app.py'>

tests/test_cython.py:14: AssertionError
____________ test_non_string_status[asgi-HTTPStatus.FORBIDDEN-403] _____________

custom_status_client = <function custom_status_client.<locals>.client at 0x7f09a0e01ab0>
status = <HTTPStatus.FORBIDDEN: 403>, expected_code = 403

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a0be71b0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a1a9d630>, 'CHECK...d630>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a1a9d630>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7f09a09e8ac0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________ test_non_string_status[asgi-HTTPStatus.ACCEPTED-202] _____________

custom_status_client = <function custom_status_client.<locals>.client at 0x7f09a0f217e0>
status = <HTTPStatus.ACCEPTED: 202>, expected_code = 202

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a078c7b0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0c80dc0>, 'CHECK...0dc0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0c80dc0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7f09b536f1f0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______________ test_non_string_status[asgi-HTTPStatus.OK-2000] ________________

custom_status_client = <function custom_status_client.<locals>.client at 0x7f09a0e03400>
status = <HTTPStatus.OK: 200>, expected_code = 200

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a078e5e0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0e508b0>, 'CHECK...08b0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0e508b0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7f09a0701720>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________________ test_non_string_status[asgi-702-702] _____________________

custom_status_client = <function custom_status_client.<locals>.client at 0x7f09a10cb490>
status = 702, expected_code = 702

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a078f1b0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0ccbac0>, 'CHECK...bac0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0ccbac0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7f09a0974c70>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ test_non_string_status[asgi-HTTPStatus.NOT_FOUND-404] _____________

custom_status_client = <function custom_status_client.<locals>.client at 0x7f09a1ad7d00>
status = <HTTPStatus.NOT_FOUND: 404>, expected_code = 404

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a078f3e0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0d67490>, 'CHECK...7490>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0d67490>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7f09c1c0f460>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________ test_non_string_status[asgi-HTTPStatus.NOT_IMPLEMENTED-501] __________

custom_status_client = <function custom_status_client.<locals>.client at 0x7f09a0d65bd0>
status = <HTTPStatus.NOT_IMPLEMENTED: 501>, expected_code = 501

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a078e260>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0cc8ee0>, 'CHECK...8ee0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0cc8ee0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7f09a1aae3e0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________________ test_non_string_status[asgi-307-307] _____________________

custom_status_client = <function custom_status_client.<locals>.client at 0x7f09a0e51900>
status = 307, expected_code = 307

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a07e8ba0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0e47010>, 'CHECK...7010>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0e47010>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7f09a0c10a90>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ test_non_string_status[asgi-702 Emacs-702] __________________

custom_status_client = <function custom_status_client.<locals>.client at 0x7f09a0c304c0>
status = b'702 Emacs', expected_code = 702

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a07e9d90>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0c320e0>, 'CHECK...20e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0c320e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7f09a092ac20>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________________ test_non_string_status[asgi-200 OK-200] ____________________

custom_status_client = <function custom_status_client.<locals>.client at 0x7f09a0e47ac0>
status = b'200 OK', expected_code = 200

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a07ea880>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0ccbc70>, 'CHECK...bc70>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0ccbc70>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7f09a094eb60>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________________ test_non_string_status[asgi-200-200] _____________________

custom_status_client = <function custom_status_client.<locals>.client at 0x7f09a0e457e0>
status = 200, expected_code = 200

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a07eb3e0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0f49d80>, 'CHECK...9d80>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0f49d80>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7f09a0903f10>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ test_non_string_status[asgi-HTTPStatus.INTERNAL_SERVER_ERROR-500] _______

custom_status_client = <function custom_status_client.<locals>.client at 0x7f09a0e47f40>
status = <HTTPStatus.INTERNAL_SERVER_ERROR: 500>, expected_code = 500

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a07eb610>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0cc9d80>, 'CHECK...9d80>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0cc9d80>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7f09a0bc05e0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________________ test_non_string_status[asgi-500-500] _____________________

custom_status_client = <function custom_status_client.<locals>.client at 0x7f09a0e45990>
status = 500, expected_code = 500

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a07eb1b0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0d67f40>, 'CHECK...7f40>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0d67f40>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7f09a0bb3a30>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ test_non_string_status[asgi-HTTPStatus.USE_PROXY-305] _____________

custom_status_client = <function custom_status_client.<locals>.client at 0x7f09a0e02440>
status = <HTTPStatus.USE_PROXY: 305>, expected_code = 305

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a07ea650>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0ccacb0>, 'CHECK...acb0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0ccacb0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7f09a0b9ddb0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______________ test_non_string_status[asgi-HTTPStatus.OK-2001] ________________

custom_status_client = <function custom_status_client.<locals>.client at 0x7f09a0e47eb0>
status = <HTTPStatus.OK: 200>, expected_code = 200

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a07e9690>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0c81990>, 'CHECK...1990>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0c81990>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7f09a0902c20>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________________ test_client_simulate_aliases[asgi-GET] ____________________

asgi = True, method = 'GET'

    @pytest.mark.parametrize(
        'method', ['DELETE', 'GET', 'HEAD', 'LOCK', 'OPTIONS', 'PATCH', 'POST', 'PUT']
    )
    def test_client_simulate_aliases(asgi, method):
        def capture_method(req, resp):
            resp.content_type = falcon.MEDIA_TEXT
            resp.text = req.method
    
        app = create_app(asgi)
>       app.add_sink(capture_method)

tests/test_testing.py:188: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.asgi.app.App object at 0x7f09a0c57880>
sink = <function test_client_simulate_aliases.<locals>.capture_method at 0x7f09a0e44280>
prefix = '/'

    def add_sink(self, sink: Callable, prefix: SinkPrefix = r'/'):
        if not iscoroutinefunction(sink) and is_python_func(sink):
            if _should_wrap_non_coroutines():
                sink = wrap_sync_to_async(sink)
            else:
>               raise CompatibilityError(
                    'The sink method must be an awaitable coroutine function '
                    'in order to be used safely with an ASGI app.'
                )
E               falcon.errors.CompatibilityError: The sink method must be an awaitable coroutine function in order to be used safely with an ASGI app.

falcon/asgi/app.py:740: CompatibilityError
___________________ test_client_simulate_aliases[asgi-HEAD] ____________________

asgi = True, method = 'HEAD'

    @pytest.mark.parametrize(
        'method', ['DELETE', 'GET', 'HEAD', 'LOCK', 'OPTIONS', 'PATCH', 'POST', 'PUT']
    )
    def test_client_simulate_aliases(asgi, method):
        def capture_method(req, resp):
            resp.content_type = falcon.MEDIA_TEXT
            resp.text = req.method
    
        app = create_app(asgi)
>       app.add_sink(capture_method)

tests/test_testing.py:188: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.asgi.app.App object at 0x7f09a0c574c0>
sink = <function test_client_simulate_aliases.<locals>.capture_method at 0x7f09a0e45510>
prefix = '/'

    def add_sink(self, sink: Callable, prefix: SinkPrefix = r'/'):
        if not iscoroutinefunction(sink) and is_python_func(sink):
            if _should_wrap_non_coroutines():
                sink = wrap_sync_to_async(sink)
            else:
>               raise CompatibilityError(
                    'The sink method must be an awaitable coroutine function '
                    'in order to be used safely with an ASGI app.'
                )
E               falcon.errors.CompatibilityError: The sink method must be an awaitable coroutine function in order to be used safely with an ASGI app.

falcon/asgi/app.py:740: CompatibilityError
____________________ test_client_simulate_aliases[asgi-PUT] ____________________

asgi = True, method = 'PUT'

    @pytest.mark.parametrize(
        'method', ['DELETE', 'GET', 'HEAD', 'LOCK', 'OPTIONS', 'PATCH', 'POST', 'PUT']
    )
    def test_client_simulate_aliases(asgi, method):
        def capture_method(req, resp):
            resp.content_type = falcon.MEDIA_TEXT
            resp.text = req.method
    
        app = create_app(asgi)
>       app.add_sink(capture_method)

tests/test_testing.py:188: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.asgi.app.App object at 0x7f09a0c57dc0>
sink = <function test_client_simulate_aliases.<locals>.capture_method at 0x7f09a0a944c0>
prefix = '/'

    def add_sink(self, sink: Callable, prefix: SinkPrefix = r'/'):
        if not iscoroutinefunction(sink) and is_python_func(sink):
            if _should_wrap_non_coroutines():
                sink = wrap_sync_to_async(sink)
            else:
>               raise CompatibilityError(
                    'The sink method must be an awaitable coroutine function '
                    'in order to be used safely with an ASGI app.'
                )
E               falcon.errors.CompatibilityError: The sink method must be an awaitable coroutine function in order to be used safely with an ASGI app.

falcon/asgi/app.py:740: CompatibilityError
__________________ test_client_simulate_aliases[asgi-OPTIONS] __________________

asgi = True, method = 'OPTIONS'

    @pytest.mark.parametrize(
        'method', ['DELETE', 'GET', 'HEAD', 'LOCK', 'OPTIONS', 'PATCH', 'POST', 'PUT']
    )
    def test_client_simulate_aliases(asgi, method):
        def capture_method(req, resp):
            resp.content_type = falcon.MEDIA_TEXT
            resp.text = req.method
    
        app = create_app(asgi)
>       app.add_sink(capture_method)

tests/test_testing.py:188: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.asgi.app.App object at 0x7f09a0c57c40>
sink = <function test_client_simulate_aliases.<locals>.capture_method at 0x7f09a0e46b90>
prefix = '/'

    def add_sink(self, sink: Callable, prefix: SinkPrefix = r'/'):
        if not iscoroutinefunction(sink) and is_python_func(sink):
            if _should_wrap_non_coroutines():
                sink = wrap_sync_to_async(sink)
            else:
>               raise CompatibilityError(
                    'The sink method must be an awaitable coroutine function '
                    'in order to be used safely with an ASGI app.'
                )
E               falcon.errors.CompatibilityError: The sink method must be an awaitable coroutine function in order to be used safely with an ASGI app.

falcon/asgi/app.py:740: CompatibilityError
___________________ test_client_simulate_aliases[asgi-PATCH] ___________________

asgi = True, method = 'PATCH'

    @pytest.mark.parametrize(
        'method', ['DELETE', 'GET', 'HEAD', 'LOCK', 'OPTIONS', 'PATCH', 'POST', 'PUT']
    )
    def test_client_simulate_aliases(asgi, method):
        def capture_method(req, resp):
            resp.content_type = falcon.MEDIA_TEXT
            resp.text = req.method
    
        app = create_app(asgi)
>       app.add_sink(capture_method)

tests/test_testing.py:188: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.asgi.app.App object at 0x7f09a1b9a080>
sink = <function test_client_simulate_aliases.<locals>.capture_method at 0x7f09a1ad4af0>
prefix = '/'

    def add_sink(self, sink: Callable, prefix: SinkPrefix = r'/'):
        if not iscoroutinefunction(sink) and is_python_func(sink):
            if _should_wrap_non_coroutines():
                sink = wrap_sync_to_async(sink)
            else:
>               raise CompatibilityError(
                    'The sink method must be an awaitable coroutine function '
                    'in order to be used safely with an ASGI app.'
                )
E               falcon.errors.CompatibilityError: The sink method must be an awaitable coroutine function in order to be used safely with an ASGI app.

falcon/asgi/app.py:740: CompatibilityError
___________________ test_client_simulate_aliases[asgi-LOCK] ____________________

asgi = True, method = 'LOCK'

    @pytest.mark.parametrize(
        'method', ['DELETE', 'GET', 'HEAD', 'LOCK', 'OPTIONS', 'PATCH', 'POST', 'PUT']
    )
    def test_client_simulate_aliases(asgi, method):
        def capture_method(req, resp):
            resp.content_type = falcon.MEDIA_TEXT
            resp.text = req.method
    
        app = create_app(asgi)
>       app.add_sink(capture_method)

tests/test_testing.py:188: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.asgi.app.App object at 0x7f09a0c574c0>
sink = <function test_client_simulate_aliases.<locals>.capture_method at 0x7f09a0d66320>
prefix = '/'

    def add_sink(self, sink: Callable, prefix: SinkPrefix = r'/'):
        if not iscoroutinefunction(sink) and is_python_func(sink):
            if _should_wrap_non_coroutines():
                sink = wrap_sync_to_async(sink)
            else:
>               raise CompatibilityError(
                    'The sink method must be an awaitable coroutine function '
                    'in order to be used safely with an ASGI app.'
                )
E               falcon.errors.CompatibilityError: The sink method must be an awaitable coroutine function in order to be used safely with an ASGI app.

falcon/asgi/app.py:740: CompatibilityError
__________________ test_client_simulate_aliases[asgi-DELETE] ___________________

asgi = True, method = 'DELETE'

    @pytest.mark.parametrize(
        'method', ['DELETE', 'GET', 'HEAD', 'LOCK', 'OPTIONS', 'PATCH', 'POST', 'PUT']
    )
    def test_client_simulate_aliases(asgi, method):
        def capture_method(req, resp):
            resp.content_type = falcon.MEDIA_TEXT
            resp.text = req.method
    
        app = create_app(asgi)
>       app.add_sink(capture_method)

tests/test_testing.py:188: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.asgi.app.App object at 0x7f09a0921000>
sink = <function test_client_simulate_aliases.<locals>.capture_method at 0x7f09a0f22d40>
prefix = '/'

    def add_sink(self, sink: Callable, prefix: SinkPrefix = r'/'):
        if not iscoroutinefunction(sink) and is_python_func(sink):
            if _should_wrap_non_coroutines():
                sink = wrap_sync_to_async(sink)
            else:
>               raise CompatibilityError(
                    'The sink method must be an awaitable coroutine function '
                    'in order to be used safely with an ASGI app.'
                )
E               falcon.errors.CompatibilityError: The sink method must be an awaitable coroutine function in order to be used safely with an ASGI app.

falcon/asgi/app.py:740: CompatibilityError
___________________ test_client_simulate_aliases[asgi-POST] ____________________

asgi = True, method = 'POST'

    @pytest.mark.parametrize(
        'method', ['DELETE', 'GET', 'HEAD', 'LOCK', 'OPTIONS', 'PATCH', 'POST', 'PUT']
    )
    def test_client_simulate_aliases(asgi, method):
        def capture_method(req, resp):
            resp.content_type = falcon.MEDIA_TEXT
            resp.text = req.method
    
        app = create_app(asgi)
>       app.add_sink(capture_method)

tests/test_testing.py:188: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.asgi.app.App object at 0x7f09a0c574c0>
sink = <function test_client_simulate_aliases.<locals>.capture_method at 0x7f09a0e52b90>
prefix = '/'

    def add_sink(self, sink: Callable, prefix: SinkPrefix = r'/'):
        if not iscoroutinefunction(sink) and is_python_func(sink):
            if _should_wrap_non_coroutines():
                sink = wrap_sync_to_async(sink)
            else:
>               raise CompatibilityError(
                    'The sink method must be an awaitable coroutine function '
                    'in order to be used safely with an ASGI app.'
                )
E               falcon.errors.CompatibilityError: The sink method must be an awaitable coroutine function in order to be used safely with an ASGI app.

falcon/asgi/app.py:740: CompatibilityError
__________ TestHeaders.test_unicode_headers_contain_only_ascii[asgi] ___________

self = <test_headers.TestHeaders object at 0x7f09b5c4c070>
client = <falcon.testing.client.TestClient object at 0x7f09a0befbb0>

    def test_unicode_headers_contain_only_ascii(self, client):
>       client.app.add_route('/', UnicodeHeaderResource())

tests/test_headers.py:698: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a0795af0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0b551b0>, 'CHECK...5d0>>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0b551b0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method UnicodeHeaderResource.on_connect of <test_headers.UnicodeHeaderResource object at 0x7f09a09b55d0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ TestHeaders.test_append_link_with_link_extension[asgi] ____________

self = <test_headers.TestHeaders object at 0x7f09b5c8c4c0>
client = <falcon.testing.client.TestClient object at 0x7f09a0bc3490>

    def test_append_link_with_link_extension(self, client):
        expected_value = '</related/thing>; rel=item; sizes=72x72'
    
        resource = LinkHeaderResource()
        resource.append_link(
            '/related/thing', 'item', link_extension=[('sizes', '72x72')]
        )
    
>       self._check_link_header(client, resource, expected_value)

tests/test_headers.py:1014: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1060: in _check_link_header
    self._check_header(client, resource, 'Link', expected_value)
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a0797d10>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0b56a70>, 'CHECK...6a70>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0b56a70>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method LinkHeaderResource.on_get of <test_headers.LinkHeaderResource object at 0x7f09a0bc3310>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_content_disposition_inline_header[asgi-report.csv-inline; filename="report.csv"] _

self = <test_headers.TestHeaders object at 0x7f09b5c03a00>
client = <falcon.testing.client.TestClient object at 0x7f09a0b9e6b0>
filename = 'report.csv', expected = 'inline; filename="report.csv"'

    @pytest.mark.parametrize(
        'filename,expected',
        [
            ('report.csv', 'inline; filename="report.csv"'),
            ('Hello World.txt', 'inline; filename="Hello World.txt"'),
            (
                'Bold Digit 𝟏.txt',
                'inline; filename=Bold_Digit_1.txt; '
                "filename*=UTF-8''Bold%20Digit%20%F0%9D%9F%8F.txt",
            ),
        ],
    )
    def test_content_disposition_inline_header(self, client, filename, expected):
        resource = ViewableResource(filename)
>       client.app.add_route('/', resource)

tests/test_headers.py:642: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a0778900>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0b572e0>, 'CHECK...72e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0b572e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ViewableResource.on_get of <test_headers.ViewableResource object at 0x7f09a0b9e890>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_append_link_crossorigin[asgi-Use-Credentials-</related/thing>; rel=alternate; crossorigin="use-credentials"] _

self = <test_headers.TestHeaders object at 0x7f09b5c4fc70>
client = <falcon.testing.client.TestClient object at 0x7f09a092bf40>
crossorigin = 'Use-Credentials'
expected_value = '</related/thing>; rel=alternate; crossorigin="use-credentials"'

    @pytest.mark.parametrize(
        'crossorigin,expected_value',
        [
            (None, '</related/thing>; rel=alternate'),
            ('anonymous', '</related/thing>; rel=alternate; crossorigin'),
            ('Anonymous', '</related/thing>; rel=alternate; crossorigin'),
            ('AnOnYmOUs', '</related/thing>; rel=alternate; crossorigin'),
            (
                'Use-Credentials',
                '</related/thing>; rel=alternate; crossorigin="use-credentials"',
            ),
            (
                'use-credentials',
                '</related/thing>; rel=alternate; crossorigin="use-credentials"',
            ),
        ],
    )
    def test_append_link_crossorigin(self, client, crossorigin, expected_value):
        resource = LinkHeaderResource()
        resource.append_link('/related/thing', 'alternate', crossorigin=crossorigin)
    
>       self._check_link_header(client, resource, expected_value)

tests/test_headers.py:987: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1060: in _check_link_header
    self._check_header(client, resource, 'Link', expected_value)
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a0778eb0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0a94700>, 'CHECK...4700>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0a94700>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method LinkHeaderResource.on_get of <test_headers.LinkHeaderResource object at 0x7f09a092b040>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______________ TestHeaders.test_response_set_and_get_header[asgi] ______________

self = <test_headers.TestHeaders object at 0x7f09b5c4ca30>
client = <falcon.testing.client.TestClient object at 0x7f09b536f670>

    def test_response_set_and_get_header(self, client):
        resource = HeaderHelpersResource()
>       client.app.add_route('/', resource)

tests/test_headers.py:745: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a0779230>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0d66c20>, 'CHECK...6c20>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0d66c20>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method HeaderHelpersResource.on_get of <test_headers.HeaderHelpersResource object at 0x7f09a0838130>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________ TestHeaders.test_no_content_length[asgi-304 Not Modified] ___________

self = <test_headers.TestHeaders object at 0x7f09b5c01d80>
client = <falcon.testing.client.TestClient object at 0x7f09b53edbd0>
status = '304 Not Modified'

    @pytest.mark.parametrize('status', (falcon.HTTP_204, falcon.HTTP_304))
    def test_no_content_length(self, client, status):
>       client.app.add_route('/xxx', testing.SimpleTestResource(status=status))

tests/test_headers.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a07798c0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a10c8940>, 'CHECK...8940>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a10c8940>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f09a0777070>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________________ TestHeaders.test_get_header_as_int[asgi] ___________________

self = <test_headers.TestHeaders object at 0x7f09b5c00df0>
client = <falcon.testing.client.TestClient object at 0x7f09b560b580>

    def test_get_header_as_int(self, client):
        resource = testing.SimpleTestResource(body=SAMPLE_BODY)
>       client.app.add_route('/', resource)

tests/test_headers.py:370: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a077b4c0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0c83ac0>, 'CHECK...3ac0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0c83ac0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f09a09deb30>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_content_disposition_attachment_header[asgi-one,two.txt-attachment; filename="one,two.txt"] _

self = <test_headers.TestHeaders object at 0x7f09b5c01030>
client = <falcon.testing.client.TestClient object at 0x7f09a0b95240>
filename = 'one,two.txt', expected = 'attachment; filename="one,two.txt"'

    @pytest.mark.parametrize(
        'filename,expected',
        [
            ('report.csv', 'attachment; filename="report.csv"'),
            ('Hello World.txt', 'attachment; filename="Hello World.txt"'),
            (
                'Bold Digit 𝟏.txt',
                'attachment; filename=Bold_Digit_1.txt; '
                "filename*=UTF-8''Bold%20Digit%20%F0%9D%9F%8F.txt",
            ),
            (
                'Ångström unit.txt',
                'attachment; filename=A_ngstro_m_unit.txt; '
                "filename*=UTF-8''%C3%85ngstr%C3%B6m%20unit.txt",
            ),
            ('one,two.txt', 'attachment; filename="one,two.txt"'),
            (
                '½,²⁄₂.txt',
                'attachment; filename=1_2_2_2.txt; '
                "filename*=UTF-8''%C2%BD%2C%C2%B2%E2%81%84%E2%82%82.txt",
            ),
            ('[foo] @ bar.txt', 'attachment; filename="[foo] @ bar.txt"'),
            (
                '[fòó]@bàr,bäz.txt',
                'attachment; filename=_fo_o___ba_r_ba_z.txt; '
                "filename*=UTF-8''%5Bf%C3%B2%C3%B3%5D%40b%C3%A0r%2Cb%C3%A4z.txt",
            ),
        ],
    )
    def test_content_disposition_attachment_header(self, client, filename, expected):
        resource = DownloadableResource(filename)
>       client.app.add_route('/', resource)

tests/test_headers.py:622: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a096a810>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0f49cf0>, 'CHECK...9cf0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0f49cf0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method DownloadableResource.on_get of <test_headers.DownloadableResource object at 0x7f09a0b949a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_content_disposition_attachment_header[asgi-report.csv-attachment; filename="report.csv"] _

self = <test_headers.TestHeaders object at 0x7f09b5c03130>
client = <falcon.testing.client.TestClient object at 0x7f09a09c51e0>
filename = 'report.csv', expected = 'attachment; filename="report.csv"'

    @pytest.mark.parametrize(
        'filename,expected',
        [
            ('report.csv', 'attachment; filename="report.csv"'),
            ('Hello World.txt', 'attachment; filename="Hello World.txt"'),
            (
                'Bold Digit 𝟏.txt',
                'attachment; filename=Bold_Digit_1.txt; '
                "filename*=UTF-8''Bold%20Digit%20%F0%9D%9F%8F.txt",
            ),
            (
                'Ångström unit.txt',
                'attachment; filename=A_ngstro_m_unit.txt; '
                "filename*=UTF-8''%C3%85ngstr%C3%B6m%20unit.txt",
            ),
            ('one,two.txt', 'attachment; filename="one,two.txt"'),
            (
                '½,²⁄₂.txt',
                'attachment; filename=1_2_2_2.txt; '
                "filename*=UTF-8''%C2%BD%2C%C2%B2%E2%81%84%E2%82%82.txt",
            ),
            ('[foo] @ bar.txt', 'attachment; filename="[foo] @ bar.txt"'),
            (
                '[fòó]@bàr,bäz.txt',
                'attachment; filename=_fo_o___ba_r_ba_z.txt; '
                "filename*=UTF-8''%5Bf%C3%B2%C3%B3%5D%40b%C3%A0r%2Cb%C3%A4z.txt",
            ),
        ],
    )
    def test_content_disposition_attachment_header(self, client, filename, expected):
        resource = DownloadableResource(filename)
>       client.app.add_route('/', resource)

tests/test_headers.py:622: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a078dd90>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0e44d30>, 'CHECK...4d30>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0e44d30>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method DownloadableResource.on_get of <test_headers.DownloadableResource object at 0x7f09b51b1780>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___ TestHeaders.test_declared_content_length_overriden_by_data_length[asgi] ____

self = <test_headers.TestHeaders object at 0x7f09b5c007f0>
client = <falcon.testing.client.TestClient object at 0x7f09a0b9f910>

    def test_declared_content_length_overriden_by_data_length(self, client):
        data = SAMPLE_BODY.encode()
    
        resource = ContentLengthHeaderResource(42, data=data)
>       client.app.add_route('/', resource)

tests/test_headers.py:356: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a078c5f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0e457e0>, 'CHECK...57e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0e457e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ContentLengthHeaderResource.on_get of <test_headers.ContentLengthHeaderResource object at 0x7f09a0b9dae0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ TestHeaders.test_unset_header[asgi-False] ___________________

self = <test_headers.TestHeaders object at 0x7f09b5c01750>
client = <falcon.testing.client.TestClient object at 0x7f09a05123b0>
with_double_quotes = False

    @pytest.mark.parametrize('with_double_quotes', [True, False])
    def test_unset_header(self, client, with_double_quotes):
>       client.app.add_route('/', RemoveHeaderResource(with_double_quotes))

tests/test_headers.py:414: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a07ead50>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0cca950>, 'CHECK...a950>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0cca950>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method RemoveHeaderResource.on_get of <test_headers.RemoveHeaderResource object at 0x7f09a0512170>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ TestHeaders.test_unicode_headers_contain_non_ascii[asgi-POST] _________

self = <test_headers.TestHeaders object at 0x7f09b5c4c580>, method = 'POST'
client = <falcon.testing.client.TestClient object at 0x7f09a061cd60>

    @pytest.mark.parametrize('method', ['CONNECT', 'PATCH', 'POST', 'PUT'])
    def test_unicode_headers_contain_non_ascii(self, method, client):
        app = client.app
>       app.add_route('/', UnicodeHeaderResource())

tests/test_headers.py:709: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a07eac00>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0e01510>, 'CHECK...910>>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0e01510>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method UnicodeHeaderResource.on_connect of <test_headers.UnicodeHeaderResource object at 0x7f09a061f910>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_append_link_crossorigin[asgi-Anonymous-</related/thing>; rel=alternate; crossorigin] _

self = <test_headers.TestHeaders object at 0x7f09b5c4fb50>
client = <falcon.testing.client.TestClient object at 0x7f09a1aaccd0>
crossorigin = 'Anonymous'
expected_value = '</related/thing>; rel=alternate; crossorigin'

    @pytest.mark.parametrize(
        'crossorigin,expected_value',
        [
            (None, '</related/thing>; rel=alternate'),
            ('anonymous', '</related/thing>; rel=alternate; crossorigin'),
            ('Anonymous', '</related/thing>; rel=alternate; crossorigin'),
            ('AnOnYmOUs', '</related/thing>; rel=alternate; crossorigin'),
            (
                'Use-Credentials',
                '</related/thing>; rel=alternate; crossorigin="use-credentials"',
            ),
            (
                'use-credentials',
                '</related/thing>; rel=alternate; crossorigin="use-credentials"',
            ),
        ],
    )
    def test_append_link_crossorigin(self, client, crossorigin, expected_value):
        resource = LinkHeaderResource()
        resource.append_link('/related/thing', 'alternate', crossorigin=crossorigin)
    
>       self._check_link_header(client, resource, expected_value)

tests/test_headers.py:987: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1060: in _check_link_header
    self._check_header(client, resource, 'Link', expected_value)
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a07ea500>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0e51cf0>, 'CHECK...1cf0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0e51cf0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method LinkHeaderResource.on_get of <test_headers.LinkHeaderResource object at 0x7f09a1aadd20>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______________ TestHeaders.test_append_link_with_type_hint[asgi] _______________

self = <test_headers.TestHeaders object at 0x7f09b5c4f130>
client = <falcon.testing.client.TestClient object at 0x7f09a0bcd0f0>

    def test_append_link_with_type_hint(self, client):
        expected_value = (
            '</related/thing>; rel=alternate; type="video/mp4; codecs=avc1.640028"'
        )
    
        resource = LinkHeaderResource()
        resource.append_link(
            '/related/thing', 'alternate', type_hint='video/mp4; codecs=avc1.640028'
        )
    
>       self._check_link_header(client, resource, expected_value)

tests/test_headers.py:943: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1060: in _check_link_header
    self._check_header(client, resource, 'Link', expected_value)
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a0797b50>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a10c89d0>, 'CHECK...89d0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a10c89d0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method LinkHeaderResource.on_get of <test_headers.LinkHeaderResource object at 0x7f09a0b780a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_content_disposition_attachment_header[asgi-\xbd,\xb2\u2044\u2082.txt-attachment; filename=1_2_2_2.txt; filename*=UTF-8''%C2%BD%2C%C2%B2%E2%81%84%E2%82%82.txt] _

self = <test_headers.TestHeaders object at 0x7f09b5c031c0>
client = <falcon.testing.client.TestClient object at 0x7f09a0953fa0>
filename = '½,²⁄₂.txt'
expected = "attachment; filename=1_2_2_2.txt; filename*=UTF-8''%C2%BD%2C%C2%B2%E2%81%84%E2%82%82.txt"

    @pytest.mark.parametrize(
        'filename,expected',
        [
            ('report.csv', 'attachment; filename="report.csv"'),
            ('Hello World.txt', 'attachment; filename="Hello World.txt"'),
            (
                'Bold Digit 𝟏.txt',
                'attachment; filename=Bold_Digit_1.txt; '
                "filename*=UTF-8''Bold%20Digit%20%F0%9D%9F%8F.txt",
            ),
            (
                'Ångström unit.txt',
                'attachment; filename=A_ngstro_m_unit.txt; '
                "filename*=UTF-8''%C3%85ngstr%C3%B6m%20unit.txt",
            ),
            ('one,two.txt', 'attachment; filename="one,two.txt"'),
            (
                '½,²⁄₂.txt',
                'attachment; filename=1_2_2_2.txt; '
                "filename*=UTF-8''%C2%BD%2C%C2%B2%E2%81%84%E2%82%82.txt",
            ),
            ('[foo] @ bar.txt', 'attachment; filename="[foo] @ bar.txt"'),
            (
                '[fòó]@bàr,bäz.txt',
                'attachment; filename=_fo_o___ba_r_ba_z.txt; '
                "filename*=UTF-8''%5Bf%C3%B2%C3%B3%5D%40b%C3%A0r%2Cb%C3%A4z.txt",
            ),
        ],
    )
    def test_content_disposition_attachment_header(self, client, filename, expected):
        resource = DownloadableResource(filename)
>       client.app.add_route('/', resource)

tests/test_headers.py:622: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a07940b0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0c81990>, 'CHECK...1990>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0c81990>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method DownloadableResource.on_get of <test_headers.DownloadableResource object at 0x7f09a0952830>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______ TestHeaders.test_unicode_headers_contain_non_ascii[asgi-CONNECT] _______

self = <test_headers.TestHeaders object at 0x7f09b5c03d60>, method = 'CONNECT'
client = <falcon.testing.client.TestClient object at 0x7f09a092a8c0>

    @pytest.mark.parametrize('method', ['CONNECT', 'PATCH', 'POST', 'PUT'])
    def test_unicode_headers_contain_non_ascii(self, method, client):
        app = client.app
>       app.add_route('/', UnicodeHeaderResource())

tests/test_headers.py:709: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a0797d80>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0c82290>, 'CHECK...930>>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0c82290>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method UnicodeHeaderResource.on_connect of <test_headers.UnicodeHeaderResource object at 0x7f09a0929930>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________________ TestHeaders.test_headers_as_list[asgi] ____________________

self = <test_headers.TestHeaders object at 0x7f09b5c00e20>
client = <falcon.testing.client.TestClient object at 0x7f09b51b36a0>

    def test_headers_as_list(self, client):
        headers = [
            ('Client-ID', '692ba466-74bb-11e3-bf3f-7567c531c7ca'),
            ('Accept', 'audio/*; q=0.2, audio/basic'),
        ]
    
        # Unit test
        environ = testing.create_environ(headers=headers)
        req = falcon.Request(environ)
    
        for name, value in headers:
            assert (name.upper(), value) in req.headers.items()
            assert (name.lower(), value) in req.headers_lower.items()
    
        # Functional test
>       client.app.add_route('/', testing.SimpleTestResource(headers=headers))

tests/test_headers.py:487: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a07958c0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0ccacb0>, 'CHECK...acb0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0ccacb0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f09a0b46710>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________________ TestHeaders.test_required_header[asgi] ____________________

self = <test_headers.TestHeaders object at 0x7f09b5c01720>
client = <falcon.testing.client.TestClient object at 0x7f09b536d120>

    def test_required_header(self, client):
        resource = testing.SimpleTestResource(body=SAMPLE_BODY)
>       client.app.add_route('/', resource)

tests/test_headers.py:422: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a078c740>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0b54f70>, 'CHECK...4f70>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0b54f70>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f09b536d780>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ TestHeaders.test_append_link_complex[asgi] __________________

self = <test_headers.TestHeaders object at 0x7f09b5c4f3a0>
client = <falcon.testing.client.TestClient object at 0x7f09a092ace0>

    def test_append_link_complex(self, client):
        expected_value = (
            '</related/thing>; rel=alternate; '
            'title="A related thing"; '
            "title*=UTF-8'en'A%20%C3%A7runchy%20thing; "
            'type="application/json"; '
            'hreflang=en-GB; hreflang=de'
        )
    
        resource = LinkHeaderResource()
        resource.append_link(
            '/related/thing',
            'alternate',
            title='A related thing',
            hreflang=('en-GB', 'de'),
            type_hint='application/json',
            title_star=('en', 'A \u00e7runchy thing'),
        )
    
>       self._check_link_header(client, resource, expected_value)

tests/test_headers.py:964: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1060: in _check_link_header
    self._check_header(client, resource, 'Link', expected_value)
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a077a960>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0de6710>, 'CHECK...6710>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0de6710>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method LinkHeaderResource.on_get of <test_headers.LinkHeaderResource object at 0x7f09a0aa47c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_append_link_crossorigin[asgi-AnOnYmOUs-</related/thing>; rel=alternate; crossorigin] _

self = <test_headers.TestHeaders object at 0x7f09b5c4fbe0>
client = <falcon.testing.client.TestClient object at 0x7f09a0bb0820>
crossorigin = 'AnOnYmOUs'
expected_value = '</related/thing>; rel=alternate; crossorigin'

    @pytest.mark.parametrize(
        'crossorigin,expected_value',
        [
            (None, '</related/thing>; rel=alternate'),
            ('anonymous', '</related/thing>; rel=alternate; crossorigin'),
            ('Anonymous', '</related/thing>; rel=alternate; crossorigin'),
            ('AnOnYmOUs', '</related/thing>; rel=alternate; crossorigin'),
            (
                'Use-Credentials',
                '</related/thing>; rel=alternate; crossorigin="use-credentials"',
            ),
            (
                'use-credentials',
                '</related/thing>; rel=alternate; crossorigin="use-credentials"',
            ),
        ],
    )
    def test_append_link_crossorigin(self, client, crossorigin, expected_value):
        resource = LinkHeaderResource()
        resource.append_link('/related/thing', 'alternate', crossorigin=crossorigin)
    
>       self._check_link_header(client, resource, expected_value)

tests/test_headers.py:987: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1060: in _check_link_header
    self._check_header(client, resource, 'Link', expected_value)
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a0778040>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0f4a290>, 'CHECK...a290>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0f4a290>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method LinkHeaderResource.on_get of <test_headers.LinkHeaderResource object at 0x7f09a0bb1420>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_content_disposition_attachment_header[asgi-\xc5ngstr\xf6m unit.txt-attachment; filename=A_ngstro_m_unit.txt; filename*=UTF-8''%C3%85ngstr%C3%B6m%20unit.txt] _

self = <test_headers.TestHeaders object at 0x7f09b5c021a0>
client = <falcon.testing.client.TestClient object at 0x7f09a069d8a0>
filename = 'Ångström unit.txt'
expected = "attachment; filename=A_ngstro_m_unit.txt; filename*=UTF-8''%C3%85ngstr%C3%B6m%20unit.txt"

    @pytest.mark.parametrize(
        'filename,expected',
        [
            ('report.csv', 'attachment; filename="report.csv"'),
            ('Hello World.txt', 'attachment; filename="Hello World.txt"'),
            (
                'Bold Digit 𝟏.txt',
                'attachment; filename=Bold_Digit_1.txt; '
                "filename*=UTF-8''Bold%20Digit%20%F0%9D%9F%8F.txt",
            ),
            (
                'Ångström unit.txt',
                'attachment; filename=A_ngstro_m_unit.txt; '
                "filename*=UTF-8''%C3%85ngstr%C3%B6m%20unit.txt",
            ),
            ('one,two.txt', 'attachment; filename="one,two.txt"'),
            (
                '½,²⁄₂.txt',
                'attachment; filename=1_2_2_2.txt; '
                "filename*=UTF-8''%C2%BD%2C%C2%B2%E2%81%84%E2%82%82.txt",
            ),
            ('[foo] @ bar.txt', 'attachment; filename="[foo] @ bar.txt"'),
            (
                '[fòó]@bàr,bäz.txt',
                'attachment; filename=_fo_o___ba_r_ba_z.txt; '
                "filename*=UTF-8''%5Bf%C3%B2%C3%B3%5D%40b%C3%A0r%2Cb%C3%A4z.txt",
            ),
        ],
    )
    def test_content_disposition_attachment_header(self, client, filename, expected):
        resource = DownloadableResource(filename)
>       client.app.add_route('/', resource)

tests/test_headers.py:622: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a077b370>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0e51ea0>, 'CHECK...1ea0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0e51ea0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method DownloadableResource.on_get of <test_headers.DownloadableResource object at 0x7f09a069f9d0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ TestHeaders.test_append_link_with_anchor[asgi] ________________

self = <test_headers.TestHeaders object at 0x7f09b5c4ec80>
client = <falcon.testing.client.TestClient object at 0x7f09a0c29420>

    def test_append_link_with_anchor(self, client):
        expected_value = '</related/thing>; rel=item; anchor="/some%20thing/or-other"'
    
        resource = LinkHeaderResource()
        resource.append_link('/related/thing', 'item', anchor='/some thing/or-other')
    
>       self._check_link_header(client, resource, expected_value)

tests/test_headers.py:915: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1060: in _check_link_header
    self._check_header(client, resource, 'Link', expected_value)
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a0796c70>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0e46b90>, 'CHECK...6b90>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0e46b90>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method LinkHeaderResource.on_get of <test_headers.LinkHeaderResource object at 0x7f09b5e97c10>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____ TestHeaders.test_override_default_media_type_missing_encoding[True] ______

self = <test_headers.TestHeaders object at 0x7f09b5c02bf0>, asgi = True
client = <falcon.testing.client.TestClient object at 0x7f09a0b956c0>

    @pytest.mark.parametrize('asgi', [True, False])
    def test_override_default_media_type_missing_encoding(self, asgi, client):
        body = '{"msg": "Hello Unicode! \U0001F638"}'
    
        client.app = create_app(asgi=asgi, media_type='application/json')
>       client.app.add_route('/', testing.SimpleTestResource(body=body))

tests/test_headers.py:520: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a0794ac0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0ccbc70>, 'CHECK...bc70>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0ccbc70>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f09a0b94040>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________________ TestHeaders.test_content_type_no_body[asgi] __________________

self = <test_headers.TestHeaders object at 0x7f09b5c4ca00>
client = <falcon.testing.client.TestClient object at 0x7f09a06ea080>

    def test_content_type_no_body(self, client):
>       client.app.add_route('/', testing.SimpleTestResource())

tests/test_headers.py:832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a07eaf10>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0cca950>, 'CHECK...a950>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0cca950>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f09a06ea110>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ TestHeaders.test_headers_with_custom_class_not_callable[asgi] _________

self = <test_headers.TestHeaders object at 0x7f09b5c8c940>
client = <falcon.testing.client.TestClient object at 0x7f09a09dd5a0>

    def test_headers_with_custom_class_not_callable(self, client):
>       client.app.add_route('/', CustomHeadersResource())

tests/test_headers.py:1031: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a07eb140>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0b54940>, 'CHECK...4940>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0b54940>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CustomHeadersResource.on_get of <test_headers.CustomHeadersResource object at 0x7f09a09dca60>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_content_disposition_inline_header[asgi-Hello World.txt-inline; filename="Hello World.txt"] _

self = <test_headers.TestHeaders object at 0x7f09b5c03a90>
client = <falcon.testing.client.TestClient object at 0x7f09a0976140>
filename = 'Hello World.txt', expected = 'inline; filename="Hello World.txt"'

    @pytest.mark.parametrize(
        'filename,expected',
        [
            ('report.csv', 'inline; filename="report.csv"'),
            ('Hello World.txt', 'inline; filename="Hello World.txt"'),
            (
                'Bold Digit 𝟏.txt',
                'inline; filename=Bold_Digit_1.txt; '
                "filename*=UTF-8''Bold%20Digit%20%F0%9D%9F%8F.txt",
            ),
        ],
    )
    def test_content_disposition_inline_header(self, client, filename, expected):
        resource = ViewableResource(filename)
>       client.app.add_route('/', resource)

tests/test_headers.py:642: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a078fdf0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0b55360>, 'CHECK...5360>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0b55360>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ViewableResource.on_get of <test_headers.ViewableResource object at 0x7f09a0975510>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ TestHeaders.test_append_link_single[asgi] ___________________

self = <test_headers.TestHeaders object at 0x7f09b5c4e2f0>
client = <falcon.testing.client.TestClient object at 0x7f09a0b9a5f0>

    def test_append_link_single(self, client):
        expected_value = '</things/2842>; rel=next'
    
        resource = LinkHeaderResource()
        resource.append_link('/things/2842', 'next')
    
>       self._check_link_header(client, resource, expected_value)

tests/test_headers.py:858: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1060: in _check_link_header
    self._check_header(client, resource, 'Link', expected_value)
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a06c4270>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0c829e0>, 'CHECK...29e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0c829e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method LinkHeaderResource.on_get of <test_headers.LinkHeaderResource object at 0x7f09a0b9ad10>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________ TestHeaders.test_unicode_headers_contain_non_ascii[asgi-PUT] _________

self = <test_headers.TestHeaders object at 0x7f09b5c4c280>, method = 'PUT'
client = <falcon.testing.client.TestClient object at 0x7f09a0614850>

    @pytest.mark.parametrize('method', ['CONNECT', 'PATCH', 'POST', 'PUT'])
    def test_unicode_headers_contain_non_ascii(self, method, client):
        app = client.app
>       app.add_route('/', UnicodeHeaderResource())

tests/test_headers.py:709: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a06c68f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0de7640>, 'CHECK...610>>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0de7640>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method UnicodeHeaderResource.on_connect of <test_headers.UnicodeHeaderResource object at 0x7f09a0617610>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_content_disposition_attachment_header[asgi-[foo] @ bar.txt-attachment; filename="[foo] @ bar.txt"] _

self = <test_headers.TestHeaders object at 0x7f09b5c03280>
client = <falcon.testing.client.TestClient object at 0x7f09a0beefe0>
filename = '[foo] @ bar.txt'
expected = 'attachment; filename="[foo] @ bar.txt"'

    @pytest.mark.parametrize(
        'filename,expected',
        [
            ('report.csv', 'attachment; filename="report.csv"'),
            ('Hello World.txt', 'attachment; filename="Hello World.txt"'),
            (
                'Bold Digit 𝟏.txt',
                'attachment; filename=Bold_Digit_1.txt; '
                "filename*=UTF-8''Bold%20Digit%20%F0%9D%9F%8F.txt",
            ),
            (
                'Ångström unit.txt',
                'attachment; filename=A_ngstro_m_unit.txt; '
                "filename*=UTF-8''%C3%85ngstr%C3%B6m%20unit.txt",
            ),
            ('one,two.txt', 'attachment; filename="one,two.txt"'),
            (
                '½,²⁄₂.txt',
                'attachment; filename=1_2_2_2.txt; '
                "filename*=UTF-8''%C2%BD%2C%C2%B2%E2%81%84%E2%82%82.txt",
            ),
            ('[foo] @ bar.txt', 'attachment; filename="[foo] @ bar.txt"'),
            (
                '[fòó]@bàr,bäz.txt',
                'attachment; filename=_fo_o___ba_r_ba_z.txt; '
                "filename*=UTF-8''%5Bf%C3%B2%C3%B3%5D%40b%C3%A0r%2Cb%C3%A4z.txt",
            ),
        ],
    )
    def test_content_disposition_attachment_header(self, client, filename, expected):
        resource = DownloadableResource(filename)
>       client.app.add_route('/', resource)

tests/test_headers.py:622: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a06c4b30>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0de4d30>, 'CHECK...4d30>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0de4d30>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method DownloadableResource.on_get of <test_headers.DownloadableResource object at 0x7f09a0becbb0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____ TestHeaders.test_declared_content_length_overridden_by_no_body[asgi] _____

self = <test_headers.TestHeaders object at 0x7f09b5c00580>
client = <falcon.testing.client.TestClient object at 0x7f09a09edd50>

    def test_declared_content_length_overridden_by_no_body(self, client):
>       client.app.add_route('/', ContentLengthHeaderResource(42))

tests/test_headers.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a06c5e70>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0de60e0>, 'CHECK...60e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0de60e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ContentLengthHeaderResource.on_get of <test_headers.ContentLengthHeaderResource object at 0x7f09a09ef160>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______________________ TestHeaders.test_vary_star[asgi] _______________________

self = <test_headers.TestHeaders object at 0x7f09b5c4d090>
client = <falcon.testing.client.TestClient object at 0x7f09a071b940>

    def test_vary_star(self, client):
>       client.app.add_route('/', VaryHeaderResource(['*']))

tests/test_headers.py:816: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a06c7a00>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0b57e20>, 'CHECK...7e20>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0b57e20>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method VaryHeaderResource.on_get of <test_headers.VaryHeaderResource object at 0x7f09a071af20>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______________ TestHeaders.test_append_link_with_hreflang[asgi] _______________

self = <test_headers.TestHeaders object at 0x7f09b5c4e560>
client = <falcon.testing.client.TestClient object at 0x7f09a0b47280>

    def test_append_link_with_hreflang(self, client):
        expected_value = '</related/thing>; rel=about; hreflang=en'
    
        resource = LinkHeaderResource()
        resource.append_link('/related/thing', 'about', hreflang='en')
    
>       self._check_link_header(client, resource, expected_value)

tests/test_headers.py:923: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1060: in _check_link_header
    self._check_header(client, resource, 'Link', expected_value)
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a07ea9d0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0b551b0>, 'CHECK...51b0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0b551b0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method LinkHeaderResource.on_get of <test_headers.LinkHeaderResource object at 0x7f09a0b478b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______________ TestHeaders.test_unicode_location_headers[asgi] ________________

self = <test_headers.TestHeaders object at 0x7f09b5c4c040>
client = <falcon.testing.client.TestClient object at 0x7f09a097eef0>

    def test_unicode_location_headers(self, client):
>       client.app.add_route('/', LocationHeaderUnicodeResource())

tests/test_headers.py:686: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a0779e00>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0b13c70>, 'CHECK...3c70>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0b13c70>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method LocationHeaderUnicodeResource.on_get of <test_headers.LocationHeaderUnicodeResource object at 0x7f09a097f340>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_content_disposition_inline_header[asgi-Bold Digit \U0001d7cf.txt-inline; filename=Bold_Digit_1.txt; filename*=UTF-8''Bold%20Digit%20%F0%9D%9F%8F.txt] _

self = <test_headers.TestHeaders object at 0x7f09b5c03b20>
client = <falcon.testing.client.TestClient object at 0x7f09a09ddf00>
filename = 'Bold Digit 𝟏.txt'
expected = "inline; filename=Bold_Digit_1.txt; filename*=UTF-8''Bold%20Digit%20%F0%9D%9F%8F.txt"

    @pytest.mark.parametrize(
        'filename,expected',
        [
            ('report.csv', 'inline; filename="report.csv"'),
            ('Hello World.txt', 'inline; filename="Hello World.txt"'),
            (
                'Bold Digit 𝟏.txt',
                'inline; filename=Bold_Digit_1.txt; '
                "filename*=UTF-8''Bold%20Digit%20%F0%9D%9F%8F.txt",
            ),
        ],
    )
    def test_content_disposition_inline_header(self, client, filename, expected):
        resource = ViewableResource(filename)
>       client.app.add_route('/', resource)

tests/test_headers.py:642: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a077a030>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0b136d0>, 'CHECK...36d0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0b136d0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ViewableResource.on_get of <test_headers.ViewableResource object at 0x7f09a09dcd60>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________ TestHeaders.test_no_content_type[asgi-304 Not Modified] ____________

self = <test_headers.TestHeaders object at 0x7f09b5c4e110>
client = <falcon.testing.client.TestClient object at 0x7f09a0b9c2b0>
status = '304 Not Modified'

    @pytest.mark.parametrize('status', (falcon.HTTP_204, falcon.HTTP_304))
    def test_no_content_type(self, client, status):
>       client.app.add_route('/', testing.SimpleTestResource(status=status))

tests/test_headers.py:842: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a0778040>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0de7640>, 'CHECK...7640>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0de7640>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f09a0b9f010>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ TestHeaders.test_no_content_type[asgi-204 No Content] _____________

self = <test_headers.TestHeaders object at 0x7f09b5c4e050>
client = <falcon.testing.client.TestClient object at 0x7f09a0928ac0>
status = '204 No Content'

    @pytest.mark.parametrize('status', (falcon.HTTP_204, falcon.HTTP_304))
    def test_no_content_type(self, client, status):
>       client.app.add_route('/', testing.SimpleTestResource(status=status))

tests/test_headers.py:842: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a06c7a00>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0d97400>, 'CHECK...7400>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0d97400>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f09a092ab30>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________ TestHeaders.test_vary_header[asgi-vary0-accept-encoding] ___________

self = <test_headers.TestHeaders object at 0x7f09b5c4da50>
client = <falcon.testing.client.TestClient object at 0x7f09a0bb0e80>
vary = ['accept-encoding'], expected_value = 'accept-encoding'

    @pytest.mark.parametrize(
        'vary,expected_value',
        [
            (['accept-encoding'], 'accept-encoding'),
            (('accept-encoding', 'x-auth-token'), 'accept-encoding, x-auth-token'),
        ],
    )
    def test_vary_header(self, client, vary, expected_value):
        resource = VaryHeaderResource(vary)
>       self._check_header(client, resource, 'Vary', expected_value)

tests/test_headers.py:829: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a06c6180>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0d940d0>, 'CHECK...40d0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0d940d0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method VaryHeaderResource.on_get of <test_headers.VaryHeaderResource object at 0x7f09a0bb17b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_append_link_crossorigin[asgi-use-credentials-</related/thing>; rel=alternate; crossorigin="use-credentials"] _

self = <test_headers.TestHeaders object at 0x7f09b5c4fd00>
client = <falcon.testing.client.TestClient object at 0x7f09b51b32b0>
crossorigin = 'use-credentials'
expected_value = '</related/thing>; rel=alternate; crossorigin="use-credentials"'

    @pytest.mark.parametrize(
        'crossorigin,expected_value',
        [
            (None, '</related/thing>; rel=alternate'),
            ('anonymous', '</related/thing>; rel=alternate; crossorigin'),
            ('Anonymous', '</related/thing>; rel=alternate; crossorigin'),
            ('AnOnYmOUs', '</related/thing>; rel=alternate; crossorigin'),
            (
                'Use-Credentials',
                '</related/thing>; rel=alternate; crossorigin="use-credentials"',
            ),
            (
                'use-credentials',
                '</related/thing>; rel=alternate; crossorigin="use-credentials"',
            ),
        ],
    )
    def test_append_link_crossorigin(self, client, crossorigin, expected_value):
        resource = LinkHeaderResource()
        resource.append_link('/related/thing', 'alternate', crossorigin=crossorigin)
    
>       self._check_link_header(client, resource, expected_value)

tests/test_headers.py:987: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1060: in _check_link_header
    self._check_header(client, resource, 'Link', expected_value)
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a06c69d0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0d95fc0>, 'CHECK...5fc0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0d95fc0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method LinkHeaderResource.on_get of <test_headers.LinkHeaderResource object at 0x7f09b51b0b20>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ TestHeaders.test_response_append_header[asgi] _________________

self = <test_headers.TestHeaders object at 0x7f09b5c4ca60>
client = <falcon.testing.client.TestClient object at 0x7f09a056f070>

    def test_response_append_header(self, client):
>       client.app.add_route('/', AppendHeaderResource())

tests/test_headers.py:781: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a0796e30>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0cc9000>, 'CHECK...9000>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0cc9000>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method AppendHeaderResource.on_get of <test_headers.AppendHeaderResource object at 0x7f09a056f100>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ TestHeaders.test_request_latin1_headers[asgi] _________________

self = <test_headers.TestHeaders object at 0x7f09b5c038b0>
client = <falcon.testing.client.TestClient object at 0x7f09a0905750>

    def test_request_latin1_headers(self, client):
>       client.app.add_route('/headers', HeadersDebugResource())

tests/test_headers.py:649: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a078d4d0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0b571c0>, 'CHECK...71c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0b571c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method HeadersDebugResource.on_get of <test_headers.HeadersDebugResource object at 0x7f09a0567ac0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ TestHeaders.test_response_header_helpers_on_get[asgi] _____________

self = <test_headers.TestHeaders object at 0x7f09b5c02c20>
client = <falcon.testing.client.TestClient object at 0x7f09a09b5fc0>

    def test_response_header_helpers_on_get(self, client):
        last_modified = datetime(2013, 1, 1, 10, 30, 30)
        resource = HeaderHelpersResource(last_modified)
>       client.app.add_route('/', resource)

tests/test_headers.py:531: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a07ea500>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0b56ef0>, 'CHECK...6ef0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0b56ef0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method HeaderHelpersResource.on_get of <test_headers.HeaderHelpersResource object at 0x7f09a09b4910>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ TestHeaders.test_request_multiple_header[asgi] ________________

self = <test_headers.TestHeaders object at 0x7f09b5c8cb80>
client = <falcon.testing.client.TestClient object at 0x7f09a050d930>

    def test_request_multiple_header(self, client):
        resource = HeaderHelpersResource()
>       client.app.add_route('/', resource)

tests/test_headers.py:1039: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a0608740>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0b13910>, 'CHECK...3910>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0b13910>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method HeaderHelpersResource.on_get of <test_headers.HeaderHelpersResource object at 0x7f09a050ef20>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_content_disposition_attachment_header[asgi-Hello World.txt-attachment; filename="Hello World.txt"] _

self = <test_headers.TestHeaders object at 0x7f09b5c02b00>
client = <falcon.testing.client.TestClient object at 0x7f09a0bec610>
filename = 'Hello World.txt'
expected = 'attachment; filename="Hello World.txt"'

    @pytest.mark.parametrize(
        'filename,expected',
        [
            ('report.csv', 'attachment; filename="report.csv"'),
            ('Hello World.txt', 'attachment; filename="Hello World.txt"'),
            (
                'Bold Digit 𝟏.txt',
                'attachment; filename=Bold_Digit_1.txt; '
                "filename*=UTF-8''Bold%20Digit%20%F0%9D%9F%8F.txt",
            ),
            (
                'Ångström unit.txt',
                'attachment; filename=A_ngstro_m_unit.txt; '
                "filename*=UTF-8''%C3%85ngstr%C3%B6m%20unit.txt",
            ),
            ('one,two.txt', 'attachment; filename="one,two.txt"'),
            (
                '½,²⁄₂.txt',
                'attachment; filename=1_2_2_2.txt; '
                "filename*=UTF-8''%C2%BD%2C%C2%B2%E2%81%84%E2%82%82.txt",
            ),
            ('[foo] @ bar.txt', 'attachment; filename="[foo] @ bar.txt"'),
            (
                '[fòó]@bàr,bäz.txt',
                'attachment; filename=_fo_o___ba_r_ba_z.txt; '
                "filename*=UTF-8''%5Bf%C3%B2%C3%B3%5D%40b%C3%A0r%2Cb%C3%A4z.txt",
            ),
        ],
    )
    def test_content_disposition_attachment_header(self, client, filename, expected):
        resource = DownloadableResource(filename)
>       client.app.add_route('/', resource)

tests/test_headers.py:622: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a0608a50>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0a56cb0>, 'CHECK...6cb0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0a56cb0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method DownloadableResource.on_get of <test_headers.DownloadableResource object at 0x7f09a0bee890>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___ TestHeaders.test_declared_content_length_overriden_by_body_length[asgi] ____

self = <test_headers.TestHeaders object at 0x7f09b5c007c0>
client = <falcon.testing.client.TestClient object at 0x7f09a0559ea0>

    def test_declared_content_length_overriden_by_body_length(self, client):
        resource = ContentLengthHeaderResource(42, body=SAMPLE_BODY)
>       client.app.add_route('/', resource)

tests/test_headers.py:347: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a06094d0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0d97b50>, 'CHECK...7b50>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0d97b50>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ContentLengthHeaderResource.on_get of <test_headers.ContentLengthHeaderResource object at 0x7f09a055a500>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_content_disposition_attachment_header[asgi-[f\xf2\xf3]@b\xe0r,b\xe4z.txt-attachment; filename=_fo_o___ba_r_ba_z.txt; filename*=UTF-8''%5Bf%C3%B2%C3%B3%5D%40b%C3%A0r%2Cb%C3%A4z.txt] _

self = <test_headers.TestHeaders object at 0x7f09b5c03310>
client = <falcon.testing.client.TestClient object at 0x7f09a09dca00>
filename = '[fòó]@bàr,bäz.txt'
expected = "attachment; filename=_fo_o___ba_r_ba_z.txt; filename*=UTF-8''%5Bf%C3%B2%C3%B3%5D%40b%C3%A0r%2Cb%C3%A4z.txt"

    @pytest.mark.parametrize(
        'filename,expected',
        [
            ('report.csv', 'attachment; filename="report.csv"'),
            ('Hello World.txt', 'attachment; filename="Hello World.txt"'),
            (
                'Bold Digit 𝟏.txt',
                'attachment; filename=Bold_Digit_1.txt; '
                "filename*=UTF-8''Bold%20Digit%20%F0%9D%9F%8F.txt",
            ),
            (
                'Ångström unit.txt',
                'attachment; filename=A_ngstro_m_unit.txt; '
                "filename*=UTF-8''%C3%85ngstr%C3%B6m%20unit.txt",
            ),
            ('one,two.txt', 'attachment; filename="one,two.txt"'),
            (
                '½,²⁄₂.txt',
                'attachment; filename=1_2_2_2.txt; '
                "filename*=UTF-8''%C2%BD%2C%C2%B2%E2%81%84%E2%82%82.txt",
            ),
            ('[foo] @ bar.txt', 'attachment; filename="[foo] @ bar.txt"'),
            (
                '[fòó]@bàr,bäz.txt',
                'attachment; filename=_fo_o___ba_r_ba_z.txt; '
                "filename*=UTF-8''%5Bf%C3%B2%C3%B3%5D%40b%C3%A0r%2Cb%C3%A4z.txt",
            ),
        ],
    )
    def test_content_disposition_attachment_header(self, client, filename, expected):
        resource = DownloadableResource(filename)
>       client.app.add_route('/', resource)

tests/test_headers.py:622: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a06099a0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0b551b0>, 'CHECK...51b0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0b551b0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method DownloadableResource.on_get of <test_headers.DownloadableResource object at 0x7f09a09dd7b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ TestHeaders.test_default_media_type[asgi] ___________________

self = <test_headers.TestHeaders object at 0x7f09b5c02170>
client = <falcon.testing.client.TestClient object at 0x7f09a061cf40>

    def test_default_media_type(self, client):
        resource = testing.SimpleTestResource(body='Hello world!')
>       self._check_header(client, resource, 'Content-Type', falcon.DEFAULT_MEDIA_TYPE)

tests/test_headers.py:495: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a07ebe60>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0e51ea0>, 'CHECK...1ea0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0e51ea0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f09a061cb80>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________________ TestHeaders.test_default_value[asgi] _____________________

self = <test_headers.TestHeaders object at 0x7f09b5c01060>
client = <falcon.testing.client.TestClient object at 0x7f09a0617df0>

    def test_default_value(self, client):
        resource = testing.SimpleTestResource(body=SAMPLE_BODY)
>       client.app.add_route('/', resource)

tests/test_headers.py:398: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a0794350>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0b13be0>, 'CHECK...3be0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0b13be0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f09a0617220>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ TestHeaders.test_custom_content_type[asgi] __________________

self = <test_headers.TestHeaders object at 0x7f09b5c4e0e0>
client = <falcon.testing.client.TestClient object at 0x7f09a0903340>

    def test_custom_content_type(self, client):
        content_type = 'application/xml; charset=utf-8'
        resource = XmlResource(content_type)
>       self._check_header(client, resource, 'Content-Type', content_type)

tests/test_headers.py:850: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a06c6650>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0b54430>, 'CHECK...4430>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0b54430>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method XmlResource.on_get of <test_headers.XmlResource object at 0x7f09a09036a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________ TestHeaders.test_set_headers_with_custom_class[asgi] _____________

self = <test_headers.TestHeaders object at 0x7f09b5c8c700>
client = <falcon.testing.client.TestClient object at 0x7f09a0b9ad10>

    def test_set_headers_with_custom_class(self, client):
>       client.app.add_route('/', CustomHeadersResource())

tests/test_headers.py:1023: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a06c4b30>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0b12e60>, 'CHECK...2e60>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0b12e60>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CustomHeadersResource.on_get of <test_headers.CustomHeadersResource object at 0x7f09a0b9b790>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________ TestHeaders.test_no_content_length[asgi-204 No Content] ____________

self = <test_headers.TestHeaders object at 0x7f09b5c01cc0>
client = <falcon.testing.client.TestClient object at 0x7f09a0b5e500>
status = '204 No Content'

    @pytest.mark.parametrize('status', (falcon.HTTP_204, falcon.HTTP_304))
    def test_no_content_length(self, client, status):
>       client.app.add_route('/xxx', testing.SimpleTestResource(status=status))

tests/test_headers.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a077b290>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0cc88b0>, 'CHECK...88b0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0cc88b0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f09a0b5ceb0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_append_link_crossorigin[asgi-None-</related/thing>; rel=alternate] _

self = <test_headers.TestHeaders object at 0x7f09b5c4fa30>
client = <falcon.testing.client.TestClient object at 0x7f09a069e740>
crossorigin = None, expected_value = '</related/thing>; rel=alternate'

    @pytest.mark.parametrize(
        'crossorigin,expected_value',
        [
            (None, '</related/thing>; rel=alternate'),
            ('anonymous', '</related/thing>; rel=alternate; crossorigin'),
            ('Anonymous', '</related/thing>; rel=alternate; crossorigin'),
            ('AnOnYmOUs', '</related/thing>; rel=alternate; crossorigin'),
            (
                'Use-Credentials',
                '</related/thing>; rel=alternate; crossorigin="use-credentials"',
            ),
            (
                'use-credentials',
                '</related/thing>; rel=alternate; crossorigin="use-credentials"',
            ),
        ],
    )
    def test_append_link_crossorigin(self, client, crossorigin, expected_value):
        resource = LinkHeaderResource()
        resource.append_link('/related/thing', 'alternate', crossorigin=crossorigin)
    
>       self._check_link_header(client, resource, expected_value)

tests/test_headers.py:987: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1060: in _check_link_header
    self._check_header(client, resource, 'Link', expected_value)
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a062d3f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0b56950>, 'CHECK...6950>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0b56950>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method LinkHeaderResource.on_get of <test_headers.LinkHeaderResource object at 0x7f09a069d780>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________________ TestHeaders.test_content_length[asgi] _____________________

self = <test_headers.TestHeaders object at 0x7f09b5c003a0>
client = <falcon.testing.client.TestClient object at 0x7f09a09c4280>

    def test_content_length(self, client):
        resource = testing.SimpleTestResource(body=SAMPLE_BODY)
>       client.app.add_route('/', resource)

tests/test_headers.py:329: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a062c0b0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0b136d0>, 'CHECK...36d0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0b136d0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f09a06b56f0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________________ TestHeaders.test_unset_header[asgi-True] ___________________

self = <test_headers.TestHeaders object at 0x7f09b5c01690>
client = <falcon.testing.client.TestClient object at 0x7f09a09b5300>
with_double_quotes = True

    @pytest.mark.parametrize('with_double_quotes', [True, False])
    def test_unset_header(self, client, with_double_quotes):
>       client.app.add_route('/', RemoveHeaderResource(with_double_quotes))

tests/test_headers.py:414: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a062c5f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0b13130>, 'CHECK...3130>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0b13130>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method RemoveHeaderResource.on_get of <test_headers.RemoveHeaderResource object at 0x7f09a09b55d0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______________ TestHeaders.test_passthrough_request_headers[asgi] ______________

self = <test_headers.TestHeaders object at 0x7f09b5c01f60>
client = <falcon.testing.client.TestClient object at 0x7f09a0974d90>

    def test_passthrough_request_headers(self, client):
        resource = testing.SimpleTestResource(body=SAMPLE_BODY)
>       client.app.add_route('/', resource)

tests/test_headers.py:451: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a062cb30>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0b12680>, 'CHECK...2680>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0b12680>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f09a0974340>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ TestHeaders.test_unicode_headers_contain_non_ascii[asgi-PATCH] ________

self = <test_headers.TestHeaders object at 0x7f09b5c4c520>, method = 'PATCH'
client = <falcon.testing.client.TestClient object at 0x7f09a0b97220>

    @pytest.mark.parametrize('method', ['CONNECT', 'PATCH', 'POST', 'PUT'])
    def test_unicode_headers_contain_non_ascii(self, method, client):
        app = client.app
>       app.add_route('/', UnicodeHeaderResource())

tests/test_headers.py:709: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a062f0d0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0d96290>, 'CHECK...7c0>>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0d96290>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method UnicodeHeaderResource.on_connect of <test_headers.UnicodeHeaderResource object at 0x7f09a0b977c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______________ TestHeaders.test_append_link_with_title_star[asgi] ______________

self = <test_headers.TestHeaders object at 0x7f09b5c4ea10>
client = <falcon.testing.client.TestClient object at 0x7f09a0566c20>

    def test_append_link_with_title_star(self, client):
        expected_value = (
            '</related/thing>; rel=item; '
            "title*=UTF-8''A%20related%20thing, "
            '</%C3%A7runchy/thing>; rel=item; '
            "title*=UTF-8'en'A%20%C3%A7runchy%20thing"
        )
    
        resource = LinkHeaderResource()
        resource.append_link(
            '/related/thing', 'item', title_star=('', 'A related thing')
        )
    
        resource.append_link(
            '/\u00e7runchy/thing', 'item', title_star=('en', 'A \u00e7runchy thing')
        )
    
>       self._check_link_header(client, resource, expected_value)

tests/test_headers.py:907: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1060: in _check_link_header
    self._check_header(client, resource, 'Link', expected_value)
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a06c6dc0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0d94d30>, 'CHECK...4d30>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0d94d30>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method LinkHeaderResource.on_get of <test_headers.LinkHeaderResource object at 0x7f09a0564670>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ TestHeaders.test_append_link_with_title[asgi] _________________

self = <test_headers.TestHeaders object at 0x7f09b5c4e7a0>
client = <falcon.testing.client.TestClient object at 0x7f09a094fcd0>

    def test_append_link_with_title(self, client):
        expected_value = '</related/thing>; rel=item; title="A related thing"'
    
        resource = LinkHeaderResource()
        resource.append_link('/related/thing', 'item', title='A related thing')
    
>       self._check_link_header(client, resource, expected_value)

tests/test_headers.py:888: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1060: in _check_link_header
    self._check_header(client, resource, 'Link', expected_value)
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a0795af0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a06592d0>, 'CHECK...92d0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a06592d0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method LinkHeaderResource.on_get of <test_headers.LinkHeaderResource object at 0x7f09a094e020>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ TestHeaders.test_declared_content_length_on_head[asgi] ____________

self = <test_headers.TestHeaders object at 0x7f09b5c00310>
client = <falcon.testing.client.TestClient object at 0x7f09a092e6e0>

    def test_declared_content_length_on_head(self, client):
>       client.app.add_route('/', ContentLengthHeaderResource(42))

tests/test_headers.py:336: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a060a3b0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0e46b90>, 'CHECK...6b90>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0e46b90>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ContentLengthHeaderResource.on_get of <test_headers.ContentLengthHeaderResource object at 0x7f09a092d5a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_content_disposition_attachment_header[asgi-Bold Digit \U0001d7cf.txt-attachment; filename=Bold_Digit_1.txt; filename*=UTF-8''Bold%20Digit%20%F0%9D%9F%8F.txt] _

self = <test_headers.TestHeaders object at 0x7f09b5c02620>
client = <falcon.testing.client.TestClient object at 0x7f09a0bec220>
filename = 'Bold Digit 𝟏.txt'
expected = "attachment; filename=Bold_Digit_1.txt; filename*=UTF-8''Bold%20Digit%20%F0%9D%9F%8F.txt"

    @pytest.mark.parametrize(
        'filename,expected',
        [
            ('report.csv', 'attachment; filename="report.csv"'),
            ('Hello World.txt', 'attachment; filename="Hello World.txt"'),
            (
                'Bold Digit 𝟏.txt',
                'attachment; filename=Bold_Digit_1.txt; '
                "filename*=UTF-8''Bold%20Digit%20%F0%9D%9F%8F.txt",
            ),
            (
                'Ångström unit.txt',
                'attachment; filename=A_ngstro_m_unit.txt; '
                "filename*=UTF-8''%C3%85ngstr%C3%B6m%20unit.txt",
            ),
            ('one,two.txt', 'attachment; filename="one,two.txt"'),
            (
                '½,²⁄₂.txt',
                'attachment; filename=1_2_2_2.txt; '
                "filename*=UTF-8''%C2%BD%2C%C2%B2%E2%81%84%E2%82%82.txt",
            ),
            ('[foo] @ bar.txt', 'attachment; filename="[foo] @ bar.txt"'),
            (
                '[fòó]@bàr,bäz.txt',
                'attachment; filename=_fo_o___ba_r_ba_z.txt; '
                "filename*=UTF-8''%5Bf%C3%B2%C3%B3%5D%40b%C3%A0r%2Cb%C3%A4z.txt",
            ),
        ],
    )
    def test_content_disposition_attachment_header(self, client, filename, expected):
        resource = DownloadableResource(filename)
>       client.app.add_route('/', resource)

tests/test_headers.py:622: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a060af10>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0b571c0>, 'CHECK...71c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0b571c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method DownloadableResource.on_get of <test_headers.DownloadableResource object at 0x7f09a0bedd20>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_override_default_media_type[text/plain-Hello ISO-8859-1!-True] _

self = <test_headers.TestHeaders object at 0x7f09b5c02980>, asgi = True
client = <falcon.testing.client.TestClient object at 0x7f09a0b96e90>
content_type = 'text/plain', body = 'Hello ISO-8859-1!'

    @pytest.mark.parametrize('asgi', [True, False])
    @pytest.mark.parametrize(
        'content_type,body',
        [
            ('text/plain; charset=UTF-8', 'Hello Unicode! \U0001F638'),
            # NOTE(kgriffs): This only works because the client defaults to
            # ISO-8859-1 IFF the media type is 'text'.
            ('text/plain', 'Hello ISO-8859-1!'),
        ],
    )
    def test_override_default_media_type(self, asgi, client, content_type, body):
        client.app = create_app(asgi=asgi, media_type=content_type)
>       client.app.add_route('/', testing.SimpleTestResource(body=body))

tests/test_headers.py:509: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a062d620>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0b136d0>, 'CHECK...36d0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0b136d0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f09a0b95630>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_override_default_media_type[text/plain; charset=UTF-8-Hello Unicode! \U0001f638-True] _

self = <test_headers.TestHeaders object at 0x7f09b5c02860>, asgi = True
client = <falcon.testing.client.TestClient object at 0x7f09a0975b40>
content_type = 'text/plain; charset=UTF-8', body = 'Hello Unicode! 😸'

    @pytest.mark.parametrize('asgi', [True, False])
    @pytest.mark.parametrize(
        'content_type,body',
        [
            ('text/plain; charset=UTF-8', 'Hello Unicode! \U0001F638'),
            # NOTE(kgriffs): This only works because the client defaults to
            # ISO-8859-1 IFF the media type is 'text'.
            ('text/plain', 'Hello ISO-8859-1!'),
        ],
    )
    def test_override_default_media_type(self, asgi, client, content_type, body):
        client.app = create_app(asgi=asgi, media_type=content_type)
>       client.app.add_route('/', testing.SimpleTestResource(body=body))

tests/test_headers.py:509: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a062daf0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0b55360>, 'CHECK...5360>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0b55360>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f09a0976ce0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____ TestHeaders.test_vary_header[asgi-vary1-accept-encoding, x-auth-token] ____

self = <test_headers.TestHeaders object at 0x7f09b5c4dae0>
client = <falcon.testing.client.TestClient object at 0x7f09a0bc1f00>
vary = ('accept-encoding', 'x-auth-token')
expected_value = 'accept-encoding, x-auth-token'

    @pytest.mark.parametrize(
        'vary,expected_value',
        [
            (['accept-encoding'], 'accept-encoding'),
            (('accept-encoding', 'x-auth-token'), 'accept-encoding, x-auth-token'),
        ],
    )
    def test_vary_header(self, client, vary, expected_value):
        resource = VaryHeaderResource(vary)
>       self._check_header(client, resource, 'Vary', expected_value)

tests/test_headers.py:829: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a062e650>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0659cf0>, 'CHECK...9cf0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0659cf0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method VaryHeaderResource.on_get of <test_headers.VaryHeaderResource object at 0x7f09a0bc0400>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________________ TestHeaders.test_expires_header[asgi] _____________________

self = <test_headers.TestHeaders object at 0x7f09b5c00b80>
client = <falcon.testing.client.TestClient object at 0x7f09a05e2ce0>

    def test_expires_header(self, client):
        expires = datetime(2013, 1, 1, 10, 30, 30)
>       client.app.add_route('/', ExpiresHeaderResource(expires))

tests/test_headers.py:363: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a062cf20>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0658820>, 'CHECK...8820>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0658820>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ExpiresHeaderResource.on_get of <test_headers.ExpiresHeaderResource object at 0x7f09a05e2e00>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________________ TestHeaders.test_append_link_multiple[asgi] __________________

self = <test_headers.TestHeaders object at 0x7f09b5c4e530>
client = <falcon.testing.client.TestClient object at 0x7f09a069d840>

    def test_append_link_multiple(self, client):
        expected_value = (
            '</things/2842>; rel=next, '
            + '<http://%C3%A7runchy/bacon>; rel=contents, '
            + '<ab%C3%A7>; rel="http://example.com/ext-type", '
            + '<ab%C3%A7>; rel="http://example.com/%C3%A7runchy", '
            + '<ab%C3%A7>; rel="https://example.com/too-%C3%A7runchy", '
            + '</alt-thing>; rel="alternate http://example.com/%C3%A7runchy"'
        )
    
        uri = 'ab\u00e7'
    
        resource = LinkHeaderResource()
        resource.add_link('/things/2842', 'next')
        resource.append_link('http://\u00e7runchy/bacon', 'contents')
        resource.append_link(uri, 'http://example.com/ext-type')
        resource.add_link(uri, 'http://example.com/\u00e7runchy')
        resource.append_link(uri, 'https://example.com/too-\u00e7runchy')
        resource.add_link('/alt-thing', 'alternate http://example.com/\u00e7runchy')
    
>       self._check_link_header(client, resource, expected_value)

tests/test_headers.py:880: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1060: in _check_link_header
    self._check_header(client, resource, 'Link', expected_value)
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a077adc0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0659e10>, 'CHECK...9e10>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0659e10>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method LinkHeaderResource.on_get of <test_headers.LinkHeaderResource object at 0x7f09a069ee60>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_append_link_crossorigin[asgi-anonymous-</related/thing>; rel=alternate; crossorigin] _

self = <test_headers.TestHeaders object at 0x7f09b5c4fac0>
client = <falcon.testing.client.TestClient object at 0x7f09a054e650>
crossorigin = 'anonymous'
expected_value = '</related/thing>; rel=alternate; crossorigin'

    @pytest.mark.parametrize(
        'crossorigin,expected_value',
        [
            (None, '</related/thing>; rel=alternate'),
            ('anonymous', '</related/thing>; rel=alternate; crossorigin'),
            ('Anonymous', '</related/thing>; rel=alternate; crossorigin'),
            ('AnOnYmOUs', '</related/thing>; rel=alternate; crossorigin'),
            (
                'Use-Credentials',
                '</related/thing>; rel=alternate; crossorigin="use-credentials"',
            ),
            (
                'use-credentials',
                '</related/thing>; rel=alternate; crossorigin="use-credentials"',
            ),
        ],
    )
    def test_append_link_crossorigin(self, client, crossorigin, expected_value):
        resource = LinkHeaderResource()
        resource.append_link('/related/thing', 'alternate', crossorigin=crossorigin)
    
>       self._check_link_header(client, resource, expected_value)

tests/test_headers.py:987: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1060: in _check_link_header
    self._check_header(client, resource, 'Link', expected_value)
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a06bd310>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0658310>, 'CHECK...8310>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0658310>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method LinkHeaderResource.on_get of <test_headers.LinkHeaderResource object at 0x7f09a054ecb0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ TestHeaders.test_append_link_with_hreflang_multi[asgi] ____________

self = <test_headers.TestHeaders object at 0x7f09b5c4eec0>
client = <falcon.testing.client.TestClient object at 0x7f09a0bb2bf0>

    def test_append_link_with_hreflang_multi(self, client):
        expected_value = '</related/thing>; rel=about; hreflang=en-GB; hreflang=de'
    
        resource = LinkHeaderResource()
        resource.append_link('/related/thing', 'about', hreflang=('en-GB', 'de'))
    
>       self._check_link_header(client, resource, expected_value)

tests/test_headers.py:931: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1060: in _check_link_header
    self._check_header(client, resource, 'Link', expected_value)
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a06be260>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0abdc60>, 'CHECK...dc60>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0abdc60>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method LinkHeaderResource.on_get of <test_headers.LinkHeaderResource object at 0x7f09a0bb08b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________________ TestLoadApp.test_load_app_error[foo] _____________________

self = <test_cmd_inspect_app.TestLoadApp object at 0x7f09c1c52ce0>, name = 'foo'

    @pytest.mark.parametrize(
        'name',
        (
            'foo',  # not exists
            '_MODULE',  # not callable and not app
            'DummyResource',  # callable and not app
        ),
    )
    def test_load_app_error(self, name):
        parser = inspect_app.make_parser()
        args = Namespace(
            app_module='{}:{}'.format(_MODULE, name), route_only=False, verbose=False
        )
        with pytest.raises(SystemExit):
>           inspect_app.load_app(parser, args)

tests/test_cmd_inspect_app.py:134: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7f0af9883400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
_____________________ TestLoadApp.test_load_app[make_app] ______________________

self = <test_cmd_inspect_app.TestLoadApp object at 0x7f09c1c53040>
name = 'make_app'

    @pytest.mark.parametrize('name', ('_APP', 'make_app'))
    def test_load_app(self, name):
        parser = inspect_app.make_parser()
        args = Namespace(
            app_module='{}:{}'.format(_MODULE, name), route_only=False, verbose=False
        )
>       app = inspect_app.load_app(parser, args)

tests/test_cmd_inspect_app.py:116: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7f0af9883400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
________________ TestLoadApp.test_load_app_error[DummyResource] ________________

self = <test_cmd_inspect_app.TestLoadApp object at 0x7f09c1c51a80>
name = 'DummyResource'

    @pytest.mark.parametrize(
        'name',
        (
            'foo',  # not exists
            '_MODULE',  # not callable and not app
            'DummyResource',  # callable and not app
        ),
    )
    def test_load_app_error(self, name):
        parser = inspect_app.make_parser()
        args = Namespace(
            app_module='{}:{}'.format(_MODULE, name), route_only=False, verbose=False
        )
        with pytest.raises(SystemExit):
>           inspect_app.load_app(parser, args)

tests/test_cmd_inspect_app.py:134: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7f0af9883400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
___________________ TestLoadApp.test_load_app_error[_MODULE] ___________________

self = <test_cmd_inspect_app.TestLoadApp object at 0x7f09c1c52440>
name = '_MODULE'

    @pytest.mark.parametrize(
        'name',
        (
            'foo',  # not exists
            '_MODULE',  # not callable and not app
            'DummyResource',  # callable and not app
        ),
    )
    def test_load_app_error(self, name):
        parser = inspect_app.make_parser()
        args = Namespace(
            app_module='{}:{}'.format(_MODULE, name), route_only=False, verbose=False
        )
        with pytest.raises(SystemExit):
>           inspect_app.load_app(parser, args)

tests/test_cmd_inspect_app.py:134: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7f0af9883400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
_______________________ TestLoadApp.test_load_app[_APP] ________________________

self = <test_cmd_inspect_app.TestLoadApp object at 0x7f09c1c52fb0>
name = '_APP'

    @pytest.mark.parametrize('name', ('_APP', 'make_app'))
    def test_load_app(self, name):
        parser = inspect_app.make_parser()
        args = Namespace(
            app_module='{}:{}'.format(_MODULE, name), route_only=False, verbose=False
        )
>       app = inspect_app.load_app(parser, args)

tests/test_cmd_inspect_app.py:116: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7f0af9883400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
_______________ TestMain.test_inspect[not-internal-not-verbose] ________________

self = <test_cmd_inspect_app.TestMain object at 0x7f09c1c53a00>, verbose = False
internal = False
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f09a092d570>

    def test_inspect(self, verbose, internal, monkeypatch):
        args = ['some-file.py', '{}:{}'.format(_MODULE, '_APP')]
        if verbose:
            args.append('-v')
        if internal:
            args.append('-i')
        monkeypatch.setattr('sys.argv', args)
        output = io.StringIO()
        with redirected(stdout=output):
>           inspect_app.main()

tests/test_cmd_inspect_app.py:178: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:100: in main
    app = load_app(parser, args)
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7f0af9883400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
___________________ TestMain.test_inspect[internal-verbose] ____________________

self = <test_cmd_inspect_app.TestMain object at 0x7f09c1c53850>, verbose = True
internal = True
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f09a06eae90>

    def test_inspect(self, verbose, internal, monkeypatch):
        args = ['some-file.py', '{}:{}'.format(_MODULE, '_APP')]
        if verbose:
            args.append('-v')
        if internal:
            args.append('-i')
        monkeypatch.setattr('sys.argv', args)
        output = io.StringIO()
        with redirected(stdout=output):
>           inspect_app.main()

tests/test_cmd_inspect_app.py:178: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:100: in main
    app = load_app(parser, args)
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7f0af9883400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
_________________ TestMain.test_routes_only[internal-verbose] __________________

self = <test_cmd_inspect_app.TestMain object at 0x7f09c1c53460>, verbose = True
internal = True
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f09a097f340>

    def test_routes_only(self, verbose, internal, monkeypatch):
        args = ['some-file.py', '{}:{}'.format(_MODULE, '_APP'), '-r']
        if verbose:
            args.append('-v')
        if internal:
            args.append('-i')
        monkeypatch.setattr('sys.argv', args)
        output = io.StringIO()
        with redirected(stdout=output):
>           inspect_app.main()

tests/test_cmd_inspect_app.py:163: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:100: in main
    app = load_app(parser, args)
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7f0af9883400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
_________________ TestMain.test_inspect[internal-not-verbose] __________________

self = <test_cmd_inspect_app.TestMain object at 0x7f09c1c538e0>, verbose = False
internal = True
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f09a05a5660>

    def test_inspect(self, verbose, internal, monkeypatch):
        args = ['some-file.py', '{}:{}'.format(_MODULE, '_APP')]
        if verbose:
            args.append('-v')
        if internal:
            args.append('-i')
        monkeypatch.setattr('sys.argv', args)
        output = io.StringIO()
        with redirected(stdout=output):
>           inspect_app.main()

tests/test_cmd_inspect_app.py:178: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:100: in main
    app = load_app(parser, args)
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7f0af9883400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
_________________ TestMain.test_inspect[not-internal-verbose] __________________

self = <test_cmd_inspect_app.TestMain object at 0x7f09c1c53970>, verbose = True
internal = False
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f09a0564b20>

    def test_inspect(self, verbose, internal, monkeypatch):
        args = ['some-file.py', '{}:{}'.format(_MODULE, '_APP')]
        if verbose:
            args.append('-v')
        if internal:
            args.append('-i')
        monkeypatch.setattr('sys.argv', args)
        output = io.StringIO()
        with redirected(stdout=output):
>           inspect_app.main()

tests/test_cmd_inspect_app.py:178: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:100: in main
    app = load_app(parser, args)
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7f0af9883400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
_______________ TestMain.test_routes_only[not-internal-verbose] ________________

self = <test_cmd_inspect_app.TestMain object at 0x7f09c1c53580>, verbose = True
internal = False
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f09a0b95420>

    def test_routes_only(self, verbose, internal, monkeypatch):
        args = ['some-file.py', '{}:{}'.format(_MODULE, '_APP'), '-r']
        if verbose:
            args.append('-v')
        if internal:
            args.append('-i')
        monkeypatch.setattr('sys.argv', args)
        output = io.StringIO()
        with redirected(stdout=output):
>           inspect_app.main()

tests/test_cmd_inspect_app.py:163: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:100: in main
    app = load_app(parser, args)
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7f0af9883400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
_______________ TestMain.test_routes_only[internal-not-verbose] ________________

self = <test_cmd_inspect_app.TestMain object at 0x7f09c1c534f0>, verbose = False
internal = True
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f09a0b99a50>

    def test_routes_only(self, verbose, internal, monkeypatch):
        args = ['some-file.py', '{}:{}'.format(_MODULE, '_APP'), '-r']
        if verbose:
            args.append('-v')
        if internal:
            args.append('-i')
        monkeypatch.setattr('sys.argv', args)
        output = io.StringIO()
        with redirected(stdout=output):
>           inspect_app.main()

tests/test_cmd_inspect_app.py:163: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:100: in main
    app = load_app(parser, args)
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7f0af9883400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
_____________ TestMain.test_routes_only[not-internal-not-verbose] ______________

self = <test_cmd_inspect_app.TestMain object at 0x7f09c1c53610>, verbose = False
internal = False
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f09a0b97700>

    def test_routes_only(self, verbose, internal, monkeypatch):
        args = ['some-file.py', '{}:{}'.format(_MODULE, '_APP'), '-r']
        if verbose:
            args.append('-v')
        if internal:
            args.append('-i')
        monkeypatch.setattr('sys.argv', args)
        output = io.StringIO()
        with redirected(stdout=output):
>           inspect_app.main()

tests/test_cmd_inspect_app.py:163: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:100: in main
    app = load_app(parser, args)
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7f0af9883400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
_____________________ test_json_err_no_handler[asgi-True] ______________________

asgi = True, monkeypatch_resolver = True

    @pytest.mark.parametrize('monkeypatch_resolver', [True, False])
    def test_json_err_no_handler(asgi, monkeypatch_resolver):
        app = create_app(asgi)
    
        handlers = media.Handlers({falcon.MEDIA_URLENCODED: media.URLEncodedFormHandler()})
    
        # NOTE(kgriffs): Test the pre-3.0 method. Although undocumented, it was
        #   technically a public method, and so we make sure it still works here.
        if monkeypatch_resolver:
    
            def _resolve(media_type, default, raise_not_found=True):
                with pytest.warns(DeprecatedWarning, match='This undocumented method'):
                    h = handlers.find_by_media_type(
                        media_type, default, raise_not_found=raise_not_found
                    )
                return h, None, None
    
            handlers._resolve = _resolve
    
        app.req_options.media_handlers = handlers
        app.resp_options.media_handlers = handlers
    
        class Resource:
            def on_get(self, req, resp):
                raise falcon.HTTPForbidden()
    
>       app.add_route('/', Resource())

tests/test_media_handlers.py:349: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a06b9e00>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52501f0>, 'CHECK...01f0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52501f0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method test_json_err_no_handler.<locals>.Resource.on_get of <test_media_handlers.test_json_err_no_handler.<locals>.Resource object at 0x7f09ee43d810>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________________ test_json_err_no_handler[asgi-False] _____________________

asgi = True, monkeypatch_resolver = False

    @pytest.mark.parametrize('monkeypatch_resolver', [True, False])
    def test_json_err_no_handler(asgi, monkeypatch_resolver):
        app = create_app(asgi)
    
        handlers = media.Handlers({falcon.MEDIA_URLENCODED: media.URLEncodedFormHandler()})
    
        # NOTE(kgriffs): Test the pre-3.0 method. Although undocumented, it was
        #   technically a public method, and so we make sure it still works here.
        if monkeypatch_resolver:
    
            def _resolve(media_type, default, raise_not_found=True):
                with pytest.warns(DeprecatedWarning, match='This undocumented method'):
                    h = handlers.find_by_media_type(
                        media_type, default, raise_not_found=raise_not_found
                    )
                return h, None, None
    
            handlers._resolve = _resolve
    
        app.req_options.media_handlers = handlers
        app.resp_options.media_handlers = handlers
    
        class Resource:
            def on_get(self, req, resp):
                raise falcon.HTTPForbidden()
    
>       app.add_route('/', Resource())

tests/test_media_handlers.py:349: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a06bb840>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5252950>, 'CHECK...2950>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5252950>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method test_json_err_no_handler.<locals>.Resource.on_get of <test_media_handlers.test_json_err_no_handler.<locals>.Resource object at 0x7f09a09745b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_date_valid[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7f09b56ab190>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f09ee556d40>
resource = <test_query_params.Resource object at 0x7f09ee556c80>

    def test_get_date_valid(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:799: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a06bac00>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5251360>, 'CHECK...1360>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5251360>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09ee556c80>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_get_query_params-asgi-t=1,2&t=3,4-False-expected2] _

self = <test_query_params.TestQueryParams object at 0x7f09b585c8e0>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f09a05bb250>
resource = <test_query_params.Resource object at 0x7f09a05b9240>
qs = 't=1,2&t=3,4', keep_blank = False, expected = ['1', '2', '3', '4']

    @pytest.mark.parametrize(
        'qs, keep_blank, expected',
        [
            ('t=1&t=3,4', False, ['1', '3', '4']),
            ('t=1&t=2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', True, ['1', '', '2', '3', '4']),
            ('t=1,2&t=3,4,,5', False, ['1', '2', '3', '4', '5']),
            ('t=1&t=,1,4,,5', False, ['1', '1', '4', '5']),
            ('t=1&t=,1,4,,5', True, ['1', '', '1', '4', '', '5']),
            (
                't=1&t=,1,4,,5&t=a,b,c',
                True,
                ['1', '', '1', '4', '', '5', 'a', 'b', 'c'],
            ),
        ],
    )
    def test_option_auto_parse_qs_csv_multiple_fields_true(
        self,
        simulate_request,
        client,
        resource,
        qs,
        keep_blank,
        expected,
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af526ceb0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5250ca0>, 'CHECK...0ca0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5250ca0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a05b9240>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_default_auto_parse_csv_behaviour[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7f09b585e260>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f09ee5cb610>
resource = <test_query_params.Resource object at 0x7f09ee5cb7c0>

    def test_default_auto_parse_csv_behaviour(self, simulate_request, client, resource):
>       client.app.add_route('/', resource=resource)

tests/test_query_params.py:279: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af41b0a50>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5251f30>, 'CHECK...1f30>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5251f30>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09ee5cb7c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_required[simulate_request_get_query_params-asgi-get_param_as_float] _

self = <test_query_params.TestQueryParams object at 0x7f09b585edd0>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f09a0b78a60>
resource = <test_query_params.Resource object at 0x7f09a0b7b8e0>
method_name = 'get_param_as_float'

    @pytest.mark.parametrize(
        'method_name',
        [
            'get_param',
            'get_param_as_int',
            'get_param_as_float',
            'get_param_as_uuid',
            'get_param_as_bool',
            'get_param_as_list',
        ],
    )
    def test_required(self, simulate_request, client, resource, method_name):
>       client.app.add_route('/', resource)

tests/test_query_params.py:334: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af41b1070>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5234a60>, 'CHECK...4a60>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5234a60>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a0b7b8e0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_date_store[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7f09b56abaf0>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f09a09eef20>
resource = <test_query_params.Resource object at 0x7f09a09ee0e0>

    def test_get_date_store(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:825: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af41b3d10>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5234430>, 'CHECK...4430>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5234430>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a09ee0e0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_get_query_params-asgi-t=1&t=2&t=3,4-False-expected1] _

self = <test_query_params.TestQueryParams object at 0x7f09b585c850>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f09a097e8c0>
resource = <test_query_params.Resource object at 0x7f09a097ffa0>
qs = 't=1&t=2&t=3,4', keep_blank = False, expected = ['1', '2', '3', '4']

    @pytest.mark.parametrize(
        'qs, keep_blank, expected',
        [
            ('t=1&t=3,4', False, ['1', '3', '4']),
            ('t=1&t=2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', True, ['1', '', '2', '3', '4']),
            ('t=1,2&t=3,4,,5', False, ['1', '2', '3', '4', '5']),
            ('t=1&t=,1,4,,5', False, ['1', '1', '4', '5']),
            ('t=1&t=,1,4,,5', True, ['1', '', '1', '4', '', '5']),
            (
                't=1&t=,1,4,,5&t=a,b,c',
                True,
                ['1', '', '1', '4', '', '5', 'a', 'b', 'c'],
            ),
        ],
    )
    def test_option_auto_parse_qs_csv_multiple_fields_true(
        self,
        simulate_request,
        client,
        resource,
        qs,
        keep_blank,
        expected,
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af526d150>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5235870>, 'CHECK...5870>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5235870>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a097ffa0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_date_invalid[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7f09b56abeb0>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f09a0bee0b0>
resource = <test_query_params.Resource object at 0x7f09a0bee9e0>

    def test_get_date_invalid(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:835: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af526c970>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5236950>, 'CHECK...6950>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5236950>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a0bee9e0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_date_valid_with_format[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7f09b56ab2e0>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f09a05a74c0>
resource = <test_query_params.Resource object at 0x7f09a05a6f80>

    def test_get_date_valid_with_format(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:814: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af526e1f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52345e0>, 'CHECK...45e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52345e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a05a6f80>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_false[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7f09b58233a0>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f09a09ef340>
resource = <test_query_params.Resource object at 0x7f09a09ed540>

    def test_option_auto_parse_qs_csv_multiple_fields_false(
        self, simulate_request, client, resource
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:191: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af41e92a0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0c32dd0>, 'CHECK...2dd0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0c32dd0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a09ed540>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_date_store[simulate_request_get_query_params-asgi] __

self = <test_query_params.TestQueryParams object at 0x7f09b56aa3b0>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f0af3e16f50>
resource = <test_query_params.Resource object at 0x7f0af3e16680>

    def test_get_date_store(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:825: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a06c6180>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5253880>, 'CHECK...3880>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5253880>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f0af3e16680>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____ TestQueryParams.test_blank[simulate_request_post_query_params-asgi] ______

self = <test_query_params.TestQueryParams object at 0x7f09b5823280>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f09a0b96230>
resource = <test_query_params.Resource object at 0x7f0af4082170>

    def test_blank(self, simulate_request, client, resource):
        query_string = 'marker='
>       client.app.add_route('/', resource)

tests/test_query_params.py:118: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af41b2b20>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0b57130>, 'CHECK...7130>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0b57130>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f0af4082170>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_bad_percentage[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7f09b585e620>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f09a05b8910>
resource = <test_query_params.Resource object at 0x7f09a05baaa0>

    def test_bad_percentage(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:290: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af41b19a0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0b12440>, 'CHECK...2440>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0b12440>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a05baaa0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___ TestQueryParams.test_float_neg[simulate_request_post_query_params-asgi] ____

self = <test_query_params.TestQueryParams object at 0x7f09b56a8490>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f09a0b99c00>
resource = <test_query_params.Resource object at 0x7f09a0b98910>

    def test_float_neg(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:478: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a06beff0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0c32dd0>, 'CHECK...2dd0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0c32dd0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a0b98910>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_post_query_params-asgi-t=1,,2&t=3,4-True-expected4] _

self = <test_query_params.TestQueryParams object at 0x7f09b585d420>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f09a058ac80>
resource = <test_query_params.Resource object at 0x7f09a0589900>
qs = 't=1,,2&t=3,4', keep_blank = True, expected = ['1', '', '2', '3', '4']

    @pytest.mark.parametrize(
        'qs, keep_blank, expected',
        [
            ('t=1&t=3,4', False, ['1', '3', '4']),
            ('t=1&t=2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', True, ['1', '', '2', '3', '4']),
            ('t=1,2&t=3,4,,5', False, ['1', '2', '3', '4', '5']),
            ('t=1&t=,1,4,,5', False, ['1', '1', '4', '5']),
            ('t=1&t=,1,4,,5', True, ['1', '', '1', '4', '', '5']),
            (
                't=1&t=,1,4,,5&t=a,b,c',
                True,
                ['1', '', '1', '4', '', '5', 'a', 'b', 'c'],
            ),
        ],
    )
    def test_option_auto_parse_qs_csv_multiple_fields_true(
        self,
        simulate_request,
        client,
        resource,
        qs,
        keep_blank,
        expected,
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a062fb50>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0d956c0>, 'CHECK...56c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0d956c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a0589900>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___ TestQueryParams.test_has_param[simulate_request_post_query_params-asgi] ____

self = <test_query_params.TestQueryParams object at 0x7f09b56ee590>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f09ee43f220>
resource = <test_query_params.Resource object at 0x7f09ee43d060>

    def test_has_param(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:947: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af53df4c0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5253a30>, 'CHECK...3a30>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5253a30>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09ee43d060>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ TestQueryParams.test_blank[simulate_request_get_query_params-asgi] ______

self = <test_query_params.TestQueryParams object at 0x7f09b5822d10>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f09a0bed390>
resource = <test_query_params.Resource object at 0x7f09a0beeb30>

    def test_blank(self, simulate_request, client, resource):
        query_string = 'marker='
>       client.app.add_route('/', resource)

tests/test_query_params.py:118: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a06c93f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5250820>, 'CHECK...0820>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5250820>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a0beeb30>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_multiple_keys_as_float[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7f09b56aa3e0>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f09a050dcf0>
resource = <test_query_params.Resource object at 0x7f09a050e920>

    def test_multiple_keys_as_float(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:779: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a06c90e0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5236950>, 'CHECK...6950>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5236950>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a050e920>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____ TestQueryParams.test_default[simulate_request_post_query_params-asgi] _____

self = <test_query_params.TestQueryParams object at 0x7f09b5822f80>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f09ee4205e0>
resource = <test_query_params.Resource object at 0x7f09ee423d60>

    def test_default(self, simulate_request, client, resource):
        default = 'foobar'
        query_string = ''
>       client.app.add_route('/', resource)  # TODO: DRY up this setup logic

tests/test_query_params.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af41e93f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5234ca0>, 'CHECK...4ca0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5234ca0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09ee423d60>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_list_type_blank[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7f09b56a8f10>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f09a097c1c0>
resource = <test_query_params.Resource object at 0x7f09a097f2b0>

    def test_list_type_blank(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:652: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af526f990>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5251f30>, 'CHECK...1f30>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5251f30>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a097f2b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_date_invalid[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7f09b56ab880>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f09a0900280>
resource = <test_query_params.Resource object at 0x7f09a0903df0>

    def test_get_date_invalid(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:835: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a06b9070>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0c82290>, 'CHECK...2290>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0c82290>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a0903df0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ TestQueryParams.test_none[simulate_request_post_query_params-asgi] ______

self = <test_query_params.TestQueryParams object at 0x7f09b5822bc0>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f09a06b27a0>
resource = <test_query_params.Resource object at 0x7f09a06b3280>

    def test_none(self, simulate_request, client, resource):
        query_string = ''
>       client.app.add_route('/', resource)  # TODO: DRY up this setup logic

tests/test_query_params.py:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a06b9850>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5236950>, 'CHECK...6950>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5236950>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a06b3280>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_percent_encoded[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7f09b5823a00>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f09a0617430>
resource = <test_query_params.Resource object at 0x7f09a06160e0>

    def test_percent_encoded(self, simulate_request, client, resource):
        query_string = 'id=23,42&q=%e8%b1%86+%e7%93%a3'
>       client.app.add_route('/', resource)

tests/test_query_params.py:144: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a07963b0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5253a30>, 'CHECK...3a30>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5253a30>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a06160e0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_get_query_params-asgi-t=1&t=,1,4,,5&t=a,b,c-True-expected8] _

self = <test_query_params.TestQueryParams object at 0x7f09b585cc40>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f09a0976a70>
resource = <test_query_params.Resource object at 0x7f09a0976380>
qs = 't=1&t=,1,4,,5&t=a,b,c', keep_blank = True
expected = ['1', '', '1', '4', '', '5', ...]

    @pytest.mark.parametrize(
        'qs, keep_blank, expected',
        [
            ('t=1&t=3,4', False, ['1', '3', '4']),
            ('t=1&t=2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', True, ['1', '', '2', '3', '4']),
            ('t=1,2&t=3,4,,5', False, ['1', '2', '3', '4', '5']),
            ('t=1&t=,1,4,,5', False, ['1', '1', '4', '5']),
            ('t=1&t=,1,4,,5', True, ['1', '', '1', '4', '', '5']),
            (
                't=1&t=,1,4,,5&t=a,b,c',
                True,
                ['1', '', '1', '4', '', '5', 'a', 'b', 'c'],
            ),
        ],
    )
    def test_option_auto_parse_qs_csv_multiple_fields_true(
        self,
        simulate_request,
        client,
        resource,
        qs,
        keep_blank,
        expected,
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a06c93f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52501f0>, 'CHECK...01f0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52501f0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a0976380>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_default_auto_parse_csv_behaviour[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7f09b585dc30>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f09a09de5c0>
resource = <test_query_params.Resource object at 0x7f09a09dcd60>

    def test_default_auto_parse_csv_behaviour(self, simulate_request, client, resource):
>       client.app.add_route('/', resource=resource)

tests/test_query_params.py:279: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a062e1f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5234ca0>, 'CHECK...4ca0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5234ca0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a09dcd60>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_multiple_form_keys_as_list[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7f09b56aa7a0>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f09a0b988e0>
resource = <test_query_params.Resource object at 0x7f09a0b981c0>

    def test_multiple_form_keys_as_list(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:786: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a06bd070>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5235000>, 'CHECK...5000>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5235000>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a0b981c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_get_query_params-asgi-t=1,2&t=3,4,,5-False-expected5] _

self = <test_query_params.TestQueryParams object at 0x7f09b585ca90>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f09a050cf40>
resource = <test_query_params.Resource object at 0x7f09a050cb80>
qs = 't=1,2&t=3,4,,5', keep_blank = False, expected = ['1', '2', '3', '4', '5']

    @pytest.mark.parametrize(
        'qs, keep_blank, expected',
        [
            ('t=1&t=3,4', False, ['1', '3', '4']),
            ('t=1&t=2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', True, ['1', '', '2', '3', '4']),
            ('t=1,2&t=3,4,,5', False, ['1', '2', '3', '4', '5']),
            ('t=1&t=,1,4,,5', False, ['1', '1', '4', '5']),
            ('t=1&t=,1,4,,5', True, ['1', '', '1', '4', '', '5']),
            (
                't=1&t=,1,4,,5&t=a,b,c',
                True,
                ['1', '', '1', '4', '', '5', 'a', 'b', 'c'],
            ),
        ],
    )
    def test_option_auto_parse_qs_csv_multiple_fields_true(
        self,
        simulate_request,
        client,
        resource,
        qs,
        keep_blank,
        expected,
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af41b3840>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5251360>, 'CHECK...1360>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5251360>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a050cb80>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ TestQueryParams.test_int[simulate_request_post_query_params-asgi] _______

self = <test_query_params.TestQueryParams object at 0x7f09b585ecb0>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f09a05882e0>
resource = <test_query_params.Resource object at 0x7f09a058aad0>

    def test_int(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:350: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a06ba6c0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0658ca0>, 'CHECK...8ca0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0658ca0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a058aad0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_required[simulate_request_get_query_params-asgi-get_param_as_uuid] _

self = <test_query_params.TestQueryParams object at 0x7f09b585ee60>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f0af3fdb6d0>
resource = <test_query_params.Resource object at 0x7f0af3fdb2b0>
method_name = 'get_param_as_uuid'

    @pytest.mark.parametrize(
        'method_name',
        [
            'get_param',
            'get_param_as_int',
            'get_param_as_float',
            'get_param_as_uuid',
            'get_param_as_bool',
            'get_param_as_list',
        ],
    )
    def test_required(self, simulate_request, client, resource, method_name):
>       client.app.add_route('/', resource)

tests/test_query_params.py:334: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af526e1f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a065b9a0>, 'CHECK...b9a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a065b9a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f0af3fdb2b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_get_query_params-asgi-t=1&t=3,4-False-expected0] _

self = <test_query_params.TestQueryParams object at 0x7f09b585c7c0>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f0af3f6ebf0>
resource = <test_query_params.Resource object at 0x7f0af3f6f9d0>
qs = 't=1&t=3,4', keep_blank = False, expected = ['1', '3', '4']

    @pytest.mark.parametrize(
        'qs, keep_blank, expected',
        [
            ('t=1&t=3,4', False, ['1', '3', '4']),
            ('t=1&t=2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', True, ['1', '', '2', '3', '4']),
            ('t=1,2&t=3,4,,5', False, ['1', '2', '3', '4', '5']),
            ('t=1&t=,1,4,,5', False, ['1', '1', '4', '5']),
            ('t=1&t=,1,4,,5', True, ['1', '', '1', '4', '', '5']),
            (
                't=1&t=,1,4,,5&t=a,b,c',
                True,
                ['1', '', '1', '4', '', '5', 'a', 'b', 'c'],
            ),
        ],
    )
    def test_option_auto_parse_qs_csv_multiple_fields_true(
        self,
        simulate_request,
        client,
        resource,
        qs,
        keep_blank,
        expected,
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af526d000>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a065bf40>, 'CHECK...bf40>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a065bf40>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f0af3f6f9d0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_datetime_valid_with_format[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7f09b56aa410>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f09b5512560>
resource = <test_query_params.Resource object at 0x7f09b5511d80>

    def test_get_datetime_valid_with_format(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:860: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af41b2c70>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a065a320>, 'CHECK...a320>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a065a320>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09b5511d80>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____ TestQueryParams.test_boolean[simulate_request_get_query_params-asgi] _____

self = <test_query_params.TestQueryParams object at 0x7f09b56a85e0>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f0af3e51b70>
resource = <test_query_params.Resource object at 0x7f0af3e505e0>

    def test_boolean(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:531: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af41b0c80>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a06597e0>, 'CHECK...97e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a06597e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f0af3e505e0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_get_query_params-asgi-t=1&t=,1,4,,5-True-expected7] _

self = <test_query_params.TestQueryParams object at 0x7f09b585cbb0>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f09ee43e6b0>
resource = <test_query_params.Resource object at 0x7f09ee43d720>
qs = 't=1&t=,1,4,,5', keep_blank = True, expected = ['1', '', '1', '4', '', '5']

    @pytest.mark.parametrize(
        'qs, keep_blank, expected',
        [
            ('t=1&t=3,4', False, ['1', '3', '4']),
            ('t=1&t=2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', True, ['1', '', '2', '3', '4']),
            ('t=1,2&t=3,4,,5', False, ['1', '2', '3', '4', '5']),
            ('t=1&t=,1,4,,5', False, ['1', '1', '4', '5']),
            ('t=1&t=,1,4,,5', True, ['1', '', '1', '4', '', '5']),
            (
                't=1&t=,1,4,,5&t=a,b,c',
                True,
                ['1', '', '1', '4', '', '5', 'a', 'b', 'c'],
            ),
        ],
    )
    def test_option_auto_parse_qs_csv_multiple_fields_true(
        self,
        simulate_request,
        client,
        resource,
        qs,
        keep_blank,
        expected,
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a06bb450>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a06409d0>, 'CHECK...09d0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a06409d0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09ee43d720>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_get_query_params-asgi-t=1,,2&t=3,4-False-expected3] _

self = <test_query_params.TestQueryParams object at 0x7f09b585c970>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f09ee45df30>
resource = <test_query_params.Resource object at 0x7f09ee45df60>
qs = 't=1,,2&t=3,4', keep_blank = False, expected = ['1', '2', '3', '4']

    @pytest.mark.parametrize(
        'qs, keep_blank, expected',
        [
            ('t=1&t=3,4', False, ['1', '3', '4']),
            ('t=1&t=2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', True, ['1', '', '2', '3', '4']),
            ('t=1,2&t=3,4,,5', False, ['1', '2', '3', '4', '5']),
            ('t=1&t=,1,4,,5', False, ['1', '1', '4', '5']),
            ('t=1&t=,1,4,,5', True, ['1', '', '1', '4', '', '5']),
            (
                't=1&t=,1,4,,5&t=a,b,c',
                True,
                ['1', '', '1', '4', '', '5', 'a', 'b', 'c'],
            ),
        ],
    )
    def test_option_auto_parse_qs_csv_multiple_fields_true(
        self,
        simulate_request,
        client,
        resource,
        qs,
        keep_blank,
        expected,
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af5239460>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5237400>, 'CHECK...7400>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5237400>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09ee45df60>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_required[simulate_request_post_query_params-asgi-get_param_as_list] _

self = <test_query_params.TestQueryParams object at 0x7f09b585f640>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f09a0b5e020>
resource = <test_query_params.Resource object at 0x7f09a0b5ffa0>
method_name = 'get_param_as_list'

    @pytest.mark.parametrize(
        'method_name',
        [
            'get_param',
            'get_param_as_int',
            'get_param_as_float',
            'get_param_as_uuid',
            'get_param_as_bool',
            'get_param_as_list',
        ],
    )
    def test_required(self, simulate_request, client, resource, method_name):
>       client.app.add_route('/', resource)

tests/test_query_params.py:334: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af5238430>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a065bd90>, 'CHECK...bd90>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a065bd90>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a0b5ffa0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__ TestQueryParams.test_allowed_names[simulate_request_get_query_params-asgi] __

self = <test_query_params.TestQueryParams object at 0x7f09b585e3b0>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f09a092fa00>
resource = <test_query_params.Resource object at 0x7f09a092db10>

    def test_allowed_names(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:301: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af523b0d0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0659a20>, 'CHECK...9a20>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0659a20>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a092db10>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_required[simulate_request_post_query_params-asgi-get_param_as_int] _

self = <test_query_params.TestQueryParams object at 0x7f09b585f400>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f0af3e506d0>
resource = <test_query_params.Resource object at 0x7f0af3e524a0>
method_name = 'get_param_as_int'

    @pytest.mark.parametrize(
        'method_name',
        [
            'get_param',
            'get_param_as_int',
            'get_param_as_float',
            'get_param_as_uuid',
            'get_param_as_bool',
            'get_param_as_list',
        ],
    )
    def test_required(self, simulate_request, client, resource, method_name):
>       client.app.add_route('/', resource)

tests/test_query_params.py:334: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af5239af0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0658d30>, 'CHECK...8d30>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0658d30>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f0af3e524a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_dict_invalid[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7f09b56ed8d0>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f09a054e7a0>
resource = <test_query_params.Resource object at 0x7f09a054c7c0>

    def test_get_dict_invalid(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:918: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af523a9d0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a065beb0>, 'CHECK...beb0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a065beb0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a054c7c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_post_query_params-asgi-t=1,2&t=3,4-False-expected2] _

self = <test_query_params.TestQueryParams object at 0x7f09b585d300>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f09a0511330>
resource = <test_query_params.Resource object at 0x7f09a05118d0>
qs = 't=1,2&t=3,4', keep_blank = False, expected = ['1', '2', '3', '4']

    @pytest.mark.parametrize(
        'qs, keep_blank, expected',
        [
            ('t=1&t=3,4', False, ['1', '3', '4']),
            ('t=1&t=2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', True, ['1', '', '2', '3', '4']),
            ('t=1,2&t=3,4,,5', False, ['1', '2', '3', '4', '5']),
            ('t=1&t=,1,4,,5', False, ['1', '1', '4', '5']),
            ('t=1&t=,1,4,,5', True, ['1', '', '1', '4', '', '5']),
            (
                't=1&t=,1,4,,5&t=a,b,c',
                True,
                ['1', '', '1', '4', '', '5', 'a', 'b', 'c'],
            ),
        ],
    )
    def test_option_auto_parse_qs_csv_multiple_fields_true(
        self,
        simulate_request,
        client,
        resource,
        qs,
        keep_blank,
        expected,
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af526fdf0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0658a60>, 'CHECK...8a60>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0658a60>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a05118d0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_date_valid[simulate_request_get_query_params-asgi] __

self = <test_query_params.TestQueryParams object at 0x7f09b56aab60>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f09a05b8520>
resource = <test_query_params.Resource object at 0x7f09a05bb2e0>

    def test_get_date_valid(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:799: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af41b19a0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a06404c0>, 'CHECK...04c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a06404c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a05bb2e0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_required[simulate_request_post_query_params-asgi-get_param_as_bool] _

self = <test_query_params.TestQueryParams object at 0x7f09b585f5b0>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f09ee53f670>
resource = <test_query_params.Resource object at 0x7f09ee53f6d0>
method_name = 'get_param_as_bool'

    @pytest.mark.parametrize(
        'method_name',
        [
            'get_param',
            'get_param_as_int',
            'get_param_as_float',
            'get_param_as_uuid',
            'get_param_as_bool',
            'get_param_as_list',
        ],
    )
    def test_required(self, simulate_request, client, resource, method_name):
>       client.app.add_route('/', resource)

tests/test_query_params.py:334: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a060a180>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52536d0>, 'CHECK...36d0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52536d0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09ee53f6d0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_list_transformer[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7f09b56a92a0>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f09a054ce20>
resource = <test_query_params.Resource object at 0x7f09a054c880>

    def test_list_transformer(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:702: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af523be60>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a065aa70>, 'CHECK...aa70>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a065aa70>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a054c880>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______ TestQueryParams.test_int[simulate_request_get_query_params-asgi] _______

self = <test_query_params.TestQueryParams object at 0x7f09b57f2c80>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f09a05a6f50>
resource = <test_query_params.Resource object at 0x7f09a05a4070>

    def test_int(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:350: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af523a1f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0659000>, 'CHECK...9000>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0659000>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a05a4070>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_get_query_params-asgi-t=1,,2&t=3,4-True-expected4] _

self = <test_query_params.TestQueryParams object at 0x7f09b585ca00>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f09b5511ae0>
resource = <test_query_params.Resource object at 0x7f09b5513310>
qs = 't=1,,2&t=3,4', keep_blank = True, expected = ['1', '', '2', '3', '4']

    @pytest.mark.parametrize(
        'qs, keep_blank, expected',
        [
            ('t=1&t=3,4', False, ['1', '3', '4']),
            ('t=1&t=2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', True, ['1', '', '2', '3', '4']),
            ('t=1,2&t=3,4,,5', False, ['1', '2', '3', '4', '5']),
            ('t=1&t=,1,4,,5', False, ['1', '1', '4', '5']),
            ('t=1&t=,1,4,,5', True, ['1', '', '1', '4', '', '5']),
            (
                't=1&t=,1,4,,5&t=a,b,c',
                True,
                ['1', '', '1', '4', '', '5', 'a', 'b', 'c'],
            ),
        ],
    )
    def test_option_auto_parse_qs_csv_multiple_fields_true(
        self,
        simulate_request,
        client,
        resource,
        qs,
        keep_blank,
        expected,
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af526da80>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a065a320>, 'CHECK...a320>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a065a320>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09b5513310>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_datetime_store[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7f09b56ec430>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f09a050ce80>
resource = <test_query_params.Resource object at 0x7f09a050fa90>

    def test_get_datetime_store(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:871: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a06b8900>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0642e60>, 'CHECK...2e60>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0642e60>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a050fa90>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____ TestQueryParams.test_default[simulate_request_get_query_params-asgi] _____

self = <test_query_params.TestQueryParams object at 0x7f09b5822950>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f09a05e35e0>
resource = <test_query_params.Resource object at 0x7f09a05e1960>

    def test_default(self, simulate_request, client, resource):
        default = 'foobar'
        query_string = ''
>       client.app.add_route('/', resource)  # TODO: DRY up this setup logic

tests/test_query_params.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af41b1e70>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a06420e0>, 'CHECK...20e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a06420e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a05e1960>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_list_transformer[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7f09b56a98d0>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f09a0950580>
resource = <test_query_params.Resource object at 0x7f09a09534f0>

    def test_list_transformer(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:702: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af52fc200>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a06427a0>, 'CHECK...27a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a06427a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a09534f0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_datetime_valid[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7f09b56ec2b0>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f09a06f2f50>
resource = <test_query_params.Resource object at 0x7f09a06f3850>

    def test_get_datetime_valid(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:845: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af52fc970>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a065a9e0>, 'CHECK...a9e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a065a9e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a06f3850>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_datetime_store[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7f09b56ecc10>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f09ee45feb0>
resource = <test_query_params.Resource object at 0x7f09ee45c2e0>

    def test_get_datetime_store(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:871: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af526d5b0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0643520>, 'CHECK...3520>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0643520>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09ee45c2e0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____ TestQueryParams.test_int_neg[simulate_request_get_query_params-asgi] _____

self = <test_query_params.TestQueryParams object at 0x7f09b585fa60>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f09a05b5720>
resource = <test_query_params.Resource object at 0x7f09a05b75b0>

    def test_int_neg(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:402: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af5239cb0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0641510>, 'CHECK...1510>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0641510>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a05b75b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_dict_missing_param[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7f09b56ed750>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f0af404a410>
resource = <test_query_params.Resource object at 0x7f0af404a4d0>

    def test_get_dict_missing_param(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:900: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af41b0c80>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0640790>, 'CHECK...0790>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0640790>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f0af404a4d0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_required[simulate_request_get_query_params-asgi-get_param_as_bool] _

self = <test_query_params.TestQueryParams object at 0x7f09b585eef0>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f09a09dc430>
resource = <test_query_params.Resource object at 0x7f09a0b9d9c0>
method_name = 'get_param_as_bool'

    @pytest.mark.parametrize(
        'method_name',
        [
            'get_param',
            'get_param_as_int',
            'get_param_as_float',
            'get_param_as_uuid',
            'get_param_as_bool',
            'get_param_as_list',
        ],
    )
    def test_required(self, simulate_request, client, resource, method_name):
>       client.app.add_route('/', resource)

tests/test_query_params.py:334: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af52fec70>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0643910>, 'CHECK...3910>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0643910>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a0b9d9c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_multiple_keys_as_int[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7f09b56aa650>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f09a0512560>
resource = <test_query_params.Resource object at 0x7f09a0511f60>

    def test_multiple_keys_as_int(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:772: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af52ff8b0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0641000>, 'CHECK...1000>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0641000>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a0511f60>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_get_query_params-asgi-t=1&t=,1,4,,5-False-expected6] _

self = <test_query_params.TestQueryParams object at 0x7f09b585cb20>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f09a0559000>
resource = <test_query_params.Resource object at 0x7f09a0558c70>
qs = 't=1&t=,1,4,,5', keep_blank = False, expected = ['1', '1', '4', '5']

    @pytest.mark.parametrize(
        'qs, keep_blank, expected',
        [
            ('t=1&t=3,4', False, ['1', '3', '4']),
            ('t=1&t=2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', True, ['1', '', '2', '3', '4']),
            ('t=1,2&t=3,4,,5', False, ['1', '2', '3', '4', '5']),
            ('t=1&t=,1,4,,5', False, ['1', '1', '4', '5']),
            ('t=1&t=,1,4,,5', True, ['1', '', '1', '4', '', '5']),
            (
                't=1&t=,1,4,,5&t=a,b,c',
                True,
                ['1', '', '1', '4', '', '5', 'a', 'b', 'c'],
            ),
        ],
    )
    def test_option_auto_parse_qs_csv_multiple_fields_true(
        self,
        simulate_request,
        client,
        resource,
        qs,
        keep_blank,
        expected,
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af52fe340>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0642f80>, 'CHECK...2f80>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0642f80>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a0558c70>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_date_missing_param[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7f09b56aaf20>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f09ee53de70>
resource = <test_query_params.Resource object at 0x7f09ee53f400>

    def test_get_date_missing_param(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:807: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af52ec430>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a06583a0>, 'CHECK...83a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a06583a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09ee53f400>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_multiple_keys_as_float[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7f09b56aaa10>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f09a0bc3f40>
resource = <test_query_params.Resource object at 0x7f09a0bc32b0>

    def test_multiple_keys_as_float(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:779: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af52eca50>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0640f70>, 'CHECK...0f70>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0640f70>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a0bc32b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________ TestQueryParams.test_get_param_as_json_handler_json[asgi] ___________

self = <test_query_params.TestQueryParams object at 0x7f09b56ed870>
client = <falcon.testing.client.TestClient object at 0x7f09a09c65c0>
resource = <test_query_params.Resource object at 0x7f09a09c5f30>

    def test_get_param_as_json_handler_json(self, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:927: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af5238430>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a06432e0>, 'CHECK...32e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a06432e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a09c5f30>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_multiple_form_keys[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7f09b56aa050>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f09ee5e7a00>
resource = <test_query_params.Resource object at 0x7f09ee5e52a0>

    def test_multiple_form_keys(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:751: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af52fe5e0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a06413f0>, 'CHECK...13f0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a06413f0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09ee5e52a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_multiple_keys_as_bool[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7f09b56aa290>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f09a06b1780>
resource = <test_query_params.Resource object at 0x7f09a06b2e90>

    def test_multiple_keys_as_bool(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:765: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af52fc190>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0640790>, 'CHECK...0790>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0640790>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a06b2e90>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_simple_true[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7f09b585c1c0>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f09a092fa90>
resource = <test_query_params.Resource object at 0x7f09a092fa00>

    def test_option_auto_parse_qs_csv_simple_true(
        self, simulate_request, client, resource
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:175: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af52fd700>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d0e50>, 'CHECK...0e50>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d0e50>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a092fa00>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____ TestQueryParams.test_float[simulate_request_post_query_params-asgi] ______

self = <test_query_params.TestQueryParams object at 0x7f09b56a80d0>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f09ee422350>
resource = <test_query_params.Resource object at 0x7f09ee4226b0>

    def test_float(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:426: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a06b9e00>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d0430>, 'CHECK...0430>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d0430>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09ee4226b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ TestQueryParams.test_none[simulate_request_get_query_params-asgi] _______

self = <test_query_params.TestQueryParams object at 0x7f09b58228f0>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f09a0bc1720>
resource = <test_query_params.Resource object at 0x7f09a0bc3610>

    def test_none(self, simulate_request, client, resource):
        query_string = ''
>       client.app.add_route('/', resource)  # TODO: DRY up this setup logic

tests/test_query_params.py:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a06bfd10>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0643ac0>, 'CHECK...3ac0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0643ac0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a0bc3610>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_simple_true[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7f09b5823b50>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f09a06f0d60>
resource = <test_query_params.Resource object at 0x7f09a06f01f0>

    def test_option_auto_parse_qs_csv_simple_true(
        self, simulate_request, client, resource
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:175: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af52efb50>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a06404c0>, 'CHECK...04c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a06404c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a06f01f0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_datetime_invalid[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7f09b56ec3d0>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f0af3f31db0>
resource = <test_query_params.Resource object at 0x7f0af3f30310>

    def test_get_datetime_invalid(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:882: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af52ef5a0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0643b50>, 'CHECK...3b50>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0643b50>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f0af3f30310>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_post_query_params-asgi-t=1&t=2&t=3,4-False-expected1] _

self = <test_query_params.TestQueryParams object at 0x7f09b585d270>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f09ee5929e0>
resource = <test_query_params.Resource object at 0x7f09ee590af0>
qs = 't=1&t=2&t=3,4', keep_blank = False, expected = ['1', '2', '3', '4']

    @pytest.mark.parametrize(
        'qs, keep_blank, expected',
        [
            ('t=1&t=3,4', False, ['1', '3', '4']),
            ('t=1&t=2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', True, ['1', '', '2', '3', '4']),
            ('t=1,2&t=3,4,,5', False, ['1', '2', '3', '4', '5']),
            ('t=1&t=,1,4,,5', False, ['1', '1', '4', '5']),
            ('t=1&t=,1,4,,5', True, ['1', '', '1', '4', '', '5']),
            (
                't=1&t=,1,4,,5&t=a,b,c',
                True,
                ['1', '', '1', '4', '', '5', 'a', 'b', 'c'],
            ),
        ],
    )
    def test_option_auto_parse_qs_csv_multiple_fields_true(
        self,
        simulate_request,
        client,
        resource,
        qs,
        keep_blank,
        expected,
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af52efd10>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d28c0>, 'CHECK...28c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d28c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09ee590af0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_allowed_names[simulate_request_post_query_params-asgi] __

self = <test_query_params.TestQueryParams object at 0x7f09b585dfc0>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f09a067a1d0>
resource = <test_query_params.Resource object at 0x7f09a067a440>

    def test_allowed_names(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:301: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af52ed690>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d1900>, 'CHECK...1900>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d1900>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a067a440>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_complex_false[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7f09b585dea0>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f09a061c970>
resource = <test_query_params.Resource object at 0x7f09a061e650>

    def test_option_auto_parse_qs_csv_complex_false(
        self, simulate_request, client, resource
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:245: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af52ff5a0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d0c10>, 'CHECK...0c10>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d0c10>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a061e650>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_complex_false[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7f09b585c790>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f09a0becdc0>
resource = <test_query_params.Resource object at 0x7f09a0befc40>

    def test_option_auto_parse_qs_csv_complex_false(
        self, simulate_request, client, resource
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:245: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af4190120>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a065a9e0>, 'CHECK...a9e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a065a9e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a0befc40>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_multiple_keys_as_bool[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7f09b56a9de0>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f0af3fda260>
resource = <test_query_params.Resource object at 0x7f0af3fdb6d0>

    def test_multiple_keys_as_bool(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:765: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af4192d50>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0640790>, 'CHECK...0790>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0640790>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f0af3fdb6d0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_required[simulate_request_post_query_params-asgi-get_param_as_float] _

self = <test_query_params.TestQueryParams object at 0x7f09b585f490>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f09a0589540>
resource = <test_query_params.Resource object at 0x7f09a058b1c0>
method_name = 'get_param_as_float'

    @pytest.mark.parametrize(
        'method_name',
        [
            'get_param',
            'get_param_as_int',
            'get_param_as_float',
            'get_param_as_uuid',
            'get_param_as_bool',
            'get_param_as_list',
        ],
    )
    def test_required(self, simulate_request, client, resource, method_name):
>       client.app.add_route('/', resource)

tests/test_query_params.py:334: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af4192a40>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d0f70>, 'CHECK...0f70>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d0f70>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a058b1c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_multiple_keys_as_int[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7f09b56a9630>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f09b5384a90>
resource = <test_query_params.Resource object at 0x7f09b5386f80>

    def test_multiple_keys_as_int(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:772: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af4190f90>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d1630>, 'CHECK...1630>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d1630>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09b5386f80>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_dict_missing_param[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7f09b56ed120>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f09a097ee90>
resource = <test_query_params.Resource object at 0x7f09a097c4f0>

    def test_get_dict_missing_param(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:900: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af4191d20>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d1360>, 'CHECK...1360>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d1360>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a097c4f0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_boolean_blank[simulate_request_post_query_params-asgi] __

self = <test_query_params.TestQueryParams object at 0x7f09b56a8d90>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f09a05b5a50>
resource = <test_query_params.Resource object at 0x7f09a05b6b90>

    def test_boolean_blank(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:591: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af52ecc80>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d2320>, 'CHECK...2320>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d2320>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a05b6b90>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________ TestQueryParams.test_get_param_as_json_no_handler_json[asgi] _________

self = <test_query_params.TestQueryParams object at 0x7f09b56ede40>
client = <falcon.testing.client.TestClient object at 0x7f09a0588bb0>
resource = <test_query_params.Resource object at 0x7f09a0589b40>

    def test_get_param_as_json_no_handler_json(self, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:938: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af52eece0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d2830>, 'CHECK...2830>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d2830>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a0589b40>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_post_query_params-asgi-t=1,,2&t=3,4-False-expected3] _

self = <test_query_params.TestQueryParams object at 0x7f09b585d390>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f09a056ecb0>
resource = <test_query_params.Resource object at 0x7f09a056cee0>
qs = 't=1,,2&t=3,4', keep_blank = False, expected = ['1', '2', '3', '4']

    @pytest.mark.parametrize(
        'qs, keep_blank, expected',
        [
            ('t=1&t=3,4', False, ['1', '3', '4']),
            ('t=1&t=2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', True, ['1', '', '2', '3', '4']),
            ('t=1,2&t=3,4,,5', False, ['1', '2', '3', '4', '5']),
            ('t=1&t=,1,4,,5', False, ['1', '1', '4', '5']),
            ('t=1&t=,1,4,,5', True, ['1', '', '1', '4', '', '5']),
            (
                't=1&t=,1,4,,5&t=a,b,c',
                True,
                ['1', '', '1', '4', '', '5', 'a', 'b', 'c'],
            ),
        ],
    )
    def test_option_auto_parse_qs_csv_multiple_fields_true(
        self,
        simulate_request,
        client,
        resource,
        qs,
        keep_blank,
        expected,
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af523a420>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d3e20>, 'CHECK...3e20>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d3e20>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a056cee0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_list_type_blank[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7f09b56a9510>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f09a05e3dc0>
resource = <test_query_params.Resource object at 0x7f09a05e2140>

    def test_list_type_blank(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:652: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af4191690>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0643b50>, 'CHECK...3b50>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0643b50>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a05e2140>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_percent_encoded[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7f09b58233d0>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f0af4049e40>
resource = <test_query_params.Resource object at 0x7f0af40499f0>

    def test_percent_encoded(self, simulate_request, client, resource):
        query_string = 'id=23,42&q=%e8%b1%86+%e7%93%a3'
>       client.app.add_route('/', resource)

tests/test_query_params.py:144: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af4193450>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d2320>, 'CHECK...2320>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d2320>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f0af40499f0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_required[simulate_request_get_query_params-asgi-get_param_as_list] _

self = <test_query_params.TestQueryParams object at 0x7f09b585ef80>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f09a0b5ef80>
resource = <test_query_params.Resource object at 0x7f09a0b5cee0>
method_name = 'get_param_as_list'

    @pytest.mark.parametrize(
        'method_name',
        [
            'get_param',
            'get_param_as_int',
            'get_param_as_float',
            'get_param_as_uuid',
            'get_param_as_bool',
            'get_param_as_list',
        ],
    )
    def test_required(self, simulate_request, client, resource, method_name):
>       client.app.add_route('/', resource)

tests/test_query_params.py:334: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af4190a50>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d3f40>, 'CHECK...3f40>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d3f40>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a0b5cee0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_post_query_params-asgi-t=1&t=,1,4,,5&t=a,b,c-True-expected8] _

self = <test_query_params.TestQueryParams object at 0x7f09b585d660>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f09a054ff40>
resource = <test_query_params.Resource object at 0x7f09a054ca00>
qs = 't=1&t=,1,4,,5&t=a,b,c', keep_blank = True
expected = ['1', '', '1', '4', '', '5', ...]

    @pytest.mark.parametrize(
        'qs, keep_blank, expected',
        [
            ('t=1&t=3,4', False, ['1', '3', '4']),
            ('t=1&t=2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', True, ['1', '', '2', '3', '4']),
            ('t=1,2&t=3,4,,5', False, ['1', '2', '3', '4', '5']),
            ('t=1&t=,1,4,,5', False, ['1', '1', '4', '5']),
            ('t=1&t=,1,4,,5', True, ['1', '', '1', '4', '', '5']),
            (
                't=1&t=,1,4,,5&t=a,b,c',
                True,
                ['1', '', '1', '4', '', '5', 'a', 'b', 'c'],
            ),
        ],
    )
    def test_option_auto_parse_qs_csv_multiple_fields_true(
        self,
        simulate_request,
        client,
        resource,
        qs,
        keep_blank,
        expected,
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af52fdd20>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d0550>, 'CHECK...0550>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d0550>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a054ca00>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____ TestQueryParams.test_boolean[simulate_request_post_query_params-asgi] _____

self = <test_query_params.TestQueryParams object at 0x7f09b56a8c10>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f09a094cac0>
resource = <test_query_params.Resource object at 0x7f09a094ee00>

    def test_boolean(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:531: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af52fc820>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d32e0>, 'CHECK...32e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d32e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a094ee00>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____ TestQueryParams.test_has_param[simulate_request_get_query_params-asgi] ____

self = <test_query_params.TestQueryParams object at 0x7f09b56ee0b0>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f0af40816c0>
resource = <test_query_params.Resource object at 0x7f0af40810f0>

    def test_has_param(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:947: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af52fdb60>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5284310>, 'CHECK...4310>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5284310>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f0af40810f0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ TestQueryParams.test_uuid[simulate_request_get_query_params-asgi] _______

self = <test_query_params.TestQueryParams object at 0x7f09b56a8250>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f09a05bad70>
resource = <test_query_params.Resource object at 0x7f09a05bbbe0>

    def test_uuid(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:502: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af419fae0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5284280>, 'CHECK...4280>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5284280>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a05bbbe0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_multiple_form_keys[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7f09b56a9a20>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f09ee5e7490>
resource = <test_query_params.Resource object at 0x7f09ee5e5450>

    def test_multiple_form_keys(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:751: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af419d5b0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d0790>, 'CHECK...0790>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d0790>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09ee5e5450>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_dict_store[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7f09b56edb10>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f09a0b5f010>
resource = <test_query_params.Resource object at 0x7f09a0b5f4c0>

    def test_get_dict_store(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:908: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af419e8f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d3f40>, 'CHECK...3f40>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d3f40>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a0b5f4c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_datetime_invalid[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7f09b56ecfd0>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f09a09ed9c0>
resource = <test_query_params.Resource object at 0x7f09a09ed960>

    def test_get_datetime_invalid(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:882: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af419f3e0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d3eb0>, 'CHECK...3eb0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d3eb0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a09ed960>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_post_query_params-asgi-t=1&t=3,4-False-expected0] _

self = <test_query_params.TestQueryParams object at 0x7f09b585d1e0>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f09a0558310>
resource = <test_query_params.Resource object at 0x7f09a0558220>
qs = 't=1&t=3,4', keep_blank = False, expected = ['1', '3', '4']

    @pytest.mark.parametrize(
        'qs, keep_blank, expected',
        [
            ('t=1&t=3,4', False, ['1', '3', '4']),
            ('t=1&t=2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', True, ['1', '', '2', '3', '4']),
            ('t=1,2&t=3,4,,5', False, ['1', '2', '3', '4', '5']),
            ('t=1&t=,1,4,,5', False, ['1', '1', '4', '5']),
            ('t=1&t=,1,4,,5', True, ['1', '', '1', '4', '', '5']),
            (
                't=1&t=,1,4,,5&t=a,b,c',
                True,
                ['1', '', '1', '4', '', '5', 'a', 'b', 'c'],
            ),
        ],
    )
    def test_option_auto_parse_qs_csv_multiple_fields_true(
        self,
        simulate_request,
        client,
        resource,
        qs,
        keep_blank,
        expected,
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af419dfc0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d3910>, 'CHECK...3910>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d3910>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a0558220>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____ TestQueryParams.test_list_type[simulate_request_get_query_params-asgi] ____

self = <test_query_params.TestQueryParams object at 0x7f09b56a8ee0>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f09a05b4e20>
resource = <test_query_params.Resource object at 0x7f09a0951840>

    def test_list_type(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:609: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af52fc7b0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52865f0>, 'CHECK...65f0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52865f0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a0951840>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_required[simulate_request_get_query_params-asgi-get_param_as_int] _

self = <test_query_params.TestQueryParams object at 0x7f09b585ed40>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f09a0974d90>
resource = <test_query_params.Resource object at 0x7f09a0974460>
method_name = 'get_param_as_int'

    @pytest.mark.parametrize(
        'method_name',
        [
            'get_param',
            'get_param_as_int',
            'get_param_as_float',
            'get_param_as_uuid',
            'get_param_as_bool',
            'get_param_as_list',
        ],
    )
    def test_required(self, simulate_request, client, resource, method_name):
>       client.app.add_route('/', resource)

tests/test_query_params.py:334: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af41926c0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52844c0>, 'CHECK...44c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52844c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a0974460>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_required[simulate_request_post_query_params-asgi-get_param_as_uuid] _

self = <test_query_params.TestQueryParams object at 0x7f09b585f520>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f09a0b5f640>
resource = <test_query_params.Resource object at 0x7f09a0b5eaa0>
method_name = 'get_param_as_uuid'

    @pytest.mark.parametrize(
        'method_name',
        [
            'get_param',
            'get_param_as_int',
            'get_param_as_float',
            'get_param_as_uuid',
            'get_param_as_bool',
            'get_param_as_list',
        ],
    )
    def test_required(self, simulate_request, client, resource, method_name):
>       client.app.add_route('/', resource)

tests/test_query_params.py:334: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af4191310>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5287d90>, 'CHECK...7d90>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5287d90>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a0b5eaa0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_multiple_form_keys_as_list[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7f09b56aadd0>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f09ee4229e0>
resource = <test_query_params.Resource object at 0x7f09ee423970>

    def test_multiple_form_keys_as_list(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:786: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af4193370>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d2200>, 'CHECK...2200>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d2200>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09ee423970>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_dict_store[simulate_request_get_query_params-asgi] __

self = <test_query_params.TestQueryParams object at 0x7f09b56ed4e0>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f09a097c820>
resource = <test_query_params.Resource object at 0x7f09a097ebc0>

    def test_get_dict_store(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:908: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af52ee960>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52876d0>, 'CHECK...76d0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52876d0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a097ebc0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____ TestQueryParams.test_float_neg[simulate_request_get_query_params-asgi] ____

self = <test_query_params.TestQueryParams object at 0x7f09b56a8220>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f09a05b40d0>
resource = <test_query_params.Resource object at 0x7f09a05b7160>

    def test_float_neg(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:478: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af419f530>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d03a0>, 'CHECK...03a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d03a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a05b7160>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____ TestQueryParams.test_simple[simulate_request_get_query_params-asgi] ______

self = <test_query_params.TestQueryParams object at 0x7f09b5822d40>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f09a06b7a90>
resource = <test_query_params.Resource object at 0x7f09a06b4ca0>

    def test_simple(self, simulate_request, client, resource):
        query_string = 'marker=deadbeef&limit=25'
>       client.app.add_route('/', resource)

tests/test_query_params.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af419c430>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5284b80>, 'CHECK...4b80>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5284b80>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a06b4ca0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____ TestQueryParams.test_simple[simulate_request_post_query_params-asgi] _____

self = <test_query_params.TestQueryParams object at 0x7f09b5823640>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f09a07197b0>
resource = <test_query_params.Resource object at 0x7f09a071a710>

    def test_simple(self, simulate_request, client, resource):
        query_string = 'marker=deadbeef&limit=25'
>       client.app.add_route('/', resource)

tests/test_query_params.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af52fdd20>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5287640>, 'CHECK...7640>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5287640>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a071a710>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_post_query_params-asgi-t=1&t=,1,4,,5-False-expected6] _

self = <test_query_params.TestQueryParams object at 0x7f09b585d540>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f09a067b5e0>
resource = <test_query_params.Resource object at 0x7f09a06793c0>
qs = 't=1&t=,1,4,,5', keep_blank = False, expected = ['1', '1', '4', '5']

    @pytest.mark.parametrize(
        'qs, keep_blank, expected',
        [
            ('t=1&t=3,4', False, ['1', '3', '4']),
            ('t=1&t=2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', True, ['1', '', '2', '3', '4']),
            ('t=1,2&t=3,4,,5', False, ['1', '2', '3', '4', '5']),
            ('t=1&t=,1,4,,5', False, ['1', '1', '4', '5']),
            ('t=1&t=,1,4,,5', True, ['1', '', '1', '4', '', '5']),
            (
                't=1&t=,1,4,,5&t=a,b,c',
                True,
                ['1', '', '1', '4', '', '5', 'a', 'b', 'c'],
            ),
        ],
    )
    def test_option_auto_parse_qs_csv_multiple_fields_true(
        self,
        simulate_request,
        client,
        resource,
        qs,
        keep_blank,
        expected,
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af41bac00>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52865f0>, 'CHECK...65f0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52865f0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a06793c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_simple_false[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7f09b5823790>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f09a0592d40>
resource = <test_query_params.Resource object at 0x7f09a0591cc0>

    def test_option_auto_parse_qs_csv_simple_false(
        self, simulate_request, client, resource
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:160: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af41bab90>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5287ac0>, 'CHECK...7ac0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5287ac0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a0591cc0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_simple_false[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7f09b5823dc0>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f09a0950df0>
resource = <test_query_params.Resource object at 0x7f09a09534f0>

    def test_option_auto_parse_qs_csv_simple_false(
        self, simulate_request, client, resource
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:160: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af41ba3b0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5286dd0>, 'CHECK...6dd0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5286dd0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a09534f0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_param_property[simulate_request_get_query_params-asgi] __

self = <test_query_params.TestQueryParams object at 0x7f09b56a9660>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f09ee5e6bc0>
resource = <test_query_params.Resource object at 0x7f09ee5e6fb0>

    def test_param_property(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:738: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af41ba880>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5287f40>, 'CHECK...7f40>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5287f40>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09ee5e6fb0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_datetime_missing_param[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7f09b56ec070>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f09a06f2290>
resource = <test_query_params.Resource object at 0x7f09a06f02b0>

    def test_get_datetime_missing_param(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:853: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af41ba110>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5287520>, 'CHECK...7520>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5287520>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a06f02b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_datetime_valid_with_format[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7f09b56abc10>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f09ee5c8580>
resource = <test_query_params.Resource object at 0x7f09ee5c9a20>

    def test_get_datetime_valid_with_format(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:860: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af419d460>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5287400>, 'CHECK...7400>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5287400>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09ee5c9a20>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ TestQueryParams.test_float[simulate_request_get_query_params-asgi] ______

self = <test_query_params.TestQueryParams object at 0x7f09b585fa90>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f09a0b5dc60>
resource = <test_query_params.Resource object at 0x7f09a0b5fd90>

    def test_float(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:426: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af419e180>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52876d0>, 'CHECK...76d0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52876d0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a0b5fd90>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_date_valid_with_format[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7f09b56ab730>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f09ee406770>
resource = <test_query_params.Resource object at 0x7f09ee406590>

    def test_get_date_valid_with_format(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:814: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af4190970>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5285fc0>, 'CHECK...5fc0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5285fc0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09ee406590>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_post_query_params-asgi-t=1,2&t=3,4,,5-False-expected5] _

self = <test_query_params.TestQueryParams object at 0x7f09b585d4b0>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f09a06b1300>
resource = <test_query_params.Resource object at 0x7f09a06b3760>
qs = 't=1,2&t=3,4,,5', keep_blank = False, expected = ['1', '2', '3', '4', '5']

    @pytest.mark.parametrize(
        'qs, keep_blank, expected',
        [
            ('t=1&t=3,4', False, ['1', '3', '4']),
            ('t=1&t=2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', True, ['1', '', '2', '3', '4']),
            ('t=1,2&t=3,4,,5', False, ['1', '2', '3', '4', '5']),
            ('t=1&t=,1,4,,5', False, ['1', '1', '4', '5']),
            ('t=1&t=,1,4,,5', True, ['1', '', '1', '4', '', '5']),
            (
                't=1&t=,1,4,,5&t=a,b,c',
                True,
                ['1', '', '1', '4', '', '5', 'a', 'b', 'c'],
            ),
        ],
    )
    def test_option_auto_parse_qs_csv_multiple_fields_true(
        self,
        simulate_request,
        client,
        resource,
        qs,
        keep_blank,
        expected,
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af41b8890>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af4184d30>, 'CHECK...4d30>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af4184d30>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a06b3760>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_date_missing_param[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7f09b56aaf50>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f09a097d360>
resource = <test_query_params.Resource object at 0x7f09a097e650>

    def test_get_date_missing_param(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:807: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af4147530>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d0dc0>, 'CHECK...0dc0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d0dc0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a097e650>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_post_query_params-asgi-t=1&t=,1,4,,5-True-expected7] _

self = <test_query_params.TestQueryParams object at 0x7f09b585d5d0>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f0af3f8be80>
resource = <test_query_params.Resource object at 0x7f0af3f88fa0>
qs = 't=1&t=,1,4,,5', keep_blank = True, expected = ['1', '', '1', '4', '', '5']

    @pytest.mark.parametrize(
        'qs, keep_blank, expected',
        [
            ('t=1&t=3,4', False, ['1', '3', '4']),
            ('t=1&t=2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', True, ['1', '', '2', '3', '4']),
            ('t=1,2&t=3,4,,5', False, ['1', '2', '3', '4', '5']),
            ('t=1&t=,1,4,,5', False, ['1', '1', '4', '5']),
            ('t=1&t=,1,4,,5', True, ['1', '', '1', '4', '', '5']),
            (
                't=1&t=,1,4,,5&t=a,b,c',
                True,
                ['1', '', '1', '4', '', '5', 'a', 'b', 'c'],
            ),
        ],
    )
    def test_option_auto_parse_qs_csv_multiple_fields_true(
        self,
        simulate_request,
        client,
        resource,
        qs,
        keep_blank,
        expected,
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af41467a0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5287c70>, 'CHECK...7c70>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5287c70>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f0af3f88fa0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_datetime_valid[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7f09b56ec040>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f09ee5cab30>
resource = <test_query_params.Resource object at 0x7f09ee5ca2c0>

    def test_get_datetime_valid(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:845: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af419e180>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52844c0>, 'CHECK...44c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52844c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09ee5ca2c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_required[simulate_request_post_query_params-asgi-get_param] _

self = <test_query_params.TestQueryParams object at 0x7f09b585f370>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f09ee43dea0>
resource = <test_query_params.Resource object at 0x7f09ee43d2a0>
method_name = 'get_param'

    @pytest.mark.parametrize(
        'method_name',
        [
            'get_param',
            'get_param_as_int',
            'get_param_as_float',
            'get_param_as_uuid',
            'get_param_as_bool',
            'get_param_as_list',
        ],
    )
    def test_required(self, simulate_request, client, resource, method_name):
>       client.app.add_route('/', resource)

tests/test_query_params.py:334: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af41b9930>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5286d40>, 'CHECK...6d40>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5286d40>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09ee43d2a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__ TestQueryParams.test_boolean_blank[simulate_request_get_query_params-asgi] __

self = <test_query_params.TestQueryParams object at 0x7f09b5823f10>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f09a06f3fa0>
resource = <test_query_params.Resource object at 0x7f09a06f1e10>

    def test_boolean_blank(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:591: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af41b9380>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af4186320>, 'CHECK...6320>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af4186320>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a06f1e10>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_bad_percentage[simulate_request_get_query_params-asgi] __

self = <test_query_params.TestQueryParams object at 0x7f09b585dff0>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f09a09ed960>
resource = <test_query_params.Resource object at 0x7f09a09ed000>

    def test_bad_percentage(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:290: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af41459a0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af4185120>, 'CHECK...5120>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af4185120>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a09ed000>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_param_property[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7f09b56a9c90>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f0af3f8ae00>
resource = <test_query_params.Resource object at 0x7f0af3f8a0b0>

    def test_param_property(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:738: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af4146650>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af41848b0>, 'CHECK...48b0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af41848b0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f0af3f8a0b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_dict_invalid[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7f09b56edcf0>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f09a0b5c910>
resource = <test_query_params.Resource object at 0x7f09a0b5f580>

    def test_get_dict_invalid(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:918: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af4147a70>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5287f40>, 'CHECK...7f40>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5287f40>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a0b5f580>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_dict_valid[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7f09b56ed390>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f09a0b9a500>
resource = <test_query_params.Resource object at 0x7f09a0b9ae00>

    def test_get_dict_valid(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:892: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af4145e00>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5284c10>, 'CHECK...4c10>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5284c10>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a0b9ae00>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_false[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7f09b5823ee0>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f09a0bc1c00>
resource = <test_query_params.Resource object at 0x7f09a0bc3190>

    def test_option_auto_parse_qs_csv_multiple_fields_false(
        self, simulate_request, client, resource
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:191: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af41475a0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af41855a0>, 'CHECK...55a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af41855a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a0bc3190>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_dict_valid[simulate_request_get_query_params-asgi] __

self = <test_query_params.TestQueryParams object at 0x7f09b56ecd60>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f09a06b2680>
resource = <test_query_params.Resource object at 0x7f09a06b1630>

    def test_get_dict_valid(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:892: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af41b8e40>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af4187ac0>, 'CHECK...7ac0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af4187ac0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a06b1630>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____ TestQueryParams.test_int_neg[simulate_request_post_query_params-asgi] _____

self = <test_query_params.TestQueryParams object at 0x7f09b585fcd0>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f0af4080670>
resource = <test_query_params.Resource object at 0x7f0af40809a0>

    def test_int_neg(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:402: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af419ef10>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af4184310>, 'CHECK...4310>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af4184310>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f0af40809a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___ TestQueryParams.test_list_type[simulate_request_post_query_params-asgi] ____

self = <test_query_params.TestQueryParams object at 0x7f09b56a9150>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f09a0bb36a0>
resource = <test_query_params.Resource object at 0x7f09a0bb31c0>

    def test_list_type(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:609: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af4145bd0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af41879a0>, 'CHECK...79a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af41879a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a0bb31c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_datetime_missing_param[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7f09b56ec670>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f0af3f115d0>
resource = <test_query_params.Resource object at 0x7f0af3f100a0>

    def test_get_datetime_missing_param(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:853: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a05b3ca0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af4184b80>, 'CHECK...4b80>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af4184b80>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f0af3f100a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_required[simulate_request_get_query_params-asgi-get_param] _

self = <test_query_params.TestQueryParams object at 0x7f09b585ebc0>
simulate_request = <function simulate_request_get_query_params at 0x7f09b5807d90>
client = <falcon.testing.client.TestClient object at 0x7f09a07af700>
resource = <test_query_params.Resource object at 0x7f09a07ae740>
method_name = 'get_param'

    @pytest.mark.parametrize(
        'method_name',
        [
            'get_param',
            'get_param_as_int',
            'get_param_as_float',
            'get_param_as_uuid',
            'get_param_as_bool',
            'get_param_as_list',
        ],
    )
    def test_required(self, simulate_request, client, resource, method_name):
>       client.app.add_route('/', resource)

tests/test_query_params.py:334: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a05b1af0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af4185b40>, 'CHECK...5b40>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af4185b40>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a07ae740>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ TestQueryParams.test_uuid[simulate_request_post_query_params-asgi] ______

self = <test_query_params.TestQueryParams object at 0x7f09b56a8850>
simulate_request = <function simulate_request_post_query_params at 0x7f09b5807e20>
client = <falcon.testing.client.TestClient object at 0x7f09ee43d5d0>
resource = <test_query_params.Resource object at 0x7f09ee43ef20>

    def test_uuid(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:502: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a05b1230>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af4185e10>, 'CHECK...5e10>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af4185e10>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09ee43ef20>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___ TestPostQueryParamsDefaultBehavior.test_dont_auto_parse_by_default[True] ___

self = <test_query_params.TestPostQueryParamsDefaultBehavior object at 0x7f09b56efdc0>
asgi = True

    def test_dont_auto_parse_by_default(self, asgi):
        app = create_app(asgi)
        resource = testing.SimpleTestResource()
>       app.add_route('/', resource)

tests/test_query_params.py:1035: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a05b0740>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af4187ac0>, 'CHECK...7ac0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af4187ac0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f09a05b48e0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______ TestPostQueryParams.test_http_methods_body_expected[asgi-DELETE] _______

self = <test_query_params.TestPostQueryParams object at 0x7f09b56eea70>
client = <falcon.testing.client.TestClient object at 0x7f09ee5afeb0>
resource = <test_query_params.Resource object at 0x7f09ee5aea10>
http_method = 'DELETE'

    @pytest.mark.parametrize(
        'http_method', ('POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS')
    )
    def test_http_methods_body_expected(self, client, resource, http_method):
>       client.app.add_route('/', resource)

tests/test_query_params.py:965: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a05b0c80>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5287c70>, 'CHECK...7c70>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5287c70>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09ee5aea10>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ TestPostQueryParams.test_empty_body[asgi] ___________________

self = <test_query_params.TestPostQueryParams object at 0x7f09b56ef100>
client = <falcon.testing.client.TestClient object at 0x7f09ee5e7760>
resource = <test_query_params.Resource object at 0x7f09ee5e72b0>

    def test_empty_body(self, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:999: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a05b38b0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af41855a0>, 'CHECK...55a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af41855a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09ee5e72b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ TestPostQueryParams.test_asgi_raises_error __________________

self = <test_query_params.TestPostQueryParams object at 0x7f09b56ef850>
resource = <test_query_params.Resource object at 0x7f09ee6e2f20>

    def test_asgi_raises_error(self, resource):
        app = create_app(asgi=True)
>       app.add_route('/', resource)

tests/test_query_params.py:1022: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af41b8890>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af4187370>, 'CHECK...7370>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af4187370>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09ee6e2f20>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ TestPostQueryParams.test_http_methods_body_expected[asgi-OPTIONS] _______

self = <test_query_params.TestPostQueryParams object at 0x7f09b56eeb00>
client = <falcon.testing.client.TestClient object at 0x7f09a07ae140>
resource = <test_query_params.Resource object at 0x7f09a07af1f0>
http_method = 'OPTIONS'

    @pytest.mark.parametrize(
        'http_method', ('POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS')
    )
    def test_http_methods_body_expected(self, client, resource, http_method):
>       client.app.add_route('/', resource)

tests/test_query_params.py:965: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af41ba880>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af4187130>, 'CHECK...7130>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af4187130>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a07af1f0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ TestPostQueryParams.test_http_methods_body_not_expected[asgi-HEAD] ______

self = <test_query_params.TestPostQueryParams object at 0x7f09b56ef040>
client = <falcon.testing.client.TestClient object at 0x7f09a0b7ad10>
resource = <test_query_params.Resource object at 0x7f09a0b7a560>
http_method = 'HEAD'

    @pytest.mark.parametrize('http_method', ('GET', 'HEAD'))
    def test_http_methods_body_not_expected(self, client, resource, http_method):
>       client.app.add_route('/', resource)

tests/test_query_params.py:977: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af4147a70>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af4186050>, 'CHECK...6050>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af4186050>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a0b7a560>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______ TestPostQueryParams.test_http_methods_body_expected[asgi-PATCH] ________

self = <test_query_params.TestPostQueryParams object at 0x7f09b56ee9e0>
client = <falcon.testing.client.TestClient object at 0x7f09ee5d6710>
resource = <test_query_params.Resource object at 0x7f09ee5d6b30>
http_method = 'PATCH'

    @pytest.mark.parametrize(
        'http_method', ('POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS')
    )
    def test_http_methods_body_expected(self, client, resource, http_method):
>       client.app.add_route('/', resource)

tests/test_query_params.py:965: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af4145e70>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5287f40>, 'CHECK...7f40>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5287f40>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09ee5d6b30>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________ TestPostQueryParams.test_empty_body_no_content_length[asgi] __________

self = <test_query_params.TestPostQueryParams object at 0x7f09b56ef370>
client = <falcon.testing.client.TestClient object at 0x7f09a0bedf90>
resource = <test_query_params.Resource object at 0x7f09a0b9a500>

    def test_empty_body_no_content_length(self, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:1006: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af41470d0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af4184f70>, 'CHECK...4f70>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af4184f70>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a0b9a500>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ TestPostQueryParams.test_http_methods_body_not_expected[asgi-GET] _______

self = <test_query_params.TestPostQueryParams object at 0x7f09b56ef010>
client = <falcon.testing.client.TestClient object at 0x7f09ee5e77f0>
resource = <test_query_params.Resource object at 0x7f09ee5e6170>
http_method = 'GET'

    @pytest.mark.parametrize('http_method', ('GET', 'HEAD'))
    def test_http_methods_body_not_expected(self, client, resource, http_method):
>       client.app.add_route('/', resource)

tests/test_query_params.py:977: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af41b9380>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af4184160>, 'CHECK...4160>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af4184160>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09ee5e6170>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ TestPostQueryParams.test_http_methods_body_expected[asgi-POST] ________

self = <test_query_params.TestPostQueryParams object at 0x7f09b56ee8c0>
client = <falcon.testing.client.TestClient object at 0x7f09a06e9b10>
resource = <test_query_params.Resource object at 0x7f09a06eb5b0>
http_method = 'POST'

    @pytest.mark.parametrize(
        'http_method', ('POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS')
    )
    def test_http_methods_body_expected(self, client, resource, http_method):
>       client.app.add_route('/', resource)

tests/test_query_params.py:965: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a05b2b20>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af4187a30>, 'CHECK...7a30>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af4187a30>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a06eb5b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ TestPostQueryParams.test_http_methods_body_expected[asgi-PUT] _________

self = <test_query_params.TestPostQueryParams object at 0x7f09b56ee8f0>
client = <falcon.testing.client.TestClient object at 0x7f09a09b56f0>
resource = <test_query_params.Resource object at 0x7f09a09b67a0>
http_method = 'PUT'

    @pytest.mark.parametrize(
        'http_method', ('POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS')
    )
    def test_http_methods_body_expected(self, client, resource, http_method):
>       client.app.add_route('/', resource)

tests/test_query_params.py:965: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a05b30d0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af4187d00>, 'CHECK...7d00>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af4187d00>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a09b67a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________ TestPostQueryParams.test_explicitly_disable_auto_parse[asgi] _________

self = <test_query_params.TestPostQueryParams object at 0x7f09b56ef5e0>
client = <falcon.testing.client.TestClient object at 0x7f09ee43c8b0>
resource = <test_query_params.Resource object at 0x7f09ee43ef20>

    def test_explicitly_disable_auto_parse(self, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:1013: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a05b26c0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af4186d40>, 'CHECK...6d40>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af4186d40>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09ee43ef20>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________________ TestPostQueryParams.test_non_ascii[asgi] ___________________

self = <test_query_params.TestPostQueryParams object at 0x7f09b56ef0a0>
client = <falcon.testing.client.TestClient object at 0x7f09a05d73d0>
resource = <test_query_params.Resource object at 0x7f09a05d7040>

    def test_non_ascii(self, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:988: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a05bd770>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af41cec20>, 'CHECK...ec20>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af41cec20>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7f09a05d7040>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____ TestTransactionIdMiddleware.test_generate_trans_id_with_request[asgi] _____

self = <test_middleware.TestTransactionIdMiddleware object at 0x7f09b57c6380>
asgi = True

    def test_generate_trans_id_with_request(self, asgi):
        """Test that TransactionIdmiddleware is executed"""
        global context
    
        middleware = (
            TransactionIdMiddlewareAsync() if asgi else TransactionIdMiddleware()
        )
        app = create_app(asgi, middleware=middleware)
    
>       app.add_route(TEST_ROUTE, MiddlewareClassResource())

tests/test_middleware.py:267: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a05b00b0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0658ee0>, 'CHECK...8ee0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0658ee0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method MiddlewareClassResource.on_get of <test_middleware.MiddlewareClassResource object at 0x7f0af3fdb370>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________ TestShortCircuiting.test_process_request_not_cached[asgi] ___________

self = <test_middleware.TestShortCircuiting object at 0x7f09b57f25c0>
asgi = True

    def test_process_request_not_cached(self, asgi):
>       response = self._make_client(asgi).simulate_get('/')

tests/test_middleware.py:937: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_middleware.py:927: in _make_client
    app = create_app(
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.RequestTimeMiddleware object at 0x7f0af3e733a0>, <test_middleware.ResponseCacheMiddlware object at 0x7f0af3e71840>, <test_middleware.TransactionIdMiddleware object at 0x7f0af3e73790>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ResponseCacheMiddlware.process_request of <test_middleware.ResponseCacheMiddlware object at 0x7f0af3e71840>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_________ TestShortCircuiting.test_process_resource_cached[asgi-False] _________

self = <test_middleware.TestShortCircuiting object at 0x7f09b57f28f0>
asgi = True, independent_middleware = False

    @pytest.mark.parametrize('independent_middleware', [True, False])
    def test_process_resource_cached(self, asgi, independent_middleware):
>       response = self._make_client(asgi, independent_middleware).simulate_get(
            '/cached/resource'
        )

tests/test_middleware.py:970: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_middleware.py:927: in _make_client
    app = create_app(
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.RequestTimeMiddleware object at 0x7f09a06eafe0>, <test_middleware.ResponseCacheMiddlware object at 0x7f09a06e82b0>, <test_middleware.TransactionIdMiddleware object at 0x7f09a06eb730>]
independent_middleware = False, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ResponseCacheMiddlware.process_request of <test_middleware.ResponseCacheMiddlware object at 0x7f09a06e82b0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_________ TestShortCircuiting.test_process_resource_cached[asgi-True] __________

self = <test_middleware.TestShortCircuiting object at 0x7f09b57f2e00>
asgi = True, independent_middleware = True

    @pytest.mark.parametrize('independent_middleware', [True, False])
    def test_process_resource_cached(self, asgi, independent_middleware):
>       response = self._make_client(asgi, independent_middleware).simulate_get(
            '/cached/resource'
        )

tests/test_middleware.py:970: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_middleware.py:927: in _make_client
    app = create_app(
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.RequestTimeMiddleware object at 0x7f0af3e8c040>, <test_middleware.ResponseCacheMiddlware object at 0x7f0af3e8d2a0>, <test_middleware.TransactionIdMiddleware object at 0x7f0af3e8de10>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ResponseCacheMiddlware.process_request of <test_middleware.ResponseCacheMiddlware object at 0x7f0af3e8d2a0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_________ TestShortCircuiting.test_process_request_cached[asgi-False] __________

self = <test_middleware.TestShortCircuiting object at 0x7f09b57f2ad0>
asgi = True, independent_middleware = False

    @pytest.mark.parametrize('independent_middleware', [True, False])
    def test_process_request_cached(self, asgi, independent_middleware):
>       response = self._make_client(asgi, independent_middleware).simulate_get(
            '/cached'
        )

tests/test_middleware.py:947: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_middleware.py:927: in _make_client
    app = create_app(
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.RequestTimeMiddleware object at 0x7f09a054f130>, <test_middleware.ResponseCacheMiddlware object at 0x7f09a054ee60>, <test_middleware.TransactionIdMiddleware object at 0x7f09a054dea0>]
independent_middleware = False, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ResponseCacheMiddlware.process_request of <test_middleware.ResponseCacheMiddlware object at 0x7f09a054ee60>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
__________ TestShortCircuiting.test_process_request_cached[asgi-True] __________

self = <test_middleware.TestShortCircuiting object at 0x7f09b57f2a10>
asgi = True, independent_middleware = True

    @pytest.mark.parametrize('independent_middleware', [True, False])
    def test_process_request_cached(self, asgi, independent_middleware):
>       response = self._make_client(asgi, independent_middleware).simulate_get(
            '/cached'
        )

tests/test_middleware.py:947: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_middleware.py:927: in _make_client
    app = create_app(
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.RequestTimeMiddleware object at 0x7f0af3f6dc60>, <test_middleware.ResponseCacheMiddlware object at 0x7f0af3f6fd30>, <test_middleware.TransactionIdMiddleware object at 0x7f0af3f6e110>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ResponseCacheMiddlware.process_request of <test_middleware.ResponseCacheMiddlware object at 0x7f0af3f6fd30>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_ TestRemoveBasePathMiddleware.test_base_path_is_removed_before_routing[asgi] __

self = <test_middleware.TestRemoveBasePathMiddleware object at 0x7f09b57f0f40>
asgi = True

    def test_base_path_is_removed_before_routing(self, asgi):
        """Test that RemoveBasePathMiddleware is executed before routing"""
>       app = create_app(asgi, middleware=RemoveBasePathMiddleware())

tests/test_middleware.py:821: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.RemoveBasePathMiddleware object at 0x7f09a056f040>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method RemoveBasePathMiddleware.process_request of <test_middleware.RemoveBasePathMiddleware object at 0x7f09a056f040>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
__ TestErrorHandling.test_error_composed_before_resp_middleware_called[asgi] ___

self = <test_middleware.TestErrorHandling object at 0x7f09b57f1e10>, asgi = True

    def test_error_composed_before_resp_middleware_called(self, asgi):
        mw = CaptureResponseMiddleware()
>       app = create_app(asgi, middleware=mw)

tests/test_middleware.py:874: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.CaptureResponseMiddleware object at 0x7f09ee5902e0>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method CaptureResponseMiddleware.process_response of <test_middleware.CaptureResponseMiddleware object at 0x7f09ee5902e0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
______ TestErrorHandling.test_http_status_raised_from_error_handler[asgi] ______

self = <test_middleware.TestErrorHandling object at 0x7f09b57f1e70>, asgi = True

    def test_http_status_raised_from_error_handler(self, asgi):
        mw = CaptureResponseMiddleware()
>       app = create_app(asgi, middleware=mw)

tests/test_middleware.py:894: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.CaptureResponseMiddleware object at 0x7f0af404afe0>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method CaptureResponseMiddleware.process_response of <test_middleware.CaptureResponseMiddleware object at 0x7f0af404afe0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_ TestCORSMiddlewareWithAnotherMiddleware.test_api_initialization_with_cors_enabled_and_middleware_param[asgi-mw2] _

self = <test_middleware.TestCORSMiddlewareWithAnotherMiddleware object at 0x7f09b57f3400>
mw = (<test_middleware.CaptureResponseMiddleware object at 0x7f09b57c4910>,)
asgi = True

    @pytest.mark.parametrize(
        'mw',
        [
            CaptureResponseMiddleware(),
            [CaptureResponseMiddleware()],
            (CaptureResponseMiddleware(),),
            iter([CaptureResponseMiddleware()]),
        ],
    )
    def test_api_initialization_with_cors_enabled_and_middleware_param(self, mw, asgi):
>       app = create_app(asgi, middleware=mw, cors_enable=True)

tests/test_middleware.py:1006: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.CaptureResponseMiddleware object at 0x7f09b57c4910>, <falcon.middleware.CORSMiddleware object at 0x7f09a069c790>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method CaptureResponseMiddleware.process_response of <test_middleware.CaptureResponseMiddleware object at 0x7f09b57c4910>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_ TestCORSMiddlewareWithAnotherMiddleware.test_api_initialization_with_cors_enabled_and_middleware_param[asgi-mw3] _

self = <test_middleware.TestCORSMiddlewareWithAnotherMiddleware object at 0x7f09b57f3490>
mw = <list_iterator object at 0x7f09b57c4ac0>, asgi = True

    @pytest.mark.parametrize(
        'mw',
        [
            CaptureResponseMiddleware(),
            [CaptureResponseMiddleware()],
            (CaptureResponseMiddleware(),),
            iter([CaptureResponseMiddleware()]),
        ],
    )
    def test_api_initialization_with_cors_enabled_and_middleware_param(self, mw, asgi):
        app = create_app(asgi, middleware=mw, cors_enable=True)
>       app.add_route('/', TestCorsResource())

tests/test_middleware.py:1007: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09ee5a45f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d2a70>, 'CHECK...2a70>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d2a70>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestCorsResource.on_get of <test_middleware.TestCorsResource object at 0x7f09a05d58a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestCORSMiddlewareWithAnotherMiddleware.test_api_initialization_with_cors_enabled_and_middleware_param[asgi-mw1] _

self = <test_middleware.TestCORSMiddlewareWithAnotherMiddleware object at 0x7f09b57f3370>
mw = [<test_middleware.CaptureResponseMiddleware object at 0x7f09b57c47f0>]
asgi = True

    @pytest.mark.parametrize(
        'mw',
        [
            CaptureResponseMiddleware(),
            [CaptureResponseMiddleware()],
            (CaptureResponseMiddleware(),),
            iter([CaptureResponseMiddleware()]),
        ],
    )
    def test_api_initialization_with_cors_enabled_and_middleware_param(self, mw, asgi):
>       app = create_app(asgi, middleware=mw, cors_enable=True)

tests/test_middleware.py:1006: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.CaptureResponseMiddleware object at 0x7f09b57c47f0>, <falcon.middleware.CORSMiddleware object at 0x7f09a0678e20>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method CaptureResponseMiddleware.process_response of <test_middleware.CaptureResponseMiddleware object at 0x7f09b57c47f0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_ TestCORSMiddlewareWithAnotherMiddleware.test_api_initialization_with_cors_enabled_and_middleware_param[asgi-mw0] _

self = <test_middleware.TestCORSMiddlewareWithAnotherMiddleware object at 0x7f09b57f3250>
mw = <test_middleware.CaptureResponseMiddleware object at 0x7f09b57c45b0>
asgi = True

    @pytest.mark.parametrize(
        'mw',
        [
            CaptureResponseMiddleware(),
            [CaptureResponseMiddleware()],
            (CaptureResponseMiddleware(),),
            iter([CaptureResponseMiddleware()]),
        ],
    )
    def test_api_initialization_with_cors_enabled_and_middleware_param(self, mw, asgi):
>       app = create_app(asgi, middleware=mw, cors_enable=True)

tests/test_middleware.py:1006: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.CaptureResponseMiddleware object at 0x7f09b57c45b0>, <falcon.middleware.CORSMiddleware object at 0x7f0af4049960>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method CaptureResponseMiddleware.process_response of <test_middleware.CaptureResponseMiddleware object at 0x7f09b57c45b0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
__________ TestRequestTimeMiddleware.test_log_get_request[asgi-True] ___________

self = <test_middleware.TestRequestTimeMiddleware object at 0x7f09b57c5ff0>
independent_middleware = True, asgi = True

    @pytest.mark.parametrize('independent_middleware', [True, False])
    def test_log_get_request(self, independent_middleware, asgi):
        """Test that Log middleware is executed"""
        global context
        app = create_app(
            asgi,
            middleware=[RequestTimeMiddleware()],
            independent_middleware=independent_middleware,
        )
    
>       app.add_route(TEST_ROUTE, MiddlewareClassResource())

tests/test_middleware.py:237: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09ee5770d0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af41855a0>, 'CHECK...55a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af41855a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method MiddlewareClassResource.on_get of <test_middleware.MiddlewareClassResource object at 0x7f0af3f6eb00>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________ TestRequestTimeMiddleware.test_skip_process_resource[asgi] __________

self = <test_middleware.TestRequestTimeMiddleware object at 0x7f09b57c5750>
asgi = True

    def test_skip_process_resource(self, asgi):
        global context
        app = create_app(asgi, middleware=[RequestTimeMiddleware()])
    
>       app.add_route('/', MiddlewareClassResource())

tests/test_middleware.py:183: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09ee576960>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af4184430>, 'CHECK...4430>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af4184430>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method MiddlewareClassResource.on_get of <test_middleware.MiddlewareClassResource object at 0x7f09a06eac20>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________ TestRequestTimeMiddleware.test_log_get_request[asgi-False] __________

self = <test_middleware.TestRequestTimeMiddleware object at 0x7f09b57c5c00>
independent_middleware = False, asgi = True

    @pytest.mark.parametrize('independent_middleware', [True, False])
    def test_log_get_request(self, independent_middleware, asgi):
        """Test that Log middleware is executed"""
        global context
        app = create_app(
            asgi,
            middleware=[RequestTimeMiddleware()],
            independent_middleware=independent_middleware,
        )
    
>       app.add_route(TEST_ROUTE, MiddlewareClassResource())

tests/test_middleware.py:237: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09ee574890>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af4186b90>, 'CHECK...6b90>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af4186b90>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method MiddlewareClassResource.on_get of <test_middleware.MiddlewareClassResource object at 0x7f09a094cc70>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__ TestRequestTimeMiddleware.test_response_middleware_raises_exception[asgi] ___

self = <test_middleware.TestRequestTimeMiddleware object at 0x7f09b57c59f0>
asgi = True

    def test_response_middleware_raises_exception(self, asgi):
        """Test that error in response middleware is propagated up"""
    
        class RaiseErrorMiddleware:
            def process_response(self, req, resp, resource):
                raise Exception('Always fail')
    
>       app = create_app(asgi, middleware=[RaiseErrorMiddleware()])

tests/test_middleware.py:219: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.TestRequestTimeMiddleware.test_response_middleware_raises_exception.<locals>.RaiseErrorMiddleware object at 0x7f0af3f31300>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method TestRequestTimeMiddleware.test_response_middleware_raises_exception.<locals>.RaiseErrorMiddleware.process_response of <test_middleware.TestRequestTimeMiddleware.test_response_middleware_raises_exception.<locals>.RaiseErrorMiddleware object at 0x7f0af3f31300>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
______ TestResourceMiddleware.test_can_access_resource_params[asgi-False] ______

self = <test_middleware.TestResourceMiddleware object at 0x7f09b57f1450>
asgi = True, independent_middleware = False

    @pytest.mark.parametrize('independent_middleware', [True, False])
    def test_can_access_resource_params(self, asgi, independent_middleware):
        """Test that params can be accessed from within process_resource"""
        global context
    
        class Resource:
            def on_get(self, req, resp, **params):
                resp.text = json.dumps(params)
    
>       app = create_app(
            asgi,
            middleware=AccessParamsMiddleware(),
            independent_middleware=independent_middleware,
        )

tests/test_middleware.py:844: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.AccessParamsMiddleware object at 0x7f09a09b5960>]
independent_middleware = False, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method AccessParamsMiddleware.process_resource of <test_middleware.AccessParamsMiddleware object at 0x7f09a09b5960>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
______ TestResourceMiddleware.test_can_access_resource_params[asgi-True] _______

self = <test_middleware.TestResourceMiddleware object at 0x7f09b57f1360>
asgi = True, independent_middleware = True

    @pytest.mark.parametrize('independent_middleware', [True, False])
    def test_can_access_resource_params(self, asgi, independent_middleware):
        """Test that params can be accessed from within process_resource"""
        global context
    
        class Resource:
            def on_get(self, req, resp, **params):
                resp.text = json.dumps(params)
    
>       app = create_app(
            asgi,
            middleware=AccessParamsMiddleware(),
            independent_middleware=independent_middleware,
        )

tests/test_middleware.py:844: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.AccessParamsMiddleware object at 0x7f09ee405a80>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method AccessParamsMiddleware.process_resource of <test_middleware.AccessParamsMiddleware object at 0x7f09ee405a80>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
____ TestEmptySignatureMiddleware.test_dont_need_params_in_signature[asgi] _____

self = <test_middleware.TestEmptySignatureMiddleware object at 0x7f09b57f18a0>
asgi = True

    def test_dont_need_params_in_signature(self, asgi):
        """
        Verify that we don't need parameters in the process_* signatures (for
        side-effect-only middlewares, mostly). Makes no difference on py27
        but does affect py36.
    
        https://github.com/falconry/falcon/issues/1254
        """
>       create_app(asgi, middleware=EmptySignatureMiddleware())

tests/test_middleware.py:868: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.EmptySignatureMiddleware object at 0x7f09ee6e1d80>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method EmptySignatureMiddleware.process_request of <test_middleware.EmptySignatureMiddleware object at 0x7f09ee6e1d80>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
__ TestSeveralMiddlewares.test_order_mw_executed_when_exception_in_resp[asgi] __

self = <test_middleware.TestSeveralMiddlewares object at 0x7f09b57c7b80>
asgi = True

    def test_order_mw_executed_when_exception_in_resp(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        class RaiseErrorMiddleware:
            def process_response(self, req, resp, resource):
                raise Exception('Always fail')
    
>       app = create_app(
            asgi,
            middleware=[
                ExecutedFirstMiddleware(),
                RaiseErrorMiddleware(),
                ExecutedLastMiddleware(),
            ],
        )

tests/test_middleware.py:594: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.ExecutedFirstMiddleware object at 0x7f0af4082f50>, <test_middleware.TestSeveralMiddlewares.test_orde...als>.RaiseErrorMiddleware object at 0x7f0af4080220>, <test_middleware.ExecutedLastMiddleware object at 0x7f0af4083040>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ExecutedFirstMiddleware.process_request of <test_middleware.ExecutedFirstMiddleware object at 0x7f0af4082f50>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_ TestSeveralMiddlewares.test_generate_trans_id_and_time_with_request[asgi-False] _

self = <test_middleware.TestSeveralMiddlewares object at 0x7f09b57c6b60>
independent_middleware = False, asgi = True

    @pytest.mark.parametrize('independent_middleware', [True, False])
    def test_generate_trans_id_and_time_with_request(
        self, independent_middleware, asgi
    ):
        # NOTE(kgriffs): We test both so that we can cover the code paths
        # where only a single middleware method is implemented by a
        # component.
        creq = CaptureRequestMiddleware()
        cresp = CaptureResponseMiddleware()
    
        global context
>       app = create_app(
            asgi,
            independent_middleware=independent_middleware,
            # NOTE(kgriffs): Pass as a generic iterable to verify that works.
            middleware=iter(
                [
                    TransactionIdMiddleware(),
                    RequestTimeMiddleware(),
                ]
            ),
        )

tests/test_middleware.py:289: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.TransactionIdMiddleware object at 0x7f09ee5d1330>, <test_middleware.RequestTimeMiddleware object at 0x7f09ee5d19f0>]
independent_middleware = False, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method TransactionIdMiddleware.process_request of <test_middleware.TransactionIdMiddleware object at 0x7f09ee5d1330>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
__ TestSeveralMiddlewares.test_inner_mw_with_ex_handler_throw_exception[asgi] __

self = <test_middleware.TestSeveralMiddlewares object at 0x7f09b57c7940>
asgi = True

    def test_inner_mw_with_ex_handler_throw_exception(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        class RaiseErrorMiddleware:
            def process_request(self, req, resp, resource):
                raise Exception('Always fail')
    
>       app = create_app(
            asgi,
            middleware=[
                TransactionIdMiddleware(),
                RequestTimeMiddleware(),
                RaiseErrorMiddleware(),
            ],
        )

tests/test_middleware.py:526: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.TransactionIdMiddleware object at 0x7f09a0950ee0>, <test_middleware.RequestTimeMiddleware object at ...veralMiddlewares.test_inner_mw_with_ex_handler_throw_exception.<locals>.RaiseErrorMiddleware object at 0x7f09a0951420>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method TransactionIdMiddleware.process_request of <test_middleware.TransactionIdMiddleware object at 0x7f09a0950ee0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_________ TestSeveralMiddlewares.test_middleware_execution_order[asgi] _________

self = <test_middleware.TestSeveralMiddlewares object at 0x7f09b57c6d40>
asgi = True

    def test_middleware_execution_order(self, asgi):
        global context
>       app = create_app(
            asgi,
            independent_middleware=False,
            middleware=[ExecutedFirstMiddleware(), ExecutedLastMiddleware()],
        )

tests/test_middleware.py:337: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.ExecutedFirstMiddleware object at 0x7f09a050cd00>, <test_middleware.ExecutedLastMiddleware object at 0x7f09a050ee30>]
independent_middleware = False, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ExecutedFirstMiddleware.process_request of <test_middleware.ExecutedFirstMiddleware object at 0x7f09a050cd00>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_ TestSeveralMiddlewares.test_generate_trans_id_and_time_with_request[asgi-True] _

self = <test_middleware.TestSeveralMiddlewares object at 0x7f09b57c6a70>
independent_middleware = True, asgi = True

    @pytest.mark.parametrize('independent_middleware', [True, False])
    def test_generate_trans_id_and_time_with_request(
        self, independent_middleware, asgi
    ):
        # NOTE(kgriffs): We test both so that we can cover the code paths
        # where only a single middleware method is implemented by a
        # component.
        creq = CaptureRequestMiddleware()
        cresp = CaptureResponseMiddleware()
    
        global context
>       app = create_app(
            asgi,
            independent_middleware=independent_middleware,
            # NOTE(kgriffs): Pass as a generic iterable to verify that works.
            middleware=iter(
                [
                    TransactionIdMiddleware(),
                    RequestTimeMiddleware(),
                ]
            ),
        )

tests/test_middleware.py:289: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.TransactionIdMiddleware object at 0x7f09ee5c8af0>, <test_middleware.RequestTimeMiddleware object at 0x7f09ee5ca320>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method TransactionIdMiddleware.process_request of <test_middleware.TransactionIdMiddleware object at 0x7f09ee5c8af0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_ TestSeveralMiddlewares.test_order_independent_mw_executed_when_exception_in_req[asgi] _

self = <test_middleware.TestSeveralMiddlewares object at 0x7f09b57f0310>
asgi = True

    def test_order_independent_mw_executed_when_exception_in_req(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        class RaiseErrorMiddleware:
            def process_request(self, req, resp):
                raise Exception('Always fail')
    
        class RaiseErrorMiddlewareAsync:
            async def process_request(self, req, resp):
                raise Exception('Always fail')
    
        rem = RaiseErrorMiddlewareAsync() if asgi else RaiseErrorMiddleware()
    
>       app = create_app(
            asgi,
            independent_middleware=True,
            middleware=[ExecutedFirstMiddleware(), rem, ExecutedLastMiddleware()],
        )

tests/test_middleware.py:713: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.ExecutedFirstMiddleware object at 0x7f09a056cfd0>, <test_middleware.TestSeveralMiddlewares.test_orde...RaiseErrorMiddlewareAsync object at 0x7f09a056cd00>, <test_middleware.ExecutedLastMiddleware object at 0x7f09a056ea70>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ExecutedFirstMiddleware.process_request of <test_middleware.ExecutedFirstMiddleware object at 0x7f09a056cfd0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
__ TestSeveralMiddlewares.test_order_mw_executed_when_exception_in_rsrc[asgi] __

self = <test_middleware.TestSeveralMiddlewares object at 0x7f09b57f0580>
asgi = True

    def test_order_mw_executed_when_exception_in_rsrc(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        class RaiseErrorMiddleware:
            def process_resource(self, req, resp, resource):
                raise Exception('Always fail')
    
        class RaiseErrorMiddlewareAsync:
            # NOTE(kgriffs): The *_async postfix is not required in this
            #   case, but we include it to make sure it works as expected.
            async def process_resource_async(self, req, resp, resource):
                raise Exception('Always fail')
    
        rem = RaiseErrorMiddlewareAsync() if asgi else RaiseErrorMiddleware()
    
>       app = create_app(
            asgi, middleware=[ExecutedFirstMiddleware(), rem, ExecutedLastMiddleware()]
        )

tests/test_middleware.py:753: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.ExecutedFirstMiddleware object at 0x7f09a054c550>, <test_middleware.TestSeveralMiddlewares.test_orde...RaiseErrorMiddlewareAsync object at 0x7f09a054c970>, <test_middleware.ExecutedLastMiddleware object at 0x7f09a054c790>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ExecutedFirstMiddleware.process_request of <test_middleware.ExecutedFirstMiddleware object at 0x7f09a054c550>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_ TestSeveralMiddlewares.test_order_independent_mw_executed_when_exception_in_rsrc[asgi] _

self = <test_middleware.TestSeveralMiddlewares object at 0x7f09b57f07f0>
asgi = True

    def test_order_independent_mw_executed_when_exception_in_rsrc(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        class RaiseErrorMiddleware:
            def process_resource(self, req, resp, resource):
                raise Exception('Always fail')
    
        class RaiseErrorMiddlewareAsync:
            async def process_resource(self, req, resp, resource):
                raise Exception('Always fail')
    
        rem = RaiseErrorMiddlewareAsync() if asgi else RaiseErrorMiddleware()
    
>       app = create_app(
            asgi,
            independent_middleware=True,
            middleware=[ExecutedFirstMiddleware(), rem, ExecutedLastMiddleware()],
        )

tests/test_middleware.py:791: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.ExecutedFirstMiddleware object at 0x7f0af3f30280>, <test_middleware.TestSeveralMiddlewares.test_orde...RaiseErrorMiddlewareAsync object at 0x7f0af3f32620>, <test_middleware.ExecutedLastMiddleware object at 0x7f0af3f33100>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ExecutedFirstMiddleware.process_request of <test_middleware.ExecutedFirstMiddleware object at 0x7f0af3f30280>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_ TestSeveralMiddlewares.test_legacy_middleware_called_with_correct_args[asgi] _

self = <test_middleware.TestSeveralMiddlewares object at 0x7f09b57c6b00>
asgi = True

    def test_legacy_middleware_called_with_correct_args(self, asgi):
        global context
>       app = create_app(asgi, middleware=[ExecutedFirstMiddleware()])

tests/test_middleware.py:326: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.ExecutedFirstMiddleware object at 0x7f09a06f19f0>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ExecutedFirstMiddleware.process_request of <test_middleware.ExecutedFirstMiddleware object at 0x7f09a06f19f0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
____ TestSeveralMiddlewares.test_multiple_response_mw_throw_exception[asgi] ____

self = <test_middleware.TestSeveralMiddlewares object at 0x7f09b57c71f0>
asgi = True

    def test_multiple_response_mw_throw_exception(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        context['req_succeeded'] = []
    
        class RaiseStatusMiddleware:
            def process_response(self, req, resp, resource, req_succeeded):
                raise falcon.HTTPStatus(falcon.HTTP_201)
    
        class RaiseErrorMiddleware:
            def process_response(self, req, resp, resource, req_succeeded):
                raise falcon.HTTPError(falcon.HTTP_748)
    
        class ProcessResponseMiddleware:
            def process_response(self, req, resp, resource, req_succeeded):
                context['executed_methods'].append('process_response')
                context['req_succeeded'].append(req_succeeded)
    
>       app = create_app(
            asgi,
            middleware=[
                ProcessResponseMiddleware(),
                RaiseErrorMiddleware(),
                ProcessResponseMiddleware(),
                RaiseStatusMiddleware(),
                ProcessResponseMiddleware(),
            ],
        )

tests/test_middleware.py:406: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.TestSeveralMiddlewares.test_multiple_response_mw_throw_exception.<locals>.ProcessResponseMiddleware ...eralMiddlewares.test_multiple_response_mw_throw_exception.<locals>.ProcessResponseMiddleware object at 0x7f0af3fa37f0>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method TestSeveralMiddlewares.test_multiple_response_mw_throw_exception.<locals>.ProcessResponseMiddleware.process_response of <test_middleware.TestSeveralMiddlewares.test_multiple_response_mw_throw_exception.<locals>.ProcessResponseMiddleware object at 0x7f0af3fa10c0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_ TestSeveralMiddlewares.test_order_independent_mw_executed_when_exception_in_resp[asgi] _

self = <test_middleware.TestSeveralMiddlewares object at 0x7f09b57f00a0>
asgi = True

    def test_order_independent_mw_executed_when_exception_in_resp(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        class RaiseErrorMiddleware:
            def process_response(self, req, resp, resource):
                raise Exception('Always fail')
    
>       app = create_app(
            asgi,
            independent_middleware=True,
            middleware=[
                ExecutedFirstMiddleware(),
                RaiseErrorMiddleware(),
                ExecutedLastMiddleware(),
            ],
        )

tests/test_middleware.py:632: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.ExecutedFirstMiddleware object at 0x7f09a0952a10>, <test_middleware.TestSeveralMiddlewares.test_orde...als>.RaiseErrorMiddleware object at 0x7f09a0952f20>, <test_middleware.ExecutedLastMiddleware object at 0x7f09a0952cb0>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ExecutedFirstMiddleware.process_request of <test_middleware.ExecutedFirstMiddleware object at 0x7f09a0952a10>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
___ TestSeveralMiddlewares.test_independent_middleware_execution_order[asgi] ___

self = <test_middleware.TestSeveralMiddlewares object at 0x7f09b57c6f80>
asgi = True

    def test_independent_middleware_execution_order(self, asgi):
        global context
>       app = create_app(
            asgi,
            independent_middleware=True,
            middleware=[ExecutedFirstMiddleware(), ExecutedLastMiddleware()],
        )

tests/test_middleware.py:363: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.ExecutedFirstMiddleware object at 0x7f09a05e1b70>, <test_middleware.ExecutedLastMiddleware object at 0x7f09a05e30d0>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ExecutedFirstMiddleware.process_request of <test_middleware.ExecutedFirstMiddleware object at 0x7f09a05e1b70>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_ TestSeveralMiddlewares.test_inner_mw_throw_exception_while_processing_resp[asgi] _

self = <test_middleware.TestSeveralMiddlewares object at 0x7f09b57c76d0>
asgi = True

    def test_inner_mw_throw_exception_while_processing_resp(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        class MyException(Exception):
            pass
    
        class RaiseErrorMiddleware:
            def process_response(self, req, resp, resource, req_succeeded):
                raise MyException('Always fail')
    
>       app = create_app(
            asgi,
            middleware=[
                TransactionIdMiddleware(),
                RequestTimeMiddleware(),
                RaiseErrorMiddleware(),
            ],
        )

tests/test_middleware.py:484: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.TransactionIdMiddleware object at 0x7f09a0b5f9d0>, <test_middleware.RequestTimeMiddleware object at ...iddlewares.test_inner_mw_throw_exception_while_processing_resp.<locals>.RaiseErrorMiddleware object at 0x7f09a0b5c5e0>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method TransactionIdMiddleware.process_request of <test_middleware.TransactionIdMiddleware object at 0x7f09a0b5f9d0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
__ TestSeveralMiddlewares.test_outer_mw_with_ex_handler_throw_exception[asgi] __

self = <test_middleware.TestSeveralMiddlewares object at 0x7f09b57c68f0>
asgi = True

    def test_outer_mw_with_ex_handler_throw_exception(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        class RaiseErrorMiddleware:
            def process_request(self, req, resp):
                raise Exception('Always fail')
    
>       app = create_app(
            asgi,
            middleware=[
                TransactionIdMiddleware(),
                RaiseErrorMiddleware(),
                RequestTimeMiddleware(),
            ],
        )

tests/test_middleware.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.TransactionIdMiddleware object at 0x7f09a054e9e0>, <test_middleware.TestSeveralMiddlewares.test_oute...cals>.RaiseErrorMiddleware object at 0x7f09a054c6a0>, <test_middleware.RequestTimeMiddleware object at 0x7f09a054d030>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method TransactionIdMiddleware.process_request of <test_middleware.TransactionIdMiddleware object at 0x7f09a054e9e0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
__________ TestSeveralMiddlewares.test_inner_mw_throw_exception[asgi] __________

self = <test_middleware.TestSeveralMiddlewares object at 0x7f09b57c7460>
asgi = True

    def test_inner_mw_throw_exception(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        class MyException(Exception):
            pass
    
        class RaiseErrorMiddleware:
            def process_request(self, req, resp):
                raise MyException('Always fail')
    
>       app = create_app(
            asgi,
            middleware=[
                TransactionIdMiddleware(),
                RequestTimeMiddleware(),
                RaiseErrorMiddleware(),
            ],
        )

tests/test_middleware.py:439: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.TransactionIdMiddleware object at 0x7f09a092c6a0>, <test_middleware.RequestTimeMiddleware object at ...iddleware.TestSeveralMiddlewares.test_inner_mw_throw_exception.<locals>.RaiseErrorMiddleware object at 0x7f09a092eef0>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method TransactionIdMiddleware.process_request of <test_middleware.TransactionIdMiddleware object at 0x7f09a092c6a0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
__ TestSeveralMiddlewares.test_order_mw_executed_when_exception_in_req[asgi] ___

self = <test_middleware.TestSeveralMiddlewares object at 0x7f09b57f00d0>
asgi = True

    def test_order_mw_executed_when_exception_in_req(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        class RaiseErrorMiddleware:
            def process_request(self, req, resp):
                raise Exception('Always fail')
    
        class RaiseErrorMiddlewareAsync:
            async def process_request(self, req, resp):
                raise Exception('Always fail')
    
        rem = RaiseErrorMiddlewareAsync() if asgi else RaiseErrorMiddleware()
    
>       app = create_app(
            asgi, middleware=[ExecutedFirstMiddleware(), rem, ExecutedLastMiddleware()]
        )

tests/test_middleware.py:677: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.ExecutedFirstMiddleware object at 0x7f09a0617a60>, <test_middleware.TestSeveralMiddlewares.test_orde...RaiseErrorMiddlewareAsync object at 0x7f09a0616f80>, <test_middleware.ExecutedLastMiddleware object at 0x7f09a0617490>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ExecutedFirstMiddleware.process_request of <test_middleware.ExecutedFirstMiddleware object at 0x7f09a0617a60>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
________________ TestErrorHandler.test_caught_error_async[asgi] ________________

self = <test_error_handlers.TestErrorHandler object at 0x7f09b5d906a0>
asgi = True

    def test_caught_error_async(self, asgi):
        if not asgi:
            pytest.skip('Test only applies to ASGI')
    
        app = falcon.asgi.App()
>       app.add_route('/', ErroredClassResource())

tests/test_error_handlers.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09a05e6c70>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a065b6d0>, 'CHECK...b6d0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a065b6d0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ErroredClassResource.on_delete of <test_error_handlers.ErroredClassResource object at 0x7f0af3f6d5d0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ TestErrorHandler.test_catch_http_no_route_error[asgi] _____________

self = <test_error_handlers.TestErrorHandler object at 0x7f09b5d91b40>
asgi = True

    def test_catch_http_no_route_error(self, asgi):
        class Resource:
            def on_get(self, req, resp):
                raise falcon.HTTPNotFound()
    
        def capture_error(req, resp, ex, params):
            resp.set_header('X-name', ex.__class__.__name__)
            raise ex
    
        app = create_app(asgi)
>       app.add_route('/', Resource())

tests/test_error_handlers.py:243: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09ee5f6650>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af4184430>, 'CHECK...4430>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af4184430>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestErrorHandler.test_catch_http_no_route_error.<locals>.Resource.on_get of <test_error_handlers.TestErrorHandler.test_catch_http_no_route_error.<locals>.Resource object at 0x7f09a06b3820>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________ TestFalconTestingUtils.test_path_must_start_with_slash[asgi] _________

self = <test_utils.TestFalconTestingUtils object at 0x7f09b51b3940>
app = <falcon.asgi.app.App object at 0x7f0af5267580>

    def test_path_must_start_with_slash(self, app):
>       app.add_route('/', testing.SimpleTestResource())

tests/test_utils.py:847: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09ee5f66c0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d3f40>, 'CHECK...3f40>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52d3f40>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f0af3fa2140>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ TestFalconTestingUtils.test_query_string_in_path[asgi] ____________

self = <test_utils.TestFalconTestingUtils object at 0x7f09b51f0490>
app = <falcon.asgi.app.App object at 0x7f0af41f50c0>

    def test_query_string_in_path(self, app):
        resource = testing.SimpleTestResource()
>       app.add_route('/thing', resource)

tests/test_utils.py:919: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09ee5392a0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af41cfe20>, 'CHECK...fe20>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af41cfe20>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f0af3e53c10>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____ TestFalconTestingUtils.test_simulate_remote_addr[asgi-104.24.101.85] _____

self = <test_utils.TestFalconTestingUtils object at 0x7f09b51f0460>
app = <falcon.asgi.app.App object at 0x7f0af41f4280>
remote_addr = '104.24.101.85'

    @pytest.mark.parametrize(
        'remote_addr',
        [
            None,
            '127.0.0.1',
            '8.8.8.8',
            '104.24.101.85',
            '2606:4700:30::6818:6455',
        ],
    )
    def test_simulate_remote_addr(self, app, remote_addr):
        class ShowMyIPResource:
            def on_get(self, req, resp):
                resp.text = req.remote_addr
                resp.content_type = falcon.MEDIA_TEXT
    
>       app.add_route('/', ShowMyIPResource())

tests/test_utils.py:1001: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09ee538e40>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09ee55c4c0>, 'CHECK...c4c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09ee55c4c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestFalconTestingUtils.test_simulate_remote_addr.<locals>.ShowMyIPResource.on_get of <test_utils.TestFalconTestingUtils.test_simulate_remote_addr.<locals>.ShowMyIPResource object at 0x7f09a050c8b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______ TestFalconTestingUtils.test_default_headers_with_override[asgi] ________

self = <test_utils.TestFalconTestingUtils object at 0x7f09b51b26b0>
app = <falcon.asgi.app.App object at 0x7f0af5267580>

    def test_default_headers_with_override(self, app):
        resource = testing.SimpleTestResource()
>       app.add_route('/', resource)

tests/test_utils.py:756: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09ee538120>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52525f0>, 'CHECK...25f0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af52525f0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f0af3f6c5b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________ TestFalconTestingUtils.test_simulate_hostname[asgi] ______________

self = <test_utils.TestFalconTestingUtils object at 0x7f09b51f1360>
app = <falcon.asgi.app.App object at 0x7f09a064ba00>

    def test_simulate_hostname(self, app):
        resource = testing.SimpleTestResource()
>       app.add_route('/', resource)

tests/test_utils.py:1014: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09ee5386d0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af41cf9a0>, 'CHECK...f9a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af41cf9a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f09a06b6470>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ TestFalconTestingUtils.test_query_string[asgi] ________________

self = <test_utils.TestFalconTestingUtils object at 0x7f09b51f0190>
app = <falcon.asgi.app.App object at 0x7f0af5267e80>

    def test_query_string(self, app):
        class SomeResource:
            def on_get(self, req, resp):
                doc = {}
    
                doc['oid'] = req.get_param_as_int('oid')
                doc['detailed'] = req.get_param_as_bool('detailed')
                doc['things'] = req.get_param_as_list('things', int)
                doc['query_string'] = req.query_string
    
                resp.text = json.dumps(doc)
    
        app.req_options.auto_parse_qs_csv = True
>       app.add_route('/', SomeResource())

tests/test_utils.py:883: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09ee53a650>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af4186440>, 'CHECK...6440>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af4186440>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestFalconTestingUtils.test_query_string.<locals>.SomeResource.on_get of <test_utils.TestFalconTestingUtils.test_query_string.<locals>.SomeResource object at 0x7f0af3f33c10>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ TestFalconTestingUtils.test_simulate_remote_addr[asgi-8.8.8.8] ________

self = <test_utils.TestFalconTestingUtils object at 0x7f09b51f0700>
app = <falcon.asgi.app.App object at 0x7f0af52662c0>, remote_addr = '8.8.8.8'

    @pytest.mark.parametrize(
        'remote_addr',
        [
            None,
            '127.0.0.1',
            '8.8.8.8',
            '104.24.101.85',
            '2606:4700:30::6818:6455',
        ],
    )
    def test_simulate_remote_addr(self, app, remote_addr):
        class ShowMyIPResource:
            def on_get(self, req, resp):
                resp.text = req.remote_addr
                resp.content_type = falcon.MEDIA_TEXT
    
>       app.add_route('/', ShowMyIPResource())

tests/test_utils.py:1001: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09ee5f5690>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af41843a0>, 'CHECK...43a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af41843a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestFalconTestingUtils.test_simulate_remote_addr.<locals>.ShowMyIPResource.on_get of <test_utils.TestFalconTestingUtils.test_simulate_remote_addr.<locals>.ShowMyIPResource object at 0x7f09a0952950>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________ TestFalconTestingUtils.test_simulate_remote_addr[asgi-None] __________

self = <test_utils.TestFalconTestingUtils object at 0x7f09b51f0ac0>
app = <falcon.asgi.app.App object at 0x7f0af5265cc0>, remote_addr = None

    @pytest.mark.parametrize(
        'remote_addr',
        [
            None,
            '127.0.0.1',
            '8.8.8.8',
            '104.24.101.85',
            '2606:4700:30::6818:6455',
        ],
    )
    def test_simulate_remote_addr(self, app, remote_addr):
        class ShowMyIPResource:
            def on_get(self, req, resp):
                resp.text = req.remote_addr
                resp.content_type = falcon.MEDIA_TEXT
    
>       app.add_route('/', ShowMyIPResource())

tests/test_utils.py:1001: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09ee5f7220>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09ee55c670>, 'CHECK...c670>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09ee55c670>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestFalconTestingUtils.test_simulate_remote_addr.<locals>.ShowMyIPResource.on_get of <test_utils.TestFalconTestingUtils.test_simulate_remote_addr.<locals>.ShowMyIPResource object at 0x7f09a071bfd0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________________ TestFalconTestingUtils.test_status[asgi] ___________________

self = <test_utils.TestFalconTestingUtils object at 0x7f09b51b28f0>
app = <falcon.asgi.app.App object at 0x7f0af52674c0>

    def test_status(self, app):
        resource = testing.SimpleTestResource(status=falcon.HTTP_702)
>       app.add_route('/', resource)

tests/test_utils.py:776: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09ee5c3370>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09ee55dc60>, 'CHECK...dc60>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09ee55dc60>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f09ee6e0d30>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______ TestFalconTestingUtils.test_simulate_remote_addr[asgi-127.0.0.1] _______

self = <test_utils.TestFalconTestingUtils object at 0x7f09b51f1540>
app = <falcon.asgi.app.App object at 0x7f0af52665c0>, remote_addr = '127.0.0.1'

    @pytest.mark.parametrize(
        'remote_addr',
        [
            None,
            '127.0.0.1',
            '8.8.8.8',
            '104.24.101.85',
            '2606:4700:30::6818:6455',
        ],
    )
    def test_simulate_remote_addr(self, app, remote_addr):
        class ShowMyIPResource:
            def on_get(self, req, resp):
                resp.text = req.remote_addr
                resp.content_type = falcon.MEDIA_TEXT
    
>       app.add_route('/', ShowMyIPResource())

tests/test_utils.py:1001: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09ee5c1930>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09ee55c1f0>, 'CHECK...c1f0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09ee55c1f0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestFalconTestingUtils.test_simulate_remote_addr.<locals>.ShowMyIPResource.on_get of <test_utils.TestFalconTestingUtils.test_simulate_remote_addr.<locals>.ShowMyIPResource object at 0x7f0af3f89060>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ TestFalconTestingUtils.test_override_method_with_extras[asgi] _________

self = <test_utils.TestFalconTestingUtils object at 0x7f09b51f1ba0>, asgi = True

    def test_override_method_with_extras(self, asgi):
        app = create_app(asgi)
>       app.add_route('/', testing.SimpleTestResource(body='test'))

tests/test_utils.py:1046: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09ee5a5540>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af41cc700>, 'CHECK...c700>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af41cc700>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f09a0616aa0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________ TestFalconTestingUtils.test_cached_text_in_result[asgi] ____________

self = <test_utils.TestFalconTestingUtils object at 0x7f09b51b3cd0>
app = <falcon.asgi.app.App object at 0x7f09a064ba00>

    def test_cached_text_in_result(self, app):
>       app.add_route('/', testing.SimpleTestResource(body='test'))

tests/test_utils.py:853: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09ee5c3c30>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af41cfeb0>, 'CHECK...feb0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af41cfeb0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f0af3f32ad0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________ TestFalconTestingUtils.test_query_string_no_question[asgi] __________

self = <test_utils.TestFalconTestingUtils object at 0x7f09b51f01c0>
app = <falcon.asgi.app.App object at 0x7f0af5267e80>

    def test_query_string_no_question(self, app):
>       app.add_route('/', testing.SimpleTestResource())

tests/test_utils.py:912: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09ee5f66c0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af41cff40>, 'CHECK...ff40>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af41cff40>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f09a06ea950>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestFalconTestingUtils.test_simulate_remote_addr[asgi-2606:4700:30::6818:6455] _

self = <test_utils.TestFalconTestingUtils object at 0x7f09b51f1570>
app = <falcon.asgi.app.App object at 0x7f0af52674c0>
remote_addr = '2606:4700:30::6818:6455'

    @pytest.mark.parametrize(
        'remote_addr',
        [
            None,
            '127.0.0.1',
            '8.8.8.8',
            '104.24.101.85',
            '2606:4700:30::6818:6455',
        ],
    )
    def test_simulate_remote_addr(self, app, remote_addr):
        class ShowMyIPResource:
            def on_get(self, req, resp):
                resp.text = req.remote_addr
                resp.content_type = falcon.MEDIA_TEXT
    
>       app.add_route('/', ShowMyIPResource())

tests/test_utils.py:1001: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09ee53a650>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09ee55d000>, 'CHECK...d000>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09ee55d000>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestFalconTestingUtils.test_simulate_remote_addr.<locals>.ShowMyIPResource.on_get of <test_utils.TestFalconTestingUtils.test_simulate_remote_addr.<locals>.ShowMyIPResource object at 0x7f09ee5cb2e0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______________ TestFalconTestingUtils.test_default_headers[asgi] _______________

self = <test_utils.TestFalconTestingUtils object at 0x7f09b51b22f0>
app = <falcon.asgi.app.App object at 0x7f0af5267580>

    def test_default_headers(self, app):
        resource = testing.SimpleTestResource()
>       app.add_route('/', resource)

tests/test_utils.py:740: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09ee53a490>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09ee55d750>, 'CHECK...d750>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09ee55d750>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f09a05d6da0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestCustomCorsMiddleware.test_allow_credential_list_or_str[asgi-foo-successOrigin1] _

self = <test_cors_middleware.TestCustomCorsMiddleware object at 0x7f09b5e16f50>
make_cors_client = <function make_cors_client.<locals>.make at 0x7f09a0a565f0>
allow = 'foo', successOrigin = ['foo']

    @pytest.mark.parametrize(
        'allow, successOrigin',
        (
            (['foo', 'bar'], ['foo', 'bar']),
            ('foo', ['foo']),
        ),
    )
    def test_allow_credential_list_or_str(self, make_cors_client, allow, successOrigin):
        client = make_cors_client(falcon.CORSMiddleware(allow_credentials=allow))
>       client.app.add_route('/', CORSHeaderResource())

tests/test_cors_middleware.py:168: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09ee5a7d10>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09ee55fd00>, 'CHECK...fd00>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09ee55fd00>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CORSHeaderResource.on_delete of <test_cors_middleware.CORSHeaderResource object at 0x7f09a06e8be0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestCustomCorsMiddleware.test_allow_origin[asgi-allow2-fail_origins2-success_origins2] _

self = <test_cors_middleware.TestCustomCorsMiddleware object at 0x7f09b5e15ea0>
make_cors_client = <function make_cors_client.<locals>.make at 0x7f0af41ccaf0>
allow = ['foo', 'bar']
fail_origins = ['foo, bar', 'foobar', 'foo,bar', 'Foo', 'BAR']
success_origins = ['foo', 'bar']

    @pytest.mark.parametrize(
        'allow, fail_origins, success_origins',
        (
            ('*', [None], ['foo', 'bar']),
            ('test', ['other', 'Test', 'TEST'], ['test']),
            (
                ['foo', 'bar'],
                ['foo, bar', 'foobar', 'foo,bar', 'Foo', 'BAR'],
                ['foo', 'bar'],
            ),
        ),
    )
    def test_allow_origin(self, make_cors_client, allow, fail_origins, success_origins):
        client = make_cors_client(falcon.CORSMiddleware(allow_origins=allow))
>       client.app.add_route('/', CORSHeaderResource())

tests/test_cors_middleware.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09ee574f90>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5253130>, 'CHECK...3130>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af5253130>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CORSHeaderResource.on_delete of <test_cors_middleware.CORSHeaderResource object at 0x7f09ee5adc30>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestCustomCorsMiddleware.test_allow_origin[asgi-test-fail_origins1-success_origins1] _

self = <test_cors_middleware.TestCustomCorsMiddleware object at 0x7f09b5e16170>
make_cors_client = <function make_cors_client.<locals>.make at 0x7f0af41cfa30>
allow = 'test', fail_origins = ['other', 'Test', 'TEST']
success_origins = ['test']

    @pytest.mark.parametrize(
        'allow, fail_origins, success_origins',
        (
            ('*', [None], ['foo', 'bar']),
            ('test', ['other', 'Test', 'TEST'], ['test']),
            (
                ['foo', 'bar'],
                ['foo, bar', 'foobar', 'foo,bar', 'Foo', 'BAR'],
                ['foo', 'bar'],
            ),
        ),
    )
    def test_allow_origin(self, make_cors_client, allow, fail_origins, success_origins):
        client = make_cors_client(falcon.CORSMiddleware(allow_origins=allow))
>       client.app.add_route('/', CORSHeaderResource())

tests/test_cors_middleware.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af3eb8660>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09ee55e710>, 'CHECK...e710>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09ee55e710>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CORSHeaderResource.on_delete of <test_cors_middleware.CORSHeaderResource object at 0x7f0af3e8c940>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestCustomCorsMiddleware.test_allow_credential_list_or_str[asgi-allow0-successOrigin0] _

self = <test_cors_middleware.TestCustomCorsMiddleware object at 0x7f09b5e16ef0>
make_cors_client = <function make_cors_client.<locals>.make at 0x7f09ee55ff40>
allow = ['foo', 'bar'], successOrigin = ['foo', 'bar']

    @pytest.mark.parametrize(
        'allow, successOrigin',
        (
            (['foo', 'bar'], ['foo', 'bar']),
            ('foo', ['foo']),
        ),
    )
    def test_allow_credential_list_or_str(self, make_cors_client, allow, successOrigin):
        client = make_cors_client(falcon.CORSMiddleware(allow_credentials=allow))
>       client.app.add_route('/', CORSHeaderResource())

tests/test_cors_middleware.py:168: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af3eb8900>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09ee55fe20>, 'CHECK...fe20>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09ee55fe20>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CORSHeaderResource.on_delete of <test_cors_middleware.CORSHeaderResource object at 0x7f0af3e17df0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________ TestCustomCorsMiddleware.test_expose_headers[asgi-foo-foo] __________

self = <test_cors_middleware.TestCustomCorsMiddleware object at 0x7f09b5e177f0>
make_cors_client = <function make_cors_client.<locals>.make at 0x7f09ee55dbd0>
attr = 'foo', exp = 'foo'

    @pytest.mark.parametrize(
        'attr, exp',
        (
            ('foo', 'foo'),
            ('foo, bar', 'foo, bar'),
            (['foo', 'bar'], 'foo, bar'),
        ),
    )
    def test_expose_headers(self, make_cors_client, attr, exp):
        client = make_cors_client(
            falcon.CORSMiddleware(expose_headers=attr, allow_credentials=None)
        )
>       client.app.add_route('/', CORSHeaderResource())

tests/test_cors_middleware.py:224: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af3eb8eb0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09ee55e950>, 'CHECK...e950>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09ee55e950>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CORSHeaderResource.on_delete of <test_cors_middleware.CORSHeaderResource object at 0x7f09ee5d1ff0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ TestCustomCorsMiddleware.test_allow_credential_wildcard[asgi] _________

self = <test_cors_middleware.TestCustomCorsMiddleware object at 0x7f09b5e166b0>
make_cors_client = <function make_cors_client.<locals>.make at 0x7f09ee55c3a0>

    def test_allow_credential_wildcard(self, make_cors_client):
        client = make_cors_client(falcon.CORSMiddleware(allow_credentials='*'))
>       client.app.add_route('/', CORSHeaderResource())

tests/test_cors_middleware.py:153: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af3eb9620>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09ee55f250>, 'CHECK...f250>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09ee55f250>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CORSHeaderResource.on_delete of <test_cors_middleware.CORSHeaderResource object at 0x7f0af3e8fbb0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____ TestCustomCorsMiddleware.test_expose_headers[asgi-foo, bar-foo, bar] _____

self = <test_cors_middleware.TestCustomCorsMiddleware object at 0x7f09b5e17880>
make_cors_client = <function make_cors_client.<locals>.make at 0x7f0af4184430>
attr = 'foo, bar', exp = 'foo, bar'

    @pytest.mark.parametrize(
        'attr, exp',
        (
            ('foo', 'foo'),
            ('foo, bar', 'foo, bar'),
            (['foo', 'bar'], 'foo, bar'),
        ),
    )
    def test_expose_headers(self, make_cors_client, attr, exp):
        client = make_cors_client(
            falcon.CORSMiddleware(expose_headers=attr, allow_credentials=None)
        )
>       client.app.add_route('/', CORSHeaderResource())

tests/test_cors_middleware.py:224: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af3ebb140>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09ee55e7a0>, 'CHECK...e7a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09ee55e7a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CORSHeaderResource.on_delete of <test_cors_middleware.CORSHeaderResource object at 0x7f09a09b74f0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ TestCustomCorsMiddleware.test_allow_origin_allow_credential[asgi] _______

self = <test_cors_middleware.TestCustomCorsMiddleware object at 0x7f09b5e17160>
make_cors_client = <function make_cors_client.<locals>.make at 0x7f09ee55c820>

    def test_allow_origin_allow_credential(self, make_cors_client):
        client = make_cors_client(
            falcon.CORSMiddleware(allow_origins='test', allow_credentials='*')
        )
>       client.app.add_route('/', CORSHeaderResource())

tests/test_cors_middleware.py:197: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af3eabd10>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09ee55de10>, 'CHECK...de10>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09ee55de10>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CORSHeaderResource.on_delete of <test_cors_middleware.CORSHeaderResource object at 0x7f0af3e7bc10>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestCustomCorsMiddleware.test_allow_origin[asgi-*-fail_origins0-success_origins0] _

self = <test_cors_middleware.TestCustomCorsMiddleware object at 0x7f09b5e16650>
make_cors_client = <function make_cors_client.<locals>.make at 0x7f09ee55cdc0>
allow = '*', fail_origins = [None], success_origins = ['foo', 'bar']

    @pytest.mark.parametrize(
        'allow, fail_origins, success_origins',
        (
            ('*', [None], ['foo', 'bar']),
            ('test', ['other', 'Test', 'TEST'], ['test']),
            (
                ['foo', 'bar'],
                ['foo, bar', 'foobar', 'foo,bar', 'Foo', 'BAR'],
                ['foo', 'bar'],
            ),
        ),
    )
    def test_allow_origin(self, make_cors_client, allow, fail_origins, success_origins):
        client = make_cors_client(falcon.CORSMiddleware(allow_origins=allow))
>       client.app.add_route('/', CORSHeaderResource())

tests/test_cors_middleware.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af3eab920>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09ee55e050>, 'CHECK...e050>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09ee55e050>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CORSHeaderResource.on_delete of <test_cors_middleware.CORSHeaderResource object at 0x7f09a05d7040>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ TestCustomCorsMiddleware.test_expose_headers[asgi-attr2-foo, bar] _______

self = <test_cors_middleware.TestCustomCorsMiddleware object at 0x7f09b5e17910>
make_cors_client = <function make_cors_client.<locals>.make at 0x7f09ee55d900>
attr = ['foo', 'bar'], exp = 'foo, bar'

    @pytest.mark.parametrize(
        'attr, exp',
        (
            ('foo', 'foo'),
            ('foo, bar', 'foo, bar'),
            (['foo', 'bar'], 'foo, bar'),
        ),
    )
    def test_expose_headers(self, make_cors_client, attr, exp):
        client = make_cors_client(
            falcon.CORSMiddleware(expose_headers=attr, allow_credentials=None)
        )
>       client.app.add_route('/', CORSHeaderResource())

tests/test_cors_middleware.py:224: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af3ea8f20>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09ee55fd90>, 'CHECK...fd90>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09ee55fd90>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CORSHeaderResource.on_delete of <test_cors_middleware.CORSHeaderResource object at 0x7f09a054d930>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____ TestCustomCorsMiddleware.test_allow_credential_existing_origin[asgi] _____

self = <test_cors_middleware.TestCustomCorsMiddleware object at 0x7f09b5e16da0>
make_cors_client = <function make_cors_client.<locals>.make at 0x7f09ee55c940>

    def test_allow_credential_existing_origin(self, make_cors_client):
        client = make_cors_client(falcon.CORSMiddleware(allow_credentials='*'))
>       client.app.add_route('/', CORSHeaderResource())

tests/test_cors_middleware.py:186: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af3ea8200>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af3e0c160>, 'CHECK...c160>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af3e0c160>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CORSHeaderResource.on_delete of <test_cors_middleware.CORSHeaderResource object at 0x7f09a056ed70>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestCorsMiddleware.test_enabled_cors_should_accept_all_origins_requests[asgi] _

self = <test_cors_middleware.TestCorsMiddleware object at 0x7f09b5e15c60>
cors_client = <falcon.testing.client.TestClient object at 0x7f09a06b3640>

    def test_enabled_cors_should_accept_all_origins_requests(self, cors_client):
>       cors_client.app.add_route('/', CORSHeaderResource())

tests/test_cors_middleware.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af3eb9e70>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af41ce710>, 'CHECK...e710>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af41ce710>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CORSHeaderResource.on_delete of <test_cors_middleware.CORSHeaderResource object at 0x7f09a06b0880>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestCorsMiddleware.test_enabled_cors_handles_preflighting_no_headers_in_req[asgi] _

self = <test_cors_middleware.TestCorsMiddleware object at 0x7f09b5e16140>
cors_client = <falcon.testing.client.TestClient object at 0x7f09a05b6bf0>

    def test_enabled_cors_handles_preflighting_no_headers_in_req(self, cors_client):
>       cors_client.app.add_route('/', CORSHeaderResource())

tests/test_cors_middleware.py:86: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af3ebb530>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af41ccaf0>, 'CHECK...caf0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f0af41ccaf0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CORSHeaderResource.on_delete of <test_cors_middleware.CORSHeaderResource object at 0x7f09a0617430>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestCorsMiddleware.test_disabled_cors_should_not_add_any_extra_headers[asgi] _

self = <test_cors_middleware.TestCorsMiddleware object at 0x7f09b5e156f0>
client = <falcon.testing.client.TestClient object at 0x7f0af3f10e20>

    def test_disabled_cors_should_not_add_any_extra_headers(self, client):
>       client.app.add_route('/', CORSHeaderResource())

tests/test_cors_middleware.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af3eb8890>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09ee55c160>, 'CHECK...c160>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09ee55c160>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CORSHeaderResource.on_delete of <test_cors_middleware.CORSHeaderResource object at 0x7f0af3f10d90>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________ TestCorsMiddleware.test_enabled_cors_no_origin[asgi] _____________

self = <test_cors_middleware.TestCorsMiddleware object at 0x7f09b5e15750>
client = <falcon.testing.client.TestClient object at 0x7f0af3f32620>

    def test_enabled_cors_no_origin(self, client):
>       client.app.add_route('/', CORSHeaderResource())

tests/test_cors_middleware.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f09ee5a7f40>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09ee55e290>, 'CHECK...e290>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09ee55e290>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CORSHeaderResource.on_delete of <test_cors_middleware.CORSHeaderResource object at 0x7f0af3e390c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestCorsMiddleware.test_enabled_cors_should_add_extra_headers_on_response[asgi] _

self = <test_cors_middleware.TestCorsMiddleware object at 0x7f09b5e159f0>
cors_client = <falcon.testing.client.TestClient object at 0x7f09a0bc0820>

    def test_enabled_cors_should_add_extra_headers_on_response(self, cors_client):
>       cors_client.app.add_route('/', CORSHeaderResource())

tests/test_cors_middleware.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af3eaa7a0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09ee55e050>, 'CHECK...e050>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09ee55e050>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CORSHeaderResource.on_delete of <test_cors_middleware.CORSHeaderResource object at 0x7f09a0bc3b80>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______ TestCorsMiddleware.test_enabled_cors_handles_preflighting[asgi] ________

self = <test_cors_middleware.TestCorsMiddleware object at 0x7f09b5e15ed0>
cors_client = <falcon.testing.client.TestClient object at 0x7f09a06177f0>

    def test_enabled_cors_handles_preflighting(self, cors_client):
>       cors_client.app.add_route('/', CORSHeaderResource())

tests/test_cors_middleware.py:68: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af3ea9700>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09ee55e680>, 'CHECK...e680>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09ee55e680>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CORSHeaderResource.on_delete of <test_cors_middleware.CORSHeaderResource object at 0x7f09a050ec50>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______________ test_content_length_set_on_head_with_no_body[asgi] ______________

asgi = True

    def test_content_length_set_on_head_with_no_body(asgi):
        class NoBody:
            def on_get(self, req, resp):
                pass
    
            on_head = on_get
    
        app = create_app(asgi)
>       app.add_route('/', NoBody())

tests/test_response_body.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af3eab300>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0a570a0>, 'CHECK...70a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09a0a570a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method test_content_length_set_on_head_with_no_body.<locals>.NoBody.on_get of <test_response_body.test_content_length_set_on_head_with_no_body.<locals>.NoBody object at 0x7f09ee406f80>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________________ test_unsupported_response_content_type[asgi] _________________

asgi = True

    def test_unsupported_response_content_type(asgi):
        app = create_app(asgi)
>       app.add_route('/test.mal', CodeResource())

tests/test_response_body.py:112: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af3e9e260>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09ee55c3a0>, 'CHECK...c3a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09ee55c3a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CodeResource.on_get of <test_response_body.CodeResource object at 0x7f09a09513f0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________________ test_response_body_rendition_error[asgi] ___________________

asgi = True

    def test_response_body_rendition_error(asgi):
        class MalbolgeHandler(falcon.media.BaseHandler):
            def serialize(self, media, content_type):
                raise falcon.HTTPError(falcon.HTTP_753)
    
        app = create_app(asgi)
        app.resp_options.media_handlers['text/x-malbolge'] = MalbolgeHandler()
>       app.add_route('/test.mal', CodeResource())

tests/test_response_body.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f0af3e9c2e0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09ee55e950>, 'CHECK...e950>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f09ee55e950>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CodeResource.on_get of <test_response_body.CodeResource object at 0x7f09a09edb70>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
=============================== warnings summary ===============================
../../.local/lib/python3.10/site-packages/pyximport/pyximport.py:51
  /home/kaiyaok2/.local/lib/python3.10/site-packages/pyximport/pyximport.py:51: DeprecationWarning: the imp module is deprecated in favour of importlib and slated for removal in Python 3.12; see the module's documentation for alternative uses
    import imp

../../.local/lib/python3.10/site-packages/Cython/Distutils/old_build_ext.py:15
../../.local/lib/python3.10/site-packages/Cython/Distutils/old_build_ext.py:15
  /home/kaiyaok2/.local/lib/python3.10/site-packages/Cython/Distutils/old_build_ext.py:15: DeprecationWarning: dep_util is Deprecated. Use functions from setuptools instead.
    from distutils.dep_util import newer, newer_group

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/asgi/test_cythonized_asgi.py::test_jsonchema_validator - TypeErr...
FAILED tests/asgi/test_cythonized_asgi.py::test_hooks - TypeError: The <bound...
FAILED tests/test_inspect.py::TestInspectApp::test_middleware_tree[asgi] - fa...
FAILED tests/test_inspect.py::TestInspectApp::test_error_handler[asgi] - falc...
FAILED tests/test_inspect.py::TestInspectApp::test_middleware[asgi] - falcon....
FAILED tests/test_inspect.py::TestInspectApp::test_sink[asgi] - falcon.errors...
FAILED tests/test_inspect.py::TestInspectApp::test_routes[asgi] - falcon.erro...
FAILED tests/test_inspect.py::TestInspectApp::test_static_routes[asgi] - falc...
FAILED tests/test_inspect.py::TestInspectApp::test_app[asgi] - falcon.errors....
FAILED tests/test_cython.py::TestCythonized::test_stream_has_private_read - A...
FAILED tests/test_cython.py::TestCythonized::test_imported_from_c_modules - a...
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-HTTPStatus.FORBIDDEN-403]
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-HTTPStatus.ACCEPTED-202]
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-HTTPStatus.OK-2000]
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-702-702] - TypeE...
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-HTTPStatus.NOT_FOUND-404]
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-HTTPStatus.NOT_IMPLEMENTED-501]
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-307-307] - TypeE...
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-702 Emacs-702]
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-200 OK-200] - Ty...
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-200-200] - TypeE...
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-HTTPStatus.INTERNAL_SERVER_ERROR-500]
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-500-500] - TypeE...
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-HTTPStatus.USE_PROXY-305]
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-HTTPStatus.OK-2001]
FAILED tests/test_testing.py::test_client_simulate_aliases[asgi-GET] - falcon...
FAILED tests/test_testing.py::test_client_simulate_aliases[asgi-HEAD] - falco...
FAILED tests/test_testing.py::test_client_simulate_aliases[asgi-PUT] - falcon...
FAILED tests/test_testing.py::test_client_simulate_aliases[asgi-OPTIONS] - fa...
FAILED tests/test_testing.py::test_client_simulate_aliases[asgi-PATCH] - falc...
FAILED tests/test_testing.py::test_client_simulate_aliases[asgi-LOCK] - falco...
FAILED tests/test_testing.py::test_client_simulate_aliases[asgi-DELETE] - fal...
FAILED tests/test_testing.py::test_client_simulate_aliases[asgi-POST] - falco...
FAILED tests/test_headers.py::TestHeaders::test_unicode_headers_contain_only_ascii[asgi]
FAILED tests/test_headers.py::TestHeaders::test_append_link_with_link_extension[asgi]
FAILED tests/test_headers.py::TestHeaders::test_content_disposition_inline_header[asgi-report.csv-inline; filename="report.csv"]
FAILED tests/test_headers.py::TestHeaders::test_append_link_crossorigin[asgi-Use-Credentials-</related/thing>; rel=alternate; crossorigin="use-credentials"]
FAILED tests/test_headers.py::TestHeaders::test_response_set_and_get_header[asgi]
FAILED tests/test_headers.py::TestHeaders::test_no_content_length[asgi-304 Not Modified]
FAILED tests/test_headers.py::TestHeaders::test_get_header_as_int[asgi] - Typ...
FAILED tests/test_headers.py::TestHeaders::test_content_disposition_attachment_header[asgi-one,two.txt-attachment; filename="one,two.txt"]
FAILED tests/test_headers.py::TestHeaders::test_content_disposition_attachment_header[asgi-report.csv-attachment; filename="report.csv"]
FAILED tests/test_headers.py::TestHeaders::test_declared_content_length_overriden_by_data_length[asgi]
FAILED tests/test_headers.py::TestHeaders::test_unset_header[asgi-False] - Ty...
FAILED tests/test_headers.py::TestHeaders::test_unicode_headers_contain_non_ascii[asgi-POST]
FAILED tests/test_headers.py::TestHeaders::test_append_link_crossorigin[asgi-Anonymous-</related/thing>; rel=alternate; crossorigin]
FAILED tests/test_headers.py::TestHeaders::test_append_link_with_type_hint[asgi]
FAILED tests/test_headers.py::TestHeaders::test_content_disposition_attachment_header[asgi-\xbd,\xb2\u2044\u2082.txt-attachment; filename=1_2_2_2.txt; filename*=UTF-8''%C2%BD%2C%C2%B2%E2%81%84%E2%82%82.txt]
FAILED tests/test_headers.py::TestHeaders::test_unicode_headers_contain_non_ascii[asgi-CONNECT]
FAILED tests/test_headers.py::TestHeaders::test_headers_as_list[asgi] - TypeE...
FAILED tests/test_headers.py::TestHeaders::test_required_header[asgi] - TypeE...
FAILED tests/test_headers.py::TestHeaders::test_append_link_complex[asgi] - T...
FAILED tests/test_headers.py::TestHeaders::test_append_link_crossorigin[asgi-AnOnYmOUs-</related/thing>; rel=alternate; crossorigin]
FAILED tests/test_headers.py::TestHeaders::test_content_disposition_attachment_header[asgi-\xc5ngstr\xf6m unit.txt-attachment; filename=A_ngstro_m_unit.txt; filename*=UTF-8''%C3%85ngstr%C3%B6m%20unit.txt]
FAILED tests/test_headers.py::TestHeaders::test_append_link_with_anchor[asgi]
FAILED tests/test_headers.py::TestHeaders::test_override_default_media_type_missing_encoding[True]
FAILED tests/test_headers.py::TestHeaders::test_content_type_no_body[asgi] - ...
FAILED tests/test_headers.py::TestHeaders::test_headers_with_custom_class_not_callable[asgi]
FAILED tests/test_headers.py::TestHeaders::test_content_disposition_inline_header[asgi-Hello World.txt-inline; filename="Hello World.txt"]
FAILED tests/test_headers.py::TestHeaders::test_append_link_single[asgi] - Ty...
FAILED tests/test_headers.py::TestHeaders::test_unicode_headers_contain_non_ascii[asgi-PUT]
FAILED tests/test_headers.py::TestHeaders::test_content_disposition_attachment_header[asgi-[foo] @ bar.txt-attachment; filename="[foo] @ bar.txt"]
FAILED tests/test_headers.py::TestHeaders::test_declared_content_length_overridden_by_no_body[asgi]
FAILED tests/test_headers.py::TestHeaders::test_vary_star[asgi] - TypeError: ...
FAILED tests/test_headers.py::TestHeaders::test_append_link_with_hreflang[asgi]
FAILED tests/test_headers.py::TestHeaders::test_unicode_location_headers[asgi]
FAILED tests/test_headers.py::TestHeaders::test_content_disposition_inline_header[asgi-Bold Digit \U0001d7cf.txt-inline; filename=Bold_Digit_1.txt; filename*=UTF-8''Bold%20Digit%20%F0%9D%9F%8F.txt]
FAILED tests/test_headers.py::TestHeaders::test_no_content_type[asgi-304 Not Modified]
FAILED tests/test_headers.py::TestHeaders::test_no_content_type[asgi-204 No Content]
FAILED tests/test_headers.py::TestHeaders::test_vary_header[asgi-vary0-accept-encoding]
FAILED tests/test_headers.py::TestHeaders::test_append_link_crossorigin[asgi-use-credentials-</related/thing>; rel=alternate; crossorigin="use-credentials"]
FAILED tests/test_headers.py::TestHeaders::test_response_append_header[asgi]
FAILED tests/test_headers.py::TestHeaders::test_request_latin1_headers[asgi]
FAILED tests/test_headers.py::TestHeaders::test_response_header_helpers_on_get[asgi]
FAILED tests/test_headers.py::TestHeaders::test_request_multiple_header[asgi]
FAILED tests/test_headers.py::TestHeaders::test_content_disposition_attachment_header[asgi-Hello World.txt-attachment; filename="Hello World.txt"]
FAILED tests/test_headers.py::TestHeaders::test_declared_content_length_overriden_by_body_length[asgi]
FAILED tests/test_headers.py::TestHeaders::test_content_disposition_attachment_header[asgi-[f\xf2\xf3]@b\xe0r,b\xe4z.txt-attachment; filename=_fo_o___ba_r_ba_z.txt; filename*=UTF-8''%5Bf%C3%B2%C3%B3%5D%40b%C3%A0r%2Cb%C3%A4z.txt]
FAILED tests/test_headers.py::TestHeaders::test_default_media_type[asgi] - Ty...
FAILED tests/test_headers.py::TestHeaders::test_default_value[asgi] - TypeErr...
FAILED tests/test_headers.py::TestHeaders::test_custom_content_type[asgi] - T...
FAILED tests/test_headers.py::TestHeaders::test_set_headers_with_custom_class[asgi]
FAILED tests/test_headers.py::TestHeaders::test_no_content_length[asgi-204 No Content]
FAILED tests/test_headers.py::TestHeaders::test_append_link_crossorigin[asgi-None-</related/thing>; rel=alternate]
FAILED tests/test_headers.py::TestHeaders::test_content_length[asgi] - TypeEr...
FAILED tests/test_headers.py::TestHeaders::test_unset_header[asgi-True] - Typ...
FAILED tests/test_headers.py::TestHeaders::test_passthrough_request_headers[asgi]
FAILED tests/test_headers.py::TestHeaders::test_unicode_headers_contain_non_ascii[asgi-PATCH]
FAILED tests/test_headers.py::TestHeaders::test_append_link_with_title_star[asgi]
FAILED tests/test_headers.py::TestHeaders::test_append_link_with_title[asgi]
FAILED tests/test_headers.py::TestHeaders::test_declared_content_length_on_head[asgi]
FAILED tests/test_headers.py::TestHeaders::test_content_disposition_attachment_header[asgi-Bold Digit \U0001d7cf.txt-attachment; filename=Bold_Digit_1.txt; filename*=UTF-8''Bold%20Digit%20%F0%9D%9F%8F.txt]
FAILED tests/test_headers.py::TestHeaders::test_override_default_media_type[text/plain-Hello ISO-8859-1!-True]
FAILED tests/test_headers.py::TestHeaders::test_override_default_media_type[text/plain; charset=UTF-8-Hello Unicode! \U0001f638-True]
FAILED tests/test_headers.py::TestHeaders::test_vary_header[asgi-vary1-accept-encoding, x-auth-token]
FAILED tests/test_headers.py::TestHeaders::test_expires_header[asgi] - TypeEr...
FAILED tests/test_headers.py::TestHeaders::test_append_link_multiple[asgi] - ...
FAILED tests/test_headers.py::TestHeaders::test_append_link_crossorigin[asgi-anonymous-</related/thing>; rel=alternate; crossorigin]
FAILED tests/test_headers.py::TestHeaders::test_append_link_with_hreflang_multi[asgi]
FAILED tests/test_cmd_inspect_app.py::TestLoadApp::test_load_app_error[foo]
FAILED tests/test_cmd_inspect_app.py::TestLoadApp::test_load_app[make_app] - ...
FAILED tests/test_cmd_inspect_app.py::TestLoadApp::test_load_app_error[DummyResource]
FAILED tests/test_cmd_inspect_app.py::TestLoadApp::test_load_app_error[_MODULE]
FAILED tests/test_cmd_inspect_app.py::TestLoadApp::test_load_app[_APP] - Modu...
FAILED tests/test_cmd_inspect_app.py::TestMain::test_inspect[not-internal-not-verbose]
FAILED tests/test_cmd_inspect_app.py::TestMain::test_inspect[internal-verbose]
FAILED tests/test_cmd_inspect_app.py::TestMain::test_routes_only[internal-verbose]
FAILED tests/test_cmd_inspect_app.py::TestMain::test_inspect[internal-not-verbose]
FAILED tests/test_cmd_inspect_app.py::TestMain::test_inspect[not-internal-verbose]
FAILED tests/test_cmd_inspect_app.py::TestMain::test_routes_only[not-internal-verbose]
FAILED tests/test_cmd_inspect_app.py::TestMain::test_routes_only[internal-not-verbose]
FAILED tests/test_cmd_inspect_app.py::TestMain::test_routes_only[not-internal-not-verbose]
FAILED tests/test_media_handlers.py::test_json_err_no_handler[asgi-True] - Ty...
FAILED tests/test_media_handlers.py::test_json_err_no_handler[asgi-False] - T...
FAILED tests/test_query_params.py::TestQueryParams::test_get_date_valid[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_get_query_params-asgi-t=1,2&t=3,4-False-expected2]
FAILED tests/test_query_params.py::TestQueryParams::test_default_auto_parse_csv_behaviour[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_required[simulate_request_get_query_params-asgi-get_param_as_float]
FAILED tests/test_query_params.py::TestQueryParams::test_get_date_store[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_get_query_params-asgi-t=1&t=2&t=3,4-False-expected1]
FAILED tests/test_query_params.py::TestQueryParams::test_get_date_invalid[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_date_valid_with_format[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_false[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_date_store[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_blank[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_bad_percentage[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_float_neg[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_post_query_params-asgi-t=1,,2&t=3,4-True-expected4]
FAILED tests/test_query_params.py::TestQueryParams::test_has_param[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_blank[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_multiple_keys_as_float[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_default[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_list_type_blank[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_date_invalid[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_none[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_percent_encoded[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_get_query_params-asgi-t=1&t=,1,4,,5&t=a,b,c-True-expected8]
FAILED tests/test_query_params.py::TestQueryParams::test_default_auto_parse_csv_behaviour[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_multiple_form_keys_as_list[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_get_query_params-asgi-t=1,2&t=3,4,,5-False-expected5]
FAILED tests/test_query_params.py::TestQueryParams::test_int[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_required[simulate_request_get_query_params-asgi-get_param_as_uuid]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_get_query_params-asgi-t=1&t=3,4-False-expected0]
FAILED tests/test_query_params.py::TestQueryParams::test_get_datetime_valid_with_format[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_boolean[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_get_query_params-asgi-t=1&t=,1,4,,5-True-expected7]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_get_query_params-asgi-t=1,,2&t=3,4-False-expected3]
FAILED tests/test_query_params.py::TestQueryParams::test_required[simulate_request_post_query_params-asgi-get_param_as_list]
FAILED tests/test_query_params.py::TestQueryParams::test_allowed_names[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_required[simulate_request_post_query_params-asgi-get_param_as_int]
FAILED tests/test_query_params.py::TestQueryParams::test_get_dict_invalid[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_post_query_params-asgi-t=1,2&t=3,4-False-expected2]
FAILED tests/test_query_params.py::TestQueryParams::test_get_date_valid[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_required[simulate_request_post_query_params-asgi-get_param_as_bool]
FAILED tests/test_query_params.py::TestQueryParams::test_list_transformer[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_int[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_get_query_params-asgi-t=1,,2&t=3,4-True-expected4]
FAILED tests/test_query_params.py::TestQueryParams::test_get_datetime_store[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_default[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_list_transformer[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_datetime_valid[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_datetime_store[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_int_neg[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_dict_missing_param[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_required[simulate_request_get_query_params-asgi-get_param_as_bool]
FAILED tests/test_query_params.py::TestQueryParams::test_multiple_keys_as_int[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_get_query_params-asgi-t=1&t=,1,4,,5-False-expected6]
FAILED tests/test_query_params.py::TestQueryParams::test_get_date_missing_param[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_multiple_keys_as_float[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_param_as_json_handler_json[asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_multiple_form_keys[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_multiple_keys_as_bool[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_simple_true[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_float[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_none[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_simple_true[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_datetime_invalid[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_post_query_params-asgi-t=1&t=2&t=3,4-False-expected1]
FAILED tests/test_query_params.py::TestQueryParams::test_allowed_names[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_complex_false[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_complex_false[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_multiple_keys_as_bool[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_required[simulate_request_post_query_params-asgi-get_param_as_float]
FAILED tests/test_query_params.py::TestQueryParams::test_multiple_keys_as_int[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_dict_missing_param[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_boolean_blank[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_param_as_json_no_handler_json[asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_post_query_params-asgi-t=1,,2&t=3,4-False-expected3]
FAILED tests/test_query_params.py::TestQueryParams::test_list_type_blank[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_percent_encoded[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_required[simulate_request_get_query_params-asgi-get_param_as_list]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_post_query_params-asgi-t=1&t=,1,4,,5&t=a,b,c-True-expected8]
FAILED tests/test_query_params.py::TestQueryParams::test_boolean[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_has_param[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_uuid[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_multiple_form_keys[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_dict_store[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_datetime_invalid[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_post_query_params-asgi-t=1&t=3,4-False-expected0]
FAILED tests/test_query_params.py::TestQueryParams::test_list_type[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_required[simulate_request_get_query_params-asgi-get_param_as_int]
FAILED tests/test_query_params.py::TestQueryParams::test_required[simulate_request_post_query_params-asgi-get_param_as_uuid]
FAILED tests/test_query_params.py::TestQueryParams::test_multiple_form_keys_as_list[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_dict_store[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_float_neg[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_simple[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_simple[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_post_query_params-asgi-t=1&t=,1,4,,5-False-expected6]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_simple_false[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_simple_false[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_param_property[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_datetime_missing_param[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_datetime_valid_with_format[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_float[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_date_valid_with_format[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_post_query_params-asgi-t=1,2&t=3,4,,5-False-expected5]
FAILED tests/test_query_params.py::TestQueryParams::test_get_date_missing_param[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_post_query_params-asgi-t=1&t=,1,4,,5-True-expected7]
FAILED tests/test_query_params.py::TestQueryParams::test_get_datetime_valid[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_required[simulate_request_post_query_params-asgi-get_param]
FAILED tests/test_query_params.py::TestQueryParams::test_boolean_blank[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_bad_percentage[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_param_property[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_dict_invalid[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_dict_valid[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_false[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_dict_valid[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_int_neg[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_list_type[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_datetime_missing_param[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_required[simulate_request_get_query_params-asgi-get_param]
FAILED tests/test_query_params.py::TestQueryParams::test_uuid[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestPostQueryParamsDefaultBehavior::test_dont_auto_parse_by_default[True]
FAILED tests/test_query_params.py::TestPostQueryParams::test_http_methods_body_expected[asgi-DELETE]
FAILED tests/test_query_params.py::TestPostQueryParams::test_empty_body[asgi]
FAILED tests/test_query_params.py::TestPostQueryParams::test_asgi_raises_error
FAILED tests/test_query_params.py::TestPostQueryParams::test_http_methods_body_expected[asgi-OPTIONS]
FAILED tests/test_query_params.py::TestPostQueryParams::test_http_methods_body_not_expected[asgi-HEAD]
FAILED tests/test_query_params.py::TestPostQueryParams::test_http_methods_body_expected[asgi-PATCH]
FAILED tests/test_query_params.py::TestPostQueryParams::test_empty_body_no_content_length[asgi]
FAILED tests/test_query_params.py::TestPostQueryParams::test_http_methods_body_not_expected[asgi-GET]
FAILED tests/test_query_params.py::TestPostQueryParams::test_http_methods_body_expected[asgi-POST]
FAILED tests/test_query_params.py::TestPostQueryParams::test_http_methods_body_expected[asgi-PUT]
FAILED tests/test_query_params.py::TestPostQueryParams::test_explicitly_disable_auto_parse[asgi]
FAILED tests/test_query_params.py::TestPostQueryParams::test_non_ascii[asgi]
FAILED tests/test_middleware.py::TestTransactionIdMiddleware::test_generate_trans_id_with_request[asgi]
FAILED tests/test_middleware.py::TestShortCircuiting::test_process_request_not_cached[asgi]
FAILED tests/test_middleware.py::TestShortCircuiting::test_process_resource_cached[asgi-False]
FAILED tests/test_middleware.py::TestShortCircuiting::test_process_resource_cached[asgi-True]
FAILED tests/test_middleware.py::TestShortCircuiting::test_process_request_cached[asgi-False]
FAILED tests/test_middleware.py::TestShortCircuiting::test_process_request_cached[asgi-True]
FAILED tests/test_middleware.py::TestRemoveBasePathMiddleware::test_base_path_is_removed_before_routing[asgi]
FAILED tests/test_middleware.py::TestErrorHandling::test_error_composed_before_resp_middleware_called[asgi]
FAILED tests/test_middleware.py::TestErrorHandling::test_http_status_raised_from_error_handler[asgi]
FAILED tests/test_middleware.py::TestCORSMiddlewareWithAnotherMiddleware::test_api_initialization_with_cors_enabled_and_middleware_param[asgi-mw2]
FAILED tests/test_middleware.py::TestCORSMiddlewareWithAnotherMiddleware::test_api_initialization_with_cors_enabled_and_middleware_param[asgi-mw3]
FAILED tests/test_middleware.py::TestCORSMiddlewareWithAnotherMiddleware::test_api_initialization_with_cors_enabled_and_middleware_param[asgi-mw1]
FAILED tests/test_middleware.py::TestCORSMiddlewareWithAnotherMiddleware::test_api_initialization_with_cors_enabled_and_middleware_param[asgi-mw0]
FAILED tests/test_middleware.py::TestRequestTimeMiddleware::test_log_get_request[asgi-True]
FAILED tests/test_middleware.py::TestRequestTimeMiddleware::test_skip_process_resource[asgi]
FAILED tests/test_middleware.py::TestRequestTimeMiddleware::test_log_get_request[asgi-False]
FAILED tests/test_middleware.py::TestRequestTimeMiddleware::test_response_middleware_raises_exception[asgi]
FAILED tests/test_middleware.py::TestResourceMiddleware::test_can_access_resource_params[asgi-False]
FAILED tests/test_middleware.py::TestResourceMiddleware::test_can_access_resource_params[asgi-True]
FAILED tests/test_middleware.py::TestEmptySignatureMiddleware::test_dont_need_params_in_signature[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_order_mw_executed_when_exception_in_resp[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_generate_trans_id_and_time_with_request[asgi-False]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_inner_mw_with_ex_handler_throw_exception[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_middleware_execution_order[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_generate_trans_id_and_time_with_request[asgi-True]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_order_independent_mw_executed_when_exception_in_req[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_order_mw_executed_when_exception_in_rsrc[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_order_independent_mw_executed_when_exception_in_rsrc[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_legacy_middleware_called_with_correct_args[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_multiple_response_mw_throw_exception[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_order_independent_mw_executed_when_exception_in_resp[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_independent_middleware_execution_order[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_inner_mw_throw_exception_while_processing_resp[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_outer_mw_with_ex_handler_throw_exception[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_inner_mw_throw_exception[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_order_mw_executed_when_exception_in_req[asgi]
FAILED tests/test_error_handlers.py::TestErrorHandler::test_caught_error_async[asgi]
FAILED tests/test_error_handlers.py::TestErrorHandler::test_catch_http_no_route_error[asgi]
FAILED tests/test_utils.py::TestFalconTestingUtils::test_path_must_start_with_slash[asgi]
FAILED tests/test_utils.py::TestFalconTestingUtils::test_query_string_in_path[asgi]
FAILED tests/test_utils.py::TestFalconTestingUtils::test_simulate_remote_addr[asgi-104.24.101.85]
FAILED tests/test_utils.py::TestFalconTestingUtils::test_default_headers_with_override[asgi]
FAILED tests/test_utils.py::TestFalconTestingUtils::test_simulate_hostname[asgi]
FAILED tests/test_utils.py::TestFalconTestingUtils::test_query_string[asgi]
FAILED tests/test_utils.py::TestFalconTestingUtils::test_simulate_remote_addr[asgi-8.8.8.8]
FAILED tests/test_utils.py::TestFalconTestingUtils::test_simulate_remote_addr[asgi-None]
FAILED tests/test_utils.py::TestFalconTestingUtils::test_status[asgi] - TypeE...
FAILED tests/test_utils.py::TestFalconTestingUtils::test_simulate_remote_addr[asgi-127.0.0.1]
FAILED tests/test_utils.py::TestFalconTestingUtils::test_override_method_with_extras[asgi]
FAILED tests/test_utils.py::TestFalconTestingUtils::test_cached_text_in_result[asgi]
FAILED tests/test_utils.py::TestFalconTestingUtils::test_query_string_no_question[asgi]
FAILED tests/test_utils.py::TestFalconTestingUtils::test_simulate_remote_addr[asgi-2606:4700:30::6818:6455]
FAILED tests/test_utils.py::TestFalconTestingUtils::test_default_headers[asgi]
FAILED tests/test_cors_middleware.py::TestCustomCorsMiddleware::test_allow_credential_list_or_str[asgi-foo-successOrigin1]
FAILED tests/test_cors_middleware.py::TestCustomCorsMiddleware::test_allow_origin[asgi-allow2-fail_origins2-success_origins2]
FAILED tests/test_cors_middleware.py::TestCustomCorsMiddleware::test_allow_origin[asgi-test-fail_origins1-success_origins1]
FAILED tests/test_cors_middleware.py::TestCustomCorsMiddleware::test_allow_credential_list_or_str[asgi-allow0-successOrigin0]
FAILED tests/test_cors_middleware.py::TestCustomCorsMiddleware::test_expose_headers[asgi-foo-foo]
FAILED tests/test_cors_middleware.py::TestCustomCorsMiddleware::test_allow_credential_wildcard[asgi]
FAILED tests/test_cors_middleware.py::TestCustomCorsMiddleware::test_expose_headers[asgi-foo, bar-foo, bar]
FAILED tests/test_cors_middleware.py::TestCustomCorsMiddleware::test_allow_origin_allow_credential[asgi]
FAILED tests/test_cors_middleware.py::TestCustomCorsMiddleware::test_allow_origin[asgi-*-fail_origins0-success_origins0]
FAILED tests/test_cors_middleware.py::TestCustomCorsMiddleware::test_expose_headers[asgi-attr2-foo, bar]
FAILED tests/test_cors_middleware.py::TestCustomCorsMiddleware::test_allow_credential_existing_origin[asgi]
FAILED tests/test_cors_middleware.py::TestCorsMiddleware::test_enabled_cors_should_accept_all_origins_requests[asgi]
FAILED tests/test_cors_middleware.py::TestCorsMiddleware::test_enabled_cors_handles_preflighting_no_headers_in_req[asgi]
FAILED tests/test_cors_middleware.py::TestCorsMiddleware::test_disabled_cors_should_not_add_any_extra_headers[asgi]
FAILED tests/test_cors_middleware.py::TestCorsMiddleware::test_enabled_cors_no_origin[asgi]
FAILED tests/test_cors_middleware.py::TestCorsMiddleware::test_enabled_cors_should_add_extra_headers_on_response[asgi]
FAILED tests/test_cors_middleware.py::TestCorsMiddleware::test_enabled_cors_handles_preflighting[asgi]
FAILED tests/test_response_body.py::test_content_length_set_on_head_with_no_body[asgi]
FAILED tests/test_response_body.py::test_unsupported_response_content_type[asgi]
FAILED tests/test_response_body.py::test_response_body_rendition_error[asgi]
ERROR tests/test_error_handlers.py::TestCustomError::test_data_is_set[asgi]
ERROR tests/test_error_handlers.py::TestCustomError::test_media_is_set[asgi]
ERROR tests/test_error_handlers.py::TestCustomError::test_body_is_set[asgi]
ERROR tests/test_error_handlers.py::TestNoBodyWithStatus::test_media_is_set[asgi]
ERROR tests/test_error_handlers.py::TestNoBodyWithStatus::test_body_is_set[asgi]
ERROR tests/test_error_handlers.py::TestNoBodyWithStatus::test_data_is_set[asgi]
ERROR tests/test_error_handlers.py::TestErrorHandler::test_subclass_error[asgi]
ERROR tests/test_error_handlers.py::TestErrorHandler::test_handler_multiple_exception_iterable[asgi-exceptions0]
ERROR tests/test_error_handlers.py::TestErrorHandler::test_error_precedence_subclass_order_indifference[asgi]
ERROR tests/test_error_handlers.py::TestErrorHandler::test_handle_not_defined[asgi]
ERROR tests/test_error_handlers.py::TestErrorHandler::test_invalid_add_exception_handler_input[asgi-exceptions2]
ERROR tests/test_error_handlers.py::TestErrorHandler::test_caught_error[asgi]
ERROR tests/test_error_handlers.py::TestErrorHandler::test_error_precedence_subclass[asgi]
ERROR tests/test_error_handlers.py::TestErrorHandler::test_uncaught_python_error[asgi-get_headers2-application/xml-<?xml]
ERROR tests/test_error_handlers.py::TestErrorHandler::test_invalid_add_exception_handler_input[asgi-Hello, world!]
ERROR tests/test_error_handlers.py::TestErrorHandler::test_uncaught_python_error[asgi-get_headers1-application/json-{"]
ERROR tests/test_error_handlers.py::TestErrorHandler::test_handler_multiple_exception_iterable[asgi-exceptions1]
ERROR tests/test_error_handlers.py::TestErrorHandler::test_uncaught_error_else[asgi]
ERROR tests/test_error_handlers.py::TestErrorHandler::test_error_precedence_duplicate[asgi]
ERROR tests/test_error_handlers.py::TestErrorHandler::test_invalid_add_exception_handler_input[asgi-exceptions3]
ERROR tests/test_error_handlers.py::TestErrorHandler::test_invalid_add_exception_handler_input[asgi-exceptions0]
ERROR tests/test_error_handlers.py::TestErrorHandler::test_handler_single_exception_iterable[asgi]
ERROR tests/test_error_handlers.py::TestErrorHandler::test_uncaught_python_error[asgi-None-application/json-{"]
ERROR tests/test_error_handlers.py::TestErrorHandler::test_uncaught_error[asgi]
ERROR tests/test_error_handlers.py::TestErrorHandler::test_converted_error[asgi]
ERROR tests/test_redirects.py::TestRedirects::test_redirect_with_headers[asgi-HEAD-308 Permanent Redirect-/perm/redirect]
ERROR tests/test_redirects.py::TestRedirects::test_redirect[asgi-DELETE-307 Temporary Redirect-/tmp/redirect]
ERROR tests/test_redirects.py::TestRedirects::test_redirect_with_headers[asgi-POST-302 Found-/found]
ERROR tests/test_redirects.py::TestRedirects::test_redirect[asgi-GET-301 Moved Permanently-/moved/perm]
ERROR tests/test_redirects.py::TestRedirects::test_redirect[asgi-POST-302 Found-/found]
ERROR tests/test_redirects.py::TestRedirects::test_redirect_with_headers[asgi-PUT-303 See Other-/see/other]
ERROR tests/test_redirects.py::TestRedirects::test_redirect[asgi-HEAD-308 Permanent Redirect-/perm/redirect]
ERROR tests/test_redirects.py::TestRedirects::test_redirect_with_headers[asgi-GET-301 Moved Permanently-/moved/perm]
ERROR tests/test_redirects.py::TestRedirects::test_redirect[asgi-PUT-303 See Other-/see/other]
ERROR tests/test_redirects.py::TestRedirects::test_redirect_with_headers[asgi-DELETE-307 Temporary Redirect-/tmp/redirect]
ERROR tests/test_http_method_routing.py::TestHttpMethodRouting::test_report[asgi]
ERROR tests/test_http_method_routing.py::TestHttpMethodRouting::test_meta_and_others_disallowed[asgi-SETECASTRONOMY]
ERROR tests/test_http_method_routing.py::TestHttpMethodRouting::test_meta_and_others_disallowed[asgi-WEBSOCKET]
ERROR tests/test_http_method_routing.py::TestHttpMethodRouting::test_default_on_options[asgi]
ERROR tests/test_http_method_routing.py::TestHttpMethodRouting::test_put[asgi]
ERROR tests/test_http_method_routing.py::TestHttpMethodRouting::test_post_not_allowed[asgi]
ERROR tests/test_http_method_routing.py::TestHttpMethodRouting::test_misc[asgi]
ERROR tests/test_http_method_routing.py::TestHttpMethodRouting::test_get[asgi]
ERROR tests/test_http_method_routing.py::TestHttpMethodRouting::test_on_options[asgi]
ERROR tests/test_http_method_routing.py::TestHttpMethodRouting::test_method_not_allowed_with_param[asgi]
ERROR tests/test_http_method_routing.py::TestHttpMethodRouting::test_methods_not_allowed_simple[asgi]
ERROR tests/test_http_method_routing.py::TestHttpMethodRouting::test_methods_not_allowed_complex[asgi]
= 318 failed, 3186 passed, 111 skipped, 3 warnings, 47 errors in 306.91s (0:05:06) =
