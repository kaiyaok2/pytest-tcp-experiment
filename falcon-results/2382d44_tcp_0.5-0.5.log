============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.2.2, pluggy-1.3.0
Using --randomly-seed=1706683583
PyQt5 5.15.10 -- Qt runtime 5.15.2 -- Qt compiled 5.15.2
rootdir: /home/kaiyaok2/PythonProjects/falcon, configfile: pyproject.toml, testpaths: tests
plugins: hypothesis-6.81.1, cov-4.1.0, randomly-3.1.0, typeguard-4.1.5, timeout-1.4.2, qt-4.3.1, nbval-0.10.0, mock-3.12.0, tcp-0.1.1, textual-snapshot-0.4.0, asyncio-0.21.1, xdist-3.2.1, cookies-0.7.0, instafail-0.5.0, syrupy-4.6.0, anyio-3.7.1
asyncio: mode=strict
collected 3662 items
Using TCP weights 0.5-0.5
Collect TCP features took 0.19800519943237305s.
Compute TCP order took 0.06076979637145996s.

tests/asgi/test_testing_asgi.py .
current test PASSED/SKIPPED -- test_invalid_asgi_events in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_testing_asgi.py: 0.004464626312255859s cumulative, 0.004464626312255859s individual

.
current test PASSED/SKIPPED -- test_create_scope_default_ua_override in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_testing_asgi.py: 0.007628440856933594s cumulative, 0.0031638145446777344s individual

.
current test PASSED/SKIPPED -- test_create_scope_default_ua_modify_global in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_testing_asgi.py: 0.010248661041259766s cumulative, 0.002620220184326172s individual

.
current test PASSED/SKIPPED -- test_immediate_disconnect in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_testing_asgi.py: 0.015189409255981445s cumulative, 0.00494074821472168s individual

.
current test PASSED/SKIPPED -- test_create_scope_default_ua in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_testing_asgi.py: 0.018233060836791992s cumulative, 0.003043651580810547s individual

.
current test PASSED/SKIPPED -- test_missing_header_is_none in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_testing_asgi.py: 0.02102208137512207s cumulative, 0.002789020538330078s individual

.
current test PASSED/SKIPPED -- test_ignore_extra_asgi_events in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_testing_asgi.py: 0.023734092712402344s cumulative, 0.0027120113372802734s individual

.
current test PASSED/SKIPPED -- test_is_asgi_app_cls in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_testing_asgi.py: 0.026477813720703125s cumulative, 0.0027437210083007812s individual

.
current test PASSED/SKIPPED -- test_cookies_jar in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_testing_asgi.py: 0.031942129135131836s cumulative, 0.005464315414428711s individual


tests/test_cors_middleware.py .
current test PASSED/SKIPPED -- test_enabled_cors_should_accept_all_origins_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 0.05045127868652344s cumulative, 0.0185091495513916s individual

.
current test PASSED/SKIPPED -- test_enabled_cors_should_add_extra_headers_on_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 0.05638456344604492s cumulative, 0.005933284759521484s individual

.
current test PASSED/SKIPPED -- test_enabled_cors_handles_preflighting_no_headers_in_req in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 0.061018943786621094s cumulative, 0.004634380340576172s individual

.
current test PASSED/SKIPPED -- test_enabled_cors_no_origin in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 0.06582164764404297s cumulative, 0.004802703857421875s individual

.
current test PASSED/SKIPPED -- test_enabled_cors_handles_preflighting in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 0.07078027725219727s cumulative, 0.004958629608154297s individual

.
current test PASSED/SKIPPED -- test_disabled_cors_should_not_add_any_extra_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 0.07570600509643555s cumulative, 0.004925727844238281s individual

.
current test PASSED/SKIPPED -- test_allow_origin in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 0.08664774894714355s cumulative, 0.010941743850708008s individual

.
current test PASSED/SKIPPED -- test_allow_credential_list_or_str in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 0.09702324867248535s cumulative, 0.010375499725341797s individual

.
current test PASSED/SKIPPED -- test_expose_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 0.10362362861633301s cumulative, 0.006600379943847656s individual

.
current test PASSED/SKIPPED -- test_allow_origin in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 0.11069464683532715s cumulative, 0.007071018218994141s individual

.
current test PASSED/SKIPPED -- test_allow_origin_allow_credential in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 0.11766386032104492s cumulative, 0.0069692134857177734s individual

.
current test PASSED/SKIPPED -- test_expose_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 0.12268781661987305s cumulative, 0.005023956298828125s individual

.
current test PASSED/SKIPPED -- test_allow_credential_wildcard in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 0.12978863716125488s cumulative, 0.007100820541381836s individual

.
current test PASSED/SKIPPED -- test_allow_origin in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 0.13943719863891602s cumulative, 0.009648561477661133s individual

.
current test PASSED/SKIPPED -- test_allow_credential_list_or_str in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 0.14939260482788086s cumulative, 0.009955406188964844s individual

.
current test PASSED/SKIPPED -- test_allow_credential_existing_origin in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 0.15445423126220703s cumulative, 0.005061626434326172s individual

.
current test PASSED/SKIPPED -- test_expose_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 0.16221165657043457s cumulative, 0.007757425308227539s individual


tests/test_query_params.py .
current test PASSED/SKIPPED -- test_simple in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.16764450073242188s cumulative, 0.005432844161987305s individual

s
current test PASSED/SKIPPED -- test_get_date_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.17224717140197754s cumulative, 0.004602670669555664s individual

.
current test PASSED/SKIPPED -- test_get_dict_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.17757415771484375s cumulative, 0.005326986312866211s individual

.
current test PASSED/SKIPPED -- test_float_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.18250370025634766s cumulative, 0.004929542541503906s individual

.
current test PASSED/SKIPPED -- test_list_transformer in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.18701767921447754s cumulative, 0.004513978958129883s individual

.
current test PASSED/SKIPPED -- test_get_date_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.19536232948303223s cumulative, 0.008344650268554688s individual

s
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.20210576057434082s cumulative, 0.006743431091308594s individual

.
current test PASSED/SKIPPED -- test_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.20673632621765137s cumulative, 0.004630565643310547s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.21249175071716309s cumulative, 0.005755424499511719s individual

s
current test PASSED/SKIPPED -- test_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.2184743881225586s cumulative, 0.005982637405395508s individual

s
current test PASSED/SKIPPED -- test_get_date_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.22269654273986816s cumulative, 0.00422215461730957s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.22769880294799805s cumulative, 0.005002260208129883s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.2329730987548828s cumulative, 0.005274295806884766s individual

.
current test PASSED/SKIPPED -- test_bad_percentage in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.237809419631958s cumulative, 0.004836320877075195s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.24329757690429688s cumulative, 0.005488157272338867s individual

s
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.24714326858520508s cumulative, 0.003845691680908203s individual

.
current test PASSED/SKIPPED -- test_get_datetime_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.2543494701385498s cumulative, 0.0072062015533447266s individual

.
current test PASSED/SKIPPED -- test_has_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.26111531257629395s cumulative, 0.006765842437744141s individual

.
current test PASSED/SKIPPED -- test_get_date_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.2676210403442383s cumulative, 0.006505727767944336s individual

s
current test PASSED/SKIPPED -- test_allowed_names in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.2713358402252197s cumulative, 0.0037147998809814453s individual

.
current test PASSED/SKIPPED -- test_get_date_valid_with_format in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.27707862854003906s cumulative, 0.005742788314819336s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.28244590759277344s cumulative, 0.005367279052734375s individual

.
current test PASSED/SKIPPED -- test_multiple_keys_as_int in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.28687167167663574s cumulative, 0.004425764083862305s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.29227542877197266s cumulative, 0.005403757095336914s individual

.
current test PASSED/SKIPPED -- test_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.2967681884765625s cumulative, 0.004492759704589844s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.3024916648864746s cumulative, 0.005723476409912109s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.3079183101654053s cumulative, 0.005426645278930664s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_simple_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.3122994899749756s cumulative, 0.0043811798095703125s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.31700992584228516s cumulative, 0.00471043586730957s individual

.
current test PASSED/SKIPPED -- test_boolean in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.3219761848449707s cumulative, 0.004966259002685547s individual

s
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.3259713649749756s cumulative, 0.003995180130004883s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.3343358039855957s cumulative, 0.008364439010620117s individual

.
current test PASSED/SKIPPED -- test_get_dict_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.33927011489868164s cumulative, 0.0049343109130859375s individual

s
current test PASSED/SKIPPED -- test_get_date_valid_with_format in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.34293556213378906s cumulative, 0.003665447235107422s individual

.
current test PASSED/SKIPPED -- test_get_dict_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.34775567054748535s cumulative, 0.004820108413696289s individual

.
current test PASSED/SKIPPED -- test_get_dict_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.35358357429504395s cumulative, 0.005827903747558594s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_simple_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.3585927486419678s cumulative, 0.005009174346923828s individual

.
current test PASSED/SKIPPED -- test_param_property in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.3636775016784668s cumulative, 0.0050847530364990234s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.3684546947479248s cumulative, 0.004777193069458008s individual

.
current test PASSED/SKIPPED -- test_get_date_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.3734884262084961s cumulative, 0.005033731460571289s individual

s
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.3773064613342285s cumulative, 0.003818035125732422s individual

.
current test PASSED/SKIPPED -- test_default_auto_parse_csv_behaviour in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.3822782039642334s cumulative, 0.004971742630004883s individual

.
current test PASSED/SKIPPED -- test_get_datetime_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.38831663131713867s cumulative, 0.0060384273529052734s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.3930180072784424s cumulative, 0.004701375961303711s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.39838647842407227s cumulative, 0.005368471145629883s individual

s
current test PASSED/SKIPPED -- test_multiple_keys_as_float in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.40207695960998535s cumulative, 0.003690481185913086s individual

.
current test PASSED/SKIPPED -- test_get_date_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.40680885314941406s cumulative, 0.004731893539428711s individual

.
current test PASSED/SKIPPED -- test_multiple_keys_as_bool in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.4110727310180664s cumulative, 0.004263877868652344s individual

s
current test PASSED/SKIPPED -- test_get_dict_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.41478705406188965s cumulative, 0.003714323043823242s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.4211287498474121s cumulative, 0.006341695785522461s individual

s
current test PASSED/SKIPPED -- test_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.42484521865844727s cumulative, 0.0037164688110351562s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.42951107025146484s cumulative, 0.004665851593017578s individual

s
current test PASSED/SKIPPED -- test_get_date_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.43328261375427246s cumulative, 0.003771543502807617s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.4391443729400635s cumulative, 0.005861759185791016s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.4440748691558838s cumulative, 0.0049304962158203125s individual

.
current test PASSED/SKIPPED -- test_boolean in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.4484903812408447s cumulative, 0.0044155120849609375s individual

s
current test PASSED/SKIPPED -- test_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.45222926139831543s cumulative, 0.003738880157470703s individual

.
current test PASSED/SKIPPED -- test_get_date_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.45778965950012207s cumulative, 0.005560398101806641s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.46330714225769043s cumulative, 0.005517482757568359s individual

s
current test PASSED/SKIPPED -- test_int in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.46822476387023926s cumulative, 0.004917621612548828s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.4740424156188965s cumulative, 0.0058176517486572266s individual

s
current test PASSED/SKIPPED -- test_get_dict_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.4782109260559082s cumulative, 0.004168510437011719s individual

s
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.4820699691772461s cumulative, 0.0038590431213378906s individual

s
current test PASSED/SKIPPED -- test_float in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.4856746196746826s cumulative, 0.0036046504974365234s individual

.
current test PASSED/SKIPPED -- test_get_date_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.4915046691894531s cumulative, 0.005830049514770508s individual

.
current test PASSED/SKIPPED -- test_get_datetime_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.49594569206237793s cumulative, 0.004441022872924805s individual

.
current test PASSED/SKIPPED -- test_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.5005829334259033s cumulative, 0.004637241363525391s individual

.
current test PASSED/SKIPPED -- test_get_dict_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.5055484771728516s cumulative, 0.004965543746948242s individual

.
current test PASSED/SKIPPED -- test_float in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.510847806930542s cumulative, 0.00529932975769043s individual

.
current test PASSED/SKIPPED -- test_boolean in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.5158064365386963s cumulative, 0.004958629608154297s individual

.
current test PASSED/SKIPPED -- test_get_datetime_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.5208852291107178s cumulative, 0.005078792572021484s individual

.
current test PASSED/SKIPPED -- test_percent_encoded in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.5254597663879395s cumulative, 0.00457453727722168s individual

.
current test PASSED/SKIPPED -- test_multiple_form_keys_as_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.5303122997283936s cumulative, 0.0048525333404541016s individual

s
current test PASSED/SKIPPED -- test_get_datetime_valid_with_format in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.534168004989624s cumulative, 0.0038557052612304688s individual

.
current test PASSED/SKIPPED -- test_get_datetime_valid_with_format in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.5425856113433838s cumulative, 0.008417606353759766s individual

s
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.547271728515625s cumulative, 0.004686117172241211s individual

s
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.5516500473022461s cumulative, 0.004378318786621094s individual

.
current test PASSED/SKIPPED -- test_has_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.5559647083282471s cumulative, 0.0043146610260009766s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_simple_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.5615289211273193s cumulative, 0.005564212799072266s individual

.
current test PASSED/SKIPPED -- test_get_dict_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.5660359859466553s cumulative, 0.0045070648193359375s individual

s
current test PASSED/SKIPPED -- test_get_datetime_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.5727865695953369s cumulative, 0.006750583648681641s individual

.
current test PASSED/SKIPPED -- test_get_date_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.5818819999694824s cumulative, 0.009095430374145508s individual

.
current test PASSED/SKIPPED -- test_multiple_keys_as_float in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.5937445163726807s cumulative, 0.011862516403198242s individual

.
current test PASSED/SKIPPED -- test_get_datetime_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.6011641025543213s cumulative, 0.007419586181640625s individual

s
current test PASSED/SKIPPED -- test_default_auto_parse_csv_behaviour in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.6074092388153076s cumulative, 0.006245136260986328s individual

.
current test PASSED/SKIPPED -- test_get_datetime_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.6178219318389893s cumulative, 0.01041269302368164s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.6339077949523926s cumulative, 0.01608586311340332s individual

.
current test PASSED/SKIPPED -- test_list_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.6399033069610596s cumulative, 0.005995512008666992s individual

.
current test PASSED/SKIPPED -- test_boolean_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.6459681987762451s cumulative, 0.006064891815185547s individual

.
current test PASSED/SKIPPED -- test_simple in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.6511807441711426s cumulative, 0.005212545394897461s individual

.
current test PASSED/SKIPPED -- test_allowed_names in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.6567893028259277s cumulative, 0.005608558654785156s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.6616439819335938s cumulative, 0.004854679107666016s individual

s
current test PASSED/SKIPPED -- test_float_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.6654555797576904s cumulative, 0.0038115978240966797s individual

.
current test PASSED/SKIPPED -- test_get_datetime_valid_with_format in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.6699345111846924s cumulative, 0.004478931427001953s individual

s
current test PASSED/SKIPPED -- test_uuid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.6740803718566895s cumulative, 0.00414586067199707s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.6793153285980225s cumulative, 0.005234956741333008s individual

.
current test PASSED/SKIPPED -- test_param_property in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.6845188140869141s cumulative, 0.0052034854888916016s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.6905744075775146s cumulative, 0.006055593490600586s individual

.
current test PASSED/SKIPPED -- test_int_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.6951596736907959s cumulative, 0.00458526611328125s individual

.
current test PASSED/SKIPPED -- test_get_date_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.6997256278991699s cumulative, 0.0045659542083740234s individual

.
current test PASSED/SKIPPED -- test_has_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.704613208770752s cumulative, 0.004887580871582031s individual

.
current test PASSED/SKIPPED -- test_param_property in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.7095251083374023s cumulative, 0.004911899566650391s individual

.
current test PASSED/SKIPPED -- test_list_type_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.713895320892334s cumulative, 0.004370212554931641s individual

.
current test PASSED/SKIPPED -- test_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.7192120552062988s cumulative, 0.005316734313964844s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_simple_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.7235307693481445s cumulative, 0.004318714141845703s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.7300481796264648s cumulative, 0.0065174102783203125s individual

.
current test PASSED/SKIPPED -- test_int in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.7347500324249268s cumulative, 0.004701852798461914s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.74062180519104s cumulative, 0.005871772766113281s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.7458856105804443s cumulative, 0.005263805389404297s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_complex_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.7508625984191895s cumulative, 0.004976987838745117s individual

.
current test PASSED/SKIPPED -- test_get_date_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.7596828937530518s cumulative, 0.008820295333862305s individual

.
current test PASSED/SKIPPED -- test_int in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.7652435302734375s cumulative, 0.005560636520385742s individual

.
current test PASSED/SKIPPED -- test_float_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.7707576751708984s cumulative, 0.0055141448974609375s individual

.
current test PASSED/SKIPPED -- test_get_datetime_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.776674747467041s cumulative, 0.005917072296142578s individual

s
current test PASSED/SKIPPED -- test_multiple_keys_as_int in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.780970573425293s cumulative, 0.004295825958251953s individual

.
current test PASSED/SKIPPED -- test_list_type_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.7856829166412354s cumulative, 0.004712343215942383s individual

.
current test PASSED/SKIPPED -- test_multiple_keys_as_int in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.79146409034729s cumulative, 0.0057811737060546875s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.7993531227111816s cumulative, 0.007889032363891602s individual

s
current test PASSED/SKIPPED -- test_get_datetime_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.8032872676849365s cumulative, 0.003934144973754883s individual

.
current test PASSED/SKIPPED -- test_list_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.807685375213623s cumulative, 0.0043981075286865234s individual

.
current test PASSED/SKIPPED -- test_float in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.8141627311706543s cumulative, 0.00647735595703125s individual

.
current test PASSED/SKIPPED -- test_list_transformer in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.8200371265411377s cumulative, 0.0058743953704833984s individual

.
current test PASSED/SKIPPED -- test_multiple_keys_as_bool in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.8252646923065186s cumulative, 0.005227565765380859s individual

s
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.8300905227661133s cumulative, 0.0048258304595947266s individual

s
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.8355295658111572s cumulative, 0.005439043045043945s individual

.
current test PASSED/SKIPPED -- test_int_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.8417985439300537s cumulative, 0.006268978118896484s individual

.
current test PASSED/SKIPPED -- test_list_transformer in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.8481400012969971s cumulative, 0.006341457366943359s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.8552091121673584s cumulative, 0.007069110870361328s individual

.
current test PASSED/SKIPPED -- test_get_date_valid_with_format in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.8600001335144043s cumulative, 0.0047910213470458984s individual

.
current test PASSED/SKIPPED -- test_multiple_keys_as_float in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.8644711971282959s cumulative, 0.0044710636138916016s individual

.
current test PASSED/SKIPPED -- test_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.870403528213501s cumulative, 0.005932331085205078s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.875626802444458s cumulative, 0.005223274230957031s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_simple_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.8818247318267822s cumulative, 0.006197929382324219s individual

.
current test PASSED/SKIPPED -- test_int in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.8894126415252686s cumulative, 0.007587909698486328s individual

.
current test PASSED/SKIPPED -- test_multiple_form_keys in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.8966221809387207s cumulative, 0.0072095394134521484s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.9026284217834473s cumulative, 0.0060062408447265625s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.9086787700653076s cumulative, 0.0060503482818603516s individual

s
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.9128739833831787s cumulative, 0.004195213317871094s individual

.
current test PASSED/SKIPPED -- test_multiple_keys_as_bool in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.9180798530578613s cumulative, 0.005205869674682617s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.9235291481018066s cumulative, 0.0054492950439453125s individual

.
current test PASSED/SKIPPED -- test_get_dict_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.9287495613098145s cumulative, 0.0052204132080078125s individual

.
current test PASSED/SKIPPED -- test_multiple_form_keys in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.9340755939483643s cumulative, 0.005326032638549805s individual

s
current test PASSED/SKIPPED -- test_multiple_form_keys_as_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.9377865791320801s cumulative, 0.0037109851837158203s individual

.
current test PASSED/SKIPPED -- test_multiple_form_keys_as_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.9443202018737793s cumulative, 0.006533622741699219s individual

s
current test PASSED/SKIPPED -- test_percent_encoded in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.9479398727416992s cumulative, 0.003619670867919922s individual

.
current test PASSED/SKIPPED -- test_get_datetime_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.9536869525909424s cumulative, 0.005747079849243164s individual

.
current test PASSED/SKIPPED -- test_percent_encoded in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.95928955078125s cumulative, 0.005602598190307617s individual

.
current test PASSED/SKIPPED -- test_multiple_form_keys in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.9640505313873291s cumulative, 0.0047609806060791016s individual

s
current test PASSED/SKIPPED -- test_bad_percentage in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.9677636623382568s cumulative, 0.0037131309509277344s individual

s
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.9718477725982666s cumulative, 0.004084110260009766s individual

.
current test PASSED/SKIPPED -- test_bad_percentage in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.9760794639587402s cumulative, 0.004231691360473633s individual

.
current test PASSED/SKIPPED -- test_get_dict_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.9803931713104248s cumulative, 0.00431370735168457s individual

.
current test PASSED/SKIPPED -- test_float in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.9847190380096436s cumulative, 0.00432586669921875s individual

.
current test PASSED/SKIPPED -- test_boolean_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.9889345169067383s cumulative, 0.0042154788970947266s individual

.
current test PASSED/SKIPPED -- test_get_datetime_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.9936635494232178s cumulative, 0.004729032516479492s individual

s
current test PASSED/SKIPPED -- test_get_dict_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 0.9972915649414062s cumulative, 0.0036280155181884766s individual

.
current test PASSED/SKIPPED -- test_allowed_names in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.0016059875488281s cumulative, 0.004314422607421875s individual

.
current test PASSED/SKIPPED -- test_uuid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.0059571266174316s cumulative, 0.004351139068603516s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.0107135772705078s cumulative, 0.004756450653076172s individual

.
current test PASSED/SKIPPED -- test_simple in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.0149126052856445s cumulative, 0.004199028015136719s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_simple_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.0190870761871338s cumulative, 0.004174470901489258s individual

s
current test PASSED/SKIPPED -- test_get_datetime_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.022740125656128s cumulative, 0.0036530494689941406s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_complex_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.0280780792236328s cumulative, 0.005337953567504883s individual

s
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.0324430465698242s cumulative, 0.004364967346191406s individual

.
current test PASSED/SKIPPED -- test_get_date_valid_with_format in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.039097547531128s cumulative, 0.006654500961303711s individual

.
current test PASSED/SKIPPED -- test_get_date_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.0452079772949219s cumulative, 0.006110429763793945s individual

.
current test PASSED/SKIPPED -- test_get_datetime_valid_with_format in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.0509922504425049s cumulative, 0.005784273147583008s individual

s
current test PASSED/SKIPPED -- test_get_datetime_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.0556015968322754s cumulative, 0.004609346389770508s individual

.
current test PASSED/SKIPPED -- test_multiple_form_keys_as_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.0606083869934082s cumulative, 0.0050067901611328125s individual

.
current test PASSED/SKIPPED -- test_uuid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.0663173198699951s cumulative, 0.005708932876586914s individual

.
current test PASSED/SKIPPED -- test_boolean_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.0707917213439941s cumulative, 0.0044744014739990234s individual

s
current test PASSED/SKIPPED -- test_multiple_keys_as_bool in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.0743732452392578s cumulative, 0.003581523895263672s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_complex_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.078916072845459s cumulative, 0.004542827606201172s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.0846307277679443s cumulative, 0.0057146549224853516s individual

s
current test PASSED/SKIPPED -- test_boolean in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.0882213115692139s cumulative, 0.0035905838012695312s individual

.
current test PASSED/SKIPPED -- test_get_date_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.0925469398498535s cumulative, 0.0043256282806396484s individual

.
current test PASSED/SKIPPED -- test_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.1005723476409912s cumulative, 0.008025407791137695s individual

s
current test PASSED/SKIPPED -- test_param_property in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.1042544841766357s cumulative, 0.0036821365356445312s individual

s
current test PASSED/SKIPPED -- test_simple in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.107809066772461s cumulative, 0.0035545825958251953s individual

s
current test PASSED/SKIPPED -- test_get_dict_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.1116838455200195s cumulative, 0.0038747787475585938s individual

s
current test PASSED/SKIPPED -- test_list_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.115241289138794s cumulative, 0.003557443618774414s individual

s
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_complex_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.1188030242919922s cumulative, 0.003561735153198242s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.1246767044067383s cumulative, 0.005873680114746094s individual

s
current test PASSED/SKIPPED -- test_get_date_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.128283977508545s cumulative, 0.0036072731018066406s individual

.
current test PASSED/SKIPPED -- test_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.1325104236602783s cumulative, 0.0042264461517333984s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.1367120742797852s cumulative, 0.004201650619506836s individual

s
current test PASSED/SKIPPED -- test_int_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.1408977508544922s cumulative, 0.004185676574707031s individual

.
current test PASSED/SKIPPED -- test_get_dict_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.145115613937378s cumulative, 0.004217863082885742s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.1494605541229248s cumulative, 0.004344940185546875s individual

.
current test PASSED/SKIPPED -- test_default_auto_parse_csv_behaviour in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.153616189956665s cumulative, 0.004155635833740234s individual

.
current test PASSED/SKIPPED -- test_float_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.1584548950195312s cumulative, 0.004838705062866211s individual

s
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_simple_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.162055492401123s cumulative, 0.003600597381591797s individual

.
current test PASSED/SKIPPED -- test_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.1668782234191895s cumulative, 0.004822731018066406s individual

.
current test PASSED/SKIPPED -- test_get_dict_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.17274808883667s cumulative, 0.005869865417480469s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.1779944896697998s cumulative, 0.005246400833129883s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.1822333335876465s cumulative, 0.00423884391784668s individual

.
current test PASSED/SKIPPED -- test_get_datetime_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.1865382194519043s cumulative, 0.0043048858642578125s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.1917428970336914s cumulative, 0.005204677581787109s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.196962833404541s cumulative, 0.005219936370849609s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.2020618915557861s cumulative, 0.005099058151245117s individual

.
current test PASSED/SKIPPED -- test_multiple_keys_as_int in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.2062852382659912s cumulative, 0.004223346710205078s individual

.
current test PASSED/SKIPPED -- test_get_datetime_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.210514783859253s cumulative, 0.004229545593261719s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.2152674198150635s cumulative, 0.004752635955810547s individual

.
current test PASSED/SKIPPED -- test_get_datetime_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.219529390335083s cumulative, 0.004261970520019531s individual

s
current test PASSED/SKIPPED -- test_boolean_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.2231240272521973s cumulative, 0.003594636917114258s individual

.
current test PASSED/SKIPPED -- test_uuid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.2286267280578613s cumulative, 0.0055027008056640625s individual

s
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.2326347827911377s cumulative, 0.004008054733276367s individual

s
current test PASSED/SKIPPED -- test_list_transformer in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.2361717224121094s cumulative, 0.0035369396209716797s individual

.
current test PASSED/SKIPPED -- test_get_dict_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.240797758102417s cumulative, 0.004626035690307617s individual

.
current test PASSED/SKIPPED -- test_get_date_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.2450191974639893s cumulative, 0.004221439361572266s individual

s
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.2489893436431885s cumulative, 0.003970146179199219s individual

.
current test PASSED/SKIPPED -- test_default_auto_parse_csv_behaviour in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.253401756286621s cumulative, 0.004412412643432617s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.2585399150848389s cumulative, 0.0051381587982177734s individual

.
current test PASSED/SKIPPED -- test_int_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.2629005908966064s cumulative, 0.004360675811767578s individual

s
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.267073154449463s cumulative, 0.004172563552856445s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.2716736793518066s cumulative, 0.00460052490234375s individual

s
current test PASSED/SKIPPED -- test_list_type_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.2756373882293701s cumulative, 0.0039637088775634766s individual

.
current test PASSED/SKIPPED -- test_percent_encoded in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.2798969745635986s cumulative, 0.004259586334228516s individual

.
current test PASSED/SKIPPED -- test_bad_percentage in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.2850301265716553s cumulative, 0.005133152008056641s individual

s
current test PASSED/SKIPPED -- test_multiple_form_keys in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.2886385917663574s cumulative, 0.0036084651947021484s individual

.
current test PASSED/SKIPPED -- test_get_dict_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.2952873706817627s cumulative, 0.0066487789154052734s individual

s
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.300595760345459s cumulative, 0.005308389663696289s individual

.
current test PASSED/SKIPPED -- test_get_param_as_json_no_handler_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.3084404468536377s cumulative, 0.007844686508178711s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.3132474422454834s cumulative, 0.004806995391845703s individual

s
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_simple_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.3169429302215576s cumulative, 0.0036954879760742188s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.3215370178222656s cumulative, 0.004594087600708008s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.327848196029663s cumulative, 0.006311178207397461s individual

.
current test PASSED/SKIPPED -- test_get_param_as_json_handler_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.3355963230133057s cumulative, 0.007748126983642578s individual

.
current test PASSED/SKIPPED -- test_allowed_names in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.339881420135498s cumulative, 0.004285097122192383s individual

.
current test PASSED/SKIPPED -- test_list_type_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.344740390777588s cumulative, 0.004858970642089844s individual

.
current test PASSED/SKIPPED -- test_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.3500196933746338s cumulative, 0.0052793025970458984s individual

s
current test PASSED/SKIPPED -- test_has_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.353644847869873s cumulative, 0.003625154495239258s individual

.
current test PASSED/SKIPPED -- test_list_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.3585700988769531s cumulative, 0.004925251007080078s individual

.
current test PASSED/SKIPPED -- test_multiple_keys_as_float in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.3628206253051758s cumulative, 0.004250526428222656s individual

s
current test PASSED/SKIPPED -- test_explicitly_disable_auto_parse in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.3668134212493896s cumulative, 0.003992795944213867s individual

s
current test PASSED/SKIPPED -- test_non_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.3703765869140625s cumulative, 0.0035631656646728516s individual

s
current test PASSED/SKIPPED -- test_http_methods_body_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.3740620613098145s cumulative, 0.003685474395751953s individual

s
current test PASSED/SKIPPED -- test_http_methods_body_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.3781085014343262s cumulative, 0.004046440124511719s individual

s
current test PASSED/SKIPPED -- test_http_methods_body_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.3817861080169678s cumulative, 0.0036776065826416016s individual

.
current test PASSED/SKIPPED -- test_asgi_raises_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.3853542804718018s cumulative, 0.0035681724548339844s individual

s
current test PASSED/SKIPPED -- test_http_methods_body_not_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.3895056247711182s cumulative, 0.004151344299316406s individual

s
current test PASSED/SKIPPED -- test_http_methods_body_not_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.3931846618652344s cumulative, 0.003679037094116211s individual

s
current test PASSED/SKIPPED -- test_http_methods_body_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.3971102237701416s cumulative, 0.0039255619049072266s individual

s
current test PASSED/SKIPPED -- test_empty_body_no_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.401069164276123s cumulative, 0.003958940505981445s individual

s
current test PASSED/SKIPPED -- test_http_methods_body_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.4052293300628662s cumulative, 0.004160165786743164s individual

s
current test PASSED/SKIPPED -- test_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.4090893268585205s cumulative, 0.003859996795654297s individual

.
current test PASSED/SKIPPED -- test_dont_auto_parse_by_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1.414487600326538s cumulative, 0.005398273468017578s individual


tests/test_request_context.py .
current test PASSED/SKIPPED -- test_custom_request_context_request_access in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_context.py: 1.4171898365020752s cumulative, 0.0027022361755371094s individual

.
current test PASSED/SKIPPED -- test_custom_request_context in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_context.py: 1.4197874069213867s cumulative, 0.0025975704193115234s individual

.
current test PASSED/SKIPPED -- test_default_request_context in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_context.py: 1.4226067066192627s cumulative, 0.0028192996978759766s individual

.
current test PASSED/SKIPPED -- test_custom_request_context_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_context.py: 1.4255552291870117s cumulative, 0.0029485225677490234s individual


tests/test_cookies.py .
current test PASSED/SKIPPED -- test_response_unset_cookie in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1.435969352722168s cumulative, 0.01041412353515625s individual

.
current test PASSED/SKIPPED -- test_cookie_expires_aware in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1.4416613578796387s cumulative, 0.005692005157470703s individual

.
current test PASSED/SKIPPED -- test_cookie_max_age_float_and_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1.4476747512817383s cumulative, 0.006013393402099609s individual

.
current test PASSED/SKIPPED -- test_cookie_expires_naive in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1.4530351161956787s cumulative, 0.00536036491394043s individual

.
current test PASSED/SKIPPED -- test_non_ascii_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1.4559202194213867s cumulative, 0.002885103225708008s individual

.
current test PASSED/SKIPPED -- test_unset_cookies_samesite in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1.465754508972168s cumulative, 0.00983428955078125s individual

.
current test PASSED/SKIPPED -- test_lax_same_site_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1.4723083972930908s cumulative, 0.0065538883209228516s individual

.
current test PASSED/SKIPPED -- test_cookie_expires_aware in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1.478715181350708s cumulative, 0.0064067840576171875s individual

.
current test PASSED/SKIPPED -- test_response_complex_case in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1.4860432147979736s cumulative, 0.007328033447265625s individual

.
current test PASSED/SKIPPED -- test_same_site_value_case_insensitive in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1.4891741275787354s cumulative, 0.0031309127807617188s individual

.
current test PASSED/SKIPPED -- test_cookie_header_is_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1.4917759895324707s cumulative, 0.0026018619537353516s individual

.
current test PASSED/SKIPPED -- test_same_site_value_case_insensitive in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1.4945549964904785s cumulative, 0.0027790069580078125s individual

.
current test PASSED/SKIPPED -- test_cookie_timezone in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1.5000474452972412s cumulative, 0.005492448806762695s individual

.
current test PASSED/SKIPPED -- test_unset_cookies in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1.5066120624542236s cumulative, 0.006564617156982422s individual

.
current test PASSED/SKIPPED -- test_cookies_setable in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1.5108189582824707s cumulative, 0.00420689582824707s individual

.
current test PASSED/SKIPPED -- test_same_site_value_case_insensitive in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1.5136187076568604s cumulative, 0.0027997493743896484s individual

.
current test PASSED/SKIPPED -- test_same_site_value_case_insensitive in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1.5164096355438232s cumulative, 0.0027909278869628906s individual

.
current test PASSED/SKIPPED -- test_response_base_case in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1.5225427150726318s cumulative, 0.006133079528808594s individual

.
current test PASSED/SKIPPED -- test_non_ascii_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1.5253477096557617s cumulative, 0.002804994583129883s individual

.
current test PASSED/SKIPPED -- test_strict_same_site_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1.5309405326843262s cumulative, 0.005592823028564453s individual

.
current test PASSED/SKIPPED -- test_invalid_cookies_are_ignored in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1.547260046005249s cumulative, 0.01631951332092285s individual

.
current test PASSED/SKIPPED -- test_response_disable_secure_globally in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1.5529255867004395s cumulative, 0.00566554069519043s individual

.
current test PASSED/SKIPPED -- test_cookie_timezone in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1.5572962760925293s cumulative, 0.004370689392089844s individual

.
current test PASSED/SKIPPED -- test_unset_cookies in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1.5632920265197754s cumulative, 0.005995750427246094s individual

.
current test PASSED/SKIPPED -- test_non_ascii_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1.5661005973815918s cumulative, 0.0028085708618164062s individual

.
current test PASSED/SKIPPED -- test_response_base_case in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1.5726954936981201s cumulative, 0.00659489631652832s individual

.
current test PASSED/SKIPPED -- test_unicode_inside_ascii_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1.5760231018066406s cumulative, 0.003327608108520508s individual

.
current test PASSED/SKIPPED -- test_response_complex_case in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1.5815837383270264s cumulative, 0.005560636520385742s individual

.
current test PASSED/SKIPPED -- test_invalid_same_site_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1.5845797061920166s cumulative, 0.0029959678649902344s individual

.
current test PASSED/SKIPPED -- test_none_same_site_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1.5906000137329102s cumulative, 0.006020307540893555s individual

.
current test PASSED/SKIPPED -- test_none_same_site_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1.595935583114624s cumulative, 0.005335569381713867s individual

.
current test PASSED/SKIPPED -- test_duplicate_cookie in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1.5985510349273682s cumulative, 0.0026154518127441406s individual

.
current test PASSED/SKIPPED -- test_request_cookie_parsing in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1.6012825965881348s cumulative, 0.0027315616607666016s individual

.
current test PASSED/SKIPPED -- test_cookie_max_age_float_and_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1.606693983078003s cumulative, 0.005411386489868164s individual

.
current test PASSED/SKIPPED -- test_non_ascii_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1.609560251235962s cumulative, 0.0028662681579589844s individual

.
current test PASSED/SKIPPED -- test_same_site_empty_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1.6157455444335938s cumulative, 0.006185293197631836s individual

.
current test PASSED/SKIPPED -- test_same_site_value_case_insensitive in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1.6186301708221436s cumulative, 0.0028846263885498047s individual

.
current test PASSED/SKIPPED -- test_cookie_max_age_float_and_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1.624671220779419s cumulative, 0.006041049957275391s individual

.
current test PASSED/SKIPPED -- test_response_disable_secure_globally in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1.6338565349578857s cumulative, 0.009185314178466797s individual

.
current test PASSED/SKIPPED -- test_non_ascii_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1.6367754936218262s cumulative, 0.0029189586639404297s individual

.
current test PASSED/SKIPPED -- test_strict_same_site_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1.6434624195098877s cumulative, 0.0066869258880615234s individual

.
current test PASSED/SKIPPED -- test_lax_same_site_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1.6508660316467285s cumulative, 0.00740361213684082s individual

.
current test PASSED/SKIPPED -- test_unset_cookies_samesite in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1.6585867404937744s cumulative, 0.0077207088470458984s individual

.
current test PASSED/SKIPPED -- test_response_unset_cookie in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1.6631040573120117s cumulative, 0.004517316818237305s individual

.
current test PASSED/SKIPPED -- test_non_ascii_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1.6659626960754395s cumulative, 0.0028586387634277344s individual

.
current test PASSED/SKIPPED -- test_invalid_same_site_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1.6688125133514404s cumulative, 0.0028498172760009766s individual

.
current test PASSED/SKIPPED -- test_cookie_expires_naive in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1.6758277416229248s cumulative, 0.007015228271484375s individual

.
current test PASSED/SKIPPED -- test_cookie_max_age_float_and_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1.681166410446167s cumulative, 0.0053386688232421875s individual

.
current test PASSED/SKIPPED -- test_same_site_value_case_insensitive in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1.6840178966522217s cumulative, 0.0028514862060546875s individual

.
current test PASSED/SKIPPED -- test_cookies_setable in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1.6885294914245605s cumulative, 0.004511594772338867s individual

.
current test PASSED/SKIPPED -- test_same_site_empty_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1.693671464920044s cumulative, 0.0051419734954833984s individual

.
current test PASSED/SKIPPED -- test_invalid_same_site_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1.6965651512145996s cumulative, 0.002893686294555664s individual


tests/asgi/test_asgi_servers.py INFO:     127.0.0.1:39992 - "GET / HTTP/1.1" 200 OK
INFO:     127.0.0.1:40008 - "PUT /bucket/drops HTTP/1.1" 200 OK

[Starting server process...]
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_post_read_bounded_stream_large in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 2.6282296180725098s cumulative, 0.9316644668579102s individual


tests/test_error_handlers.py .
current test PASSED/SKIPPED -- test_media_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 2.6375951766967773s cumulative, 0.009365558624267578s individual

.
current test PASSED/SKIPPED -- test_data_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 2.643763303756714s cumulative, 0.0061681270599365234s individual

.
current test PASSED/SKIPPED -- test_body_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 2.6483662128448486s cumulative, 0.004602909088134766s individual

.
current test PASSED/SKIPPED -- test_data_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 2.6537601947784424s cumulative, 0.00539398193359375s individual

.
current test PASSED/SKIPPED -- test_body_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 2.6582562923431396s cumulative, 0.004496097564697266s individual

.
current test PASSED/SKIPPED -- test_media_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 2.662459373474121s cumulative, 0.004203081130981445s individual

.
current test PASSED/SKIPPED -- test_body_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 2.667198657989502s cumulative, 0.004739284515380859s individual

.
current test PASSED/SKIPPED -- test_media_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 2.672149896621704s cumulative, 0.0049512386322021484s individual

.
current test PASSED/SKIPPED -- test_data_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 2.676637887954712s cumulative, 0.0044879913330078125s individual

.
current test PASSED/SKIPPED -- test_data_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 2.6809420585632324s cumulative, 0.004304170608520508s individual

.
current test PASSED/SKIPPED -- test_media_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 2.6850619316101074s cumulative, 0.004119873046875s individual

.
current test PASSED/SKIPPED -- test_body_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 2.689481019973755s cumulative, 0.004419088363647461s individual

.
current test PASSED/SKIPPED -- test_error_precedence_subclass_order_indifference in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 2.697584629058838s cumulative, 0.008103609085083008s individual

.
current test PASSED/SKIPPED -- test_invalid_add_exception_handler_input in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 2.7011091709136963s cumulative, 0.0035245418548583984s individual

.
current test PASSED/SKIPPED -- test_error_precedence_subclass in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 2.7063958644866943s cumulative, 0.005286693572998047s individual

.
current test PASSED/SKIPPED -- test_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 2.7108261585235596s cumulative, 0.004430294036865234s individual

.
current test PASSED/SKIPPED -- test_uncaught_error_else in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 2.7161405086517334s cumulative, 0.005314350128173828s individual

.
current test PASSED/SKIPPED -- test_invalid_add_exception_handler_input in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 2.7197606563568115s cumulative, 0.003620147705078125s individual

.
current test PASSED/SKIPPED -- test_uncaught_python_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 2.7264771461486816s cumulative, 0.006716489791870117s individual

.
current test PASSED/SKIPPED -- test_invalid_add_exception_handler_input in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 2.7302589416503906s cumulative, 0.0037817955017089844s individual

.
current test PASSED/SKIPPED -- test_converted_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 2.7385306358337402s cumulative, 0.00827169418334961s individual

.
current test PASSED/SKIPPED -- test_handle_not_defined in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 2.7419979572296143s cumulative, 0.0034673213958740234s individual

.
current test PASSED/SKIPPED -- test_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 2.7459568977355957s cumulative, 0.003958940505981445s individual

.
current test PASSED/SKIPPED -- test_uncaught_python_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 2.751519203186035s cumulative, 0.005562305450439453s individual

.
current test PASSED/SKIPPED -- test_invalid_add_exception_handler_input in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 2.755053997039795s cumulative, 0.0035347938537597656s individual

.
current test PASSED/SKIPPED -- test_caught_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 2.7634475231170654s cumulative, 0.008393526077270508s individual

.
current test PASSED/SKIPPED -- test_error_precedence_subclass in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 2.7690837383270264s cumulative, 0.0056362152099609375s individual

.
current test PASSED/SKIPPED -- test_handler_multiple_exception_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 2.773820638656616s cumulative, 0.004736900329589844s individual

.
current test PASSED/SKIPPED -- test_uncaught_python_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 2.781000852584839s cumulative, 0.007180213928222656s individual

.
current test PASSED/SKIPPED -- test_error_precedence_subclass_order_indifference in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 2.7854185104370117s cumulative, 0.0044176578521728516s individual

.
current test PASSED/SKIPPED -- test_invalid_add_exception_handler_input in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 2.790043592453003s cumulative, 0.004625082015991211s individual

.
current test PASSED/SKIPPED -- test_handler_multiple_exception_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 2.7946014404296875s cumulative, 0.00455784797668457s individual

.
current test PASSED/SKIPPED -- test_handler_multiple_exception_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 2.8000612258911133s cumulative, 0.005459785461425781s individual

.
current test PASSED/SKIPPED -- test_subclass_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 2.8045732975006104s cumulative, 0.00451207160949707s individual

.
current test PASSED/SKIPPED -- test_subclass_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 2.8087916374206543s cumulative, 0.004218339920043945s individual

.
current test PASSED/SKIPPED -- test_handler_must_be_coroutine_for_asgi in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 2.812023878097534s cumulative, 0.003232240676879883s individual

.
current test PASSED/SKIPPED -- test_uncaught_error_else in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 2.8159618377685547s cumulative, 0.003937959671020508s individual

.
current test PASSED/SKIPPED -- test_uncaught_python_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 2.8214991092681885s cumulative, 0.005537271499633789s individual

.
current test PASSED/SKIPPED -- test_caught_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 2.826699733734131s cumulative, 0.005200624465942383s individual

.
current test PASSED/SKIPPED -- test_invalid_add_exception_handler_input in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 2.8312129974365234s cumulative, 0.004513263702392578s individual

.
current test PASSED/SKIPPED -- test_uncaught_python_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 2.8382139205932617s cumulative, 0.007000923156738281s individual

.
current test PASSED/SKIPPED -- test_catch_http_no_route_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 2.8429126739501953s cumulative, 0.004698753356933594s individual

.
current test PASSED/SKIPPED -- test_handler_multiple_exception_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 2.848351001739502s cumulative, 0.005438327789306641s individual

.
current test PASSED/SKIPPED -- test_converted_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 2.8531336784362793s cumulative, 0.004782676696777344s individual

.
current test PASSED/SKIPPED -- test_handler_signature_shim in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 2.8612313270568848s cumulative, 0.008097648620605469s individual

.
current test PASSED/SKIPPED -- test_error_precedence_duplicate in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 2.8701789379119873s cumulative, 0.008947610855102539s individual

.
current test PASSED/SKIPPED -- test_uncaught_python_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 2.880295991897583s cumulative, 0.010117053985595703s individual

.
current test PASSED/SKIPPED -- test_error_precedence_duplicate in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 2.887148141860962s cumulative, 0.006852149963378906s individual

.
current test PASSED/SKIPPED -- test_handler_single_exception_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 2.89338755607605s cumulative, 0.006239414215087891s individual

.
current test PASSED/SKIPPED -- test_invalid_add_exception_handler_input in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 2.900697946548462s cumulative, 0.007310390472412109s individual

.
current test PASSED/SKIPPED -- test_handle_not_defined in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 2.9049906730651855s cumulative, 0.004292726516723633s individual

.
current test PASSED/SKIPPED -- test_invalid_add_exception_handler_input in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 2.9093332290649414s cumulative, 0.004342555999755859s individual

.
current test PASSED/SKIPPED -- test_handler_single_exception_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 2.917037010192871s cumulative, 0.0077037811279296875s individual


tests/asgi/test_asgi_servers.py INFO:     127.0.0.1:44792 - "GET / HTTP/1.1" 200 OK

[Starting server process...]
.on_websocket:send_text

[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_close_code_on_unhandled_http_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 4.327175855636597s cumulative, 1.4101388454437256s individual

INFO:     127.0.0.1:48686 - "GET / HTTP/1.1" 200 OK

[Starting server process...]
.on_websocket:send_text

[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_close_code_on_unhandled_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 5.550121068954468s cumulative, 1.222945213317871s individual

INFO:     127.0.0.1:38562 - "GET / HTTP/1.1" 200 OK
INFO:     127.0.0.1:38576 - "PUT /bucket/drops HTTP/1.1" 200 OK

[Starting server process...]
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_stream_chunked_request in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 6.744627475738525s cumulative, 1.1945064067840576s individual


tests/asgi/test_buffered_reader.py .
current test PASSED/SKIPPED -- test_small_reads_with_delimiter in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 7.331351041793823s cumulative, 0.5867235660552979s individual


tests/asgi/test_boundedstream_asgi.py .
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 19.76053237915039s cumulative, 12.429181337356567s individual


tests/test_things_example.py .
current test PASSED/SKIPPED -- test_things_resource_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_things_example.py: 19.765923023223877s cumulative, 0.005390644073486328s individual


tests/asgi/test_testing_asgi.py .
current test PASSED/SKIPPED -- test_asgi_request_event_emitter_hang in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_testing_asgi.py: 20.77221155166626s cumulative, 1.0062885284423828s individual


tests/test_wsgi_servers.py s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 20.7776620388031s cumulative, 0.00545048713684082s individual

s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 20.781458616256714s cumulative, 0.0037965774536132812s individual

s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 20.785206079483032s cumulative, 0.0037474632263183594s individual

s
current test PASSED/SKIPPED -- test_post_multipart_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 20.78861403465271s cumulative, 0.0034079551696777344s individual

s
current test PASSED/SKIPPED -- test_static_file in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 20.79240131378174s cumulative, 0.0037872791290283203s individual

Starting uWSGI...
uwsgi --http 127.0.0.1:33067 --wsgi-file _wsgi_test_app.py
s
current test PASSED/SKIPPED -- test_get_deprecated in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 20.799004077911377s cumulative, 0.006602764129638672s individual

s
current test PASSED/SKIPPED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 20.80247712135315s cumulative, 0.003473043441772461s individual

s
current test PASSED/SKIPPED -- test_get_deprecated in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 20.805908679962158s cumulative, 0.003431558609008789s individual

s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 20.80959916114807s cumulative, 0.003690481185913086s individual

s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 20.813254356384277s cumulative, 0.0036551952362060547s individual

Starting uWSGI...
uwsgi --http 127.0.0.1:39667 --wsgi-file _wsgi_test_app.py
s
current test PASSED/SKIPPED -- test_static_file in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 20.817052841186523s cumulative, 0.0037984848022460938s individual

Starting uWSGI...
uwsgi --http 127.0.0.1:59877 --wsgi-file _wsgi_test_app.py
s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 20.82047724723816s cumulative, 0.003424406051635742s individual

Starting uWSGI...
uwsgi --http 127.0.0.1:38597 --wsgi-file _wsgi_test_app.py
s
current test PASSED/SKIPPED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 20.8237886428833s cumulative, 0.0033113956451416016s individual

s
current test PASSED/SKIPPED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 20.827203035354614s cumulative, 0.0034143924713134766s individual

s
current test PASSED/SKIPPED -- test_static_file in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 20.830634593963623s cumulative, 0.003431558609008789s individual

Starting uWSGI...
uwsgi --http 127.0.0.1:39311 --wsgi-file _wsgi_test_app.py
s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 20.83530306816101s cumulative, 0.004668474197387695s individual

s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 20.839438676834106s cumulative, 0.004135608673095703s individual

Starting uWSGI...
uwsgi --http 127.0.0.1:58265 --wsgi-file _wsgi_test_app.py
s
current test PASSED/SKIPPED -- test_post_multipart_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 20.842549562454224s cumulative, 0.0031108856201171875s individual

Starting uWSGI...
uwsgi --http 127.0.0.1:53221 --wsgi-file _wsgi_test_app.py
s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 20.846237659454346s cumulative, 0.0036880970001220703s individual

s
current test PASSED/SKIPPED -- test_post_multipart_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 20.8496572971344s cumulative, 0.003419637680053711s individual

s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 20.85333800315857s cumulative, 0.003680706024169922s individual

s
current test PASSED/SKIPPED -- test_get_deprecated in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 20.856751918792725s cumulative, 0.0034139156341552734s individual

s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 20.861334562301636s cumulative, 0.004582643508911133s individual

Starting uWSGI...
uwsgi --http 127.0.0.1:51769 --wsgi-file _wsgi_test_app.py
s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 20.86482524871826s cumulative, 0.0034906864166259766s individual


tests/test_cmd_inspect_app.py .
current test PASSED/SKIPPED -- test_make_parser in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 20.872896909713745s cumulative, 0.008071660995483398s individual

.
current test PASSED/SKIPPED -- test_make_parser in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 20.87667417526245s cumulative, 0.0037772655487060547s individual

.
current test PASSED/SKIPPED -- test_make_parser in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 20.880927324295044s cumulative, 0.0042531490325927734s individual

.
current test PASSED/SKIPPED -- test_make_parser in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 20.88466191291809s cumulative, 0.003734588623046875s individual

.
current test PASSED/SKIPPED -- test_make_parser in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 20.88843083381653s cumulative, 0.0037689208984375s individual

.
current test PASSED/SKIPPED -- test_make_parser_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 20.892699480056763s cumulative, 0.004268646240234375s individual

.
current test PASSED/SKIPPED -- test_route_main in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 20.895318746566772s cumulative, 0.0026192665100097656s individual

.
current test PASSED/SKIPPED -- test_make_parser in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 20.89902424812317s cumulative, 0.0037055015563964844s individual

.
current test PASSED/SKIPPED -- test_make_parser in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 20.902708053588867s cumulative, 0.003683805465698242s individual

.
current test PASSED/SKIPPED -- test_make_parser in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 22.263237953186035s cumulative, 1.360529899597168s individual

.
current test PASSED/SKIPPED -- test_load_app_module_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 22.268265962600708s cumulative, 0.0050280094146728516s individual


tests/asgi/test_asgi_servers.py INFO:     127.0.0.1:32988 - "GET / HTTP/1.1" 200 OK
INFO:     127.0.0.1:32994 - "PUT / HTTP/1.1" 200 OK

[Starting server process...]
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_put in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 24.793030977249146s cumulative, 2.5247650146484375s individual

INFO:     127.0.0.1:44820 - "GET / HTTP/1.1" 200 OK
INFO:     127.0.0.1:44824 - "GET /events HTTP/1.1" 200 OK

[Starting server process...]
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_sse_client_disconnects_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 27.211498260498047s cumulative, 2.4184672832489014s individual


tests/test_wsgi_errors.py .
current test PASSED/SKIPPED -- test_responder_logged_bytestring in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_errors.py: 27.22061014175415s cumulative, 0.009111881256103516s individual


tests/asgi/test_sse.py .
current test PASSED/SKIPPED -- test_multiple_events in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_sse.py: 27.2397038936615s cumulative, 0.019093751907348633s individual

.
current test PASSED/SKIPPED -- test_non_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_sse.py: 27.246049165725708s cumulative, 0.006345272064208984s individual

.
current test PASSED/SKIPPED -- test_single_event in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_sse.py: 27.250834465026855s cumulative, 0.004785299301147461s individual

.
current test PASSED/SKIPPED -- test_no_events in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_sse.py: 27.256925582885742s cumulative, 0.006091117858886719s individual

.
current test PASSED/SKIPPED -- test_invalid_event_values in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_sse.py: 27.259799242019653s cumulative, 0.002873659133911133s individual

.
current test PASSED/SKIPPED -- test_use_media_handler_dumps in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_sse.py: 27.26452946662903s cumulative, 0.004730224609375s individual

.
current test PASSED/SKIPPED -- test_no_json_media_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_sse.py: 27.26888346672058s cumulative, 0.004354000091552734s individual


tests/test_wsgi_interface.py .
current test PASSED/SKIPPED -- test_srmock in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_interface.py: 27.271451711654663s cumulative, 0.0025682449340820312s individual

.
current test PASSED/SKIPPED -- test_pep3333 in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_interface.py: 27.27554750442505s cumulative, 0.004095792770385742s individual


tests/test_media_urlencoded.py .
current test PASSED/SKIPPED -- test_deserialize_empty_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 27.278441190719604s cumulative, 0.002893686294555664s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 27.28394651412964s cumulative, 0.00550532341003418s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 27.28923010826111s cumulative, 0.0052835941314697266s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form_handler_serialize in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 27.292345762252808s cumulative, 0.0031156539916992188s individual

.
current test PASSED/SKIPPED -- test_deserialize_invalid_unicode in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 27.294905424118042s cumulative, 0.002559661865234375s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 27.29951024055481s cumulative, 0.004604816436767578s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 27.304235458374023s cumulative, 0.004725217819213867s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 27.30882477760315s cumulative, 0.0045893192291259766s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 27.31379985809326s cumulative, 0.004975080490112305s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 27.31842279434204s cumulative, 0.004622936248779297s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 27.322937488555908s cumulative, 0.0045146942138671875s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 27.327462196350098s cumulative, 0.004524707794189453s individual

.
current test PASSED/SKIPPED -- test_empty_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 27.331793546676636s cumulative, 0.004331350326538086s individual

.
current test PASSED/SKIPPED -- test_empty_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 27.33659029006958s cumulative, 0.004796743392944336s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form_handler_serialize in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 27.339545965194702s cumulative, 0.0029556751251220703s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 27.343996047973633s cumulative, 0.004450082778930664s individual


tests/asgi/test_misc.py .
current test PASSED/SKIPPED -- test_http_status_not_impl in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_misc.py: 27.348158836364746s cumulative, 0.004162788391113281s individual

.
current test PASSED/SKIPPED -- test_python_error_not_impl in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_misc.py: 27.35222578048706s cumulative, 0.004066944122314453s individual

.
current test PASSED/SKIPPED -- test_http_error_not_impl in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_misc.py: 27.356168270111084s cumulative, 0.0039424896240234375s individual


tests/test_request_forwarded.py .
current test PASSED/SKIPPED -- test_forwarded_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 27.359447956085205s cumulative, 0.0032796859741210938s individual

.
current test PASSED/SKIPPED -- test_forwarded_missing_first_hop_host in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 27.36256194114685s cumulative, 0.003113985061645508s individual

.
current test PASSED/SKIPPED -- test_x_forwarded_host_with_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 27.365912914276123s cumulative, 0.003350973129272461s individual

.
current test PASSED/SKIPPED -- test_x_forwarded_proto in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 27.369155406951904s cumulative, 0.00324249267578125s individual

.
current test PASSED/SKIPPED -- test_no_forwarded_headers_with_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 27.372415781021118s cumulative, 0.003260374069213867s individual

.
current test PASSED/SKIPPED -- test_no_forwarded_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 27.375499486923218s cumulative, 0.0030837059020996094s individual

.
current test PASSED/SKIPPED -- test_escape_malformed_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 27.378549098968506s cumulative, 0.003049612045288086s individual

.
current test PASSED/SKIPPED -- test_escape_malformed_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 27.381670236587524s cumulative, 0.0031211376190185547s individual

.
current test PASSED/SKIPPED -- test_escape_malformed_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 27.384655475616455s cumulative, 0.002985239028930664s individual

.
current test PASSED/SKIPPED -- test_escape_malformed_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 27.387660026550293s cumulative, 0.0030045509338378906s individual

.
current test PASSED/SKIPPED -- test_forwarded_multiple_params in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 27.390803575515747s cumulative, 0.0031435489654541016s individual

.
current test PASSED/SKIPPED -- test_x_forwarded_proto in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 27.39378833770752s cumulative, 0.002984762191772461s individual

.
current test PASSED/SKIPPED -- test_escape_malformed_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 27.39684557914734s cumulative, 0.003057241439819336s individual

.
current test PASSED/SKIPPED -- test_escape_malformed_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 27.399855375289917s cumulative, 0.003009796142578125s individual

.
current test PASSED/SKIPPED -- test_x_forwarded_host in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 27.402575254440308s cumulative, 0.002719879150390625s individual

.
current test PASSED/SKIPPED -- test_x_forwarded_host_with_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 27.40532946586609s cumulative, 0.00275421142578125s individual

.
current test PASSED/SKIPPED -- test_forwarded_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 27.408092975616455s cumulative, 0.002763509750366211s individual

.
current test PASSED/SKIPPED -- test_forwarded_quote_escaping in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 27.41125464439392s cumulative, 0.0031616687774658203s individual

.
current test PASSED/SKIPPED -- test_no_forwarded_headers_with_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 27.41431498527527s cumulative, 0.0030603408813476562s individual

.
current test PASSED/SKIPPED -- test_escape_malformed_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 27.417582750320435s cumulative, 0.0032677650451660156s individual

.
current test PASSED/SKIPPED -- test_x_forwarded_host in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 27.420576572418213s cumulative, 0.0029938220977783203s individual

.
current test PASSED/SKIPPED -- test_escape_malformed_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 27.42423367500305s cumulative, 0.003657102584838867s individual

.
current test PASSED/SKIPPED -- test_forwarded_quote_escaping in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 27.427207469940186s cumulative, 0.002973794937133789s individual

.
current test PASSED/SKIPPED -- test_forwarded_missing_first_hop_host in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 27.43061900138855s cumulative, 0.003411531448364258s individual

.
current test PASSED/SKIPPED -- test_forwarded_host in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 27.43355107307434s cumulative, 0.0029320716857910156s individual

.
current test PASSED/SKIPPED -- test_no_forwarded_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 27.43632221221924s cumulative, 0.002771139144897461s individual

.
current test PASSED/SKIPPED -- test_escape_malformed_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 27.439342975616455s cumulative, 0.003020763397216797s individual

.
current test PASSED/SKIPPED -- test_escape_malformed_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 27.442481994628906s cumulative, 0.003139019012451172s individual

.
current test PASSED/SKIPPED -- test_forwarded_multiple_params in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 27.44537663459778s cumulative, 0.0028946399688720703s individual

.
current test PASSED/SKIPPED -- test_forwarded_host in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 27.448148727416992s cumulative, 0.002772092819213867s individual


tests/asgi/test_cythonized_asgi.py .
current test PASSED/SKIPPED -- test_scheduled_jobs in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 27.95607614517212s cumulative, 0.507927417755127s individual


tests/test_uri_templates.py .
current test PASSED/SKIPPED -- test_converter_custom in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 27.9621741771698s cumulative, 0.006098031997680664s individual

.
current test PASSED/SKIPPED -- test_root_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 27.966493368148804s cumulative, 0.004319190979003906s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 27.973135948181152s cumulative, 0.006642580032348633s individual

.
current test PASSED/SKIPPED -- test_empty_path_component in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 27.976914167404175s cumulative, 0.003778219223022461s individual

.
current test PASSED/SKIPPED -- test_empty_path_component in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 27.980507612228394s cumulative, 0.00359344482421875s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 27.98567771911621s cumulative, 0.005170106887817383s individual

.
current test PASSED/SKIPPED -- test_converter_custom in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 27.991284370422363s cumulative, 0.005606651306152344s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 27.997394800186157s cumulative, 0.006110429763793945s individual

.
current test PASSED/SKIPPED -- test_relative_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.001635551452637s cumulative, 0.004240751266479492s individual

.
current test PASSED/SKIPPED -- test_int_converter_rejections in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.006432056427002s cumulative, 0.004796504974365234s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.0115864276886s cumulative, 0.00515437126159668s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.019508600234985s cumulative, 0.007922172546386719s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.024850606918335s cumulative, 0.005342006683349609s individual

.
current test PASSED/SKIPPED -- test_empty_path_component in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.029531717300415s cumulative, 0.004681110382080078s individual

.
current test PASSED/SKIPPED -- test_converter_custom in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.03606390953064s cumulative, 0.006532192230224609s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.04044222831726s cumulative, 0.004378318786621094s individual

.
current test PASSED/SKIPPED -- test_empty_path_component in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.0446355342865s cumulative, 0.004193305969238281s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.04948878288269s cumulative, 0.004853248596191406s individual

.
current test PASSED/SKIPPED -- test_custom_error_on_suffix_route_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.052961587905884s cumulative, 0.0034728050231933594s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.057676076889038s cumulative, 0.004714488983154297s individual

.
current test PASSED/SKIPPED -- test_empty_path_component in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.0611674785614s cumulative, 0.0034914016723632812s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.06599712371826s cumulative, 0.0048296451568603516s individual

.
current test PASSED/SKIPPED -- test_empty_path_component in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.069639682769775s cumulative, 0.003642559051513672s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.076531887054443s cumulative, 0.006892204284667969s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.082670211791992s cumulative, 0.006138324737548828s individual

.
current test PASSED/SKIPPED -- test_same_level_complex_var in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.088176727294922s cumulative, 0.0055065155029296875s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.09369945526123s cumulative, 0.005522727966308594s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.10108208656311s cumulative, 0.007382631301879883s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.107641220092773s cumulative, 0.006559133529663086s individual

.
current test PASSED/SKIPPED -- test_single_trailing_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.11875319480896s cumulative, 0.011111974716186523s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.12521505355835s cumulative, 0.0064618587493896484s individual

.
current test PASSED/SKIPPED -- test_no_vars in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.129865884780884s cumulative, 0.00465083122253418s individual

.
current test PASSED/SKIPPED -- test_single in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.13510298728943s cumulative, 0.005237102508544922s individual

.
current test PASSED/SKIPPED -- test_single_path_segment in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.14043164253235s cumulative, 0.005328655242919922s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.146920919418335s cumulative, 0.006489276885986328s individual

.
current test PASSED/SKIPPED -- test_relative_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.150436401367188s cumulative, 0.003515481948852539s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.155259370803833s cumulative, 0.004822969436645508s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.161583423614502s cumulative, 0.006324052810668945s individual

.
current test PASSED/SKIPPED -- test_single in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.166404485702515s cumulative, 0.004821062088012695s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.171316623687744s cumulative, 0.004912137985229492s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.175938844680786s cumulative, 0.004622220993041992s individual

.
current test PASSED/SKIPPED -- test_uuid_converter_complex_segment in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.18095088005066s cumulative, 0.005012035369873047s individual

.
current test PASSED/SKIPPED -- test_multiple in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.18535566329956s cumulative, 0.004404783248901367s individual

.
current test PASSED/SKIPPED -- test_int_converter_rejections in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.19028329849243s cumulative, 0.004927635192871094s individual

.
current test PASSED/SKIPPED -- test_single in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.19493007659912s cumulative, 0.004646778106689453s individual

.
current test PASSED/SKIPPED -- test_relative_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.198501586914062s cumulative, 0.0035715103149414062s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.20312190055847s cumulative, 0.00462031364440918s individual

.
current test PASSED/SKIPPED -- test_with_and_without_trailing_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.210381507873535s cumulative, 0.0072596073150634766s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.214863300323486s cumulative, 0.004481792449951172s individual

.
current test PASSED/SKIPPED -- test_empty_path_component in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.21835160255432s cumulative, 0.003488302230834961s individual

.
current test PASSED/SKIPPED -- test_relative_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.222439765930176s cumulative, 0.004088163375854492s individual

.
current test PASSED/SKIPPED -- test_with_and_without_trailing_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.231571197509766s cumulative, 0.009131431579589844s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.23596692085266s cumulative, 0.004395723342895508s individual

.
current test PASSED/SKIPPED -- test_custom_error_on_suffix_route_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.239598512649536s cumulative, 0.003631591796875s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.244020700454712s cumulative, 0.004422187805175781s individual

.
current test PASSED/SKIPPED -- test_adding_suffix_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.250381469726562s cumulative, 0.006360769271850586s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.25598931312561s cumulative, 0.0056078433990478516s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.26037335395813s cumulative, 0.004384040832519531s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.265472412109375s cumulative, 0.005099058151245117s individual

.
current test PASSED/SKIPPED -- test_relative_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.269009828567505s cumulative, 0.003537416458129883s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.27355122566223s cumulative, 0.0045413970947265625s individual

.
current test PASSED/SKIPPED -- test_relative_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.27741050720215s cumulative, 0.003859281539916992s individual

.
current test PASSED/SKIPPED -- test_empty_path_component in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.28092384338379s cumulative, 0.003513336181640625s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.28550386428833s cumulative, 0.004580020904541016s individual

.
current test PASSED/SKIPPED -- test_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.29143738746643s cumulative, 0.005933523178100586s individual

.
current test PASSED/SKIPPED -- test_int_converter_rejections in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.296666860580444s cumulative, 0.005229473114013672s individual

.
current test PASSED/SKIPPED -- test_same_level_complex_var in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 28.30363416671753s cumulative, 0.006967306137084961s individual


tests/test_wsgi.py .
current test PASSED/SKIPPED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi.py: 28.328832149505615s cumulative, 0.025197982788085938s individual

.
current test PASSED/SKIPPED -- test_post_read_bounded_stream in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi.py: 28.338887453079224s cumulative, 0.010055303573608398s individual

.
current test PASSED/SKIPPED -- test_head_405 in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi.py: 28.345844984054565s cumulative, 0.006957530975341797s individual

.
current test PASSED/SKIPPED -- test_post_invalid_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi.py: 28.351707458496094s cumulative, 0.00586247444152832s individual

.
current test PASSED/SKIPPED -- test_put in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi.py: 28.358469247817993s cumulative, 0.006761789321899414s individual

.
current test PASSED/SKIPPED -- test_post in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi.py: 28.367570877075195s cumulative, 0.009101629257202148s individual

.
current test PASSED/SKIPPED -- test_post_read_bounded_stream_no_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi.py: 28.376526594161987s cumulative, 0.008955717086791992s individual


tests/test_response.py .
current test PASSED/SKIPPED -- test_response_option_mimetype_init in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 28.38671088218689s cumulative, 0.010184288024902344s individual

.
current test PASSED/SKIPPED -- test_response_attempt_to_set_read_only_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 28.391951322555542s cumulative, 0.005240440368652344s individual

.
current test PASSED/SKIPPED -- test_response_set_content_type_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 28.395002126693726s cumulative, 0.0030508041381835938s individual

.
current test PASSED/SKIPPED -- test_response_set_content_type_not_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 28.39792251586914s cumulative, 0.002920389175415039s individual

.
current test PASSED/SKIPPED -- test_response_get_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 28.4022319316864s cumulative, 0.004309415817260742s individual

.
current test PASSED/SKIPPED -- test_response_attempt_to_set_read_only_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 28.406111478805542s cumulative, 0.003879547119140625s individual

.
current test PASSED/SKIPPED -- test_response_get_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 28.40969491004944s cumulative, 0.0035834312438964844s individual

.
current test PASSED/SKIPPED -- test_response_set_content_type_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 28.412781476974487s cumulative, 0.003086566925048828s individual

.
current test PASSED/SKIPPED -- test_response_removed_stream_len in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 28.416271924972534s cumulative, 0.003490447998046875s individual

.
current test PASSED/SKIPPED -- test_response_removed_stream_len in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 28.419196844100952s cumulative, 0.0029249191284179688s individual

.
current test PASSED/SKIPPED -- test_response_set_content_type_not_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 28.422166347503662s cumulative, 0.002969503402709961s individual


tests/test_cors_middleware.py .
current test PASSED/SKIPPED -- test_allow_credential_list_or_str in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 28.432753324508667s cumulative, 0.010586977005004883s individual

.
current test PASSED/SKIPPED -- test_expose_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 28.438467502593994s cumulative, 0.0057141780853271484s individual

.
current test PASSED/SKIPPED -- test_allow_credential_wildcard in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 28.443090438842773s cumulative, 0.004622936248779297s individual

.
current test PASSED/SKIPPED -- test_allow_credential_list_or_str in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 28.450350761413574s cumulative, 0.007260322570800781s individual

.
current test PASSED/SKIPPED -- test_allow_origin_allow_credential in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 28.456092834472656s cumulative, 0.005742073059082031s individual

.
current test PASSED/SKIPPED -- test_raises in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 28.46078610420227s cumulative, 0.004693269729614258s individual

.
current test PASSED/SKIPPED -- test_expose_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 28.46626925468445s cumulative, 0.005483150482177734s individual

.
current test PASSED/SKIPPED -- test_allow_origin in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 28.47358775138855s cumulative, 0.0073184967041015625s individual

.
current test PASSED/SKIPPED -- test_allow_credential_existing_origin in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 28.478271484375s cumulative, 0.004683732986450195s individual

.
current test PASSED/SKIPPED -- test_expose_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 28.482878923416138s cumulative, 0.004607439041137695s individual

.
current test PASSED/SKIPPED -- test_allow_origin in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 28.488585710525513s cumulative, 0.005706787109375s individual

.
current test PASSED/SKIPPED -- test_allow_origin in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 28.495418787002563s cumulative, 0.006833076477050781s individual

.
current test PASSED/SKIPPED -- test_enabled_cors_should_add_extra_headers_on_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 28.500449419021606s cumulative, 0.005030632019042969s individual

.
current test PASSED/SKIPPED -- test_enabled_cors_should_accept_all_origins_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 28.50498628616333s cumulative, 0.004536867141723633s individual

.
current test PASSED/SKIPPED -- test_disabled_cors_should_not_add_any_extra_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 28.509953022003174s cumulative, 0.00496673583984375s individual

.
current test PASSED/SKIPPED -- test_enabled_cors_handles_preflighting_no_headers_in_req in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 28.514687061309814s cumulative, 0.004734039306640625s individual

.
current test PASSED/SKIPPED -- test_enabled_cors_handles_preflighting in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 28.51974630355835s cumulative, 0.005059242248535156s individual

.
current test PASSED/SKIPPED -- test_enabled_cors_no_origin in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 28.52442169189453s cumulative, 0.004675388336181641s individual


tests/test_default_router.py .
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 28.542494773864746s cumulative, 0.018073081970214844s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 28.563343048095703s cumulative, 0.02084827423095703s individual

.
current test PASSED/SKIPPED -- test_single_character_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 28.578624725341797s cumulative, 0.01528167724609375s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 28.58388590812683s cumulative, 0.00526118278503418s individual

.
current test PASSED/SKIPPED -- test_match_entire_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 28.587498664855957s cumulative, 0.0036127567291259766s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 28.591483116149902s cumulative, 0.0039844512939453125s individual

.
current test PASSED/SKIPPED -- test_options_converters_update in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 28.605548620224s cumulative, 0.01406550407409668s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 28.61095952987671s cumulative, 0.005410909652709961s individual

.
current test PASSED/SKIPPED -- test_options_converters_invalid_name_on_update in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 28.619794607162476s cumulative, 0.008835077285766602s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 28.62486457824707s cumulative, 0.0050699710845947266s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 28.628501415252686s cumulative, 0.0036368370056152344s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 28.633859634399414s cumulative, 0.005358219146728516s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 28.643157720565796s cumulative, 0.009298086166381836s individual

.
current test PASSED/SKIPPED -- test_options_converters_invalid_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 28.652323484420776s cumulative, 0.009165763854980469s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 28.668445110321045s cumulative, 0.016121625900268555s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 28.678229331970215s cumulative, 0.009784221649169922s individual

.
current test PASSED/SKIPPED -- test_capture_path_no_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 28.68170952796936s cumulative, 0.003480195999145508s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 28.68539309501648s cumulative, 0.0036835670471191406s individual

.
current test PASSED/SKIPPED -- test_non_conflict in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 28.697118759155273s cumulative, 0.011725664138793945s individual

.
current test PASSED/SKIPPED -- test_converters_with_invalid_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 28.706419944763184s cumulative, 0.009301185607910156s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 28.72327208518982s cumulative, 0.016852140426635742s individual

.
current test PASSED/SKIPPED -- test_subsegment_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 28.736246347427368s cumulative, 0.012974262237548828s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 28.74958610534668s cumulative, 0.013339757919311523s individual

.
current test PASSED/SKIPPED -- test_converters_with_invalid_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 28.75864291191101s cumulative, 0.009056806564331055s individual

.
current test PASSED/SKIPPED -- test_options_converters_invalid_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 28.76765489578247s cumulative, 0.009011983871459961s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 28.77815580368042s cumulative, 0.010500907897949219s individual

.
current test PASSED/SKIPPED -- test_params_in_non_taken_branches in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 28.784560918807983s cumulative, 0.0064051151275634766s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 28.793705701828003s cumulative, 0.009144783020019531s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 28.79764151573181s cumulative, 0.003935813903808594s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 28.803364276885986s cumulative, 0.005722761154174805s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 28.8168728351593s cumulative, 0.01350855827331543s individual

.
current test PASSED/SKIPPED -- test_conflict in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 28.8258318901062s cumulative, 0.008959054946899414s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 28.834731340408325s cumulative, 0.008899450302124023s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 28.84021830558777s cumulative, 0.005486965179443359s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 28.853655576705933s cumulative, 0.013437271118164062s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 28.862552881240845s cumulative, 0.00889730453491211s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 28.88127899169922s cumulative, 0.018726110458374023s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 28.89023518562317s cumulative, 0.008956193923950195s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 28.903105974197388s cumulative, 0.01287078857421875s individual

.
current test PASSED/SKIPPED -- test_converters in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 28.916274070739746s cumulative, 0.013168096542358398s individual

.
current test PASSED/SKIPPED -- test_converters_with_invalid_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 28.9250967502594s cumulative, 0.00882267951965332s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 28.928869009017944s cumulative, 0.003772258758544922s individual

.
current test PASSED/SKIPPED -- test_options_converters_update in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 28.942067861557007s cumulative, 0.0131988525390625s individual

.
current test PASSED/SKIPPED -- test_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 28.95537042617798s cumulative, 0.01330256462097168s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 28.959064245224s cumulative, 0.003693819046020508s individual

.
current test PASSED/SKIPPED -- test_malformed_pattern in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 28.97378706932068s cumulative, 0.014722824096679688s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 28.982569932937622s cumulative, 0.00878286361694336s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 28.99552083015442s cumulative, 0.012950897216796875s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 28.999102115631104s cumulative, 0.0035812854766845703s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.002903938293457s cumulative, 0.0038018226623535156s individual

.
current test PASSED/SKIPPED -- test_options_converters_invalid_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.011438846588135s cumulative, 0.008534908294677734s individual

.
current test PASSED/SKIPPED -- test_override in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.024237155914307s cumulative, 0.012798309326171875s individual

.
current test PASSED/SKIPPED -- test_duplicate_field_names in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.02704906463623s cumulative, 0.002811908721923828s individual

.
current test PASSED/SKIPPED -- test_params_in_non_taken_branches in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.03389263153076s cumulative, 0.00684356689453125s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.048890352249146s cumulative, 0.014997720718383789s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.059176683425903s cumulative, 0.010286331176757812s individual

.
current test PASSED/SKIPPED -- test_capture_path_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.062532424926758s cumulative, 0.003355741500854492s individual

.
current test PASSED/SKIPPED -- test_not_str in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.066601514816284s cumulative, 0.004069089889526367s individual

.
current test PASSED/SKIPPED -- test_literal in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.07998037338257s cumulative, 0.01337885856628418s individual

.
current test PASSED/SKIPPED -- test_converters in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.09532642364502s cumulative, 0.015346050262451172s individual

.
current test PASSED/SKIPPED -- test_options_converters_invalid_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.103970050811768s cumulative, 0.008643627166748047s individual

.
current test PASSED/SKIPPED -- test_capture_path_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.106977224349976s cumulative, 0.003007173538208008s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.112226009368896s cumulative, 0.0052487850189208984s individual

.
current test PASSED/SKIPPED -- test_literal_segment in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.125094652175903s cumulative, 0.012868642807006836s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.138238191604614s cumulative, 0.013143539428710938s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.152806282043457s cumulative, 0.014568090438842773s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.1563241481781s cumulative, 0.0035178661346435547s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.162166357040405s cumulative, 0.0058422088623046875s individual

.
current test PASSED/SKIPPED -- test_not_str in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.16596817970276s cumulative, 0.0038018226623535156s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.18069624900818s cumulative, 0.014728069305419922s individual

.
current test PASSED/SKIPPED -- test_dead_segment in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.193671464920044s cumulative, 0.012975215911865234s individual

.
current test PASSED/SKIPPED -- test_malformed_pattern in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.208008766174316s cumulative, 0.014337301254272461s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.21184778213501s cumulative, 0.0038390159606933594s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.21580171585083s cumulative, 0.0039539337158203125s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.22101926803589s cumulative, 0.005217552185058594s individual

.
current test PASSED/SKIPPED -- test_complex_alt in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.234497785568237s cumulative, 0.013478517532348633s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.243266344070435s cumulative, 0.008768558502197266s individual

.
current test PASSED/SKIPPED -- test_duplicate_field_names in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.246032238006592s cumulative, 0.0027658939361572266s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.251527547836304s cumulative, 0.005495309829711914s individual

.
current test PASSED/SKIPPED -- test_converters in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.267008781433105s cumulative, 0.015481233596801758s individual

.
current test PASSED/SKIPPED -- test_dead_segment in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.28066110610962s cumulative, 0.013652324676513672s individual

.
current test PASSED/SKIPPED -- test_duplicate_field_names in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.28368592262268s cumulative, 0.0030248165130615234s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.29660987854004s cumulative, 0.012923955917358398s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.30962824821472s cumulative, 0.013018369674682617s individual

.
current test PASSED/SKIPPED -- test_non_conflict in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.318458318710327s cumulative, 0.008830070495605469s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.331769943237305s cumulative, 0.013311624526977539s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.340593338012695s cumulative, 0.008823394775390625s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.359097719192505s cumulative, 0.01850438117980957s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.366288900375366s cumulative, 0.007191181182861328s individual

.
current test PASSED/SKIPPED -- test_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.381112575531006s cumulative, 0.014823675155639648s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.395025730133057s cumulative, 0.013913154602050781s individual

.
current test PASSED/SKIPPED -- test_capture_path_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.398159742355347s cumulative, 0.003134012222290039s individual

.
current test PASSED/SKIPPED -- test_converters_malformed_specification in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.406893968582153s cumulative, 0.00873422622680664s individual

.
current test PASSED/SKIPPED -- test_not_str in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.410305738449097s cumulative, 0.0034117698669433594s individual

.
current test PASSED/SKIPPED -- test_match_entire_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.414649486541748s cumulative, 0.004343748092651367s individual

.
current test PASSED/SKIPPED -- test_user_regression_versioned_url in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.418038606643677s cumulative, 0.003389120101928711s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.43327236175537s cumulative, 0.015233755111694336s individual

.
current test PASSED/SKIPPED -- test_match_entire_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.436532020568848s cumulative, 0.0032596588134765625s individual

.
current test PASSED/SKIPPED -- test_conflict in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.446107387542725s cumulative, 0.009575366973876953s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.461036443710327s cumulative, 0.014929056167602539s individual

.
current test PASSED/SKIPPED -- test_conflict in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.469753742218018s cumulative, 0.00871729850769043s individual

.
current test PASSED/SKIPPED -- test_params_in_non_taken_branches in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.475480318069458s cumulative, 0.00572657585144043s individual

.
current test PASSED/SKIPPED -- test_converters in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.488937854766846s cumulative, 0.013457536697387695s individual

.
current test PASSED/SKIPPED -- test_converters_malformed_specification in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.497644186019897s cumulative, 0.008706331253051758s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.501219272613525s cumulative, 0.0035750865936279297s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.509886741638184s cumulative, 0.008667469024658203s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.526917934417725s cumulative, 0.017031192779541016s individual

.
current test PASSED/SKIPPED -- test_params_in_non_taken_branches in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.533656120300293s cumulative, 0.006738185882568359s individual

.
current test PASSED/SKIPPED -- test_match_entire_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.538326263427734s cumulative, 0.004670143127441406s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.54829430580139s cumulative, 0.009968042373657227s individual

.
current test PASSED/SKIPPED -- test_options_converters_invalid_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.559518814086914s cumulative, 0.011224508285522461s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.572757720947266s cumulative, 0.013238906860351562s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.5814208984375s cumulative, 0.008663177490234375s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.58660888671875s cumulative, 0.00518798828125s individual

.
current test PASSED/SKIPPED -- test_not_str in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.59033989906311s cumulative, 0.0037310123443603516s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.603707790374756s cumulative, 0.013367891311645508s individual

.
current test PASSED/SKIPPED -- test_converters_with_invalid_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.61272621154785s cumulative, 0.009018421173095703s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.6165132522583s cumulative, 0.0037870407104492188s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.629679441452026s cumulative, 0.013166189193725586s individual

.
current test PASSED/SKIPPED -- test_not_str in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.6330463886261s cumulative, 0.0033669471740722656s individual

.
current test PASSED/SKIPPED -- test_non_conflict in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.642802476882935s cumulative, 0.009756088256835938s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.64841890335083s cumulative, 0.005616426467895508s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.661622285842896s cumulative, 0.01320338249206543s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.674723148345947s cumulative, 0.013100862503051758s individual

.
current test PASSED/SKIPPED -- test_dead_segment in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.69009304046631s cumulative, 0.015369892120361328s individual

.
current test PASSED/SKIPPED -- test_duplicate_field_names in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.692960262298584s cumulative, 0.0028672218322753906s individual

.
current test PASSED/SKIPPED -- test_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.7069251537323s cumulative, 0.01396489143371582s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.720109224319458s cumulative, 0.013184070587158203s individual

.
current test PASSED/SKIPPED -- test_converters in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.73492193222046s cumulative, 0.014812707901000977s individual

.
current test PASSED/SKIPPED -- test_not_str in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.738427877426147s cumulative, 0.0035059452056884766s individual

.
current test PASSED/SKIPPED -- test_multivar in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.751341104507446s cumulative, 0.012913227081298828s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.764354467391968s cumulative, 0.013013362884521484s individual

.
current test PASSED/SKIPPED -- test_capture_path_no_children in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.768390417099s cumulative, 0.00403594970703125s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.77713370323181s cumulative, 0.0087432861328125s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.785826444625854s cumulative, 0.008692741394042969s individual

.
current test PASSED/SKIPPED -- test_options_converters_invalid_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.79453945159912s cumulative, 0.008713006973266602s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.807587385177612s cumulative, 0.013047933578491211s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.812899827957153s cumulative, 0.005312442779541016s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.821574687957764s cumulative, 0.008674860000610352s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.83622980117798s cumulative, 0.014655113220214844s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.84075927734375s cumulative, 0.004529476165771484s individual

.
current test PASSED/SKIPPED -- test_user_regression_recipes in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.84477734565735s cumulative, 0.004018068313598633s individual

.
current test PASSED/SKIPPED -- test_params_in_non_taken_branches in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.85044527053833s cumulative, 0.005667924880981445s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.85928201675415s cumulative, 0.008836746215820312s individual

.
current test PASSED/SKIPPED -- test_dead_segment in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.872859954833984s cumulative, 0.013577938079833984s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.882885456085205s cumulative, 0.010025501251220703s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.892488718032837s cumulative, 0.009603261947631836s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.907411336898804s cumulative, 0.014922618865966797s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.911790132522583s cumulative, 0.004378795623779297s individual

.
current test PASSED/SKIPPED -- test_options_converters_invalid_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.922075033187866s cumulative, 0.010284900665283203s individual



def find(path, return_values, patterns, converters, params):
    path_len = len(path)
    if path_len > 0:
        if path[0] == 'repos':
            if path_len > 1:
                if path_len > 2:
                    if path_len > 3:
                        if path[3] == 'commits':
                            if path_len == 4:
                                params['org'] = path[1]
                                params['repo'] = path[2]
                                return return_values[3]
                            return None
                        if path[3] == 'compare':
                            if path_len > 4:
                                if path[4] == 'all':
                                    if path_len == 5:
                                        params['org'] = path[1]
                                        params['repo'] = path[2]
                                        return return_values[4]
                                match = patterns[0].match(path[4])  # ^(?P<usr0>.+):(?P<branch0>.+)\.\.\.(?P<usr1>.+):(?P<branch1>.+)$
                                if match is not None:
                                    dict_match_3 = match.groupdict()
                                    if path_len > 5:
                                        if path[5] == 'full':
                                            if path_len == 6:
                                                params['org'] = path[1]
                                                params['repo'] = path[2]
                                                params.update(dict_match_3)
                                                return return_values[6]
                                        if path[5] == 'part':
                                            if path_len == 6:
                                                params['org'] = path[1]
                                                params['repo'] = path[2]
                                                params.update(dict_match_3)
                                                return return_values[7]
                                    if path_len == 5:
                                        params['org'] = path[1]
                                        params['repo'] = path[2]
                                        params.update(dict_match_3)
                                        return return_values[5]
                                match = patterns[1].match(path[4])  # ^(?P<usr0>.+):(?P<branch0>.+)$
                                if match is not None:
                                    dict_match_3 = match.groupdict()
                                    if path_len > 5:
                                        if path[5] == 'full':
                                            if path_len == 6:
                                                params['org'] = path[1]
                                                params['repo'] = path[2]
                                                params.update(dict_match_3)
                                                return return_values[9]
                                    if path_len == 5:
                                        params['org'] = path[1]
                                        params['repo'] = path[2]
                                        params.update(dict_match_3)
                                        return return_values[8]
                            return None
                        return None
                    if path_len == 3:
                        params['org'] = path[1]
                        params['repo'] = path[2]
                        return return_values[2]
                    return None
                if path_len == 2:
                    params['org'] = path[1]
                    return return_values[1]
                return None
            if path_len == 1:
                return return_values[0]
            return None
        if path[0] == 'teams':
            if path_len > 1:
                if path[1] == 'default':
                    if path_len > 2:
                        if path[2] == 'members':
                            if path_len > 3:
                                if path[3] == 'thing':
                                    if path_len == 4:
                                        return return_values[11]
                    if path_len == 2:
                        return return_values[10]
                if path_len > 2:
                    if path[2] == 'members':
                        if path_len == 3:
                            params['id'] = path[1]
                            return return_values[13]
                if path_len == 2:
                    params['id'] = path[1]
                    return return_values[12]
            return None
        if path[0] == 'user':
            if path_len > 1:
                if path[1] == 'memberships':
                    if path_len == 2:
                        return return_values[14]
                    return None
                return None
            return None
        if path[0] == 'emojis':
            if path_len > 1:
                if path[1] == 'signs':
                    if path_len > 2:
                        if path[2] == '0':
                            if path_len == 3:
                                return return_values[16]
                        if path[2] == '42':
                            if path_len > 3:
                                if path[3] == 'small.jpg':
                                    if path_len == 4:
                                        return return_values[18]
                            if path_len == 3:
                                return return_values[17]
                        if path[2] == '78':
                            if path_len > 3:
                                if path[3] == 'small.png':
                                    if path_len == 4:
                                        return return_values[19]
                                if path[3] == 'small(png)':
                                    if path_len == 4:
                                        return return_values[20]
                                if path[3] == 'small_png':
                                    if path_len == 4:
                                        return return_values[21]
                        if path_len == 3:
                            params['id'] = path[2]
                            return return_values[22]
                    return None
                return None
            if path_len == 1:
                return return_values[15]
            return None
        if path[0] == 'images':
            if path_len > 1:
                match = patterns[2].match(path[1])  # ^(?P<id>.+)\.gif$
                if match is not None:
                    dict_match_1 = match.groupdict()
                    if path_len == 2:
                        params.update(dict_match_1)
                        return return_values[23]
                    return None
                return None
            return None
        if path[0] == 'gists':
            if path_len > 1:
                if path[1] == 'first':
                    if path_len == 2:
                        return return_values[24]
                if path_len > 2:
                    if path[2] == 'raw':
                        if path_len == 3:
                            params['id'] = path[1]
                            return return_values[25]
                    if path_len == 3:
                        params['id'] = path[1]
                        params['representation'] = path[2]
                        return return_values[26]
            return None
        if path[0] == 'item':
            if path_len > 1:
                if path_len == 2:
                    params['q'] = path[1]
                    return return_values[27]
                return None
            return None
        if path[0] == 'cvt':
            if path_len > 1:
                if path[1] == 'teams':
                    if path_len > 2:
                        if path[2] == 'default':
                            if path_len > 3:
                                if path[3] == 'members':
                                    if path_len > 4:
                                        match = patterns[3].match(path[4])  # ^(?P<id>.+)-(?P<tenure>.+)$
                                        if match is not None:
                                            groups = match.groupdict()
                                            fragment = groups.pop('id')
                                            field_value_1 = converters[0].convert(fragment)
                                            if field_value_1 is not None:
                                                fragment = groups.pop('tenure')
                                                field_value_2 = converters[1].convert(fragment)
                                                if field_value_2 is not None:
                                                    if path_len == 5:
                                                        params['id'] = field_value_1
                                                        params['tenure'] = field_value_2
                                                        return return_values[29]
                            if path_len == 3:
                                return return_values[28]
                        fragment = path[2]
                        field_value_1 = converters[2].convert(fragment)
                        if field_value_1 is not None:
                            if path_len > 3:
                                if path[3] == 'members':
                                    if path_len == 4:
                                        params['id'] = field_value_1
                                        return return_values[31]
                            if path_len == 3:
                                params['id'] = field_value_1
                                return return_values[30]
                    return None
                if path[1] == 'repos':
                    if path_len > 2:
                        if path_len > 3:
                            if path_len > 4:
                                if path[4] == 'compare':
                                    if path_len > 5:
                                        match = patterns[4].match(path[5])  # ^(?P<usr0>.+):(?P<branch0>.+)\.\.\.(?P<usr1>.+):(?P<branch1>.+)$
                                        if match is not None:
                                            groups = match.groupdict()
                                            fragment = groups.pop('branch0')
                                            field_value_3 = converters[3].convert(fragment)
                                            if field_value_3 is not None:
                                                fragment = groups.pop('branch1')
                                                field_value_4 = converters[4].convert(fragment)
                                                if field_value_4 is not None:
                                                    dict_groups_5 = groups
                                                    if path_len > 6:
                                                        if path[6] == 'part':
                                                            if path_len == 7:
                                                                params['org'] = path[2]
                                                                params['repo'] = path[3]
                                                                params['branch0'] = field_value_3
                                                                params['branch1'] = field_value_4
                                                                params.update(dict_groups_5)
                                                                return return_values[32]
                                        match = patterns[5].match(path[5])  # ^(?P<usr0>.+):(?P<branch0>.+)$
                                        if match is not None:
                                            groups = match.groupdict()
                                            fragment = groups.pop('branch0')
                                            field_value_3 = converters[5].convert(fragment)
                                            if field_value_3 is not None:
                                                dict_groups_4 = groups
                                                if path_len > 6:
                                                    if path[6] == 'full':
                                                        if path_len == 7:
                                                            params['org'] = path[2]
                                                            params['repo'] = path[3]
                                                            params['branch0'] = field_value_3
                                                            params.update(dict_groups_4)
                                                            return return_values[34]
                                                if path_len == 6:
                                                    params['org'] = path[2]
                                                    params['repo'] = path[3]
                                                    params['branch0'] = field_value_3
                                                    params.update(dict_groups_4)
                                                    return return_values[33]
                                    return None
                                return None
                            return None
                        return None
                    return None
                return None
            return None
        return None
    return None

.
current test PASSED/SKIPPED -- test_print_src in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.939647674560547s cumulative, 0.017572641372680664s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.949729919433594s cumulative, 0.010082244873046875s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.95866370201111s cumulative, 0.008933782577514648s individual

.
current test PASSED/SKIPPED -- test_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.97204852104187s cumulative, 0.013384819030761719s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.981014251708984s cumulative, 0.008965730667114258s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 29.994202613830566s cumulative, 0.013188362121582031s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 30.011151790618896s cumulative, 0.016949176788330078s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 30.019944429397583s cumulative, 0.008792638778686523s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 30.033034086227417s cumulative, 0.013089656829833984s individual

.
current test PASSED/SKIPPED -- test_capture_path_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 30.03679370880127s cumulative, 0.003759622573852539s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 30.051055192947388s cumulative, 0.014261484146118164s individual

.
current test PASSED/SKIPPED -- test_conflict in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 30.05979061126709s cumulative, 0.008735418319702148s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 30.06503915786743s cumulative, 0.005248546600341797s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 30.070371627807617s cumulative, 0.005332469940185547s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 30.074103116989136s cumulative, 0.0037314891815185547s individual

.
current test PASSED/SKIPPED -- test_complex_alt in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 30.087673902511597s cumulative, 0.013570785522460938s individual

.
current test PASSED/SKIPPED -- test_options_converters_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 30.10050320625305s cumulative, 0.012829303741455078s individual

.
current test PASSED/SKIPPED -- test_converters in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 30.115368366241455s cumulative, 0.01486515998840332s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 30.124611616134644s cumulative, 0.009243249893188477s individual

.
current test PASSED/SKIPPED -- test_root_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 30.12830114364624s cumulative, 0.0036895275115966797s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 30.14139151573181s cumulative, 0.013090372085571289s individual


tests/test_redirects.py .
current test PASSED/SKIPPED -- test_redirect in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 30.149951457977295s cumulative, 0.008559942245483398s individual

.
current test PASSED/SKIPPED -- test_redirect_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 30.155032634735107s cumulative, 0.0050811767578125s individual

.
current test PASSED/SKIPPED -- test_redirect_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 30.161152839660645s cumulative, 0.006120204925537109s individual

.
current test PASSED/SKIPPED -- test_redirect in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 30.169808387756348s cumulative, 0.008655548095703125s individual

.
current test PASSED/SKIPPED -- test_redirect in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 30.174883127212524s cumulative, 0.005074739456176758s individual

.
current test PASSED/SKIPPED -- test_redirect_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 30.17946434020996s cumulative, 0.0045812129974365234s individual

.
current test PASSED/SKIPPED -- test_redirect_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 30.184892892837524s cumulative, 0.0054285526275634766s individual

.
current test PASSED/SKIPPED -- test_redirect_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 30.189600944519043s cumulative, 0.004708051681518555s individual

.
current test PASSED/SKIPPED -- test_redirect in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 30.19546341896057s cumulative, 0.00586247444152832s individual

.
current test PASSED/SKIPPED -- test_redirect in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 30.200628995895386s cumulative, 0.005165576934814453s individual

.
current test PASSED/SKIPPED -- test_redirect in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 30.20583152770996s cumulative, 0.005202531814575195s individual

.
current test PASSED/SKIPPED -- test_redirect_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 30.21106505393982s cumulative, 0.0052335262298583984s individual

.
current test PASSED/SKIPPED -- test_redirect in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 30.216078996658325s cumulative, 0.005013942718505859s individual

.
current test PASSED/SKIPPED -- test_redirect in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 30.220648288726807s cumulative, 0.004569292068481445s individual

.
current test PASSED/SKIPPED -- test_redirect in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 30.22515606880188s cumulative, 0.004507780075073242s individual

.
current test PASSED/SKIPPED -- test_redirect in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 30.229787588119507s cumulative, 0.004631519317626953s individual

.
current test PASSED/SKIPPED -- test_redirect_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 30.234562635421753s cumulative, 0.004775047302246094s individual

.
current test PASSED/SKIPPED -- test_redirect_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 30.24098014831543s cumulative, 0.006417512893676758s individual

.
current test PASSED/SKIPPED -- test_redirect_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 30.246105909347534s cumulative, 0.005125761032104492s individual

.
current test PASSED/SKIPPED -- test_redirect_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 30.251410484313965s cumulative, 0.005304574966430664s individual


tests/test_cmd_inspect_app.py F
current test FAILED -- test_routes_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 30.3644859790802s cumulative, 0.11307549476623535s individual

F
current test FAILED -- test_routes_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 30.5169677734375s cumulative, 0.1524817943572998s individual

F
current test FAILED -- test_inspect in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 30.64791750907898s cumulative, 0.1309497356414795s individual

F
current test FAILED -- test_routes_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 30.77462673187256s cumulative, 0.1267092227935791s individual

F
current test FAILED -- test_inspect in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 30.87952208518982s cumulative, 0.10489535331726074s individual

F
current test FAILED -- test_inspect in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 31.006789445877075s cumulative, 0.12726736068725586s individual

F
current test FAILED -- test_inspect in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 31.077770471572876s cumulative, 0.07098102569580078s individual

F
current test FAILED -- test_routes_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 31.157843351364136s cumulative, 0.08007287979125977s individual

F
current test FAILED -- test_load_app_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 31.223602771759033s cumulative, 0.06575942039489746s individual

F
current test FAILED -- test_load_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 31.286014556884766s cumulative, 0.06241178512573242s individual

F
current test FAILED -- test_load_app_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 31.363596200942993s cumulative, 0.07758164405822754s individual

F
current test FAILED -- test_load_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 31.428704023361206s cumulative, 0.06510782241821289s individual

F
current test FAILED -- test_load_app_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 31.512012720108032s cumulative, 0.08330869674682617s individual


tests/asgi/test_buffered_reader.py .
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.516897678375244s cumulative, 0.004884958267211914s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.52019500732422s cumulative, 0.0032973289489746094s individual

.
current test PASSED/SKIPPED -- test_placeholder_methods in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.523211240768433s cumulative, 0.003016233444213867s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.527667999267578s cumulative, 0.004456758499145508s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.53104043006897s cumulative, 0.0033724308013916016s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.53439497947693s cumulative, 0.0033545494079589844s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.537998914718628s cumulative, 0.0036039352416992188s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.54147744178772s cumulative, 0.003478527069091797s individual

.
current test PASSED/SKIPPED -- test_basic_aiter in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.544282913208008s cumulative, 0.002805471420288086s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.547860622406006s cumulative, 0.003577709197998047s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.55066418647766s cumulative, 0.0028035640716552734s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.55346941947937s cumulative, 0.0028052330017089844s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.55708622932434s cumulative, 0.003616809844970703s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.560585975646973s cumulative, 0.003499746322631836s individual

.
current test PASSED/SKIPPED -- test_readall in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.563690185546875s cumulative, 0.0031042098999023438s individual

.
current test PASSED/SKIPPED -- test_pipe in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.566605806350708s cumulative, 0.002915620803833008s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.569308519363403s cumulative, 0.0027027130126953125s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.572943210601807s cumulative, 0.0036346912384033203s individual

.
current test PASSED/SKIPPED -- test_delimit in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.576149225234985s cumulative, 0.003206014633178711s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.581597566604614s cumulative, 0.005448341369628906s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.584579706192017s cumulative, 0.0029821395874023438s individual

.
current test PASSED/SKIPPED -- test_peek_at_eof in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.587181329727173s cumulative, 0.00260162353515625s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.590001106262207s cumulative, 0.0028197765350341797s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.5936598777771s cumulative, 0.003658771514892578s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.597063302993774s cumulative, 0.0034034252166748047s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.600692987442017s cumulative, 0.0036296844482421875s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.604195594787598s cumulative, 0.0035026073455810547s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.607702493667603s cumulative, 0.003506898880004883s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.611287832260132s cumulative, 0.003585338592529297s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.61413860321045s cumulative, 0.002850770950317383s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.617631673812866s cumulative, 0.003493070602416992s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.62058925628662s cumulative, 0.002957582473754883s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.624088287353516s cumulative, 0.0034990310668945312s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.627671003341675s cumulative, 0.0035827159881591797s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.63121724128723s cumulative, 0.0035462379455566406s individual

.
current test PASSED/SKIPPED -- test_invalid_delimiter_length in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.63404655456543s cumulative, 0.002829313278198242s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.63750410079956s cumulative, 0.0034575462341308594s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.64099931716919s cumulative, 0.0034952163696289062s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.64389705657959s cumulative, 0.0028977394104003906s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.646666526794434s cumulative, 0.00276947021484375s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.651182413101196s cumulative, 0.004515886306762695s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.654370307922363s cumulative, 0.003187894821166992s individual

.
current test PASSED/SKIPPED -- test_read_until_with_buffer_edge_case in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.66014289855957s cumulative, 0.005772590637207031s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.66391086578369s cumulative, 0.0037679672241210938s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.667438983917236s cumulative, 0.003528118133544922s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.67107605934143s cumulative, 0.003637075424194336s individual

.
current test PASSED/SKIPPED -- test_read in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.674213886260986s cumulative, 0.003137826919555664s individual

.
current test PASSED/SKIPPED -- test_peek in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.677200078964233s cumulative, 0.0029861927032470703s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.680742740631104s cumulative, 0.003542661666870117s individual

.
current test PASSED/SKIPPED -- test_readall in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.683581829071045s cumulative, 0.0028390884399414062s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.687182903289795s cumulative, 0.00360107421875s individual

.
current test PASSED/SKIPPED -- test_readall in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.69015884399414s cumulative, 0.002975940704345703s individual

.
current test PASSED/SKIPPED -- test_read in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.69344735145569s cumulative, 0.0032885074615478516s individual

.
current test PASSED/SKIPPED -- test_iteration_started in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.696392059326172s cumulative, 0.0029447078704833984s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.70008635520935s cumulative, 0.003694295883178711s individual

.
current test PASSED/SKIPPED -- test_delimit in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.70310354232788s cumulative, 0.0030171871185302734s individual

.
current test PASSED/SKIPPED -- test_delimit in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.70619773864746s cumulative, 0.003094196319580078s individual

.
current test PASSED/SKIPPED -- test_peek in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.709075927734375s cumulative, 0.0028781890869140625s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.71269702911377s cumulative, 0.0036211013793945312s individual

.
current test PASSED/SKIPPED -- test_pipe_until_delimiter_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.715487241744995s cumulative, 0.002790212631225586s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.718963384628296s cumulative, 0.0034761428833007812s individual

.
current test PASSED/SKIPPED -- test_read in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.722838878631592s cumulative, 0.0038754940032958984s individual

.
current test PASSED/SKIPPED -- test_peek in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.72584104537964s cumulative, 0.003002166748046875s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.728940963745117s cumulative, 0.0030999183654785156s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.73362398147583s cumulative, 0.004683017730712891s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.73708200454712s cumulative, 0.0034580230712890625s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.740867853164673s cumulative, 0.003785848617553711s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.74433922767639s cumulative, 0.00347137451171875s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.747075080871582s cumulative, 0.0027358531951904297s individual

.
current test PASSED/SKIPPED -- test_peek in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.749966859817505s cumulative, 0.0028917789459228516s individual

.
current test PASSED/SKIPPED -- test_peek in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.752920866012573s cumulative, 0.0029540061950683594s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.756006717681885s cumulative, 0.0030858516693115234s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.75987696647644s cumulative, 0.003870248794555664s individual

.
current test PASSED/SKIPPED -- test_aiter_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.76271367073059s cumulative, 0.0028367042541503906s individual

.
current test PASSED/SKIPPED -- test_exhaust in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.76569700241089s cumulative, 0.0029833316802978516s individual

.
current test PASSED/SKIPPED -- test_delimit in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.768632650375366s cumulative, 0.002935647964477539s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.77211904525757s cumulative, 0.0034863948822021484s individual

.
current test PASSED/SKIPPED -- test_read in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.775603532791138s cumulative, 0.003484487533569336s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.779775381088257s cumulative, 0.004171848297119141s individual

.
current test PASSED/SKIPPED -- test_delimit in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.782750368118286s cumulative, 0.002974987030029297s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.785470247268677s cumulative, 0.002719879150390625s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.791070461273193s cumulative, 0.0056002140045166016s individual

.
current test PASSED/SKIPPED -- test_peek in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 31.79611825942993s cumulative, 0.005047798156738281s individual


tests/test_hello.py .
current test PASSED/SKIPPED -- test_stream_chunked in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 31.806663274765015s cumulative, 0.010545015335083008s individual

.
current test PASSED/SKIPPED -- test_env_headers_list_of_tuples in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 31.80961847305298s cumulative, 0.002955198287963867s individual

.
current test PASSED/SKIPPED -- test_stream_known_len in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 31.815152168273926s cumulative, 0.005533695220947266s individual

.
current test PASSED/SKIPPED -- test_no_body_on_head in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 31.820186614990234s cumulative, 0.005034446716308594s individual

.
current test PASSED/SKIPPED -- test_filelike in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 31.826409816741943s cumulative, 0.006223201751708984s individual

.
current test PASSED/SKIPPED -- test_root_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 31.834360361099243s cumulative, 0.007950544357299805s individual

.
current test PASSED/SKIPPED -- test_filelike_closing in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 31.840710401535034s cumulative, 0.006350040435791016s individual

.
current test PASSED/SKIPPED -- test_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 31.84572672843933s cumulative, 0.005016326904296875s individual

.
current test PASSED/SKIPPED -- test_no_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 31.850651264190674s cumulative, 0.0049245357513427734s individual

.
current test PASSED/SKIPPED -- test_filelike_closing in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 31.85623025894165s cumulative, 0.0055789947509765625s individual

.
current test PASSED/SKIPPED -- test_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 31.86330509185791s cumulative, 0.007074832916259766s individual

.
current test PASSED/SKIPPED -- test_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 31.86874270439148s cumulative, 0.005437612533569336s individual

.
current test PASSED/SKIPPED -- test_filelike_using_helper in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 31.87352442741394s cumulative, 0.0047817230224609375s individual

.
current test PASSED/SKIPPED -- test_status_not_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 31.877898454666138s cumulative, 0.004374027252197266s individual


tests/test_http_custom_method_routing.py .
current test PASSED/SKIPPED -- test_foo in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_custom_method_routing.py: 31.88489532470703s cumulative, 0.006996870040893555s individual

.
current test PASSED/SKIPPED -- test_map_http_methods in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_custom_method_routing.py: 31.889554738998413s cumulative, 0.004659414291381836s individual

.
current test PASSED/SKIPPED -- test_map_http_methods in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_custom_method_routing.py: 31.895117044448853s cumulative, 0.005562305450439453s individual

.
current test PASSED/SKIPPED -- test_bar in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_custom_method_routing.py: 31.902138471603394s cumulative, 0.007021427154541016s individual

.
current test PASSED/SKIPPED -- test_bar in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_custom_method_routing.py: 31.907997608184814s cumulative, 0.0058591365814208984s individual

.
current test PASSED/SKIPPED -- test_foo in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_custom_method_routing.py: 31.91794180870056s cumulative, 0.00994420051574707s individual


tests/test_after_hooks.py .
current test PASSED/SKIPPED -- test_serializer in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 31.92283582687378s cumulative, 0.0048940181732177734s individual

.
current test PASSED/SKIPPED -- test_hook_as_callable_class in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 31.92731809616089s cumulative, 0.004482269287109375s individual

.
current test PASSED/SKIPPED -- test_after_hooks_on_suffixed_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 31.933777809143066s cumulative, 0.006459712982177734s individual

.
current test PASSED/SKIPPED -- test_after_hooks_on_suffixed_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 31.939217567443848s cumulative, 0.00543975830078125s individual

.
current test PASSED/SKIPPED -- test_output_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 31.943835735321045s cumulative, 0.004618167877197266s individual

.
current test PASSED/SKIPPED -- test_serializer in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 31.948078155517578s cumulative, 0.004242420196533203s individual

.
current test PASSED/SKIPPED -- test_wrapped_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 31.956207275390625s cumulative, 0.008129119873046875s individual

.
current test PASSED/SKIPPED -- test_output_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 31.963507652282715s cumulative, 0.007300376892089844s individual

.
current test PASSED/SKIPPED -- test_resource_with_uri_fields in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 31.972477197647095s cumulative, 0.008969545364379883s individual

.
current test PASSED/SKIPPED -- test_wrapped_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 31.98283863067627s cumulative, 0.010361433029174805s individual

.
current test PASSED/SKIPPED -- test_after_hooks_on_suffixed_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 31.99121403694153s cumulative, 0.008375406265258789s individual

.
current test PASSED/SKIPPED -- test_wrapped_resource_with_hooks_aware_of_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 31.998833179473877s cumulative, 0.007619142532348633s individual

.
current test PASSED/SKIPPED -- test_resource_with_uri_fields_async in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 32.005775928497314s cumulative, 0.0069427490234375s individual

.
current test PASSED/SKIPPED -- test_after_hooks_on_suffixed_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 32.01326584815979s cumulative, 0.007489919662475586s individual

.
current test PASSED/SKIPPED -- test_hook_as_callable_class in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 32.01847815513611s cumulative, 0.005212306976318359s individual

.
current test PASSED/SKIPPED -- test_resource_with_uri_fields in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 32.02460265159607s cumulative, 0.0061244964599609375s individual


tests/asgi/test_ws.py s
tests/asgi/test_scheduled_callbacks.py .
current test PASSED/SKIPPED -- test_callback in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scheduled_callbacks.py: 32.03112983703613s cumulative, 0.0065271854400634766s individual

.
current test PASSED/SKIPPED -- test_callback in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scheduled_callbacks.py: 32.03921389579773s cumulative, 0.00808405876159668s individual

.
current test PASSED/SKIPPED -- test_callback in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scheduled_callbacks.py: 32.04642462730408s cumulative, 0.007210731506347656s individual

.
current test PASSED/SKIPPED -- test_callback in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scheduled_callbacks.py: 32.05309987068176s cumulative, 0.006675243377685547s individual


tests/asgi/test_buffered_reader.py .
current test PASSED/SKIPPED -- test_irregular_large_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 34.22700834274292s cumulative, 2.1739084720611572s individual

.
current test PASSED/SKIPPED -- test_irregular_large_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 36.56400203704834s cumulative, 2.33699369430542s individual


tests/test_headers.py .
current test PASSED/SKIPPED -- test_vary_star in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.57145595550537s cumulative, 0.00745391845703125s individual

.
current test PASSED/SKIPPED -- test_append_link_with_title in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.58099603652954s cumulative, 0.009540081024169922s individual

.
current test PASSED/SKIPPED -- test_append_link_invalid_crossorigin_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.58548402786255s cumulative, 0.0044879913330078125s individual

.
current test PASSED/SKIPPED -- test_vary_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.590309381484985s cumulative, 0.0048253536224365234s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.59460163116455s cumulative, 0.00429224967956543s individual

.
current test PASSED/SKIPPED -- test_no_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.599982500076294s cumulative, 0.005380868911743164s individual

.
current test PASSED/SKIPPED -- test_request_multiple_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.60476517677307s cumulative, 0.004782676696777344s individual

.
current test PASSED/SKIPPED -- test_unicode_headers_contain_non_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.612854957580566s cumulative, 0.008089780807495117s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.61739945411682s cumulative, 0.004544496536254883s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.621848344802856s cumulative, 0.004448890686035156s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.62641191482544s cumulative, 0.004563570022583008s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.63041687011719s cumulative, 0.004004955291748047s individual

.
current test PASSED/SKIPPED -- test_append_link_invalid_crossorigin_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.63324737548828s cumulative, 0.00283050537109375s individual

.
current test PASSED/SKIPPED -- test_content_disposition_inline_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.63862752914429s cumulative, 0.005380153656005859s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.64253234863281s cumulative, 0.0039048194885253906s individual

.
current test PASSED/SKIPPED -- test_override_default_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.64785575866699s cumulative, 0.0053234100341796875s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.65176177024841s cumulative, 0.0039060115814208984s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.65629720687866s cumulative, 0.0045354366302490234s individual

.
current test PASSED/SKIPPED -- test_content_length_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.661030769348145s cumulative, 0.004733562469482422s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.66555333137512s cumulative, 0.004522562026977539s individual

.
current test PASSED/SKIPPED -- test_declared_content_length_overridden_by_no_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.6696720123291s cumulative, 0.004118680953979492s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.674068450927734s cumulative, 0.0043964385986328125s individual

.
current test PASSED/SKIPPED -- test_append_link_invalid_crossorigin_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.67692041397095s cumulative, 0.0028519630432128906s individual

.
current test PASSED/SKIPPED -- test_response_header_helpers_on_get in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.68192481994629s cumulative, 0.005004405975341797s individual

.
current test PASSED/SKIPPED -- test_append_link_with_anchor in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.686485290527344s cumulative, 0.0045604705810546875s individual

.
current test PASSED/SKIPPED -- test_content_header_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.68975639343262s cumulative, 0.0032711029052734375s individual

.
current test PASSED/SKIPPED -- test_required_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.694111824035645s cumulative, 0.004355430603027344s individual

.
current test PASSED/SKIPPED -- test_append_link_with_hreflang_multi in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.69831657409668s cumulative, 0.004204750061035156s individual

.
current test PASSED/SKIPPED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.70272898674011s cumulative, 0.004412412643432617s individual

.
current test PASSED/SKIPPED -- test_content_header_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.706557273864746s cumulative, 0.003828287124633789s individual

.
current test PASSED/SKIPPED -- test_unicode_headers_contain_only_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.7107355594635s cumulative, 0.004178285598754883s individual

.
current test PASSED/SKIPPED -- test_declared_content_length_overriden_by_data_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.71492123603821s cumulative, 0.004185676574707031s individual

.
current test PASSED/SKIPPED -- test_append_link_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.72099041938782s cumulative, 0.006069183349609375s individual

.
current test PASSED/SKIPPED -- test_unset_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.72567272186279s cumulative, 0.004682302474975586s individual

.
current test PASSED/SKIPPED -- test_content_type_no_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.730594873428345s cumulative, 0.004922151565551758s individual

.
current test PASSED/SKIPPED -- test_append_link_with_title_star in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.73473620414734s cumulative, 0.004141330718994141s individual

.
current test PASSED/SKIPPED -- test_content_disposition_inline_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.73971652984619s cumulative, 0.004980325698852539s individual

.
current test PASSED/SKIPPED -- test_unicode_location_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.74461054801941s cumulative, 0.0048940181732177734s individual

.
current test PASSED/SKIPPED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.749112367630005s cumulative, 0.004501819610595703s individual

.
current test PASSED/SKIPPED -- test_headers_with_custom_class_not_callable in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.75801062583923s cumulative, 0.008898258209228516s individual

.
current test PASSED/SKIPPED -- test_get_header_as_int in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.7626416683197s cumulative, 0.00463104248046875s individual

.
current test PASSED/SKIPPED -- test_append_link_multiple in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.767563581466675s cumulative, 0.004921913146972656s individual

.
current test PASSED/SKIPPED -- test_no_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.77479362487793s cumulative, 0.007230043411254883s individual

.
current test PASSED/SKIPPED -- test_no_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.783671140670776s cumulative, 0.00887751579284668s individual

.
current test PASSED/SKIPPED -- test_append_link_with_hreflang in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.79092454910278s cumulative, 0.007253408432006836s individual

.
current test PASSED/SKIPPED -- test_default_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.797359228134155s cumulative, 0.00643467903137207s individual

.
current test PASSED/SKIPPED -- test_set_headers_with_custom_class in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.80374240875244s cumulative, 0.006383180618286133s individual

.
current test PASSED/SKIPPED -- test_unicode_headers_contain_non_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.811216592788696s cumulative, 0.007474184036254883s individual

.
current test PASSED/SKIPPED -- test_response_append_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.82085728645325s cumulative, 0.009640693664550781s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.82620716094971s cumulative, 0.005349874496459961s individual

.
current test PASSED/SKIPPED -- test_response_set_and_get_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.8333215713501s cumulative, 0.007114410400390625s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.837454319000244s cumulative, 0.004132747650146484s individual

.
current test PASSED/SKIPPED -- test_append_link_with_link_extension in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.8420844078064s cumulative, 0.004630088806152344s individual

.
current test PASSED/SKIPPED -- test_expires_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.84704351425171s cumulative, 0.0049591064453125s individual

.
current test PASSED/SKIPPED -- test_append_link_invalid_crossorigin_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.85001230239868s cumulative, 0.0029687881469726562s individual

.
current test PASSED/SKIPPED -- test_override_default_media_type_missing_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.85483002662659s cumulative, 0.0048177242279052734s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.85860300064087s cumulative, 0.0037729740142822266s individual

.
current test PASSED/SKIPPED -- test_custom_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.86420655250549s cumulative, 0.0056035518646240234s individual

.
current test PASSED/SKIPPED -- test_request_latin1_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.87272548675537s cumulative, 0.00851893424987793s individual

.
current test PASSED/SKIPPED -- test_declared_content_length_overriden_by_body_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.87750005722046s cumulative, 0.004774570465087891s individual

.
current test PASSED/SKIPPED -- test_passthrough_request_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.88301730155945s cumulative, 0.005517244338989258s individual

.
current test PASSED/SKIPPED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.88771200180054s cumulative, 0.004694700241088867s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.89135408401489s cumulative, 0.0036420822143554688s individual

.
current test PASSED/SKIPPED -- test_append_link_with_type_hint in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.89613461494446s cumulative, 0.00478053092956543s individual

.
current test PASSED/SKIPPED -- test_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.90029454231262s cumulative, 0.0041599273681640625s individual

.
current test PASSED/SKIPPED -- test_append_link_invalid_crossorigin_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.90319466590881s cumulative, 0.0029001235961914062s individual

.
current test PASSED/SKIPPED -- test_unicode_headers_contain_non_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.907543420791626s cumulative, 0.0043487548828125s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.912206172943115s cumulative, 0.004662752151489258s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.91614627838135s cumulative, 0.003940105438232422s individual

.
current test PASSED/SKIPPED -- test_append_link_single in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.922640562057495s cumulative, 0.006494283676147461s individual

.
current test PASSED/SKIPPED -- test_headers_as_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.92793869972229s cumulative, 0.005298137664794922s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.93173170089722s cumulative, 0.003793001174926758s individual

.
current test PASSED/SKIPPED -- test_append_link_invalid_crossorigin_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.934542417526245s cumulative, 0.0028107166290283203s individual

.
current test PASSED/SKIPPED -- test_unset_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.93936896324158s cumulative, 0.004826545715332031s individual

.
current test PASSED/SKIPPED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.94540333747864s cumulative, 0.006034374237060547s individual

.
current test PASSED/SKIPPED -- test_vary_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.95024394989014s cumulative, 0.0048406124114990234s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.95431160926819s cumulative, 0.004067659378051758s individual

.
current test PASSED/SKIPPED -- test_content_disposition_inline_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.95878052711487s cumulative, 0.0044689178466796875s individual

.
current test PASSED/SKIPPED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.96347403526306s cumulative, 0.004693508148193359s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.96863317489624s cumulative, 0.005159139633178711s individual

.
current test PASSED/SKIPPED -- test_no_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.972845792770386s cumulative, 0.004212617874145508s individual

.
current test PASSED/SKIPPED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.97726607322693s cumulative, 0.004420280456542969s individual

.
current test PASSED/SKIPPED -- test_declared_content_length_on_head in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.98155093193054s cumulative, 0.004284858703613281s individual

.
current test PASSED/SKIPPED -- test_content_length_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.988555908203125s cumulative, 0.007004976272583008s individual

.
current test PASSED/SKIPPED -- test_default_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 37.02130889892578s cumulative, 0.03275299072265625s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 37.026989221572876s cumulative, 0.0056803226470947266s individual

.
current test PASSED/SKIPPED -- test_override_default_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 37.032973766326904s cumulative, 0.00598454475402832s individual


tests/asgi/test_request_body_asgi.py .
current test PASSED/SKIPPED -- test_bounded_stream_alias in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 37.035975217819214s cumulative, 0.0030014514923095703s individual

.
current test PASSED/SKIPPED -- test_content_length_smaller_than_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 37.04062867164612s cumulative, 0.004653453826904297s individual

.
current test PASSED/SKIPPED -- test_tiny_body_overflow in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 37.046154737472534s cumulative, 0.005526065826416016s individual

.
current test PASSED/SKIPPED -- test_tiny_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 37.051353931427s cumulative, 0.0051991939544677734s individual

.
current test PASSED/SKIPPED -- test_content_length_smaller_than_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 37.054598331451416s cumulative, 0.0032444000244140625s individual

.
current test PASSED/SKIPPED -- test_content_length_smaller_than_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 37.05793762207031s cumulative, 0.0033392906188964844s individual

.
current test PASSED/SKIPPED -- test_request_repr in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 37.06053924560547s cumulative, 0.00260162353515625s individual

.
current test PASSED/SKIPPED -- test_content_length_smaller_than_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 37.06561827659607s cumulative, 0.005079030990600586s individual

.
current test PASSED/SKIPPED -- test_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 37.07039713859558s cumulative, 0.004778861999511719s individual

.
current test PASSED/SKIPPED -- test_content_length_smaller_than_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 37.073527097702026s cumulative, 0.0031299591064453125s individual

.
current test PASSED/SKIPPED -- test_read_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 37.079222679138184s cumulative, 0.0056955814361572266s individual

.
current test PASSED/SKIPPED -- test_content_length_smaller_than_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 37.082783937454224s cumulative, 0.003561258316040039s individual


tests/asgi/test_asgi_servers.py INFO:     127.0.0.1:47870 - "GET / HTTP/1.1" 200 OK
INFO:     127.0.0.1:47872 - "GET /events HTTP/1.1" 200 OK

[Starting server process...]
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_sse in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 40.34176278114319s cumulative, 3.258978843688965s individual


tests/asgi/test_boundedstream_asgi.py .
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 49.85804748535156s cumulative, 9.516284704208374s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 59.606714487075806s cumulative, 9.748667001724243s individual


tests/asgi/test_asgi_helpers.py .
current test PASSED/SKIPPED -- test_intricate_app in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_helpers.py: 59.60967755317688s cumulative, 0.0029630661010742188s individual


tests/asgi/test_middleware_asgi.py .
current test PASSED/SKIPPED -- test_raise_on_incompatible in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_middleware_asgi.py: 59.61484408378601s cumulative, 0.005166530609130859s individual

.
current test PASSED/SKIPPED -- test_raise_on_incompatible in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_middleware_asgi.py: 59.618226051330566s cumulative, 0.003381967544555664s individual

.
current test PASSED/SKIPPED -- test_raise_on_incompatible in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_middleware_asgi.py: 59.62161350250244s cumulative, 0.003387451171875s individual

.
current test PASSED/SKIPPED -- test_raise_on_incompatible in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_middleware_asgi.py: 59.62546896934509s cumulative, 0.003855466842651367s individual


tests/test_buffered_reader.py .
current test PASSED/SKIPPED -- test_irregular_large_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 62.05871272087097s cumulative, 2.433243751525879s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 64.08194518089294s cumulative, 2.0232324600219727s individual


tests/asgi/test_asgi_servers.py INFO:     127.0.0.1:47832 - "GET / HTTP/1.1" 200 OK

[Starting server process...]
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_passing_path_params in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 65.06013083457947s cumulative, 0.9781856536865234s individual

INFO:     127.0.0.1:39148 - "GET / HTTP/1.1" 200 OK

[Starting server process...]
.on_websocket:send_text
on_websocket:WebSocketDisconnected

[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_select_subprotocol_unknown in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 66.18770146369934s cumulative, 1.127570629119873s individual

INFO:     127.0.0.1:34116 - "GET / HTTP/1.1" 200 OK

[Starting server process...]
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 67.20948362350464s cumulative, 1.0217821598052979s individual

INFO:     127.0.0.1:57344 - "GET / HTTP/1.1" 200 OK

[Starting server process...]
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 68.13522171974182s cumulative, 0.9257380962371826s individual

INFO:     127.0.0.1:44604 - "GET / HTTP/1.1" 200 OK

[Starting server process...]
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 69.10026931762695s cumulative, 0.9650475978851318s individual

INFO:     127.0.0.1:36818 - "GET / HTTP/1.1" 200 OK

[Starting server process...]
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 70.11749982833862s cumulative, 1.01723051071167s individual

INFO:     127.0.0.1:48300 - "GET / HTTP/1.1" 200 OK

[Starting server process...]
.on_websocket:send_text
on_websocket:WebSocketDisconnected

[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_select_subprotocol_known in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 71.20988345146179s cumulative, 1.092383623123169s individual

INFO:     127.0.0.1:60192 - "GET / HTTP/1.1" 200 OK

[Starting server process...]
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 72.14249563217163s cumulative, 0.9326121807098389s individual

INFO:     127.0.0.1:53194 - "GET / HTTP/1.1" 200 OK

[Starting server process...]
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_send_before_accept in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 73.12248253822327s cumulative, 0.9799869060516357s individual

INFO:     127.0.0.1:42046 - "GET / HTTP/1.1" 200 OK

[Starting server process...]
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 73.88767457008362s cumulative, 0.7651920318603516s individual

INFO:     127.0.0.1:42932 - "GET / HTTP/1.1" 200 OK

[Starting server process...]
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 74.86233329772949s cumulative, 0.974658727645874s individual

INFO:     127.0.0.1:36356 - "GET / HTTP/1.1" 200 OK

[Starting server process...]
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 75.88419795036316s cumulative, 1.021864652633667s individual

INFO:     127.0.0.1:39674 - "GET / HTTP/1.1" 200 OK

[Starting server process...]
.on_websocket:send_text
on_websocket:WebSocketDisconnected

[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_select_subprotocol_known in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 76.95615291595459s cumulative, 1.0719549655914307s individual

INFO:     127.0.0.1:34026 - "GET / HTTP/1.1" 200 OK

[Starting server process...]
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_missing_responder in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 77.92938804626465s cumulative, 0.9732351303100586s individual

INFO:     127.0.0.1:53526 - "GET / HTTP/1.1" 200 OK

[Starting server process...]
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_recv_before_accept in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 78.95445609092712s cumulative, 1.0250680446624756s individual

INFO:     127.0.0.1:36202 - "GET / HTTP/1.1" 200 OK

[Starting server process...]
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_post_invalid_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 79.93971824645996s cumulative, 0.9852621555328369s individual

INFO:     127.0.0.1:50250 - "GET / HTTP/1.1" 200 OK
INFO:     127.0.0.1:42744 - "HEAD / HTTP/1.1" 405 Method Not Allowed

[Starting server process...]
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_head_405 in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 80.91953420639038s cumulative, 0.9798159599304199s individual

INFO:     127.0.0.1:52418 - "GET / HTTP/1.1" 200 OK
INFO:     127.0.0.1:52420 - "POST /bucket HTTP/1.1" 200 OK

[Starting server process...]
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_post_read_bounded_stream_no_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 81.88370203971863s cumulative, 0.9641678333282471s individual

INFO:     127.0.0.1:54792 - "GET / HTTP/1.1" 200 OK
INFO:     127.0.0.1:54808 - "GET / HTTP/1.1" 200 OK

[Starting server process...]
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 82.82087779045105s cumulative, 0.9371757507324219s individual

INFO:     127.0.0.1:51014 - "GET / HTTP/1.1" 200 OK
INFO:     127.0.0.1:51030 - "POST /bucket HTTP/1.1" 200 OK

[Starting server process...]
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_post_read_bounded_stream in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 83.8355770111084s cumulative, 1.0146992206573486s individual


tests/asgi/test_lifespan_handlers.py .
current test PASSED/SKIPPED -- test_multiple_handlers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_lifespan_handlers.py: 83.84747910499573s cumulative, 0.011902093887329102s individual

.
current test PASSED/SKIPPED -- test_startup_only in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_lifespan_handlers.py: 83.85467171669006s cumulative, 0.0071926116943359375s individual

.
current test PASSED/SKIPPED -- test_at_least_one_event_method_required in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_lifespan_handlers.py: 83.85772705078125s cumulative, 0.0030553340911865234s individual

.
current test PASSED/SKIPPED -- test_shutdown_raises in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_lifespan_handlers.py: 83.8625373840332s cumulative, 0.004810333251953125s individual

.
current test PASSED/SKIPPED -- test_asgi_conductor_raised_error_skips_shutdown in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_lifespan_handlers.py: 83.86682200431824s cumulative, 0.00428462028503418s individual

.
current test PASSED/SKIPPED -- test_startup_raises in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_lifespan_handlers.py: 83.87032318115234s cumulative, 0.0035011768341064453s individual

.
current test PASSED/SKIPPED -- test_shutdown_only in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_lifespan_handlers.py: 83.87439203262329s cumulative, 0.004068851470947266s individual


tests/test_inspect.py .
current test PASSED/SKIPPED -- test_middleware_tree in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 83.8944342136383s cumulative, 0.02004218101501465s individual

.
current test PASSED/SKIPPED -- test_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 83.89862513542175s cumulative, 0.004190921783447266s individual

.
current test PASSED/SKIPPED -- test_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 83.9039363861084s cumulative, 0.005311250686645508s individual

.
current test PASSED/SKIPPED -- test_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 83.91954064369202s cumulative, 0.015604257583618164s individual

.
current test PASSED/SKIPPED -- test_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 83.94584536552429s cumulative, 0.02630472183227539s individual

.
current test PASSED/SKIPPED -- test_static_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 83.94960284233093s cumulative, 0.003757476806640625s individual

.
current test PASSED/SKIPPED -- test_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 83.96098756790161s cumulative, 0.011384725570678711s individual


tests/test_wsgi_servers.py 127.0.0.1 - - [31/Jan/2024:06:48:21 +0000] "GET /hello HTTP/1.1" 200 14 "-" "python-requests/2.31.0"
127.0.0.1 - - [31/Jan/2024:06:48:21 +0000] "GET /deprecated HTTP/1.1" 500 38 "-" "python-requests/2.31.0"
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:54035 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_get_deprecated in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 85.16389799118042s cumulative, 1.2029104232788086s individual

127.0.0.1 - - [31/Jan/2024:06:48:22 +0000] "GET /hello HTTP/1.1" 200 14 "-" "python-requests/2.31.0"
127.0.0.1 - - [31/Jan/2024:06:48:22 +0000] "GET /tests/test_wsgi_servers.py HTTP/1.1" 206 8544 "-" "python-requests/2.31.0"
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:43907 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 86.31180047988892s cumulative, 1.147902488708496s individual

INFO:     127.0.0.1:52534 - "GET /hello HTTP/1.1" 200 OK
INFO:     127.0.0.1:52542 - "GET /tests/test_wsgi_servers.py HTTP/1.1" 206 Partial Content
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 38641 --interface wsgi _wsgi_test_app:app
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 87.06690740585327s cumulative, 0.7551069259643555s individual

INFO:     127.0.0.1:35490 - "GET /hello HTTP/1.1" 200 OK
INFO:     127.0.0.1:35504 - "GET /tests/test_wsgi_servers.py HTTP/1.1" 200 OK
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 48609 --interface wsgi _wsgi_test_app:app
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_static_file in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 88.07318997383118s cumulative, 1.0062825679779053s individual

INFO:     127.0.0.1:49906 - "GET /hello HTTP/1.1" 200 OK
2024-01-31 06:48:25 [FALCON] [ERROR] GET /deprecated => Traceback (most recent call last):
  File "falcon/app.py", line 373, in falcon.app.App.__call__
  File "/home/kaiyaok2/PythonProjects/falcon/tests/_wsgi_test_app.py", line 45, in on_get_deprecated
    resp.body = 'Hello, World!\n'
  File "falcon/response.py", line 220, in falcon.response.Response.body
falcon.util.deprecation.AttributeRemovedError: The body attribute is no longer supported. Please use the text attribute instead.

INFO:     127.0.0.1:49916 - "GET /deprecated HTTP/1.1" 500 Internal Server Error
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 35447 --interface wsgi _wsgi_test_app:app
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_get_deprecated in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 88.98355984687805s cumulative, 0.910369873046875s individual

127.0.0.1 - - [31/Jan/2024:06:48:26 +0000] "GET /hello HTTP/1.1" 200 14 "-" "python-requests/2.31.0"
127.0.0.1 - - [31/Jan/2024:06:48:26 +0000] "GET /hello HTTP/1.1" 200 14 "-" "python-requests/2.31.0"
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:57179 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 90.2236852645874s cumulative, 1.2401254177093506s individual

127.0.0.1 - - [31/Jan/2024:06:48:27 +0000] "GET /hello HTTP/1.1" 200 14 "-" "python-requests/2.31.0"
127.0.0.1 - - [31/Jan/2024:06:48:27 +0000] "GET /tests/test_wsgi_servers.py HTTP/1.1" 200 0 "-" "python-requests/2.31.0"
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:33473 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_static_file in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 91.31477546691895s cumulative, 1.091090202331543s individual

INFO:     127.0.0.1:57286 - "GET /hello HTTP/1.1" 200 OK
INFO:     127.0.0.1:57300 - "GET /hello HTTP/1.1" 200 OK
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 46503 --interface wsgi _wsgi_test_app:app
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 92.0683946609497s cumulative, 0.7536191940307617s individual

127.0.0.1 - - [31/Jan/2024:06:48:29 +0000] "GET /hello HTTP/1.1" 200 14 "-" "python-requests/2.31.0"
127.0.0.1 - - [31/Jan/2024:06:48:29 +0000] "GET /tests/test_wsgi_servers.py HTTP/1.1" 206 47 "-" "python-requests/2.31.0"
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:48313 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 93.18689894676208s cumulative, 1.118504285812378s individual

127.0.0.1 - - [31/Jan/2024:06:48:30 +0000] "GET /hello HTTP/1.1" 200 14 "-" "python-requests/2.31.0"
127.0.0.1 - - [31/Jan/2024:06:48:30 +0000] "GET /tests/test_wsgi_servers.py HTTP/1.1" 206 7 "-" "python-requests/2.31.0"
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:48615 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 94.27361607551575s cumulative, 1.086717128753662s individual

127.0.0.1 - - [31/Jan/2024:06:48:31 +0000] "GET /hello HTTP/1.1" 200 14 "-" "python-requests/2.31.0"
127.0.0.1 - - [31/Jan/2024:06:48:31 +0000] "GET /tests/test_wsgi_servers.py HTTP/1.1" 206 5 "-" "python-requests/2.31.0"
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:37373 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 95.31518626213074s cumulative, 1.0415701866149902s individual

INFO:     127.0.0.1:41080 - "GET /hello HTTP/1.1" 200 OK
INFO:     127.0.0.1:41084 - "GET /tests/test_wsgi_servers.py HTTP/1.1" 206 Partial Content
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 52157 --interface wsgi _wsgi_test_app:app
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 96.40237736701965s cumulative, 1.087191104888916s individual

INFO:     127.0.0.1:43208 - "GET /hello HTTP/1.1" 200 OK
INFO:     127.0.0.1:43224 - "GET /tests/test_wsgi_servers.py HTTP/1.1" 206 Partial Content
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 36225 --interface wsgi _wsgi_test_app:app
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 97.37464785575867s cumulative, 0.9722704887390137s individual

INFO:     127.0.0.1:50880 - "GET /hello HTTP/1.1" 200 OK
INFO:     127.0.0.1:50886 - "GET /tests/test_wsgi_servers.py HTTP/1.1" 206 Partial Content
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 50483 --interface wsgi _wsgi_test_app:app
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 98.37664031982422s cumulative, 1.0019924640655518s individual


tests/asgi/test_boundedstream_asgi.py s
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 98.38052320480347s cumulative, 0.003882884979248047s individual

s
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 98.38359665870667s cumulative, 0.003073453903198242s individual

s
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 98.38830327987671s cumulative, 0.004706621170043945s individual

s
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 98.39139866828918s cumulative, 0.003095388412475586s individual

s
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 98.39437818527222s cumulative, 0.0029795169830322266s individual

s
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 98.39739847183228s cumulative, 0.0030202865600585938s individual

s
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 98.40138125419617s cumulative, 0.0039827823638916016s individual


tests/asgi/test_response_media_asgi.py .
current test PASSED/SKIPPED -- test_non_ascii_json_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 98.4140157699585s cumulative, 0.012634515762329102s individual

.
current test PASSED/SKIPPED -- test_media_rendered_cached in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 98.42263531684875s cumulative, 0.008619546890258789s individual

.
current test PASSED/SKIPPED -- test_media in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 98.42729949951172s cumulative, 0.004664182662963867s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 98.43217635154724s cumulative, 0.004876852035522461s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 98.43660688400269s cumulative, 0.004430532455444336s individual

.
current test PASSED/SKIPPED -- test_data_masquerading_as_text in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 98.44146537780762s cumulative, 0.004858493804931641s individual

.
current test PASSED/SKIPPED -- test_non_ascii_json_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 98.44665431976318s cumulative, 0.005188941955566406s individual

.
current test PASSED/SKIPPED -- test_unknown_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 98.45191192626953s cumulative, 0.005257606506347656s individual

.
current test PASSED/SKIPPED -- test_mimeparse_edgecases in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 98.45900535583496s cumulative, 0.0070934295654296875s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 98.46401786804199s cumulative, 0.00501251220703125s individual

.
current test PASSED/SKIPPED -- test_non_ascii_json_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 98.4686176776886s cumulative, 0.004599809646606445s individual

.
current test PASSED/SKIPPED -- test_custom_render_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 98.47338724136353s cumulative, 0.004769563674926758s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 98.47820591926575s cumulative, 0.00481867790222168s individual

.
current test PASSED/SKIPPED -- test_data in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 98.482492685318s cumulative, 0.004286766052246094s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 98.48696303367615s cumulative, 0.004470348358154297s individual

.
current test PASSED/SKIPPED -- test_non_ascii_json_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 98.49169278144836s cumulative, 0.004729747772216797s individual

.
current test PASSED/SKIPPED -- test_default_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 98.49571394920349s cumulative, 0.004021167755126953s individual

.
current test PASSED/SKIPPED -- test_non_ascii_json_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 98.50009059906006s cumulative, 0.004376649856567383s individual

.
current test PASSED/SKIPPED -- test_mimeparse_edgecases in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 98.5051019191742s cumulative, 0.005011320114135742s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 98.51012396812439s cumulative, 0.0050220489501953125s individual

.
current test PASSED/SKIPPED -- test_text in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 98.51440048217773s cumulative, 0.0042765140533447266s individual

.
current test PASSED/SKIPPED -- test_custom_media_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 98.5219669342041s cumulative, 0.0075664520263671875s individual


tests/test_inspect.py .
current test PASSED/SKIPPED -- test_process in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 98.52467775344849s cumulative, 0.0027108192443847656s individual

.
current test PASSED/SKIPPED -- test_inspect_visitor in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 98.52772998809814s cumulative, 0.003052234649658203s individual

.
current test PASSED/SKIPPED -- test_middleware_method_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 98.54439449310303s cumulative, 0.016664505004882812s individual

.
current test PASSED/SKIPPED -- test_middleware_tree_item in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 98.56210851669312s cumulative, 0.01771402359008789s individual

.
current test PASSED/SKIPPED -- test_middleware_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 98.57875752449036s cumulative, 0.01664900779724121s individual

.
current test PASSED/SKIPPED -- test_middleware_tree in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 98.59453177452087s cumulative, 0.015774250030517578s individual

.
current test PASSED/SKIPPED -- test_app_no_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 98.61891436576843s cumulative, 0.024382591247558594s individual

.
current test PASSED/SKIPPED -- test_middleware_tree_item in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 98.63379573822021s cumulative, 0.014881372451782227s individual

.
current test PASSED/SKIPPED -- test_route_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 98.64598321914673s cumulative, 0.012187480926513672s individual

.
current test PASSED/SKIPPED -- test_middleware_class_no_methods in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 98.66055250167847s cumulative, 0.014569282531738281s individual

.
current test PASSED/SKIPPED -- test_middleware_tree_item in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 98.67553043365479s cumulative, 0.01497793197631836s individual

.
current test PASSED/SKIPPED -- test_app_no_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 98.69923257827759s cumulative, 0.023702144622802734s individual

.
current test PASSED/SKIPPED -- test_middleware_tree in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 98.71410918235779s cumulative, 0.014876604080200195s individual

.
current test PASSED/SKIPPED -- test_app_no_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 98.73974895477295s cumulative, 0.025639772415161133s individual

.
current test PASSED/SKIPPED -- test_middleware_class_no_methods in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 98.75425314903259s cumulative, 0.014504194259643555s individual

.
current test PASSED/SKIPPED -- test_error_handler_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 98.75837540626526s cumulative, 0.004122257232666016s individual

.
current test PASSED/SKIPPED -- test_app_no_errors in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 98.7820680141449s cumulative, 0.023692607879638672s individual

.
current test PASSED/SKIPPED -- test_sink_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 98.78734612464905s cumulative, 0.005278110504150391s individual

.
current test PASSED/SKIPPED -- test_middleware_class_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 98.80480337142944s cumulative, 0.017457246780395508s individual

.
current test PASSED/SKIPPED -- test_app_no_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 98.82814025878906s cumulative, 0.02333688735961914s individual

.
current test PASSED/SKIPPED -- test_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 98.83334279060364s cumulative, 0.005202531814575195s individual

.
current test PASSED/SKIPPED -- test_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 98.8375027179718s cumulative, 0.0041599273681640625s individual

.
current test PASSED/SKIPPED -- test_app_static_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 98.86091232299805s cumulative, 0.023409605026245117s individual

.
current test PASSED/SKIPPED -- test_app_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 98.88388252258301s cumulative, 0.022970199584960938s individual

.
current test PASSED/SKIPPED -- test_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 98.89500379562378s cumulative, 0.011121273040771484s individual

.
current test PASSED/SKIPPED -- test_middleware_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 98.91166043281555s cumulative, 0.01665663719177246s individual

.
current test PASSED/SKIPPED -- test_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 98.93564462661743s cumulative, 0.023984193801879883s individual

.
current test PASSED/SKIPPED -- test_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 98.93997526168823s cumulative, 0.004330635070800781s individual

.
current test PASSED/SKIPPED -- test_route_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 98.95301628112793s cumulative, 0.013041019439697266s individual

.
current test PASSED/SKIPPED -- test_middleware_tree_response_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 98.96811151504517s cumulative, 0.015095233917236328s individual

.
current test PASSED/SKIPPED -- test_middleware_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 98.98278546333313s cumulative, 0.014673948287963867s individual

.
current test PASSED/SKIPPED -- test_app_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.00742769241333s cumulative, 0.024642229080200195s individual

.
current test PASSED/SKIPPED -- test_middleware_tree_no_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.02295875549316s cumulative, 0.015531063079833984s individual

.
current test PASSED/SKIPPED -- test_route_method_info_suffix in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.02543687820435s cumulative, 0.0024781227111816406s individual

.
current test PASSED/SKIPPED -- test_string_visitor_class in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.02800393104553s cumulative, 0.0025670528411865234s individual

.
current test PASSED/SKIPPED -- test_middleware_tree_no_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.04306817054749s cumulative, 0.015064239501953125s individual

.
current test PASSED/SKIPPED -- test_route_method_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.05625605583191s cumulative, 0.013187885284423828s individual

.
current test PASSED/SKIPPED -- test_app_no_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.08343243598938s cumulative, 0.027176380157470703s individual

.
current test PASSED/SKIPPED -- test_route_method_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.09574675559998s cumulative, 0.012314319610595703s individual

.
current test PASSED/SKIPPED -- test_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.12471103668213s cumulative, 0.02896428108215332s individual

.
current test PASSED/SKIPPED -- test_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.14120888710022s cumulative, 0.01649785041809082s individual

.
current test PASSED/SKIPPED -- test_app_no_errors in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.16696619987488s cumulative, 0.025757312774658203s individual

.
current test PASSED/SKIPPED -- test_middleware_tree in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.18337821960449s cumulative, 0.016412019729614258s individual

.
current test PASSED/SKIPPED -- test_middleware_tree_item in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.19872093200684s cumulative, 0.01534271240234375s individual

.
current test PASSED/SKIPPED -- test_middleware_class in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.21394538879395s cumulative, 0.015224456787109375s individual

.
current test PASSED/SKIPPED -- test_route_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.22528290748596s cumulative, 0.011337518692016602s individual

.
current test PASSED/SKIPPED -- test_middleware_tree_no_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.24103426933289s cumulative, 0.015751361846923828s individual

.
current test PASSED/SKIPPED -- test_middleware_class in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.25687289237976s cumulative, 0.015838623046875s individual

.
current test PASSED/SKIPPED -- test_app_no_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.28296160697937s cumulative, 0.026088714599609375s individual

.
current test PASSED/SKIPPED -- test_app_no_errors in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.30881929397583s cumulative, 0.02585768699645996s individual

.
current test PASSED/SKIPPED -- test_info_class_repr_to_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.33423161506653s cumulative, 0.025412321090698242s individual

.
current test PASSED/SKIPPED -- test_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.34086227416992s cumulative, 0.006630659103393555s individual

.
current test PASSED/SKIPPED -- test_middleware_method_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.35720419883728s cumulative, 0.0163419246673584s individual

.
current test PASSED/SKIPPED -- test_static_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.36207699775696s cumulative, 0.004872798919677734s individual

.
current test PASSED/SKIPPED -- test_middleware_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.37884569168091s cumulative, 0.016768693923950195s individual

.
current test PASSED/SKIPPED -- test_sink_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.38419675827026s cumulative, 0.005351066589355469s individual

.
current test PASSED/SKIPPED -- test_error_handler_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.38937330245972s cumulative, 0.005176544189453125s individual

.
current test PASSED/SKIPPED -- test_middleware_tree in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.404865026474s cumulative, 0.015491724014282227s individual

.
current test PASSED/SKIPPED -- test_app_static_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.43199896812439s cumulative, 0.027133941650390625s individual

.
current test PASSED/SKIPPED -- test_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.44806027412415s cumulative, 0.01606130599975586s individual

.
current test PASSED/SKIPPED -- test_static_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.45201468467712s cumulative, 0.003954410552978516s individual

.
current test PASSED/SKIPPED -- test_route_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.46391177177429s cumulative, 0.011897087097167969s individual

.
current test PASSED/SKIPPED -- test_middleware_tree_response_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.4787528514862s cumulative, 0.014841079711914062s individual

.
current test PASSED/SKIPPED -- test_app_no_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.50202703475952s cumulative, 0.02327418327331543s individual

.
current test PASSED/SKIPPED -- test_static_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.50599217414856s cumulative, 0.003965139389038086s individual

.
current test PASSED/SKIPPED -- test_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.51755404472351s cumulative, 0.011561870574951172s individual

.
current test PASSED/SKIPPED -- test_app_no_errors in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.54226994514465s cumulative, 0.024715900421142578s individual

.
current test PASSED/SKIPPED -- test_route_no_methods in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.55432748794556s cumulative, 0.01205754280090332s individual

.
current test PASSED/SKIPPED -- test_app_static_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.57769441604614s cumulative, 0.023366928100585938s individual

.
current test PASSED/SKIPPED -- test_static_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.58163261413574s cumulative, 0.003938198089599609s individual

.
current test PASSED/SKIPPED -- test_middleware_tree_no_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.59759283065796s cumulative, 0.015960216522216797s individual

.
current test PASSED/SKIPPED -- test_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.6269223690033s cumulative, 0.029329538345336914s individual

.
current test PASSED/SKIPPED -- test_app_no_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.65296125411987s cumulative, 0.02603888511657715s individual

.
current test PASSED/SKIPPED -- test_route_no_methods in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.66432476043701s cumulative, 0.011363506317138672s individual

.
current test PASSED/SKIPPED -- test_middleware_class_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.67895913124084s cumulative, 0.014634370803833008s individual

.
current test PASSED/SKIPPED -- test_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.70247745513916s cumulative, 0.02351832389831543s individual

.
current test PASSED/SKIPPED -- test_app_static_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.72985100746155s cumulative, 0.027373552322387695s individual

.
current test PASSED/SKIPPED -- test_app_no_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.75340580940247s cumulative, 0.02355480194091797s individual

.
current test PASSED/SKIPPED -- test_app_no_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.7777898311615s cumulative, 0.024384021759033203s individual

.
current test PASSED/SKIPPED -- test_is_internal in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.78096604347229s cumulative, 0.0031762123107910156s individual

.
current test PASSED/SKIPPED -- test_app_no_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.80752038955688s cumulative, 0.026554346084594727s individual

.
current test PASSED/SKIPPED -- test_app_no_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.83158373832703s cumulative, 0.0240633487701416s individual

.
current test PASSED/SKIPPED -- test_routes_empty_paths in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.83755445480347s cumulative, 0.00597071647644043s individual

.
current test PASSED/SKIPPED -- test_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.85210680961609s cumulative, 0.01455235481262207s individual

.
current test PASSED/SKIPPED -- test_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.8640832901001s cumulative, 0.011976480484008789s individual

.
current test PASSED/SKIPPED -- test_middleware_tree in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.87889981269836s cumulative, 0.014816522598266602s individual

.
current test PASSED/SKIPPED -- test_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.90258479118347s cumulative, 0.023684978485107422s individual

.
current test PASSED/SKIPPED -- test_dependent_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.90594792366028s cumulative, 0.0033631324768066406s individual

.
current test PASSED/SKIPPED -- test_empty_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.90941977500916s cumulative, 0.003471851348876953s individual

.
current test PASSED/SKIPPED -- test_empty_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.91323494911194s cumulative, 0.003815174102783203s individual

.
current test PASSED/SKIPPED -- test_static_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.91718578338623s cumulative, 0.003950834274291992s individual

.
current test PASSED/SKIPPED -- test_dependent_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.92087626457214s cumulative, 0.003690481185913086s individual

.
current test PASSED/SKIPPED -- test_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.92635035514832s cumulative, 0.005474090576171875s individual

.
current test PASSED/SKIPPED -- test_routes_empty_paths in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.93462610244751s cumulative, 0.008275747299194336s individual

.
current test PASSED/SKIPPED -- test_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.93880367279053s cumulative, 0.004177570343017578s individual

.
current test PASSED/SKIPPED -- test_register_other_router in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.94305753707886s cumulative, 0.004253864288330078s individual

.
current test PASSED/SKIPPED -- test_compiled_partial in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.9507429599762s cumulative, 0.007685422897338867s individual

.
current test PASSED/SKIPPED -- test_compiled_no_method_map in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.95442032814026s cumulative, 0.0036773681640625s individual

.
current test PASSED/SKIPPED -- test_register_router_multiple_time in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.9577887058258s cumulative, 0.003368377685546875s individual

.
current test PASSED/SKIPPED -- test_register_router_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 99.9612090587616s cumulative, 0.0034203529357910156s individual


tests/test_request_body.py .
current test PASSED/SKIPPED -- test_tiny_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_body.py: 99.96636176109314s cumulative, 0.005152702331542969s individual

.
current test PASSED/SKIPPED -- test_bounded_stream_property_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_body.py: 99.96904969215393s cumulative, 0.0026879310607910156s individual

.
current test PASSED/SKIPPED -- test_read_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_body.py: 99.97610187530518s cumulative, 0.007052183151245117s individual

.
current test PASSED/SKIPPED -- test_tiny_body_overflow in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_body.py: 99.9845130443573s cumulative, 0.008411169052124023s individual

.
current test PASSED/SKIPPED -- test_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_body.py: 99.99516224861145s cumulative, 0.01064920425415039s individual

.
current test PASSED/SKIPPED -- test_request_repr in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_body.py: 99.9996407032013s cumulative, 0.00447845458984375s individual

.
current test PASSED/SKIPPED -- test_body_stream_wrapper in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_body.py: 100.00741481781006s cumulative, 0.0077741146087646484s individual


tests/asgi/test_cythonized_asgi.py .
current test PASSED/SKIPPED -- test_not_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 100.01155924797058s cumulative, 0.004144430160522461s individual

.
current test PASSED/SKIPPED -- test_not_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 100.0142149925232s cumulative, 0.0026557445526123047s individual

.
current test PASSED/SKIPPED -- test_is_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 100.01703929901123s cumulative, 0.0028243064880371094s individual

.
current test PASSED/SKIPPED -- test_is_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 100.0196602344513s cumulative, 0.0026209354400634766s individual

.
current test PASSED/SKIPPED -- test_is_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 100.02230954170227s cumulative, 0.0026493072509765625s individual

.
current test PASSED/SKIPPED -- test_is_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 100.02502584457397s cumulative, 0.0027163028717041016s individual

.
current test PASSED/SKIPPED -- test_scheduled_jobs_type_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 100.03114151954651s cumulative, 0.00611567497253418s individual

.
current test PASSED/SKIPPED -- test_not_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 100.03377342224121s cumulative, 0.0026319026947021484s individual

.
current test PASSED/SKIPPED -- test_is_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 100.03648066520691s cumulative, 0.002707242965698242s individual

.
current test PASSED/SKIPPED -- test_not_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 100.03946208953857s cumulative, 0.002981424331665039s individual

.
current test PASSED/SKIPPED -- test_not_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 100.04239988327026s cumulative, 0.002937793731689453s individual

.
current test PASSED/SKIPPED -- test_is_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 100.04558658599854s cumulative, 0.0031867027282714844s individual

.
current test PASSED/SKIPPED -- test_not_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 100.04830360412598s cumulative, 0.0027170181274414062s individual


tests/asgi/test_sse.py .
current test PASSED/SKIPPED -- test_multiple_events_early_disconnect in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_sse.py: 100.11798405647278s cumulative, 0.06968045234680176s individual


tests/test_uri_templates_legacy.py .
current test PASSED/SKIPPED -- test_one_field_with_prefixed_digits in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 100.12199473381042s cumulative, 0.004010677337646484s individual

.
current test PASSED/SKIPPED -- test_no_fields in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 100.12544679641724s cumulative, 0.0034520626068115234s individual

.
current test PASSED/SKIPPED -- test_two_fields in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 100.12851810455322s cumulative, 0.003071308135986328s individual

.
current test PASSED/SKIPPED -- test_string_type_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 100.13130164146423s cumulative, 0.002783536911010742s individual

.
current test PASSED/SKIPPED -- test_template_must_start_with_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 100.13396453857422s cumulative, 0.0026628971099853516s individual

.
current test PASSED/SKIPPED -- test_one_field_with_digits in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 100.13666725158691s cumulative, 0.0027027130126953125s individual

.
current test PASSED/SKIPPED -- test_three_fields in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 100.13957858085632s cumulative, 0.0029113292694091797s individual

.
current test PASSED/SKIPPED -- test_malformed_field in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 100.14251518249512s cumulative, 0.0029366016387939453s individual

.
current test PASSED/SKIPPED -- test_one_field in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 100.14629197120667s cumulative, 0.0037767887115478516s individual

.
current test PASSED/SKIPPED -- test_template_may_not_contain_double_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 100.14904379844666s cumulative, 0.0027518272399902344s individual

.
current test PASSED/SKIPPED -- test_template_may_not_contain_double_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 100.15177464485168s cumulative, 0.002730846405029297s individual

.
current test PASSED/SKIPPED -- test_no_fields in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 100.1549813747406s cumulative, 0.0032067298889160156s individual

.
current test PASSED/SKIPPED -- test_root in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 100.15757584571838s cumulative, 0.002594470977783203s individual

.
current test PASSED/SKIPPED -- test_template_may_not_contain_double_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 100.16026377677917s cumulative, 0.0026879310607910156s individual

.
current test PASSED/SKIPPED -- test_template_may_not_contain_double_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 100.1629569530487s cumulative, 0.00269317626953125s individual

.
current test PASSED/SKIPPED -- test_template_may_not_contain_double_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 100.16614580154419s cumulative, 0.0031888484954833984s individual

.
current test PASSED/SKIPPED -- test_two_fields in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 100.17013359069824s cumulative, 0.003987789154052734s individual

.
current test PASSED/SKIPPED -- test_no_fields in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 100.17314076423645s cumulative, 0.003007173538208008s individual

.
current test PASSED/SKIPPED -- test_template_must_start_with_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 100.1758484840393s cumulative, 0.0027077198028564453s individual

.
current test PASSED/SKIPPED -- test_deprecated_warning in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 100.17878484725952s cumulative, 0.0029363632202148438s individual

.
current test PASSED/SKIPPED -- test_string_type_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 100.18142890930176s cumulative, 0.002644062042236328s individual

.
current test PASSED/SKIPPED -- test_template_may_not_contain_double_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 100.184086561203s cumulative, 0.002657651901245117s individual


tests/test_static.py .
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 100.19423413276672s cumulative, 0.010147571563720703s individual


tests/asgi/test_sync.py .
current test PASSED/SKIPPED -- test_sync_helpers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_sync.py: 103.77003049850464s cumulative, 3.575796365737915s individual


tests/asgi/test_cythonized_asgi.py F
current test FAILED -- test_jsonchema_validator in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 103.85030674934387s cumulative, 0.0802762508392334s individual

F
current test FAILED -- test_hooks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 103.91798543930054s cumulative, 0.06767868995666504s individual


tests/asgi/test_asgi_servers.py INFO:     127.0.0.1:37084 - "GET / HTTP/1.1" 200 OK

[Starting server process...]
closed
.on_websocket:send_text
on_websocket:send_text
on_websocket:WebSocketDisconnected

[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_disconnecting_client_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 106.10361170768738s cumulative, 2.185626268386841s individual

INFO:     127.0.0.1:44234 - "GET / HTTP/1.1" 200 OK

[Starting server process...]
.on_websocket:send_text
on_websocket:send_text
on_websocket:send_text
on_websocket:send_text
on_websocket:send_text

[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 108.14677405357361s cumulative, 2.0431623458862305s individual

INFO:     127.0.0.1:45518 - "GET / HTTP/1.1" 200 OK

[Starting server process...]
.on_websocket:send_text
on_websocket:send_text
on_websocket:send_text
on_websocket:send_text
on_websocket:send_text

[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 110.13896608352661s cumulative, 1.992192029953003s individual

INFO:     127.0.0.1:46658 - "GET / HTTP/1.1" 200 OK

[Starting server process...]
.on_websocket:send_text
on_websocket:send_text
on_websocket:send_text
on_websocket:send_text
on_websocket:send_text

[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 112.07235908508301s cumulative, 1.9333930015563965s individual

INFO:     127.0.0.1:35234 - "GET / HTTP/1.1" 200 OK

[Starting server process...]
.on_websocket:send_text
on_websocket:send_text
on_websocket:send_text
on_websocket:send_text
on_websocket:send_text

[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 114.13598918914795s cumulative, 2.0636301040649414s individual

INFO:     127.0.0.1:48668 - "GET / HTTP/1.1" 200 OK

[Starting server process...]
.on_websocket:send_text
on_websocket:send_text
on_websocket:send_text
on_websocket:send_text
on_websocket:send_text

[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_invalid_close_code in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 116.11702394485474s cumulative, 1.981034755706787s individual

INFO:     127.0.0.1:42500 - "GET / HTTP/1.1" 200 OK
INFO:     127.0.0.1:42512 - "POST / HTTP/1.1" 200 OK
INFO:     127.0.0.1:42520 - "POST / HTTP/1.1" 200 OK

[Starting server process...]
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_post_multiple in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 118.09105086326599s cumulative, 1.9740269184112549s individual


tests/test_alias.py .
current test PASSED/SKIPPED -- test_alias_equals_to_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_alias.py: 118.09883785247803s cumulative, 0.007786989212036133s individual

.
current test PASSED/SKIPPED -- test_cookies in /home/kaiyaok2/PythonProjects/falcon/tests/test_alias.py: 118.1059741973877s cumulative, 0.007136344909667969s individual


tests/asgi/test_buffered_reader.py .
current test PASSED/SKIPPED -- test_varying_read_size in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 120.33514618873596s cumulative, 2.2291719913482666s individual


tests/test_sink_and_static.py .
current test PASSED/SKIPPED -- test_sink_after_static_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_sink_and_static.py: 120.3496904373169s cumulative, 0.014544248580932617s individual

.
current test PASSED/SKIPPED -- test_sink_before_static_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_sink_and_static.py: 120.35837125778198s cumulative, 0.00868082046508789s individual

.
current test PASSED/SKIPPED -- test_sink_before_static_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_sink_and_static.py: 120.3666467666626s cumulative, 0.008275508880615234s individual

.
current test PASSED/SKIPPED -- test_sink_after_static_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_sink_and_static.py: 120.37241172790527s cumulative, 0.005764961242675781s individual


tests/test_media_multipart.py .
current test PASSED/SKIPPED -- test_random_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 120.6157853603363s cumulative, 0.24337363243103027s individual

.
current test PASSED/SKIPPED -- test_random_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 120.8865180015564s cumulative, 0.2707326412200928s individual


tests/test_response_body.py .
current test PASSED/SKIPPED -- test_append_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 120.89081978797913s cumulative, 0.004301786422729492s individual

.
current test PASSED/SKIPPED -- test_content_length_not_set_when_streaming_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 120.89753246307373s cumulative, 0.006712675094604492s individual

.
current test PASSED/SKIPPED -- test_response_repr in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 120.90058779716492s cumulative, 0.0030553340911865234s individual

.
current test PASSED/SKIPPED -- test_response_repr in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 120.90354204177856s cumulative, 0.002954244613647461s individual

.
current test PASSED/SKIPPED -- test_content_length_not_set_when_streaming_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 120.910409450531s cumulative, 0.006867408752441406s individual

.
current test PASSED/SKIPPED -- test_response_body_rendition_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 120.91515588760376s cumulative, 0.004746437072753906s individual

.
current test PASSED/SKIPPED -- test_unsupported_response_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 120.91924715042114s cumulative, 0.0040912628173828125s individual

.
current test PASSED/SKIPPED -- test_content_length_not_set_when_streaming_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 120.92342138290405s cumulative, 0.004174232482910156s individual

.
current test PASSED/SKIPPED -- test_append_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 120.92651343345642s cumulative, 0.003092050552368164s individual

.
current test PASSED/SKIPPED -- test_content_length_not_set_when_streaming_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 120.93107581138611s cumulative, 0.0045623779296875s individual

.
current test PASSED/SKIPPED -- test_content_length_set_on_head_with_no_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 120.93545651435852s cumulative, 0.004380702972412109s individual


tests/test_wsgiref_inputwrapper_with_size.py .
current test PASSED/SKIPPED -- test_resources_can_read_request_stream_during_tests in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgiref_inputwrapper_with_size.py: 120.93980383872986s cumulative, 0.004347324371337891s individual


tests/test_response_body.py F
current test FAILED -- test_content_length_set_on_head_with_no_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 121.02374696731567s cumulative, 0.08394312858581543s individual

F
current test FAILED -- test_unsupported_response_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 121.09011578559875s cumulative, 0.06636881828308105s individual

F
current test FAILED -- test_response_body_rendition_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 121.15882277488708s cumulative, 0.06870698928833008s individual


tests/test_deps.py .
current test PASSED/SKIPPED -- test_deps_mimeparse_correct_package in /home/kaiyaok2/PythonProjects/falcon/tests/test_deps.py: 121.1613552570343s cumulative, 0.002532482147216797s individual


tests/test_response_media.py .
current test PASSED/SKIPPED -- test_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 121.16688370704651s cumulative, 0.005528450012207031s individual

.
current test PASSED/SKIPPED -- test_use_cached_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 121.17095446586609s cumulative, 0.004070758819580078s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 121.17573595046997s cumulative, 0.004781484603881836s individual

.
current test PASSED/SKIPPED -- test_mimeparse_edgecases in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 121.17989778518677s cumulative, 0.004161834716796875s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 121.1844117641449s cumulative, 0.004513978958129883s individual

.
current test PASSED/SKIPPED -- test_data in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 121.18828988075256s cumulative, 0.0038781166076660156s individual

.
current test PASSED/SKIPPED -- test_non_ascii_json_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 121.19234323501587s cumulative, 0.004053354263305664s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 121.19640707969666s cumulative, 0.004063844680786133s individual

.
current test PASSED/SKIPPED -- test_non_ascii_json_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 121.20040154457092s cumulative, 0.003994464874267578s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 121.20481204986572s cumulative, 0.004410505294799805s individual

.
current test PASSED/SKIPPED -- test_non_ascii_json_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 121.20868515968323s cumulative, 0.003873109817504883s individual

.
current test PASSED/SKIPPED -- test_non_ascii_json_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 121.21256566047668s cumulative, 0.0038805007934570312s individual

.
current test PASSED/SKIPPED -- test_default_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 121.21650075912476s cumulative, 0.003935098648071289s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 121.2205114364624s cumulative, 0.004010677337646484s individual

.
current test PASSED/SKIPPED -- test_non_ascii_json_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 121.22555255889893s cumulative, 0.0050411224365234375s individual

.
current test PASSED/SKIPPED -- test_unknown_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 121.22967505455017s cumulative, 0.004122495651245117s individual

.
current test PASSED/SKIPPED -- test_text in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 121.23358297348022s cumulative, 0.003907918930053711s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 121.23781895637512s cumulative, 0.004235982894897461s individual

.
current test PASSED/SKIPPED -- test_media_rendered_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 121.24208498001099s cumulative, 0.004266023635864258s individual


tests/asgi/test_scheduled_callbacks.py .
current test PASSED/SKIPPED -- test_multiple in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scheduled_callbacks.py: 121.75466251373291s cumulative, 0.5125775337219238s individual


tests/test_media_handlers.py .
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 121.76070928573608s cumulative, 0.006046772003173828s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 121.76411437988281s cumulative, 0.0034050941467285156s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 121.76995301246643s cumulative, 0.005838632583618164s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 121.77452492713928s cumulative, 0.0045719146728515625s individual

.
current test PASSED/SKIPPED -- test_async_methods_not_overridden in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 121.77883410453796s cumulative, 0.004309177398681641s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 121.78335189819336s cumulative, 0.004517793655395508s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 121.78647589683533s cumulative, 0.0031239986419677734s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 121.78951954841614s cumulative, 0.003043651580810547s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 121.79515981674194s cumulative, 0.005640268325805664s individual

.
current test PASSED/SKIPPED -- test_sync_methods_not_overridden in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 121.80425381660461s cumulative, 0.009093999862670898s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 121.80750393867493s cumulative, 0.0032501220703125s individual

.
current test PASSED/SKIPPED -- test_json_err_no_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 121.81422114372253s cumulative, 0.006717205047607422s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 121.81849503517151s cumulative, 0.004273891448974609s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 121.83120512962341s cumulative, 0.012710094451904297s individual

.
current test PASSED/SKIPPED -- test_deserialization_raises in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 121.8447003364563s cumulative, 0.013495206832885742s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 121.84892106056213s cumulative, 0.004220724105834961s individual

.
current test PASSED/SKIPPED -- test_deserialization_raises in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 121.8600103855133s cumulative, 0.011089324951171875s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 121.86356592178345s cumulative, 0.0035555362701416016s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 121.87462139129639s cumulative, 0.011055469512939453s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 121.8779923915863s cumulative, 0.003371000289916992s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 121.8854992389679s cumulative, 0.007506847381591797s individual

.
current test PASSED/SKIPPED -- test_json_err_no_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 121.89003705978394s cumulative, 0.004537820816040039s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 121.90005445480347s cumulative, 0.01001739501953125s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 121.90518712997437s cumulative, 0.0051326751708984375s individual

.
current test PASSED/SKIPPED -- test_deserialization_raises in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 121.91009044647217s cumulative, 0.004903316497802734s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 121.91591382026672s cumulative, 0.005823373794555664s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 121.92193675041199s cumulative, 0.006022930145263672s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 121.9250373840332s cumulative, 0.0031006336212158203s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 121.92812752723694s cumulative, 0.0030901432037353516s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 121.93129920959473s cumulative, 0.003171682357788086s individual

.
current test PASSED/SKIPPED -- test_sync_methods_not_overridden in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 121.93817067146301s cumulative, 0.006871461868286133s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 121.94107246398926s cumulative, 0.002901792526245117s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 121.95042610168457s cumulative, 0.0093536376953125s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 121.95516443252563s cumulative, 0.004738330841064453s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 121.9596893787384s cumulative, 0.004524946212768555s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 121.96430850028992s cumulative, 0.004619121551513672s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 121.96747827529907s cumulative, 0.0031697750091552734s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 121.9725387096405s cumulative, 0.005060434341430664s individual

.
current test PASSED/SKIPPED -- test_async_handler_returning_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 121.9814383983612s cumulative, 0.008899688720703125s individual

.
current test PASSED/SKIPPED -- test_deserialization_raises in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 121.9861307144165s cumulative, 0.0046923160552978516s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 121.98931503295898s cumulative, 0.0031843185424804688s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 121.99250030517578s cumulative, 0.003185272216796875s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 121.99985194206238s cumulative, 0.00735163688659668s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 122.00379180908203s cumulative, 0.00393986701965332s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 122.00743365287781s cumulative, 0.003641843795776367s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 122.01272296905518s cumulative, 0.005289316177368164s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 122.01788997650146s cumulative, 0.0051670074462890625s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 122.02090573310852s cumulative, 0.003015756607055664s individual

.
current test PASSED/SKIPPED -- test_deserialization_raises in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 122.02578377723694s cumulative, 0.004878044128417969s individual

.
current test PASSED/SKIPPED -- test_defaultError in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 122.02838921546936s cumulative, 0.002605438232421875s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 122.0325825214386s cumulative, 0.004193305969238281s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 122.03559994697571s cumulative, 0.003017425537109375s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 122.03861260414124s cumulative, 0.0030126571655273438s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 122.04318356513977s cumulative, 0.004570960998535156s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 122.04629707336426s cumulative, 0.0031135082244873047s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 122.04945516586304s cumulative, 0.003158092498779297s individual

.
current test PASSED/SKIPPED -- test_deserialization_raises in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 122.05407762527466s cumulative, 0.004622459411621094s individual

.
current test PASSED/SKIPPED -- test_deserialization_raises in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 122.05996227264404s cumulative, 0.005884647369384766s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 122.06342935562134s cumulative, 0.003467082977294922s individual

.
current test PASSED/SKIPPED -- test_deserialization_raises in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 122.06895208358765s cumulative, 0.005522727966308594s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 122.07217454910278s cumulative, 0.0032224655151367188s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 122.07777857780457s cumulative, 0.0056040287017822266s individual


tests/test_cython.py F
current test FAILED -- test_stream_has_private_read in /home/kaiyaok2/PythonProjects/falcon/tests/test_cython.py: 122.08373737335205s cumulative, 0.0059587955474853516s individual

F
current test FAILED -- test_imported_from_c_modules in /home/kaiyaok2/PythonProjects/falcon/tests/test_cython.py: 122.08974933624268s cumulative, 0.006011962890625s individual


tests/test_headers.py F
current test FAILED -- test_content_disposition_inline_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 122.20119404792786s cumulative, 0.11144471168518066s individual

F
current test FAILED -- test_headers_with_custom_class_not_callable in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 123.71428179740906s cumulative, 1.5130877494812012s individual

F
current test FAILED -- test_no_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 123.81180739402771s cumulative, 0.09752559661865234s individual

F
current test FAILED -- test_unicode_headers_contain_non_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 123.91845059394836s cumulative, 0.1066431999206543s individual

F
current test FAILED -- test_default_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 124.02080273628235s cumulative, 0.10235214233398438s individual

F
current test FAILED -- test_content_disposition_inline_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 124.11528658866882s cumulative, 0.09448385238647461s individual

F
current test FAILED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 124.21090340614319s cumulative, 0.09561681747436523s individual

F
current test FAILED -- test_response_append_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 124.3047559261322s cumulative, 0.09385251998901367s individual

F
current test FAILED -- test_declared_content_length_on_head in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 126.07272601127625s cumulative, 1.767970085144043s individual

F
current test FAILED -- test_no_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 126.21739840507507s cumulative, 0.14467239379882812s individual

F
current test FAILED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 126.39073491096497s cumulative, 0.17333650588989258s individual

F
current test FAILED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 126.55245208740234s cumulative, 0.16171717643737793s individual

F
current test FAILED -- test_unicode_location_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 126.65033793449402s cumulative, 0.0978858470916748s individual

F
current test FAILED -- test_passthrough_request_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 126.74769997596741s cumulative, 0.09736204147338867s individual

F
current test FAILED -- test_vary_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 126.86297726631165s cumulative, 0.11527729034423828s individual

F
current test FAILED -- test_request_multiple_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 128.96438336372375s cumulative, 2.1014060974121094s individual

F
current test FAILED -- test_required_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 129.09715294837952s cumulative, 0.13276958465576172s individual

F
current test FAILED -- test_declared_content_length_overridden_by_no_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 129.2214114665985s cumulative, 0.12425851821899414s individual

F
current test FAILED -- test_append_link_with_title_star in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 129.3677215576172s cumulative, 0.14631009101867676s individual

F
current test FAILED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 129.46614861488342s cumulative, 0.09842705726623535s individual

F
current test FAILED -- test_headers_as_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 129.56271767616272s cumulative, 0.09656906127929688s individual

F
current test FAILED -- test_append_link_multiple in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 129.6926829814911s cumulative, 0.12996530532836914s individual

F
current test FAILED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 131.4712734222412s cumulative, 1.778590440750122s individual

F
current test FAILED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 131.6335368156433s cumulative, 0.1622633934020996s individual

F
current test FAILED -- test_vary_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 131.84773087501526s cumulative, 0.21419405937194824s individual

F
current test FAILED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 132.02285599708557s cumulative, 0.1751251220703125s individual

F
current test FAILED -- test_append_link_with_anchor in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 132.18121767044067s cumulative, 0.15836167335510254s individual

s
current test PASSED/SKIPPED -- test_unicode_headers_contain_non_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 132.18893146514893s cumulative, 0.007713794708251953s individual

F
current test FAILED -- test_unicode_headers_contain_non_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 132.28675270080566s cumulative, 0.09782123565673828s individual

F
current test FAILED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 132.41063857078552s cumulative, 0.1238858699798584s individual

F
current test FAILED -- test_override_default_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 133.99303531646729s cumulative, 1.5823967456817627s individual

F
current test FAILED -- test_unset_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 134.11177444458008s cumulative, 0.11873912811279297s individual

F
current test FAILED -- test_declared_content_length_overriden_by_data_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 134.2463846206665s cumulative, 0.13461017608642578s individual

F
current test FAILED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 134.3661026954651s cumulative, 0.11971807479858398s individual

F
current test FAILED -- test_unicode_headers_contain_only_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 134.50052690505981s cumulative, 0.13442420959472656s individual

F
current test FAILED -- test_append_link_with_link_extension in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 134.66389799118042s cumulative, 0.16337108612060547s individual

F
current test FAILED -- test_response_header_helpers_on_get in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 134.79614877700806s cumulative, 0.13225078582763672s individual

F
current test FAILED -- test_unicode_headers_contain_non_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 136.6311755180359s cumulative, 1.835026741027832s individual

F
current test FAILED -- test_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 136.7914297580719s cumulative, 0.16025424003601074s individual

F
current test FAILED -- test_response_set_and_get_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 136.91934895515442s cumulative, 0.12791919708251953s individual

F
current test FAILED -- test_append_link_with_hreflang in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 137.0887246131897s cumulative, 0.16937565803527832s individual

F
current test FAILED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 137.27451825141907s cumulative, 0.18579363822937012s individual

F
current test FAILED -- test_append_link_single in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 137.41303825378418s cumulative, 0.1385200023651123s individual

F
current test FAILED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 137.5147202014923s cumulative, 0.10168194770812988s individual

F
current test FAILED -- test_append_link_with_title in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 137.6584038734436s cumulative, 0.14368367195129395s individual

F
current test FAILED -- test_append_link_with_type_hint in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 139.63610124588013s cumulative, 1.9776973724365234s individual

F
current test FAILED -- test_no_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 139.74298071861267s cumulative, 0.10687947273254395s individual

F
current test FAILED -- test_unicode_headers_contain_non_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 139.85711646080017s cumulative, 0.1141357421875s individual

F
current test FAILED -- test_expires_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 139.9556016921997s cumulative, 0.09848523139953613s individual

F
current test FAILED -- test_content_type_no_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 140.05747437477112s cumulative, 0.10187268257141113s individual

F
current test FAILED -- test_content_disposition_inline_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 140.15430116653442s cumulative, 0.09682679176330566s individual

F
current test FAILED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 140.26300168037415s cumulative, 0.10870051383972168s individual

F
current test FAILED -- test_override_default_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 141.8462221622467s cumulative, 1.5832204818725586s individual

F
current test FAILED -- test_set_headers_with_custom_class in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 141.94782900810242s cumulative, 0.10160684585571289s individual

F
current test FAILED -- test_append_link_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 142.0694704055786s cumulative, 0.12164139747619629s individual

F
current test FAILED -- test_custom_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 142.182386636734s cumulative, 0.11291623115539551s individual

F
current test FAILED -- test_get_header_as_int in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 142.2754933834076s cumulative, 0.09310674667358398s individual

F
current test FAILED -- test_declared_content_length_overriden_by_body_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 142.36989855766296s cumulative, 0.0944051742553711s individual

F
current test FAILED -- test_no_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 142.46435451507568s cumulative, 0.09445595741271973s individual

F
current test FAILED -- test_append_link_with_hreflang_multi in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 144.05674600601196s cumulative, 1.5923914909362793s individual

F
current test FAILED -- test_request_latin1_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 144.1595287322998s cumulative, 0.1027827262878418s individual

F
current test FAILED -- test_override_default_media_type_missing_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 144.25652694702148s cumulative, 0.09699821472167969s individual

F
current test FAILED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 144.3567066192627s cumulative, 0.10017967224121094s individual

F
current test FAILED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 144.45795106887817s cumulative, 0.10124444961547852s individual

F
current test FAILED -- test_vary_star in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 144.58268976211548s cumulative, 0.12473869323730469s individual

F
current test FAILED -- test_default_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 144.697247505188s cumulative, 0.11455774307250977s individual

F
current test FAILED -- test_unset_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 146.28912472724915s cumulative, 1.5918772220611572s individual


tests/test_app_initializers.py .
current test PASSED/SKIPPED -- test_api_media_type_overriding in /home/kaiyaok2/PythonProjects/falcon/tests/test_app_initializers.py: 146.29695081710815s cumulative, 0.007826089859008789s individual

.
current test PASSED/SKIPPED -- test_api_media_type_overriding in /home/kaiyaok2/PythonProjects/falcon/tests/test_app_initializers.py: 146.3019208908081s cumulative, 0.004970073699951172s individual


tests/test_utils.py .
current test PASSED/SKIPPED -- test_function in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.3053867816925s cumulative, 0.003465890884399414s individual

.
current test PASSED/SKIPPED -- test_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.3083426952362s cumulative, 0.002955913543701172s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.31248354911804s cumulative, 0.0041408538818359375s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.31606435775757s cumulative, 0.003580808639526367s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.32227444648743s cumulative, 0.0062100887298583984s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.32555651664734s cumulative, 0.0032820701599121094s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.3293812274933s cumulative, 0.0038247108459472656s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.33262038230896s cumulative, 0.003239154815673828s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.33611798286438s cumulative, 0.003497600555419922s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.3394637107849s cumulative, 0.0033457279205322266s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.34378838539124s cumulative, 0.004324674606323242s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.34731459617615s cumulative, 0.0035262107849121094s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.35111546516418s cumulative, 0.0038008689880371094s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.35450100898743s cumulative, 0.0033855438232421875s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.35785150527954s cumulative, 0.003350496292114258s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.36176991462708s cumulative, 0.00391840934753418s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.36785531044006s cumulative, 0.006085395812988281s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.37239861488342s cumulative, 0.004543304443359375s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.3758499622345s cumulative, 0.0034513473510742188s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.37963557243347s cumulative, 0.0037856101989746094s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.38293719291687s cumulative, 0.0033016204833984375s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.3863503932953s cumulative, 0.0034132003784179688s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.38975048065186s cumulative, 0.003400087356567383s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.393452167511s cumulative, 0.0037016868591308594s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.39679646492004s cumulative, 0.003344297409057617s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.40012431144714s cumulative, 0.0033278465270996094s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.40389895439148s cumulative, 0.0037746429443359375s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.40709495544434s cumulative, 0.0031960010528564453s individual

.
current test PASSED/SKIPPED -- test_something in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.4127175807953s cumulative, 0.0056226253509521484s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.4166967868805s cumulative, 0.003979206085205078s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.42008566856384s cumulative, 0.0033888816833496094s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.42345786094666s cumulative, 0.0033721923828125s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.4269540309906s cumulative, 0.0034961700439453125s individual

.
current test PASSED/SKIPPED -- test_get_argnames in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.42976641654968s cumulative, 0.0028123855590820312s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.4330132007599s cumulative, 0.003246784210205078s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.43715810775757s cumulative, 0.004144906997680664s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.44037795066833s cumulative, 0.0032198429107666016s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.44416975975037s cumulative, 0.00379180908203125s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.44761848449707s cumulative, 0.0034487247467041016s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.45080161094666s cumulative, 0.003183126449584961s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.45396375656128s cumulative, 0.0031621456146240234s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.45748043060303s cumulative, 0.003516674041748047s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.461106300354s cumulative, 0.0036258697509765625s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.46501684188843s cumulative, 0.003910541534423828s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.46884417533875s cumulative, 0.003827333450317383s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.47207236289978s cumulative, 0.0032281875610351562s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.47543001174927s cumulative, 0.0033576488494873047s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.4785943031311s cumulative, 0.0031642913818359375s individual

.
current test PASSED/SKIPPED -- test_json_deprecation in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.48144125938416s cumulative, 0.002846956253051758s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.4857189655304s cumulative, 0.004277706146240234s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.48932337760925s cumulative, 0.003604412078857422s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.49330472946167s cumulative, 0.003981351852416992s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.49699068069458s cumulative, 0.0036859512329101562s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.50017285346985s cumulative, 0.0031821727752685547s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.50333309173584s cumulative, 0.003160238265991211s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.506361246109s cumulative, 0.0030281543731689453s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.51009249687195s cumulative, 0.003731250762939453s individual

.
current test PASSED/SKIPPED -- test_dt_to_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.5129737854004s cumulative, 0.002881288528442383s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.51650166511536s cumulative, 0.0035278797149658203s individual

.
current test PASSED/SKIPPED -- test_secure_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.52005076408386s cumulative, 0.0035490989685058594s individual

.
current test PASSED/SKIPPED -- test_to_query_str_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.52337193489075s cumulative, 0.0033211708068847656s individual

.
current test PASSED/SKIPPED -- test_get_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.52660131454468s cumulative, 0.003229379653930664s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_unicode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.52999711036682s cumulative, 0.0033957958221435547s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.53281116485596s cumulative, 0.002814054489135742s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.5358021259308s cumulative, 0.0029909610748291016s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.53874111175537s cumulative, 0.002938985824584961s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.54166436195374s cumulative, 0.002923250198364258s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.54480171203613s cumulative, 0.003137350082397461s individual

.
current test PASSED/SKIPPED -- test_secure_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.54783463478088s cumulative, 0.0030329227447509766s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.55085968971252s cumulative, 0.003025054931640625s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.55375051498413s cumulative, 0.0028908252716064453s individual

.
current test PASSED/SKIPPED -- test_http_now in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.55666136741638s cumulative, 0.0029108524322509766s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.55965542793274s cumulative, 0.002994060516357422s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.56268334388733s cumulative, 0.0030279159545898438s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.56548404693604s cumulative, 0.0028007030487060547s individual

.
current test PASSED/SKIPPED -- test_to_query_str_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.5684781074524s cumulative, 0.002994060516357422s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.57146382331848s cumulative, 0.002985715866088867s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.5747094154358s cumulative, 0.0032455921173095703s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_coding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.57794547080994s cumulative, 0.003236055374145508s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.58084177970886s cumulative, 0.0028963088989257812s individual

.
current test PASSED/SKIPPED -- test_pack_query_params_several in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.58350133895874s cumulative, 0.0026595592498779297s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.58641576766968s cumulative, 0.0029144287109375s individual

.
current test PASSED/SKIPPED -- test_uri_decode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.58964323997498s cumulative, 0.0032274723052978516s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.59268164634705s cumulative, 0.0030384063720703125s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_unicode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.59597992897034s cumulative, 0.0032982826232910156s individual

.
current test PASSED/SKIPPED -- test_to_query_str_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.59894013404846s cumulative, 0.002960205078125s individual

.
current test PASSED/SKIPPED -- test_secure_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.60186195373535s cumulative, 0.0029218196868896484s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.6047558784485s cumulative, 0.0028939247131347656s individual

.
current test PASSED/SKIPPED -- test_etag_strong_vs_weak_comparison in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.60758566856384s cumulative, 0.0028297901153564453s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.61061143875122s cumulative, 0.0030257701873779297s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.61381077766418s cumulative, 0.003199338912963867s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_unicode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.61704182624817s cumulative, 0.003231048583984375s individual

.
current test PASSED/SKIPPED -- test_prop_uri_encode_models_stdlib_quote in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.62387919425964s cumulative, 0.006837368011474609s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.62716341018677s cumulative, 0.0032842159271240234s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.63031315803528s cumulative, 0.003149747848510742s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.63324069976807s cumulative, 0.002927541732788086s individual

.
current test PASSED/SKIPPED -- test_to_query_str_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.6363627910614s cumulative, 0.003122091293334961s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.63928198814392s cumulative, 0.0029191970825195312s individual

.
current test PASSED/SKIPPED -- test_http_date_to_dt in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.64666843414307s cumulative, 0.007386445999145508s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.64969754219055s cumulative, 0.0030291080474853516s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.65264582633972s cumulative, 0.002948284149169922s individual

.
current test PASSED/SKIPPED -- test_etag_dumps_to_header_format in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.6553258895874s cumulative, 0.002680063247680664s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.6581199169159s cumulative, 0.002794027328491211s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.66090607643127s cumulative, 0.0027861595153808594s individual

.
current test PASSED/SKIPPED -- test_secure_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.66380739212036s cumulative, 0.002901315689086914s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.66670513153076s cumulative, 0.0028977394104003906s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.66981625556946s cumulative, 0.003111124038696289s individual

.
current test PASSED/SKIPPED -- test_to_query_str_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.67276239395142s cumulative, 0.002946138381958008s individual

.
current test PASSED/SKIPPED -- test_prop_uri_encode_value_models_stdlib_quote_safe_tilde in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.67999792099s cumulative, 0.007235527038574219s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.68277716636658s cumulative, 0.002779245376586914s individual

.
current test PASSED/SKIPPED -- test_unquote_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.6853907108307s cumulative, 0.002613544464111328s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_unicode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.6885814666748s cumulative, 0.003190755844116211s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_unicode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.69184708595276s cumulative, 0.0032656192779541016s individual

.
current test PASSED/SKIPPED -- test_secure_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.69474864006042s cumulative, 0.0029015541076660156s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.6976821422577s cumulative, 0.002933502197265625s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_coding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.70101857185364s cumulative, 0.0033364295959472656s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.7038323879242s cumulative, 0.0028138160705566406s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_coding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.7070279121399s cumulative, 0.003195524215698242s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.70979857444763s cumulative, 0.002770662307739258s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.7130627632141s cumulative, 0.003264188766479492s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.7160930633545s cumulative, 0.0030303001403808594s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_coding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.71943306922913s cumulative, 0.003340005874633789s individual

.
current test PASSED/SKIPPED -- test_uri_decode_unquote_plus in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.7223584651947s cumulative, 0.002925395965576172s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.72539973258972s cumulative, 0.0030412673950195312s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.72841787338257s cumulative, 0.0030181407928466797s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.73152661323547s cumulative, 0.0031087398529052734s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_unicode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.73557829856873s cumulative, 0.004051685333251953s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.73893547058105s cumulative, 0.0033571720123291016s individual

.
current test PASSED/SKIPPED -- test_to_query_str_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.74254417419434s cumulative, 0.00360870361328125s individual

.
current test PASSED/SKIPPED -- test_secure_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.74544477462769s cumulative, 0.0029006004333496094s individual

.
current test PASSED/SKIPPED -- test_secure_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.748366355896s cumulative, 0.002921581268310547s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.7511920928955s cumulative, 0.0028257369995117188s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.75421476364136s cumulative, 0.0030226707458496094s individual

.
current test PASSED/SKIPPED -- test_get_http_status_warns in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.757093667984s cumulative, 0.002878904342651367s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.76012253761292s cumulative, 0.00302886962890625s individual

.
current test PASSED/SKIPPED -- test_to_query_str_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.7631392478943s cumulative, 0.0030167102813720703s individual

.
current test PASSED/SKIPPED -- test_prop_uri_decode_models_stdlib_unquote_plus in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.7725191116333s cumulative, 0.009379863739013672s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.7757294178009s cumulative, 0.003210306167602539s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.77863264083862s cumulative, 0.0029032230377197266s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.78193306922913s cumulative, 0.0033004283905029297s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.784982919693s cumulative, 0.0030498504638671875s individual

.
current test PASSED/SKIPPED -- test_parse_query_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.78776907920837s cumulative, 0.0027861595153808594s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.7906014919281s cumulative, 0.0028324127197265625s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.79375791549683s cumulative, 0.003156423568725586s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.796777009964s cumulative, 0.003019094467163086s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.7996633052826s cumulative, 0.0028862953186035156s individual

.
current test PASSED/SKIPPED -- test_uri_encode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.80234122276306s cumulative, 0.00267791748046875s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.8053731918335s cumulative, 0.0030319690704345703s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.80820775032043s cumulative, 0.0028345584869384766s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.81098246574402s cumulative, 0.0027747154235839844s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.8140127658844s cumulative, 0.0030303001403808594s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.81691217422485s cumulative, 0.0028994083404541016s individual

.
current test PASSED/SKIPPED -- test_uri_encode_double in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.82213425636292s cumulative, 0.0052220821380615234s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.82513856887817s cumulative, 0.003004312515258789s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.82836866378784s cumulative, 0.0032300949096679688s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.831533908844s cumulative, 0.0031652450561523438s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.83449864387512s cumulative, 0.0029647350311279297s individual

.
current test PASSED/SKIPPED -- test_parse_host in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.83723902702332s cumulative, 0.0027403831481933594s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.84021377563477s cumulative, 0.0029747486114501953s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.84318089485168s cumulative, 0.0029671192169189453s individual

.
current test PASSED/SKIPPED -- test_pack_query_params_one in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.84582257270813s cumulative, 0.0026416778564453125s individual

.
current test PASSED/SKIPPED -- test_deprecated_decorator in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.84871125221252s cumulative, 0.0028886795043945312s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.85177040100098s cumulative, 0.0030591487884521484s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.85479998588562s cumulative, 0.0030295848846435547s individual

.
current test PASSED/SKIPPED -- test_to_query_str_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.8577582836151s cumulative, 0.0029582977294921875s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_coding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.8618447780609s cumulative, 0.004086494445800781s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.86537837982178s cumulative, 0.003533601760864258s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.86822938919067s cumulative, 0.0028510093688964844s individual

.
current test PASSED/SKIPPED -- test_pack_query_params_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.87084698677063s cumulative, 0.0026175975799560547s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.87363624572754s cumulative, 0.0027892589569091797s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.8765413761139s cumulative, 0.002905130386352539s individual

.
current test PASSED/SKIPPED -- test_to_query_str_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.87951064109802s cumulative, 0.0029692649841308594s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_unicode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.88271260261536s cumulative, 0.0032019615173339844s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.88561630249023s cumulative, 0.0029036998748779297s individual

.
current test PASSED/SKIPPED -- test_uri_encode_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.88826608657837s cumulative, 0.0026497840881347656s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.8912706375122s cumulative, 0.0030045509338378906s individual

.
current test PASSED/SKIPPED -- test_uri_decode_unquote_plus in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.8943736553192s cumulative, 0.003103017807006836s individual

.
current test PASSED/SKIPPED -- test_secure_filename_empty_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.89707732200623s cumulative, 0.0027036666870117188s individual

.
current test PASSED/SKIPPED -- test_to_query_str_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.90002870559692s cumulative, 0.002951383590698242s individual

.
current test PASSED/SKIPPED -- test_uri_decode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.90296816825867s cumulative, 0.002939462661743164s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_coding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.90633583068848s cumulative, 0.0033676624298095703s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.9093747138977s cumulative, 0.0030388832092285156s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_unicode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.91257429122925s cumulative, 0.0031995773315429688s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.91560196876526s cumulative, 0.003027677536010742s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.91838550567627s cumulative, 0.002783536911010742s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.92438411712646s cumulative, 0.0059986114501953125s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.9291009902954s cumulative, 0.0047168731689453125s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.9338915348053s cumulative, 0.004790544509887695s individual

.
current test PASSED/SKIPPED -- test_simulate_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.93844747543335s cumulative, 0.004555940628051758s individual

.
current test PASSED/SKIPPED -- test_simulate_with_environ_extras in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.9429054260254s cumulative, 0.004457950592041016s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type_extra_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.94723081588745s cumulative, 0.004325389862060547s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type_extra_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.95155930519104s cumulative, 0.004328489303588867s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.9558584690094s cumulative, 0.004299163818359375s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.96255612373352s cumulative, 0.006697654724121094s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.96679520606995s cumulative, 0.004239082336425781s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.97168254852295s cumulative, 0.00488734245300293s individual

.
current test PASSED/SKIPPED -- test_decode_empty_result in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.97580099105835s cumulative, 0.004118442535400391s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.98017144203186s cumulative, 0.004370450973510742s individual

.
current test PASSED/SKIPPED -- test_override_method_with_extras in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.98753809928894s cumulative, 0.007366657257080078s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.99326467514038s cumulative, 0.00572657585144043s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type_extra_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 146.99836826324463s cumulative, 0.005103588104248047s individual

.
current test PASSED/SKIPPED -- test_query_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.00433993339539s cumulative, 0.005971670150756836s individual

.
current test PASSED/SKIPPED -- test_simple_resource_body_json_xor in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.0070025920868s cumulative, 0.00266265869140625s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.01177954673767s cumulative, 0.004776954650878906s individual

.
current test PASSED/SKIPPED -- test_path_must_start_with_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.0153465270996s cumulative, 0.0035669803619384766s individual

.
current test PASSED/SKIPPED -- test_default_headers_with_override in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.0195813179016s cumulative, 0.004234790802001953s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.02394771575928s cumulative, 0.004366397857666016s individual

.
current test PASSED/SKIPPED -- test_simulate_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.02822017669678s cumulative, 0.0042724609375s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.03303050994873s cumulative, 0.004810333251953125s individual

.
current test PASSED/SKIPPED -- test_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.03715801239014s cumulative, 0.00412750244140625s individual

.
current test PASSED/SKIPPED -- test_query_string_in_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.04227137565613s cumulative, 0.005113363265991211s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.04689741134644s cumulative, 0.004626035690307617s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.0519404411316s cumulative, 0.00504302978515625s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.0568609237671s cumulative, 0.004920482635498047s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type_extra_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.06126141548157s cumulative, 0.004400491714477539s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.06620001792908s cumulative, 0.004938602447509766s individual

.
current test PASSED/SKIPPED -- test_no_prefix_allowed_for_query_strings_in_create_environ in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.0687894821167s cumulative, 0.0025894641876220703s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.07374501228333s cumulative, 0.0049555301666259766s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.0788218975067s cumulative, 0.005076885223388672s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.08302307128906s cumulative, 0.004201173782348633s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.08792686462402s cumulative, 0.0049037933349609375s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.09384560585022s cumulative, 0.005918741226196289s individual

.
current test PASSED/SKIPPED -- test_query_string_no_question in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.0983009338379s cumulative, 0.0044553279876708984s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type_extra_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.10490322113037s cumulative, 0.006602287292480469s individual

.
current test PASSED/SKIPPED -- test_repr_without_content_type_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.10756158828735s cumulative, 0.002658367156982422s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.11241340637207s cumulative, 0.004851818084716797s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.11670780181885s cumulative, 0.004294395446777344s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.12096118927002s cumulative, 0.004253387451171875s individual

.
current test PASSED/SKIPPED -- test_path_escape_chars_in_create_environ in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.12402844429016s cumulative, 0.0030672550201416016s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type_extra_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.1314980983734s cumulative, 0.007469654083251953s individual

.
current test PASSED/SKIPPED -- test_simple_resource_body_json_xor in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.1347804069519s cumulative, 0.003282308578491211s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type_extra_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.1398639678955s cumulative, 0.005083560943603516s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.1441524028778s cumulative, 0.004288434982299805s individual

.
current test PASSED/SKIPPED -- test_simulate_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.1484034061432s cumulative, 0.004251003265380859s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.15329551696777s cumulative, 0.004892110824584961s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.15766167640686s cumulative, 0.004366159439086914s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.16192483901978s cumulative, 0.004263162612915039s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.1664092540741s cumulative, 0.004484415054321289s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type_extra_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.1716411113739s cumulative, 0.0052318572998046875s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.1762821674347s cumulative, 0.004641056060791016s individual

.
current test PASSED/SKIPPED -- test_repr_without_content_type_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.17895984649658s cumulative, 0.0026776790618896484s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.18347001075745s cumulative, 0.004510164260864258s individual

.
current test PASSED/SKIPPED -- test_plus_in_path_in_create_environ in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.18599677085876s cumulative, 0.0025267601013183594s individual

.
current test PASSED/SKIPPED -- test_wsgi_iterable_not_closeable in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.1885848045349s cumulative, 0.002588033676147461s individual

.
current test PASSED/SKIPPED -- test_httpnow_alias_for_backwards_compat in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.1910755634308s cumulative, 0.0024907588958740234s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.19565153121948s cumulative, 0.004575967788696289s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.2002396583557s cumulative, 0.004588127136230469s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.20444583892822s cumulative, 0.004206180572509766s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.2087423801422s cumulative, 0.004296541213989258s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.21305513381958s cumulative, 0.004312753677368164s individual

.
current test PASSED/SKIPPED -- test_simulate_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.21779346466064s cumulative, 0.004738330841064453s individual

.
current test PASSED/SKIPPED -- test_cached_text_in_result in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.2219521999359s cumulative, 0.004158735275268555s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.22608542442322s cumulative, 0.0041332244873046875s individual

.
current test PASSED/SKIPPED -- test_none_header_value_in_create_environ in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.22860407829285s cumulative, 0.0025186538696289062s individual

.
current test PASSED/SKIPPED -- test_default_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.23302340507507s cumulative, 0.0044193267822265625s individual

.
current test PASSED/SKIPPED -- test_simulate_hostname in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.23729491233826s cumulative, 0.004271507263183594s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.24384927749634s cumulative, 0.006554365158081055s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type_extra_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.24829745292664s cumulative, 0.0044481754302978516s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.25266885757446s cumulative, 0.0043714046478271484s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.25809717178345s cumulative, 0.005428314208984375s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.26542806625366s cumulative, 0.007330894470214844s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.2697296142578s cumulative, 0.004301548004150391s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type_extra_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.27403593063354s cumulative, 0.004306316375732422s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.27823638916016s cumulative, 0.004200458526611328s individual

.
current test PASSED/SKIPPED -- test_simulate_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.2825026512146s cumulative, 0.004266262054443359s individual

.
current test PASSED/SKIPPED -- test_decode_empty_result in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.28705263137817s cumulative, 0.004549980163574219s individual

.
current test PASSED/SKIPPED -- test_simulate_with_environ_extras in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.2912929058075s cumulative, 0.004240274429321289s individual

.
current test PASSED/SKIPPED -- test_attributes in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.29413747787476s cumulative, 0.002844572067260742s individual

.
current test PASSED/SKIPPED -- test_attributes in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.29681038856506s cumulative, 0.002672910690307617s individual

.
current test PASSED/SKIPPED -- test_dict_interface in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.29975986480713s cumulative, 0.0029494762420654297s individual

.
current test PASSED/SKIPPED -- test_attributes_from_items in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.30244970321655s cumulative, 0.002689838409423828s individual

.
current test PASSED/SKIPPED -- test_keys_and_values in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.3050820827484s cumulative, 0.0026323795318603516s individual

.
current test PASSED/SKIPPED -- test_items_from_attributes in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.3077356815338s cumulative, 0.0026535987854003906s individual

.
current test PASSED/SKIPPED -- test_keys_and_values in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.31037640571594s cumulative, 0.0026407241821289062s individual

.
current test PASSED/SKIPPED -- test_attributes_from_items in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.31302309036255s cumulative, 0.0026466846466064453s individual

.
current test PASSED/SKIPPED -- test_dict_interface in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.31590056419373s cumulative, 0.002877473831176758s individual

.
current test PASSED/SKIPPED -- test_items_from_attributes in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.31852841377258s cumulative, 0.002627849578857422s individual

.
current test PASSED/SKIPPED -- test_something in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 147.32161951065063s cumulative, 0.003091096878051758s individual


tests/asgi/test_ws.py .
current test PASSED/SKIPPED -- test_echo in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 157.53888058662415s cumulative, 10.21726107597351s individual


tests/test_wsgi_servers.py 127.0.0.1 - - [31/Jan/2024:06:49:36 +0000] "GET /hello HTTP/1.1" 200 14 "-" "python-requests/2.31.0"
127.0.0.1 - - [31/Jan/2024:06:49:36 +0000] "POST /forms HTTP/1.1" 200 180 "-" "python-requests/2.31.0"
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:42297 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_post_multipart_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 158.98969078063965s cumulative, 1.450810194015503s individual

INFO:     127.0.0.1:43482 - "GET /hello HTTP/1.1" 200 OK
INFO:     127.0.0.1:43486 - "POST /forms HTTP/1.1" 200 OK
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 39741 --interface wsgi _wsgi_test_app:app
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_post_multipart_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 159.99570751190186s cumulative, 1.006016731262207s individual


tests/asgi/test_asgi_conductor.py .
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 160.00394988059998s cumulative, 0.008242368698120117s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 160.01024556159973s cumulative, 0.006295680999755859s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 160.017578125s cumulative, 0.007332563400268555s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 160.02195191383362s cumulative, 0.004373788833618164s individual

.
current test PASSED/SKIPPED -- test_generic_request in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 160.0268533229828s cumulative, 0.004901409149169922s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 160.03189945220947s cumulative, 0.00504612922668457s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 160.03617978096008s cumulative, 0.0042803287506103516s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 160.04045486450195s cumulative, 0.004275083541870117s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 160.04490566253662s cumulative, 0.004450798034667969s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 160.05017805099487s cumulative, 0.005272388458251953s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 160.05453991889954s cumulative, 0.004361867904663086s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 160.059143781662s cumulative, 0.004603862762451172s individual

.
current test PASSED/SKIPPED -- test_generic_request in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 160.06368970870972s cumulative, 0.004545927047729492s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 160.06847095489502s cumulative, 0.004781246185302734s individual

.
current test PASSED/SKIPPED -- test_default_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 160.0737864971161s cumulative, 0.005315542221069336s individual

.
current test PASSED/SKIPPED -- test_wsgi_not_supported in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 160.07911825180054s cumulative, 0.005331754684448242s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 160.08378505706787s cumulative, 0.004666805267333984s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 160.0885190963745s cumulative, 0.004734039306640625s individual


tests/test_httpstatus.py F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 160.1968755722046s cumulative, 0.10835647583007812s individual

F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 160.2873511314392s cumulative, 0.09047555923461914s individual

F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 160.37411975860596s cumulative, 0.08676862716674805s individual

F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 160.46027326583862s cumulative, 0.08615350723266602s individual

F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 160.53718280792236s cumulative, 0.07690954208374023s individual

F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 160.6261179447174s cumulative, 0.08893513679504395s individual

F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 160.76672172546387s cumulative, 0.14060378074645996s individual

F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 160.9185128211975s cumulative, 0.15179109573364258s individual

F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 161.0376570224762s cumulative, 0.11914420127868652s individual

F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 161.15999460220337s cumulative, 0.12233757972717285s individual

F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 162.87826991081238s cumulative, 1.7182753086090088s individual

F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 162.96270537376404s cumulative, 0.08443546295166016s individual

F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 163.0549738407135s cumulative, 0.09226846694946289s individual

F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 163.14261984825134s cumulative, 0.0876460075378418s individual


tests/test_request_access_route.py .
current test PASSED/SKIPPED -- test_x_real_ip in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 163.14663076400757s cumulative, 0.004010915756225586s individual

.
current test PASSED/SKIPPED -- test_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 163.14968299865723s cumulative, 0.003052234649658203s individual

.
current test PASSED/SKIPPED -- test_rfc_forwarded in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 163.1536431312561s cumulative, 0.003960132598876953s individual

.
current test PASSED/SKIPPED -- test_remote_addr_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 163.15805864334106s cumulative, 0.0044155120849609375s individual

.
current test PASSED/SKIPPED -- test_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 163.16165828704834s cumulative, 0.0035996437072753906s individual

.
current test PASSED/SKIPPED -- test_remote_addr_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 163.1647298336029s cumulative, 0.0030715465545654297s individual

.
current test PASSED/SKIPPED -- test_x_real_ip in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 163.16790556907654s cumulative, 0.0031757354736328125s individual

.
current test PASSED/SKIPPED -- test_remote_addr_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 163.1713056564331s cumulative, 0.003400087356567383s individual

.
current test PASSED/SKIPPED -- test_x_forwarded_for in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 163.17444133758545s cumulative, 0.00313568115234375s individual

.
current test PASSED/SKIPPED -- test_malformed_rfc_forwarded in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 163.1777970790863s cumulative, 0.003355741500854492s individual

.
current test PASSED/SKIPPED -- test_x_forwarded_for in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 163.18128395080566s cumulative, 0.0034868717193603516s individual

.
current test PASSED/SKIPPED -- test_rfc_forwarded in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 163.18467259407043s cumulative, 0.003388643264770508s individual

.
current test PASSED/SKIPPED -- test_remote_addr_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 163.18780994415283s cumulative, 0.003137350082397461s individual

.
current test PASSED/SKIPPED -- test_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 163.19113302230835s cumulative, 0.003323078155517578s individual

.
current test PASSED/SKIPPED -- test_remote_addr_non_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 163.19404816627502s cumulative, 0.0029151439666748047s individual

.
current test PASSED/SKIPPED -- test_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 163.19755458831787s cumulative, 0.0035064220428466797s individual

.
current test PASSED/SKIPPED -- test_malformed_rfc_forwarded in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 163.20090126991272s cumulative, 0.003346681594848633s individual

.
current test PASSED/SKIPPED -- test_x_forwarded_for in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 163.2037649154663s cumulative, 0.002863645553588867s individual

.
current test PASSED/SKIPPED -- test_x_forwarded_for in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 163.20656180381775s cumulative, 0.0027968883514404297s individual

.
current test PASSED/SKIPPED -- test_remote_addr_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 163.209290266037s cumulative, 0.0027284622192382812s individual

.
current test PASSED/SKIPPED -- test_remote_addr_non_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 163.21197843551636s cumulative, 0.002688169479370117s individual


tests/test_validators.py .
current test PASSED/SKIPPED -- test_req_schema_validation_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 163.21758913993835s cumulative, 0.00561070442199707s individual

.
current test PASSED/SKIPPED -- test_req_schema_validation_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 163.22287154197693s cumulative, 0.005282402038574219s individual

.
current test PASSED/SKIPPED -- test_req_schema_validation_success in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 163.22671341896057s cumulative, 0.003841876983642578s individual

.
current test PASSED/SKIPPED -- test_req_schema_validation_success in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 163.23057079315186s cumulative, 0.0038573741912841797s individual

.
current test PASSED/SKIPPED -- test_resp_schema_validation_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 163.23487329483032s cumulative, 0.004302501678466797s individual

.
current test PASSED/SKIPPED -- test_req_schema_validation_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 163.2388186454773s cumulative, 0.003945350646972656s individual

.
current test PASSED/SKIPPED -- test_req_schema_validation_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 163.24291229248047s cumulative, 0.004093647003173828s individual

.
current test PASSED/SKIPPED -- test_both_schemas_validation_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 163.25393176078796s cumulative, 0.011019468307495117s individual

.
current test PASSED/SKIPPED -- test_resp_schema_validation_success in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 163.25783967971802s cumulative, 0.003907918930053711s individual

.
current test PASSED/SKIPPED -- test_resp_schema_validation_success in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 163.2617793083191s cumulative, 0.003939628601074219s individual

.
current test PASSED/SKIPPED -- test_resp_schema_validation_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 163.26634883880615s cumulative, 0.004569530487060547s individual

.
current test PASSED/SKIPPED -- test_both_schemas_validation_success in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 163.2750608921051s cumulative, 0.008712053298950195s individual

.
current test PASSED/SKIPPED -- test_both_schemas_validation_success in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 163.2865309715271s cumulative, 0.01147007942199707s individual

.
current test PASSED/SKIPPED -- test_both_schemas_validation_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 163.3034701347351s cumulative, 0.016939163208007812s individual


tests/asgi/test_ws.py .
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.31628465652466s cumulative, 0.012814521789550781s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.32644200325012s cumulative, 0.010157346725463867s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.33394360542297s cumulative, 0.0075016021728515625s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.34215807914734s cumulative, 0.008214473724365234s individual

.
current test PASSED/SKIPPED -- test_translate_webserver_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.34871625900269s cumulative, 0.00655817985534668s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.35572981834412s cumulative, 0.007013559341430664s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.3624074459076s cumulative, 0.0066776275634765625s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.37006497383118s cumulative, 0.007657527923583984s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.37661838531494s cumulative, 0.0065534114837646484s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.38293075561523s cumulative, 0.006312370300292969s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.39067387580872s cumulative, 0.007743120193481445s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.39685535430908s cumulative, 0.006181478500366211s individual

.
current test PASSED/SKIPPED -- test_ws_simulator_collect_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.40591955184937s cumulative, 0.009064197540283203s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.4123523235321s cumulative, 0.006432771682739258s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.41782355308533s cumulative, 0.005471229553222656s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.42593216896057s cumulative, 0.00810861587524414s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.43302273750305s cumulative, 0.007090568542480469s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.43883538246155s cumulative, 0.005812644958496094s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.44489073753357s cumulative, 0.006055355072021484s individual

.
current test PASSED/SKIPPED -- test_subprotocol_bad_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.45187067985535s cumulative, 0.006979942321777344s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.4582748413086s cumulative, 0.00640416145324707s individual

.
current test PASSED/SKIPPED -- test_ws_not_accepted in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.46546721458435s cumulative, 0.007192373275756836s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.4716444015503s cumulative, 0.006177186965942383s individual

.
current test PASSED/SKIPPED -- test_bad_spec_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.47557020187378s cumulative, 0.003925800323486328s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.4813301563263s cumulative, 0.0057599544525146484s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.48743677139282s cumulative, 0.00610661506652832s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.4926187992096s cumulative, 0.005182027816772461s individual

.
current test PASSED/SKIPPED -- test_ws_simulator_client_require_accepted in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.49728155136108s cumulative, 0.004662752151489258s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.5033140182495s cumulative, 0.006032466888427734s individual

.
current test PASSED/SKIPPED -- test_accept_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.50900959968567s cumulative, 0.0056955814361572266s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.5139033794403s cumulative, 0.004893779754638672s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.51932191848755s cumulative, 0.005418539047241211s individual

.
current test PASSED/SKIPPED -- test_subprotocol_bad_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.5237410068512s cumulative, 0.004419088363647461s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.5289535522461s cumulative, 0.005212545394897461s individual

.
current test PASSED/SKIPPED -- test_bad_spec_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.53300952911377s cumulative, 0.004055976867675781s individual

.
current test PASSED/SKIPPED -- test_subprotocol_bad_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.5386929512024s cumulative, 0.005683422088623047s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.5435836315155s cumulative, 0.0048906803131103516s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.54888892173767s cumulative, 0.005305290222167969s individual

.
current test PASSED/SKIPPED -- test_bad_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.55327010154724s cumulative, 0.0043811798095703125s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.5584089756012s cumulative, 0.005138874053955078s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.56389832496643s cumulative, 0.005489349365234375s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.56977653503418s cumulative, 0.0058782100677490234s individual

.
current test PASSED/SKIPPED -- test_subprotocol in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.57429456710815s cumulative, 0.004518032073974609s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.57902097702026s cumulative, 0.004726409912109375s individual

.
current test PASSED/SKIPPED -- test_unexpected_param in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.59285235404968s cumulative, 0.013831377029418945s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.59958863258362s cumulative, 0.006736278533935547s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.60564708709717s cumulative, 0.006058454513549805s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.611998796463s cumulative, 0.0063517093658447266s individual

.
current test PASSED/SKIPPED -- test_mw_methods_must_be_coroutines in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.61514616012573s cumulative, 0.0031473636627197266s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.62022924423218s cumulative, 0.0050830841064453125s individual

.
current test PASSED/SKIPPED -- test_bad_spec_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.62430214881897s cumulative, 0.004072904586791992s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.6310567855835s cumulative, 0.006754636764526367s individual

.
current test PASSED/SKIPPED -- test_accept_with_bad_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.63601875305176s cumulative, 0.004961967468261719s individual

.
current test PASSED/SKIPPED -- test_responder_raises_unhandled_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.64187121391296s cumulative, 0.005852460861206055s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.6478660106659s cumulative, 0.0059947967529296875s individual

.
current test PASSED/SKIPPED -- test_accept_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.65276312828064s cumulative, 0.004897117614746094s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.65803241729736s cumulative, 0.005269289016723633s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.6672718524933s cumulative, 0.009239435195922852s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.67418837547302s cumulative, 0.006916522979736328s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.6810965538025s cumulative, 0.0069081783294677734s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.687340259552s cumulative, 0.006243705749511719s individual

.
current test PASSED/SKIPPED -- test_accept_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.692302942276s cumulative, 0.0049626827239990234s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.69816994667053s cumulative, 0.00586700439453125s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.70532846450806s cumulative, 0.007158517837524414s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.71057319641113s cumulative, 0.005244731903076172s individual

.
current test PASSED/SKIPPED -- test_missing_spec_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.7143795490265s cumulative, 0.0038063526153564453s individual

.
current test PASSED/SKIPPED -- test_bad_spec_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.7187786102295s cumulative, 0.00439906120300293s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.72904300689697s cumulative, 0.010264396667480469s individual

.
current test PASSED/SKIPPED -- test_bad_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.73367023468018s cumulative, 0.004627227783203125s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.73919773101807s cumulative, 0.005527496337890625s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.74668860435486s cumulative, 0.007490873336791992s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.75299978256226s cumulative, 0.006311178207397461s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.75857186317444s cumulative, 0.005572080612182617s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.76579356193542s cumulative, 0.007221698760986328s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.77259469032288s cumulative, 0.006801128387451172s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.77931380271912s cumulative, 0.006719112396240234s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.78536415100098s cumulative, 0.0060503482818603516s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.791024684906s cumulative, 0.005660533905029297s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.7964107990265s cumulative, 0.0053861141204833984s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.80220007896423s cumulative, 0.005789279937744141s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.80779385566711s cumulative, 0.005593776702880859s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.81335520744324s cumulative, 0.005561351776123047s individual

.
current test PASSED/SKIPPED -- test_responder_raises_unhandled_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.82147693634033s cumulative, 0.008121728897094727s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.8264901638031s cumulative, 0.005013227462768555s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.83193969726562s cumulative, 0.005449533462524414s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.83807277679443s cumulative, 0.006133079528808594s individual

.
current test PASSED/SKIPPED -- test_accept_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.8430941104889s cumulative, 0.005021333694458008s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.84838318824768s cumulative, 0.0052890777587890625s individual

.
current test PASSED/SKIPPED -- test_subprotocol_bad_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.8540108203888s cumulative, 0.005627632141113281s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.86215782165527s cumulative, 0.008147001266479492s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.86928963661194s cumulative, 0.007131814956665039s individual

.
current test PASSED/SKIPPED -- test_subprotocol_bad_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.87526869773865s cumulative, 0.005979061126708984s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.88164448738098s cumulative, 0.006375789642333984s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.88826751708984s cumulative, 0.006623029708862305s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.89390230178833s cumulative, 0.005634784698486328s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.90206694602966s cumulative, 0.008164644241333008s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.90836572647095s cumulative, 0.00629878044128418s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.91458892822266s cumulative, 0.006223201751708984s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.9223828315735s cumulative, 0.007793903350830078s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.92836546897888s cumulative, 0.005982637405395508s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.9335753917694s cumulative, 0.005209922790527344s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.93977189064026s cumulative, 0.006196498870849609s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.9455165863037s cumulative, 0.0057446956634521484s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.95097064971924s cumulative, 0.005454063415527344s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.95681977272034s cumulative, 0.005849123001098633s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.9623327255249s cumulative, 0.00551295280456543s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.9685800075531s cumulative, 0.006247282028198242s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.97479152679443s cumulative, 0.006211519241333008s individual

.
current test PASSED/SKIPPED -- test_missing_ws_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.97964572906494s cumulative, 0.0048542022705078125s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.98475241661072s cumulative, 0.005106687545776367s individual

.
current test PASSED/SKIPPED -- test_bad_first_event in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.98791933059692s cumulative, 0.0031669139862060547s individual

.
current test PASSED/SKIPPED -- test_path_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.99280452728271s cumulative, 0.004885196685791016s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 163.99977326393127s cumulative, 0.00696873664855957s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.00503134727478s cumulative, 0.005258083343505859s individual

.
current test PASSED/SKIPPED -- test_send_receive_data in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.01067233085632s cumulative, 0.005640983581542969s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.01552391052246s cumulative, 0.004851579666137695s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.02057218551636s cumulative, 0.005048274993896484s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.02612614631653s cumulative, 0.0055539608001708984s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.0308964252472s cumulative, 0.0047702789306640625s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.03680872917175s cumulative, 0.005912303924560547s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.04190039634705s cumulative, 0.005091667175292969s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.05073976516724s cumulative, 0.00883936882019043s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.05638766288757s cumulative, 0.005647897720336914s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.06255793571472s cumulative, 0.0061702728271484375s individual

.
current test PASSED/SKIPPED -- test_ws_base_not_implemented in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.0650975704193s cumulative, 0.0025396347045898438s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.0750241279602s cumulative, 0.009926557540893555s individual

.
current test PASSED/SKIPPED -- test_accept_with_bad_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.07973861694336s cumulative, 0.004714488983154297s individual

.
current test PASSED/SKIPPED -- test_accept_with_headers_not_supported in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.08405804634094s cumulative, 0.004319429397583008s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.0897388458252s cumulative, 0.00568079948425293s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.09448266029358s cumulative, 0.004743814468383789s individual

.
current test PASSED/SKIPPED -- test_send_receive_data in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.09953093528748s cumulative, 0.005048274993896484s individual

.
current test PASSED/SKIPPED -- test_subprotocol in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.10446763038635s cumulative, 0.004936695098876953s individual

.
current test PASSED/SKIPPED -- test_media in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.11203837394714s cumulative, 0.007570743560791016s individual

.
current test PASSED/SKIPPED -- test_ws_not_accepted in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.11768794059753s cumulative, 0.005649566650390625s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.12437772750854s cumulative, 0.006689786911010742s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.1344599723816s cumulative, 0.010082244873046875s individual

.
current test PASSED/SKIPPED -- test_media in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.14130330085754s cumulative, 0.0068433284759521484s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.14709782600403s cumulative, 0.005794525146484375s individual

.
current test PASSED/SKIPPED -- test_accept_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.15259504318237s cumulative, 0.0054972171783447266s individual

.
current test PASSED/SKIPPED -- test_send_receive_wrong_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.1573441028595s cumulative, 0.0047490596771240234s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.16257858276367s cumulative, 0.005234479904174805s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.16730093955994s cumulative, 0.0047223567962646484s individual

.
current test PASSED/SKIPPED -- test_send_receive_data in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.17271542549133s cumulative, 0.005414485931396484s individual

.
current test PASSED/SKIPPED -- test_accept_with_bad_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.17709922790527s cumulative, 0.00438380241394043s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.18223190307617s cumulative, 0.0051326751708984375s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.18751764297485s cumulative, 0.005285739898681641s individual

.
current test PASSED/SKIPPED -- test_send_receive_data in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.19240927696228s cumulative, 0.004891633987426758s individual

.
current test PASSED/SKIPPED -- test_media in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.1980402469635s cumulative, 0.005630970001220703s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.2032072544098s cumulative, 0.0051670074462890625s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.20873713493347s cumulative, 0.005529880523681641s individual

.
current test PASSED/SKIPPED -- test_accept_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.21340322494507s cumulative, 0.00466609001159668s individual

.
current test PASSED/SKIPPED -- test_accept_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.2179925441742s cumulative, 0.0045893192291259766s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.22532033920288s cumulative, 0.0073277950286865234s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.23094868659973s cumulative, 0.005628347396850586s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.23723149299622s cumulative, 0.006282806396484375s individual

.
current test PASSED/SKIPPED -- test_subprotocol_bad_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.24293899536133s cumulative, 0.005707502365112305s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.24835062026978s cumulative, 0.005411624908447266s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.2535581588745s cumulative, 0.005207538604736328s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.26292300224304s cumulative, 0.009364843368530273s individual

.
current test PASSED/SKIPPED -- test_missing_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.2676465511322s cumulative, 0.004723548889160156s individual

.
current test PASSED/SKIPPED -- test_media in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.27370500564575s cumulative, 0.006058454513549805s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.27865052223206s cumulative, 0.004945516586303711s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.28804278373718s cumulative, 0.009392261505126953s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.2932267189026s cumulative, 0.0051839351654052734s individual

.
current test PASSED/SKIPPED -- test_subprotocol in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.299866437912s cumulative, 0.006639719009399414s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.3053719997406s cumulative, 0.005505561828613281s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.31080961227417s cumulative, 0.005437612533569336s individual

.
current test PASSED/SKIPPED -- test_subprotocol in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 164.3155872821808s cumulative, 0.004777669906616211s individual


tests/test_buffered_reader.py .
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.31860613822937s cumulative, 0.0030188560485839844s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.32185769081116s cumulative, 0.0032515525817871094s individual

.
current test PASSED/SKIPPED -- test_readlines_hint in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.32575178146362s cumulative, 0.0038940906524658203s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.3285870552063s cumulative, 0.0028352737426757812s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.33134722709656s cumulative, 0.002760171890258789s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.33444666862488s cumulative, 0.0030994415283203125s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.33724570274353s cumulative, 0.0027990341186523438s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.33989715576172s cumulative, 0.0026514530181884766s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.3427734375s cumulative, 0.00287628173828125s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.3453938961029s cumulative, 0.0026204586029052734s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.34815430641174s cumulative, 0.0027604103088378906s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.3512144088745s cumulative, 0.0030601024627685547s individual

.
current test PASSED/SKIPPED -- test_readlines_hint in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.35419487953186s cumulative, 0.002980470657348633s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.35712575912476s cumulative, 0.002930879592895508s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.3599147796631s cumulative, 0.002789020538330078s individual

.
current test PASSED/SKIPPED -- test_readline_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.3627381324768s cumulative, 0.002823352813720703s individual

.
current test PASSED/SKIPPED -- test_peek in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.36533331871033s cumulative, 0.002595186233520508s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.36810731887817s cumulative, 0.0027740001678466797s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.3708803653717s cumulative, 0.0027730464935302734s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.37353229522705s cumulative, 0.0026519298553466797s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.3762767314911s cumulative, 0.002744436264038086s individual

.
current test PASSED/SKIPPED -- test_bounded_read in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.37880516052246s cumulative, 0.0025284290313720703s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.381920337677s cumulative, 0.0031151771545410156s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.38493633270264s cumulative, 0.0030159950256347656s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.38774228096008s cumulative, 0.002805948257446289s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.39035940170288s cumulative, 0.0026171207427978516s individual

.
current test PASSED/SKIPPED -- test_pipe in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.3930139541626s cumulative, 0.002654552459716797s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.39626002311707s cumulative, 0.0032460689544677734s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.39900588989258s cumulative, 0.0027458667755126953s individual

.
current test PASSED/SKIPPED -- test_read_until_missing_delimiter in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.40171575546265s cumulative, 0.0027098655700683594s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.40434861183167s cumulative, 0.0026328563690185547s individual

.
current test PASSED/SKIPPED -- test_readlines_hint in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.40751886367798s cumulative, 0.0031702518463134766s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.4102439880371s cumulative, 0.0027251243591308594s individual

.
current test PASSED/SKIPPED -- test_duck_compatibility_with_io_base in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.41296195983887s cumulative, 0.0027179718017578125s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.4155614376068s cumulative, 0.002599477767944336s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.41965675354004s cumulative, 0.004095315933227539s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.42250204086304s cumulative, 0.002845287322998047s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.4252290725708s cumulative, 0.002727031707763672s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.42794013023376s cumulative, 0.002711057662963867s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.4306869506836s cumulative, 0.0027468204498291016s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.4332845211029s cumulative, 0.0025975704193115234s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.43600249290466s cumulative, 0.0027179718017578125s individual

.
current test PASSED/SKIPPED -- test_readline in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.43884778022766s cumulative, 0.002845287322998047s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.44193482398987s cumulative, 0.0030870437622070312s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.44487762451172s cumulative, 0.002942800521850586s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.44799256324768s cumulative, 0.003114938735961914s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.45086765289307s cumulative, 0.002875089645385742s individual

.
current test PASSED/SKIPPED -- test_readlines_hint in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.4538586139679s cumulative, 0.0029909610748291016s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.45655608177185s cumulative, 0.002697467803955078s individual

.
current test PASSED/SKIPPED -- test_readlines in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.4597053527832s cumulative, 0.003149271011352539s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.46255660057068s cumulative, 0.002851247787475586s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.46528553962708s cumulative, 0.0027289390563964844s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.46806597709656s cumulative, 0.002780437469482422s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.4707908630371s cumulative, 0.002724885940551758s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.47356605529785s cumulative, 0.0027751922607421875s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.4764368534088s cumulative, 0.002870798110961914s individual

.
current test PASSED/SKIPPED -- test_readlines_hint in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.47956728935242s cumulative, 0.0031304359436035156s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.4823932647705s cumulative, 0.0028259754180908203s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.48523449897766s cumulative, 0.0028412342071533203s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.48803162574768s cumulative, 0.0027971267700195312s individual

.
current test PASSED/SKIPPED -- test_peek_eof in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.49050164222717s cumulative, 0.0024700164794921875s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.49320268630981s cumulative, 0.0027010440826416016s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.49597787857056s cumulative, 0.0027751922607421875s individual

.
current test PASSED/SKIPPED -- test_read_until_delimiter_size_check in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.49895477294922s cumulative, 0.0029768943786621094s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.50204157829285s cumulative, 0.0030868053436279297s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.5048279762268s cumulative, 0.002786397933959961s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.507958650589s cumulative, 0.003130674362182617s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.51070928573608s cumulative, 0.0027506351470947266s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.5134334564209s cumulative, 0.002724170684814453s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.51623272895813s cumulative, 0.0027992725372314453s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.5189471244812s cumulative, 0.002714395523071289s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.521666765213s cumulative, 0.0027196407318115234s individual

.
current test PASSED/SKIPPED -- test_exhaust in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.52433609962463s cumulative, 0.0026693344116210938s individual

.
current test PASSED/SKIPPED -- test_consume_delimiter in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.5272514820099s cumulative, 0.0029153823852539062s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 164.53056693077087s cumulative, 0.003315448760986328s individual


tests/test_httperror.py .
current test PASSED/SKIPPED -- test_custom_error_serializer_optional_representation in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 164.53832983970642s cumulative, 0.007762908935546875s individual

.
current test PASSED/SKIPPED -- test_client_does_not_accept_json_or_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 164.54318284988403s cumulative, 0.004853010177612305s individual

.
current test PASSED/SKIPPED -- test_temporary_413_datetime_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 164.54840898513794s cumulative, 0.00522613525390625s individual

E
current test FAILED -- test_epic_fail_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 164.6670424938202s cumulative, 0.11863350868225098s individual

.
current test PASSED/SKIPPED -- test_503_datetime_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 164.67891001701355s cumulative, 0.011867523193359375s individual

E
current test FAILED -- test_epic_fail_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 164.7793312072754s cumulative, 0.10042119026184082s individual

.
current test PASSED/SKIPPED -- test_serialize_error_uses_media_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 164.78578662872314s cumulative, 0.006455421447753906s individual

.
current test PASSED/SKIPPED -- test_413 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 164.79209780693054s cumulative, 0.006311178207397461s individual

E
current test FAILED -- test_invalid_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 164.89684867858887s cumulative, 0.1047508716583252s individual

.
current test PASSED/SKIPPED -- test_invalid_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 164.90552639961243s cumulative, 0.00867772102355957s individual

.
current test PASSED/SKIPPED -- test_410_with_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 164.91032338142395s cumulative, 0.0047969818115234375s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 164.9132363796234s cumulative, 0.0029129981994628906s individual

E
current test FAILED -- test_forbidden in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 165.01267099380493s cumulative, 0.09943461418151855s individual

E
current test FAILED -- test_no_description_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 166.6994504928589s cumulative, 1.686779499053955s individual

E
current test FAILED -- test_405_without_body_with_extra_headers_double_check in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 166.79680681228638s cumulative, 0.09735631942749023s individual

E
current test FAILED -- test_414_with_title in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 166.8891773223877s cumulative, 0.09237051010131836s individual

.
current test PASSED/SKIPPED -- test_epic_fail_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 166.89638805389404s cumulative, 0.007210731506347656s individual

.
current test PASSED/SKIPPED -- test_no_description_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 166.9009165763855s cumulative, 0.004528522491455078s individual

.
current test PASSED/SKIPPED -- test_client_does_not_accept_anything in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 166.90511393547058s cumulative, 0.004197359085083008s individual

.
current test PASSED/SKIPPED -- test_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 166.91011118888855s cumulative, 0.00499725341796875s individual

E
current test FAILED -- test_epic_fail_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 167.0129680633545s cumulative, 0.10285687446594238s individual

E
current test FAILED -- test_serialize_error_uses_media_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 167.12758374214172s cumulative, 0.11461567878723145s individual

E
current test FAILED -- test_414 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 167.2258267402649s cumulative, 0.09824299812316895s individual

E
current test FAILED -- test_temporary_413_datetime_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 167.32672691345215s cumulative, 0.10090017318725586s individual

.
current test PASSED/SKIPPED -- test_429 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 167.33542943000793s cumulative, 0.008702516555786133s individual

.
current test PASSED/SKIPPED -- test_epic_fail_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 167.34184741973877s cumulative, 0.006417989730834961s individual

E
current test FAILED -- test_missing_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 168.96900916099548s cumulative, 1.6271617412567139s individual

.
current test PASSED/SKIPPED -- test_503_integer_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 168.97550129890442s cumulative, 0.006492137908935547s individual

.
current test PASSED/SKIPPED -- test_misc in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 168.9947063922882s cumulative, 0.019205093383789062s individual

E
current test FAILED -- test_429_datetime in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 169.122700214386s cumulative, 0.12799382209777832s individual

.
current test PASSED/SKIPPED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 169.1359405517578s cumulative, 0.013240337371826172s individual

.
current test PASSED/SKIPPED -- test_416 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 169.14605832099915s cumulative, 0.010117769241333008s individual

.
current test PASSED/SKIPPED -- test_411 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 169.1544153690338s cumulative, 0.008357048034667969s individual

E
current test FAILED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 169.31815600395203s cumulative, 0.1637406349182129s individual

.
current test PASSED/SKIPPED -- test_no_description_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 169.32916951179504s cumulative, 0.011013507843017578s individual

.
current test PASSED/SKIPPED -- test_forbidden in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 169.337171792984s cumulative, 0.008002281188964844s individual

E
current test FAILED -- test_misc in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 169.49392294883728s cumulative, 0.15675115585327148s individual

E
current test FAILED -- test_custom_error_serializer_optional_representation in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 169.63336825370789s cumulative, 0.13944530487060547s individual

E
current test FAILED -- test_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 169.74537587165833s cumulative, 0.11200761795043945s individual

E
current test FAILED -- test_413 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 169.85564160346985s cumulative, 0.11026573181152344s individual

E
current test FAILED -- test_429_no_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 169.95183062553406s cumulative, 0.09618902206420898s individual

.
current test PASSED/SKIPPED -- test_custom_error_serializer_optional_representation in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 169.96333503723145s cumulative, 0.011504411697387695s individual

E
current test FAILED -- test_405_with_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 171.71721148490906s cumulative, 1.7538764476776123s individual

.
current test PASSED/SKIPPED -- test_414_with_custom_kwargs in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 171.72522902488708s cumulative, 0.008017539978027344s individual

E
current test FAILED -- test_410_with_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 171.86236667633057s cumulative, 0.13713765144348145s individual

E
current test FAILED -- test_custom_error_serializer_optional_representation in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 171.99067974090576s cumulative, 0.1283130645751953s individual

.
current test PASSED/SKIPPED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 171.99719786643982s cumulative, 0.006518125534057617s individual

E
current test FAILED -- test_410_without_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 172.0948634147644s cumulative, 0.09766554832458496s individual

.
current test PASSED/SKIPPED -- test_410_without_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 172.10140466690063s cumulative, 0.006541252136230469s individual

.
current test PASSED/SKIPPED -- test_missing_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 172.10638046264648s cumulative, 0.004975795745849609s individual

.
current test PASSED/SKIPPED -- test_unicode_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 172.11251831054688s cumulative, 0.006137847900390625s individual

E
current test FAILED -- test_client_does_not_accept_json_or_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 172.21398210525513s cumulative, 0.10146379470825195s individual

.
current test PASSED/SKIPPED -- test_404_with_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 172.2212917804718s cumulative, 0.007309675216674805s individual

E
current test FAILED -- test_custom_error_serializer_optional_representation in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 172.3227846622467s cumulative, 0.10149288177490234s individual

.
current test PASSED/SKIPPED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 172.32979321479797s cumulative, 0.007008552551269531s individual

.
current test PASSED/SKIPPED -- test_unicode_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 172.33470487594604s cumulative, 0.004911661148071289s individual

.
current test PASSED/SKIPPED -- test_forbidden in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 172.34004712104797s cumulative, 0.005342245101928711s individual

E
current test FAILED -- test_unicode_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 172.4585099220276s cumulative, 0.11846280097961426s individual

E
current test FAILED -- test_client_does_not_accept_anything in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 174.30486464500427s cumulative, 1.8463547229766846s individual

.
current test PASSED/SKIPPED -- test_429_no_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 174.3126871585846s cumulative, 0.007822513580322266s individual

.
current test PASSED/SKIPPED -- test_414_with_title in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 174.31787252426147s cumulative, 0.005185365676879883s individual

.
current test PASSED/SKIPPED -- test_custom_serializer_no_representation in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 174.32271599769592s cumulative, 0.004843473434448242s individual

E
current test FAILED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 174.43078112602234s cumulative, 0.10806512832641602s individual

E
current test FAILED -- test_404_with_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 174.529141664505s cumulative, 0.09836053848266602s individual

E
current test FAILED -- test_forbidden in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 174.6446430683136s cumulative, 0.11550140380859375s individual

.
current test PASSED/SKIPPED -- test_base_class in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 174.65507292747498s cumulative, 0.010429859161376953s individual

.
current test PASSED/SKIPPED -- test_405_with_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 174.66041660308838s cumulative, 0.00534367561340332s individual

.
current test PASSED/SKIPPED -- test_custom_error_serializer_optional_representation in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 174.66665267944336s cumulative, 0.006236076354980469s individual

.
current test PASSED/SKIPPED -- test_serialize_no_json_media_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 174.6720199584961s cumulative, 0.005367279052734375s individual

.
current test PASSED/SKIPPED -- test_temporary_413_integer_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 174.67674469947815s cumulative, 0.004724740982055664s individual

.
current test PASSED/SKIPPED -- test_404_without_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 174.6815710067749s cumulative, 0.00482630729675293s individual

E
current test FAILED -- test_503_datetime_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 174.79143238067627s cumulative, 0.10986137390136719s individual

E
current test FAILED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 174.88918948173523s cumulative, 0.09775710105895996s individual

.
current test PASSED/SKIPPED -- test_custom_error_serializer in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 174.89884972572327s cumulative, 0.00966024398803711s individual

E
current test FAILED -- test_404_without_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 175.00823378562927s cumulative, 0.10938405990600586s individual

E
current test FAILED -- test_epic_fail_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 175.10599088668823s cumulative, 0.09775710105895996s individual

.
current test PASSED/SKIPPED -- test_custom_error_serializer_optional_representation in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 175.11770486831665s cumulative, 0.011713981628417969s individual

E
current test FAILED -- test_custom_error_serializer_optional_representation in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 176.78624320030212s cumulative, 1.6685383319854736s individual

E
current test FAILED -- test_503_integer_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 176.894278049469s cumulative, 0.10803484916687012s individual

E
current test FAILED -- test_base_class in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 176.99674320220947s cumulative, 0.10246515274047852s individual

E
current test FAILED -- test_414_with_description in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 177.09876108169556s cumulative, 0.10201787948608398s individual

E
current test FAILED -- test_429 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 177.19825267791748s cumulative, 0.09949159622192383s individual

.
current test PASSED/SKIPPED -- test_401 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 177.20626163482666s cumulative, 0.008008956909179688s individual

E
current test FAILED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 177.30744075775146s cumulative, 0.10117912292480469s individual

.
current test PASSED/SKIPPED -- test_forbidden in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 177.3135678768158s cumulative, 0.006127119064331055s individual

E
current test FAILED -- test_serialize_no_json_media_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 177.4193515777588s cumulative, 0.10578370094299316s individual

.
current test PASSED/SKIPPED -- test_MediaMalformedError in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 177.4226098060608s cumulative, 0.003258228302001953s individual

.
current test PASSED/SKIPPED -- test_429_datetime in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 177.4292027950287s cumulative, 0.006592988967895508s individual

E
current test FAILED -- test_414_with_custom_kwargs in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 177.5316526889801s cumulative, 0.10244989395141602s individual

.
current test PASSED/SKIPPED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 177.5386106967926s cumulative, 0.0069580078125s individual

E
current test FAILED -- test_unicode_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 179.25407218933105s cumulative, 1.7154614925384521s individual

E
current test FAILED -- test_custom_error_serializer in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 179.3553946018219s cumulative, 0.10132241249084473s individual

.
current test PASSED/SKIPPED -- test_epic_fail_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 179.36307454109192s cumulative, 0.007679939270019531s individual

E
current test FAILED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 179.47164058685303s cumulative, 0.1085660457611084s individual

E
current test FAILED -- test_custom_serializer_no_representation in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 179.57698011398315s cumulative, 0.10533952713012695s individual

E
current test FAILED -- test_no_description_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 179.67662262916565s cumulative, 0.09964251518249512s individual

E
current test FAILED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 179.77088832855225s cumulative, 0.09426569938659668s individual

E
current test FAILED -- test_411 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 179.8646137714386s cumulative, 0.09372544288635254s individual

.
current test PASSED/SKIPPED -- test_invalid_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 179.87359189987183s cumulative, 0.008978128433227539s individual

E
current test FAILED -- test_invalid_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 179.970862865448s cumulative, 0.09727096557617188s individual

.
current test PASSED/SKIPPED -- test_405_without_body_with_extra_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 179.97754836082458s cumulative, 0.006685495376586914s individual

.
current test PASSED/SKIPPED -- test_405_without_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 179.98372101783752s cumulative, 0.006172657012939453s individual

E
current test FAILED -- test_forbidden in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 181.60943222045898s cumulative, 1.62571120262146s individual

.
current test PASSED/SKIPPED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 181.6170527935028s cumulative, 0.007620573043823242s individual

E
current test FAILED -- test_epic_fail_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 181.7213900089264s cumulative, 0.10433721542358398s individual

.
current test PASSED/SKIPPED -- test_414_with_description in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 181.72752404212952s cumulative, 0.006134033203125s individual

.
current test PASSED/SKIPPED -- test_to_json_dumps in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 181.7301003932953s cumulative, 0.0025763511657714844s individual

.
current test PASSED/SKIPPED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 181.73472452163696s cumulative, 0.004624128341674805s individual

.
current test PASSED/SKIPPED -- test_epic_fail_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 181.7396755218506s cumulative, 0.004951000213623047s individual

E
current test FAILED -- test_405_without_body_with_extra_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 181.83355379104614s cumulative, 0.09387826919555664s individual

.
current test PASSED/SKIPPED -- test_epic_fail_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 181.83996677398682s cumulative, 0.006412982940673828s individual

E
current test FAILED -- test_401 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 181.94142842292786s cumulative, 0.10146164894104004s individual

E
current test FAILED -- test_405_without_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 182.06584000587463s cumulative, 0.12441158294677734s individual

.
current test PASSED/SKIPPED -- test_405_without_body_with_extra_headers_double_check in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 182.0751986503601s cumulative, 0.009358644485473633s individual

.
current test PASSED/SKIPPED -- test_414 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 182.08051776885986s cumulative, 0.005319118499755859s individual

E
current test FAILED -- test_temporary_413_integer_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 182.21814250946045s cumulative, 0.13762474060058594s individual

E
current test FAILED -- test_416 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 182.34760284423828s cumulative, 0.12946033477783203s individual


tests/test_deprecations.py .
current test PASSED/SKIPPED -- test_bounded_stream in /home/kaiyaok2/PythonProjects/falcon/tests/test_deprecations.py: 182.35108280181885s cumulative, 0.0034799575805664062s individual


tests/test_middleware.py .
current test PASSED/SKIPPED -- test_log_get_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 182.36057567596436s cumulative, 0.009492874145507812s individual

.
current test PASSED/SKIPPED -- test_add_invalid_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 182.3642280101776s cumulative, 0.003652334213256836s individual

.
current test PASSED/SKIPPED -- test_log_get_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 182.36966943740845s cumulative, 0.005441427230834961s individual

.
current test PASSED/SKIPPED -- test_response_middleware_raises_exception in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 182.37618207931519s cumulative, 0.006512641906738281s individual

.
current test PASSED/SKIPPED -- test_skip_process_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 182.38273572921753s cumulative, 0.00655364990234375s individual

.
current test PASSED/SKIPPED -- test_add_invalid_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 182.38617587089539s cumulative, 0.0034401416778564453s individual

.
current test PASSED/SKIPPED -- test_api_initialization_with_cors_enabled_and_middleware_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 182.3921401500702s cumulative, 0.0059642791748046875s individual

.
current test PASSED/SKIPPED -- test_api_initialization_with_cors_enabled_and_middleware_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 182.39696431159973s cumulative, 0.004824161529541016s individual

.
current test PASSED/SKIPPED -- test_api_initialization_with_cors_enabled_and_middleware_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 182.40160179138184s cumulative, 0.004637479782104492s individual

.
current test PASSED/SKIPPED -- test_api_initialization_with_cors_enabled_and_middleware_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 182.40659546852112s cumulative, 0.0049936771392822266s individual

.
current test PASSED/SKIPPED -- test_error_composed_before_resp_middleware_called in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 182.411066532135s cumulative, 0.0044710636138916016s individual

.
current test PASSED/SKIPPED -- test_http_status_raised_from_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 182.41612362861633s cumulative, 0.005057096481323242s individual

.
current test PASSED/SKIPPED -- test_process_request_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 182.42058515548706s cumulative, 0.004461526870727539s individual

.
current test PASSED/SKIPPED -- test_process_resource_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 182.42634654045105s cumulative, 0.005761384963989258s individual

.
current test PASSED/SKIPPED -- test_process_resource_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 182.43121218681335s cumulative, 0.0048656463623046875s individual

.
current test PASSED/SKIPPED -- test_process_request_not_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 182.43610906600952s cumulative, 0.004896879196166992s individual

.
current test PASSED/SKIPPED -- test_process_request_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 182.44257760047913s cumulative, 0.006468534469604492s individual

.
current test PASSED/SKIPPED -- test_generate_trans_id_with_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 182.450945854187s cumulative, 0.008368253707885742s individual

.
current test PASSED/SKIPPED -- test_can_access_resource_params in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 182.4557330608368s cumulative, 0.0047872066497802734s individual

.
current test PASSED/SKIPPED -- test_can_access_resource_params in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 182.46017026901245s cumulative, 0.00443720817565918s individual

.
current test PASSED/SKIPPED -- test_dont_need_params_in_signature in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 182.46359825134277s cumulative, 0.0034279823303222656s individual

.
current test PASSED/SKIPPED -- test_order_independent_mw_executed_when_exception_in_resp in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 182.4682104587555s cumulative, 0.0046122074127197266s individual

.
current test PASSED/SKIPPED -- test_inner_mw_throw_exception_while_processing_resp in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 182.472806930542s cumulative, 0.0045964717864990234s individual

.
current test PASSED/SKIPPED -- test_multiple_response_mw_throw_exception in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 182.47751879692078s cumulative, 0.00471186637878418s individual

.
current test PASSED/SKIPPED -- test_legacy_middleware_called_with_correct_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 182.48181676864624s cumulative, 0.004297971725463867s individual

.
current test PASSED/SKIPPED -- test_middleware_execution_order in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 182.4862551689148s cumulative, 0.0044384002685546875s individual

.
current test PASSED/SKIPPED -- test_order_independent_mw_executed_when_exception_in_req in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 182.4902582168579s cumulative, 0.004003047943115234s individual

.
current test PASSED/SKIPPED -- test_generate_trans_id_and_time_with_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 182.4955472946167s cumulative, 0.0052890777587890625s individual

.
current test PASSED/SKIPPED -- test_order_mw_executed_when_exception_in_req in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 182.4996211528778s cumulative, 0.0040738582611083984s individual

.
current test PASSED/SKIPPED -- test_inner_mw_with_ex_handler_throw_exception in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 182.5036849975586s cumulative, 0.004063844680786133s individual

.
current test PASSED/SKIPPED -- test_inner_mw_throw_exception in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 182.50807738304138s cumulative, 0.004392385482788086s individual

.
current test PASSED/SKIPPED -- test_order_mw_executed_when_exception_in_resp in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 182.51261019706726s cumulative, 0.004532814025878906s individual

.
current test PASSED/SKIPPED -- test_independent_middleware_execution_order in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 182.51774311065674s cumulative, 0.005132913589477539s individual

.
current test PASSED/SKIPPED -- test_outer_mw_with_ex_handler_throw_exception in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 182.5217525959015s cumulative, 0.0040094852447509766s individual

.
current test PASSED/SKIPPED -- test_generate_trans_id_and_time_with_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 182.52638006210327s cumulative, 0.0046274662017822266s individual

.
current test PASSED/SKIPPED -- test_order_mw_executed_when_exception_in_rsrc in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 182.53184843063354s cumulative, 0.0054683685302734375s individual

.
current test PASSED/SKIPPED -- test_order_independent_mw_executed_when_exception_in_rsrc in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 182.53648710250854s cumulative, 0.004638671875s individual

.
current test PASSED/SKIPPED -- test_base_path_is_removed_before_routing in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 182.54184126853943s cumulative, 0.005354166030883789s individual


tests/test_buffered_reader.py .
current test PASSED/SKIPPED -- test_pipe_until_without_destination in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 182.71327686309814s cumulative, 0.17143559455871582s individual


tests/test_utils.py F
current test FAILED -- test_default_headers_with_override in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 184.55987572669983s cumulative, 1.8465988636016846s individual

F
current test FAILED -- test_path_must_start_with_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 184.69386386871338s cumulative, 0.1339881420135498s individual

F
current test FAILED -- test_simulate_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 184.8350808620453s cumulative, 0.14121699333190918s individual

F
current test FAILED -- test_override_method_with_extras in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 184.9644136428833s cumulative, 0.1293327808380127s individual

F
current test FAILED -- test_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 185.09794783592224s cumulative, 0.13353419303894043s individual

F
current test FAILED -- test_default_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 185.24162435531616s cumulative, 0.1436765193939209s individual

F
current test FAILED -- test_simulate_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 186.9727499485016s cumulative, 1.7311255931854248s individual

F
current test FAILED -- test_query_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 187.09963154792786s cumulative, 0.12688159942626953s individual

F
current test FAILED -- test_simulate_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 187.21623468399048s cumulative, 0.11660313606262207s individual

F
current test FAILED -- test_query_string_in_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 187.34277486801147s cumulative, 0.1265401840209961s individual

F
current test FAILED -- test_simulate_hostname in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 187.50047063827515s cumulative, 0.15769577026367188s individual

F
current test FAILED -- test_simulate_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 187.62559938430786s cumulative, 0.12512874603271484s individual

F
current test FAILED -- test_cached_text_in_result in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 189.31073307991028s cumulative, 1.685133695602417s individual

F
current test FAILED -- test_simulate_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 189.4408597946167s cumulative, 0.1301267147064209s individual

F
current test FAILED -- test_query_string_no_question in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 189.56364607810974s cumulative, 0.12278628349304199s individual


tests/test_options.py .
current test PASSED/SKIPPED -- test_options_toggle in /home/kaiyaok2/PythonProjects/falcon/tests/test_options.py: 189.56691718101501s cumulative, 0.0032711029052734375s individual

.
current test PASSED/SKIPPED -- test_options_toggle in /home/kaiyaok2/PythonProjects/falcon/tests/test_options.py: 189.56979298591614s cumulative, 0.002875804901123047s individual

.
current test PASSED/SKIPPED -- test_options_toggle in /home/kaiyaok2/PythonProjects/falcon/tests/test_options.py: 189.57256722450256s cumulative, 0.0027742385864257812s individual

.
current test PASSED/SKIPPED -- test_option_defaults in /home/kaiyaok2/PythonProjects/falcon/tests/test_options.py: 189.5751211643219s cumulative, 0.0025539398193359375s individual

.
current test PASSED/SKIPPED -- test_options_toggle in /home/kaiyaok2/PythonProjects/falcon/tests/test_options.py: 189.5778307914734s cumulative, 0.002709627151489258s individual

.
current test PASSED/SKIPPED -- test_incorrect_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_options.py: 189.58041167259216s cumulative, 0.002580881118774414s individual


tests/test_after_hooks.py F
current test FAILED -- test_resource_with_uri_fields in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 189.66348004341125s cumulative, 0.0830683708190918s individual

F
current test FAILED -- test_wrapped_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 189.74724698066711s cumulative, 0.08376693725585938s individual

F
current test FAILED -- test_resource_with_uri_fields in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 189.82419610023499s cumulative, 0.0769491195678711s individual

F
current test FAILED -- test_wrapped_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 189.90775108337402s cumulative, 0.08355498313903809s individual

F
current test FAILED -- test_wrapped_resource_with_hooks_aware_of_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 189.99794936180115s cumulative, 0.09019827842712402s individual


tests/asgi/test_asgi_servers.py s
current test PASSED/SKIPPED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.00329327583313s cumulative, 0.005343914031982422s individual

s
current test PASSED/SKIPPED -- test_send_before_accept in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.00667548179626s cumulative, 0.0033822059631347656s individual

s
current test PASSED/SKIPPED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.01019525527954s cumulative, 0.003519773483276367s individual

s
current test PASSED/SKIPPED -- test_select_subprotocol_known in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.01433515548706s cumulative, 0.004139900207519531s individual

s
current test PASSED/SKIPPED -- test_select_subprotocol_known in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.0178360939026s cumulative, 0.0035009384155273438s individual

s
current test PASSED/SKIPPED -- test_disconnecting_client_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.02106642723083s cumulative, 0.0032303333282470703s individual

s
current test PASSED/SKIPPED -- test_close_code_on_unhandled_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.02421641349792s cumulative, 0.0031499862670898438s individual

s
current test PASSED/SKIPPED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.02810764312744s cumulative, 0.0038912296295166016s individual

s
current test PASSED/SKIPPED -- test_select_subprotocol_known in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.03156304359436s cumulative, 0.0034554004669189453s individual

s
current test PASSED/SKIPPED -- test_send_before_accept in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.0348355770111s cumulative, 0.003272533416748047s individual

s
current test PASSED/SKIPPED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.03893446922302s cumulative, 0.0040988922119140625s individual

s
current test PASSED/SKIPPED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.04347205162048s cumulative, 0.0045375823974609375s individual

s
current test PASSED/SKIPPED -- test_passing_path_params in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.04716205596924s cumulative, 0.003690004348754883s individual

s
current test PASSED/SKIPPED -- test_invalid_close_code in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.05075883865356s cumulative, 0.003596782684326172s individual

s
current test PASSED/SKIPPED -- test_select_subprotocol_unknown in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.05410838127136s cumulative, 0.0033495426177978516s individual

s
current test PASSED/SKIPPED -- test_recv_before_accept in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.0576798915863s cumulative, 0.0035715103149414062s individual

s
current test PASSED/SKIPPED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.0615315437317s cumulative, 0.003851652145385742s individual

s
current test PASSED/SKIPPED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.06500387191772s cumulative, 0.0034723281860351562s individual

s
current test PASSED/SKIPPED -- test_passing_path_params in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.068101644516s cumulative, 0.0030977725982666016s individual

s
current test PASSED/SKIPPED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.07153940200806s cumulative, 0.0034377574920654297s individual

s
current test PASSED/SKIPPED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.07500195503235s cumulative, 0.003462553024291992s individual

s
current test PASSED/SKIPPED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.07901239395142s cumulative, 0.004010438919067383s individual

s
current test PASSED/SKIPPED -- test_select_subprotocol_known in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.08251667022705s cumulative, 0.0035042762756347656s individual

s
current test PASSED/SKIPPED -- test_missing_responder in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.0857081413269s cumulative, 0.0031914710998535156s individual

s
current test PASSED/SKIPPED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.08917498588562s cumulative, 0.0034668445587158203s individual

s
current test PASSED/SKIPPED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.092609167099s cumulative, 0.0034341812133789062s individual

s
current test PASSED/SKIPPED -- test_missing_responder in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.0966203212738s cumulative, 0.0040111541748046875s individual

s
current test PASSED/SKIPPED -- test_invalid_close_code in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.09983897209167s cumulative, 0.0032186508178710938s individual

s
current test PASSED/SKIPPED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.10325646400452s cumulative, 0.003417491912841797s individual

s
current test PASSED/SKIPPED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.10704374313354s cumulative, 0.0037872791290283203s individual

s
current test PASSED/SKIPPED -- test_close_code_on_unhandled_http_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.1102020740509s cumulative, 0.0031583309173583984s individual

s
current test PASSED/SKIPPED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.1145956516266s cumulative, 0.004393577575683594s individual

s
current test PASSED/SKIPPED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.11807584762573s cumulative, 0.003480195999145508s individual

s
current test PASSED/SKIPPED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.12154579162598s cumulative, 0.0034699440002441406s individual

s
current test PASSED/SKIPPED -- test_recv_before_accept in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.12474083900452s cumulative, 0.003195047378540039s individual

s
current test PASSED/SKIPPED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.12816739082336s cumulative, 0.0034265518188476562s individual

s
current test PASSED/SKIPPED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.1319396495819s cumulative, 0.003772258758544922s individual

s
current test PASSED/SKIPPED -- test_close_code_on_unhandled_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.1351227760315s cumulative, 0.003183126449584961s individual

s
current test PASSED/SKIPPED -- test_select_subprotocol_unknown in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.1382863521576s cumulative, 0.003163576126098633s individual

s
current test PASSED/SKIPPED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.14169597625732s cumulative, 0.0034096240997314453s individual

s
current test PASSED/SKIPPED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.14514684677124s cumulative, 0.0034508705139160156s individual

s
current test PASSED/SKIPPED -- test_close_code_on_unhandled_http_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.14865612983704s cumulative, 0.0035092830657958984s individual

s
current test PASSED/SKIPPED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.15266680717468s cumulative, 0.004010677337646484s individual

s
current test PASSED/SKIPPED -- test_disconnecting_client_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.15613865852356s cumulative, 0.003471851348876953s individual

s
current test PASSED/SKIPPED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.1595594882965s cumulative, 0.0034208297729492188s individual

s
current test PASSED/SKIPPED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.1630575656891s cumulative, 0.003498077392578125s individual

s
current test PASSED/SKIPPED -- test_stream_chunked_request in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.16649079322815s cumulative, 0.0034332275390625s individual

s
current test PASSED/SKIPPED -- test_post_multipart_form in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.16962242126465s cumulative, 0.0031316280364990234s individual

s
current test PASSED/SKIPPED -- test_post_read_bounded_stream_large in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.17263555526733s cumulative, 0.003013134002685547s individual

s
current test PASSED/SKIPPED -- test_put in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.17566394805908s cumulative, 0.003028392791748047s individual

s
current test PASSED/SKIPPED -- test_head_405 in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.178706407547s cumulative, 0.003042459487915039s individual

s
current test PASSED/SKIPPED -- test_sse_client_disconnects_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.1817193031311s cumulative, 0.0030128955841064453s individual

s
current test PASSED/SKIPPED -- test_stream_chunked_request in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.18517112731934s cumulative, 0.003451824188232422s individual

s
current test PASSED/SKIPPED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.18821573257446s cumulative, 0.003044605255126953s individual

s
current test PASSED/SKIPPED -- test_post_read_bounded_stream_no_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.1912224292755s cumulative, 0.0030066967010498047s individual

s
current test PASSED/SKIPPED -- test_post_invalid_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.1946427822113s cumulative, 0.0034203529357910156s individual

s
current test PASSED/SKIPPED -- test_put in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.19765949249268s cumulative, 0.0030167102813720703s individual

s
current test PASSED/SKIPPED -- test_sse in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.20075273513794s cumulative, 0.003093242645263672s individual

s
current test PASSED/SKIPPED -- test_post_read_bounded_stream in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.2043113708496s cumulative, 0.003558635711669922s individual

s
current test PASSED/SKIPPED -- test_post_read_bounded_stream_large in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.20752549171448s cumulative, 0.003214120864868164s individual

s
current test PASSED/SKIPPED -- test_post_multiple in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.2105267047882s cumulative, 0.0030012130737304688s individual

s
current test PASSED/SKIPPED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.21353220939636s cumulative, 0.003005504608154297s individual

s
current test PASSED/SKIPPED -- test_post_multipart_form in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.2165389060974s cumulative, 0.0030066967010498047s individual

s
current test PASSED/SKIPPED -- test_post_invalid_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.2195348739624s cumulative, 0.0029959678649902344s individual

s
current test PASSED/SKIPPED -- test_post_multiple in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.22309732437134s cumulative, 0.003562450408935547s individual

s
current test PASSED/SKIPPED -- test_sse in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.22611093521118s cumulative, 0.00301361083984375s individual

s
current test PASSED/SKIPPED -- test_post_read_bounded_stream in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.22911524772644s cumulative, 0.003004312515258789s individual

s
current test PASSED/SKIPPED -- test_sse_client_disconnects_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.23213148117065s cumulative, 0.003016233444213867s individual

s
current test PASSED/SKIPPED -- test_head_405 in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.2351415157318s cumulative, 0.0030100345611572266s individual

s
current test PASSED/SKIPPED -- test_post_read_bounded_stream_no_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 190.23814702033997s cumulative, 0.003005504608154297s individual


tests/test_response_context.py .
current test PASSED/SKIPPED -- test_custom_response_context_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_context.py: 190.2416467666626s cumulative, 0.003499746322631836s individual

.
current test PASSED/SKIPPED -- test_custom_response_context in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_context.py: 190.24447917938232s cumulative, 0.0028324127197265625s individual

.
current test PASSED/SKIPPED -- test_custom_response_context_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_context.py: 190.24729895591736s cumulative, 0.0028197765350341797s individual

.
current test PASSED/SKIPPED -- test_default_response_context in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_context.py: 190.25013947486877s cumulative, 0.0028405189514160156s individual

.
current test PASSED/SKIPPED -- test_default_response_context in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_context.py: 190.25290417671204s cumulative, 0.0027647018432617188s individual

.
current test PASSED/SKIPPED -- test_custom_response_context in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_context.py: 190.25585627555847s cumulative, 0.002952098846435547s individual

.
current test PASSED/SKIPPED -- test_custom_response_context_factory in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_context.py: 190.2586522102356s cumulative, 0.0027959346771240234s individual

.
current test PASSED/SKIPPED -- test_custom_response_context_factory in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_context.py: 190.26156210899353s cumulative, 0.0029098987579345703s individual


tests/test_httpstatus.py .
current test PASSED/SKIPPED -- test_raise_status_in_process_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 190.26625657081604s cumulative, 0.004694461822509766s individual

E
current test FAILED -- test_raise_status_in_process_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 190.39386248588562s cumulative, 0.12760591506958008s individual

E
current test FAILED -- test_raise_status_in_process_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 192.26636815071106s cumulative, 1.8725056648254395s individual

.
current test PASSED/SKIPPED -- test_raise_status_runs_process_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 192.27358675003052s cumulative, 0.007218599319458008s individual

E
current test FAILED -- test_raise_status_runs_process_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 192.35700178146362s cumulative, 0.08341503143310547s individual

.
current test PASSED/SKIPPED -- test_raise_status_in_process_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 192.36326098442078s cumulative, 0.00625920295715332s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 192.36800169944763s cumulative, 0.004740715026855469s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 192.37255811691284s cumulative, 0.004556417465209961s individual

.
current test PASSED/SKIPPED -- test_deprecated_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 192.37530875205994s cumulative, 0.0027506351470947266s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 192.38041472434998s cumulative, 0.0051059722900390625s individual

.
current test PASSED/SKIPPED -- test_data_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 192.3845705986023s cumulative, 0.004155874252319336s individual

.
current test PASSED/SKIPPED -- test_media_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 192.3890082836151s cumulative, 0.004437685012817383s individual

E
current test FAILED -- test_body_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 192.48135781288147s cumulative, 0.09234952926635742s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 192.48703980445862s cumulative, 0.0056819915771484375s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 192.49168848991394s cumulative, 0.004648685455322266s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 192.49664616584778s cumulative, 0.004957675933837891s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 192.50124788284302s cumulative, 0.004601716995239258s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 192.50699472427368s cumulative, 0.0057468414306640625s individual

E
current test FAILED -- test_media_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 192.5949466228485s cumulative, 0.0879518985748291s individual

.
current test PASSED/SKIPPED -- test_body_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 192.60043668746948s cumulative, 0.00549006462097168s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 192.6054515838623s cumulative, 0.005014896392822266s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 192.6104063987732s cumulative, 0.004954814910888672s individual

E
current test FAILED -- test_data_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 192.69329118728638s cumulative, 0.0828847885131836s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 192.699627161026s cumulative, 0.0063359737396240234s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 192.70473957061768s cumulative, 0.005112409591674805s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 192.70925545692444s cumulative, 0.004515886306762695s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 192.71436142921448s cumulative, 0.0051059722900390625s individual

E
current test FAILED -- test_raise_status_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 192.80120062828064s cumulative, 0.08683919906616211s individual

E
current test FAILED -- test_raise_status_in_before_hook in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 192.88722586631775s cumulative, 0.08602523803710938s individual

.
current test PASSED/SKIPPED -- test_raise_status_in_before_hook in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 192.8941571712494s cumulative, 0.006931304931640625s individual

.
current test PASSED/SKIPPED -- test_raise_status_in_responder in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 192.8992223739624s cumulative, 0.005065202713012695s individual

E
current test FAILED -- test_raise_status_runs_after_hooks in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 193.02117037773132s cumulative, 0.1219480037689209s individual

.
current test PASSED/SKIPPED -- test_raise_status_survives_after_hooks in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 193.03050303459167s cumulative, 0.009332656860351562s individual

.
current test PASSED/SKIPPED -- test_raise_status_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 193.03630185127258s cumulative, 0.005798816680908203s individual

E
current test FAILED -- test_raise_status_survives_after_hooks in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 193.11713671684265s cumulative, 0.08083486557006836s individual

.
current test PASSED/SKIPPED -- test_raise_status_runs_after_hooks in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 193.12203574180603s cumulative, 0.004899024963378906s individual

E
current test FAILED -- test_raise_status_in_responder in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 193.1986107826233s cumulative, 0.07657504081726074s individual


tests/test_testing.py F
current test FAILED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 193.22672510147095s cumulative, 0.02811431884765625s individual

F
current test FAILED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 193.257098197937s cumulative, 0.030373096466064453s individual

F
current test FAILED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 193.28353810310364s cumulative, 0.026439905166625977s individual

F
current test FAILED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 193.30860447883606s cumulative, 0.025066375732421875s individual

F
current test FAILED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 193.3402738571167s cumulative, 0.03166937828063965s individual

F
current test FAILED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 193.36841869354248s cumulative, 0.02814483642578125s individual

F
current test FAILED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 193.39434599876404s cumulative, 0.025927305221557617s individual

F
current test FAILED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 195.19182181358337s cumulative, 1.797475814819336s individual


tests/test_uri_converters.py .
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.19668674468994s cumulative, 0.004864931106567383s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.2002592086792s cumulative, 0.0035724639892578125s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.20360398292542s cumulative, 0.0033447742462158203s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.20738649368286s cumulative, 0.003782510757446289s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.21090722084045s cumulative, 0.0035207271575927734s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.2138249874115s cumulative, 0.002917766571044922s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.21694016456604s cumulative, 0.0031151771545410156s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.22027778625488s cumulative, 0.0033376216888427734s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.22384309768677s cumulative, 0.0035653114318847656s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.2268443107605s cumulative, 0.0030012130737304688s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.2302372455597s cumulative, 0.003392934799194336s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.23417019844055s cumulative, 0.003932952880859375s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.23705101013184s cumulative, 0.0028808116912841797s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.24036145210266s cumulative, 0.0033104419708251953s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.2436375617981s cumulative, 0.0032761096954345703s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.24727511405945s cumulative, 0.003637552261352539s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.25074887275696s cumulative, 0.0034737586975097656s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.25393414497375s cumulative, 0.003185272216796875s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.25757217407227s cumulative, 0.003638029098510742s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.260826587677s cumulative, 0.003254413604736328s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.26414513587952s cumulative, 0.0033185482025146484s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.26709985733032s cumulative, 0.002954721450805664s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.26996684074402s cumulative, 0.002866983413696289s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.27310729026794s cumulative, 0.0031404495239257812s individual

.
current test PASSED/SKIPPED -- test_int_converter_invalid_config in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.27648639678955s cumulative, 0.0033791065216064453s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.2791690826416s cumulative, 0.0026826858520507812s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.282639503479s cumulative, 0.0034704208374023438s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.28538584709167s cumulative, 0.0027463436126708984s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.2885251045227s cumulative, 0.0031392574310302734s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.29111528396606s cumulative, 0.002590179443359375s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.29427242279053s cumulative, 0.0031571388244628906s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.29729962348938s cumulative, 0.003027200698852539s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.30141401290894s cumulative, 0.004114389419555664s individual

.
current test PASSED/SKIPPED -- test_int_converter_invalid_config in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.30412530899048s cumulative, 0.0027112960815429688s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.30711889266968s cumulative, 0.0029935836791992188s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.30977368354797s cumulative, 0.0026547908782958984s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.31304025650024s cumulative, 0.003266572952270508s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.31564378738403s cumulative, 0.0026035308837890625s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.31847023963928s cumulative, 0.0028264522552490234s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.3215036392212s cumulative, 0.0030333995819091797s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.32501363754272s cumulative, 0.003509998321533203s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.32800579071045s cumulative, 0.0029921531677246094s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.33060359954834s cumulative, 0.002597808837890625s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.33321619033813s cumulative, 0.002612590789794922s individual

.
current test PASSED/SKIPPED -- test_int_converter_invalid_config in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.33583784103394s cumulative, 0.0026216506958007812s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.33896565437317s cumulative, 0.0031278133392333984s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.3417730331421s cumulative, 0.0028073787689208984s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.3444128036499s cumulative, 0.0026397705078125s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.34750247001648s cumulative, 0.0030896663665771484s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.35150718688965s cumulative, 0.004004716873168945s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.35526061058044s cumulative, 0.0037534236907958984s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.35883498191833s cumulative, 0.003574371337890625s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.3620204925537s cumulative, 0.0031855106353759766s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.3651385307312s cumulative, 0.0031180381774902344s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.36826515197754s cumulative, 0.0031266212463378906s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.37142539024353s cumulative, 0.003160238265991211s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.37450051307678s cumulative, 0.003075122833251953s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.3775601387024s cumulative, 0.0030596256256103516s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.38068628311157s cumulative, 0.0031261444091796875s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.38381242752075s cumulative, 0.0031261444091796875s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.38685083389282s cumulative, 0.0030384063720703125s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.3899688720703s cumulative, 0.0031180381774902344s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.39255332946777s cumulative, 0.0025844573974609375s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.3951644897461s cumulative, 0.0026111602783203125s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.39819598197937s cumulative, 0.003031492233276367s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.40079259872437s cumulative, 0.002596616744995117s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.40390586853027s cumulative, 0.003113269805908203s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.40733909606934s cumulative, 0.0034332275390625s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.41166353225708s cumulative, 0.004324436187744141s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.41443753242493s cumulative, 0.0027740001678466797s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.4172112941742s cumulative, 0.002773761749267578s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.42065930366516s cumulative, 0.003448009490966797s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.42385506629944s cumulative, 0.0031957626342773438s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.42714524269104s cumulative, 0.0032901763916015625s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.42995071411133s cumulative, 0.002805471420288086s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.432541847229s cumulative, 0.0025911331176757812s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.43512773513794s cumulative, 0.002585887908935547s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.43777918815613s cumulative, 0.0026514530181884766s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.44041180610657s cumulative, 0.002632617950439453s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.44322633743286s cumulative, 0.0028145313262939453s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.44651794433594s cumulative, 0.003291606903076172s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.44928622245789s cumulative, 0.002768278121948242s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.4520230293274s cumulative, 0.002736806869506836s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.454838514328s cumulative, 0.0028154850006103516s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.45765328407288s cumulative, 0.002814769744873047s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.46025013923645s cumulative, 0.0025968551635742188s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.4632852077484s cumulative, 0.0030350685119628906s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.46610069274902s cumulative, 0.0028154850006103516s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.46906995773315s cumulative, 0.0029692649841308594s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.47193336486816s cumulative, 0.0028634071350097656s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.47499060630798s cumulative, 0.003057241439819336s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.4784233570099s cumulative, 0.003432750701904297s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.48108458518982s cumulative, 0.0026612281799316406s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.48398065567017s cumulative, 0.0028960704803466797s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.48671054840088s cumulative, 0.0027298927307128906s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.48973751068115s cumulative, 0.0030269622802734375s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.4924566745758s cumulative, 0.0027191638946533203s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.49615478515625s cumulative, 0.003698110580444336s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.49882197380066s cumulative, 0.0026671886444091797s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.50148057937622s cumulative, 0.0026586055755615234s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.50406694412231s cumulative, 0.00258636474609375s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.5066511631012s cumulative, 0.002584218978881836s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.50974798202515s cumulative, 0.0030968189239501953s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.5127248764038s cumulative, 0.0029768943786621094s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.51588249206543s cumulative, 0.0031576156616210938s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.51895689964294s cumulative, 0.0030744075775146484s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.52204585075378s cumulative, 0.0030889511108398438s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.52504920959473s cumulative, 0.003003358840942383s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.52816581726074s cumulative, 0.003116607666015625s individual

.
current test PASSED/SKIPPED -- test_datetime_converter_default_format in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.53069067001343s cumulative, 0.002524852752685547s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.53384232521057s cumulative, 0.0031516551971435547s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 195.53693842887878s cumulative, 0.0030961036682128906s individual


tests/test_media_handlers.py F
current test FAILED -- test_json_err_no_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 195.63276767730713s cumulative, 0.09582924842834473s individual

F
current test FAILED -- test_json_err_no_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 195.71412467956543s cumulative, 0.08135700225830078s individual


tests/test_request_attrs.py .
current test PASSED/SKIPPED -- test_host in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.71786761283875s cumulative, 0.0037429332733154297s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.72202920913696s cumulative, 0.0041615962982177734s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.7258336544037s cumulative, 0.003804445266723633s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.7301905155182s cumulative, 0.004356861114501953s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.73423552513123s cumulative, 0.004045009613037109s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.73799896240234s cumulative, 0.003763437271118164s individual

.
current test PASSED/SKIPPED -- test_date_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.74162793159485s cumulative, 0.003628969192504883s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.74528217315674s cumulative, 0.0036542415618896484s individual

.
current test PASSED/SKIPPED -- test_netloc_nondefault_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.74854373931885s cumulative, 0.003261566162109375s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.75238609313965s cumulative, 0.0038423538208007812s individual

.
current test PASSED/SKIPPED -- test_scheme_https in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.75580430030823s cumulative, 0.0034182071685791016s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.75939536094666s cumulative, 0.0035910606384277344s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.76325845718384s cumulative, 0.003863096237182617s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.76719117164612s cumulative, 0.0039327144622802734s individual

.
current test PASSED/SKIPPED -- test_client_accepts in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.7722203731537s cumulative, 0.005029201507568359s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.77628993988037s cumulative, 0.00406956672668457s individual

.
current test PASSED/SKIPPED -- test_date in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.7823085784912s cumulative, 0.006018638610839844s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.78728079795837s cumulative, 0.004972219467163086s individual

.
current test PASSED/SKIPPED -- test_netloc_from_env in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.79171299934387s cumulative, 0.004432201385498047s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.79542088508606s cumulative, 0.0037078857421875s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.7992603778839s cumulative, 0.0038394927978515625s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.8027834892273s cumulative, 0.003523111343383789s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.80669617652893s cumulative, 0.003912687301635742s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.81033372879028s cumulative, 0.003637552261352539s individual

.
current test PASSED/SKIPPED -- test_missing_qs in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.8130476474762s cumulative, 0.002713918685913086s individual

.
current test PASSED/SKIPPED -- test_uri in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.81613183021545s cumulative, 0.0030841827392578125s individual

.
current test PASSED/SKIPPED -- test_app_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.81868505477905s cumulative, 0.002553224563598633s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.8224868774414s cumulative, 0.0038018226623535156s individual

.
current test PASSED/SKIPPED -- test_client_accepts_bogus in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.8256492614746s cumulative, 0.003162384033203125s individual

.
current test PASSED/SKIPPED -- test_netloc_nondefault_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.82903599739075s cumulative, 0.0033867359161376953s individual

.
current test PASSED/SKIPPED -- test_app_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.83206725120544s cumulative, 0.0030312538146972656s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.8354034423828s cumulative, 0.003336191177368164s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.83900785446167s cumulative, 0.003604412078857422s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.84257698059082s cumulative, 0.0035691261291503906s individual

.
current test PASSED/SKIPPED -- test_port_explicit in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.84594321250916s cumulative, 0.003366231918334961s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.84951376914978s cumulative, 0.003570556640625s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.8533661365509s cumulative, 0.003852367401123047s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.85700726509094s cumulative, 0.0036411285400390625s individual

.
current test PASSED/SKIPPED -- test_netloc_nondefault_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.86041498184204s cumulative, 0.003407716751098633s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.86428427696228s cumulative, 0.003869295120239258s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.8678798675537s cumulative, 0.003595590591430664s individual

.
current test PASSED/SKIPPED -- test_netloc_from_env in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.87106037139893s cumulative, 0.0031805038452148438s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.87472867965698s cumulative, 0.0036683082580566406s individual

.
current test PASSED/SKIPPED -- test_range_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.88039445877075s cumulative, 0.005665779113769531s individual

.
current test PASSED/SKIPPED -- test_bogus_content_length_nan in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.88351798057556s cumulative, 0.0031235218048095703s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.88715934753418s cumulative, 0.003641366958618164s individual

.
current test PASSED/SKIPPED -- test_scheme_https in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.8915717601776s cumulative, 0.004412412643432617s individual

.
current test PASSED/SKIPPED -- test_client_accepts_props in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.89552092552185s cumulative, 0.003949165344238281s individual

.
current test PASSED/SKIPPED -- test_uri_http_1_0 in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.89905333518982s cumulative, 0.00353240966796875s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.90267133712769s cumulative, 0.003618001937866211s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.90643620491028s cumulative, 0.0037648677825927734s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.9104082584381s cumulative, 0.003972053527832031s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.9146692752838s cumulative, 0.004261016845703125s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.9182379245758s cumulative, 0.0035686492919921875s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.92185020446777s cumulative, 0.0036122798919677734s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.92580008506775s cumulative, 0.003949880599975586s individual

.
current test PASSED/SKIPPED -- test_netloc_default_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.92904472351074s cumulative, 0.003244638442993164s individual

.
current test PASSED/SKIPPED -- test_relative_uri in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.93232440948486s cumulative, 0.0032796859741210938s individual

.
current test PASSED/SKIPPED -- test_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.935617685318s cumulative, 0.003293275833129883s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.9389500617981s cumulative, 0.003332376480102539s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.94270992279053s cumulative, 0.0037598609924316406s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.94644784927368s cumulative, 0.003737926483154297s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.95024847984314s cumulative, 0.003800630569458008s individual

.
current test PASSED/SKIPPED -- test_nonlatin_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.95397567749023s cumulative, 0.0037271976470947266s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.9575765132904s cumulative, 0.0036008358001708984s individual

.
current test PASSED/SKIPPED -- test_range_unit in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.9613869190216s cumulative, 0.003810405731201172s individual

.
current test PASSED/SKIPPED -- test_etag_parsing_helper in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.96457266807556s cumulative, 0.003185749053955078s individual

.
current test PASSED/SKIPPED -- test_date_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.96845412254333s cumulative, 0.0038814544677734375s individual

.
current test PASSED/SKIPPED -- test_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.97211408615112s cumulative, 0.003659963607788086s individual

.
current test PASSED/SKIPPED -- test_date in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.97595691680908s cumulative, 0.0038428306579589844s individual

.
current test PASSED/SKIPPED -- test_uri_https in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.97996830940247s cumulative, 0.004011392593383789s individual

.
current test PASSED/SKIPPED -- test_etag_parsing_helper in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.98308181762695s cumulative, 0.0031135082244873047s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.9869134426117s cumulative, 0.003831624984741211s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.99056553840637s cumulative, 0.0036520957946777344s individual

.
current test PASSED/SKIPPED -- test_date_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.99379563331604s cumulative, 0.0032300949096679688s individual

.
current test PASSED/SKIPPED -- test_port_explicit in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 195.99719762802124s cumulative, 0.0034019947052001953s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.00077652931213s cumulative, 0.0035789012908935547s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.00437784194946s cumulative, 0.0036013126373291016s individual

.
current test PASSED/SKIPPED -- test_netloc_from_env in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.0075933933258s cumulative, 0.0032155513763427734s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.01117324829102s cumulative, 0.003579854965209961s individual

.
current test PASSED/SKIPPED -- test_date_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.0145857334137s cumulative, 0.003412485122680664s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.0182168483734s cumulative, 0.003631114959716797s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.0217936038971s cumulative, 0.0035767555236816406s individual

.
current test PASSED/SKIPPED -- test_netloc_nondefault_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.02502274513245s cumulative, 0.0032291412353515625s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.02837085723877s cumulative, 0.003348112106323242s individual

.
current test PASSED/SKIPPED -- test_etag_parsing_helper in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.03171110153198s cumulative, 0.0033402442932128906s individual

.
current test PASSED/SKIPPED -- test_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.035306930542s cumulative, 0.0035958290100097656s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.0397458076477s cumulative, 0.004438877105712891s individual

.
current test PASSED/SKIPPED -- test_app_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.0427896976471s cumulative, 0.0030438899993896484s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.04647541046143s cumulative, 0.0036857128143310547s individual

.
current test PASSED/SKIPPED -- test_etag_is_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.04995608329773s cumulative, 0.003480672836303711s individual

.
current test PASSED/SKIPPED -- test_scheme_https in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.05323553085327s cumulative, 0.003279447555541992s individual

.
current test PASSED/SKIPPED -- test_netloc_default_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.0564422607422s cumulative, 0.0032067298889160156s individual

.
current test PASSED/SKIPPED -- test_netloc_default_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.05968189239502s cumulative, 0.0032396316528320312s individual

.
current test PASSED/SKIPPED -- test_netloc_default_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.0631880760193s cumulative, 0.003506183624267578s individual

.
current test PASSED/SKIPPED -- test_range_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.06881761550903s cumulative, 0.005629539489746094s individual

.
current test PASSED/SKIPPED -- test_etag_parsing_helper in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.07210326194763s cumulative, 0.003285646438598633s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.07605385780334s cumulative, 0.003950595855712891s individual

.
current test PASSED/SKIPPED -- test_date_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.07955384254456s cumulative, 0.0034999847412109375s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.08335494995117s cumulative, 0.003801107406616211s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.0869846343994s cumulative, 0.0036296844482421875s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.09080362319946s cumulative, 0.003818988800048828s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.0956952571869s cumulative, 0.004891633987426758s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.09941148757935s cumulative, 0.0037162303924560547s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.1030285358429s cumulative, 0.0036170482635498047s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.10679292678833s cumulative, 0.0037643909454345703s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.11090087890625s cumulative, 0.004107952117919922s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.11470341682434s cumulative, 0.0038025379180908203s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.1185200214386s cumulative, 0.0038166046142578125s individual

.
current test PASSED/SKIPPED -- test_netloc_from_env in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.12251329421997s cumulative, 0.00399327278137207s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.12629580497742s cumulative, 0.003782510757446289s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.12999415397644s cumulative, 0.0036983489990234375s individual

.
current test PASSED/SKIPPED -- test_range_unit in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.13371586799622s cumulative, 0.0037217140197753906s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.1373496055603s cumulative, 0.003633737564086914s individual

.
current test PASSED/SKIPPED -- test_date_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.14076733589172s cumulative, 0.0034177303314208984s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.14461398124695s cumulative, 0.0038466453552246094s individual

.
current test PASSED/SKIPPED -- test_netloc_from_env in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.14806532859802s cumulative, 0.0034513473510742188s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.15280294418335s cumulative, 0.0047376155853271484s individual

.
current test PASSED/SKIPPED -- test_content_type_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.15663266181946s cumulative, 0.0038297176361083984s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.16111087799072s cumulative, 0.0044782161712646484s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.16555762290955s cumulative, 0.004446744918823242s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.17068576812744s cumulative, 0.005128145217895508s individual

.
current test PASSED/SKIPPED -- test_date_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.1749529838562s cumulative, 0.004267215728759766s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.17900443077087s cumulative, 0.0040514469146728516s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.18281984329224s cumulative, 0.0038154125213623047s individual

.
current test PASSED/SKIPPED -- test_client_prefers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.18638610839844s cumulative, 0.003566265106201172s individual

.
current test PASSED/SKIPPED -- test_port_explicit in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.18988513946533s cumulative, 0.0034990310668945312s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.1937620639801s cumulative, 0.003876924514770508s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.19774842262268s cumulative, 0.003986358642578125s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.20153760910034s cumulative, 0.003789186477661133s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.20550060272217s cumulative, 0.003962993621826172s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.2093949317932s cumulative, 0.003894329071044922s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.21333646774292s cumulative, 0.003941535949707031s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.21701550483704s cumulative, 0.003679037094116211s individual

.
current test PASSED/SKIPPED -- test_etag_parsing_helper in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.22035598754883s cumulative, 0.003340482711791992s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.22455191612244s cumulative, 0.0041959285736083984s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.22838425636292s cumulative, 0.0038323402404785156s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.23254346847534s cumulative, 0.004159212112426758s individual

.
current test PASSED/SKIPPED -- test_bogus_content_length_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.23575472831726s cumulative, 0.0032112598419189453s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.2398636341095s cumulative, 0.004108905792236328s individual

.
current test PASSED/SKIPPED -- test_empty in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.24347567558289s cumulative, 0.003612041473388672s individual

.
current test PASSED/SKIPPED -- test_subdomain in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.24816918373108s cumulative, 0.004693508148193359s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.25246691703796s cumulative, 0.004297733306884766s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.2563886642456s cumulative, 0.0039217472076416016s individual

.
current test PASSED/SKIPPED -- test_nonlatin_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.2598147392273s cumulative, 0.003426074981689453s individual

.
current test PASSED/SKIPPED -- test_date in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.2632339000702s cumulative, 0.003419160842895508s individual

.
current test PASSED/SKIPPED -- test_subdomain in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.26707291603088s cumulative, 0.0038390159606933594s individual

.
current test PASSED/SKIPPED -- test_date in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.27068209648132s cumulative, 0.003609180450439453s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.27437090873718s cumulative, 0.003688812255859375s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.27816104888916s cumulative, 0.003790140151977539s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.2818112373352s cumulative, 0.003650188446044922s individual

.
current test PASSED/SKIPPED -- test_bogus_content_length_nan in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.2854495048523s cumulative, 0.0036382675170898438s individual

.
current test PASSED/SKIPPED -- test_client_accepts_bogus in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.28865814208984s cumulative, 0.003208637237548828s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.29263973236084s cumulative, 0.003981590270996094s individual

.
current test PASSED/SKIPPED -- test_content_type_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.296452999115s cumulative, 0.0038132667541503906s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.30112552642822s cumulative, 0.004672527313232422s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.3048014640808s cumulative, 0.0036759376525878906s individual

.
current test PASSED/SKIPPED -- test_uri_http_1_0 in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.30852675437927s cumulative, 0.003725290298461914s individual

.
current test PASSED/SKIPPED -- test_scheme_https in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.31194758415222s cumulative, 0.0034208297729492188s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.31554889678955s cumulative, 0.0036013126373291016s individual

.
current test PASSED/SKIPPED -- test_port_explicit in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.31941175460815s cumulative, 0.0038628578186035156s individual

.
current test PASSED/SKIPPED -- test_nonlatin_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.3229432106018s cumulative, 0.0035314559936523438s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.32818961143494s cumulative, 0.005246400833129883s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.3322365283966s cumulative, 0.004046916961669922s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.33591151237488s cumulative, 0.0036749839782714844s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.33973479270935s cumulative, 0.0038232803344726562s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.3431272506714s cumulative, 0.003392457962036133s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.34710359573364s cumulative, 0.003976345062255859s individual

.
current test PASSED/SKIPPED -- test_empty_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.35073065757751s cumulative, 0.0036270618438720703s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.35474014282227s cumulative, 0.0040094852447509766s individual

.
current test PASSED/SKIPPED -- test_netloc_from_env in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.35854506492615s cumulative, 0.003804922103881836s individual

.
current test PASSED/SKIPPED -- test_host in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.36163687705994s cumulative, 0.0030918121337890625s individual

.
current test PASSED/SKIPPED -- test_app_present in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.36519837379456s cumulative, 0.0035614967346191406s individual

.
current test PASSED/SKIPPED -- test_nonlatin_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.36938214302063s cumulative, 0.004183769226074219s individual

.
current test PASSED/SKIPPED -- test_nonlatin_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.37301754951477s cumulative, 0.003635406494140625s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.37704730033875s cumulative, 0.004029750823974609s individual

.
current test PASSED/SKIPPED -- test_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.38094401359558s cumulative, 0.0038967132568359375s individual

.
current test PASSED/SKIPPED -- test_netloc_default_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.38455533981323s cumulative, 0.003611326217651367s individual

.
current test PASSED/SKIPPED -- test_reconstruct_url in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.38782286643982s cumulative, 0.003267526626586914s individual

.
current test PASSED/SKIPPED -- test_date_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.39166522026062s cumulative, 0.0038423538208007812s individual

.
current test PASSED/SKIPPED -- test_reconstruct_url in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.39463639259338s cumulative, 0.002971172332763672s individual

.
current test PASSED/SKIPPED -- test_uri_https in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.39810371398926s cumulative, 0.0034673213958740234s individual

.
current test PASSED/SKIPPED -- test_client_accepts in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.4034070968628s cumulative, 0.005303382873535156s individual

.
current test PASSED/SKIPPED -- test_date_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.40721678733826s cumulative, 0.003809690475463867s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.41063404083252s cumulative, 0.0034172534942626953s individual

.
current test PASSED/SKIPPED -- test_content_length_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.413587808609s cumulative, 0.002953767776489258s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.41729617118835s cumulative, 0.003708362579345703s individual

.
current test PASSED/SKIPPED -- test_client_accepts_props in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.4221179485321s cumulative, 0.00482177734375s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.42663836479187s cumulative, 0.004520416259765625s individual

.
current test PASSED/SKIPPED -- test_date_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.43063497543335s cumulative, 0.003996610641479492s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.43427848815918s cumulative, 0.003643512725830078s individual

.
current test PASSED/SKIPPED -- test_etag_parsing_helper in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.43753099441528s cumulative, 0.0032525062561035156s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.44094443321228s cumulative, 0.0034134387969970703s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.44498825073242s cumulative, 0.0040438175201416016s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.44874334335327s cumulative, 0.0037550926208496094s individual

.
current test PASSED/SKIPPED -- test_content_length_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.45173835754395s cumulative, 0.002995014190673828s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.45557117462158s cumulative, 0.0038328170776367188s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.45917558670044s cumulative, 0.003604412078857422s individual

.
current test PASSED/SKIPPED -- test_scheme_https in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.46257281303406s cumulative, 0.003397226333618164s individual

.
current test PASSED/SKIPPED -- test_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.46616625785828s cumulative, 0.00359344482421875s individual

.
current test PASSED/SKIPPED -- test_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.46958661079407s cumulative, 0.0034203529357910156s individual

.
current test PASSED/SKIPPED -- test_date in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.47298288345337s cumulative, 0.003396272659301758s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.47676181793213s cumulative, 0.0037789344787597656s individual

.
current test PASSED/SKIPPED -- test_relative_uri in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.47997117042542s cumulative, 0.003209352493286133s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.48337268829346s cumulative, 0.003401517868041992s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.48680520057678s cumulative, 0.0034325122833251953s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.49045395851135s cumulative, 0.0036487579345703125s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.49436950683594s cumulative, 0.003915548324584961s individual

.
current test PASSED/SKIPPED -- test_netloc_nondefault_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.4975790977478s cumulative, 0.0032095909118652344s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.50136065483093s cumulative, 0.003781557083129883s individual

.
current test PASSED/SKIPPED -- test_app_present in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.50467777252197s cumulative, 0.003317117691040039s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.5089771747589s cumulative, 0.0042994022369384766s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.51303577423096s cumulative, 0.0040585994720458984s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.51701474189758s cumulative, 0.0039789676666259766s individual

.
current test PASSED/SKIPPED -- test_client_prefers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.52038764953613s cumulative, 0.0033729076385498047s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.52411675453186s cumulative, 0.003729104995727539s individual

.
current test PASSED/SKIPPED -- test_nonlatin_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.5279185771942s cumulative, 0.0038018226623535156s individual

.
current test PASSED/SKIPPED -- test_netloc_nondefault_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.53228783607483s cumulative, 0.004369258880615234s individual

.
current test PASSED/SKIPPED -- test_etag_is_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.53527450561523s cumulative, 0.0029866695404052734s individual

.
current test PASSED/SKIPPED -- test_bogus_content_length_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.53842115402222s cumulative, 0.003146648406982422s individual

.
current test PASSED/SKIPPED -- test_missing_attribute_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.54156970977783s cumulative, 0.0031485557556152344s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.54526782035828s cumulative, 0.003698110580444336s individual

.
current test PASSED/SKIPPED -- test_scheme_https in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.54951333999634s cumulative, 0.0042455196380615234s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.5543601512909s cumulative, 0.004846811294555664s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.55923986434937s cumulative, 0.00487971305847168s individual

.
current test PASSED/SKIPPED -- test_missing_attribute_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.56241941452026s cumulative, 0.0031795501708984375s individual

.
current test PASSED/SKIPPED -- test_netloc_default_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.56578993797302s cumulative, 0.003370523452758789s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.56970930099487s cumulative, 0.003919363021850586s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.57382488250732s cumulative, 0.004115581512451172s individual

.
current test PASSED/SKIPPED -- test_date_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.5777769088745s cumulative, 0.0039520263671875s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.58151149749756s cumulative, 0.003734588623046875s individual

.
current test PASSED/SKIPPED -- test_empty_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.5848925113678s cumulative, 0.003381013870239258s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.58859729766846s cumulative, 0.0037047863006591797s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.59251499176025s cumulative, 0.003917694091796875s individual

.
current test PASSED/SKIPPED -- test_date in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.5961148738861s cumulative, 0.003599882125854492s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.59974646568298s cumulative, 0.003631591796875s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.60336565971375s cumulative, 0.0036191940307617188s individual

.
current test PASSED/SKIPPED -- test_date_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.60654830932617s cumulative, 0.003182649612426758s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.61038303375244s cumulative, 0.0038347244262695312s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.6138551235199s cumulative, 0.0034720897674560547s individual

.
current test PASSED/SKIPPED -- test_port_explicit in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.61712980270386s cumulative, 0.003274679183959961s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.62072348594666s cumulative, 0.0035936832427978516s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.62436747550964s cumulative, 0.0036439895629882812s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.62829566001892s cumulative, 0.003928184509277344s individual

.
current test PASSED/SKIPPED -- test_port_explicit in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.63157033920288s cumulative, 0.003274679183959961s individual

.
current test PASSED/SKIPPED -- test_empty in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.63458037376404s cumulative, 0.0030100345611572266s individual

.
current test PASSED/SKIPPED -- test_uri in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.6375994682312s cumulative, 0.003019094467163086s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 196.64101123809814s cumulative, 0.0034117698669433594s individual


tests/test_error.py .
current test PASSED/SKIPPED -- test_override_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.64471769332886s cumulative, 0.0037064552307128906s individual

.
current test PASSED/SKIPPED -- test_custom_400 in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.64780068397522s cumulative, 0.0030829906463623047s individual

.
current test PASSED/SKIPPED -- test_with_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.6505560874939s cumulative, 0.002755403518676758s individual

.
current test PASSED/SKIPPED -- test_override_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.6539590358734s cumulative, 0.0034029483795166016s individual

.
current test PASSED/SKIPPED -- test_other_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.65727639198303s cumulative, 0.0033173561096191406s individual

.
current test PASSED/SKIPPED -- test_no_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.66067910194397s cumulative, 0.0034027099609375s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.6635024547577s cumulative, 0.002823352813720703s individual

.
current test PASSED/SKIPPED -- test_other_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.66687321662903s cumulative, 0.0033707618713378906s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.6700210571289s cumulative, 0.0031478404998779297s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.67374515533447s cumulative, 0.0037240982055664062s individual

.
current test PASSED/SKIPPED -- test_args_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.67793655395508s cumulative, 0.004191398620605469s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.68071484565735s cumulative, 0.002778291702270508s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.68443155288696s cumulative, 0.003716707229614258s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.687269449234s cumulative, 0.0028378963470458984s individual

.
current test PASSED/SKIPPED -- test_args_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.69008350372314s cumulative, 0.002814054489135742s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.69285464286804s cumulative, 0.002771139144897461s individual

.
current test PASSED/SKIPPED -- test_http_error_repr in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.69537949562073s cumulative, 0.002524852752685547s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.6980698108673s cumulative, 0.0026903152465820312s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.70079708099365s cumulative, 0.0027272701263427734s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.70391631126404s cumulative, 0.003119230270385742s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.7066400051117s cumulative, 0.00272369384765625s individual

.
current test PASSED/SKIPPED -- test_args_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.70944547653198s cumulative, 0.002805471420288086s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.71210932731628s cumulative, 0.002663850784301758s individual

.
current test PASSED/SKIPPED -- test_override_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.7155578136444s cumulative, 0.003448486328125s individual

.
current test PASSED/SKIPPED -- test_args_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.71852660179138s cumulative, 0.0029687881469726562s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.72158026695251s cumulative, 0.0030536651611328125s individual

.
current test PASSED/SKIPPED -- test_no_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.72511649131775s cumulative, 0.003536224365234375s individual

.
current test PASSED/SKIPPED -- test_with_retry_after_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.72776341438293s cumulative, 0.002646923065185547s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.73081994056702s cumulative, 0.0030565261840820312s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.73358154296875s cumulative, 0.0027616024017333984s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.73627424240112s cumulative, 0.002692699432373047s individual

.
current test PASSED/SKIPPED -- test_custom_400 in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.73935747146606s cumulative, 0.0030832290649414062s individual

.
current test PASSED/SKIPPED -- test_args_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.74222803115845s cumulative, 0.0028705596923828125s individual

.
current test PASSED/SKIPPED -- test_override_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.74561524391174s cumulative, 0.0033872127532958984s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.74862837791443s cumulative, 0.003013134002685547s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.75130152702332s cumulative, 0.0026731491088867188s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.75405526161194s cumulative, 0.002753734588623047s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.75677847862244s cumulative, 0.002723217010498047s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.75951719284058s cumulative, 0.0027387142181396484s individual

.
current test PASSED/SKIPPED -- test_override_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.76297807693481s cumulative, 0.0034608840942382812s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.7656660079956s cumulative, 0.0026879310607910156s individual

.
current test PASSED/SKIPPED -- test_with_retry_after_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.7683036327362s cumulative, 0.002637624740600586s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.77130007743835s cumulative, 0.0029964447021484375s individual

.
current test PASSED/SKIPPED -- test_no_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.77516770362854s cumulative, 0.003867626190185547s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.7779471874237s cumulative, 0.0027794837951660156s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.78072500228882s cumulative, 0.0027778148651123047s individual

.
current test PASSED/SKIPPED -- test_override_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.78428506851196s cumulative, 0.0035600662231445312s individual

.
current test PASSED/SKIPPED -- test_other_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.78782844543457s cumulative, 0.003543376922607422s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.791024684906s cumulative, 0.003196239471435547s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.7940685749054s cumulative, 0.0030438899993896484s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.79712176322937s cumulative, 0.0030531883239746094s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.7998080253601s cumulative, 0.0026862621307373047s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.80252981185913s cumulative, 0.0027217864990234375s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.80534410476685s cumulative, 0.0028142929077148438s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.80796003341675s cumulative, 0.0026159286499023438s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.81075048446655s cumulative, 0.0027904510498046875s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.8133819103241s cumulative, 0.0026314258575439453s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.81641578674316s cumulative, 0.003033876419067383s individual

.
current test PASSED/SKIPPED -- test_other_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.81972646713257s cumulative, 0.003310680389404297s individual

.
current test PASSED/SKIPPED -- test_with_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.82234835624695s cumulative, 0.002621889114379883s individual

.
current test PASSED/SKIPPED -- test_override_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.82569527626038s cumulative, 0.0033469200134277344s individual

.
current test PASSED/SKIPPED -- test_other_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.82908725738525s cumulative, 0.0033919811248779297s individual

.
current test PASSED/SKIPPED -- test_other_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.83241200447083s cumulative, 0.003324747085571289s individual

.
current test PASSED/SKIPPED -- test_override_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.8357594013214s cumulative, 0.0033473968505859375s individual

.
current test PASSED/SKIPPED -- test_with_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.83854818344116s cumulative, 0.0027887821197509766s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.8413245677948s cumulative, 0.0027763843536376953s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.84401893615723s cumulative, 0.002694368362426758s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.84680438041687s cumulative, 0.0027854442596435547s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.84944248199463s cumulative, 0.002638101577758789s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.8521111011505s cumulative, 0.002668619155883789s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.85474514961243s cumulative, 0.0026340484619140625s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.85740494728088s cumulative, 0.0026597976684570312s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.86006951332092s cumulative, 0.0026645660400390625s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.86311626434326s cumulative, 0.003046751022338867s individual

.
current test PASSED/SKIPPED -- test_no_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.86778283119202s cumulative, 0.004666566848754883s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.87092399597168s cumulative, 0.003141164779663086s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.873699426651s cumulative, 0.002775430679321289s individual

.
current test PASSED/SKIPPED -- test_args_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.87657761573792s cumulative, 0.0028781890869140625s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.87947750091553s cumulative, 0.0028998851776123047s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.8822910785675s cumulative, 0.002813577651977539s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.88521099090576s cumulative, 0.002919912338256836s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.88814902305603s cumulative, 0.0029380321502685547s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.89088082313538s cumulative, 0.002731800079345703s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.89367032051086s cumulative, 0.0027894973754882812s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.89634084701538s cumulative, 0.0026705265045166016s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.89923334121704s cumulative, 0.0028924942016601562s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.90224432945251s cumulative, 0.003010988235473633s individual

.
current test PASSED/SKIPPED -- test_other_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.90567922592163s cumulative, 0.003434896469116211s individual

.
current test PASSED/SKIPPED -- test_override_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.90965580940247s cumulative, 0.003976583480834961s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.91313910484314s cumulative, 0.003483295440673828s individual

.
current test PASSED/SKIPPED -- test_other_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.91682171821594s cumulative, 0.0036826133728027344s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.91965985298157s cumulative, 0.002838134765625s individual

.
current test PASSED/SKIPPED -- test_other_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.92299914360046s cumulative, 0.0033392906188964844s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.92563390731812s cumulative, 0.002634763717651367s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.92839288711548s cumulative, 0.0027589797973632812s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.9310975074768s cumulative, 0.002704620361328125s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.93398094177246s cumulative, 0.002883434295654297s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.93660497665405s cumulative, 0.002624034881591797s individual

.
current test PASSED/SKIPPED -- test_with_retry_after_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.93921756744385s cumulative, 0.002612590789794922s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.94185733795166s cumulative, 0.0026397705078125s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.94449400901794s cumulative, 0.0026366710662841797s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.94728088378906s cumulative, 0.002786874771118164s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.951514005661s cumulative, 0.004233121871948242s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.95457410812378s cumulative, 0.0030601024627685547s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.95792174339294s cumulative, 0.003347635269165039s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.96083736419678s cumulative, 0.002915620803833008s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.96362590789795s cumulative, 0.002788543701171875s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.96630382537842s cumulative, 0.00267791748046875s individual

.
current test PASSED/SKIPPED -- test_other_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.96966814994812s cumulative, 0.0033643245697021484s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.9724576473236s cumulative, 0.0027894973754882812s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.975168466568s cumulative, 0.0027108192443847656s individual

.
current test PASSED/SKIPPED -- test_no_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.9785659313202s cumulative, 0.0033974647521972656s individual

.
current test PASSED/SKIPPED -- test_override_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.9818663597107s cumulative, 0.0033004283905029297s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.98452281951904s cumulative, 0.0026564598083496094s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.98755049705505s cumulative, 0.003027677536010742s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.99025583267212s cumulative, 0.0027053356170654297s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.9930703639984s cumulative, 0.0028145313262939453s individual

.
current test PASSED/SKIPPED -- test_other_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.99642252922058s cumulative, 0.0033521652221679688s individual

.
current test PASSED/SKIPPED -- test_no_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 196.99973130226135s cumulative, 0.0033087730407714844s individual

.
current test PASSED/SKIPPED -- test_override_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 197.00301933288574s cumulative, 0.0032880306243896484s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 197.00594902038574s cumulative, 0.0029296875s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 197.00896525382996s cumulative, 0.003016233444213867s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 197.0120244026184s cumulative, 0.0030591487884521484s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 197.0149803161621s cumulative, 0.002955913543701172s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 197.01831221580505s cumulative, 0.003331899642944336s individual

.
current test PASSED/SKIPPED -- test_other_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 197.0217480659485s cumulative, 0.003435850143432617s individual

.
current test PASSED/SKIPPED -- test_custom_400 in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 197.024822473526s cumulative, 0.0030744075775146484s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 197.02762055397034s cumulative, 0.0027980804443359375s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 197.03113794326782s cumulative, 0.0035173892974853516s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 197.03542613983154s cumulative, 0.004288196563720703s individual

.
current test PASSED/SKIPPED -- test_custom_400 in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 197.03861474990845s cumulative, 0.003188610076904297s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 197.04138374328613s cumulative, 0.002768993377685547s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 197.04402351379395s cumulative, 0.0026397705078125s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 197.0467312335968s cumulative, 0.0027077198028564453s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 197.04937410354614s cumulative, 0.0026428699493408203s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 197.05210709571838s cumulative, 0.002732992172241211s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 197.05486154556274s cumulative, 0.0027544498443603516s individual

.
current test PASSED/SKIPPED -- test_override_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 197.0583200454712s cumulative, 0.0034584999084472656s individual


tests/test_http_custom_method_routing.py ssssss
tests/asgi/test_request_context_asgi.py .
current test PASSED/SKIPPED -- test_custom_request_context_failure in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_context_asgi.py: 197.06114435195923s cumulative, 0.0028243064880371094s individual

.
current test PASSED/SKIPPED -- test_custom_request_context_request_access in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_context_asgi.py: 197.0640058517456s cumulative, 0.002861499786376953s individual

.
current test PASSED/SKIPPED -- test_custom_request_context in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_context_asgi.py: 197.06664061546326s cumulative, 0.002634763717651367s individual

.
current test PASSED/SKIPPED -- test_default_request_context in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_context_asgi.py: 197.06924319267273s cumulative, 0.0026025772094726562s individual


tests/test_media_multipart.py .
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.0782163143158s cumulative, 0.008973121643066406s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.0850534439087s cumulative, 0.006837129592895508s individual

.
current test PASSED/SKIPPED -- test_invalid_text_or_charset in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.08810377120972s cumulative, 0.0030503273010253906s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.0919108390808s cumulative, 0.00380706787109375s individual

.
current test PASSED/SKIPPED -- test_truncated_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.09852242469788s cumulative, 0.00661158561706543s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.10190439224243s cumulative, 0.003381967544555664s individual

.
current test PASSED/SKIPPED -- test_truncated_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.10799407958984s cumulative, 0.006089687347412109s individual

.
current test PASSED/SKIPPED -- test_filename_star in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.11565256118774s cumulative, 0.007658481597900391s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.12148022651672s cumulative, 0.005827665328979492s individual

.
current test PASSED/SKIPPED -- test_parse in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.1244513988495s cumulative, 0.002971172332763672s individual

.
current test PASSED/SKIPPED -- test_data_too_large in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.14145755767822s cumulative, 0.01700615882873535s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.14759755134583s cumulative, 0.006139993667602539s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.15731191635132s cumulative, 0.009714365005493164s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.16420769691467s cumulative, 0.006895780563354492s individual

.
current test PASSED/SKIPPED -- test_content_transfer_encoding_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.16938281059265s cumulative, 0.005175113677978516s individual

.
current test PASSED/SKIPPED -- test_parse in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.17223930358887s cumulative, 0.0028564929962158203s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.17538356781006s cumulative, 0.0031442642211914062s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.18127489089966s cumulative, 0.005891323089599609s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.18501353263855s cumulative, 0.0037386417388916016s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.1893548965454s cumulative, 0.0043413639068603516s individual

.
current test PASSED/SKIPPED -- test_empty_input in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.19195079803467s cumulative, 0.0025959014892578125s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.19569754600525s cumulative, 0.0037467479705810547s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.19897437095642s cumulative, 0.003276824951171875s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.20451140403748s cumulative, 0.0055370330810546875s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.21082639694214s cumulative, 0.006314992904663086s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.2168550491333s cumulative, 0.006028652191162109s individual

.
current test PASSED/SKIPPED -- test_invalid_text_or_charset in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.21981763839722s cumulative, 0.0029625892639160156s individual

.
current test PASSED/SKIPPED -- test_parse in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.23434376716614s cumulative, 0.014526128768920898s individual

.
current test PASSED/SKIPPED -- test_body_part_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.23744082450867s cumulative, 0.003097057342529297s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.24060654640198s cumulative, 0.003165721893310547s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.24372100830078s cumulative, 0.003114461898803711s individual

.
current test PASSED/SKIPPED -- test_invalid_random_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.26695775985718s cumulative, 0.023236751556396484s individual

.
current test PASSED/SKIPPED -- test_missing_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.26959538459778s cumulative, 0.002637624740600586s individual

.
current test PASSED/SKIPPED -- test_unknown_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.27216124534607s cumulative, 0.0025658607482910156s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.27532577514648s cumulative, 0.003164529800415039s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.28126764297485s cumulative, 0.005941867828369141s individual

.
current test PASSED/SKIPPED -- test_upload_multipart in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.28690099716187s cumulative, 0.005633354187011719s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.29314064979553s cumulative, 0.006239652633666992s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.29731822013855s cumulative, 0.004177570343017578s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.3058807849884s cumulative, 0.008562564849853516s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.31157803535461s cumulative, 0.0056972503662109375s individual

.
current test PASSED/SKIPPED -- test_from_buffered_stream in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.31420469284058s cumulative, 0.002626657485961914s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.3202154636383s cumulative, 0.006010770797729492s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.3237099647522s cumulative, 0.0034945011138916016s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.3272533416748s cumulative, 0.003543376922607422s individual

.
current test PASSED/SKIPPED -- test_body_part_properties in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.32994842529297s cumulative, 0.0026950836181640625s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.33319115638733s cumulative, 0.0032427310943603516s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.33653140068054s cumulative, 0.0033402442932128906s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.339825630188s cumulative, 0.003294229507446289s individual

.
current test PASSED/SKIPPED -- test_unexected_form_structure in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.3470253944397s cumulative, 0.007199764251708984s individual

.
current test PASSED/SKIPPED -- test_truncated_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.35643124580383s cumulative, 0.009405851364135742s individual

.
current test PASSED/SKIPPED -- test_invalid_random_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.3714120388031s cumulative, 0.014980792999267578s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.3753001689911s cumulative, 0.0038881301879882812s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.37972283363342s cumulative, 0.004422664642333984s individual

.
current test PASSED/SKIPPED -- test_upload_multipart in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.38947701454163s cumulative, 0.009754180908203125s individual

.
current test PASSED/SKIPPED -- test_unsupported_charset in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.40238571166992s cumulative, 0.012908697128295898s individual

.
current test PASSED/SKIPPED -- test_truncated_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.411851644516s cumulative, 0.009465932846069336s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.42171168327332s cumulative, 0.009860038757324219s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.42922472953796s cumulative, 0.0075130462646484375s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.43274784088135s cumulative, 0.003523111343383789s individual

.
current test PASSED/SKIPPED -- test_nested_multipart_mixed in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.4382815361023s cumulative, 0.005533695220947266s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.44201135635376s cumulative, 0.0037298202514648438s individual

.
current test PASSED/SKIPPED -- test_unexected_form_structure in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.45221829414368s cumulative, 0.010206937789916992s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.45833134651184s cumulative, 0.0061130523681640625s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.4642198085785s cumulative, 0.005888462066650391s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.46809816360474s cumulative, 0.003878355026245117s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.4714014530182s cumulative, 0.0033032894134521484s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.47719812393188s cumulative, 0.005796670913696289s individual

.
current test PASSED/SKIPPED -- test_truncated_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.4830195903778s cumulative, 0.0058214664459228516s individual

.
current test PASSED/SKIPPED -- test_data_too_large in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.49399757385254s cumulative, 0.010977983474731445s individual

.
current test PASSED/SKIPPED -- test_unsupported_charset in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.49958610534668s cumulative, 0.005588531494140625s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.50591802597046s cumulative, 0.006331920623779297s individual

.
current test PASSED/SKIPPED -- test_deserialize_part_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.51176047325134s cumulative, 0.005842447280883789s individual

.
current test PASSED/SKIPPED -- test_serialize in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.51454257965088s cumulative, 0.002782106399536133s individual

.
current test PASSED/SKIPPED -- test_invalid_text_or_charset in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.51752996444702s cumulative, 0.002987384796142578s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.52281308174133s cumulative, 0.0052831172943115234s individual

.
current test PASSED/SKIPPED -- test_deserialize_custom_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.52848386764526s cumulative, 0.005670785903930664s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.53461122512817s cumulative, 0.006127357482910156s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.5387065410614s cumulative, 0.004095315933227539s individual

.
current test PASSED/SKIPPED -- test_truncated_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.54469990730286s cumulative, 0.005993366241455078s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.55050134658813s cumulative, 0.00580143928527832s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.55400443077087s cumulative, 0.003503084182739258s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.5574176311493s cumulative, 0.0034132003784179688s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.56363892555237s cumulative, 0.006221294403076172s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.56876468658447s cumulative, 0.005125761032104492s individual

.
current test PASSED/SKIPPED -- test_deserialize_part_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.57460737228394s cumulative, 0.005842685699462891s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.5781180858612s cumulative, 0.003510713577270508s individual

.
current test PASSED/SKIPPED -- test_deserialize_custom_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.5861005783081s cumulative, 0.007982492446899414s individual

.
current test PASSED/SKIPPED -- test_content_transfer_encoding_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.5935754776001s cumulative, 0.0074748992919921875s individual

.
current test PASSED/SKIPPED -- test_empty_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.5967092514038s cumulative, 0.0031337738037109375s individual

.
current test PASSED/SKIPPED -- test_parse in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.59983015060425s cumulative, 0.003120899200439453s individual

.
current test PASSED/SKIPPED -- test_filename_star in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.60619449615479s cumulative, 0.006364345550537109s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.6133677959442s cumulative, 0.007173299789428711s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.61663913726807s cumulative, 0.003271341323852539s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.62299966812134s cumulative, 0.006360530853271484s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.62618446350098s cumulative, 0.003184795379638672s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.63320231437683s cumulative, 0.007017850875854492s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.6369514465332s cumulative, 0.0037491321563720703s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.64060735702515s cumulative, 0.0036559104919433594s individual

.
current test PASSED/SKIPPED -- test_invalid_text_or_charset in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.64386510849s cumulative, 0.00325775146484375s individual

.
current test PASSED/SKIPPED -- test_truncated_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.65096497535706s cumulative, 0.00709986686706543s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.654314994812s cumulative, 0.0033500194549560547s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.65991353988647s cumulative, 0.005598545074462891s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.66597986221313s cumulative, 0.006066322326660156s individual

.
current test PASSED/SKIPPED -- test_truncated_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 197.67249822616577s cumulative, 0.006518363952636719s individual


tests/test_http_method_routing.py E
current test FAILED -- test_meta_and_others_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 197.76090669631958s cumulative, 0.0884084701538086s individual

.
current test PASSED/SKIPPED -- test_report in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 197.77433514595032s cumulative, 0.013428449630737305s individual

.
current test PASSED/SKIPPED -- test_method_not_allowed_with_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 197.7891721725464s cumulative, 0.014837026596069336s individual

E
current test FAILED -- test_methods_not_allowed_simple in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 197.86237239837646s cumulative, 0.07320022583007812s individual

E
current test FAILED -- test_methods_not_allowed_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 197.9338436126709s cumulative, 0.0714712142944336s individual

E
current test FAILED -- test_put in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 198.00765800476074s cumulative, 0.07381439208984375s individual

.
current test PASSED/SKIPPED -- test_meta_and_others_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 198.0143449306488s cumulative, 0.0066869258880615234s individual

E
current test FAILED -- test_report in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 198.08625173568726s cumulative, 0.07190680503845215s individual

.
current test PASSED/SKIPPED -- test_methods_not_allowed_simple in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 198.09407567977905s cumulative, 0.007823944091796875s individual

E
current test FAILED -- test_method_not_allowed_with_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 198.167053937912s cumulative, 0.07297825813293457s individual

E
current test FAILED -- test_misc in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 199.81312537193298s cumulative, 1.646071434020996s individual

.
current test PASSED/SKIPPED -- test_on_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 199.82038044929504s cumulative, 0.007255077362060547s individual

.
current test PASSED/SKIPPED -- test_post_not_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 199.8269340991974s cumulative, 0.00655364990234375s individual

.
current test PASSED/SKIPPED -- test_default_on_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 199.83270478248596s cumulative, 0.005770683288574219s individual

.
current test PASSED/SKIPPED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 199.83888912200928s cumulative, 0.00618433952331543s individual

E
current test FAILED -- test_post_not_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 199.9198305606842s cumulative, 0.08094143867492676s individual

E
current test FAILED -- test_default_on_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 199.99892139434814s cumulative, 0.07909083366394043s individual

E
current test FAILED -- test_on_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 200.07182788848877s cumulative, 0.072906494140625s individual

E
current test FAILED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 200.1418972015381s cumulative, 0.0700693130493164s individual

.
current test PASSED/SKIPPED -- test_methods_not_allowed_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 200.15647673606873s cumulative, 0.014579534530639648s individual

.
current test PASSED/SKIPPED -- test_misc in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 200.16319751739502s cumulative, 0.006720781326293945s individual

E
current test FAILED -- test_meta_and_others_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 200.23995184898376s cumulative, 0.07675433158874512s individual

.
current test PASSED/SKIPPED -- test_meta_and_others_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 200.24581360816956s cumulative, 0.005861759185791016s individual

.
current test PASSED/SKIPPED -- test_put in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 200.25186896324158s cumulative, 0.006055355072021484s individual


tests/test_buffered_reader.py .
current test PASSED/SKIPPED -- test_pipe_until in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 200.89577960968018s cumulative, 0.6439106464385986s individual


tests/asgi/test_ws.py .
current test PASSED/SKIPPED -- test_ws_context_timeout in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 205.9141104221344s cumulative, 5.018330812454224s individual


tests/asgi/test_scope.py .
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 205.92032504081726s cumulative, 0.006214618682861328s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 205.92504167556763s cumulative, 0.004716634750366211s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 205.92968916893005s cumulative, 0.004647493362426758s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 205.93481922149658s cumulative, 0.00513005256652832s individual

.
current test PASSED/SKIPPED -- test_missing_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 205.93905758857727s cumulative, 0.0042383670806884766s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 205.94276881217957s cumulative, 0.003711223602294922s individual

.
current test PASSED/SKIPPED -- test_unsupported_scope_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 205.94603729248047s cumulative, 0.0032684803009033203s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 205.94986987113953s cumulative, 0.003832578659057617s individual

.
current test PASSED/SKIPPED -- test_scheme in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 205.95340776443481s cumulative, 0.003537893295288086s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 205.95678663253784s cumulative, 0.0033788681030273438s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 205.96295809745789s cumulative, 0.006171464920043945s individual

.
current test PASSED/SKIPPED -- test_scheme in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 205.96647381782532s cumulative, 0.0035157203674316406s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 205.97129154205322s cumulative, 0.0048177242279052734s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 205.97460889816284s cumulative, 0.0033173561096191406s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 205.97812747955322s cumulative, 0.0035185813903808594s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 205.9816586971283s cumulative, 0.003531217575073242s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 205.98612213134766s cumulative, 0.0044634342193603516s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 205.98972702026367s cumulative, 0.003604888916015625s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 205.9932882785797s cumulative, 0.003561258316040039s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 205.997230052948s cumulative, 0.003941774368286133s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 206.00062489509583s cumulative, 0.0033948421478271484s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 206.0040566921234s cumulative, 0.0034317970275878906s individual

.
current test PASSED/SKIPPED -- test_cookies in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 206.006751537323s cumulative, 0.002694845199584961s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 206.01037073135376s cumulative, 0.0036191940307617188s individual

.
current test PASSED/SKIPPED -- test_scheme in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 206.01310920715332s cumulative, 0.002738475799560547s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 206.01675367355347s cumulative, 0.0036444664001464844s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 206.0199477672577s cumulative, 0.003194093704223633s individual

.
current test PASSED/SKIPPED -- test_scheme in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 206.02267003059387s cumulative, 0.0027222633361816406s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 206.02679991722107s cumulative, 0.004129886627197266s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_default_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 206.03122663497925s cumulative, 0.004426717758178711s individual

.
current test PASSED/SKIPPED -- test_cookies in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 206.0339925289154s cumulative, 0.0027658939361572266s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 206.03815960884094s cumulative, 0.004167079925537109s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 206.04157614707947s cumulative, 0.0034165382385253906s individual

.
current test PASSED/SKIPPED -- test_unsupported_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 206.0448136329651s cumulative, 0.003237485885620117s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 206.04998588562012s cumulative, 0.005172252655029297s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 206.05333471298218s cumulative, 0.003348827362060547s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 206.0574803352356s cumulative, 0.004145622253417969s individual

.
current test PASSED/SKIPPED -- test_unsupported_scope_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 206.06097674369812s cumulative, 0.003496408462524414s individual

.
current test PASSED/SKIPPED -- test_unsupported_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 206.0645775794983s cumulative, 0.0036008358001708984s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 206.06946468353271s cumulative, 0.004887104034423828s individual

.
current test PASSED/SKIPPED -- test_scheme in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 206.0724232196808s cumulative, 0.002958536148071289s individual

.
current test PASSED/SKIPPED -- test_scheme in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 206.07560086250305s cumulative, 0.003177642822265625s individual

.
current test PASSED/SKIPPED -- test_unsupported_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 206.0799593925476s cumulative, 0.004358530044555664s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 206.08462071418762s cumulative, 0.0046613216400146484s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 206.0885510444641s cumulative, 0.003930330276489258s individual

.
current test PASSED/SKIPPED -- test_scheme in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 206.091787815094s cumulative, 0.0032367706298828125s individual

.
current test PASSED/SKIPPED -- test_cookies_options_meathod in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 206.09466361999512s cumulative, 0.002875804901123047s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 206.09821486473083s cumulative, 0.0035512447357177734s individual

.
current test PASSED/SKIPPED -- test_query_string_values in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 206.10536575317383s cumulative, 0.007150888442993164s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 206.10886454582214s cumulative, 0.0034987926483154297s individual

.
current test PASSED/SKIPPED -- test_unsupported_scope_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 206.11230397224426s cumulative, 0.0034394264221191406s individual

.
current test PASSED/SKIPPED -- test_unsupported_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 206.11570763587952s cumulative, 0.0034036636352539062s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 206.11959195137024s cumulative, 0.0038843154907226562s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 206.1233229637146s cumulative, 0.0037310123443603516s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 206.12667870521545s cumulative, 0.003355741500854492s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 206.13021397590637s cumulative, 0.0035352706909179688s individual


tests/test_uri_templates.py F
current test FAILED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 206.21319961547852s cumulative, 0.08298563957214355s individual

F
current test FAILED -- test_same_level_complex_var in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 206.29511976242065s cumulative, 0.08192014694213867s individual

F
current test FAILED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 206.37020993232727s cumulative, 0.07509016990661621s individual

F
current test FAILED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 206.4498405456543s cumulative, 0.07963061332702637s individual

F
current test FAILED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 208.41835522651672s cumulative, 1.9685146808624268s individual

F
current test FAILED -- test_adding_suffix_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 208.53197693824768s cumulative, 0.11362171173095703s individual

F
current test FAILED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 208.61852288246155s cumulative, 0.08654594421386719s individual

F
current test FAILED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 208.69954895973206s cumulative, 0.08102607727050781s individual

F
current test FAILED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 208.7831883430481s cumulative, 0.08363938331604004s individual

F
current test FAILED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 208.86670017242432s cumulative, 0.0835118293762207s individual

F
current test FAILED -- test_multiple in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 208.9591019153595s cumulative, 0.09240174293518066s individual

F
current test FAILED -- test_uuid_converter_complex_segment in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 209.0487949848175s cumulative, 0.08969306945800781s individual

F
current test FAILED -- test_no_vars in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 209.1404628753662s cumulative, 0.09166789054870605s individual

F
current test FAILED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 210.98208355903625s cumulative, 1.841620683670044s individual

F
current test FAILED -- test_converter_custom in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 211.06631302833557s cumulative, 0.0842294692993164s individual

F
current test FAILED -- test_with_and_without_trailing_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 211.1417098045349s cumulative, 0.07539677619934082s individual

F
current test FAILED -- test_converter_custom in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 211.2201850414276s cumulative, 0.0784752368927002s individual

F
current test FAILED -- test_single_path_segment in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 211.33833694458008s cumulative, 0.11815190315246582s individual

F
current test FAILED -- test_int_converter_rejections in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 211.46165204048157s cumulative, 0.12331509590148926s individual

F
current test FAILED -- test_single in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 211.5794427394867s cumulative, 0.11779069900512695s individual

F
current test FAILED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 211.69764590263367s cumulative, 0.11820316314697266s individual

F
current test FAILED -- test_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 211.78075885772705s cumulative, 0.08311295509338379s individual

F
current test FAILED -- test_same_level_complex_var in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 211.86370420455933s cumulative, 0.08294534683227539s individual

F
current test FAILED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 213.6589322090149s cumulative, 1.7952280044555664s individual

F
current test FAILED -- test_root_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 213.74145340919495s cumulative, 0.08252120018005371s individual

F
current test FAILED -- test_int_converter_rejections in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 213.82591199874878s cumulative, 0.08445858955383301s individual

F
current test FAILED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 213.9037549495697s cumulative, 0.07784295082092285s individual

F
current test FAILED -- test_float_converter_non_finite_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 213.9889931678772s cumulative, 0.08523821830749512s individual

F
current test FAILED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 214.06564116477966s cumulative, 0.07664799690246582s individual

F
current test FAILED -- test_single in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 214.14043021202087s cumulative, 0.07478904724121094s individual

F
current test FAILED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 214.22871947288513s cumulative, 0.08828926086425781s individual

F
current test FAILED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 214.3109736442566s cumulative, 0.08225417137145996s individual

F
current test FAILED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 214.40056371688843s cumulative, 0.08959007263183594s individual

F
current test FAILED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 216.129399061203s cumulative, 1.7288353443145752s individual

F
current test FAILED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 216.2157003879547s cumulative, 0.08630132675170898s individual

F
current test FAILED -- test_converter_custom in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 216.29730319976807s cumulative, 0.08160281181335449s individual

F
current test FAILED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 216.38032484054565s cumulative, 0.08302164077758789s individual

F
current test FAILED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 216.47305846214294s cumulative, 0.09273362159729004s individual

F
current test FAILED -- test_single_trailing_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 216.55411672592163s cumulative, 0.08105826377868652s individual

F
current test FAILED -- test_single in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 216.63738489151s cumulative, 0.0832681655883789s individual

F
current test FAILED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 216.7205629348755s cumulative, 0.08317804336547852s individual

F
current test FAILED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 216.8003396987915s cumulative, 0.07977676391601562s individual

F
current test FAILED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 216.88496208190918s cumulative, 0.08462238311767578s individual

F
current test FAILED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 218.65856862068176s cumulative, 1.773606538772583s individual

F
current test FAILED -- test_with_and_without_trailing_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 218.7430031299591s cumulative, 0.08443450927734375s individual

F
current test FAILED -- test_int_converter_rejections in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 218.82240390777588s cumulative, 0.07940077781677246s individual

F
current test FAILED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 218.90814995765686s cumulative, 0.08574604988098145s individual

F
current test FAILED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 218.98350882530212s cumulative, 0.07535886764526367s individual

F
current test FAILED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 219.0601155757904s cumulative, 0.07660675048828125s individual

F
current test FAILED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 219.14677619934082s cumulative, 0.08666062355041504s individual

F
current test FAILED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 219.22339177131653s cumulative, 0.07661557197570801s individual


tests/test_slots.py .
current test PASSED/SKIPPED -- test_slots_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_slots.py: 219.22646951675415s cumulative, 0.0030777454376220703s individual

.
current test PASSED/SKIPPED -- test_slots_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_slots.py: 219.22980666160583s cumulative, 0.0033371448516845703s individual

.
current test PASSED/SKIPPED -- test_slots_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_slots.py: 219.23265314102173s cumulative, 0.0028464794158935547s individual

.
current test PASSED/SKIPPED -- test_slots_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_slots.py: 219.2356240749359s cumulative, 0.0029709339141845703s individual


tests/test_buffered_reader.py .
current test PASSED/SKIPPED -- test_fragmented_reads in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 220.32079195976257s cumulative, 1.0851678848266602s individual


tests/asgi/test_boundedstream_asgi.py .
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.3253879547119s cumulative, 0.00459599494934082s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.32900381088257s cumulative, 0.003615856170654297s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.33250427246094s cumulative, 0.0035004615783691406s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.33617687225342s cumulative, 0.0036725997924804688s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.33969283103943s cumulative, 0.003515958786010742s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.3436315059662s cumulative, 0.0039386749267578125s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.34721446037292s cumulative, 0.0035829544067382812s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.35067057609558s cumulative, 0.00345611572265625s individual

.
current test PASSED/SKIPPED -- test_iterate_streaming_request in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.3532485961914s cumulative, 0.0025780200958251953s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.35686564445496s cumulative, 0.0036170482635498047s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.36048913002014s cumulative, 0.003623485565185547s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.36540246009827s cumulative, 0.004913330078125s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.3689603805542s cumulative, 0.003557920455932617s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.37708568572998s cumulative, 0.00812530517578125s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.38067841529846s cumulative, 0.0035927295684814453s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.38428854942322s cumulative, 0.0036101341247558594s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.38771653175354s cumulative, 0.0034279823303222656s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.3911633491516s cumulative, 0.003446817398071289s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.39560270309448s cumulative, 0.004439353942871094s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.3994424343109s cumulative, 0.003839731216430664s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.40392637252808s cumulative, 0.004483938217163086s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.40891456604004s cumulative, 0.004988193511962891s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.41345357894897s cumulative, 0.004539012908935547s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.41811180114746s cumulative, 0.004658222198486328s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.42235803604126s cumulative, 0.004246234893798828s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.42672777175903s cumulative, 0.0043697357177734375s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.43108797073364s cumulative, 0.004360198974609375s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.43559908866882s cumulative, 0.004511117935180664s individual

.
current test PASSED/SKIPPED -- test_exhaust in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.43933534622192s cumulative, 0.003736257553100586s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.44356179237366s cumulative, 0.0042264461517333984s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.4476022720337s cumulative, 0.00404047966003418s individual

.
current test PASSED/SKIPPED -- test_filelike in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.45163559913635s cumulative, 0.004033327102661133s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.46594905853271s cumulative, 0.014313459396362305s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.4721372127533s cumulative, 0.006188154220581055s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.4761073589325s cumulative, 0.003970146179199219s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.48001074790955s cumulative, 0.0039033889770507812s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.48374462127686s cumulative, 0.0037338733673095703s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.48771739006042s cumulative, 0.003972768783569336s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.49142360687256s cumulative, 0.003706216812133789s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.4951844215393s cumulative, 0.003760814666748047s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.4989528656006s cumulative, 0.003768444061279297s individual

.
current test PASSED/SKIPPED -- test_exhaust_with_disconnect in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.50179505348206s cumulative, 0.0028421878814697266s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.50543332099915s cumulative, 0.0036382675170898438s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.50984859466553s cumulative, 0.004415273666381836s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.5143609046936s cumulative, 0.004512310028076172s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.51837253570557s cumulative, 0.004011631011962891s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.5232129096985s cumulative, 0.004840373992919922s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.5271532535553s cumulative, 0.0039403438568115234s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.5308587551117s cumulative, 0.0037055015563964844s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.5394253730774s cumulative, 0.008566617965698242s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.54755687713623s cumulative, 0.00813150405883789s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.55166244506836s cumulative, 0.004105567932128906s individual

.
current test PASSED/SKIPPED -- test_iteration_already_started in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.55693745613098s cumulative, 0.00527501106262207s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.5612986087799s cumulative, 0.004361152648925781s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.56509852409363s cumulative, 0.003799915313720703s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.5688714981079s cumulative, 0.0037729740142822266s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.5727882385254s cumulative, 0.003916740417480469s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.57661294937134s cumulative, 0.0038247108459472656s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.5805926322937s cumulative, 0.003979682922363281s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.58456015586853s cumulative, 0.0039675235748291016s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.5897979736328s cumulative, 0.0052378177642822266s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.59390592575073s cumulative, 0.004107952117919922s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.5980658531189s cumulative, 0.0041599273681640625s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.6027958393097s cumulative, 0.0047299861907958984s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 220.60736441612244s cumulative, 0.004568576812744141s individual


tests/asgi/test_hello_asgi.py .
current test PASSED/SKIPPED -- test_no_body_on_head in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 220.61683344841003s cumulative, 0.009469032287597656s individual

.
current test PASSED/SKIPPED -- test_genfunc_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 220.62354683876038s cumulative, 0.006713390350341797s individual

.
current test PASSED/SKIPPED -- test_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 220.63372993469238s cumulative, 0.010183095932006836s individual

.
current test PASSED/SKIPPED -- test_env_headers_list_of_tuples in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 220.6369287967682s cumulative, 0.003198862075805664s individual

.
current test PASSED/SKIPPED -- test_filelike_using_helper in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 220.64425683021545s cumulative, 0.007328033447265625s individual

.
current test PASSED/SKIPPED -- test_coroutine_required in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 220.6489577293396s cumulative, 0.004700899124145508s individual

.
current test PASSED/SKIPPED -- test_filelike_closing_aiofiles in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 220.683527469635s cumulative, 0.034569740295410156s individual

.
current test PASSED/SKIPPED -- test_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 220.6901195049286s cumulative, 0.0065920352935791016s individual

.
current test PASSED/SKIPPED -- test_noncoroutine_required in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 220.69364428520203s cumulative, 0.0035247802734375s individual

.
current test PASSED/SKIPPED -- test_filelike_closing in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 220.70144605636597s cumulative, 0.00780177116394043s individual

.
current test PASSED/SKIPPED -- test_filelike in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 220.7084445953369s cumulative, 0.006998538970947266s individual

.
current test PASSED/SKIPPED -- test_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 220.71540141105652s cumulative, 0.006956815719604492s individual

.
current test PASSED/SKIPPED -- test_stream_known_len in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 220.7203724384308s cumulative, 0.004971027374267578s individual

.
current test PASSED/SKIPPED -- test_closing_stream in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 220.72576665878296s cumulative, 0.0053942203521728516s individual

.
current test PASSED/SKIPPED -- test_root_route in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 220.73117303848267s cumulative, 0.005406379699707031s individual

.
current test PASSED/SKIPPED -- test_closing_stream in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 220.73979711532593s cumulative, 0.008624076843261719s individual

.
current test PASSED/SKIPPED -- test_stream_chunked in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 220.74559092521667s cumulative, 0.00579380989074707s individual

.
current test PASSED/SKIPPED -- test_no_route in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 220.75062727928162s cumulative, 0.005036354064941406s individual

.
current test PASSED/SKIPPED -- test_closing_stream in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 220.7563512325287s cumulative, 0.0057239532470703125s individual

.
current test PASSED/SKIPPED -- test_filelike_closing in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 220.7631242275238s cumulative, 0.0067729949951171875s individual

.
current test PASSED/SKIPPED -- test_nongenfunc_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 220.7698061466217s cumulative, 0.006681919097900391s individual

.
current test PASSED/SKIPPED -- test_closing_stream in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 220.775737285614s cumulative, 0.00593113899230957s individual

.
current test PASSED/SKIPPED -- test_status_not_set in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 220.78131580352783s cumulative, 0.005578517913818359s individual


tests/test_python_version_requirements.py .
current test PASSED/SKIPPED -- test_asgi in /home/kaiyaok2/PythonProjects/falcon/tests/test_python_version_requirements.py: 220.78414702415466s cumulative, 0.0028312206268310547s individual


tests/test_before_hooks.py .
current test PASSED/SKIPPED -- test_piggybacking_resource_post_and_delete in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 220.8029236793518s cumulative, 0.018776655197143555s individual

.
current test PASSED/SKIPPED -- test_field_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 220.81020259857178s cumulative, 0.007278919219970703s individual

E
current test FAILED -- test_field_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 220.91776943206787s cumulative, 0.10756683349609375s individual

.
current test PASSED/SKIPPED -- test_param_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 220.92463898658752s cumulative, 0.00686955451965332s individual

.
current test PASSED/SKIPPED -- test_parser_async in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 220.93099308013916s cumulative, 0.006354093551635742s individual

E
current test FAILED -- test_field_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 221.01856303215027s cumulative, 0.0875699520111084s individual

.
current test PASSED/SKIPPED -- test_field_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 221.02568864822388s cumulative, 0.0071256160736083984s individual

.
current test PASSED/SKIPPED -- test_parser_async in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 221.03214478492737s cumulative, 0.006456136703491211s individual

E
current test FAILED -- test_multiple_resource_hooks in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 222.90766859054565s cumulative, 1.8755238056182861s individual

E
current test FAILED -- test_piggybacking_resource_post_item in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 223.02058601379395s cumulative, 0.11291742324829102s individual

.
current test PASSED/SKIPPED -- test_parser_sync in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 223.03064370155334s cumulative, 0.010057687759399414s individual

E
current test FAILED -- test_input_validator_inherited in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 223.13819098472595s cumulative, 0.10754728317260742s individual

E
current test FAILED -- test_field_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 223.22630190849304s cumulative, 0.08811092376708984s individual

E
current test FAILED -- test_multiple_resource_hooks in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 223.31635642051697s cumulative, 0.09005451202392578s individual

.
current test PASSED/SKIPPED -- test_parser_async in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 223.32570910453796s cumulative, 0.009352684020996094s individual

.
current test PASSED/SKIPPED -- test_piggybacking_resource_post_item in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 223.3332450389862s cumulative, 0.0075359344482421875s individual

.
current test PASSED/SKIPPED -- test_parser_sync in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 223.33847498893738s cumulative, 0.005229949951171875s individual

.
current test PASSED/SKIPPED -- test_parser_async in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 223.34528136253357s cumulative, 0.006806373596191406s individual

.
current test PASSED/SKIPPED -- test_wrapped_resource_with_hooks_aware_of_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 223.35463047027588s cumulative, 0.00934910774230957s individual

.
current test PASSED/SKIPPED -- test_input_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 223.35972261428833s cumulative, 0.005092144012451172s individual

.
current test PASSED/SKIPPED -- test_multiple_resource_hooks in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 223.36517572402954s cumulative, 0.0054531097412109375s individual

E
current test FAILED -- test_input_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 223.47685527801514s cumulative, 0.1116795539855957s individual

E
current test FAILED -- test_piggybacking_resource_post_and_delete in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 223.56884479522705s cumulative, 0.09198951721191406s individual

.
current test PASSED/SKIPPED -- test_decorable_name_pattern in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 223.57215428352356s cumulative, 0.003309488296508789s individual

.
current test PASSED/SKIPPED -- test_wrapped_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 223.58372521400452s cumulative, 0.011570930480957031s individual

.
current test PASSED/SKIPPED -- test_input_validator_inherited in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 223.59057450294495s cumulative, 0.0068492889404296875s individual

E
current test FAILED -- test_wrapped_resource_with_hooks_aware_of_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 223.6797595024109s cumulative, 0.08918499946594238s individual

.
current test PASSED/SKIPPED -- test_multiple_resource_hooks in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 223.68540048599243s cumulative, 0.005640983581542969s individual

.
current test PASSED/SKIPPED -- test_parser_sync in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 223.68982076644897s cumulative, 0.004420280456542969s individual

E
current test FAILED -- test_param_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 223.77164435386658s cumulative, 0.08182358741760254s individual

E
current test FAILED -- test_wrapped_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 225.58156991004944s cumulative, 1.8099255561828613s individual

.
current test PASSED/SKIPPED -- test_field_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 225.58935451507568s cumulative, 0.007784605026245117s individual

.
current test PASSED/SKIPPED -- test_parser_sync in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 225.5937316417694s cumulative, 0.004377126693725586s individual


tests/test_query_params.py .
current test PASSED/SKIPPED -- test_dont_auto_parse_by_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 225.59809803962708s cumulative, 0.004366397857666016s individual

.
current test PASSED/SKIPPED -- test_get_param_as_json_handler_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 225.60312366485596s cumulative, 0.005025625228881836s individual

.
current test PASSED/SKIPPED -- test_get_param_as_json_no_handler_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 225.6076591014862s cumulative, 0.0045354366302490234s individual

.
current test PASSED/SKIPPED -- test_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 225.61274528503418s cumulative, 0.005086183547973633s individual

.
current test PASSED/SKIPPED -- test_explicitly_disable_auto_parse in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 225.61746215820312s cumulative, 0.0047168731689453125s individual

.
current test PASSED/SKIPPED -- test_http_methods_body_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 225.62198662757874s cumulative, 0.0045244693756103516s individual

.
current test PASSED/SKIPPED -- test_empty_body_no_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 225.62628865242004s cumulative, 0.004302024841308594s individual

.
current test PASSED/SKIPPED -- test_http_methods_body_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 225.63072061538696s cumulative, 0.004431962966918945s individual

.
current test PASSED/SKIPPED -- test_http_methods_body_not_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 225.63576292991638s cumulative, 0.005042314529418945s individual

.
current test PASSED/SKIPPED -- test_http_methods_body_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 225.64026069641113s cumulative, 0.0044977664947509766s individual

.
current test PASSED/SKIPPED -- test_http_methods_body_not_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 225.64462184906006s cumulative, 0.004361152648925781s individual

.
current test PASSED/SKIPPED -- test_non_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 225.64914894104004s cumulative, 0.004527091979980469s individual

.
current test PASSED/SKIPPED -- test_http_methods_body_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 225.65369153022766s cumulative, 0.00454258918762207s individual

.
current test PASSED/SKIPPED -- test_http_methods_body_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 225.6588432788849s cumulative, 0.0051517486572265625s individual


tests/test_custom_router.py .
current test PASSED/SKIPPED -- test_can_pass_additional_params_to_add_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_custom_router.py: 225.66228485107422s cumulative, 0.0034415721893310547s individual

.
current test PASSED/SKIPPED -- test_can_pass_additional_params_to_add_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_custom_router.py: 225.66573476791382s cumulative, 0.0034499168395996094s individual

.
current test PASSED/SKIPPED -- test_custom_router_takes_req_positional_argument in /home/kaiyaok2/PythonProjects/falcon/tests/test_custom_router.py: 225.669291973114s cumulative, 0.0035572052001953125s individual

.
current test PASSED/SKIPPED -- test_custom_router_takes_req_keyword_argument in /home/kaiyaok2/PythonProjects/falcon/tests/test_custom_router.py: 225.67278337478638s cumulative, 0.0034914016723632812s individual

.
current test PASSED/SKIPPED -- test_custom_router_takes_req_keyword_argument in /home/kaiyaok2/PythonProjects/falcon/tests/test_custom_router.py: 225.67704844474792s cumulative, 0.0042650699615478516s individual

.
current test PASSED/SKIPPED -- test_custom_router_find_should_be_used in /home/kaiyaok2/PythonProjects/falcon/tests/test_custom_router.py: 225.68291211128235s cumulative, 0.005863666534423828s individual

.
current test PASSED/SKIPPED -- test_custom_router_takes_req_positional_argument in /home/kaiyaok2/PythonProjects/falcon/tests/test_custom_router.py: 225.6866524219513s cumulative, 0.0037403106689453125s individual

.
current test PASSED/SKIPPED -- test_custom_router_find_should_be_used in /home/kaiyaok2/PythonProjects/falcon/tests/test_custom_router.py: 225.69273900985718s cumulative, 0.006086587905883789s individual

.
current test PASSED/SKIPPED -- test_custom_router_add_route_should_be_used in /home/kaiyaok2/PythonProjects/falcon/tests/test_custom_router.py: 225.69615268707275s cumulative, 0.003413677215576172s individual

.
current test PASSED/SKIPPED -- test_custom_router_add_route_should_be_used in /home/kaiyaok2/PythonProjects/falcon/tests/test_custom_router.py: 225.69989943504333s cumulative, 0.0037467479705810547s individual


tests/test_buffered_reader.py .
current test PASSED/SKIPPED -- test_irregular_large_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 227.73794054985046s cumulative, 2.038041114807129s individual


tests/test_static.py .
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 227.74316906929016s cumulative, 0.005228519439697266s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 227.74802494049072s cumulative, 0.0048558712005615234s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 227.75151014328003s cumulative, 0.0034852027893066406s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 227.75482535362244s cumulative, 0.0033152103424072266s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 227.76196694374084s cumulative, 0.007141590118408203s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 227.77043795585632s cumulative, 0.008471012115478516s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 227.77421617507935s cumulative, 0.003778219223022461s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 227.77869701385498s cumulative, 0.004480838775634766s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 227.78211450576782s cumulative, 0.003417491912841797s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 227.78543639183044s cumulative, 0.0033218860626220703s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 227.79213857650757s cumulative, 0.0067021846771240234s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 227.797283411026s cumulative, 0.005144834518432617s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 227.80516505241394s cumulative, 0.007881641387939453s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 227.81211376190186s cumulative, 0.006948709487915039s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 227.81749963760376s cumulative, 0.005385875701904297s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 227.82290935516357s cumulative, 0.005409717559814453s individual

.
current test PASSED/SKIPPED -- test_pathlib_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 227.82623958587646s cumulative, 0.003330230712890625s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 227.83165407180786s cumulative, 0.005414485931396484s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 227.83665347099304s cumulative, 0.004999399185180664s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 227.83983778953552s cumulative, 0.0031843185424804688s individual

.
current test PASSED/SKIPPED -- test_downloadable in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 227.85012030601501s cumulative, 0.010282516479492188s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 227.85408186912537s cumulative, 0.0039615631103515625s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 227.8581874370575s cumulative, 0.004105567932128906s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 227.86358046531677s cumulative, 0.005393028259277344s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 227.86989569664001s cumulative, 0.0063152313232421875s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 227.87505531311035s cumulative, 0.005159616470336914s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 227.8782398700714s cumulative, 0.0031845569610595703s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 227.8820776939392s cumulative, 0.0038378238677978516s individual

.
current test PASSED/SKIPPED -- test_lifo in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 227.88929629325867s cumulative, 0.007218599319458008s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 227.8940064907074s cumulative, 0.004710197448730469s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 227.9011480808258s cumulative, 0.007141590118408203s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 227.9049744606018s cumulative, 0.0038263797760009766s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 227.90838503837585s cumulative, 0.0034105777740478516s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 227.91202187538147s cumulative, 0.0036368370056152344s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 227.91770720481873s cumulative, 0.005685329437255859s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 227.921972990036s cumulative, 0.004265785217285156s individual

.
current test PASSED/SKIPPED -- test_downloadable_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 227.92656803131104s cumulative, 0.004595041275024414s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 227.93133997917175s cumulative, 0.0047719478607177734s individual

.
current test PASSED/SKIPPED -- test_invalid_args_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 227.93513298034668s cumulative, 0.003793001174926758s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 227.94055795669556s cumulative, 0.005424976348876953s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 227.948575258255s cumulative, 0.008017301559448242s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 227.95459628105164s cumulative, 0.006021022796630859s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 227.95800852775574s cumulative, 0.0034122467041015625s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 227.96286463737488s cumulative, 0.004856109619140625s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 227.96643161773682s cumulative, 0.0035669803619384766s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 227.9698350429535s cumulative, 0.0034034252166748047s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 227.9765875339508s cumulative, 0.006752490997314453s individual

.
current test PASSED/SKIPPED -- test_lifo_negative in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 227.98423719406128s cumulative, 0.007649660110473633s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 227.98740649223328s cumulative, 0.0031692981719970703s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 227.99074268341064s cumulative, 0.003336191177368164s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 227.9956133365631s cumulative, 0.00487065315246582s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 227.99971652030945s cumulative, 0.004103183746337891s individual

.
current test PASSED/SKIPPED -- test_invalid_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.00312542915344s cumulative, 0.0034089088439941406s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.00644969940186s cumulative, 0.003324270248413086s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.01137018203735s cumulative, 0.004920482635498047s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.01473379135132s cumulative, 0.0033636093139648438s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.0193989276886s cumulative, 0.0046651363372802734s individual

.
current test PASSED/SKIPPED -- test_invalid_args_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.02304029464722s cumulative, 0.003641366958618164s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.02870416641235s cumulative, 0.005663871765136719s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.0361683368683s cumulative, 0.007464170455932617s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.0395691394806s cumulative, 0.0034008026123046875s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.04286098480225s cumulative, 0.0032918453216552734s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.0471785068512s cumulative, 0.004317522048950195s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.05187034606934s cumulative, 0.0046918392181396484s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.05651307106018s cumulative, 0.0046427249908447266s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.06173062324524s cumulative, 0.005217552185058594s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.06531500816345s cumulative, 0.0035843849182128906s individual

.
current test PASSED/SKIPPED -- test_file_closed in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.06951451301575s cumulative, 0.004199504852294922s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.07274317741394s cumulative, 0.0032286643981933594s individual

.
current test PASSED/SKIPPED -- test_downloadable_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.0786316394806s cumulative, 0.005888462066650391s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.08249282836914s cumulative, 0.0038611888885498047s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.08637619018555s cumulative, 0.00388336181640625s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.09176087379456s cumulative, 0.005384683609008789s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.09533023834229s cumulative, 0.003569364547729492s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.09885811805725s cumulative, 0.0035278797149658203s individual

.
current test PASSED/SKIPPED -- test_file_closed in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.10514163970947s cumulative, 0.00628352165222168s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.110666513443s cumulative, 0.005524873733520508s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.11733150482178s cumulative, 0.00666499137878418s individual

.
current test PASSED/SKIPPED -- test_invalid_args_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.1209511756897s cumulative, 0.003619670867919922s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.1259469985962s cumulative, 0.004995822906494141s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.13179802894592s cumulative, 0.005851030349731445s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.13732647895813s cumulative, 0.005528450012207031s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.14105486869812s cumulative, 0.0037283897399902344s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.1457815170288s cumulative, 0.0047266483306884766s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.1516237258911s cumulative, 0.0058422088623046875s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.15554523468018s cumulative, 0.0039215087890625s individual

.
current test PASSED/SKIPPED -- test_invalid_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.1589367389679s cumulative, 0.0033915042877197266s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.1623477935791s cumulative, 0.0034110546112060547s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.16623067855835s cumulative, 0.003882884979248047s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.1709222793579s cumulative, 0.004691600799560547s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.1749289035797s cumulative, 0.004006624221801758s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.1783800125122s cumulative, 0.003451108932495117s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.18377137184143s cumulative, 0.005391359329223633s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.18856287002563s cumulative, 0.0047914981842041016s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.19297647476196s cumulative, 0.004413604736328125s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.19831085205078s cumulative, 0.005334377288818359s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.20164155960083s cumulative, 0.003330707550048828s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.20910906791687s cumulative, 0.007467508316040039s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.21443104743958s cumulative, 0.005321979522705078s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.22207832336426s cumulative, 0.007647275924682617s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.22655367851257s cumulative, 0.00447535514831543s individual

.
current test PASSED/SKIPPED -- test_filesystem_traversal_fuse in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.23120760917664s cumulative, 0.0046539306640625s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.2356472015381s cumulative, 0.004439592361450195s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.2392861843109s cumulative, 0.0036389827728271484s individual

.
current test PASSED/SKIPPED -- test_bounded_file_wrapper in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.24184608459473s cumulative, 0.0025599002838134766s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.2453773021698s cumulative, 0.003531217575073242s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.24983048439026s cumulative, 0.004453182220458984s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.25371408462524s cumulative, 0.0038836002349853516s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.25703859329224s cumulative, 0.0033245086669921875s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.26032161712646s cumulative, 0.0032830238342285156s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.2641532421112s cumulative, 0.003831624984741211s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.2675817012787s cumulative, 0.0034284591674804688s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.27188372612s cumulative, 0.004302024841308594s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.27725410461426s cumulative, 0.005370378494262695s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.28214573860168s cumulative, 0.004891633987426758s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.28580713272095s cumulative, 0.0036613941192626953s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.28975319862366s cumulative, 0.003946065902709961s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.293133020401s cumulative, 0.00337982177734375s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.29646039009094s cumulative, 0.0033273696899414062s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.29973316192627s cumulative, 0.0032727718353271484s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.30357265472412s cumulative, 0.0038394927978515625s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.30959129333496s cumulative, 0.006018638610839844s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.31535005569458s cumulative, 0.005758762359619141s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.320627450943s cumulative, 0.005277395248413086s individual

.
current test PASSED/SKIPPED -- test_invalid_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.32481145858765s cumulative, 0.00418400764465332s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.32983922958374s cumulative, 0.00502777099609375s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.3366780281067s cumulative, 0.006838798522949219s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.34203505516052s cumulative, 0.005357027053833008s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.34678435325623s cumulative, 0.004749298095703125s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.35080361366272s cumulative, 0.004019260406494141s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.35458087921143s cumulative, 0.0037772655487060547s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.35784554481506s cumulative, 0.0032646656036376953s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.36117148399353s cumulative, 0.003325939178466797s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.36570835113525s cumulative, 0.004536867141723633s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.37253761291504s cumulative, 0.006829261779785156s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.37653756141663s cumulative, 0.003999948501586914s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.3798599243164s cumulative, 0.0033223628997802734s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.3831446170807s cumulative, 0.0032846927642822266s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.39009499549866s cumulative, 0.00695037841796875s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.39367008209229s cumulative, 0.0035750865936279297s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.3984935283661s cumulative, 0.004823446273803711s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.40184497833252s cumulative, 0.003351449966430664s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.40524315834045s cumulative, 0.0033981800079345703s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.4086558818817s cumulative, 0.0034127235412597656s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.413676738739s cumulative, 0.005020856857299805s individual

.
current test PASSED/SKIPPED -- test_invalid_args_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.41850638389587s cumulative, 0.0048296451568603516s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.42215037345886s cumulative, 0.0036439895629882812s individual

.
current test PASSED/SKIPPED -- test_invalid_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.42616248130798s cumulative, 0.004012107849121094s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.42959260940552s cumulative, 0.0034301280975341797s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.43354725837708s cumulative, 0.003954648971557617s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.4370346069336s cumulative, 0.0034873485565185547s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.44109559059143s cumulative, 0.004060983657836914s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.4474000930786s cumulative, 0.006304502487182617s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.45248341560364s cumulative, 0.005083322525024414s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.4565143585205s cumulative, 0.004030942916870117s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.4599142074585s cumulative, 0.0033998489379882812s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.46595168113708s cumulative, 0.006037473678588867s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.47383046150208s cumulative, 0.007878780364990234s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.47737073898315s cumulative, 0.0035402774810791016s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.48194074630737s cumulative, 0.00457000732421875s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.4941554069519s cumulative, 0.01221466064453125s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.49902391433716s cumulative, 0.004868507385253906s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.50341653823853s cumulative, 0.0043926239013671875s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.50683116912842s cumulative, 0.003414630889892578s individual

.
current test PASSED/SKIPPED -- test_downloadable in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.51189184188843s cumulative, 0.005060672760009766s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.5161120891571s cumulative, 0.004220247268676758s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.51957821846008s cumulative, 0.0034661293029785156s individual

.
current test PASSED/SKIPPED -- test_invalid_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.52310848236084s cumulative, 0.003530263900756836s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.52834701538086s cumulative, 0.005238533020019531s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.53291702270508s cumulative, 0.00457000732421875s individual

.
current test PASSED/SKIPPED -- test_lifo in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.53802967071533s cumulative, 0.005112648010253906s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.54119038581848s cumulative, 0.003160715103149414s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.54449605941772s cumulative, 0.003305673599243164s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.54777002334595s cumulative, 0.0032739639282226562s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.55216526985168s cumulative, 0.004395246505737305s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.5575623512268s cumulative, 0.00539708137512207s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.5607213973999s cumulative, 0.003159046173095703s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.56408667564392s cumulative, 0.0033652782440185547s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.5690975189209s cumulative, 0.005010843276977539s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.57241415977478s cumulative, 0.003316640853881836s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.5756857395172s cumulative, 0.0032715797424316406s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.58043479919434s cumulative, 0.0047490596771240234s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.58386659622192s cumulative, 0.0034317970275878906s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.58697152137756s cumulative, 0.0031049251556396484s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.59229922294617s cumulative, 0.005327701568603516s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.59789180755615s cumulative, 0.0055925846099853516s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.60226345062256s cumulative, 0.00437164306640625s individual

.
current test PASSED/SKIPPED -- test_invalid_args_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.60558938980103s cumulative, 0.003325939178466797s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.60950660705566s cumulative, 0.003917217254638672s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.62048292160034s cumulative, 0.010976314544677734s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.62876391410828s cumulative, 0.00828099250793457s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.63227653503418s cumulative, 0.0035126209259033203s individual

.
current test PASSED/SKIPPED -- test_invalid_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.6357913017273s cumulative, 0.0035147666931152344s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.6405475139618s cumulative, 0.00475621223449707s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.64428329467773s cumulative, 0.003735780715942383s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.65048384666443s cumulative, 0.006200551986694336s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.65567827224731s cumulative, 0.005194425582885742s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.66055297851562s cumulative, 0.004874706268310547s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.66454553604126s cumulative, 0.003992557525634766s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.66781949996948s cumulative, 0.0032739639282226562s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.6742663383484s cumulative, 0.00644683837890625s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.6788513660431s cumulative, 0.0045850276947021484s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.68223595619202s cumulative, 0.0033845901489257812s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.68562150001526s cumulative, 0.0033855438232421875s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.68906331062317s cumulative, 0.0034418106079101562s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.6934838294983s cumulative, 0.00442051887512207s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.6996567249298s cumulative, 0.006172895431518555s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.70606970787048s cumulative, 0.006412982940673828s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.7145700454712s cumulative, 0.008500337600708008s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.7198235988617s cumulative, 0.00525355339050293s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.7386019229889s cumulative, 0.018778324127197266s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.74379634857178s cumulative, 0.005194425582885742s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.74876475334167s cumulative, 0.004968404769897461s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.75314593315125s cumulative, 0.0043811798095703125s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.75812578201294s cumulative, 0.004979848861694336s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.76345825195312s cumulative, 0.005332469940185547s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.77234292030334s cumulative, 0.008884668350219727s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.7773790359497s cumulative, 0.005036115646362305s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.7821798324585s cumulative, 0.0048007965087890625s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.78632593154907s cumulative, 0.004146099090576172s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.7939646244049s cumulative, 0.007638692855834961s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.79845356941223s cumulative, 0.004488945007324219s individual

.
current test PASSED/SKIPPED -- test_invalid_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.8024663925171s cumulative, 0.0040128231048583984s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.80712890625s cumulative, 0.004662513732910156s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.8117003440857s cumulative, 0.004571437835693359s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.821950674057s cumulative, 0.010250329971313477s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.82910895347595s cumulative, 0.0071582794189453125s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.83362340927124s cumulative, 0.004514455795288086s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.83909940719604s cumulative, 0.0054759979248046875s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.84578728675842s cumulative, 0.00668787956237793s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.8594834804535s cumulative, 0.01369619369506836s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.86576533317566s cumulative, 0.006281852722167969s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.87320041656494s cumulative, 0.0074350833892822266s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.878910779953s cumulative, 0.0057103633880615234s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.88592624664307s cumulative, 0.0070154666900634766s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.89312148094177s cumulative, 0.007195234298706055s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.90309071540833s cumulative, 0.009969234466552734s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.91289806365967s cumulative, 0.009807348251342773s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.9253191947937s cumulative, 0.012421131134033203s individual

.
current test PASSED/SKIPPED -- test_invalid_args_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.9307131767273s cumulative, 0.00539398193359375s individual

.
current test PASSED/SKIPPED -- test_filesystem_traversal_fuse in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.93811678886414s cumulative, 0.00740361213684082s individual

.
current test PASSED/SKIPPED -- test_lifo_negative in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.94365811347961s cumulative, 0.005541324615478516s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.94743609428406s cumulative, 0.0037779808044433594s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.95347476005554s cumulative, 0.006038665771484375s individual

.
current test PASSED/SKIPPED -- test_invalid_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.95812320709229s cumulative, 0.004648447036743164s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.9700174331665s cumulative, 0.01189422607421875s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.97621273994446s cumulative, 0.0061953067779541016s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.98315024375916s cumulative, 0.006937503814697266s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.98963165283203s cumulative, 0.0064814090728759766s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.99442720413208s cumulative, 0.004795551300048828s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 228.9984028339386s cumulative, 0.003975629806518555s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 229.00636649131775s cumulative, 0.00796365737915039s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 229.01018452644348s cumulative, 0.003818035125732422s individual

.
current test PASSED/SKIPPED -- test_pathlib_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 229.0149736404419s cumulative, 0.004789113998413086s individual


tests/test_sinks.py F
current test FAILED -- test_route_precedence_with_both_id in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 229.14126753807068s cumulative, 0.12629389762878418s individual

F
current test FAILED -- test_route_precedence in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 229.23215222358704s cumulative, 0.09088468551635742s individual

F
current test FAILED -- test_with_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 229.30436372756958s cumulative, 0.07221150398254395s individual

F
current test FAILED -- test_route_precedence_with_id in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 229.3767054080963s cumulative, 0.0723416805267334s individual

F
current test FAILED -- test_add_sync_sink_with_wrapping in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 229.40345239639282s cumulative, 0.02674698829650879s individual


tests/test_boundedstream.py .
current test PASSED/SKIPPED -- test_not_writable in /home/kaiyaok2/PythonProjects/falcon/tests/test_boundedstream.py: 229.40652537345886s cumulative, 0.003072977066040039s individual


tests/test_sinks.py .
current test PASSED/SKIPPED -- test_add_async_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 229.4108304977417s cumulative, 0.004305124282836914s individual

.
current test PASSED/SKIPPED -- test_add_sync_sink_with_wrapping in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 229.41571474075317s cumulative, 0.004884243011474609s individual

.
current test PASSED/SKIPPED -- test_add_async_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 229.42003798484802s cumulative, 0.004323244094848633s individual

.
current test PASSED/SKIPPED -- test_add_sync_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 229.42394876480103s cumulative, 0.00391077995300293s individual

.
current test PASSED/SKIPPED -- test_add_sync_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 229.42722702026367s cumulative, 0.0032782554626464844s individual

.
current test PASSED/SKIPPED -- test_multiple_patterns in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 229.432697057724s cumulative, 0.0054700374603271484s individual

.
current test PASSED/SKIPPED -- test_single_simple_pattern in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 229.436861038208s cumulative, 0.004163980484008789s individual

.
current test PASSED/SKIPPED -- test_route_precedence_with_id in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 229.44193291664124s cumulative, 0.005071878433227539s individual

.
current test PASSED/SKIPPED -- test_named_groups in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 229.4478099346161s cumulative, 0.005877017974853516s individual

.
current test PASSED/SKIPPED -- test_with_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 229.45464205741882s cumulative, 0.006832122802734375s individual

.
current test PASSED/SKIPPED -- test_route_precedence_with_both_id in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 229.45989751815796s cumulative, 0.005255460739135742s individual

.
current test PASSED/SKIPPED -- test_single_default_pattern in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 229.46440434455872s cumulative, 0.004506826400756836s individual

.
current test PASSED/SKIPPED -- test_single_simple_pattern in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 229.46884655952454s cumulative, 0.0044422149658203125s individual

.
current test PASSED/SKIPPED -- test_single_default_pattern in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 229.4730134010315s cumulative, 0.004166841506958008s individual

.
current test PASSED/SKIPPED -- test_single_compiled_pattern in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 229.47792840003967s cumulative, 0.004914999008178711s individual

.
current test PASSED/SKIPPED -- test_route_precedence in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 229.48284339904785s cumulative, 0.004914999008178711s individual

.
current test PASSED/SKIPPED -- test_named_groups in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 229.48861265182495s cumulative, 0.005769252777099609s individual

.
current test PASSED/SKIPPED -- test_multiple_patterns in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 229.4938850402832s cumulative, 0.005272388458251953s individual

.
current test PASSED/SKIPPED -- test_single_compiled_pattern in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 229.4986753463745s cumulative, 0.004790306091308594s individual


tests/test_compiled_router.py .
current test PASSED/SKIPPED -- test_compile in /home/kaiyaok2/PythonProjects/falcon/tests/test_compiled_router.py: 229.50341963768005s cumulative, 0.004744291305541992s individual

.
current test PASSED/SKIPPED -- test_cannot_replace_compiled in /home/kaiyaok2/PythonProjects/falcon/tests/test_compiled_router.py: 229.50627541542053s cumulative, 0.0028557777404785156s individual

.
current test PASSED/SKIPPED -- test_no_compile_kw in /home/kaiyaok2/PythonProjects/falcon/tests/test_compiled_router.py: 229.51012873649597s cumulative, 0.003853321075439453s individual

.
current test PASSED/SKIPPED -- test_no_compile_kw in /home/kaiyaok2/PythonProjects/falcon/tests/test_compiled_router.py: 229.51475024223328s cumulative, 0.0046215057373046875s individual

.
current test PASSED/SKIPPED -- test_find_src in /home/kaiyaok2/PythonProjects/falcon/tests/test_compiled_router.py: 229.51783990859985s cumulative, 0.0030896663665771484s individual

.
current test PASSED/SKIPPED -- test_no_compile_kw in /home/kaiyaok2/PythonProjects/falcon/tests/test_compiled_router.py: 229.5219190120697s cumulative, 0.004079103469848633s individual

.
current test PASSED/SKIPPED -- test_converter_not_subclass in /home/kaiyaok2/PythonProjects/falcon/tests/test_compiled_router.py: 229.52556133270264s cumulative, 0.0036423206329345703s individual

.
current test PASSED/SKIPPED -- test_add_route_after_first_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_compiled_router.py: 229.5290172100067s cumulative, 0.0034558773040771484s individual

.
current test PASSED/SKIPPED -- test_no_compile_kw in /home/kaiyaok2/PythonProjects/falcon/tests/test_compiled_router.py: 229.53347206115723s cumulative, 0.004454851150512695s individual


tests/test_error_handlers.py F
current test FAILED -- test_caught_error_async in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 229.63158631324768s cumulative, 0.0981142520904541s individual

s
current test PASSED/SKIPPED -- test_caught_error_async in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 229.63531255722046s cumulative, 0.0037262439727783203s individual

F
current test FAILED -- test_catch_http_no_route_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 229.732971906662s cumulative, 0.09765934944152832s individual


tests/test_middleware.py F
current test FAILED -- test_order_mw_executed_when_exception_in_resp in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 229.82255387306213s cumulative, 0.08958196640014648s individual

F
current test FAILED -- test_inner_mw_with_ex_handler_throw_exception in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 229.9044497013092s cumulative, 0.08189582824707031s individual

F
current test FAILED -- test_inner_mw_throw_exception in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 229.98347330093384s cumulative, 0.07902359962463379s individual

F
current test FAILED -- test_order_mw_executed_when_exception_in_req in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 230.06545042991638s cumulative, 0.08197712898254395s individual

F
current test FAILED -- test_independent_middleware_execution_order in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 230.1475088596344s cumulative, 0.08205842971801758s individual

F
current test FAILED -- test_order_independent_mw_executed_when_exception_in_resp in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 232.13221168518066s cumulative, 1.9847028255462646s individual

F
current test FAILED -- test_order_mw_executed_when_exception_in_rsrc in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 232.25989413261414s cumulative, 0.12768244743347168s individual

F
current test FAILED -- test_order_independent_mw_executed_when_exception_in_req in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 232.35291647911072s cumulative, 0.09302234649658203s individual

F
current test FAILED -- test_legacy_middleware_called_with_correct_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 232.43941497802734s cumulative, 0.08649849891662598s individual

F
current test FAILED -- test_generate_trans_id_and_time_with_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 232.52669405937195s cumulative, 0.08727908134460449s individual

F
current test FAILED -- test_multiple_response_mw_throw_exception in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 232.61075234413147s cumulative, 0.08405828475952148s individual

F
current test FAILED -- test_outer_mw_with_ex_handler_throw_exception in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 232.69520568847656s cumulative, 0.08445334434509277s individual

F
current test FAILED -- test_inner_mw_throw_exception_while_processing_resp in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 232.7859959602356s cumulative, 0.0907902717590332s individual

F
current test FAILED -- test_middleware_execution_order in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 232.8971939086914s cumulative, 0.11119794845581055s individual

F
current test FAILED -- test_generate_trans_id_and_time_with_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 234.65903639793396s cumulative, 1.7618424892425537s individual

F
current test FAILED -- test_order_independent_mw_executed_when_exception_in_rsrc in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 234.74068427085876s cumulative, 0.08164787292480469s individual

F
current test FAILED -- test_can_access_resource_params in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 234.82684755325317s cumulative, 0.08616328239440918s individual

F
current test FAILED -- test_can_access_resource_params in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 234.913565158844s cumulative, 0.08671760559082031s individual

F
current test FAILED -- test_process_resource_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 235.01979613304138s cumulative, 0.1062309741973877s individual

F
current test FAILED -- test_process_request_not_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 235.11478877067566s cumulative, 0.09499263763427734s individual

F
current test FAILED -- test_process_request_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 235.21830415725708s cumulative, 0.1035153865814209s individual

F
current test FAILED -- test_process_resource_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 235.3149356842041s cumulative, 0.09663152694702148s individual

F
current test FAILED -- test_process_request_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 235.40751314163208s cumulative, 0.09257745742797852s individual

sF
current test FAILED -- test_generate_trans_id_with_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 235.5019793510437s cumulative, 0.0944662094116211s individual

F
current test FAILED -- test_base_path_is_removed_before_routing in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 235.5991940498352s cumulative, 0.0972146987915039s individual

F
current test FAILED -- test_api_initialization_with_cors_enabled_and_middleware_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 237.3490092754364s cumulative, 1.7498152256011963s individual

F
current test FAILED -- test_api_initialization_with_cors_enabled_and_middleware_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 237.4313235282898s cumulative, 0.08231425285339355s individual

F
current test FAILED -- test_api_initialization_with_cors_enabled_and_middleware_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 237.53204154968262s cumulative, 0.10071802139282227s individual

F
current test FAILED -- test_api_initialization_with_cors_enabled_and_middleware_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 237.64552450180054s cumulative, 0.11348295211791992s individual

F
current test FAILED -- test_http_status_raised_from_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 237.7357144355774s cumulative, 0.09018993377685547s individual

F
current test FAILED -- test_error_composed_before_resp_middleware_called in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 237.81727194786072s cumulative, 0.0815575122833252s individual

F
current test FAILED -- test_dont_need_params_in_signature in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 237.9116268157959s cumulative, 0.09435486793518066s individual

F
current test FAILED -- test_skip_process_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 238.0134415626526s cumulative, 0.10181474685668945s individual

F
current test FAILED -- test_response_middleware_raises_exception in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 238.09499382972717s cumulative, 0.08155226707458496s individual

F
current test FAILED -- test_log_get_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 239.85821104049683s cumulative, 1.7632172107696533s individual

F
current test FAILED -- test_log_get_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 239.95019483566284s cumulative, 0.09198379516601562s individual


tests/asgi/test_asgi_servers.py INFO:     127.0.0.1:43322 - "GET / HTTP/1.1" 200 OK
INFO:     127.0.0.1:43328 - "POST /forms HTTP/1.1" 200 OK

[Starting server process...]
.
[Sending SIGTERM to server process...]

current test PASSED/SKIPPED -- test_post_multipart_form in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 241.65045499801636s cumulative, 1.7002601623535156s individual


tests/asgi/test_buffered_reader.py .
current test PASSED/SKIPPED -- test_varying_read_size in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 244.22529768943787s cumulative, 2.574842691421509s individual


tests/asgi/test_request_asgi.py .
current test PASSED/SKIPPED -- test_missing_server_in_scope in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_asgi.py: 244.22869324684143s cumulative, 0.003395557403564453s individual

.
current test PASSED/SKIPPED -- test_log_error_not_supported in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_asgi.py: 244.23223781585693s cumulative, 0.0035445690155029297s individual


tests/test_compiled_router.py .
current test PASSED/SKIPPED -- test_multithread_compile in /home/kaiyaok2/PythonProjects/falcon/tests/test_compiled_router.py: 244.2938380241394s cumulative, 0.0616002082824707s individual


tests/asgi/test_buffered_reader.py .
current test PASSED/SKIPPED -- test_small_reads in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 244.60956192016602s cumulative, 0.31572389602661133s individual


tests/test_request_media.py .
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.6190149784088s cumulative, 0.009453058242797852s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.65117955207825s cumulative, 0.032164573669433594s individual

.
current test PASSED/SKIPPED -- test_fallback_not_for_error_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.6574890613556s cumulative, 0.00630950927734375s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.66262102127075s cumulative, 0.005131959915161133s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.6672248840332s cumulative, 0.004603862762451172s individual

.
current test PASSED/SKIPPED -- test_invalid_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.67288756370544s cumulative, 0.005662679672241211s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.6792311668396s cumulative, 0.0063436031341552734s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.68373012542725s cumulative, 0.004498958587646484s individual

.
current test PASSED/SKIPPED -- test_invalid_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.68791031837463s cumulative, 0.004180192947387695s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.69252753257751s cumulative, 0.004617214202880859s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.6975874900818s cumulative, 0.005059957504272461s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.70181345939636s cumulative, 0.004225969314575195s individual

.
current test PASSED/SKIPPED -- test_fallback_not_for_error_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.70632529258728s cumulative, 0.004511833190917969s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.71075749397278s cumulative, 0.004432201385498047s individual

.
current test PASSED/SKIPPED -- test_fallback_not_for_error_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.71588039398193s cumulative, 0.0051229000091552734s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.72012662887573s cumulative, 0.004246234893798828s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.7242202758789s cumulative, 0.004093647003173828s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.72891998291016s cumulative, 0.00469970703125s individual

.
current test PASSED/SKIPPED -- test_fallback_not_for_error_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.7333948612213s cumulative, 0.0044748783111572266s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.73868227005005s cumulative, 0.0052874088287353516s individual

.
current test PASSED/SKIPPED -- test_repeated_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.743834733963s cumulative, 0.005152463912963867s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.74869537353516s cumulative, 0.004860639572143555s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.75316500663757s cumulative, 0.004469633102416992s individual

.
current test PASSED/SKIPPED -- test_complete_consumption in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.75768566131592s cumulative, 0.0045206546783447266s individual

.
current test PASSED/SKIPPED -- test_fallback_not_for_error_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.76226019859314s cumulative, 0.00457453727722168s individual

.
current test PASSED/SKIPPED -- test_null_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.7665672302246s cumulative, 0.0043070316314697266s individual

.
current test PASSED/SKIPPED -- test_fallback in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.77062582969666s cumulative, 0.0040585994720458984s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.7753143310547s cumulative, 0.0046885013580322266s individual

.
current test PASSED/SKIPPED -- test_repeated_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.77971959114075s cumulative, 0.00440526008605957s individual

.
current test PASSED/SKIPPED -- test_fallback_not_for_error_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.78431129455566s cumulative, 0.004591703414916992s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.78867530822754s cumulative, 0.004364013671875s individual

.
current test PASSED/SKIPPED -- test_complete_consumption in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.7934262752533s cumulative, 0.004750967025756836s individual

.
current test PASSED/SKIPPED -- test_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.79803943634033s cumulative, 0.004613161087036133s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.80299425125122s cumulative, 0.004954814910888672s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.8104283809662s cumulative, 0.00743412971496582s individual

.
current test PASSED/SKIPPED -- test_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.8190553188324s cumulative, 0.008626937866210938s individual

.
current test PASSED/SKIPPED -- test_fallback_does_not_override_media_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.82338428497314s cumulative, 0.00432896614074707s individual

.
current test PASSED/SKIPPED -- test_error_after_first_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.82857751846313s cumulative, 0.005193233489990234s individual

.
current test PASSED/SKIPPED -- test_unknown_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.83323526382446s cumulative, 0.004657745361328125s individual

.
current test PASSED/SKIPPED -- test_fallback_not_for_error_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.83826780319214s cumulative, 0.005032539367675781s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.8426947593689s cumulative, 0.0044269561767578125s individual

.
current test PASSED/SKIPPED -- test_invalid_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.84690594673157s cumulative, 0.0042111873626708984s individual

.
current test PASSED/SKIPPED -- test_repeated_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.85120844841003s cumulative, 0.004302501678466797s individual

.
current test PASSED/SKIPPED -- test_fallback in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.85557556152344s cumulative, 0.00436711311340332s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.86023783683777s cumulative, 0.004662275314331055s individual

.
current test PASSED/SKIPPED -- test_unknown_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.86441349983215s cumulative, 0.004175662994384766s individual

.
current test PASSED/SKIPPED -- test_fallback_not_for_error_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.86938214302063s cumulative, 0.0049686431884765625s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.8734757900238s cumulative, 0.004093647003173828s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.8781807422638s cumulative, 0.004704952239990234s individual

.
current test PASSED/SKIPPED -- test_null_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.8827121257782s cumulative, 0.004531383514404297s individual

.
current test PASSED/SKIPPED -- test_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.88741445541382s cumulative, 0.004702329635620117s individual

.
current test PASSED/SKIPPED -- test_repeated_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.89196038246155s cumulative, 0.004545927047729492s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.89705157279968s cumulative, 0.005091190338134766s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.9013397693634s cumulative, 0.004288196563720703s individual

.
current test PASSED/SKIPPED -- test_fallback_does_not_override_media_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.90591669082642s cumulative, 0.004576921463012695s individual

.
current test PASSED/SKIPPED -- test_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.91016125679016s cumulative, 0.004244565963745117s individual

.
current test PASSED/SKIPPED -- test_error_after_first_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.91448402404785s cumulative, 0.00432276725769043s individual

.
current test PASSED/SKIPPED -- test_invalid_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 244.9189898967743s cumulative, 0.00450587272644043s individual


tests/test_testing.py .
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 244.92366743087769s cumulative, 0.004677534103393555s individual

.
current test PASSED/SKIPPED -- test_create_environ_default_ua_override in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 244.9262354373932s cumulative, 0.0025680065155029297s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 244.92991948127747s cumulative, 0.0036840438842773438s individual

.
current test PASSED/SKIPPED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 244.93391966819763s cumulative, 0.004000186920166016s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 244.93790936470032s cumulative, 0.003989696502685547s individual

.
current test PASSED/SKIPPED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 244.94254612922668s cumulative, 0.0046367645263671875s individual

.
current test PASSED/SKIPPED -- test_missing_header_is_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 244.94559717178345s cumulative, 0.0030510425567626953s individual

.
current test PASSED/SKIPPED -- test_closed_wsgi_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 244.94876885414124s cumulative, 0.003171682357788086s individual

.
current test PASSED/SKIPPED -- test_create_environ_cookies_options_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 244.9515826702118s cumulative, 0.0028138160705566406s individual

.
current test PASSED/SKIPPED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 244.95599675178528s cumulative, 0.004414081573486328s individual

.
current test PASSED/SKIPPED -- test_create_environ_cookies in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 244.95862650871277s cumulative, 0.0026297569274902344s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 244.9624843597412s cumulative, 0.003857851028442383s individual

.
current test PASSED/SKIPPED -- test_cookies_jar in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 244.96704816818237s cumulative, 0.004563808441162109s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 244.97054386138916s cumulative, 0.0034956932067871094s individual

.
current test PASSED/SKIPPED -- test_create_environ_preserve_raw_uri in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 244.97303175926208s cumulative, 0.0024878978729248047s individual

.
current test PASSED/SKIPPED -- test_create_environ_cookies in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 244.9756784439087s cumulative, 0.0026466846466064453s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 244.98251676559448s cumulative, 0.006838321685791016s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 244.9862859249115s cumulative, 0.0037691593170166016s individual

.
current test PASSED/SKIPPED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 244.99045062065125s cumulative, 0.004164695739746094s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 244.99431777000427s cumulative, 0.0038671493530273438s individual

.
current test PASSED/SKIPPED -- test_testing_client_handles_wsgi_generator_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 244.99714612960815s cumulative, 0.002828359603881836s individual

.
current test PASSED/SKIPPED -- test_closed_wsgi_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 244.99974060058594s cumulative, 0.002594470977783203s individual

.
current test PASSED/SKIPPED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 245.00359678268433s cumulative, 0.003856182098388672s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 245.00700426101685s cumulative, 0.0034074783325195312s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 245.01155543327332s cumulative, 0.0045511722564697266s individual

.
current test PASSED/SKIPPED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 245.01588582992554s cumulative, 0.00433039665222168s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 245.01928567886353s cumulative, 0.0033998489379882812s individual

.
current test PASSED/SKIPPED -- test_closed_wsgi_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 245.0220639705658s cumulative, 0.002778291702270508s individual

.
current test PASSED/SKIPPED -- test_create_environ_default_ua in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 245.02481746673584s cumulative, 0.0027534961700439453s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 245.02904725074768s cumulative, 0.00422978401184082s individual

.
current test PASSED/SKIPPED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 245.0330502986908s cumulative, 0.004003047943115234s individual

.
current test PASSED/SKIPPED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 245.03688836097717s cumulative, 0.003838062286376953s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 245.04041028022766s cumulative, 0.0035219192504882812s individual

.
current test PASSED/SKIPPED -- test_simulate_request_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 245.04655480384827s cumulative, 0.006144523620605469s individual

.
current test PASSED/SKIPPED -- test_closed_wsgi_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 245.04920148849487s cumulative, 0.0026466846466064453s individual



==================================== ERRORS ====================================
______ ERROR at setup of TestHTTPError.test_epic_fail_xml[asgi-text/xml] _______

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237dc2bbc0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da71bd0>, 'CHECK...1bd0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da71bd0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f2481c840a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________ ERROR at setup of TestHTTPError.test_epic_fail_json[asgi] ___________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d849c40>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237dc20940>, 'CHECK...0940>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237dc20940>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f24821a7130>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________ ERROR at setup of TestHTTPError.test_invalid_param[asgi] ___________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d8494d0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237dc23a30>, 'CHECK...3a30>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237dc23a30>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f248219e830>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____ ERROR at setup of TestHTTPError.test_forbidden[asgi-application/json] _____

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d849f50>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8a9630>, 'CHECK...9630>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8a9630>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f232d971540>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ ERROR at setup of TestHTTPError.test_no_description_json[asgi] ________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d848200>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237dc23130>, 'CHECK...3130>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237dc23130>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f2341d5b760>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_405_without_body_with_extra_headers_double_check[asgi] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d84bca0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237dc225f0>, 'CHECK...25f0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237dc225f0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f2481cf2920>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________ ERROR at setup of TestHTTPError.test_414_with_title[asgi] ___________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d848900>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db59900>, 'CHECK...9900>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db59900>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f24821d1c60>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___ ERROR at setup of TestHTTPError.test_epic_fail_xml[asgi-application/xml] ___

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d84a8f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237dc23a30>, 'CHECK...3a30>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237dc23a30>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f232dae7fa0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_serialize_error_uses_media_handler[asgi] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237dc39770>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db5e830>, 'CHECK...e830>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db5e830>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f232db31000>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ ERROR at setup of TestHTTPError.test_414[asgi] ________________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237dc28510>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237dc21c60>, 'CHECK...1c60>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237dc21c60>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f232da3b640>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_temporary_413_datetime_retry_after[asgi] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237dc2a260>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db58790>, 'CHECK...8790>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db58790>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f237d6d9510>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________ ERROR at setup of TestHTTPError.test_missing_header[asgi] ___________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237dc28740>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8a88b0>, 'CHECK...88b0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8a88b0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f232da494e0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________ ERROR at setup of TestHTTPError.test_429_datetime[asgi] ____________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237dc2ad50>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237dc236d0>, 'CHECK...36d0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237dc236d0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f232dae55a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_title_default_message_if_none[asgi-503 Service Unavailable-bytes] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d84a3b0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232d91f010>, 'CHECK...f010>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232d91f010>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f237d824e20>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______________ ERROR at setup of TestHTTPError.test_misc[asgi] ________________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d849a10>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237dc23a30>, 'CHECK...3a30>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237dc23a30>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f237d825ab0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_custom_error_serializer_optional_representation[asgi-BREW-/notfound-400] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237dc2a8f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db5feb0>, 'CHECK...feb0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db5feb0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f232da3d600>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________ ERROR at setup of TestHTTPError.test_missing_param[asgi] ___________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d84b8b0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237dc201f0>, 'CHECK...01f0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237dc201f0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f237d824910>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ ERROR at setup of TestHTTPError.test_413[asgi] ________________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d84ba70>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8a8310>, 'CHECK...8310>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8a8310>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f2480b64b20>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ ERROR at setup of TestHTTPError.test_429_no_retry_after[asgi] _________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d84aab0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8aa320>, 'CHECK...a320>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8aa320>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f237dbdb0a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________ ERROR at setup of TestHTTPError.test_405_with_body[asgi] ___________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d7ee030>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8a96c0>, 'CHECK...96c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8a96c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f232db448e0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________ ERROR at setup of TestHTTPError.test_410_with_body[asgi] ___________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d7ed700>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237dc23a30>, 'CHECK...3a30>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237dc23a30>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f24821d2380>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_custom_error_serializer_optional_representation[asgi-REPORT-/404-405] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d84b290>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237dc23b50>, 'CHECK...3b50>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237dc23b50>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f232da38a90>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________ ERROR at setup of TestHTTPError.test_410_without_body[asgi] __________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d84a180>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237dc20550>, 'CHECK...0550>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237dc20550>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f237d87e7a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_client_does_not_accept_json_or_xml[asgi] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237dc2b1b0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8aa4d0>, 'CHECK...a4d0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8aa4d0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f237d81a380>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_custom_error_serializer_optional_representation[asgi-GET-/404-404] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237dc2ad50>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8a92d0>, 'CHECK...92d0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8a92d0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f2481c32650>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ ERROR at setup of TestHTTPError.test_unicode_xml[asgi] ____________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d7ee880>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da2cd30>, 'CHECK...cd30>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da2cd30>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f232d9470d0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__ ERROR at setup of TestHTTPError.test_client_does_not_accept_anything[asgi] __

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d7efa70>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da2d3f0>, 'CHECK...d3f0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da2d3f0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f237d864b80>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_title_default_message_if_none[asgi-503-int] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237dc29310>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da2cd30>, 'CHECK...cd30>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da2cd30>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f2341c48400>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________ ERROR at setup of TestHTTPError.test_404_with_body[asgi] ___________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237dc39770>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8a9090>, 'CHECK...9090>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8a9090>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f237d82e110>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_forbidden[asgi-application/vnd.company.system.project.resource+json;v=1.1] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d7ec350>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8a9870>, 'CHECK...9870>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8a9870>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f232da3fc10>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____ ERROR at setup of TestHTTPError.test_503_datetime_retry_after[asgi] ______

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d7eff40>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d878040>, 'CHECK...8040>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d878040>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f232da415d0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_title_default_message_if_none[asgi-503 Service Unavailable-str] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d84a3b0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237dc20c10>, 'CHECK...0c10>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237dc20c10>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f232dae4820>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________ ERROR at setup of TestHTTPError.test_404_without_body[asgi] __________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d7ec970>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8a8ee0>, 'CHECK...8ee0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8a8ee0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f24820122f0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_epic_fail_xml[asgi-application/atom+xml] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d7eec70>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237dc225f0>, 'CHECK...25f0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237dc225f0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f232da8e170>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_custom_error_serializer_optional_representation[asgi-GET-/notfound-404] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d7eccf0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d87b760>, 'CHECK...b760>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d87b760>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f232da520e0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ ERROR at setup of TestHTTPError.test_503_integer_retry_after[asgi] ______

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d7f21f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8a8c10>, 'CHECK...8c10>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8a8c10>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f237dbb9060>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ ERROR at setup of TestHTTPError.test_base_class[asgi] _____________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d7f2180>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da2de10>, 'CHECK...de10>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da2de10>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f237d7feec0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______ ERROR at setup of TestHTTPError.test_414_with_description[asgi] ________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d7f2b20>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8a8af0>, 'CHECK...8af0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8a8af0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f232d944400>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ ERROR at setup of TestHTTPError.test_429[asgi] ________________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d7f34c0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8ab2e0>, 'CHECK...b2e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8ab2e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f2341d98e20>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_title_default_message_if_none[asgi-503-HTTPStatus] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d7f15b0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d87b2e0>, 'CHECK...b2e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d87b2e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f234e7a5120>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__ ERROR at setup of TestHTTPError.test_serialize_no_json_media_handler[asgi] __

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d8490e0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d87b400>, 'CHECK...b400>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d87b400>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f237dbf54b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ ERROR at setup of TestHTTPError.test_414_with_custom_kwargs[asgi] _______

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237dc2b4c0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d878dc0>, 'CHECK...8dc0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d878dc0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f232da42d40>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________ ERROR at setup of TestHTTPError.test_unicode_json[asgi] ____________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d7edee0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d878af0>, 'CHECK...8af0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d878af0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f2481c32920>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ ERROR at setup of TestHTTPError.test_custom_error_serializer[asgi] ______

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237dc2a5e0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8aa8c0>, 'CHECK...a8c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8aa8c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f237d97f160>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_title_default_message_if_none[asgi-503-bytes] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d7f1620>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237dc20430>, 'CHECK...0430>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237dc20430>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f232db4bd90>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_custom_serializer_no_representation[asgi] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d7ef220>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8aa680>, 'CHECK...a680>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8aa680>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f232da52d10>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ ERROR at setup of TestHTTPError.test_no_description_xml[asgi] _________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d7ed700>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d878940>, 'CHECK...8940>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d878940>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f232da8e4d0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_title_default_message_if_none[asgi-503-str] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d7ef530>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d87ac20>, 'CHECK...ac20>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d87ac20>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f232d9890c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ ERROR at setup of TestHTTPError.test_411[asgi] ________________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d7f1150>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d87a200>, 'CHECK...a200>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d87a200>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f232da52aa0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________ ERROR at setup of TestHTTPError.test_invalid_header[asgi] ___________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d7f1930>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d89bd00>, 'CHECK...bd00>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d89bd00>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f232da417b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_forbidden[asgi-application/json-patch+json] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d7f1700>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8988b0>, 'CHECK...88b0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8988b0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f237d9a09a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_epic_fail_xml[asgi-application/vnd.company.system.project.resource+xml;v=1.1] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237dc293f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8a9c60>, 'CHECK...9c60>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8a9c60>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f2482011cf0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_405_without_body_with_extra_headers[asgi] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d7ed4d0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d87b760>, 'CHECK...b760>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d87b760>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f237dbba7d0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ ERROR at setup of TestHTTPError.test_401[asgi] ________________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d7ecb30>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d87beb0>, 'CHECK...beb0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d87beb0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f24821d39a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________ ERROR at setup of TestHTTPError.test_405_without_body[asgi] __________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d7f0d60>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d87b400>, 'CHECK...b400>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d87b400>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f232d90df60>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_temporary_413_integer_retry_after[asgi] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d7f1770>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d89acb0>, 'CHECK...acb0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d89acb0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f237d8660b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ ERROR at setup of TestHTTPError.test_416[asgi] ________________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d7f1150>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d87af80>, 'CHECK...af80>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d87af80>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7f232da496c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPStatusWithMiddleware.test_raise_status_in_process_resource[True] _

request = <SubRequest 'hook_test_client' for <Function test_raise_status_in_process_resource[True]>>

    @pytest.fixture(params=[True, False])
    def hook_test_client(request):
        app = create_app(asgi=request.param)
>       app.add_route('/status', TestHookResource())

tests/test_httpstatus.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481d997e0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d876950>, 'CHECK...6950>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d876950>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestHookResource.on_get of <test_httpstatus.TestHookResource object at 0x7f237dc109a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPStatusWithMiddleware.test_raise_status_in_process_request[True] _

request = <SubRequest 'hook_test_client' for <Function test_raise_status_in_process_request[True]>>

    @pytest.fixture(params=[True, False])
    def hook_test_client(request):
        app = create_app(asgi=request.param)
>       app.add_route('/status', TestHookResource())

tests/test_httpstatus.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481d98cf0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d89b9a0>, 'CHECK...b9a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d89b9a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestHookResource.on_get of <test_httpstatus.TestHookResource object at 0x7f237d98b850>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPStatusWithMiddleware.test_raise_status_runs_process_response[True] _

request = <SubRequest 'hook_test_client' for <Function test_raise_status_runs_process_response[True]>>

    @pytest.fixture(params=[True, False])
    def hook_test_client(request):
        app = create_app(asgi=request.param)
>       app.add_route('/status', TestHookResource())

tests/test_httpstatus.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481d99770>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dac8a60>, 'CHECK...8a60>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dac8a60>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestHookResource.on_get of <test_httpstatus.TestHookResource object at 0x7f237d818250>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ ERROR at setup of TestNoBodyWithStatus.test_body_is_set[asgi] _________

asgi = True

    @pytest.fixture()
    def body_client(asgi):
        app = create_app(asgi=asgi)
>       app.add_route('/status', NoBodyResource())

tests/test_httpstatus.py:210: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481d99fc0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d878d30>, 'CHECK...8d30>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d878d30>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method NoBodyResource.on_get of <test_httpstatus.NoBodyResource object at 0x7f237d99e1d0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ ERROR at setup of TestNoBodyWithStatus.test_media_is_set[asgi] ________

asgi = True

    @pytest.fixture()
    def body_client(asgi):
        app = create_app(asgi=asgi)
>       app.add_route('/status', NoBodyResource())

tests/test_httpstatus.py:210: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d8ea0a0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d87a4d0>, 'CHECK...a4d0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d87a4d0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method NoBodyResource.on_get of <test_httpstatus.NoBodyResource object at 0x7f232daad510>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ ERROR at setup of TestNoBodyWithStatus.test_data_is_set[asgi] _________

asgi = True

    @pytest.fixture()
    def body_client(asgi):
        app = create_app(asgi=asgi)
>       app.add_route('/status', NoBodyResource())

tests/test_httpstatus.py:210: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d7f30d0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d879120>, 'CHECK...9120>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d879120>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method NoBodyResource.on_get of <test_httpstatus.NoBodyResource object at 0x7f2481cd57e0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____ ERROR at setup of TestHTTPStatus.test_raise_status_empty_body[True] ______

request = <SubRequest 'client' for <Function test_raise_status_empty_body[True]>>

    @pytest.fixture(params=[True, False])
    def client(request):
        app = create_app(asgi=request.param)
>       app.add_route('/status', TestStatusResource())

tests/test_httpstatus.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481d99e70>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8791b0>, 'CHECK...91b0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8791b0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestStatusResource.on_delete of <test_httpstatus.TestStatusResource object at 0x7f232da50250>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___ ERROR at setup of TestHTTPStatus.test_raise_status_in_before_hook[True] ____

request = <SubRequest 'client' for <Function test_raise_status_in_before_hook[True]>>

    @pytest.fixture(params=[True, False])
    def client(request):
        app = create_app(asgi=request.param)
>       app.add_route('/status', TestStatusResource())

tests/test_httpstatus.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481d99d20>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8793f0>, 'CHECK...93f0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8793f0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestStatusResource.on_delete of <test_httpstatus.TestStatusResource object at 0x7f237dc12bc0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__ ERROR at setup of TestHTTPStatus.test_raise_status_runs_after_hooks[True] ___

request = <SubRequest 'client' for <Function test_raise_status_runs_after_hooks[True]>>

    @pytest.fixture(params=[True, False])
    def client(request):
        app = create_app(asgi=request.param)
>       app.add_route('/status', TestStatusResource())

tests/test_httpstatus.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481d9bc30>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8779a0>, 'CHECK...79a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8779a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestStatusResource.on_delete of <test_httpstatus.TestStatusResource object at 0x7f232db32bc0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPStatus.test_raise_status_survives_after_hooks[True] _

request = <SubRequest 'client' for <Function test_raise_status_survives_after_hooks[True]>>

    @pytest.fixture(params=[True, False])
    def client(request):
        app = create_app(asgi=request.param)
>       app.add_route('/status', TestStatusResource())

tests/test_httpstatus.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481d98510>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d875e10>, 'CHECK...5e10>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d875e10>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestStatusResource.on_delete of <test_httpstatus.TestStatusResource object at 0x7f2481cd4e50>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____ ERROR at setup of TestHTTPStatus.test_raise_status_in_responder[True] _____

request = <SubRequest 'client' for <Function test_raise_status_in_responder[True]>>

    @pytest.fixture(params=[True, False])
    def client(request):
        app = create_app(asgi=request.param)
>       app.add_route('/status', TestStatusResource())

tests/test_httpstatus.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481d9a3b0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8775b0>, 'CHECK...75b0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8775b0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestStatusResource.on_delete of <test_httpstatus.TestStatusResource object at 0x7f237dac53c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHttpMethodRouting.test_meta_and_others_disallowed[asgi-SETECASTRONOMY] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        app.add_route('/stonewall', Stonewall())
    
        resource_things = ThingsResource()
>       app.add_route('/things', resource_things)

tests/test_http_method_routing.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481d98120>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f2481d84430>, 'CHECK...4430>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f2481d84430>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ThingsResource.on_get of <test_http_method_routing.ThingsResource object at 0x7f23428d2230>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHttpMethodRouting.test_methods_not_allowed_simple[asgi] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        app.add_route('/stonewall', Stonewall())
    
        resource_things = ThingsResource()
>       app.add_route('/things', resource_things)

tests/test_http_method_routing.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d8e9690>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232d91d1b0>, 'CHECK...d1b0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232d91d1b0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ThingsResource.on_get of <test_http_method_routing.ThingsResource object at 0x7f237d8117e0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHttpMethodRouting.test_methods_not_allowed_complex[asgi] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        app.add_route('/stonewall', Stonewall())
    
        resource_things = ThingsResource()
>       app.add_route('/things', resource_things)

tests/test_http_method_routing.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481d24120>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f24820bb5b0>, 'CHECK...b5b0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f24820bb5b0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ThingsResource.on_get of <test_http_method_routing.ThingsResource object at 0x7f237dbda5c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ ERROR at setup of TestHttpMethodRouting.test_put[asgi] ____________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        app.add_route('/stonewall', Stonewall())
    
        resource_things = ThingsResource()
>       app.add_route('/things', resource_things)

tests/test_http_method_routing.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481d26b20>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f2481d85e10>, 'CHECK...5e10>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f2481d85e10>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ThingsResource.on_get of <test_http_method_routing.ThingsResource object at 0x7f2342876860>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________ ERROR at setup of TestHttpMethodRouting.test_report[asgi] ___________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        app.add_route('/stonewall', Stonewall())
    
        resource_things = ThingsResource()
>       app.add_route('/things', resource_things)

tests/test_http_method_routing.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481d27220>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f24820cea70>, 'CHECK...ea70>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f24820cea70>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ThingsResource.on_get of <test_http_method_routing.ThingsResource object at 0x7f237dbba230>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHttpMethodRouting.test_method_not_allowed_with_param[asgi] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        app.add_route('/stonewall', Stonewall())
    
        resource_things = ThingsResource()
>       app.add_route('/things', resource_things)

tests/test_http_method_routing.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481d25cb0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d6fd3f0>, 'CHECK...d3f0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d6fd3f0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ThingsResource.on_get of <test_http_method_routing.ThingsResource object at 0x7f237da27610>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________ ERROR at setup of TestHttpMethodRouting.test_misc[asgi] ____________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        app.add_route('/stonewall', Stonewall())
    
        resource_things = ThingsResource()
>       app.add_route('/things', resource_things)

tests/test_http_method_routing.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481d276f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f24820cd6c0>, 'CHECK...d6c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f24820cd6c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ThingsResource.on_get of <test_http_method_routing.ThingsResource object at 0x7f237dbb84c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____ ERROR at setup of TestHttpMethodRouting.test_post_not_allowed[asgi] ______

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        app.add_route('/stonewall', Stonewall())
    
        resource_things = ThingsResource()
>       app.add_route('/things', resource_things)

tests/test_http_method_routing.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d9c86d0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f2481d84430>, 'CHECK...4430>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f2481d84430>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ThingsResource.on_get of <test_http_method_routing.ThingsResource object at 0x7f2480abed40>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____ ERROR at setup of TestHttpMethodRouting.test_default_on_options[asgi] _____

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        app.add_route('/stonewall', Stonewall())
    
        resource_things = ThingsResource()
>       app.add_route('/things', resource_things)

tests/test_http_method_routing.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481d9b6f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d6fc790>, 'CHECK...c790>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d6fc790>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ThingsResource.on_get of <test_http_method_routing.ThingsResource object at 0x7f23428779d0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ ERROR at setup of TestHttpMethodRouting.test_on_options[asgi] _________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        app.add_route('/stonewall', Stonewall())
    
        resource_things = ThingsResource()
>       app.add_route('/things', resource_things)

tests/test_http_method_routing.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d9c9b60>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d6fcc10>, 'CHECK...cc10>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d6fcc10>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ThingsResource.on_get of <test_http_method_routing.ThingsResource object at 0x7f23428d0430>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ ERROR at setup of TestHttpMethodRouting.test_get[asgi] ____________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        app.add_route('/stonewall', Stonewall())
    
        resource_things = ThingsResource()
>       app.add_route('/things', resource_things)

tests/test_http_method_routing.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d9cadc0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f2481d86560>, 'CHECK...6560>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f2481d86560>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ThingsResource.on_get of <test_http_method_routing.ThingsResource object at 0x7f237d810280>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHttpMethodRouting.test_meta_and_others_disallowed[asgi-WEBSOCKET] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        app.add_route('/stonewall', Stonewall())
    
        resource_things = ThingsResource()
>       app.add_route('/things', resource_things)

tests/test_http_method_routing.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d9c9bd0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d738c10>, 'CHECK...8c10>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d738c10>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ThingsResource.on_get of <test_http_method_routing.ThingsResource object at 0x7f237d98dae0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ ERROR at setup of test_field_validator[asgi-resource2] ____________

asgi = True
request = <SubRequest 'client' for <Function test_field_validator[asgi-resource2]>>
resource = <test_before_hooks.TestFieldResourceChildToo object at 0x7f234e774b50>

    @pytest.fixture
    def client(asgi, request, resource):
        app = create_app(asgi)
>       app.add_route('/', resource)

tests/test_before_hooks.py:251: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237db79380>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f2481ddbac0>, 'CHECK...bac0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f2481ddbac0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestFieldResourceChildToo.on_get of <test_before_hooks.TestFieldResourceChildToo object at 0x7f234e774b50>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ ERROR at setup of test_field_validator[asgi-resource1] ____________

asgi = True
request = <SubRequest 'client' for <Function test_field_validator[asgi-resource1]>>
resource = <test_before_hooks.TestFieldResourceChild object at 0x7f234e774a90>

    @pytest.fixture
    def client(asgi, request, resource):
        app = create_app(asgi)
>       app.add_route('/', resource)

tests/test_before_hooks.py:251: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237db7bd80>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f2481dc3b50>, 'CHECK...3b50>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f2481dc3b50>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestFieldResourceChild.on_get of <test_before_hooks.TestFieldResourceChild object at 0x7f234e774a90>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ ERROR at setup of test_multiple_resource_hooks[asgi-resource0] ________

asgi = True
request = <SubRequest 'client' for <Function test_multiple_resource_hooks[asgi-resource0]>>
resource = <test_before_hooks.ZooResource object at 0x7f234e774af0>

    @pytest.fixture
    def client(asgi, request, resource):
        app = create_app(asgi)
>       app.add_route('/', resource)

tests/test_before_hooks.py:251: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237db0ff40>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f2481d85c60>, 'CHECK...5c60>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f2481d85c60>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ZooResource.on_get of <test_before_hooks.ZooResource object at 0x7f234e774af0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________ ERROR at setup of test_piggybacking_resource_post_item[True] _________

request = <SubRequest 'app_client' for <Function test_piggybacking_resource_post_item[True]>>

    @pytest.fixture(params=[True, False])
    def app_client(request):
        items = PiggybackingCollectionAsync() if request.param else PiggybackingCollection()
    
        app = create_app(asgi=request.param)
>       app.add_route('/items', items, suffix='collection')

tests/test_before_hooks.py:487: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237db0f610>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f2481ddbac0>, 'CHECK...bac0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f2481ddbac0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method PiggybackingCollection.on_delete_collection of <test_before_hooks.PiggybackingCollectionAsync object at 0x7f2480abe260>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ ERROR at setup of test_input_validator_inherited[asgi] ____________

asgi = True
request = <SubRequest 'client' for <Function test_input_validator_inherited[asgi]>>
resource = <test_before_hooks.WrappedRespondersResource object at 0x7f2480a5de40>

    @pytest.fixture
    def client(asgi, request, resource):
        app = create_app(asgi)
>       app.add_route('/', resource)

tests/test_before_hooks.py:251: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237db0fbc0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f2481d853f0>, 'CHECK...53f0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f2481d853f0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method WrappedRespondersResource.on_get of <test_before_hooks.WrappedRespondersResource object at 0x7f2480a5de40>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ ERROR at setup of test_field_validator[asgi-resource0] ____________

asgi = True
request = <SubRequest 'client' for <Function test_field_validator[asgi-resource0]>>
resource = <test_before_hooks.TestFieldResource object at 0x7f234e774a30>

    @pytest.fixture
    def client(asgi, request, resource):
        app = create_app(asgi)
>       app.add_route('/', resource)

tests/test_before_hooks.py:251: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237db0e810>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f2481d86830>, 'CHECK...6830>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f2481d86830>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestFieldResource.on_get of <test_before_hooks.TestFieldResource object at 0x7f234e774a30>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ ERROR at setup of test_multiple_resource_hooks[asgi-resource1] ________

asgi = True
request = <SubRequest 'client' for <Function test_multiple_resource_hooks[asgi-resource1]>>
resource = <test_before_hooks.ZooResourceChild object at 0x7f234e774b20>

    @pytest.fixture
    def client(asgi, request, resource):
        app = create_app(asgi)
>       app.add_route('/', resource)

tests/test_before_hooks.py:251: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237db0f5a0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d77aef0>, 'CHECK...aef0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d77aef0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ZooResourceChild.on_get of <test_before_hooks.ZooResourceChild object at 0x7f234e774b20>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________________ ERROR at setup of test_input_validator[asgi] _________________

asgi = True
request = <SubRequest 'client' for <Function test_input_validator[asgi]>>
resource = <test_before_hooks.WrappedRespondersResource object at 0x7f237da96320>

    @pytest.fixture
    def client(asgi, request, resource):
        app = create_app(asgi)
>       app.add_route('/', resource)

tests/test_before_hooks.py:251: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237db0d460>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d87a170>, 'CHECK...a170>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d87a170>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method WrappedRespondersResource.on_get of <test_before_hooks.WrappedRespondersResource object at 0x7f237da96320>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ ERROR at setup of test_piggybacking_resource_post_and_delete[True] ______

request = <SubRequest 'app_client' for <Function test_piggybacking_resource_post_and_delete[True]>>

    @pytest.fixture(params=[True, False])
    def app_client(request):
        items = PiggybackingCollectionAsync() if request.param else PiggybackingCollection()
    
        app = create_app(asgi=request.param)
>       app.add_route('/items', items, suffix='collection')

tests/test_before_hooks.py:487: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237db79380>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f24820d56c0>, 'CHECK...56c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f24820d56c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method PiggybackingCollection.on_delete_collection of <test_before_hooks.PiggybackingCollectionAsync object at 0x7f2480a86c80>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__ ERROR at setup of test_wrapped_resource_with_hooks_aware_of_resource[asgi] __

asgi = True
request = <SubRequest 'client' for <Function test_wrapped_resource_with_hooks_aware_of_resource[asgi]>>
resource = <test_before_hooks.WrappedRespondersResource object at 0x7f237da3f400>

    @pytest.fixture
    def client(asgi, request, resource):
        app = create_app(asgi)
>       app.add_route('/', resource)

tests/test_before_hooks.py:251: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d9d8890>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d6ff5b0>, 'CHECK...f5b0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d6ff5b0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method WrappedRespondersResource.on_get of <test_before_hooks.WrappedRespondersResource object at 0x7f237da3f400>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________________ ERROR at setup of test_param_validator[asgi] _________________

asgi = True
request = <SubRequest 'client' for <Function test_param_validator[asgi]>>
resource = <test_before_hooks.WrappedRespondersResource object at 0x7f2480abe650>

    @pytest.fixture
    def client(asgi, request, resource):
        app = create_app(asgi)
>       app.add_route('/', resource)

tests/test_before_hooks.py:251: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237db0df50>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d9c70a0>, 'CHECK...70a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d9c70a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method WrappedRespondersResource.on_get of <test_before_hooks.WrappedRespondersResource object at 0x7f2480abe650>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ ERROR at setup of test_wrapped_resource[asgi] _________________

asgi = True
request = <SubRequest 'client' for <Function test_wrapped_resource[asgi]>>
resource = <test_before_hooks.WrappedRespondersResource object at 0x7f237da512d0>

    @pytest.fixture
    def client(asgi, request, resource):
        app = create_app(asgi)
>       app.add_route('/', resource)

tests/test_before_hooks.py:251: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237da2da10>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f24820d7370>, 'CHECK...7370>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f24820d7370>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method WrappedRespondersResource.on_get of <test_before_hooks.WrappedRespondersResource object at 0x7f237da512d0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
=================================== FAILURES ===================================
_______________ TestMain.test_routes_only[internal-not-verbose] ________________

self = <test_cmd_inspect_app.TestMain object at 0x7f234e7e34c0>, verbose = False
internal = True
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f232dbf3eb0>

    def test_routes_only(self, verbose, internal, monkeypatch):
        args = ['some-file.py', '{}:{}'.format(_MODULE, '_APP'), '-r']
        if verbose:
            args.append('-v')
        if internal:
            args.append('-i')
        monkeypatch.setattr('sys.argv', args)
        output = io.StringIO()
        with redirected(stdout=output):
>           inspect_app.main()

tests/test_cmd_inspect_app.py:163: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:100: in main
    app = load_app(parser, args)
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7f248642f400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
_____________ TestMain.test_routes_only[not-internal-not-verbose] ______________

self = <test_cmd_inspect_app.TestMain object at 0x7f234e7e35e0>, verbose = False
internal = False
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f232dae7dc0>

    def test_routes_only(self, verbose, internal, monkeypatch):
        args = ['some-file.py', '{}:{}'.format(_MODULE, '_APP'), '-r']
        if verbose:
            args.append('-v')
        if internal:
            args.append('-i')
        monkeypatch.setattr('sys.argv', args)
        output = io.StringIO()
        with redirected(stdout=output):
>           inspect_app.main()

tests/test_cmd_inspect_app.py:163: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:100: in main
    app = load_app(parser, args)
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7f248642f400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
_______________ TestMain.test_inspect[not-internal-not-verbose] ________________

self = <test_cmd_inspect_app.TestMain object at 0x7f234e7e39d0>, verbose = False
internal = False
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f232d947f40>

    def test_inspect(self, verbose, internal, monkeypatch):
        args = ['some-file.py', '{}:{}'.format(_MODULE, '_APP')]
        if verbose:
            args.append('-v')
        if internal:
            args.append('-i')
        monkeypatch.setattr('sys.argv', args)
        output = io.StringIO()
        with redirected(stdout=output):
>           inspect_app.main()

tests/test_cmd_inspect_app.py:178: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:100: in main
    app = load_app(parser, args)
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7f248642f400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
_________________ TestMain.test_routes_only[internal-verbose] __________________

self = <test_cmd_inspect_app.TestMain object at 0x7f234e7e3430>, verbose = True
internal = True
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f232da3cc70>

    def test_routes_only(self, verbose, internal, monkeypatch):
        args = ['some-file.py', '{}:{}'.format(_MODULE, '_APP'), '-r']
        if verbose:
            args.append('-v')
        if internal:
            args.append('-i')
        monkeypatch.setattr('sys.argv', args)
        output = io.StringIO()
        with redirected(stdout=output):
>           inspect_app.main()

tests/test_cmd_inspect_app.py:163: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:100: in main
    app = load_app(parser, args)
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7f248642f400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
___________________ TestMain.test_inspect[internal-verbose] ____________________

self = <test_cmd_inspect_app.TestMain object at 0x7f234e7e3820>, verbose = True
internal = True
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f232da63520>

    def test_inspect(self, verbose, internal, monkeypatch):
        args = ['some-file.py', '{}:{}'.format(_MODULE, '_APP')]
        if verbose:
            args.append('-v')
        if internal:
            args.append('-i')
        monkeypatch.setattr('sys.argv', args)
        output = io.StringIO()
        with redirected(stdout=output):
>           inspect_app.main()

tests/test_cmd_inspect_app.py:178: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:100: in main
    app = load_app(parser, args)
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7f248642f400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
_________________ TestMain.test_inspect[internal-not-verbose] __________________

self = <test_cmd_inspect_app.TestMain object at 0x7f234e7e38b0>, verbose = False
internal = True
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f232daf9210>

    def test_inspect(self, verbose, internal, monkeypatch):
        args = ['some-file.py', '{}:{}'.format(_MODULE, '_APP')]
        if verbose:
            args.append('-v')
        if internal:
            args.append('-i')
        monkeypatch.setattr('sys.argv', args)
        output = io.StringIO()
        with redirected(stdout=output):
>           inspect_app.main()

tests/test_cmd_inspect_app.py:178: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:100: in main
    app = load_app(parser, args)
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7f248642f400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
_________________ TestMain.test_inspect[not-internal-verbose] __________________

self = <test_cmd_inspect_app.TestMain object at 0x7f234e7e3940>, verbose = True
internal = False
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f232d999f90>

    def test_inspect(self, verbose, internal, monkeypatch):
        args = ['some-file.py', '{}:{}'.format(_MODULE, '_APP')]
        if verbose:
            args.append('-v')
        if internal:
            args.append('-i')
        monkeypatch.setattr('sys.argv', args)
        output = io.StringIO()
        with redirected(stdout=output):
>           inspect_app.main()

tests/test_cmd_inspect_app.py:178: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:100: in main
    app = load_app(parser, args)
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7f248642f400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
_______________ TestMain.test_routes_only[not-internal-verbose] ________________

self = <test_cmd_inspect_app.TestMain object at 0x7f234e7e3550>, verbose = True
internal = False
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f232da55810>

    def test_routes_only(self, verbose, internal, monkeypatch):
        args = ['some-file.py', '{}:{}'.format(_MODULE, '_APP'), '-r']
        if verbose:
            args.append('-v')
        if internal:
            args.append('-i')
        monkeypatch.setattr('sys.argv', args)
        output = io.StringIO()
        with redirected(stdout=output):
>           inspect_app.main()

tests/test_cmd_inspect_app.py:163: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:100: in main
    app = load_app(parser, args)
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7f248642f400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
_____________________ TestLoadApp.test_load_app_error[foo] _____________________

self = <test_cmd_inspect_app.TestLoadApp object at 0x7f234e7e2cb0>, name = 'foo'

    @pytest.mark.parametrize(
        'name',
        (
            'foo',  # not exists
            '_MODULE',  # not callable and not app
            'DummyResource',  # callable and not app
        ),
    )
    def test_load_app_error(self, name):
        parser = inspect_app.make_parser()
        args = Namespace(
            app_module='{}:{}'.format(_MODULE, name), route_only=False, verbose=False
        )
        with pytest.raises(SystemExit):
>           inspect_app.load_app(parser, args)

tests/test_cmd_inspect_app.py:134: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7f248642f400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
_______________________ TestLoadApp.test_load_app[_APP] ________________________

self = <test_cmd_inspect_app.TestLoadApp object at 0x7f234e7e2f80>
name = '_APP'

    @pytest.mark.parametrize('name', ('_APP', 'make_app'))
    def test_load_app(self, name):
        parser = inspect_app.make_parser()
        args = Namespace(
            app_module='{}:{}'.format(_MODULE, name), route_only=False, verbose=False
        )
>       app = inspect_app.load_app(parser, args)

tests/test_cmd_inspect_app.py:116: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7f248642f400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
________________ TestLoadApp.test_load_app_error[DummyResource] ________________

self = <test_cmd_inspect_app.TestLoadApp object at 0x7f234e7e1a50>
name = 'DummyResource'

    @pytest.mark.parametrize(
        'name',
        (
            'foo',  # not exists
            '_MODULE',  # not callable and not app
            'DummyResource',  # callable and not app
        ),
    )
    def test_load_app_error(self, name):
        parser = inspect_app.make_parser()
        args = Namespace(
            app_module='{}:{}'.format(_MODULE, name), route_only=False, verbose=False
        )
        with pytest.raises(SystemExit):
>           inspect_app.load_app(parser, args)

tests/test_cmd_inspect_app.py:134: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7f248642f400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
_____________________ TestLoadApp.test_load_app[make_app] ______________________

self = <test_cmd_inspect_app.TestLoadApp object at 0x7f234e7e3010>
name = 'make_app'

    @pytest.mark.parametrize('name', ('_APP', 'make_app'))
    def test_load_app(self, name):
        parser = inspect_app.make_parser()
        args = Namespace(
            app_module='{}:{}'.format(_MODULE, name), route_only=False, verbose=False
        )
>       app = inspect_app.load_app(parser, args)

tests/test_cmd_inspect_app.py:116: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7f248642f400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
___________________ TestLoadApp.test_load_app_error[_MODULE] ___________________

self = <test_cmd_inspect_app.TestLoadApp object at 0x7f234e7e2410>
name = '_MODULE'

    @pytest.mark.parametrize(
        'name',
        (
            'foo',  # not exists
            '_MODULE',  # not callable and not app
            'DummyResource',  # callable and not app
        ),
    )
    def test_load_app_error(self, name):
        parser = inspect_app.make_parser()
        args = Namespace(
            app_module='{}:{}'.format(_MODULE, name), route_only=False, verbose=False
        )
        with pytest.raises(SystemExit):
>           inspect_app.load_app(parser, args)

tests/test_cmd_inspect_app.py:134: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7f248642f400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
___________________________ test_jsonchema_validator ___________________________

client = <falcon.testing.client.TestClient object at 0x7f237d6d9000>

    @pytest.mark.skipif(not pyximport, reason='Cython not installed')
    def test_jsonchema_validator(client):
        with disable_asgi_non_coroutine_wrapping():
            if CYTHON_COROUTINE_HINT:
>               client.app.add_route('/', _cythonized.TestResourceWithValidationNoHint())

tests/asgi/test_cythonized_asgi.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2482015c40>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232e78c670>, 'CHECK...c670>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232e78c670>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestResourceWithValidationNoHint.on_get of <asgi._cythonized.TestResourceWithValidationNoHint object at 0x7f237d6d9660>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________________________ test_hooks __________________________________

client = <falcon.testing.client.TestClient object at 0x7f237dc110c0>

    @pytest.mark.skipif(not pyximport, reason='Cython not installed')
    def test_hooks(client):
        with disable_asgi_non_coroutine_wrapping():
            if CYTHON_COROUTINE_HINT:
>               client.app.add_route('/', _cythonized.TestResourceWithHooksNoHint())

tests/asgi/test_cythonized_asgi.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f24821df6f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232e5b3eb0>, 'CHECK...3eb0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232e5b3eb0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestResourceWithHooksNoHint.on_get of <asgi._cythonized.TestResourceWithHooksNoHint object at 0x7f237dc11450>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______________ test_content_length_set_on_head_with_no_body[asgi] ______________

asgi = True

    def test_content_length_set_on_head_with_no_body(asgi):
        class NoBody:
            def on_get(self, req, resp):
                pass
    
            on_head = on_get
    
        app = create_app(asgi)
>       app.add_route('/', NoBody())

tests/test_response_body.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f24821df300>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da2cee0>, 'CHECK...cee0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da2cee0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method test_content_length_set_on_head_with_no_body.<locals>.NoBody.on_get of <test_response_body.test_content_length_set_on_head_with_no_body.<locals>.NoBody object at 0x7f232da41c00>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________________ test_unsupported_response_content_type[asgi] _________________

asgi = True

    def test_unsupported_response_content_type(asgi):
        app = create_app(asgi)
>       app.add_route('/test.mal', CodeResource())

tests/test_response_body.py:112: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f24821bc820>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232e5b2050>, 'CHECK...2050>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232e5b2050>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CodeResource.on_get of <test_response_body.CodeResource object at 0x7f237dbf7910>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________________ test_response_body_rendition_error[asgi] ___________________

asgi = True

    def test_response_body_rendition_error(asgi):
        class MalbolgeHandler(falcon.media.BaseHandler):
            def serialize(self, media, content_type):
                raise falcon.HTTPError(falcon.HTTP_753)
    
        app = create_app(asgi)
        app.resp_options.media_handlers['text/x-malbolge'] = MalbolgeHandler()
>       app.add_route('/test.mal', CodeResource())

tests/test_response_body.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f24821bd540>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da2fe20>, 'CHECK...fe20>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da2fe20>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CodeResource.on_get of <test_response_body.CodeResource object at 0x7f237dbda680>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________________ TestCythonized.test_stream_has_private_read __________________

self = <test_cython.TestCythonized object at 0x7f23429e1210>

    def test_stream_has_private_read(self):
        stream = falcon.util.BufferedReader(io.BytesIO().read, 8)
    
        if has_cython and falcon.util.IS_64_BITS:
>           assert not hasattr(stream, '_read')
E           AssertionError: assert not True
E            +  where True = hasattr(<falcon.util.reader.BufferedReader object at 0x7f23425b2da0>, '_read')

tests/test_cython.py:20: AssertionError
_________________ TestCythonized.test_imported_from_c_modules __________________

self = <test_cython.TestCythonized object at 0x7f23429e1090>

    @pytest.mark.skipif(not has_cython, reason='Cython not installed')
    def test_imported_from_c_modules(self):
>       assert 'falcon/app.py' not in str(falcon.app)
E       assert 'falcon/app.py' not in "<module 'fa...con/app.py'>"
E         'falcon/app.py' is contained here:
E           ts/falcon/falcon/app.py'>

tests/test_cython.py:14: AssertionError
_ TestHeaders.test_content_disposition_inline_header[asgi-Hello World.txt-inline; filename="Hello World.txt"] _

self = <test_headers.TestHeaders object at 0x7f2342793a90>
client = <falcon.testing.client.TestClient object at 0x7f2482036320>
filename = 'Hello World.txt', expected = 'inline; filename="Hello World.txt"'

    @pytest.mark.parametrize(
        'filename,expected',
        [
            ('report.csv', 'inline; filename="report.csv"'),
            ('Hello World.txt', 'inline; filename="Hello World.txt"'),
            (
                'Bold Digit 𝟏.txt',
                'inline; filename=Bold_Digit_1.txt; '
                "filename*=UTF-8''Bold%20Digit%20%F0%9D%9F%8F.txt",
            ),
        ],
    )
    def test_content_disposition_inline_header(self, client, filename, expected):
        resource = ViewableResource(filename)
>       client.app.add_route('/', resource)

tests/test_headers.py:642: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481c1bf40>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dadd750>, 'CHECK...d750>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dadd750>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ViewableResource.on_get of <test_headers.ViewableResource object at 0x7f24820360b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ TestHeaders.test_headers_with_custom_class_not_callable[asgi] _________

self = <test_headers.TestHeaders object at 0x7f2342818940>
client = <falcon.testing.client.TestClient object at 0x7f24821ccdc0>

    def test_headers_with_custom_class_not_callable(self, client):
>       client.app.add_route('/', CustomHeadersResource())

tests/test_headers.py:1031: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2480bec820>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dade9e0>, 'CHECK...e9e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dade9e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CustomHeadersResource.on_get of <test_headers.CustomHeadersResource object at 0x7f24821cd660>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ TestHeaders.test_no_content_type[asgi-204 No Content] _____________

self = <test_headers.TestHeaders object at 0x7f23427da050>
client = <falcon.testing.client.TestClient object at 0x7f2481cf1f90>
status = '204 No Content'

    @pytest.mark.parametrize('status', (falcon.HTTP_204, falcon.HTTP_304))
    def test_no_content_type(self, client, status):
>       client.app.add_route('/', testing.SimpleTestResource(status=status))

tests/test_headers.py:842: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2480becc10>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db91870>, 'CHECK...1870>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db91870>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f2481cf2a10>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________ TestHeaders.test_unicode_headers_contain_non_ascii[asgi-PUT] _________

self = <test_headers.TestHeaders object at 0x7f23427d8280>, method = 'PUT'
client = <falcon.testing.client.TestClient object at 0x7f2481c9acb0>

    @pytest.mark.parametrize('method', ['CONNECT', 'PATCH', 'POST', 'PUT'])
    def test_unicode_headers_contain_non_ascii(self, method, client):
        app = client.app
>       app.add_route('/', UnicodeHeaderResource())

tests/test_headers.py:709: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2480bed460>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dadc1f0>, 'CHECK...be0>>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dadc1f0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method UnicodeHeaderResource.on_connect of <test_headers.UnicodeHeaderResource object at 0x7f2481c9bbe0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________________ TestHeaders.test_default_value[asgi] _____________________

self = <test_headers.TestHeaders object at 0x7f2342791060>
client = <falcon.testing.client.TestClient object at 0x7f24820128f0>

    def test_default_value(self, client):
        resource = testing.SimpleTestResource(body=SAMPLE_BODY)
>       client.app.add_route('/', resource)

tests/test_headers.py:398: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2480bed850>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dadfe20>, 'CHECK...fe20>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dadfe20>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f2482011e40>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_content_disposition_inline_header[asgi-report.csv-inline; filename="report.csv"] _

self = <test_headers.TestHeaders object at 0x7f2342793a00>
client = <falcon.testing.client.TestClient object at 0x7f232dbf21d0>
filename = 'report.csv', expected = 'inline; filename="report.csv"'

    @pytest.mark.parametrize(
        'filename,expected',
        [
            ('report.csv', 'inline; filename="report.csv"'),
            ('Hello World.txt', 'inline; filename="Hello World.txt"'),
            (
                'Bold Digit 𝟏.txt',
                'inline; filename=Bold_Digit_1.txt; '
                "filename*=UTF-8''Bold%20Digit%20%F0%9D%9F%8F.txt",
            ),
        ],
    )
    def test_content_disposition_inline_header(self, client, filename, expected):
        resource = ViewableResource(filename)
>       client.app.add_route('/', resource)

tests/test_headers.py:642: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2480bef4c0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dadcb80>, 'CHECK...cb80>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dadcb80>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ViewableResource.on_get of <test_headers.ViewableResource object at 0x7f232dbf0580>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_content_disposition_attachment_header[asgi-\xc5ngstr\xf6m unit.txt-attachment; filename=A_ngstro_m_unit.txt; filename*=UTF-8''%C3%85ngstr%C3%B6m%20unit.txt] _

self = <test_headers.TestHeaders object at 0x7f23427921a0>
client = <falcon.testing.client.TestClient object at 0x7f2341e910f0>
filename = 'Ångström unit.txt'
expected = "attachment; filename=A_ngstro_m_unit.txt; filename*=UTF-8''%C3%85ngstr%C3%B6m%20unit.txt"

    @pytest.mark.parametrize(
        'filename,expected',
        [
            ('report.csv', 'attachment; filename="report.csv"'),
            ('Hello World.txt', 'attachment; filename="Hello World.txt"'),
            (
                'Bold Digit 𝟏.txt',
                'attachment; filename=Bold_Digit_1.txt; '
                "filename*=UTF-8''Bold%20Digit%20%F0%9D%9F%8F.txt",
            ),
            (
                'Ångström unit.txt',
                'attachment; filename=A_ngstro_m_unit.txt; '
                "filename*=UTF-8''%C3%85ngstr%C3%B6m%20unit.txt",
            ),
            ('one,two.txt', 'attachment; filename="one,two.txt"'),
            (
                '½,²⁄₂.txt',
                'attachment; filename=1_2_2_2.txt; '
                "filename*=UTF-8''%C2%BD%2C%C2%B2%E2%81%84%E2%82%82.txt",
            ),
            ('[foo] @ bar.txt', 'attachment; filename="[foo] @ bar.txt"'),
            (
                '[fòó]@bàr,bäz.txt',
                'attachment; filename=_fo_o___ba_r_ba_z.txt; '
                "filename*=UTF-8''%5Bf%C3%B2%C3%B3%5D%40b%C3%A0r%2Cb%C3%A4z.txt",
            ),
        ],
    )
    def test_content_disposition_attachment_header(self, client, filename, expected):
        resource = DownloadableResource(filename)
>       client.app.add_route('/', resource)

tests/test_headers.py:622: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481c1b610>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db92440>, 'CHECK...2440>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db92440>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method DownloadableResource.on_get of <test_headers.DownloadableResource object at 0x7f237dbf4790>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ TestHeaders.test_response_append_header[asgi] _________________

self = <test_headers.TestHeaders object at 0x7f23427d8a60>
client = <falcon.testing.client.TestClient object at 0x7f232dafbd30>

    def test_response_append_header(self, client):
>       client.app.add_route('/', AppendHeaderResource())

tests/test_headers.py:781: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f24821bc5f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db92320>, 'CHECK...2320>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db92320>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method AppendHeaderResource.on_get of <test_headers.AppendHeaderResource object at 0x7f232da4a350>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ TestHeaders.test_declared_content_length_on_head[asgi] ____________

self = <test_headers.TestHeaders object at 0x7f2342790310>
client = <falcon.testing.client.TestClient object at 0x7f232da8c700>

    def test_declared_content_length_on_head(self, client):
>       client.app.add_route('/', ContentLengthHeaderResource(42))

tests/test_headers.py:336: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f24821bd850>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da2c160>, 'CHECK...c160>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da2c160>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ContentLengthHeaderResource.on_get of <test_headers.ContentLengthHeaderResource object at 0x7f232da8fd90>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________ TestHeaders.test_no_content_length[asgi-204 No Content] ____________

self = <test_headers.TestHeaders object at 0x7f2342791cc0>
client = <falcon.testing.client.TestClient object at 0x7f232d99a8f0>
status = '204 No Content'

    @pytest.mark.parametrize('status', (falcon.HTTP_204, falcon.HTTP_304))
    def test_no_content_length(self, client, status):
>       client.app.add_route('/xxx', testing.SimpleTestResource(status=status))

tests/test_headers.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2482015620>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db911b0>, 'CHECK...11b0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db911b0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f232d99b220>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_append_link_crossorigin[asgi-Use-Credentials-</related/thing>; rel=alternate; crossorigin="use-credentials"] _

self = <test_headers.TestHeaders object at 0x7f23427dbc70>
client = <falcon.testing.client.TestClient object at 0x7f237d8248e0>
crossorigin = 'Use-Credentials'
expected_value = '</related/thing>; rel=alternate; crossorigin="use-credentials"'

    @pytest.mark.parametrize(
        'crossorigin,expected_value',
        [
            (None, '</related/thing>; rel=alternate'),
            ('anonymous', '</related/thing>; rel=alternate; crossorigin'),
            ('Anonymous', '</related/thing>; rel=alternate; crossorigin'),
            ('AnOnYmOUs', '</related/thing>; rel=alternate; crossorigin'),
            (
                'Use-Credentials',
                '</related/thing>; rel=alternate; crossorigin="use-credentials"',
            ),
            (
                'use-credentials',
                '</related/thing>; rel=alternate; crossorigin="use-credentials"',
            ),
        ],
    )
    def test_append_link_crossorigin(self, client, crossorigin, expected_value):
        resource = LinkHeaderResource()
        resource.append_link('/related/thing', 'alternate', crossorigin=crossorigin)
    
>       self._check_link_header(client, resource, expected_value)

tests/test_headers.py:987: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1060: in _check_link_header
    self._check_header(client, resource, 'Link', expected_value)
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f24821dd230>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dadd750>, 'CHECK...d750>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dadd750>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method LinkHeaderResource.on_get of <test_headers.LinkHeaderResource object at 0x7f237d826860>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_append_link_crossorigin[asgi-Anonymous-</related/thing>; rel=alternate; crossorigin] _

self = <test_headers.TestHeaders object at 0x7f23427dbb50>
client = <falcon.testing.client.TestClient object at 0x7f232da49840>
crossorigin = 'Anonymous'
expected_value = '</related/thing>; rel=alternate; crossorigin'

    @pytest.mark.parametrize(
        'crossorigin,expected_value',
        [
            (None, '</related/thing>; rel=alternate'),
            ('anonymous', '</related/thing>; rel=alternate; crossorigin'),
            ('Anonymous', '</related/thing>; rel=alternate; crossorigin'),
            ('AnOnYmOUs', '</related/thing>; rel=alternate; crossorigin'),
            (
                'Use-Credentials',
                '</related/thing>; rel=alternate; crossorigin="use-credentials"',
            ),
            (
                'use-credentials',
                '</related/thing>; rel=alternate; crossorigin="use-credentials"',
            ),
        ],
    )
    def test_append_link_crossorigin(self, client, crossorigin, expected_value):
        resource = LinkHeaderResource()
        resource.append_link('/related/thing', 'alternate', crossorigin=crossorigin)
    
>       self._check_link_header(client, resource, expected_value)

tests/test_headers.py:987: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1060: in _check_link_header
    self._check_header(client, resource, 'Link', expected_value)
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f24821be340>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dadfac0>, 'CHECK...fac0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dadfac0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method LinkHeaderResource.on_get of <test_headers.LinkHeaderResource object at 0x7f232da48580>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______________ TestHeaders.test_unicode_location_headers[asgi] ________________

self = <test_headers.TestHeaders object at 0x7f23427d8040>
client = <falcon.testing.client.TestClient object at 0x7f232daf2200>

    def test_unicode_location_headers(self, client):
>       client.app.add_route('/', LocationHeaderUnicodeResource())

tests/test_headers.py:686: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2480beeb90>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dadcee0>, 'CHECK...cee0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dadcee0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method LocationHeaderUnicodeResource.on_get of <test_headers.LocationHeaderUnicodeResource object at 0x7f232daf2b00>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______________ TestHeaders.test_passthrough_request_headers[asgi] ______________

self = <test_headers.TestHeaders object at 0x7f2342791f60>
client = <falcon.testing.client.TestClient object at 0x7f248219fc10>

    def test_passthrough_request_headers(self, client):
        resource = testing.SimpleTestResource(body=SAMPLE_BODY)
>       client.app.add_route('/', resource)

tests/test_headers.py:451: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2480bedbd0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da2ed40>, 'CHECK...ed40>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da2ed40>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f248219edd0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____ TestHeaders.test_vary_header[asgi-vary1-accept-encoding, x-auth-token] ____

self = <test_headers.TestHeaders object at 0x7f23427d9ae0>
client = <falcon.testing.client.TestClient object at 0x7f232daf1c90>
vary = ('accept-encoding', 'x-auth-token')
expected_value = 'accept-encoding, x-auth-token'

    @pytest.mark.parametrize(
        'vary,expected_value',
        [
            (['accept-encoding'], 'accept-encoding'),
            (('accept-encoding', 'x-auth-token'), 'accept-encoding, x-auth-token'),
        ],
    )
    def test_vary_header(self, client, vary, expected_value):
        resource = VaryHeaderResource(vary)
>       self._check_header(client, resource, 'Vary', expected_value)

tests/test_headers.py:829: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2480bee1f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da2e0e0>, 'CHECK...e0e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da2e0e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method VaryHeaderResource.on_get of <test_headers.VaryHeaderResource object at 0x7f232daf3a00>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ TestHeaders.test_request_multiple_header[asgi] ________________

self = <test_headers.TestHeaders object at 0x7f2342818b80>
client = <falcon.testing.client.TestClient object at 0x7f2481cf1840>

    def test_request_multiple_header(self, client):
        resource = HeaderHelpersResource()
>       client.app.add_route('/', resource)

tests/test_headers.py:1039: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481c48f20>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da2cd30>, 'CHECK...cd30>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da2cd30>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method HeaderHelpersResource.on_get of <test_headers.HeaderHelpersResource object at 0x7f2481cf3670>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________________ TestHeaders.test_required_header[asgi] ____________________

self = <test_headers.TestHeaders object at 0x7f2342791720>
client = <falcon.testing.client.TestClient object at 0x7f232da40af0>

    def test_required_header(self, client):
        resource = testing.SimpleTestResource(body=SAMPLE_BODY)
>       client.app.add_route('/', resource)

tests/test_headers.py:422: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481c49e00>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db93400>, 'CHECK...3400>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db93400>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f232da42920>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____ TestHeaders.test_declared_content_length_overridden_by_no_body[asgi] _____

self = <test_headers.TestHeaders object at 0x7f2342790580>
client = <falcon.testing.client.TestClient object at 0x7f237d6db580>

    def test_declared_content_length_overridden_by_no_body(self, client):
>       client.app.add_route('/', ContentLengthHeaderResource(42))

tests/test_headers.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481c4a110>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dadc160>, 'CHECK...c160>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dadc160>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ContentLengthHeaderResource.on_get of <test_headers.ContentLengthHeaderResource object at 0x7f237d6da890>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______________ TestHeaders.test_append_link_with_title_star[asgi] ______________

self = <test_headers.TestHeaders object at 0x7f23427daa10>
client = <falcon.testing.client.TestClient object at 0x7f2481cc24d0>

    def test_append_link_with_title_star(self, client):
        expected_value = (
            '</related/thing>; rel=item; '
            "title*=UTF-8''A%20related%20thing, "
            '</%C3%A7runchy/thing>; rel=item; '
            "title*=UTF-8'en'A%20%C3%A7runchy%20thing"
        )
    
        resource = LinkHeaderResource()
        resource.append_link(
            '/related/thing', 'item', title_star=('', 'A related thing')
        )
    
        resource.append_link(
            '/\u00e7runchy/thing', 'item', title_star=('en', 'A \u00e7runchy thing')
        )
    
>       self._check_link_header(client, resource, expected_value)

tests/test_headers.py:907: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1060: in _check_link_header
    self._check_header(client, resource, 'Link', expected_value)
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481c485f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dadedd0>, 'CHECK...edd0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dadedd0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method LinkHeaderResource.on_get of <test_headers.LinkHeaderResource object at 0x7f2481cc3a90>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_content_disposition_attachment_header[asgi-one,two.txt-attachment; filename="one,two.txt"] _

self = <test_headers.TestHeaders object at 0x7f2342791030>
client = <falcon.testing.client.TestClient object at 0x7f24821cc280>
filename = 'one,two.txt', expected = 'attachment; filename="one,two.txt"'

    @pytest.mark.parametrize(
        'filename,expected',
        [
            ('report.csv', 'attachment; filename="report.csv"'),
            ('Hello World.txt', 'attachment; filename="Hello World.txt"'),
            (
                'Bold Digit 𝟏.txt',
                'attachment; filename=Bold_Digit_1.txt; '
                "filename*=UTF-8''Bold%20Digit%20%F0%9D%9F%8F.txt",
            ),
            (
                'Ångström unit.txt',
                'attachment; filename=A_ngstro_m_unit.txt; '
                "filename*=UTF-8''%C3%85ngstr%C3%B6m%20unit.txt",
            ),
            ('one,two.txt', 'attachment; filename="one,two.txt"'),
            (
                '½,²⁄₂.txt',
                'attachment; filename=1_2_2_2.txt; '
                "filename*=UTF-8''%C2%BD%2C%C2%B2%E2%81%84%E2%82%82.txt",
            ),
            ('[foo] @ bar.txt', 'attachment; filename="[foo] @ bar.txt"'),
            (
                '[fòó]@bàr,bäz.txt',
                'attachment; filename=_fo_o___ba_r_ba_z.txt; '
                "filename*=UTF-8''%5Bf%C3%B2%C3%B3%5D%40b%C3%A0r%2Cb%C3%A4z.txt",
            ),
        ],
    )
    def test_content_disposition_attachment_header(self, client, filename, expected):
        resource = DownloadableResource(filename)
>       client.app.add_route('/', resource)

tests/test_headers.py:622: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481c49380>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da2c670>, 'CHECK...c670>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da2c670>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method DownloadableResource.on_get of <test_headers.DownloadableResource object at 0x7f24821cec80>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________________ TestHeaders.test_headers_as_list[asgi] ____________________

self = <test_headers.TestHeaders object at 0x7f2342790e20>
client = <falcon.testing.client.TestClient object at 0x7f237db1b8b0>

    def test_headers_as_list(self, client):
        headers = [
            ('Client-ID', '692ba466-74bb-11e3-bf3f-7567c531c7ca'),
            ('Accept', 'audio/*; q=0.2, audio/basic'),
        ]
    
        # Unit test
        environ = testing.create_environ(headers=headers)
        req = falcon.Request(environ)
    
        for name, value in headers:
            assert (name.upper(), value) in req.headers.items()
            assert (name.lower(), value) in req.headers_lower.items()
    
        # Functional test
>       client.app.add_route('/', testing.SimpleTestResource(headers=headers))

tests/test_headers.py:487: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f248218d3f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da2dd80>, 'CHECK...dd80>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da2dd80>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f237db18ca0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________________ TestHeaders.test_append_link_multiple[asgi] __________________

self = <test_headers.TestHeaders object at 0x7f23427da530>
client = <falcon.testing.client.TestClient object at 0x7f2481e03f10>

    def test_append_link_multiple(self, client):
        expected_value = (
            '</things/2842>; rel=next, '
            + '<http://%C3%A7runchy/bacon>; rel=contents, '
            + '<ab%C3%A7>; rel="http://example.com/ext-type", '
            + '<ab%C3%A7>; rel="http://example.com/%C3%A7runchy", '
            + '<ab%C3%A7>; rel="https://example.com/too-%C3%A7runchy", '
            + '</alt-thing>; rel="alternate http://example.com/%C3%A7runchy"'
        )
    
        uri = 'ab\u00e7'
    
        resource = LinkHeaderResource()
        resource.add_link('/things/2842', 'next')
        resource.append_link('http://\u00e7runchy/bacon', 'contents')
        resource.append_link(uri, 'http://example.com/ext-type')
        resource.add_link(uri, 'http://example.com/\u00e7runchy')
        resource.append_link(uri, 'https://example.com/too-\u00e7runchy')
        resource.add_link('/alt-thing', 'alternate http://example.com/\u00e7runchy')
    
>       self._check_link_header(client, resource, expected_value)

tests/test_headers.py:880: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1060: in _check_link_header
    self._check_header(client, resource, 'Link', expected_value)
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481c1b8b0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da2f6d0>, 'CHECK...f6d0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da2f6d0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method LinkHeaderResource.on_get of <test_headers.LinkHeaderResource object at 0x7f2481e02f80>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_content_disposition_attachment_header[asgi-Hello World.txt-attachment; filename="Hello World.txt"] _

self = <test_headers.TestHeaders object at 0x7f2342792b00>
client = <falcon.testing.client.TestClient object at 0x7f232d989ed0>
filename = 'Hello World.txt'
expected = 'attachment; filename="Hello World.txt"'

    @pytest.mark.parametrize(
        'filename,expected',
        [
            ('report.csv', 'attachment; filename="report.csv"'),
            ('Hello World.txt', 'attachment; filename="Hello World.txt"'),
            (
                'Bold Digit 𝟏.txt',
                'attachment; filename=Bold_Digit_1.txt; '
                "filename*=UTF-8''Bold%20Digit%20%F0%9D%9F%8F.txt",
            ),
            (
                'Ångström unit.txt',
                'attachment; filename=A_ngstro_m_unit.txt; '
                "filename*=UTF-8''%C3%85ngstr%C3%B6m%20unit.txt",
            ),
            ('one,two.txt', 'attachment; filename="one,two.txt"'),
            (
                '½,²⁄₂.txt',
                'attachment; filename=1_2_2_2.txt; '
                "filename*=UTF-8''%C2%BD%2C%C2%B2%E2%81%84%E2%82%82.txt",
            ),
            ('[foo] @ bar.txt', 'attachment; filename="[foo] @ bar.txt"'),
            (
                '[fòó]@bàr,bäz.txt',
                'attachment; filename=_fo_o___ba_r_ba_z.txt; '
                "filename*=UTF-8''%5Bf%C3%B2%C3%B3%5D%40b%C3%A0r%2Cb%C3%A4z.txt",
            ),
        ],
    )
    def test_content_disposition_attachment_header(self, client, filename, expected):
        resource = DownloadableResource(filename)
>       client.app.add_route('/', resource)

tests/test_headers.py:622: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2480bed7e0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da2f2e0>, 'CHECK...f2e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da2f2e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method DownloadableResource.on_get of <test_headers.DownloadableResource object at 0x7f232d988a30>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_append_link_crossorigin[asgi-None-</related/thing>; rel=alternate] _

self = <test_headers.TestHeaders object at 0x7f23427dba30>
client = <falcon.testing.client.TestClient object at 0x7f232da8ce20>
crossorigin = None, expected_value = '</related/thing>; rel=alternate'

    @pytest.mark.parametrize(
        'crossorigin,expected_value',
        [
            (None, '</related/thing>; rel=alternate'),
            ('anonymous', '</related/thing>; rel=alternate; crossorigin'),
            ('Anonymous', '</related/thing>; rel=alternate; crossorigin'),
            ('AnOnYmOUs', '</related/thing>; rel=alternate; crossorigin'),
            (
                'Use-Credentials',
                '</related/thing>; rel=alternate; crossorigin="use-credentials"',
            ),
            (
                'use-credentials',
                '</related/thing>; rel=alternate; crossorigin="use-credentials"',
            ),
        ],
    )
    def test_append_link_crossorigin(self, client, crossorigin, expected_value):
        resource = LinkHeaderResource()
        resource.append_link('/related/thing', 'alternate', crossorigin=crossorigin)
    
>       self._check_link_header(client, resource, expected_value)

tests/test_headers.py:987: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1060: in _check_link_header
    self._check_header(client, resource, 'Link', expected_value)
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f24821bd070>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dadc820>, 'CHECK...c820>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dadc820>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method LinkHeaderResource.on_get of <test_headers.LinkHeaderResource object at 0x7f232da8cc70>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________ TestHeaders.test_vary_header[asgi-vary0-accept-encoding] ___________

self = <test_headers.TestHeaders object at 0x7f23427d9a50>
client = <falcon.testing.client.TestClient object at 0x7f232da57f70>
vary = ['accept-encoding'], expected_value = 'accept-encoding'

    @pytest.mark.parametrize(
        'vary,expected_value',
        [
            (['accept-encoding'], 'accept-encoding'),
            (('accept-encoding', 'x-auth-token'), 'accept-encoding, x-auth-token'),
        ],
    )
    def test_vary_header(self, client, vary, expected_value):
        resource = VaryHeaderResource(vary)
>       self._check_header(client, resource, 'Vary', expected_value)

tests/test_headers.py:829: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481c4b6f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da2d1b0>, 'CHECK...d1b0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da2d1b0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method VaryHeaderResource.on_get of <test_headers.VaryHeaderResource object at 0x7f237d6d9060>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_append_link_crossorigin[asgi-AnOnYmOUs-</related/thing>; rel=alternate; crossorigin] _

self = <test_headers.TestHeaders object at 0x7f23427dbbe0>
client = <falcon.testing.client.TestClient object at 0x7f232d9022c0>
crossorigin = 'AnOnYmOUs'
expected_value = '</related/thing>; rel=alternate; crossorigin'

    @pytest.mark.parametrize(
        'crossorigin,expected_value',
        [
            (None, '</related/thing>; rel=alternate'),
            ('anonymous', '</related/thing>; rel=alternate; crossorigin'),
            ('Anonymous', '</related/thing>; rel=alternate; crossorigin'),
            ('AnOnYmOUs', '</related/thing>; rel=alternate; crossorigin'),
            (
                'Use-Credentials',
                '</related/thing>; rel=alternate; crossorigin="use-credentials"',
            ),
            (
                'use-credentials',
                '</related/thing>; rel=alternate; crossorigin="use-credentials"',
            ),
        ],
    )
    def test_append_link_crossorigin(self, client, crossorigin, expected_value):
        resource = LinkHeaderResource()
        resource.append_link('/related/thing', 'alternate', crossorigin=crossorigin)
    
>       self._check_link_header(client, resource, expected_value)

tests/test_headers.py:987: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1060: in _check_link_header
    self._check_header(client, resource, 'Link', expected_value)
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481c4b760>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da2e290>, 'CHECK...e290>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da2e290>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method LinkHeaderResource.on_get of <test_headers.LinkHeaderResource object at 0x7f232d900d30>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ TestHeaders.test_append_link_with_anchor[asgi] ________________

self = <test_headers.TestHeaders object at 0x7f23427dac80>
client = <falcon.testing.client.TestClient object at 0x7f2480b4e3e0>

    def test_append_link_with_anchor(self, client):
        expected_value = '</related/thing>; rel=item; anchor="/some%20thing/or-other"'
    
        resource = LinkHeaderResource()
        resource.append_link('/related/thing', 'item', anchor='/some thing/or-other')
    
>       self._check_link_header(client, resource, expected_value)

tests/test_headers.py:915: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1060: in _check_link_header
    self._check_header(client, resource, 'Link', expected_value)
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481c4bdf0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da2d7e0>, 'CHECK...d7e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da2d7e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method LinkHeaderResource.on_get of <test_headers.LinkHeaderResource object at 0x7f2480b4d330>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ TestHeaders.test_unicode_headers_contain_non_ascii[asgi-PATCH] ________

self = <test_headers.TestHeaders object at 0x7f23427d8520>, method = 'PATCH'
client = <falcon.testing.client.TestClient object at 0x7f232db44250>

    @pytest.mark.parametrize('method', ['CONNECT', 'PATCH', 'POST', 'PUT'])
    def test_unicode_headers_contain_non_ascii(self, method, client):
        app = client.app
>       app.add_route('/', UnicodeHeaderResource())

tests/test_headers.py:709: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2480bef990>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dac8f70>, 'CHECK...ee0>>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dac8f70>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method UnicodeHeaderResource.on_connect of <test_headers.UnicodeHeaderResource object at 0x7f232db47ee0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_append_link_crossorigin[asgi-use-credentials-</related/thing>; rel=alternate; crossorigin="use-credentials"] _

self = <test_headers.TestHeaders object at 0x7f23427dbd00>
client = <falcon.testing.client.TestClient object at 0x7f2480b65180>
crossorigin = 'use-credentials'
expected_value = '</related/thing>; rel=alternate; crossorigin="use-credentials"'

    @pytest.mark.parametrize(
        'crossorigin,expected_value',
        [
            (None, '</related/thing>; rel=alternate'),
            ('anonymous', '</related/thing>; rel=alternate; crossorigin'),
            ('Anonymous', '</related/thing>; rel=alternate; crossorigin'),
            ('AnOnYmOUs', '</related/thing>; rel=alternate; crossorigin'),
            (
                'Use-Credentials',
                '</related/thing>; rel=alternate; crossorigin="use-credentials"',
            ),
            (
                'use-credentials',
                '</related/thing>; rel=alternate; crossorigin="use-credentials"',
            ),
        ],
    )
    def test_append_link_crossorigin(self, client, crossorigin, expected_value):
        resource = LinkHeaderResource()
        resource.append_link('/related/thing', 'alternate', crossorigin=crossorigin)
    
>       self._check_link_header(client, resource, expected_value)

tests/test_headers.py:987: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1060: in _check_link_header
    self._check_header(client, resource, 'Link', expected_value)
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481c485f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dacbe20>, 'CHECK...be20>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dacbe20>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method LinkHeaderResource.on_get of <test_headers.LinkHeaderResource object at 0x7f2480b67820>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_override_default_media_type[text/plain; charset=UTF-8-Hello Unicode! \U0001f638-True] _

self = <test_headers.TestHeaders object at 0x7f2342792860>, asgi = True
client = <falcon.testing.client.TestClient object at 0x7f24821d3250>
content_type = 'text/plain; charset=UTF-8', body = 'Hello Unicode! 😸'

    @pytest.mark.parametrize('asgi', [True, False])
    @pytest.mark.parametrize(
        'content_type,body',
        [
            ('text/plain; charset=UTF-8', 'Hello Unicode! \U0001F638'),
            # NOTE(kgriffs): This only works because the client defaults to
            # ISO-8859-1 IFF the media type is 'text'.
            ('text/plain', 'Hello ISO-8859-1!'),
        ],
    )
    def test_override_default_media_type(self, asgi, client, content_type, body):
        client.app = create_app(asgi=asgi, media_type=content_type)
>       client.app.add_route('/', testing.SimpleTestResource(body=body))

tests/test_headers.py:509: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481c60040>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232daca3b0>, 'CHECK...a3b0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232daca3b0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f24821d2dd0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________________ TestHeaders.test_unset_header[asgi-True] ___________________

self = <test_headers.TestHeaders object at 0x7f2342791690>
client = <falcon.testing.client.TestClient object at 0x7f232e71d960>
with_double_quotes = True

    @pytest.mark.parametrize('with_double_quotes', [True, False])
    def test_unset_header(self, client, with_double_quotes):
>       client.app.add_route('/', RemoveHeaderResource(with_double_quotes))

tests/test_headers.py:414: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481c626c0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dac8940>, 'CHECK...8940>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dac8940>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method RemoveHeaderResource.on_get of <test_headers.RemoveHeaderResource object at 0x7f2481c992d0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___ TestHeaders.test_declared_content_length_overriden_by_data_length[asgi] ____

self = <test_headers.TestHeaders object at 0x7f23427907f0>
client = <falcon.testing.client.TestClient object at 0x7f232d900df0>

    def test_declared_content_length_overriden_by_data_length(self, client):
        data = SAMPLE_BODY.encode()
    
        resource = ContentLengthHeaderResource(42, data=data)
>       client.app.add_route('/', resource)

tests/test_headers.py:356: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481c62a40>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dac8e50>, 'CHECK...8e50>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dac8e50>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ContentLengthHeaderResource.on_get of <test_headers.ContentLengthHeaderResource object at 0x7f232d900a00>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_content_disposition_attachment_header[asgi-[foo] @ bar.txt-attachment; filename="[foo] @ bar.txt"] _

self = <test_headers.TestHeaders object at 0x7f2342793280>
client = <falcon.testing.client.TestClient object at 0x7f232e407e50>
filename = '[foo] @ bar.txt'
expected = 'attachment; filename="[foo] @ bar.txt"'

    @pytest.mark.parametrize(
        'filename,expected',
        [
            ('report.csv', 'attachment; filename="report.csv"'),
            ('Hello World.txt', 'attachment; filename="Hello World.txt"'),
            (
                'Bold Digit 𝟏.txt',
                'attachment; filename=Bold_Digit_1.txt; '
                "filename*=UTF-8''Bold%20Digit%20%F0%9D%9F%8F.txt",
            ),
            (
                'Ångström unit.txt',
                'attachment; filename=A_ngstro_m_unit.txt; '
                "filename*=UTF-8''%C3%85ngstr%C3%B6m%20unit.txt",
            ),
            ('one,two.txt', 'attachment; filename="one,two.txt"'),
            (
                '½,²⁄₂.txt',
                'attachment; filename=1_2_2_2.txt; '
                "filename*=UTF-8''%C2%BD%2C%C2%B2%E2%81%84%E2%82%82.txt",
            ),
            ('[foo] @ bar.txt', 'attachment; filename="[foo] @ bar.txt"'),
            (
                '[fòó]@bàr,bäz.txt',
                'attachment; filename=_fo_o___ba_r_ba_z.txt; '
                "filename*=UTF-8''%5Bf%C3%B2%C3%B3%5D%40b%C3%A0r%2Cb%C3%A4z.txt",
            ),
        ],
    )
    def test_content_disposition_attachment_header(self, client, filename, expected):
        resource = DownloadableResource(filename)
>       client.app.add_route('/', resource)

tests/test_headers.py:622: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481c60eb0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dac8af0>, 'CHECK...8af0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dac8af0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method DownloadableResource.on_get of <test_headers.DownloadableResource object at 0x7f232e407b80>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________ TestHeaders.test_unicode_headers_contain_only_ascii[asgi] ___________

self = <test_headers.TestHeaders object at 0x7f23427d8070>
client = <falcon.testing.client.TestClient object at 0x7f232da8f040>

    def test_unicode_headers_contain_only_ascii(self, client):
>       client.app.add_route('/', UnicodeHeaderResource())

tests/test_headers.py:698: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481c63610>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dac8670>, 'CHECK...590>>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dac8670>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method UnicodeHeaderResource.on_connect of <test_headers.UnicodeHeaderResource object at 0x7f232da8e590>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ TestHeaders.test_append_link_with_link_extension[asgi] ____________

self = <test_headers.TestHeaders object at 0x7f23428184c0>
client = <falcon.testing.client.TestClient object at 0x7f237dbbbac0>

    def test_append_link_with_link_extension(self, client):
        expected_value = '</related/thing>; rel=item; sizes=72x72'
    
        resource = LinkHeaderResource()
        resource.append_link(
            '/related/thing', 'item', link_extension=[('sizes', '72x72')]
        )
    
>       self._check_link_header(client, resource, expected_value)

tests/test_headers.py:1014: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1060: in _check_link_header
    self._check_header(client, resource, 'Link', expected_value)
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f24821beea0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232daca560>, 'CHECK...a560>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232daca560>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method LinkHeaderResource.on_get of <test_headers.LinkHeaderResource object at 0x7f237dbb84f0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ TestHeaders.test_response_header_helpers_on_get[asgi] _____________

self = <test_headers.TestHeaders object at 0x7f2342792c20>
client = <falcon.testing.client.TestClient object at 0x7f232da61900>

    def test_response_header_helpers_on_get(self, client):
        last_modified = datetime(2013, 1, 1, 10, 30, 30)
        resource = HeaderHelpersResource(last_modified)
>       client.app.add_route('/', resource)

tests/test_headers.py:531: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481c48eb0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da2f5b0>, 'CHECK...f5b0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da2f5b0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method HeaderHelpersResource.on_get of <test_headers.HeaderHelpersResource object at 0x7f232da61360>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______ TestHeaders.test_unicode_headers_contain_non_ascii[asgi-CONNECT] _______

self = <test_headers.TestHeaders object at 0x7f2342793d60>, method = 'CONNECT'
client = <falcon.testing.client.TestClient object at 0x7f237d6bf580>

    @pytest.mark.parametrize('method', ['CONNECT', 'PATCH', 'POST', 'PUT'])
    def test_unicode_headers_contain_non_ascii(self, method, client):
        app = client.app
>       app.add_route('/', UnicodeHeaderResource())

tests/test_headers.py:709: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2480bee1f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dadc820>, 'CHECK...4f0>>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dadc820>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method UnicodeHeaderResource.on_connect of <test_headers.UnicodeHeaderResource object at 0x7f237d6bc4f0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________________ TestHeaders.test_content_length[asgi] _____________________

self = <test_headers.TestHeaders object at 0x7f23427903a0>
client = <falcon.testing.client.TestClient object at 0x7f232e71f7f0>

    def test_content_length(self, client):
        resource = testing.SimpleTestResource(body=SAMPLE_BODY)
>       client.app.add_route('/', resource)

tests/test_headers.py:329: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f24821bc900>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dac8dc0>, 'CHECK...8dc0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dac8dc0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f232e71fd90>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______________ TestHeaders.test_response_set_and_get_header[asgi] ______________

self = <test_headers.TestHeaders object at 0x7f23427d8a30>
client = <falcon.testing.client.TestClient object at 0x7f24821a7160>

    def test_response_set_and_get_header(self, client):
        resource = HeaderHelpersResource()
>       client.app.add_route('/', resource)

tests/test_headers.py:745: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481c606d0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dac97e0>, 'CHECK...97e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dac97e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method HeaderHelpersResource.on_get of <test_headers.HeaderHelpersResource object at 0x7f24821a5420>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______________ TestHeaders.test_append_link_with_hreflang[asgi] _______________

self = <test_headers.TestHeaders object at 0x7f23427da560>
client = <falcon.testing.client.TestClient object at 0x7f2481c30370>

    def test_append_link_with_hreflang(self, client):
        expected_value = '</related/thing>; rel=about; hreflang=en'
    
        resource = LinkHeaderResource()
        resource.append_link('/related/thing', 'about', hreflang='en')
    
>       self._check_link_header(client, resource, expected_value)

tests/test_headers.py:923: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1060: in _check_link_header
    self._check_header(client, resource, 'Link', expected_value)
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481c61620>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dacb370>, 'CHECK...b370>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dacb370>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method LinkHeaderResource.on_get of <test_headers.LinkHeaderResource object at 0x7f2481c321d0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_append_link_crossorigin[asgi-anonymous-</related/thing>; rel=alternate; crossorigin] _

self = <test_headers.TestHeaders object at 0x7f23427dbac0>
client = <falcon.testing.client.TestClient object at 0x7f2480b11840>
crossorigin = 'anonymous'
expected_value = '</related/thing>; rel=alternate; crossorigin'

    @pytest.mark.parametrize(
        'crossorigin,expected_value',
        [
            (None, '</related/thing>; rel=alternate'),
            ('anonymous', '</related/thing>; rel=alternate; crossorigin'),
            ('Anonymous', '</related/thing>; rel=alternate; crossorigin'),
            ('AnOnYmOUs', '</related/thing>; rel=alternate; crossorigin'),
            (
                'Use-Credentials',
                '</related/thing>; rel=alternate; crossorigin="use-credentials"',
            ),
            (
                'use-credentials',
                '</related/thing>; rel=alternate; crossorigin="use-credentials"',
            ),
        ],
    )
    def test_append_link_crossorigin(self, client, crossorigin, expected_value):
        resource = LinkHeaderResource()
        resource.append_link('/related/thing', 'alternate', crossorigin=crossorigin)
    
>       self._check_link_header(client, resource, expected_value)

tests/test_headers.py:987: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1060: in _check_link_header
    self._check_header(client, resource, 'Link', expected_value)
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481c61690>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da2e8c0>, 'CHECK...e8c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da2e8c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method LinkHeaderResource.on_get of <test_headers.LinkHeaderResource object at 0x7f2480b13580>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ TestHeaders.test_append_link_single[asgi] ___________________

self = <test_headers.TestHeaders object at 0x7f23427da2f0>
client = <falcon.testing.client.TestClient object at 0x7f232da8c3d0>

    def test_append_link_single(self, client):
        expected_value = '</things/2842>; rel=next'
    
        resource = LinkHeaderResource()
        resource.append_link('/things/2842', 'next')
    
>       self._check_link_header(client, resource, expected_value)

tests/test_headers.py:858: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1060: in _check_link_header
    self._check_header(client, resource, 'Link', expected_value)
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481c61700>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dacac20>, 'CHECK...ac20>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dacac20>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method LinkHeaderResource.on_get of <test_headers.LinkHeaderResource object at 0x7f232da8e4a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_content_disposition_attachment_header[asgi-\xbd,\xb2\u2044\u2082.txt-attachment; filename=1_2_2_2.txt; filename*=UTF-8''%C2%BD%2C%C2%B2%E2%81%84%E2%82%82.txt] _

self = <test_headers.TestHeaders object at 0x7f23427931c0>
client = <falcon.testing.client.TestClient object at 0x7f2480b12f80>
filename = '½,²⁄₂.txt'
expected = "attachment; filename=1_2_2_2.txt; filename*=UTF-8''%C2%BD%2C%C2%B2%E2%81%84%E2%82%82.txt"

    @pytest.mark.parametrize(
        'filename,expected',
        [
            ('report.csv', 'attachment; filename="report.csv"'),
            ('Hello World.txt', 'attachment; filename="Hello World.txt"'),
            (
                'Bold Digit 𝟏.txt',
                'attachment; filename=Bold_Digit_1.txt; '
                "filename*=UTF-8''Bold%20Digit%20%F0%9D%9F%8F.txt",
            ),
            (
                'Ångström unit.txt',
                'attachment; filename=A_ngstro_m_unit.txt; '
                "filename*=UTF-8''%C3%85ngstr%C3%B6m%20unit.txt",
            ),
            ('one,two.txt', 'attachment; filename="one,two.txt"'),
            (
                '½,²⁄₂.txt',
                'attachment; filename=1_2_2_2.txt; '
                "filename*=UTF-8''%C2%BD%2C%C2%B2%E2%81%84%E2%82%82.txt",
            ),
            ('[foo] @ bar.txt', 'attachment; filename="[foo] @ bar.txt"'),
            (
                '[fòó]@bàr,bäz.txt',
                'attachment; filename=_fo_o___ba_r_ba_z.txt; '
                "filename*=UTF-8''%5Bf%C3%B2%C3%B3%5D%40b%C3%A0r%2Cb%C3%A4z.txt",
            ),
        ],
    )
    def test_content_disposition_attachment_header(self, client, filename, expected):
        resource = DownloadableResource(filename)
>       client.app.add_route('/', resource)

tests/test_headers.py:622: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481c11000>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dac9a20>, 'CHECK...9a20>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dac9a20>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method DownloadableResource.on_get of <test_headers.DownloadableResource object at 0x7f2480b13970>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ TestHeaders.test_append_link_with_title[asgi] _________________

self = <test_headers.TestHeaders object at 0x7f23427da7a0>
client = <falcon.testing.client.TestClient object at 0x7f232db44580>

    def test_append_link_with_title(self, client):
        expected_value = '</related/thing>; rel=item; title="A related thing"'
    
        resource = LinkHeaderResource()
        resource.append_link('/related/thing', 'item', title='A related thing')
    
>       self._check_link_header(client, resource, expected_value)

tests/test_headers.py:888: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1060: in _check_link_header
    self._check_header(client, resource, 'Link', expected_value)
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481c10120>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dacab00>, 'CHECK...ab00>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dacab00>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method LinkHeaderResource.on_get of <test_headers.LinkHeaderResource object at 0x7f232db46440>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______________ TestHeaders.test_append_link_with_type_hint[asgi] _______________

self = <test_headers.TestHeaders object at 0x7f23427db130>
client = <falcon.testing.client.TestClient object at 0x7f232db32cb0>

    def test_append_link_with_type_hint(self, client):
        expected_value = (
            '</related/thing>; rel=alternate; type="video/mp4; codecs=avc1.640028"'
        )
    
        resource = LinkHeaderResource()
        resource.append_link(
            '/related/thing', 'alternate', type_hint='video/mp4; codecs=avc1.640028'
        )
    
>       self._check_link_header(client, resource, expected_value)

tests/test_headers.py:943: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1060: in _check_link_header
    self._check_header(client, resource, 'Link', expected_value)
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481c12260>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db5d1b0>, 'CHECK...d1b0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db5d1b0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method LinkHeaderResource.on_get of <test_headers.LinkHeaderResource object at 0x7f232db30df0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________ TestHeaders.test_no_content_type[asgi-304 Not Modified] ____________

self = <test_headers.TestHeaders object at 0x7f23427da110>
client = <falcon.testing.client.TestClient object at 0x7f237dbdb130>
status = '304 Not Modified'

    @pytest.mark.parametrize('status', (falcon.HTTP_204, falcon.HTTP_304))
    def test_no_content_type(self, client, status):
>       client.app.add_route('/', testing.SimpleTestResource(status=status))

tests/test_headers.py:842: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481c10820>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da2d1b0>, 'CHECK...d1b0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da2d1b0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f237dbdb400>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ TestHeaders.test_unicode_headers_contain_non_ascii[asgi-POST] _________

self = <test_headers.TestHeaders object at 0x7f23427d8580>, method = 'POST'
client = <falcon.testing.client.TestClient object at 0x7f237d845f30>

    @pytest.mark.parametrize('method', ['CONNECT', 'PATCH', 'POST', 'PUT'])
    def test_unicode_headers_contain_non_ascii(self, method, client):
        app = client.app
>       app.add_route('/', UnicodeHeaderResource())

tests/test_headers.py:709: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481c11700>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da2dd80>, 'CHECK...d50>>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da2dd80>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method UnicodeHeaderResource.on_connect of <test_headers.UnicodeHeaderResource object at 0x7f237d845d50>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________________ TestHeaders.test_expires_header[asgi] _____________________

self = <test_headers.TestHeaders object at 0x7f2342790b80>
client = <falcon.testing.client.TestClient object at 0x7f232db87910>

    def test_expires_header(self, client):
        expires = datetime(2013, 1, 1, 10, 30, 30)
>       client.app.add_route('/', ExpiresHeaderResource(expires))

tests/test_headers.py:363: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481c13c30>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dac8940>, 'CHECK...8940>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dac8940>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ExpiresHeaderResource.on_get of <test_headers.ExpiresHeaderResource object at 0x7f2481e000a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________________ TestHeaders.test_content_type_no_body[asgi] __________________

self = <test_headers.TestHeaders object at 0x7f23427d8a00>
client = <falcon.testing.client.TestClient object at 0x7f232db31960>

    def test_content_type_no_body(self, client):
>       client.app.add_route('/', testing.SimpleTestResource())

tests/test_headers.py:832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f24821bd540>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dacb400>, 'CHECK...b400>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dacb400>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f232db331f0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_content_disposition_inline_header[asgi-Bold Digit \U0001d7cf.txt-inline; filename=Bold_Digit_1.txt; filename*=UTF-8''Bold%20Digit%20%F0%9D%9F%8F.txt] _

self = <test_headers.TestHeaders object at 0x7f2342793b20>
client = <falcon.testing.client.TestClient object at 0x7f24821f8d00>
filename = 'Bold Digit 𝟏.txt'
expected = "inline; filename=Bold_Digit_1.txt; filename*=UTF-8''Bold%20Digit%20%F0%9D%9F%8F.txt"

    @pytest.mark.parametrize(
        'filename,expected',
        [
            ('report.csv', 'inline; filename="report.csv"'),
            ('Hello World.txt', 'inline; filename="Hello World.txt"'),
            (
                'Bold Digit 𝟏.txt',
                'inline; filename=Bold_Digit_1.txt; '
                "filename*=UTF-8''Bold%20Digit%20%F0%9D%9F%8F.txt",
            ),
        ],
    )
    def test_content_disposition_inline_header(self, client, filename, expected):
        resource = ViewableResource(filename)
>       client.app.add_route('/', resource)

tests/test_headers.py:642: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481c63530>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dac8550>, 'CHECK...8550>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dac8550>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ViewableResource.on_get of <test_headers.ViewableResource object at 0x7f24821faec0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_content_disposition_attachment_header[asgi-Bold Digit \U0001d7cf.txt-attachment; filename=Bold_Digit_1.txt; filename*=UTF-8''Bold%20Digit%20%F0%9D%9F%8F.txt] _

self = <test_headers.TestHeaders object at 0x7f2342792620>
client = <falcon.testing.client.TestClient object at 0x7f232db47970>
filename = 'Bold Digit 𝟏.txt'
expected = "attachment; filename=Bold_Digit_1.txt; filename*=UTF-8''Bold%20Digit%20%F0%9D%9F%8F.txt"

    @pytest.mark.parametrize(
        'filename,expected',
        [
            ('report.csv', 'attachment; filename="report.csv"'),
            ('Hello World.txt', 'attachment; filename="Hello World.txt"'),
            (
                'Bold Digit 𝟏.txt',
                'attachment; filename=Bold_Digit_1.txt; '
                "filename*=UTF-8''Bold%20Digit%20%F0%9D%9F%8F.txt",
            ),
            (
                'Ångström unit.txt',
                'attachment; filename=A_ngstro_m_unit.txt; '
                "filename*=UTF-8''%C3%85ngstr%C3%B6m%20unit.txt",
            ),
            ('one,two.txt', 'attachment; filename="one,two.txt"'),
            (
                '½,²⁄₂.txt',
                'attachment; filename=1_2_2_2.txt; '
                "filename*=UTF-8''%C2%BD%2C%C2%B2%E2%81%84%E2%82%82.txt",
            ),
            ('[foo] @ bar.txt', 'attachment; filename="[foo] @ bar.txt"'),
            (
                '[fòó]@bàr,bäz.txt',
                'attachment; filename=_fo_o___ba_r_ba_z.txt; '
                "filename*=UTF-8''%5Bf%C3%B2%C3%B3%5D%40b%C3%A0r%2Cb%C3%A4z.txt",
            ),
        ],
    )
    def test_content_disposition_attachment_header(self, client, filename, expected):
        resource = DownloadableResource(filename)
>       client.app.add_route('/', resource)

tests/test_headers.py:622: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481c62570>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db5ecb0>, 'CHECK...ecb0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db5ecb0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method DownloadableResource.on_get of <test_headers.DownloadableResource object at 0x7f232db46170>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_override_default_media_type[text/plain-Hello ISO-8859-1!-True] _

self = <test_headers.TestHeaders object at 0x7f2342792980>, asgi = True
client = <falcon.testing.client.TestClient object at 0x7f237d6daf50>
content_type = 'text/plain', body = 'Hello ISO-8859-1!'

    @pytest.mark.parametrize('asgi', [True, False])
    @pytest.mark.parametrize(
        'content_type,body',
        [
            ('text/plain; charset=UTF-8', 'Hello Unicode! \U0001F638'),
            # NOTE(kgriffs): This only works because the client defaults to
            # ISO-8859-1 IFF the media type is 'text'.
            ('text/plain', 'Hello ISO-8859-1!'),
        ],
    )
    def test_override_default_media_type(self, asgi, client, content_type, body):
        client.app = create_app(asgi=asgi, media_type=content_type)
>       client.app.add_route('/', testing.SimpleTestResource(body=body))

tests/test_headers.py:509: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481c4a3b0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db5c670>, 'CHECK...c670>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db5c670>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f237d6dbaf0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________ TestHeaders.test_set_headers_with_custom_class[asgi] _____________

self = <test_headers.TestHeaders object at 0x7f2342818700>
client = <falcon.testing.client.TestClient object at 0x7f232da38820>

    def test_set_headers_with_custom_class(self, client):
>       client.app.add_route('/', CustomHeadersResource())

tests/test_headers.py:1023: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2480bcece0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da2de10>, 'CHECK...de10>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da2de10>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CustomHeadersResource.on_get of <test_headers.CustomHeadersResource object at 0x7f232da3b2e0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ TestHeaders.test_append_link_complex[asgi] __________________

self = <test_headers.TestHeaders object at 0x7f23427db3a0>
client = <falcon.testing.client.TestClient object at 0x7f232d9110f0>

    def test_append_link_complex(self, client):
        expected_value = (
            '</related/thing>; rel=alternate; '
            'title="A related thing"; '
            "title*=UTF-8'en'A%20%C3%A7runchy%20thing; "
            'type="application/json"; '
            'hreflang=en-GB; hreflang=de'
        )
    
        resource = LinkHeaderResource()
        resource.append_link(
            '/related/thing',
            'alternate',
            title='A related thing',
            hreflang=('en-GB', 'de'),
            type_hint='application/json',
            title_star=('en', 'A \u00e7runchy thing'),
        )
    
>       self._check_link_header(client, resource, expected_value)

tests/test_headers.py:964: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1060: in _check_link_header
    self._check_header(client, resource, 'Link', expected_value)
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2480bce730>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232daca9e0>, 'CHECK...a9e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232daca9e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method LinkHeaderResource.on_get of <test_headers.LinkHeaderResource object at 0x7f232d9134f0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ TestHeaders.test_custom_content_type[asgi] __________________

self = <test_headers.TestHeaders object at 0x7f23427da0e0>
client = <falcon.testing.client.TestClient object at 0x7f232e407eb0>

    def test_custom_content_type(self, client):
        content_type = 'application/xml; charset=utf-8'
        resource = XmlResource(content_type)
>       self._check_header(client, resource, 'Content-Type', content_type)

tests/test_headers.py:850: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2480bccd60>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232daca170>, 'CHECK...a170>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232daca170>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method XmlResource.on_get of <test_headers.XmlResource object at 0x7f232e404e80>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________________ TestHeaders.test_get_header_as_int[asgi] ___________________

self = <test_headers.TestHeaders object at 0x7f2342790df0>
client = <falcon.testing.client.TestClient object at 0x7f232d989a50>

    def test_get_header_as_int(self, client):
        resource = testing.SimpleTestResource(body=SAMPLE_BODY)
>       client.app.add_route('/', resource)

tests/test_headers.py:370: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2480bcd150>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dacb9a0>, 'CHECK...b9a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dacb9a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f232d988a30>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___ TestHeaders.test_declared_content_length_overriden_by_body_length[asgi] ____

self = <test_headers.TestHeaders object at 0x7f23427907c0>
client = <falcon.testing.client.TestClient object at 0x7f248219f640>

    def test_declared_content_length_overriden_by_body_length(self, client):
        resource = ContentLengthHeaderResource(42, body=SAMPLE_BODY)
>       client.app.add_route('/', resource)

tests/test_headers.py:347: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2480bce8f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db5f1c0>, 'CHECK...f1c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db5f1c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ContentLengthHeaderResource.on_get of <test_headers.ContentLengthHeaderResource object at 0x7f248219ce20>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________ TestHeaders.test_no_content_length[asgi-304 Not Modified] ___________

self = <test_headers.TestHeaders object at 0x7f2342791d80>
client = <falcon.testing.client.TestClient object at 0x7f232da423b0>
status = '304 Not Modified'

    @pytest.mark.parametrize('status', (falcon.HTTP_204, falcon.HTTP_304))
    def test_no_content_length(self, client, status):
>       client.app.add_route('/xxx', testing.SimpleTestResource(status=status))

tests/test_headers.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481c63530>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db5ef80>, 'CHECK...ef80>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db5ef80>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f232da413c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ TestHeaders.test_append_link_with_hreflang_multi[asgi] ____________

self = <test_headers.TestHeaders object at 0x7f23427daec0>
client = <falcon.testing.client.TestClient object at 0x7f232da8b9a0>

    def test_append_link_with_hreflang_multi(self, client):
        expected_value = '</related/thing>; rel=about; hreflang=en-GB; hreflang=de'
    
        resource = LinkHeaderResource()
        resource.append_link('/related/thing', 'about', hreflang=('en-GB', 'de'))
    
>       self._check_link_header(client, resource, expected_value)

tests/test_headers.py:931: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1060: in _check_link_header
    self._check_header(client, resource, 'Link', expected_value)
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f24821bd070>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db5d000>, 'CHECK...d000>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db5d000>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method LinkHeaderResource.on_get of <test_headers.LinkHeaderResource object at 0x7f232da89f30>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ TestHeaders.test_request_latin1_headers[asgi] _________________

self = <test_headers.TestHeaders object at 0x7f23427938b0>
client = <falcon.testing.client.TestClient object at 0x7f232d918a00>

    def test_request_latin1_headers(self, client):
>       client.app.add_route('/headers', HeadersDebugResource())

tests/test_headers.py:649: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481c106d0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dac97e0>, 'CHECK...97e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dac97e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method HeadersDebugResource.on_get of <test_headers.HeadersDebugResource object at 0x7f232d91b280>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____ TestHeaders.test_override_default_media_type_missing_encoding[True] ______

self = <test_headers.TestHeaders object at 0x7f2342792bf0>, asgi = True
client = <falcon.testing.client.TestClient object at 0x7f232da4a4d0>

    @pytest.mark.parametrize('asgi', [True, False])
    def test_override_default_media_type_missing_encoding(self, asgi, client):
        body = '{"msg": "Hello Unicode! \U0001F638"}'
    
        client.app = create_app(asgi=asgi, media_type='application/json')
>       client.app.add_route('/', testing.SimpleTestResource(body=body))

tests/test_headers.py:520: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481c13a70>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232daca440>, 'CHECK...a440>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232daca440>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f232da4a560>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_content_disposition_attachment_header[asgi-report.csv-attachment; filename="report.csv"] _

self = <test_headers.TestHeaders object at 0x7f2342793130>
client = <falcon.testing.client.TestClient object at 0x7f232d918280>
filename = 'report.csv', expected = 'attachment; filename="report.csv"'

    @pytest.mark.parametrize(
        'filename,expected',
        [
            ('report.csv', 'attachment; filename="report.csv"'),
            ('Hello World.txt', 'attachment; filename="Hello World.txt"'),
            (
                'Bold Digit 𝟏.txt',
                'attachment; filename=Bold_Digit_1.txt; '
                "filename*=UTF-8''Bold%20Digit%20%F0%9D%9F%8F.txt",
            ),
            (
                'Ångström unit.txt',
                'attachment; filename=A_ngstro_m_unit.txt; '
                "filename*=UTF-8''%C3%85ngstr%C3%B6m%20unit.txt",
            ),
            ('one,two.txt', 'attachment; filename="one,two.txt"'),
            (
                '½,²⁄₂.txt',
                'attachment; filename=1_2_2_2.txt; '
                "filename*=UTF-8''%C2%BD%2C%C2%B2%E2%81%84%E2%82%82.txt",
            ),
            ('[foo] @ bar.txt', 'attachment; filename="[foo] @ bar.txt"'),
            (
                '[fòó]@bàr,bäz.txt',
                'attachment; filename=_fo_o___ba_r_ba_z.txt; '
                "filename*=UTF-8''%5Bf%C3%B2%C3%B3%5D%40b%C3%A0r%2Cb%C3%A4z.txt",
            ),
        ],
    )
    def test_content_disposition_attachment_header(self, client, filename, expected):
        resource = DownloadableResource(filename)
>       client.app.add_route('/', resource)

tests/test_headers.py:622: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2480bcfa70>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dac9a20>, 'CHECK...9a20>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232dac9a20>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method DownloadableResource.on_get of <test_headers.DownloadableResource object at 0x7f232d918640>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_content_disposition_attachment_header[asgi-[f\xf2\xf3]@b\xe0r,b\xe4z.txt-attachment; filename=_fo_o___ba_r_ba_z.txt; filename*=UTF-8''%5Bf%C3%B2%C3%B3%5D%40b%C3%A0r%2Cb%C3%A4z.txt] _

self = <test_headers.TestHeaders object at 0x7f2342793310>
client = <falcon.testing.client.TestClient object at 0x7f232e407d30>
filename = '[fòó]@bàr,bäz.txt'
expected = "attachment; filename=_fo_o___ba_r_ba_z.txt; filename*=UTF-8''%5Bf%C3%B2%C3%B3%5D%40b%C3%A0r%2Cb%C3%A4z.txt"

    @pytest.mark.parametrize(
        'filename,expected',
        [
            ('report.csv', 'attachment; filename="report.csv"'),
            ('Hello World.txt', 'attachment; filename="Hello World.txt"'),
            (
                'Bold Digit 𝟏.txt',
                'attachment; filename=Bold_Digit_1.txt; '
                "filename*=UTF-8''Bold%20Digit%20%F0%9D%9F%8F.txt",
            ),
            (
                'Ångström unit.txt',
                'attachment; filename=A_ngstro_m_unit.txt; '
                "filename*=UTF-8''%C3%85ngstr%C3%B6m%20unit.txt",
            ),
            ('one,two.txt', 'attachment; filename="one,two.txt"'),
            (
                '½,²⁄₂.txt',
                'attachment; filename=1_2_2_2.txt; '
                "filename*=UTF-8''%C2%BD%2C%C2%B2%E2%81%84%E2%82%82.txt",
            ),
            ('[foo] @ bar.txt', 'attachment; filename="[foo] @ bar.txt"'),
            (
                '[fòó]@bàr,bäz.txt',
                'attachment; filename=_fo_o___ba_r_ba_z.txt; '
                "filename*=UTF-8''%5Bf%C3%B2%C3%B3%5D%40b%C3%A0r%2Cb%C3%A4z.txt",
            ),
        ],
    )
    def test_content_disposition_attachment_header(self, client, filename, expected):
        resource = DownloadableResource(filename)
>       client.app.add_route('/', resource)

tests/test_headers.py:622: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2480bcce40>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db5f0a0>, 'CHECK...f0a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db5f0a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method DownloadableResource.on_get of <test_headers.DownloadableResource object at 0x7f232e405cf0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______________________ TestHeaders.test_vary_star[asgi] _______________________

self = <test_headers.TestHeaders object at 0x7f23427d9090>
client = <falcon.testing.client.TestClient object at 0x7f237d87da20>

    def test_vary_star(self, client):
>       client.app.add_route('/', VaryHeaderResource(['*']))

tests/test_headers.py:816: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2480bcdfc0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db5c040>, 'CHECK...c040>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db5c040>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method VaryHeaderResource.on_get of <test_headers.VaryHeaderResource object at 0x7f237d87cdc0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ TestHeaders.test_default_media_type[asgi] ___________________

self = <test_headers.TestHeaders object at 0x7f2342792170>
client = <falcon.testing.client.TestClient object at 0x7f2481c9bd30>

    def test_default_media_type(self, client):
        resource = testing.SimpleTestResource(body='Hello world!')
>       self._check_header(client, resource, 'Content-Type', falcon.DEFAULT_MEDIA_TYPE)

tests/test_headers.py:495: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481c48f20>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db5c280>, 'CHECK...c280>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db5c280>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f2481c9a9b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ TestHeaders.test_unset_header[asgi-False] ___________________

self = <test_headers.TestHeaders object at 0x7f2342791750>
client = <falcon.testing.client.TestClient object at 0x7f232da8f250>
with_double_quotes = False

    @pytest.mark.parametrize('with_double_quotes', [True, False])
    def test_unset_header(self, client, with_double_quotes):
>       client.app.add_route('/', RemoveHeaderResource(with_double_quotes))

tests/test_headers.py:414: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481c61770>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db5cf70>, 'CHECK...cf70>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db5cf70>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method RemoveHeaderResource.on_get of <test_headers.RemoveHeaderResource object at 0x7f232da8dc00>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______________ test_non_string_status[asgi-HTTPStatus.OK-2001] ________________

custom_status_client = <function custom_status_client.<locals>.client at 0x7f232db597e0>
status = <HTTPStatus.OK: 200>, expected_code = 200

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2480bcf370>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232d91c0d0>, 'CHECK...c0d0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232d91c0d0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7f237d6bc100>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ test_non_string_status[asgi-HTTPStatus.USE_PROXY-305] _____________

custom_status_client = <function custom_status_client.<locals>.client at 0x7f232db596c0>
status = <HTTPStatus.USE_PROXY: 305>, expected_code = 305

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2480b040b0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db583a0>, 'CHECK...83a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db583a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7f237dbf5c60>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ test_non_string_status[asgi-HTTPStatus.FORBIDDEN-403] _____________

custom_status_client = <function custom_status_client.<locals>.client at 0x7f232db59ab0>
status = <HTTPStatus.FORBIDDEN: 403>, expected_code = 403

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2480b073e0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db5ab90>, 'CHECK...ab90>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db5ab90>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7f232d9731f0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ test_non_string_status[asgi-HTTPStatus.INTERNAL_SERVER_ERROR-500] _______

custom_status_client = <function custom_status_client.<locals>.client at 0x7f232db5b640>
status = <HTTPStatus.INTERNAL_SERVER_ERROR: 500>, expected_code = 500

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2480b07f40>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db58a60>, 'CHECK...8a60>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db58a60>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7f232dae7190>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________________ test_non_string_status[asgi-702-702] _____________________

custom_status_client = <function custom_status_client.<locals>.client at 0x7f232db5ac20>
status = 702, expected_code = 702

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2480b07a00>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232d91eb90>, 'CHECK...eb90>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232d91eb90>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7f232da4a8c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________________ test_non_string_status[asgi-200-200] _____________________

custom_status_client = <function custom_status_client.<locals>.client at 0x7f232db5b880>
status = 200, expected_code = 200

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237dc383c0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232d91eef0>, 'CHECK...eef0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232d91eef0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7f232da62110>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______________ test_non_string_status[asgi-HTTPStatus.OK-2000] ________________

custom_status_client = <function custom_status_client.<locals>.client at 0x7f232d91d1b0>
status = <HTTPStatus.OK: 200>, expected_code = 200

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237dc380b0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232d91fb50>, 'CHECK...fb50>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232d91fb50>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7f232da526b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________________ test_non_string_status[asgi-307-307] _____________________

custom_status_client = <function custom_status_client.<locals>.client at 0x7f232d91d5a0>
status = 307, expected_code = 307

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237dc3ab20>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232d91c550>, 'CHECK...c550>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232d91c550>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7f2482012350>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________________ test_non_string_status[asgi-500-500] _____________________

custom_status_client = <function custom_status_client.<locals>.client at 0x7f232d91c5e0>
status = 500, expected_code = 500

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237dc3b680>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232d91c700>, 'CHECK...c700>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232d91c700>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7f2480b67670>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________ test_non_string_status[asgi-HTTPStatus.NOT_IMPLEMENTED-501] __________

custom_status_client = <function custom_status_client.<locals>.client at 0x7f232d91f010>
status = <HTTPStatus.NOT_IMPLEMENTED: 501>, expected_code = 501

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237dc3b8b0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db5c430>, 'CHECK...c430>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db5c430>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7f24821f8ac0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________________ test_non_string_status[asgi-200 OK-200] ____________________

custom_status_client = <function custom_status_client.<locals>.client at 0x7f232db5e710>
status = b'200 OK', expected_code = 200

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237dc3b300>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db5cd30>, 'CHECK...cd30>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db5cd30>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7f232db49330>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________ test_non_string_status[asgi-HTTPStatus.ACCEPTED-202] _____________

custom_status_client = <function custom_status_client.<locals>.client at 0x7f232db913f0>
status = <HTTPStatus.ACCEPTED: 202>, expected_code = 202

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237dc28660>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db58dc0>, 'CHECK...8dc0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db58dc0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7f232da3ac80>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ test_non_string_status[asgi-HTTPStatus.NOT_FOUND-404] _____________

custom_status_client = <function custom_status_client.<locals>.client at 0x7f232db5ab90>
status = <HTTPStatus.NOT_FOUND: 404>, expected_code = 404

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237dc2a500>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db59750>, 'CHECK...9750>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db59750>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7f232daada20>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ test_non_string_status[asgi-702 Emacs-702] __________________

custom_status_client = <function custom_status_client.<locals>.client at 0x7f232db5a050>
status = b'702 Emacs', expected_code = 702

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237dc2b060>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db59480>, 'CHECK...9480>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db59480>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7f2481cf2110>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______ TestFalconTestingUtils.test_default_headers_with_override[asgi] ________

self = <test_utils.TestFalconTestingUtils object at 0x7f2341d5a6e0>
app = <falcon.asgi.app.App object at 0x7f2480b02c80>

    def test_default_headers_with_override(self, app):
        resource = testing.SimpleTestResource()
>       app.add_route('/', resource)

tests/test_utils.py:756: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d7dc510>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db5e050>, 'CHECK...e050>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db5e050>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f24821a4460>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________ TestFalconTestingUtils.test_path_must_start_with_slash[asgi] _________

self = <test_utils.TestFalconTestingUtils object at 0x7f2341d5b970>
app = <falcon.asgi.app.App object at 0x7f232db250c0>

    def test_path_must_start_with_slash(self, app):
>       app.add_route('/', testing.SimpleTestResource())

tests/test_utils.py:847: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d8e33e0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8abc70>, 'CHECK...bc70>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8abc70>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f237d8262c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____ TestFalconTestingUtils.test_simulate_remote_addr[asgi-104.24.101.85] _____

self = <test_utils.TestFalconTestingUtils object at 0x7f2341d98490>
app = <falcon.asgi.app.App object at 0x7f232db27c40>
remote_addr = '104.24.101.85'

    @pytest.mark.parametrize(
        'remote_addr',
        [
            None,
            '127.0.0.1',
            '8.8.8.8',
            '104.24.101.85',
            '2606:4700:30::6818:6455',
        ],
    )
    def test_simulate_remote_addr(self, app, remote_addr):
        class ShowMyIPResource:
            def on_get(self, req, resp):
                resp.text = req.remote_addr
                resp.content_type = falcon.MEDIA_TEXT
    
>       app.add_route('/', ShowMyIPResource())

tests/test_utils.py:1001: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d7dc5f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237dc22710>, 'CHECK...2710>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237dc22710>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestFalconTestingUtils.test_simulate_remote_addr.<locals>.ShowMyIPResource.on_get of <test_utils.TestFalconTestingUtils.test_simulate_remote_addr.<locals>.ShowMyIPResource object at 0x7f2480b4c250>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ TestFalconTestingUtils.test_override_method_with_extras[asgi] _________

self = <test_utils.TestFalconTestingUtils object at 0x7f2341d99bd0>, asgi = True

    def test_override_method_with_extras(self, asgi):
        app = create_app(asgi)
>       app.add_route('/', testing.SimpleTestResource(body='test'))

tests/test_utils.py:1046: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d7efca0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da71fc0>, 'CHECK...1fc0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da71fc0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f232da3c940>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________________ TestFalconTestingUtils.test_status[asgi] ___________________

self = <test_utils.TestFalconTestingUtils object at 0x7f2341d5a920>
app = <falcon.asgi.app.App object at 0x7f2480b00e80>

    def test_status(self, app):
        resource = testing.SimpleTestResource(status=falcon.HTTP_702)
>       app.add_route('/', resource)

tests/test_utils.py:776: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d7ee030>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da71630>, 'CHECK...1630>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da71630>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f2481c87e20>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______________ TestFalconTestingUtils.test_default_headers[asgi] _______________

self = <test_utils.TestFalconTestingUtils object at 0x7f2341d5a320>
app = <falcon.asgi.app.App object at 0x7f2480b03880>

    def test_default_headers(self, app):
        resource = testing.SimpleTestResource()
>       app.add_route('/', resource)

tests/test_utils.py:740: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d7f2340>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d87b400>, 'CHECK...b400>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d87b400>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f237d81ee60>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestFalconTestingUtils.test_simulate_remote_addr[asgi-2606:4700:30::6818:6455] _

self = <test_utils.TestFalconTestingUtils object at 0x7f2341d995a0>
app = <falcon.asgi.app.App object at 0x7f2480b02a40>
remote_addr = '2606:4700:30::6818:6455'

    @pytest.mark.parametrize(
        'remote_addr',
        [
            None,
            '127.0.0.1',
            '8.8.8.8',
            '104.24.101.85',
            '2606:4700:30::6818:6455',
        ],
    )
    def test_simulate_remote_addr(self, app, remote_addr):
        class ShowMyIPResource:
            def on_get(self, req, resp):
                resp.text = req.remote_addr
                resp.content_type = falcon.MEDIA_TEXT
    
>       app.add_route('/', ShowMyIPResource())

tests/test_utils.py:1001: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d7f2880>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d87b250>, 'CHECK...b250>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d87b250>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestFalconTestingUtils.test_simulate_remote_addr.<locals>.ShowMyIPResource.on_get of <test_utils.TestFalconTestingUtils.test_simulate_remote_addr.<locals>.ShowMyIPResource object at 0x7f232da384c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ TestFalconTestingUtils.test_query_string[asgi] ________________

self = <test_utils.TestFalconTestingUtils object at 0x7f2341d981c0>
app = <falcon.asgi.app.App object at 0x7f232db250c0>

    def test_query_string(self, app):
        class SomeResource:
            def on_get(self, req, resp):
                doc = {}
    
                doc['oid'] = req.get_param_as_int('oid')
                doc['detailed'] = req.get_param_as_bool('detailed')
                doc['things'] = req.get_param_as_list('things', int)
                doc['query_string'] = req.query_string
    
                resp.text = json.dumps(doc)
    
        app.req_options.auto_parse_qs_csv = True
>       app.add_route('/', SomeResource())

tests/test_utils.py:883: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d9b3220>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232d91d870>, 'CHECK...d870>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232d91d870>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestFalconTestingUtils.test_query_string.<locals>.SomeResource.on_get of <test_utils.TestFalconTestingUtils.test_query_string.<locals>.SomeResource object at 0x7f232db44310>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______ TestFalconTestingUtils.test_simulate_remote_addr[asgi-127.0.0.1] _______

self = <test_utils.TestFalconTestingUtils object at 0x7f2341d99570>
app = <falcon.asgi.app.App object at 0x7f232db27340>, remote_addr = '127.0.0.1'

    @pytest.mark.parametrize(
        'remote_addr',
        [
            None,
            '127.0.0.1',
            '8.8.8.8',
            '104.24.101.85',
            '2606:4700:30::6818:6455',
        ],
    )
    def test_simulate_remote_addr(self, app, remote_addr):
        class ShowMyIPResource:
            def on_get(self, req, resp):
                resp.text = req.remote_addr
                resp.content_type = falcon.MEDIA_TEXT
    
>       app.add_route('/', ShowMyIPResource())

tests/test_utils.py:1001: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d9b2ab0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db5c4c0>, 'CHECK...c4c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db5c4c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestFalconTestingUtils.test_simulate_remote_addr.<locals>.ShowMyIPResource.on_get of <test_utils.TestFalconTestingUtils.test_simulate_remote_addr.<locals>.ShowMyIPResource object at 0x7f232da422c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ TestFalconTestingUtils.test_query_string_in_path[asgi] ____________

self = <test_utils.TestFalconTestingUtils object at 0x7f2341d984c0>
app = <falcon.asgi.app.App object at 0x7f232db27c40>

    def test_query_string_in_path(self, app):
        resource = testing.SimpleTestResource()
>       app.add_route('/thing', resource)

tests/test_utils.py:919: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d9b3d10>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da2c040>, 'CHECK...c040>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da2c040>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f2481cd4280>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________ TestFalconTestingUtils.test_simulate_hostname[asgi] ______________

self = <test_utils.TestFalconTestingUtils object at 0x7f2341d99390>
app = <falcon.asgi.app.App object at 0x7f2480b02ec0>

    def test_simulate_hostname(self, app):
        resource = testing.SimpleTestResource()
>       app.add_route('/', resource)

tests/test_utils.py:1014: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d9b1f50>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db5ef80>, 'CHECK...ef80>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db5ef80>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f237d6da650>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ TestFalconTestingUtils.test_simulate_remote_addr[asgi-8.8.8.8] ________

self = <test_utils.TestFalconTestingUtils object at 0x7f2341d98730>
app = <falcon.asgi.app.App object at 0x7f2480b03dc0>, remote_addr = '8.8.8.8'

    @pytest.mark.parametrize(
        'remote_addr',
        [
            None,
            '127.0.0.1',
            '8.8.8.8',
            '104.24.101.85',
            '2606:4700:30::6818:6455',
        ],
    )
    def test_simulate_remote_addr(self, app, remote_addr):
        class ShowMyIPResource:
            def on_get(self, req, resp):
                resp.text = req.remote_addr
                resp.content_type = falcon.MEDIA_TEXT
    
>       app.add_route('/', ShowMyIPResource())

tests/test_utils.py:1001: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d9b07b0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d87ab90>, 'CHECK...ab90>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d87ab90>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestFalconTestingUtils.test_simulate_remote_addr.<locals>.ShowMyIPResource.on_get of <test_utils.TestFalconTestingUtils.test_simulate_remote_addr.<locals>.ShowMyIPResource object at 0x7f2480b4da20>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________ TestFalconTestingUtils.test_cached_text_in_result[asgi] ____________

self = <test_utils.TestFalconTestingUtils object at 0x7f2341d5bd00>
app = <falcon.asgi.app.App object at 0x7f2480b03b80>

    def test_cached_text_in_result(self, app):
>       app.add_route('/', testing.SimpleTestResource(body='test'))

tests/test_utils.py:853: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d8e3450>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8780d0>, 'CHECK...80d0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8780d0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f232db4bca0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________ TestFalconTestingUtils.test_simulate_remote_addr[asgi-None] __________

self = <test_utils.TestFalconTestingUtils object at 0x7f2341d98af0>
app = <falcon.asgi.app.App object at 0x7f232db27c40>, remote_addr = None

    @pytest.mark.parametrize(
        'remote_addr',
        [
            None,
            '127.0.0.1',
            '8.8.8.8',
            '104.24.101.85',
            '2606:4700:30::6818:6455',
        ],
    )
    def test_simulate_remote_addr(self, app, remote_addr):
        class ShowMyIPResource:
            def on_get(self, req, resp):
                resp.text = req.remote_addr
                resp.content_type = falcon.MEDIA_TEXT
    
>       app.add_route('/', ShowMyIPResource())

tests/test_utils.py:1001: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d8e2ff0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db5feb0>, 'CHECK...feb0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232db5feb0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestFalconTestingUtils.test_simulate_remote_addr.<locals>.ShowMyIPResource.on_get of <test_utils.TestFalconTestingUtils.test_simulate_remote_addr.<locals>.ShowMyIPResource object at 0x7f232d918af0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________ TestFalconTestingUtils.test_query_string_no_question[asgi] __________

self = <test_utils.TestFalconTestingUtils object at 0x7f2341d981f0>
app = <falcon.asgi.app.App object at 0x7f2480b03dc0>

    def test_query_string_no_question(self, app):
>       app.add_route('/', testing.SimpleTestResource())

tests/test_utils.py:912: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d9b1000>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da73880>, 'CHECK...3880>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da73880>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f24820e5ba0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ test_resource_with_uri_fields[asgi-resource0] _________________

client = <falcon.testing.client.TestClient object at 0x7f24821fb6d0>
resource = <test_after_hooks.ClassResourceWithURIFields object at 0x7f234e8cee30>

    @pytest.mark.parametrize(
        'resource', [ClassResourceWithURIFields(), ClassResourceWithURIFieldsChild()]
    )
    def test_resource_with_uri_fields(client, resource):
>       client.app.add_route('/{field1}/{field2}', resource)

tests/test_after_hooks.py:255: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d9b3840>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237dc22050>, 'CHECK...2050>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237dc22050>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ClassResourceWithURIFields.on_get of <test_after_hooks.ClassResourceWithURIFields object at 0x7f234e8cee30>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________________ test_wrapped_resource[asgi-resource0] _____________________

client = <falcon.testing.client.TestClient object at 0x7f232db4ab00>
resource = <test_after_hooks.WrappedClassResource object at 0x7f234e8ce560>

    @pytest.mark.parametrize(
        'resource', [WrappedClassResource(), WrappedClassResourceChild()]
    )
    def test_wrapped_resource(client, resource):
>       client.app.add_route('/wrapped', resource)

tests/test_after_hooks.py:293: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d7f1e70>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d87a170>, 'CHECK...a170>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d87a170>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method WrappedClassResource.on_get of <test_after_hooks.WrappedClassResource object at 0x7f234e8ce560>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ test_resource_with_uri_fields[asgi-resource1] _________________

client = <falcon.testing.client.TestClient object at 0x7f24821a5fc0>
resource = <test_after_hooks.ClassResourceWithURIFieldsChild object at 0x7f234e8ced40>

    @pytest.mark.parametrize(
        'resource', [ClassResourceWithURIFields(), ClassResourceWithURIFieldsChild()]
    )
    def test_resource_with_uri_fields(client, resource):
>       client.app.add_route('/{field1}/{field2}', resource)

tests/test_after_hooks.py:255: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d8eb530>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d87b400>, 'CHECK...b400>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d87b400>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ClassResourceWithURIFieldsChild.on_get of <test_after_hooks.ClassResourceWithURIFieldsChild object at 0x7f234e8ced40>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________________ test_wrapped_resource[asgi-resource1] _____________________

client = <falcon.testing.client.TestClient object at 0x7f237d82e5f0>
resource = <test_after_hooks.WrappedClassResourceChild object at 0x7f234e8cee60>

    @pytest.mark.parametrize(
        'resource', [WrappedClassResource(), WrappedClassResourceChild()]
    )
    def test_wrapped_resource(client, resource):
>       client.app.add_route('/wrapped', resource)

tests/test_after_hooks.py:293: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d8e91c0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237dc20940>, 'CHECK...0940>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237dc20940>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method WrappedClassResource.on_get of <test_after_hooks.WrappedClassResourceChild object at 0x7f234e8cee60>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________ test_wrapped_resource_with_hooks_aware_of_resource[asgi] ___________

client = <falcon.testing.client.TestClient object at 0x7f2480b10490>
wrapped_resource_aware = <test_after_hooks.ClassResourceWithAwareHooks object at 0x7f2480b104f0>

    def test_wrapped_resource_with_hooks_aware_of_resource(client, wrapped_resource_aware):
>       client.app.add_route('/wrapped_aware', wrapped_resource_aware)

tests/test_after_hooks.py:319: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d8eb7d0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8991b0>, 'CHECK...91b0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8991b0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ClassResourceWithAwareHooks.on_get of <test_after_hooks.ClassResourceWithAwareHooks object at 0x7f2480b104f0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ test_client_simulate_aliases[asgi-OPTIONS] __________________

asgi = True, method = 'OPTIONS'

    @pytest.mark.parametrize(
        'method', ['DELETE', 'GET', 'HEAD', 'LOCK', 'OPTIONS', 'PATCH', 'POST', 'PUT']
    )
    def test_client_simulate_aliases(asgi, method):
        def capture_method(req, resp):
            resp.content_type = falcon.MEDIA_TEXT
            resp.text = req.method
    
        app = create_app(asgi)
>       app.add_sink(capture_method)

tests/test_testing.py:188: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.asgi.app.App object at 0x7f2480b02f80>
sink = <function test_client_simulate_aliases.<locals>.capture_method at 0x7f232db5e050>
prefix = '/'

    def add_sink(self, sink: Callable, prefix: SinkPrefix = r'/'):
        if not iscoroutinefunction(sink) and is_python_func(sink):
            if _should_wrap_non_coroutines():
                sink = wrap_sync_to_async(sink)
            else:
>               raise CompatibilityError(
                    'The sink method must be an awaitable coroutine function '
                    'in order to be used safely with an ASGI app.'
                )
E               falcon.errors.CompatibilityError: The sink method must be an awaitable coroutine function in order to be used safely with an ASGI app.

falcon/asgi/app.py:740: CompatibilityError
___________________ test_client_simulate_aliases[asgi-POST] ____________________

asgi = True, method = 'POST'

    @pytest.mark.parametrize(
        'method', ['DELETE', 'GET', 'HEAD', 'LOCK', 'OPTIONS', 'PATCH', 'POST', 'PUT']
    )
    def test_client_simulate_aliases(asgi, method):
        def capture_method(req, resp):
            resp.content_type = falcon.MEDIA_TEXT
            resp.text = req.method
    
        app = create_app(asgi)
>       app.add_sink(capture_method)

tests/test_testing.py:188: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.asgi.app.App object at 0x7f2480b03c40>
sink = <function test_client_simulate_aliases.<locals>.capture_method at 0x7f237dc20940>
prefix = '/'

    def add_sink(self, sink: Callable, prefix: SinkPrefix = r'/'):
        if not iscoroutinefunction(sink) and is_python_func(sink):
            if _should_wrap_non_coroutines():
                sink = wrap_sync_to_async(sink)
            else:
>               raise CompatibilityError(
                    'The sink method must be an awaitable coroutine function '
                    'in order to be used safely with an ASGI app.'
                )
E               falcon.errors.CompatibilityError: The sink method must be an awaitable coroutine function in order to be used safely with an ASGI app.

falcon/asgi/app.py:740: CompatibilityError
___________________ test_client_simulate_aliases[asgi-PATCH] ___________________

asgi = True, method = 'PATCH'

    @pytest.mark.parametrize(
        'method', ['DELETE', 'GET', 'HEAD', 'LOCK', 'OPTIONS', 'PATCH', 'POST', 'PUT']
    )
    def test_client_simulate_aliases(asgi, method):
        def capture_method(req, resp):
            resp.content_type = falcon.MEDIA_TEXT
            resp.text = req.method
    
        app = create_app(asgi)
>       app.add_sink(capture_method)

tests/test_testing.py:188: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.asgi.app.App object at 0x7f2480b00b80>
sink = <function test_client_simulate_aliases.<locals>.capture_method at 0x7f237d8ab520>
prefix = '/'

    def add_sink(self, sink: Callable, prefix: SinkPrefix = r'/'):
        if not iscoroutinefunction(sink) and is_python_func(sink):
            if _should_wrap_non_coroutines():
                sink = wrap_sync_to_async(sink)
            else:
>               raise CompatibilityError(
                    'The sink method must be an awaitable coroutine function '
                    'in order to be used safely with an ASGI app.'
                )
E               falcon.errors.CompatibilityError: The sink method must be an awaitable coroutine function in order to be used safely with an ASGI app.

falcon/asgi/app.py:740: CompatibilityError
___________________ test_client_simulate_aliases[asgi-HEAD] ____________________

asgi = True, method = 'HEAD'

    @pytest.mark.parametrize(
        'method', ['DELETE', 'GET', 'HEAD', 'LOCK', 'OPTIONS', 'PATCH', 'POST', 'PUT']
    )
    def test_client_simulate_aliases(asgi, method):
        def capture_method(req, resp):
            resp.content_type = falcon.MEDIA_TEXT
            resp.text = req.method
    
        app = create_app(asgi)
>       app.add_sink(capture_method)

tests/test_testing.py:188: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.asgi.app.App object at 0x7f2480b03100>
sink = <function test_client_simulate_aliases.<locals>.capture_method at 0x7f237d87a7a0>
prefix = '/'

    def add_sink(self, sink: Callable, prefix: SinkPrefix = r'/'):
        if not iscoroutinefunction(sink) and is_python_func(sink):
            if _should_wrap_non_coroutines():
                sink = wrap_sync_to_async(sink)
            else:
>               raise CompatibilityError(
                    'The sink method must be an awaitable coroutine function '
                    'in order to be used safely with an ASGI app.'
                )
E               falcon.errors.CompatibilityError: The sink method must be an awaitable coroutine function in order to be used safely with an ASGI app.

falcon/asgi/app.py:740: CompatibilityError
___________________ test_client_simulate_aliases[asgi-LOCK] ____________________

asgi = True, method = 'LOCK'

    @pytest.mark.parametrize(
        'method', ['DELETE', 'GET', 'HEAD', 'LOCK', 'OPTIONS', 'PATCH', 'POST', 'PUT']
    )
    def test_client_simulate_aliases(asgi, method):
        def capture_method(req, resp):
            resp.content_type = falcon.MEDIA_TEXT
            resp.text = req.method
    
        app = create_app(asgi)
>       app.add_sink(capture_method)

tests/test_testing.py:188: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.asgi.app.App object at 0x7f2480b03a00>
sink = <function test_client_simulate_aliases.<locals>.capture_method at 0x7f237d89bd90>
prefix = '/'

    def add_sink(self, sink: Callable, prefix: SinkPrefix = r'/'):
        if not iscoroutinefunction(sink) and is_python_func(sink):
            if _should_wrap_non_coroutines():
                sink = wrap_sync_to_async(sink)
            else:
>               raise CompatibilityError(
                    'The sink method must be an awaitable coroutine function '
                    'in order to be used safely with an ASGI app.'
                )
E               falcon.errors.CompatibilityError: The sink method must be an awaitable coroutine function in order to be used safely with an ASGI app.

falcon/asgi/app.py:740: CompatibilityError
__________________ test_client_simulate_aliases[asgi-DELETE] ___________________

asgi = True, method = 'DELETE'

    @pytest.mark.parametrize(
        'method', ['DELETE', 'GET', 'HEAD', 'LOCK', 'OPTIONS', 'PATCH', 'POST', 'PUT']
    )
    def test_client_simulate_aliases(asgi, method):
        def capture_method(req, resp):
            resp.content_type = falcon.MEDIA_TEXT
            resp.text = req.method
    
        app = create_app(asgi)
>       app.add_sink(capture_method)

tests/test_testing.py:188: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.asgi.app.App object at 0x7f2480b03100>
sink = <function test_client_simulate_aliases.<locals>.capture_method at 0x7f237d89beb0>
prefix = '/'

    def add_sink(self, sink: Callable, prefix: SinkPrefix = r'/'):
        if not iscoroutinefunction(sink) and is_python_func(sink):
            if _should_wrap_non_coroutines():
                sink = wrap_sync_to_async(sink)
            else:
>               raise CompatibilityError(
                    'The sink method must be an awaitable coroutine function '
                    'in order to be used safely with an ASGI app.'
                )
E               falcon.errors.CompatibilityError: The sink method must be an awaitable coroutine function in order to be used safely with an ASGI app.

falcon/asgi/app.py:740: CompatibilityError
____________________ test_client_simulate_aliases[asgi-PUT] ____________________

asgi = True, method = 'PUT'

    @pytest.mark.parametrize(
        'method', ['DELETE', 'GET', 'HEAD', 'LOCK', 'OPTIONS', 'PATCH', 'POST', 'PUT']
    )
    def test_client_simulate_aliases(asgi, method):
        def capture_method(req, resp):
            resp.content_type = falcon.MEDIA_TEXT
            resp.text = req.method
    
        app = create_app(asgi)
>       app.add_sink(capture_method)

tests/test_testing.py:188: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.asgi.app.App object at 0x7f237d8b9000>
sink = <function test_client_simulate_aliases.<locals>.capture_method at 0x7f237d874550>
prefix = '/'

    def add_sink(self, sink: Callable, prefix: SinkPrefix = r'/'):
        if not iscoroutinefunction(sink) and is_python_func(sink):
            if _should_wrap_non_coroutines():
                sink = wrap_sync_to_async(sink)
            else:
>               raise CompatibilityError(
                    'The sink method must be an awaitable coroutine function '
                    'in order to be used safely with an ASGI app.'
                )
E               falcon.errors.CompatibilityError: The sink method must be an awaitable coroutine function in order to be used safely with an ASGI app.

falcon/asgi/app.py:740: CompatibilityError
____________________ test_client_simulate_aliases[asgi-GET] ____________________

asgi = True, method = 'GET'

    @pytest.mark.parametrize(
        'method', ['DELETE', 'GET', 'HEAD', 'LOCK', 'OPTIONS', 'PATCH', 'POST', 'PUT']
    )
    def test_client_simulate_aliases(asgi, method):
        def capture_method(req, resp):
            resp.content_type = falcon.MEDIA_TEXT
            resp.text = req.method
    
        app = create_app(asgi)
>       app.add_sink(capture_method)

tests/test_testing.py:188: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.asgi.app.App object at 0x7f237d8b9cc0>
sink = <function test_client_simulate_aliases.<locals>.capture_method at 0x7f237d876d40>
prefix = '/'

    def add_sink(self, sink: Callable, prefix: SinkPrefix = r'/'):
        if not iscoroutinefunction(sink) and is_python_func(sink):
            if _should_wrap_non_coroutines():
                sink = wrap_sync_to_async(sink)
            else:
>               raise CompatibilityError(
                    'The sink method must be an awaitable coroutine function '
                    'in order to be used safely with an ASGI app.'
                )
E               falcon.errors.CompatibilityError: The sink method must be an awaitable coroutine function in order to be used safely with an ASGI app.

falcon/asgi/app.py:740: CompatibilityError
_____________________ test_json_err_no_handler[asgi-False] _____________________

asgi = True, monkeypatch_resolver = False

    @pytest.mark.parametrize('monkeypatch_resolver', [True, False])
    def test_json_err_no_handler(asgi, monkeypatch_resolver):
        app = create_app(asgi)
    
        handlers = media.Handlers({falcon.MEDIA_URLENCODED: media.URLEncodedFormHandler()})
    
        # NOTE(kgriffs): Test the pre-3.0 method. Although undocumented, it was
        #   technically a public method, and so we make sure it still works here.
        if monkeypatch_resolver:
    
            def _resolve(media_type, default, raise_not_found=True):
                with pytest.warns(DeprecatedWarning, match='This undocumented method'):
                    h = handlers.find_by_media_type(
                        media_type, default, raise_not_found=raise_not_found
                    )
                return h, None, None
    
            handlers._resolve = _resolve
    
        app.req_options.media_handlers = handlers
        app.resp_options.media_handlers = handlers
    
        class Resource:
            def on_get(self, req, resp):
                raise falcon.HTTPForbidden()
    
>       app.add_route('/', Resource())

tests/test_media_handlers.py:349: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d981230>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d87b910>, 'CHECK...b910>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d87b910>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method test_json_err_no_handler.<locals>.Resource.on_get of <test_media_handlers.test_json_err_no_handler.<locals>.Resource object at 0x7f2480b107f0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________________ test_json_err_no_handler[asgi-True] ______________________

asgi = True, monkeypatch_resolver = True

    @pytest.mark.parametrize('monkeypatch_resolver', [True, False])
    def test_json_err_no_handler(asgi, monkeypatch_resolver):
        app = create_app(asgi)
    
        handlers = media.Handlers({falcon.MEDIA_URLENCODED: media.URLEncodedFormHandler()})
    
        # NOTE(kgriffs): Test the pre-3.0 method. Although undocumented, it was
        #   technically a public method, and so we make sure it still works here.
        if monkeypatch_resolver:
    
            def _resolve(media_type, default, raise_not_found=True):
                with pytest.warns(DeprecatedWarning, match='This undocumented method'):
                    h = handlers.find_by_media_type(
                        media_type, default, raise_not_found=raise_not_found
                    )
                return h, None, None
    
            handlers._resolve = _resolve
    
        app.req_options.media_handlers = handlers
        app.resp_options.media_handlers = handlers
    
        class Resource:
            def on_get(self, req, resp):
                raise falcon.HTTPForbidden()
    
>       app.add_route('/', Resource())

tests/test_media_handlers.py:349: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d983290>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da73880>, 'CHECK...3880>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f232da73880>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method test_json_err_no_handler.<locals>.Resource.on_get of <test_media_handlers.test_json_err_no_handler.<locals>.Resource object at 0x7f237d98ef80>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______________ test_float_converter_non_finite_allowed[asgi--inf] ______________

value = '-inf'
client = <falcon.testing.client.TestClient object at 0x7f232eb8f8e0>

    @pytest.mark.parametrize('value', ['nan', '-inf', 'inf'])
    def test_float_converter_non_finite_allowed(value, client):
        resource1 = IDResource()
>       client.app.add_route('/{id:float(finite=False)}', resource1)

tests/test_uri_templates.py:243: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d9cb290>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f2481d1dbd0>, 'CHECK...dbd0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f2481d1dbd0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7f232eb8efb0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________________ test_same_level_complex_var[asgi-False] ____________________

client = <falcon.testing.client.TestClient object at 0x7f237da3dd80>
reverse = False

    @pytest.mark.parametrize('reverse', [True, False])
    def test_same_level_complex_var(client, reverse):
        file_resource = FileResource()
        details_resource = FileDetailsResource()
    
        routes = [
            ('/files/{file_id}', file_resource),
            ('/files/{file_id}.{ext}', details_resource),
        ]
        if reverse:
            routes.reverse()
    
        for uri_template, resource in routes:
>           client.app.add_route(uri_template, resource)

tests/test_uri_templates.py:511: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d981000>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8776d0>, 'CHECK...76d0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8776d0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FileResource.on_get of <test_uri_templates.FileResource object at 0x7f237da3f6a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______________ test_float_converter_non_finite_allowed[asgi-nan] _______________

value = 'nan'
client = <falcon.testing.client.TestClient object at 0x7f237da96050>

    @pytest.mark.parametrize('value', ['nan', '-inf', 'inf'])
    def test_float_converter_non_finite_allowed(value, client):
        resource1 = IDResource()
>       client.app.add_route('/{id:float(finite=False)}', resource1)

tests/test_uri_templates.py:243: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d9cd070>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f24820d76d0>, 'CHECK...76d0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f24820d76d0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7f237da94d90>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ test_float_converter[asgi-/{id:float}-2.1] __________________

client = <falcon.testing.client.TestClient object at 0x7f2480a5a230>
uri_template = '/{id:float}', id_value = 2.1

    @pytest.mark.parametrize('id_value', [2, 2.1, 1.9])
    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:float}',
            '/{id:float(1)}',
            '/{id:float(min=1.9)}',
            '/{id:float(min=1.8, max=3)}',
        ],
    )
    def test_float_converter(client, uri_template, id_value):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:230: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d9cdee0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d738790>, 'CHECK...8790>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d738790>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7f2480a583d0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ test_uuid_converter[asgi-uuid_converter_4] __________________

client = <falcon.testing.client.TestClient object at 0x7f237da1a6b0>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7f237da18d60>
uri_template = '/versions/diff/{left:uuid}...{right:uuid()}'
path = '/versions/diff/65c71eee-b819-4c9c-a432-90fc312d4da3...2e17cd8e-4b9f-4603-8491-4eb63bf82ea4'
expected = {'left': UUID('65c71eee-b819-4c9c-a432-90fc312d4da3'), 'right': UUID('2e17cd8e-4b9f-4603-8491-4eb63bf82ea4')}

    @pytest.mark.parametrize(
        'uri_template, path, expected',
        as_params(
            (
                '/widgets/{widget_id:uuid}',
                '/widgets/' + _TEST_UUID_STR,
                {'widget_id': _TEST_UUID},
            ),
            (
                '/widgets/{widget_id:uuid}/orders',
                '/widgets/' + _TEST_UUID_STR_SANS_HYPHENS + '/orders',
                {'widget_id': _TEST_UUID},
            ),
            (
                '/versions/diff/{left:uuid()}...{right:uuid()}',
                '/versions/diff/{}...{}'.format(_TEST_UUID_STR, _TEST_UUID_STR_2),
                {
                    'left': _TEST_UUID,
                    'right': _TEST_UUID_2,
                },
            ),
            (
                '/versions/diff/{left:uuid}...{right:uuid()}',
                '/versions/diff/{}...{}'.format(_TEST_UUID_STR, _TEST_UUID_STR_2),
                {
                    'left': _TEST_UUID,
                    'right': _TEST_UUID_2,
                },
            ),
            (
                '/versions/diff/{left:uuid()}...{right:uuid}',
                '/versions/diff/{}...{}'.format(_TEST_UUID_STR, _TEST_UUID_STR_2),
                {
                    'left': _TEST_UUID,
                    'right': _TEST_UUID_2,
                },
            ),
            (
                '/widgets/{widget_id:uuid}/orders',
                '/widgets/' + _TEST_UUID_STR_SANS_HYPHENS[:-1] + '/orders',
                None,
            ),
            prefix='uuid_converter',
        ),
    )
    def test_uuid_converter(client, resource, uri_template, path, expected):
>       client.app.add_route(uri_template, resource)

tests/test_uri_templates.py:361: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d9cc3c0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d877b50>, 'CHECK...7b50>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d877b50>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f237da18d60>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______________________ test_adding_suffix_routes[asgi] ________________________

client = <falcon.testing.client.TestClient object at 0x7f237db8ee60>

    def test_adding_suffix_routes(client):
        resource_with_suffix_routes = ResourceWithSuffixRoutes()
>       client.app.add_route(
            '/collections/{collection_id}/items/{item_id}', resource_with_suffix_routes
        )

tests/test_uri_templates.py:531: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d9ccc80>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d6fdea0>, 'CHECK...dea0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d6fdea0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ResourceWithSuffixRoutes.on_get of <test_uri_templates.ResourceWithSuffixRoutes object at 0x7f237db8ee00>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________________ test_float_converter[asgi-/{id:float(1)}-2] __________________

client = <falcon.testing.client.TestClient object at 0x7f237da3d090>
uri_template = '/{id:float(1)}', id_value = 2

    @pytest.mark.parametrize('id_value', [2, 2.1, 1.9])
    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:float}',
            '/{id:float(1)}',
            '/{id:float(min=1.9)}',
            '/{id:float(min=1.8, max=3)}',
        ],
    )
    def test_float_converter(client, uri_template, id_value):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:230: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d9cd2a0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f2481d1f760>, 'CHECK...f760>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f2481d1f760>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7f237da3ffd0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________________ test_int_converter[asgi-/{id:int(3)}] _____________________

client = <falcon.testing.client.TestClient object at 0x7f2480aec040>
uri_template = '/{id:int(3)}'

    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:int}',
            '/{id:int(3)}',
            '/{id:int(min=123)}',
            '/{id:int(min=123, max=123)}',
        ],
    )
    def test_int_converter(client, uri_template):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:208: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d9cfa70>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8760e0>, 'CHECK...60e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8760e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7f2480aedd20>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________________ test_int_converter[asgi-/{id:int(min=123)}] __________________

client = <falcon.testing.client.TestClient object at 0x7f2481d55d80>
uri_template = '/{id:int(min=123)}'

    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:int}',
            '/{id:int(3)}',
            '/{id:int(min=123)}',
            '/{id:int(min=123, max=123)}',
        ],
    )
    def test_int_converter(client, uri_template):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:208: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d981af0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d6fd3f0>, 'CHECK...d3f0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d6fd3f0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7f232d946020>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ test_uuid_converter[asgi-uuid_converter_3] __________________

client = <falcon.testing.client.TestClient object at 0x7f237da96740>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7f237da950c0>
uri_template = '/versions/diff/{left:uuid()}...{right:uuid()}'
path = '/versions/diff/65c71eee-b819-4c9c-a432-90fc312d4da3...2e17cd8e-4b9f-4603-8491-4eb63bf82ea4'
expected = {'left': UUID('65c71eee-b819-4c9c-a432-90fc312d4da3'), 'right': UUID('2e17cd8e-4b9f-4603-8491-4eb63bf82ea4')}

    @pytest.mark.parametrize(
        'uri_template, path, expected',
        as_params(
            (
                '/widgets/{widget_id:uuid}',
                '/widgets/' + _TEST_UUID_STR,
                {'widget_id': _TEST_UUID},
            ),
            (
                '/widgets/{widget_id:uuid}/orders',
                '/widgets/' + _TEST_UUID_STR_SANS_HYPHENS + '/orders',
                {'widget_id': _TEST_UUID},
            ),
            (
                '/versions/diff/{left:uuid()}...{right:uuid()}',
                '/versions/diff/{}...{}'.format(_TEST_UUID_STR, _TEST_UUID_STR_2),
                {
                    'left': _TEST_UUID,
                    'right': _TEST_UUID_2,
                },
            ),
            (
                '/versions/diff/{left:uuid}...{right:uuid()}',
                '/versions/diff/{}...{}'.format(_TEST_UUID_STR, _TEST_UUID_STR_2),
                {
                    'left': _TEST_UUID,
                    'right': _TEST_UUID_2,
                },
            ),
            (
                '/versions/diff/{left:uuid()}...{right:uuid}',
                '/versions/diff/{}...{}'.format(_TEST_UUID_STR, _TEST_UUID_STR_2),
                {
                    'left': _TEST_UUID,
                    'right': _TEST_UUID_2,
                },
            ),
            (
                '/widgets/{widget_id:uuid}/orders',
                '/widgets/' + _TEST_UUID_STR_SANS_HYPHENS[:-1] + '/orders',
                None,
            ),
            prefix='uuid_converter',
        ),
    )
    def test_uuid_converter(client, resource, uri_template, path, expected):
>       client.app.add_route(uri_template, resource)

tests/test_uri_templates.py:361: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d8ebbc0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d739bd0>, 'CHECK...9bd0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d739bd0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f237da950c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________________________ test_multiple[asgi] ______________________________

client = <falcon.testing.client.TestClient object at 0x7f2480a58e20>

    def test_multiple(client):
        resource = NameResource()
>       client.app.add_route('/messages/{id}/names/{name}', resource)

tests/test_uri_templates.py:459: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d9c9d20>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d877760>, 'CHECK...7760>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d877760>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method NameResource.on_get of <test_uri_templates.NameResource object at 0x7f2480a5ab30>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ test_uuid_converter_complex_segment[asgi] ___________________

client = <falcon.testing.client.TestClient object at 0x7f237da195a0>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7f237da18fd0>

    def test_uuid_converter_complex_segment(client, resource):
>       client.app.add_route('/pages/{first:uuid}...{last:uuid}', resource)

tests/test_uri_templates.py:375: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d9c9ee0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d876680>, 'CHECK...6680>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d876680>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f237da18fd0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______________________________ test_no_vars[asgi] ______________________________

client = <falcon.testing.client.TestClient object at 0x7f2480abeef0>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7f2480abe530>

    def test_no_vars(client, resource):
>       client.app.add_route('/hello/world', resource)

tests/test_uri_templates.py:149: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d9caa40>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f24820d70a0>, 'CHECK...70a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f24820d70a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f2480abe530>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ test_float_converter[asgi-/{id:float(1)}-1.9] _________________

client = <falcon.testing.client.TestClient object at 0x7f2480a496f0>
uri_template = '/{id:float(1)}', id_value = 1.9

    @pytest.mark.parametrize('id_value', [2, 2.1, 1.9])
    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:float}',
            '/{id:float(1)}',
            '/{id:float(min=1.9)}',
            '/{id:float(min=1.8, max=3)}',
        ],
    )
    def test_float_converter(client, uri_template, id_value):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:230: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d9db920>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f24820d7760>, 'CHECK...7760>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f24820d7760>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7f2480a482e0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ test_converter_custom[asgi-/{food:spam}-/something-expected0] _________

client = <falcon.testing.client.TestClient object at 0x7f237dbd87c0>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7f237dbd8160>
uri_template = '/{food:spam}', path = '/something', expected = {'food': 'spam!'}

    @pytest.mark.parametrize(
        'uri_template, path, expected',
        [
            ('/{food:spam}', '/something', {'food': 'spam!'}),
            (
                '/{food:spam(")")}:{food_too:spam("()")}',
                '/bacon:eggs',
                {'food': 'spam!', 'food_too': 'spam!'},
            ),
            (
                '/({food:spam()}){food_too:spam("()")}',
                '/(bacon)eggs',
                {'food': 'spam!', 'food_too': 'spam!'},
            ),
        ],
    )
    def test_converter_custom(client, resource, uri_template, path, expected):
        class SpamConverter:
            def __init__(self, useless_text=None):
                pass
    
            def convert(self, fragment):
                return 'spam!'
    
        client.app.router_options.converters['spam'] = SpamConverter
>       client.app.add_route(uri_template, resource)

tests/test_uri_templates.py:413: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d9dbae0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f24820cc160>, 'CHECK...c160>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f24820cc160>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f237dbd8160>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______________ test_with_and_without_trailing_slash[asgi-True] ________________

client = <falcon.testing.client.TestClient object at 0x7f237da3caf0>
reverse = True

    @pytest.mark.parametrize('reverse', [True, False])
    def test_with_and_without_trailing_slash(client, reverse):
        routes = [
            ('/kitchen', KitchenSinkResource()),
            ('/kitchen/', KitchenSinkResource()),
            ('/kitchen/{item}', KitchenSinkResource()),
            ('/kitchen/{item}/', KitchenSinkResource()),
            ('/kitchen/sink', KitchenSinkResource()),
            ('/kitchen/sink/', KitchenSinkResource()),
        ]
        if reverse:
            routes.reverse()
    
        for route in routes:
>           client.app.add_route(*route)

tests/test_uri_templates.py:576: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d9d85f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f24820b9a20>, 'CHECK...9a20>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f24820b9a20>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method KitchenSinkResource.on_get of <test_uri_templates.KitchenSinkResource object at 0x7f237da3d810>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ test_converter_custom[asgi-/{food:spam(")")}:{food_too:spam("()")}-/bacon:eggs-expected1] _

client = <falcon.testing.client.TestClient object at 0x7f2480a5aef0>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7f2480a5be50>
uri_template = '/{food:spam(")")}:{food_too:spam("()")}', path = '/bacon:eggs'
expected = {'food': 'spam!', 'food_too': 'spam!'}

    @pytest.mark.parametrize(
        'uri_template, path, expected',
        [
            ('/{food:spam}', '/something', {'food': 'spam!'}),
            (
                '/{food:spam(")")}:{food_too:spam("()")}',
                '/bacon:eggs',
                {'food': 'spam!', 'food_too': 'spam!'},
            ),
            (
                '/({food:spam()}){food_too:spam("()")}',
                '/(bacon)eggs',
                {'food': 'spam!', 'food_too': 'spam!'},
            ),
        ],
    )
    def test_converter_custom(client, resource, uri_template, path, expected):
        class SpamConverter:
            def __init__(self, useless_text=None):
                pass
    
            def convert(self, fragment):
                return 'spam!'
    
        client.app.router_options.converters['spam'] = SpamConverter
>       client.app.add_route(uri_template, resource)

tests/test_uri_templates.py:413: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d9daea0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8765f0>, 'CHECK...65f0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8765f0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f2480a5be50>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________________ test_single_path_segment[asgi] ________________________

client = <falcon.testing.client.TestClient object at 0x7f237d9ea890>

    def test_single_path_segment(client):
        id_resource = IDResource()
    
>       client.app.add_route('/thing-{id}', id_resource)

tests/test_uri_templates.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d9db4c0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f24820ce440>, 'CHECK...e440>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f24820ce440>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7f237d9e92a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ test_int_converter_rejections[asgi-/{id:int(min=124)}] ____________

client = <falcon.testing.client.TestClient object at 0x7f2480ae6560>
uri_template = '/{id:int(min=124)}'

    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:int(2)}',
            '/{id:int(min=124)}',
            '/{id:int(num_digits=3, max=100)}',
        ],
    )
    def test_int_converter_rejections(client, uri_template):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:271: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d9cbf40>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d6fe710>, 'CHECK...e710>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d6fe710>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7f2480ae45b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________________________ test_single[asgi-widget_id] __________________________

client = <falcon.testing.client.TestClient object at 0x7f237da3e6b0>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7f237da3e5f0>
field_name = 'widget_id'

    @pytest.mark.parametrize(
        'field_name',
        [
            'id',
            'id123',
            'widget_id',
        ],
    )
    def test_single(client, resource, field_name):
        template = '/widgets/{{{}}}'.format(field_name)
    
>       client.app.add_route(template, resource)

tests/test_uri_templates.py:182: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d9cbe60>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d877be0>, 'CHECK...7be0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d877be0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f237da3e5f0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________ test_float_converter[asgi-/{id:float(min=1.8, max=3)}-1.9] __________

client = <falcon.testing.client.TestClient object at 0x7f2480a59870>
uri_template = '/{id:float(min=1.8, max=3)}', id_value = 1.9

    @pytest.mark.parametrize('id_value', [2, 2.1, 1.9])
    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:float}',
            '/{id:float(1)}',
            '/{id:float(min=1.9)}',
            '/{id:float(min=1.8, max=3)}',
        ],
    )
    def test_float_converter(client, uri_template, id_value):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:230: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d983300>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f24820d7d00>, 'CHECK...7d00>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f24820d7d00>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7f2480a58e50>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________________________ test_special_chars[asgi] ___________________________

client = <falcon.testing.client.TestClient object at 0x7f2480a494e0>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7f2480a48040>

    def test_special_chars(client, resource):
>       client.app.add_route('/hello/world.json', resource)

tests/test_uri_templates.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d9ccb30>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d6ff9a0>, 'CHECK...f9a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d6ff9a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f2480a48040>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________________ test_same_level_complex_var[asgi-True] ____________________

client = <falcon.testing.client.TestClient object at 0x7f237db21a50>
reverse = True

    @pytest.mark.parametrize('reverse', [True, False])
    def test_same_level_complex_var(client, reverse):
        file_resource = FileResource()
        details_resource = FileDetailsResource()
    
        routes = [
            ('/files/{file_id}', file_resource),
            ('/files/{file_id}.{ext}', details_resource),
        ]
        if reverse:
            routes.reverse()
    
        for uri_template, resource in routes:
>           client.app.add_route(uri_template, resource)

tests/test_uri_templates.py:511: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d9ce650>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f2481d85e10>, 'CHECK...5e10>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f2481d85e10>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FileDetailsResource.on_get of <test_uri_templates.FileDetailsResource object at 0x7f237db21330>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ test_uuid_converter[asgi-uuid_converter_1] __________________

client = <falcon.testing.client.TestClient object at 0x7f2480ae6f20>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7f2480ae4760>
uri_template = '/widgets/{widget_id:uuid}'
path = '/widgets/65c71eee-b819-4c9c-a432-90fc312d4da3'
expected = {'widget_id': UUID('65c71eee-b819-4c9c-a432-90fc312d4da3')}

    @pytest.mark.parametrize(
        'uri_template, path, expected',
        as_params(
            (
                '/widgets/{widget_id:uuid}',
                '/widgets/' + _TEST_UUID_STR,
                {'widget_id': _TEST_UUID},
            ),
            (
                '/widgets/{widget_id:uuid}/orders',
                '/widgets/' + _TEST_UUID_STR_SANS_HYPHENS + '/orders',
                {'widget_id': _TEST_UUID},
            ),
            (
                '/versions/diff/{left:uuid()}...{right:uuid()}',
                '/versions/diff/{}...{}'.format(_TEST_UUID_STR, _TEST_UUID_STR_2),
                {
                    'left': _TEST_UUID,
                    'right': _TEST_UUID_2,
                },
            ),
            (
                '/versions/diff/{left:uuid}...{right:uuid()}',
                '/versions/diff/{}...{}'.format(_TEST_UUID_STR, _TEST_UUID_STR_2),
                {
                    'left': _TEST_UUID,
                    'right': _TEST_UUID_2,
                },
            ),
            (
                '/versions/diff/{left:uuid()}...{right:uuid}',
                '/versions/diff/{}...{}'.format(_TEST_UUID_STR, _TEST_UUID_STR_2),
                {
                    'left': _TEST_UUID,
                    'right': _TEST_UUID_2,
                },
            ),
            (
                '/widgets/{widget_id:uuid}/orders',
                '/widgets/' + _TEST_UUID_STR_SANS_HYPHENS[:-1] + '/orders',
                None,
            ),
            prefix='uuid_converter',
        ),
    )
    def test_uuid_converter(client, resource, uri_template, path, expected):
>       client.app.add_route(uri_template, resource)

tests/test_uri_templates.py:361: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237da2c190>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f24820d4dc0>, 'CHECK...4dc0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f24820d4dc0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f2480ae4760>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________________________ test_root_path[asgi] _____________________________

client = <falcon.testing.client.TestClient object at 0x7f237dae1360>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7f237dae1720>

    def test_root_path(client, resource):
>       client.app.add_route('/', resource)

tests/test_uri_templates.py:143: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237da2c0b0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d7783a0>, 'CHECK...83a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d7783a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f237dae1720>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______________ test_int_converter_rejections[asgi-/{id:int(2)}] _______________

client = <falcon.testing.client.TestClient object at 0x7f237dadf280>
uri_template = '/{id:int(2)}'

    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:int(2)}',
            '/{id:int(min=124)}',
            '/{id:int(num_digits=3, max=100)}',
        ],
    )
    def test_int_converter_rejections(client, uri_template):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:271: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237da2c510>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d77b010>, 'CHECK...b010>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d77b010>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7f237dadec50>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ test_float_converter[asgi-/{id:float}-1.9] __________________

client = <falcon.testing.client.TestClient object at 0x7f232da50b20>
uri_template = '/{id:float}', id_value = 1.9

    @pytest.mark.parametrize('id_value', [2, 2.1, 1.9])
    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:float}',
            '/{id:float(1)}',
            '/{id:float(min=1.9)}',
            '/{id:float(min=1.8, max=3)}',
        ],
    )
    def test_float_converter(client, uri_template, id_value):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:230: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237da2cc10>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d77ba30>, 'CHECK...ba30>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d77ba30>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7f237d8121d0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______________ test_float_converter_non_finite_disallowed[asgi] _______________

client = <falcon.testing.client.TestClient object at 0x7f237dae8b80>

    def test_float_converter_non_finite_disallowed(client):
        resource1 = IDResource()
>       client.app.add_route('/{id:float}', resource1)

tests/test_uri_templates.py:254: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237da2de70>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f24820ce950>, 'CHECK...e950>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f24820ce950>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7f237dae8fa0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______________ test_float_converter[asgi-/{id:float(min=1.9)}-2] _______________

client = <falcon.testing.client.TestClient object at 0x7f237da27430>
uri_template = '/{id:float(min=1.9)}', id_value = 2

    @pytest.mark.parametrize('id_value', [2, 2.1, 1.9])
    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:float}',
            '/{id:float(1)}',
            '/{id:float(min=1.9)}',
            '/{id:float(min=1.8, max=3)}',
        ],
    )
    def test_float_converter(client, uri_template, id_value):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:230: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d9cfd80>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f24820cda20>, 'CHECK...da20>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f24820cda20>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7f237da24190>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________________________ test_single[asgi-id] _____________________________

client = <falcon.testing.client.TestClient object at 0x7f2480aee8c0>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7f2480aec640>
field_name = 'id'

    @pytest.mark.parametrize(
        'field_name',
        [
            'id',
            'id123',
            'widget_id',
        ],
    )
    def test_single(client, resource, field_name):
        template = '/widgets/{{{}}}'.format(field_name)
    
>       client.app.add_route(template, resource)

tests/test_uri_templates.py:182: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d9ce730>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d77bbe0>, 'CHECK...bbe0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d77bbe0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f2480aec640>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________ test_float_converter[asgi-/{id:float(min=1.9)}-2.1] ______________

client = <falcon.testing.client.TestClient object at 0x7f2480a4a560>
uri_template = '/{id:float(min=1.9)}', id_value = 2.1

    @pytest.mark.parametrize('id_value', [2, 2.1, 1.9])
    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:float}',
            '/{id:float(1)}',
            '/{id:float(min=1.9)}',
            '/{id:float(min=1.8, max=3)}',
        ],
    )
    def test_float_converter(client, uri_template, id_value):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:230: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d9db140>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d877760>, 'CHECK...7760>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d877760>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7f2480a4a320>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______________ test_float_converter_non_finite_allowed[asgi-inf] _______________

value = 'inf'
client = <falcon.testing.client.TestClient object at 0x7f237da52fb0>

    @pytest.mark.parametrize('value', ['nan', '-inf', 'inf'])
    def test_float_converter_non_finite_allowed(value, client):
        resource1 = IDResource()
>       client.app.add_route('/{id:float(finite=False)}', resource1)

tests/test_uri_templates.py:243: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d9da960>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f24820d76d0>, 'CHECK...76d0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f24820d76d0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7f237da53f40>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ test_uuid_converter[asgi-uuid_converter_2] __________________

client = <falcon.testing.client.TestClient object at 0x7f2480a5b7c0>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7f2480a58910>
uri_template = '/widgets/{widget_id:uuid}/orders'
path = '/widgets/65c71eeeb8194c9ca43290fc312d4da3/orders'
expected = {'widget_id': UUID('65c71eee-b819-4c9c-a432-90fc312d4da3')}

    @pytest.mark.parametrize(
        'uri_template, path, expected',
        as_params(
            (
                '/widgets/{widget_id:uuid}',
                '/widgets/' + _TEST_UUID_STR,
                {'widget_id': _TEST_UUID},
            ),
            (
                '/widgets/{widget_id:uuid}/orders',
                '/widgets/' + _TEST_UUID_STR_SANS_HYPHENS + '/orders',
                {'widget_id': _TEST_UUID},
            ),
            (
                '/versions/diff/{left:uuid()}...{right:uuid()}',
                '/versions/diff/{}...{}'.format(_TEST_UUID_STR, _TEST_UUID_STR_2),
                {
                    'left': _TEST_UUID,
                    'right': _TEST_UUID_2,
                },
            ),
            (
                '/versions/diff/{left:uuid}...{right:uuid()}',
                '/versions/diff/{}...{}'.format(_TEST_UUID_STR, _TEST_UUID_STR_2),
                {
                    'left': _TEST_UUID,
                    'right': _TEST_UUID_2,
                },
            ),
            (
                '/versions/diff/{left:uuid()}...{right:uuid}',
                '/versions/diff/{}...{}'.format(_TEST_UUID_STR, _TEST_UUID_STR_2),
                {
                    'left': _TEST_UUID,
                    'right': _TEST_UUID_2,
                },
            ),
            (
                '/widgets/{widget_id:uuid}/orders',
                '/widgets/' + _TEST_UUID_STR_SANS_HYPHENS[:-1] + '/orders',
                None,
            ),
            prefix='uuid_converter',
        ),
    )
    def test_uuid_converter(client, resource, uri_template, path, expected):
>       client.app.add_route(uri_template, resource)

tests/test_uri_templates.py:361: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d9d83c0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f24820cf490>, 'CHECK...f490>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f24820cf490>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f2480a58910>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ test_datetime_converter[asgi-/{start_year:int}-to-{timestamp:dt("%Y-%m-%d")}-/1961-to-1969-07-21-dt_expected1] _

client = <falcon.testing.client.TestClient object at 0x7f2480a286a0>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7f2480a2b8e0>
uri_template = '/{start_year:int}-to-{timestamp:dt("%Y-%m-%d")}'
path = '/1961-to-1969-07-21', dt_expected = datetime.datetime(1969, 7, 21, 0, 0)

    @pytest.mark.parametrize(
        'uri_template, path, dt_expected',
        [
            (
                '/{start_year:int}-to-{timestamp:dt}',
                '/1961-to-1969-07-21T02:56:00Z',
                datetime(1969, 7, 21, 2, 56, 0),
            ),
            (
                '/{start_year:int}-to-{timestamp:dt("%Y-%m-%d")}',
                '/1961-to-1969-07-21',
                datetime(1969, 7, 21),
            ),
            (
                '/{start_year:int}/{timestamp:dt("%Y-%m-%d %H:%M")}',
                '/1961/1969-07-21 14:30',
                datetime(1969, 7, 21, 14, 30),
            ),
            ('/{start_year:int}-to-{timestamp:dt("%Y-%m")}', '/1961-to-1969-07-21', None),
        ],
    )
    def test_datetime_converter(client, resource, uri_template, path, dt_expected):
>       client.app.add_route(uri_template, resource)

tests/test_uri_templates.py:301: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d9cab20>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d876d40>, 'CHECK...6d40>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d876d40>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f2480a2b8e0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________ test_float_converter[asgi-/{id:float(min=1.8, max=3)}-2.1] __________

client = <falcon.testing.client.TestClient object at 0x7f2480a70fa0>
uri_template = '/{id:float(min=1.8, max=3)}', id_value = 2.1

    @pytest.mark.parametrize('id_value', [2, 2.1, 1.9])
    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:float}',
            '/{id:float(1)}',
            '/{id:float(min=1.9)}',
            '/{id:float(min=1.8, max=3)}',
        ],
    )
    def test_float_converter(client, uri_template, id_value):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:230: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d9d9ee0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d738790>, 'CHECK...8790>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d738790>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7f2480a726b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ test_converter_custom[asgi-/({food:spam()}){food_too:spam("()")}-/(bacon)eggs-expected2] _

client = <falcon.testing.client.TestClient object at 0x7f237db97f70>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7f237db941f0>
uri_template = '/({food:spam()}){food_too:spam("()")}', path = '/(bacon)eggs'
expected = {'food': 'spam!', 'food_too': 'spam!'}

    @pytest.mark.parametrize(
        'uri_template, path, expected',
        [
            ('/{food:spam}', '/something', {'food': 'spam!'}),
            (
                '/{food:spam(")")}:{food_too:spam("()")}',
                '/bacon:eggs',
                {'food': 'spam!', 'food_too': 'spam!'},
            ),
            (
                '/({food:spam()}){food_too:spam("()")}',
                '/(bacon)eggs',
                {'food': 'spam!', 'food_too': 'spam!'},
            ),
        ],
    )
    def test_converter_custom(client, resource, uri_template, path, expected):
        class SpamConverter:
            def __init__(self, useless_text=None):
                pass
    
            def convert(self, fragment):
                return 'spam!'
    
        client.app.router_options.converters['spam'] = SpamConverter
>       client.app.add_route(uri_template, resource)

tests/test_uri_templates.py:413: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d9da420>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f2481dc0ca0>, 'CHECK...0ca0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f2481dc0ca0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f237db941f0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ test_datetime_converter[asgi-/{start_year:int}-to-{timestamp:dt}-/1961-to-1969-07-21T02:56:00Z-dt_expected0] _

client = <falcon.testing.client.TestClient object at 0x7f237d83a200>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7f237d83a890>
uri_template = '/{start_year:int}-to-{timestamp:dt}'
path = '/1961-to-1969-07-21T02:56:00Z'
dt_expected = datetime.datetime(1969, 7, 21, 2, 56)

    @pytest.mark.parametrize(
        'uri_template, path, dt_expected',
        [
            (
                '/{start_year:int}-to-{timestamp:dt}',
                '/1961-to-1969-07-21T02:56:00Z',
                datetime(1969, 7, 21, 2, 56, 0),
            ),
            (
                '/{start_year:int}-to-{timestamp:dt("%Y-%m-%d")}',
                '/1961-to-1969-07-21',
                datetime(1969, 7, 21),
            ),
            (
                '/{start_year:int}/{timestamp:dt("%Y-%m-%d %H:%M")}',
                '/1961/1969-07-21 14:30',
                datetime(1969, 7, 21, 14, 30),
            ),
            ('/{start_year:int}-to-{timestamp:dt("%Y-%m")}', '/1961-to-1969-07-21', None),
        ],
    )
    def test_datetime_converter(client, resource, uri_template, path, dt_expected):
>       client.app.add_route(uri_template, resource)

tests/test_uri_templates.py:301: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237da2cba0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d779510>, 'CHECK...9510>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d779510>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f237d83a890>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________ test_float_converter[asgi-/{id:float(min=1.8, max=3)}-2] ___________

client = <falcon.testing.client.TestClient object at 0x7f237da50970>
uri_template = '/{id:float(min=1.8, max=3)}', id_value = 2

    @pytest.mark.parametrize('id_value', [2, 2.1, 1.9])
    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:float}',
            '/{id:float(1)}',
            '/{id:float(min=1.9)}',
            '/{id:float(min=1.8, max=3)}',
        ],
    )
    def test_float_converter(client, uri_template, id_value):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:230: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237da2d230>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d6ffbe0>, 'CHECK...fbe0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d6ffbe0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7f237da539a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______________________ test_single_trailing_slash[asgi] _______________________

client = <falcon.testing.client.TestClient object at 0x7f2480a04e50>

    def test_single_trailing_slash(client):
        resource1 = IDResource()
>       client.app.add_route('/1/{id}/', resource1)

tests/test_uri_templates.py:424: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237da2f290>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d77b9a0>, 'CHECK...b9a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d77b9a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7f2480a06ef0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________________________ test_single[asgi-id123] ____________________________

client = <falcon.testing.client.TestClient object at 0x7f237dba4760>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7f237dba7c70>
field_name = 'id123'

    @pytest.mark.parametrize(
        'field_name',
        [
            'id',
            'id123',
            'widget_id',
        ],
    )
    def test_single(client, resource, field_name):
        template = '/widgets/{{{}}}'.format(field_name)
    
>       client.app.add_route(template, resource)

tests/test_uri_templates.py:182: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d9ced50>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f24820d6710>, 'CHECK...6710>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f24820d6710>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f237dba7c70>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ test_uuid_converter[asgi-uuid_converter_5] __________________

client = <falcon.testing.client.TestClient object at 0x7f237db39660>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7f237db389d0>
uri_template = '/versions/diff/{left:uuid()}...{right:uuid}'
path = '/versions/diff/65c71eee-b819-4c9c-a432-90fc312d4da3...2e17cd8e-4b9f-4603-8491-4eb63bf82ea4'
expected = {'left': UUID('65c71eee-b819-4c9c-a432-90fc312d4da3'), 'right': UUID('2e17cd8e-4b9f-4603-8491-4eb63bf82ea4')}

    @pytest.mark.parametrize(
        'uri_template, path, expected',
        as_params(
            (
                '/widgets/{widget_id:uuid}',
                '/widgets/' + _TEST_UUID_STR,
                {'widget_id': _TEST_UUID},
            ),
            (
                '/widgets/{widget_id:uuid}/orders',
                '/widgets/' + _TEST_UUID_STR_SANS_HYPHENS + '/orders',
                {'widget_id': _TEST_UUID},
            ),
            (
                '/versions/diff/{left:uuid()}...{right:uuid()}',
                '/versions/diff/{}...{}'.format(_TEST_UUID_STR, _TEST_UUID_STR_2),
                {
                    'left': _TEST_UUID,
                    'right': _TEST_UUID_2,
                },
            ),
            (
                '/versions/diff/{left:uuid}...{right:uuid()}',
                '/versions/diff/{}...{}'.format(_TEST_UUID_STR, _TEST_UUID_STR_2),
                {
                    'left': _TEST_UUID,
                    'right': _TEST_UUID_2,
                },
            ),
            (
                '/versions/diff/{left:uuid()}...{right:uuid}',
                '/versions/diff/{}...{}'.format(_TEST_UUID_STR, _TEST_UUID_STR_2),
                {
                    'left': _TEST_UUID,
                    'right': _TEST_UUID_2,
                },
            ),
            (
                '/widgets/{widget_id:uuid}/orders',
                '/widgets/' + _TEST_UUID_STR_SANS_HYPHENS[:-1] + '/orders',
                None,
            ),
            prefix='uuid_converter',
        ),
    )
    def test_uuid_converter(client, resource, uri_template, path, expected):
>       client.app.add_route(uri_template, resource)

tests/test_uri_templates.py:361: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237daf8430>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d876830>, 'CHECK...6830>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d876830>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f237db389d0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________ test_int_converter[asgi-/{id:int(min=123, max=123)}] _____________

client = <falcon.testing.client.TestClient object at 0x7f2480a499f0>
uri_template = '/{id:int(min=123, max=123)}'

    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:int}',
            '/{id:int(3)}',
            '/{id:int(min=123)}',
            '/{id:int(min=123, max=123)}',
        ],
    )
    def test_int_converter(client, uri_template):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:208: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237daf9bd0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d77bbe0>, 'CHECK...bbe0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d77bbe0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7f2480a4a260>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______________________ test_int_converter[asgi-/{id:int}] ______________________

client = <falcon.testing.client.TestClient object at 0x7f2480aedcc0>
uri_template = '/{id:int}'

    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:int}',
            '/{id:int(3)}',
            '/{id:int(min=123)}',
            '/{id:int(min=123, max=123)}',
        ],
    )
    def test_int_converter(client, uri_template):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:208: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237daf8580>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f24820d5ea0>, 'CHECK...5ea0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f24820d5ea0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7f2480aeeaa0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________________ test_float_converter[asgi-/{id:float}-2] ___________________

client = <falcon.testing.client.TestClient object at 0x7f237d9e8a60>
uri_template = '/{id:float}', id_value = 2

    @pytest.mark.parametrize('id_value', [2, 2.1, 1.9])
    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:float}',
            '/{id:float(1)}',
            '/{id:float(min=1.9)}',
            '/{id:float(min=1.8, max=3)}',
        ],
    )
    def test_float_converter(client, uri_template, id_value):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:230: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237daf8cf0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f24820ce830>, 'CHECK...e830>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f24820ce830>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7f237d9eac20>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______________ test_with_and_without_trailing_slash[asgi-False] _______________

client = <falcon.testing.client.TestClient object at 0x7f237dadc370>
reverse = False

    @pytest.mark.parametrize('reverse', [True, False])
    def test_with_and_without_trailing_slash(client, reverse):
        routes = [
            ('/kitchen', KitchenSinkResource()),
            ('/kitchen/', KitchenSinkResource()),
            ('/kitchen/{item}', KitchenSinkResource()),
            ('/kitchen/{item}/', KitchenSinkResource()),
            ('/kitchen/sink', KitchenSinkResource()),
            ('/kitchen/sink/', KitchenSinkResource()),
        ]
        if reverse:
            routes.reverse()
    
        for route in routes:
>           client.app.add_route(*route)

tests/test_uri_templates.py:576: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237daf95b0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f24820d76d0>, 'CHECK...76d0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f24820d76d0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method KitchenSinkResource.on_get of <test_uri_templates.KitchenSinkResource object at 0x7f237dadfcd0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____ test_int_converter_rejections[asgi-/{id:int(num_digits=3, max=100)}] _____

client = <falcon.testing.client.TestClient object at 0x7f2480a72680>
uri_template = '/{id:int(num_digits=3, max=100)}'

    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:int(2)}',
            '/{id:int(min=124)}',
            '/{id:int(num_digits=3, max=100)}',
        ],
    )
    def test_int_converter_rejections(client, uri_template):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:271: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237daf8580>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f24820d4dc0>, 'CHECK...4dc0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f24820d4dc0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7f2480a715d0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ test_datetime_converter[asgi-/{start_year:int}/{timestamp:dt("%Y-%m-%d %H:%M")}-/1961/1969-07-21 14:30-dt_expected2] _

client = <falcon.testing.client.TestClient object at 0x7f237dae0850>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7f237dae3100>
uri_template = '/{start_year:int}/{timestamp:dt("%Y-%m-%d %H:%M")}'
path = '/1961/1969-07-21 14:30'
dt_expected = datetime.datetime(1969, 7, 21, 14, 30)

    @pytest.mark.parametrize(
        'uri_template, path, dt_expected',
        [
            (
                '/{start_year:int}-to-{timestamp:dt}',
                '/1961-to-1969-07-21T02:56:00Z',
                datetime(1969, 7, 21, 2, 56, 0),
            ),
            (
                '/{start_year:int}-to-{timestamp:dt("%Y-%m-%d")}',
                '/1961-to-1969-07-21',
                datetime(1969, 7, 21),
            ),
            (
                '/{start_year:int}/{timestamp:dt("%Y-%m-%d %H:%M")}',
                '/1961/1969-07-21 14:30',
                datetime(1969, 7, 21, 14, 30),
            ),
            ('/{start_year:int}-to-{timestamp:dt("%Y-%m")}', '/1961-to-1969-07-21', None),
        ],
    )
    def test_datetime_converter(client, resource, uri_template, path, dt_expected):
>       client.app.add_route(uri_template, resource)

tests/test_uri_templates.py:301: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237daf8040>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d77aef0>, 'CHECK...aef0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d77aef0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f237dae3100>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________ test_float_converter[asgi-/{id:float(min=1.9)}-1.9] ______________

client = <falcon.testing.client.TestClient object at 0x7f237db208e0>
uri_template = '/{id:float(min=1.9)}', id_value = 1.9

    @pytest.mark.parametrize('id_value', [2, 2.1, 1.9])
    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:float}',
            '/{id:float(1)}',
            '/{id:float(min=1.9)}',
            '/{id:float(min=1.8, max=3)}',
        ],
    )
    def test_float_converter(client, uri_template, id_value):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:230: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237da2da80>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d77bd00>, 'CHECK...bd00>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d77bd00>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7f237db22140>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ test_datetime_converter[asgi-/{start_year:int}-to-{timestamp:dt("%Y-%m")}-/1961-to-1969-07-21-None] _

client = <falcon.testing.client.TestClient object at 0x7f237dba4eb0>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7f237dba7220>
uri_template = '/{start_year:int}-to-{timestamp:dt("%Y-%m")}'
path = '/1961-to-1969-07-21', dt_expected = None

    @pytest.mark.parametrize(
        'uri_template, path, dt_expected',
        [
            (
                '/{start_year:int}-to-{timestamp:dt}',
                '/1961-to-1969-07-21T02:56:00Z',
                datetime(1969, 7, 21, 2, 56, 0),
            ),
            (
                '/{start_year:int}-to-{timestamp:dt("%Y-%m-%d")}',
                '/1961-to-1969-07-21',
                datetime(1969, 7, 21),
            ),
            (
                '/{start_year:int}/{timestamp:dt("%Y-%m-%d %H:%M")}',
                '/1961/1969-07-21 14:30',
                datetime(1969, 7, 21, 14, 30),
            ),
            ('/{start_year:int}-to-{timestamp:dt("%Y-%m")}', '/1961-to-1969-07-21', None),
        ],
    )
    def test_datetime_converter(client, resource, uri_template, path, dt_expected):
>       client.app.add_route(uri_template, resource)

tests/test_uri_templates.py:301: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237da2c350>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f2481dc37f0>, 'CHECK...37f0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f2481dc37f0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f237dba7220>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ test_uuid_converter[asgi-uuid_converter_6] __________________

client = <falcon.testing.client.TestClient object at 0x7f237d98d480>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7f237d98e3e0>
uri_template = '/widgets/{widget_id:uuid}/orders'
path = '/widgets/65c71eeeb8194c9ca43290fc312d4da/orders', expected = None

    @pytest.mark.parametrize(
        'uri_template, path, expected',
        as_params(
            (
                '/widgets/{widget_id:uuid}',
                '/widgets/' + _TEST_UUID_STR,
                {'widget_id': _TEST_UUID},
            ),
            (
                '/widgets/{widget_id:uuid}/orders',
                '/widgets/' + _TEST_UUID_STR_SANS_HYPHENS + '/orders',
                {'widget_id': _TEST_UUID},
            ),
            (
                '/versions/diff/{left:uuid()}...{right:uuid()}',
                '/versions/diff/{}...{}'.format(_TEST_UUID_STR, _TEST_UUID_STR_2),
                {
                    'left': _TEST_UUID,
                    'right': _TEST_UUID_2,
                },
            ),
            (
                '/versions/diff/{left:uuid}...{right:uuid()}',
                '/versions/diff/{}...{}'.format(_TEST_UUID_STR, _TEST_UUID_STR_2),
                {
                    'left': _TEST_UUID,
                    'right': _TEST_UUID_2,
                },
            ),
            (
                '/versions/diff/{left:uuid()}...{right:uuid}',
                '/versions/diff/{}...{}'.format(_TEST_UUID_STR, _TEST_UUID_STR_2),
                {
                    'left': _TEST_UUID,
                    'right': _TEST_UUID_2,
                },
            ),
            (
                '/widgets/{widget_id:uuid}/orders',
                '/widgets/' + _TEST_UUID_STR_SANS_HYPHENS[:-1] + '/orders',
                None,
            ),
            prefix='uuid_converter',
        ),
    )
    def test_uuid_converter(client, resource, uri_template, path, expected):
>       client.app.add_route(uri_template, resource)

tests/test_uri_templates.py:361: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d9cb140>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f2481dc29e0>, 'CHECK...29e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f2481dc29e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7f237d98e3e0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ test_float_converter[asgi-/{id:float(1)}-2.1] _________________

client = <falcon.testing.client.TestClient object at 0x7f237da27d90>
uri_template = '/{id:float(1)}', id_value = 2.1

    @pytest.mark.parametrize('id_value', [2, 2.1, 1.9])
    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:float}',
            '/{id:float(1)}',
            '/{id:float(min=1.9)}',
            '/{id:float(min=1.8, max=3)}',
        ],
    )
    def test_float_converter(client, uri_template, id_value):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:230: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d9d85f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8760e0>, 'CHECK...60e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8760e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7f237da26da0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________ TestDefaultRouting.test_route_precedence_with_both_id[asgi] __________

self = <test_sinks.TestDefaultRouting object at 0x7f2342089720>
client = <falcon.testing.client.TestClient object at 0x7f237db8e530>
sink = <test_sinks.SinkAsync object at 0x7f237db8c8b0>
resource = <test_sinks.BookCollection object at 0x7f237db8ea40>

    def test_route_precedence_with_both_id(self, client, sink, resource):
        # NOTE(kgriffs): In case of collision, the route takes precedence.
>       client.app.add_route('/books/{id}', resource)

tests/test_sinks.py:144: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237daf9070>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f24820d5c60>, 'CHECK...5c60>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f24820d5c60>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <test_sinks.BookCollection object at 0x7f237db8ea40>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ TestDefaultRouting.test_route_precedence[asgi] ________________

self = <test_sinks.TestDefaultRouting object at 0x7f23420893c0>
client = <falcon.testing.client.TestClient object at 0x7f2480b12b90>
sink = <test_sinks.SinkAsync object at 0x7f2480b134f0>
resource = <test_sinks.BookCollection object at 0x7f2342875d50>

    def test_route_precedence(self, client, sink, resource):
        # NOTE(kgriffs): In case of collision, the route takes precedence.
>       client.app.add_route('/books', resource)

tests/test_sinks.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237db0f370>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f2481dc3400>, 'CHECK...3400>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f2481dc3400>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <test_sinks.BookCollection object at 0x7f2342875d50>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________________ TestDefaultRouting.test_with_route[asgi] ___________________

self = <test_sinks.TestDefaultRouting object at 0x7f2342088610>
client = <falcon.testing.client.TestClient object at 0x7f2480ae6440>
sink = <test_sinks.SinkAsync object at 0x7f2480ae72b0>
resource = <test_sinks.BookCollection object at 0x7f2480ae6200>

    def test_with_route(self, client, sink, resource):
>       client.app.add_route('/books', resource)

tests/test_sinks.py:113: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237db0e420>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d6fe710>, 'CHECK...e710>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d6fe710>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <test_sinks.BookCollection object at 0x7f2480ae6200>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ TestDefaultRouting.test_route_precedence_with_id[asgi] ____________

self = <test_sinks.TestDefaultRouting object at 0x7f2342089480>
client = <falcon.testing.client.TestClient object at 0x7f2480a70730>
sink = <test_sinks.SinkAsync object at 0x7f2480a73250>
resource = <test_sinks.BookCollection object at 0x7f2480a710f0>

    def test_route_precedence_with_id(self, client, sink, resource):
        # NOTE(kgriffs): In case of collision, the route takes precedence.
>       client.app.add_route('/books/{id}', resource)

tests/test_sinks.py:135: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237db0c580>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f2481d86320>, 'CHECK...6320>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f2481d86320>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <test_sinks.BookCollection object at 0x7f2480a710f0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ TestSinkMethodCompatibility.test_add_sync_sink_with_wrapping[asgi] ______

self = <test_sinks.TestSinkMethodCompatibility object at 0x7f2342089f00>
client = <falcon.testing.client.TestClient object at 0x7f2480a584f0>
asgi = True

    def test_add_sync_sink_with_wrapping(self, client, asgi):
>       client.app.add_sink(kitchen_sink, '/features')

tests/test_sinks.py:176: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.asgi.app.App object at 0x7f237da8ef80>
sink = <function kitchen_sink at 0x7f234205d750>, prefix = '/features'

    def add_sink(self, sink: Callable, prefix: SinkPrefix = r'/'):
        if not iscoroutinefunction(sink) and is_python_func(sink):
            if _should_wrap_non_coroutines():
                sink = wrap_sync_to_async(sink)
            else:
>               raise CompatibilityError(
                    'The sink method must be an awaitable coroutine function '
                    'in order to be used safely with an ASGI app.'
                )
E               falcon.errors.CompatibilityError: The sink method must be an awaitable coroutine function in order to be used safely with an ASGI app.

falcon/asgi/app.py:740: CompatibilityError
________________ TestErrorHandler.test_caught_error_async[asgi] ________________

self = <test_error_handlers.TestErrorHandler object at 0x7f23429186a0>
asgi = True

    def test_caught_error_async(self, asgi):
        if not asgi:
            pytest.skip('Test only applies to ASGI')
    
        app = falcon.asgi.App()
>       app.add_route('/', ErroredClassResource())

tests/test_error_handlers.py:91: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237db78c10>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8760e0>, 'CHECK...60e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d8760e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ErroredClassResource.on_delete of <test_error_handlers.ErroredClassResource object at 0x7f237dad30a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ TestErrorHandler.test_catch_http_no_route_error[asgi] _____________

self = <test_error_handlers.TestErrorHandler object at 0x7f2342919b40>
asgi = True

    def test_catch_http_no_route_error(self, asgi):
        class Resource:
            def on_get(self, req, resp):
                raise falcon.HTTPNotFound()
    
        def capture_error(req, resp, ex, params):
            resp.set_header('X-name', ex.__class__.__name__)
            raise ex
    
        app = create_app(asgi)
>       app.add_route('/', Resource())

tests/test_error_handlers.py:247: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2480a20c80>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d6ff5b0>, 'CHECK...f5b0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f237d6ff5b0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestErrorHandler.test_catch_http_no_route_error.<locals>.Resource.on_get of <test_error_handlers.TestErrorHandler.test_catch_http_no_route_error.<locals>.Resource object at 0x7f2341f2cc40>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__ TestSeveralMiddlewares.test_order_mw_executed_when_exception_in_resp[asgi] __

self = <test_middleware.TestSeveralMiddlewares object at 0x7f2342357bb0>
asgi = True

    def test_order_mw_executed_when_exception_in_resp(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        class RaiseErrorMiddleware:
            def process_response(self, req, resp, resource):
                raise Exception('Always fail')
    
>       app = create_app(
            asgi,
            middleware=[
                ExecutedFirstMiddleware(),
                RaiseErrorMiddleware(),
                ExecutedLastMiddleware(),
            ],
        )

tests/test_middleware.py:595: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:273: in __init__
    self.add_middleware(middleware)
falcon/app.py:472: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.ExecutedFirstMiddleware object at 0x7f237dba6e30>, <test_middleware.TestSeveralMiddlewares.test_orde...als>.RaiseErrorMiddleware object at 0x7f237dba4640>, <test_middleware.ExecutedLastMiddleware object at 0x7f237dba6d70>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ExecutedFirstMiddleware.process_request of <test_middleware.ExecutedFirstMiddleware object at 0x7f237dba6e30>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
__ TestSeveralMiddlewares.test_inner_mw_with_ex_handler_throw_exception[asgi] __

self = <test_middleware.TestSeveralMiddlewares object at 0x7f2342357730>
asgi = True

    def test_inner_mw_with_ex_handler_throw_exception(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        class RaiseErrorMiddleware:
            def process_request(self, req, resp, resource):
                raise Exception('Always fail')
    
>       app = create_app(
            asgi,
            middleware=[
                TransactionIdMiddleware(),
                RequestTimeMiddleware(),
                RaiseErrorMiddleware(),
            ],
        )

tests/test_middleware.py:527: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:273: in __init__
    self.add_middleware(middleware)
falcon/app.py:472: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.TransactionIdMiddleware object at 0x7f2480aa2a70>, <test_middleware.RequestTimeMiddleware object at ...veralMiddlewares.test_inner_mw_with_ex_handler_throw_exception.<locals>.RaiseErrorMiddleware object at 0x7f2480aa1720>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method TransactionIdMiddleware.process_request of <test_middleware.TransactionIdMiddleware object at 0x7f2480aa2a70>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
__________ TestSeveralMiddlewares.test_inner_mw_throw_exception[asgi] __________

self = <test_middleware.TestSeveralMiddlewares object at 0x7f2342357490>
asgi = True

    def test_inner_mw_throw_exception(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        class MyException(Exception):
            pass
    
        class RaiseErrorMiddleware:
            def process_request(self, req, resp):
                raise MyException('Always fail')
    
>       app = create_app(
            asgi,
            middleware=[
                TransactionIdMiddleware(),
                RequestTimeMiddleware(),
                RaiseErrorMiddleware(),
            ],
        )

tests/test_middleware.py:440: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:273: in __init__
    self.add_middleware(middleware)
falcon/app.py:472: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.TransactionIdMiddleware object at 0x7f2480a06740>, <test_middleware.RequestTimeMiddleware object at ...iddleware.TestSeveralMiddlewares.test_inner_mw_throw_exception.<locals>.RaiseErrorMiddleware object at 0x7f2480a07df0>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method TransactionIdMiddleware.process_request of <test_middleware.TransactionIdMiddleware object at 0x7f2480a06740>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
__ TestSeveralMiddlewares.test_order_mw_executed_when_exception_in_req[asgi] ___

self = <test_middleware.TestSeveralMiddlewares object at 0x7f2342380100>
asgi = True

    def test_order_mw_executed_when_exception_in_req(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        class RaiseErrorMiddleware:
            def process_request(self, req, resp):
                raise Exception('Always fail')
    
        class RaiseErrorMiddlewareAsync:
            async def process_request(self, req, resp):
                raise Exception('Always fail')
    
        rem = RaiseErrorMiddlewareAsync() if asgi else RaiseErrorMiddleware()
    
>       app = create_app(
            asgi, middleware=[ExecutedFirstMiddleware(), rem, ExecutedLastMiddleware()]
        )

tests/test_middleware.py:678: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:273: in __init__
    self.add_middleware(middleware)
falcon/app.py:472: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.ExecutedFirstMiddleware object at 0x7f237da50d60>, <test_middleware.TestSeveralMiddlewares.test_orde...RaiseErrorMiddlewareAsync object at 0x7f237da515a0>, <test_middleware.ExecutedLastMiddleware object at 0x7f237da51bd0>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ExecutedFirstMiddleware.process_request of <test_middleware.ExecutedFirstMiddleware object at 0x7f237da50d60>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
___ TestSeveralMiddlewares.test_independent_middleware_execution_order[asgi] ___

self = <test_middleware.TestSeveralMiddlewares object at 0x7f2342356fb0>
asgi = True

    def test_independent_middleware_execution_order(self, asgi):
        global context
>       app = create_app(
            asgi,
            independent_middleware=True,
            middleware=[ExecutedFirstMiddleware(), ExecutedLastMiddleware()],
        )

tests/test_middleware.py:364: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:273: in __init__
    self.add_middleware(middleware)
falcon/app.py:472: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.ExecutedFirstMiddleware object at 0x7f2480a4a2f0>, <test_middleware.ExecutedLastMiddleware object at 0x7f2480a4bf40>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ExecutedFirstMiddleware.process_request of <test_middleware.ExecutedFirstMiddleware object at 0x7f2480a4a2f0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_ TestSeveralMiddlewares.test_order_independent_mw_executed_when_exception_in_resp[asgi] _

self = <test_middleware.TestSeveralMiddlewares object at 0x7f23423800d0>
asgi = True

    def test_order_independent_mw_executed_when_exception_in_resp(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        class RaiseErrorMiddleware:
            def process_response(self, req, resp, resource):
                raise Exception('Always fail')
    
>       app = create_app(
            asgi,
            independent_middleware=True,
            middleware=[
                ExecutedFirstMiddleware(),
                RaiseErrorMiddleware(),
                ExecutedLastMiddleware(),
            ],
        )

tests/test_middleware.py:633: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:273: in __init__
    self.add_middleware(middleware)
falcon/app.py:472: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.ExecutedFirstMiddleware object at 0x7f237db469e0>, <test_middleware.TestSeveralMiddlewares.test_orde...als>.RaiseErrorMiddleware object at 0x7f237db44280>, <test_middleware.ExecutedLastMiddleware object at 0x7f237db46f80>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ExecutedFirstMiddleware.process_request of <test_middleware.ExecutedFirstMiddleware object at 0x7f237db469e0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
__ TestSeveralMiddlewares.test_order_mw_executed_when_exception_in_rsrc[asgi] __

self = <test_middleware.TestSeveralMiddlewares object at 0x7f23423805b0>
asgi = True

    def test_order_mw_executed_when_exception_in_rsrc(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        class RaiseErrorMiddleware:
            def process_resource(self, req, resp, resource):
                raise Exception('Always fail')
    
        class RaiseErrorMiddlewareAsync:
            # NOTE(kgriffs): The *_async postfix is not required in this
            #   case, but we include it to make sure it works as expected.
            async def process_resource_async(self, req, resp, resource):
                raise Exception('Always fail')
    
        rem = RaiseErrorMiddlewareAsync() if asgi else RaiseErrorMiddleware()
    
>       app = create_app(
            asgi, middleware=[ExecutedFirstMiddleware(), rem, ExecutedLastMiddleware()]
        )

tests/test_middleware.py:754: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:273: in __init__
    self.add_middleware(middleware)
falcon/app.py:472: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.ExecutedFirstMiddleware object at 0x7f2480a85450>, <test_middleware.TestSeveralMiddlewares.test_orde...RaiseErrorMiddlewareAsync object at 0x7f2480a86ec0>, <test_middleware.ExecutedLastMiddleware object at 0x7f2480a85e40>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ExecutedFirstMiddleware.process_request of <test_middleware.ExecutedFirstMiddleware object at 0x7f2480a85450>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_ TestSeveralMiddlewares.test_order_independent_mw_executed_when_exception_in_req[asgi] _

self = <test_middleware.TestSeveralMiddlewares object at 0x7f2342380340>
asgi = True

    def test_order_independent_mw_executed_when_exception_in_req(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        class RaiseErrorMiddleware:
            def process_request(self, req, resp):
                raise Exception('Always fail')
    
        class RaiseErrorMiddlewareAsync:
            async def process_request(self, req, resp):
                raise Exception('Always fail')
    
        rem = RaiseErrorMiddlewareAsync() if asgi else RaiseErrorMiddleware()
    
>       app = create_app(
            asgi,
            independent_middleware=True,
            middleware=[ExecutedFirstMiddleware(), rem, ExecutedLastMiddleware()],
        )

tests/test_middleware.py:714: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:273: in __init__
    self.add_middleware(middleware)
falcon/app.py:472: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.ExecutedFirstMiddleware object at 0x7f237d9e9600>, <test_middleware.TestSeveralMiddlewares.test_orde...RaiseErrorMiddlewareAsync object at 0x7f237d9eb190>, <test_middleware.ExecutedLastMiddleware object at 0x7f237d9e82b0>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ExecutedFirstMiddleware.process_request of <test_middleware.ExecutedFirstMiddleware object at 0x7f237d9e9600>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_ TestSeveralMiddlewares.test_legacy_middleware_called_with_correct_args[asgi] _

self = <test_middleware.TestSeveralMiddlewares object at 0x7f2342356b30>
asgi = True

    def test_legacy_middleware_called_with_correct_args(self, asgi):
        global context
>       app = create_app(asgi, middleware=[ExecutedFirstMiddleware()])

tests/test_middleware.py:327: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:273: in __init__
    self.add_middleware(middleware)
falcon/app.py:472: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.ExecutedFirstMiddleware object at 0x7f2481e89a50>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ExecutedFirstMiddleware.process_request of <test_middleware.ExecutedFirstMiddleware object at 0x7f2481e89a50>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_ TestSeveralMiddlewares.test_generate_trans_id_and_time_with_request[asgi-True] _

self = <test_middleware.TestSeveralMiddlewares object at 0x7f2342356aa0>
independent_middleware = True, asgi = True

    @pytest.mark.parametrize('independent_middleware', [True, False])
    def test_generate_trans_id_and_time_with_request(
        self, independent_middleware, asgi
    ):
        # NOTE(kgriffs): We test both so that we can cover the code paths
        # where only a single middleware method is implemented by a
        # component.
        creq = CaptureRequestMiddleware()
        cresp = CaptureResponseMiddleware()
    
        global context
>       app = create_app(
            asgi,
            independent_middleware=independent_middleware,
            # NOTE(kgriffs): Pass as a generic iterable to verify that works.
            middleware=iter(
                [
                    TransactionIdMiddleware(),
                    RequestTimeMiddleware(),
                ]
            ),
        )

tests/test_middleware.py:290: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:273: in __init__
    self.add_middleware(middleware)
falcon/app.py:472: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.TransactionIdMiddleware object at 0x7f2480a84880>, <test_middleware.RequestTimeMiddleware object at 0x7f2480a86f50>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method TransactionIdMiddleware.process_request of <test_middleware.TransactionIdMiddleware object at 0x7f2480a84880>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
____ TestSeveralMiddlewares.test_multiple_response_mw_throw_exception[asgi] ____

self = <test_middleware.TestSeveralMiddlewares object at 0x7f2342357220>
asgi = True

    def test_multiple_response_mw_throw_exception(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        context['req_succeeded'] = []
    
        class RaiseStatusMiddleware:
            def process_response(self, req, resp, resource, req_succeeded):
                raise falcon.HTTPStatus(falcon.HTTP_201)
    
        class RaiseErrorMiddleware:
            def process_response(self, req, resp, resource, req_succeeded):
                raise falcon.HTTPError(falcon.HTTP_748)
    
        class ProcessResponseMiddleware:
            def process_response(self, req, resp, resource, req_succeeded):
                context['executed_methods'].append('process_response')
                context['req_succeeded'].append(req_succeeded)
    
>       app = create_app(
            asgi,
            middleware=[
                ProcessResponseMiddleware(),
                RaiseErrorMiddleware(),
                ProcessResponseMiddleware(),
                RaiseStatusMiddleware(),
                ProcessResponseMiddleware(),
            ],
        )

tests/test_middleware.py:407: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:273: in __init__
    self.add_middleware(middleware)
falcon/app.py:472: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.TestSeveralMiddlewares.test_multiple_response_mw_throw_exception.<locals>.ProcessResponseMiddleware ...eralMiddlewares.test_multiple_response_mw_throw_exception.<locals>.ProcessResponseMiddleware object at 0x7f2480aeeb60>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method TestSeveralMiddlewares.test_multiple_response_mw_throw_exception.<locals>.ProcessResponseMiddleware.process_response of <test_middleware.TestSeveralMiddlewares.test_multiple_response_mw_throw_exception.<locals>.ProcessResponseMiddleware object at 0x7f2480aec0a0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
__ TestSeveralMiddlewares.test_outer_mw_with_ex_handler_throw_exception[asgi] __

self = <test_middleware.TestSeveralMiddlewares object at 0x7f23423563e0>
asgi = True

    def test_outer_mw_with_ex_handler_throw_exception(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        class RaiseErrorMiddleware:
            def process_request(self, req, resp):
                raise Exception('Always fail')
    
>       app = create_app(
            asgi,
            middleware=[
                TransactionIdMiddleware(),
                RaiseErrorMiddleware(),
                RequestTimeMiddleware(),
            ],
        )

tests/test_middleware.py:561: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:273: in __init__
    self.add_middleware(middleware)
falcon/app.py:472: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.TransactionIdMiddleware object at 0x7f2480aa2230>, <test_middleware.TestSeveralMiddlewares.test_oute...cals>.RaiseErrorMiddleware object at 0x7f2480aa3850>, <test_middleware.RequestTimeMiddleware object at 0x7f2480aa0880>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method TransactionIdMiddleware.process_request of <test_middleware.TransactionIdMiddleware object at 0x7f2480aa2230>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_ TestSeveralMiddlewares.test_inner_mw_throw_exception_while_processing_resp[asgi] _

self = <test_middleware.TestSeveralMiddlewares object at 0x7f2342357700>
asgi = True

    def test_inner_mw_throw_exception_while_processing_resp(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        class MyException(Exception):
            pass
    
        class RaiseErrorMiddleware:
            def process_response(self, req, resp, resource, req_succeeded):
                raise MyException('Always fail')
    
>       app = create_app(
            asgi,
            middleware=[
                TransactionIdMiddleware(),
                RequestTimeMiddleware(),
                RaiseErrorMiddleware(),
            ],
        )

tests/test_middleware.py:485: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:273: in __init__
    self.add_middleware(middleware)
falcon/app.py:472: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.TransactionIdMiddleware object at 0x7f237da27df0>, <test_middleware.RequestTimeMiddleware object at ...iddlewares.test_inner_mw_throw_exception_while_processing_resp.<locals>.RaiseErrorMiddleware object at 0x7f237da268c0>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method TransactionIdMiddleware.process_request of <test_middleware.TransactionIdMiddleware object at 0x7f237da27df0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_________ TestSeveralMiddlewares.test_middleware_execution_order[asgi] _________

self = <test_middleware.TestSeveralMiddlewares object at 0x7f2342356d70>
asgi = True

    def test_middleware_execution_order(self, asgi):
        global context
>       app = create_app(
            asgi,
            independent_middleware=False,
            middleware=[ExecutedFirstMiddleware(), ExecutedLastMiddleware()],
        )

tests/test_middleware.py:338: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:273: in __init__
    self.add_middleware(middleware)
falcon/app.py:472: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.ExecutedFirstMiddleware object at 0x7f237db944c0>, <test_middleware.ExecutedLastMiddleware object at 0x7f237db94df0>]
independent_middleware = False, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ExecutedFirstMiddleware.process_request of <test_middleware.ExecutedFirstMiddleware object at 0x7f237db944c0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_ TestSeveralMiddlewares.test_generate_trans_id_and_time_with_request[asgi-False] _

self = <test_middleware.TestSeveralMiddlewares object at 0x7f2342356b90>
independent_middleware = False, asgi = True

    @pytest.mark.parametrize('independent_middleware', [True, False])
    def test_generate_trans_id_and_time_with_request(
        self, independent_middleware, asgi
    ):
        # NOTE(kgriffs): We test both so that we can cover the code paths
        # where only a single middleware method is implemented by a
        # component.
        creq = CaptureRequestMiddleware()
        cresp = CaptureResponseMiddleware()
    
        global context
>       app = create_app(
            asgi,
            independent_middleware=independent_middleware,
            # NOTE(kgriffs): Pass as a generic iterable to verify that works.
            middleware=iter(
                [
                    TransactionIdMiddleware(),
                    RequestTimeMiddleware(),
                ]
            ),
        )

tests/test_middleware.py:290: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:273: in __init__
    self.add_middleware(middleware)
falcon/app.py:472: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.TransactionIdMiddleware object at 0x7f2480a5cd90>, <test_middleware.RequestTimeMiddleware object at 0x7f2480a5d9f0>]
independent_middleware = False, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method TransactionIdMiddleware.process_request of <test_middleware.TransactionIdMiddleware object at 0x7f2480a5cd90>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_ TestSeveralMiddlewares.test_order_independent_mw_executed_when_exception_in_rsrc[asgi] _

self = <test_middleware.TestSeveralMiddlewares object at 0x7f2342380820>
asgi = True

    def test_order_independent_mw_executed_when_exception_in_rsrc(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        class RaiseErrorMiddleware:
            def process_resource(self, req, resp, resource):
                raise Exception('Always fail')
    
        class RaiseErrorMiddlewareAsync:
            async def process_resource(self, req, resp, resource):
                raise Exception('Always fail')
    
        rem = RaiseErrorMiddlewareAsync() if asgi else RaiseErrorMiddleware()
    
>       app = create_app(
            asgi,
            independent_middleware=True,
            middleware=[ExecutedFirstMiddleware(), rem, ExecutedLastMiddleware()],
        )

tests/test_middleware.py:792: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:273: in __init__
    self.add_middleware(middleware)
falcon/app.py:472: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.ExecutedFirstMiddleware object at 0x7f237db8c4f0>, <test_middleware.TestSeveralMiddlewares.test_orde...RaiseErrorMiddlewareAsync object at 0x7f237db8d780>, <test_middleware.ExecutedLastMiddleware object at 0x7f237db8fd30>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ExecutedFirstMiddleware.process_request of <test_middleware.ExecutedFirstMiddleware object at 0x7f237db8c4f0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
______ TestResourceMiddleware.test_can_access_resource_params[asgi-False] ______

self = <test_middleware.TestResourceMiddleware object at 0x7f2342381480>
asgi = True, independent_middleware = False

    @pytest.mark.parametrize('independent_middleware', [True, False])
    def test_can_access_resource_params(self, asgi, independent_middleware):
        """Test that params can be accessed from within process_resource"""
        global context
    
        class Resource:
            def on_get(self, req, resp, **params):
                resp.text = json.dumps(params)
    
>       app = create_app(
            asgi,
            middleware=AccessParamsMiddleware(),
            independent_middleware=independent_middleware,
        )

tests/test_middleware.py:845: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:273: in __init__
    self.add_middleware(middleware)
falcon/app.py:472: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.AccessParamsMiddleware object at 0x7f237db3a7d0>]
independent_middleware = False, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method AccessParamsMiddleware.process_resource of <test_middleware.AccessParamsMiddleware object at 0x7f237db3a7d0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
______ TestResourceMiddleware.test_can_access_resource_params[asgi-True] _______

self = <test_middleware.TestResourceMiddleware object at 0x7f2342381390>
asgi = True, independent_middleware = True

    @pytest.mark.parametrize('independent_middleware', [True, False])
    def test_can_access_resource_params(self, asgi, independent_middleware):
        """Test that params can be accessed from within process_resource"""
        global context
    
        class Resource:
            def on_get(self, req, resp, **params):
                resp.text = json.dumps(params)
    
>       app = create_app(
            asgi,
            middleware=AccessParamsMiddleware(),
            independent_middleware=independent_middleware,
        )

tests/test_middleware.py:845: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:273: in __init__
    self.add_middleware(middleware)
falcon/app.py:472: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.AccessParamsMiddleware object at 0x7f237db47c10>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method AccessParamsMiddleware.process_resource of <test_middleware.AccessParamsMiddleware object at 0x7f237db47c10>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_________ TestShortCircuiting.test_process_resource_cached[asgi-True] __________

self = <test_middleware.TestShortCircuiting object at 0x7f2342382e30>
asgi = True, independent_middleware = True

    @pytest.mark.parametrize('independent_middleware', [True, False])
    def test_process_resource_cached(self, asgi, independent_middleware):
>       response = self._make_client(asgi, independent_middleware).simulate_get(
            '/cached/resource'
        )

tests/test_middleware.py:976: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_middleware.py:933: in _make_client
    app = create_app(
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:273: in __init__
    self.add_middleware(middleware)
falcon/app.py:472: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.RequestTimeMiddleware object at 0x7f237da529b0>, <test_middleware.ResponseCacheMiddlware object at 0x7f237da51510>, <test_middleware.TransactionIdMiddleware object at 0x7f237da53190>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ResponseCacheMiddlware.process_request of <test_middleware.ResponseCacheMiddlware object at 0x7f237da51510>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
__________ TestShortCircuiting.test_process_request_not_cached[asgi] ___________

self = <test_middleware.TestShortCircuiting object at 0x7f23423825f0>
asgi = True

    def test_process_request_not_cached(self, asgi):
>       response = self._make_client(asgi).simulate_get('/')

tests/test_middleware.py:943: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_middleware.py:933: in _make_client
    app = create_app(
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:273: in __init__
    self.add_middleware(middleware)
falcon/app.py:472: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.RequestTimeMiddleware object at 0x7f2481e6cf70>, <test_middleware.ResponseCacheMiddlware object at 0x7f2481e6c040>, <test_middleware.TransactionIdMiddleware object at 0x7f2481e6f3d0>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ResponseCacheMiddlware.process_request of <test_middleware.ResponseCacheMiddlware object at 0x7f2481e6c040>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_________ TestShortCircuiting.test_process_request_cached[asgi-False] __________

self = <test_middleware.TestShortCircuiting object at 0x7f2342382b00>
asgi = True, independent_middleware = False

    @pytest.mark.parametrize('independent_middleware', [True, False])
    def test_process_request_cached(self, asgi, independent_middleware):
>       response = self._make_client(asgi, independent_middleware).simulate_get(
            '/cached'
        )

tests/test_middleware.py:953: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_middleware.py:933: in _make_client
    app = create_app(
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:273: in __init__
    self.add_middleware(middleware)
falcon/app.py:472: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.RequestTimeMiddleware object at 0x7f237dad2a40>, <test_middleware.ResponseCacheMiddlware object at 0x7f237dad27d0>, <test_middleware.TransactionIdMiddleware object at 0x7f237dad06d0>]
independent_middleware = False, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ResponseCacheMiddlware.process_request of <test_middleware.ResponseCacheMiddlware object at 0x7f237dad27d0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_________ TestShortCircuiting.test_process_resource_cached[asgi-False] _________

self = <test_middleware.TestShortCircuiting object at 0x7f23423828c0>
asgi = True, independent_middleware = False

    @pytest.mark.parametrize('independent_middleware', [True, False])
    def test_process_resource_cached(self, asgi, independent_middleware):
>       response = self._make_client(asgi, independent_middleware).simulate_get(
            '/cached/resource'
        )

tests/test_middleware.py:976: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_middleware.py:933: in _make_client
    app = create_app(
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:273: in __init__
    self.add_middleware(middleware)
falcon/app.py:472: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.RequestTimeMiddleware object at 0x7f2480a07a60>, <test_middleware.ResponseCacheMiddlware object at 0x7f2480a04a60>, <test_middleware.TransactionIdMiddleware object at 0x7f2480a064a0>]
independent_middleware = False, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ResponseCacheMiddlware.process_request of <test_middleware.ResponseCacheMiddlware object at 0x7f2480a04a60>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
__________ TestShortCircuiting.test_process_request_cached[asgi-True] __________

self = <test_middleware.TestShortCircuiting object at 0x7f2342382a40>
asgi = True, independent_middleware = True

    @pytest.mark.parametrize('independent_middleware', [True, False])
    def test_process_request_cached(self, asgi, independent_middleware):
>       response = self._make_client(asgi, independent_middleware).simulate_get(
            '/cached'
        )

tests/test_middleware.py:953: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_middleware.py:933: in _make_client
    app = create_app(
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:273: in __init__
    self.add_middleware(middleware)
falcon/app.py:472: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.RequestTimeMiddleware object at 0x7f2480aec640>, <test_middleware.ResponseCacheMiddlware object at 0x7f2480aef100>, <test_middleware.TransactionIdMiddleware object at 0x7f2480aecc10>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ResponseCacheMiddlware.process_request of <test_middleware.ResponseCacheMiddlware object at 0x7f2480aef100>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
____ TestTransactionIdMiddleware.test_generate_trans_id_with_request[asgi] _____

self = <test_middleware.TestTransactionIdMiddleware object at 0x7f23423563b0>
asgi = True

    def test_generate_trans_id_with_request(self, asgi):
        """Test that TransactionIdmiddleware is executed"""
        global context
    
        middleware = (
            TransactionIdMiddlewareAsync() if asgi else TransactionIdMiddleware()
        )
        app = create_app(asgi, middleware=middleware)
    
>       app.add_route(TEST_ROUTE, MiddlewareClassResource())

tests/test_middleware.py:268: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481ebc040>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f2481fed900>, 'CHECK...d900>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f2481fed900>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method MiddlewareClassResource.on_get of <test_middleware.MiddlewareClassResource object at 0x7f237db3aa40>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestRemoveBasePathMiddleware.test_base_path_is_removed_before_routing[asgi] __

self = <test_middleware.TestRemoveBasePathMiddleware object at 0x7f2342380f70>
asgi = True

    def test_base_path_is_removed_before_routing(self, asgi):
        """Test that RemoveBasePathMiddleware is executed before routing"""
>       app = create_app(asgi, middleware=RemoveBasePathMiddleware())

tests/test_middleware.py:822: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:273: in __init__
    self.add_middleware(middleware)
falcon/app.py:472: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.RemoveBasePathMiddleware object at 0x7f23420ae410>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method RemoveBasePathMiddleware.process_request of <test_middleware.RemoveBasePathMiddleware object at 0x7f23420ae410>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_ TestCORSMiddlewareWithAnotherMiddleware.test_api_initialization_with_cors_enabled_and_middleware_param[asgi-mw1] _

self = <test_middleware.TestCORSMiddlewareWithAnotherMiddleware object at 0x7f23423833a0>
mw = [<test_middleware.CaptureResponseMiddleware object at 0x7f2342354850>]
asgi = True

    @pytest.mark.parametrize(
        'mw',
        [
            CaptureResponseMiddleware(),
            [CaptureResponseMiddleware()],
            (CaptureResponseMiddleware(),),
            iter([CaptureResponseMiddleware()]),
        ],
    )
    def test_api_initialization_with_cors_enabled_and_middleware_param(self, mw, asgi):
>       app = create_app(asgi, middleware=mw, cors_enable=True)

tests/test_middleware.py:1012: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:273: in __init__
    self.add_middleware(middleware)
falcon/app.py:472: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.CaptureResponseMiddleware object at 0x7f2342354850>, <falcon.middleware.CORSMiddleware object at 0x7f2481e6a380>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method CaptureResponseMiddleware.process_response of <test_middleware.CaptureResponseMiddleware object at 0x7f2342354850>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_ TestCORSMiddlewareWithAnotherMiddleware.test_api_initialization_with_cors_enabled_and_middleware_param[asgi-mw0] _

self = <test_middleware.TestCORSMiddlewareWithAnotherMiddleware object at 0x7f2342383280>
mw = <test_middleware.CaptureResponseMiddleware object at 0x7f2342354610>
asgi = True

    @pytest.mark.parametrize(
        'mw',
        [
            CaptureResponseMiddleware(),
            [CaptureResponseMiddleware()],
            (CaptureResponseMiddleware(),),
            iter([CaptureResponseMiddleware()]),
        ],
    )
    def test_api_initialization_with_cors_enabled_and_middleware_param(self, mw, asgi):
>       app = create_app(asgi, middleware=mw, cors_enable=True)

tests/test_middleware.py:1012: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:273: in __init__
    self.add_middleware(middleware)
falcon/app.py:472: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.CaptureResponseMiddleware object at 0x7f2342354610>, <falcon.middleware.CORSMiddleware object at 0x7f237dad1b10>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method CaptureResponseMiddleware.process_response of <test_middleware.CaptureResponseMiddleware object at 0x7f2342354610>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_ TestCORSMiddlewareWithAnotherMiddleware.test_api_initialization_with_cors_enabled_and_middleware_param[asgi-mw3] _

self = <test_middleware.TestCORSMiddlewareWithAnotherMiddleware object at 0x7f23423834c0>
mw = <list_iterator object at 0x7f2342354b20>, asgi = True

    @pytest.mark.parametrize(
        'mw',
        [
            CaptureResponseMiddleware(),
            [CaptureResponseMiddleware()],
            (CaptureResponseMiddleware(),),
            iter([CaptureResponseMiddleware()]),
        ],
    )
    def test_api_initialization_with_cors_enabled_and_middleware_param(self, mw, asgi):
        app = create_app(asgi, middleware=mw, cors_enable=True)
>       app.add_route('/', TestCorsResource())

tests/test_middleware.py:1013: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481ebfa70>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f2481fee3b0>, 'CHECK...e3b0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f2481fee3b0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestCorsResource.on_get of <test_middleware.TestCorsResource object at 0x7f2341f2f0d0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestCORSMiddlewareWithAnotherMiddleware.test_api_initialization_with_cors_enabled_and_middleware_param[asgi-mw2] _

self = <test_middleware.TestCORSMiddlewareWithAnotherMiddleware object at 0x7f2342383430>
mw = (<test_middleware.CaptureResponseMiddleware object at 0x7f2342354970>,)
asgi = True

    @pytest.mark.parametrize(
        'mw',
        [
            CaptureResponseMiddleware(),
            [CaptureResponseMiddleware()],
            (CaptureResponseMiddleware(),),
            iter([CaptureResponseMiddleware()]),
        ],
    )
    def test_api_initialization_with_cors_enabled_and_middleware_param(self, mw, asgi):
>       app = create_app(asgi, middleware=mw, cors_enable=True)

tests/test_middleware.py:1012: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:273: in __init__
    self.add_middleware(middleware)
falcon/app.py:472: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.CaptureResponseMiddleware object at 0x7f2342354970>, <falcon.middleware.CORSMiddleware object at 0x7f237dba7550>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method CaptureResponseMiddleware.process_response of <test_middleware.CaptureResponseMiddleware object at 0x7f2342354970>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
______ TestErrorHandling.test_http_status_raised_from_error_handler[asgi] ______

self = <test_middleware.TestErrorHandling object at 0x7f2342381ea0>, asgi = True

    def test_http_status_raised_from_error_handler(self, asgi):
        mw = CaptureResponseMiddleware()
>       app = create_app(asgi, middleware=mw)

tests/test_middleware.py:895: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:273: in __init__
    self.add_middleware(middleware)
falcon/app.py:472: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.CaptureResponseMiddleware object at 0x7f237db54130>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method CaptureResponseMiddleware.process_response of <test_middleware.CaptureResponseMiddleware object at 0x7f237db54130>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
__ TestErrorHandling.test_error_composed_before_resp_middleware_called[asgi] ___

self = <test_middleware.TestErrorHandling object at 0x7f2342381e40>, asgi = True

    def test_error_composed_before_resp_middleware_called(self, asgi):
        mw = CaptureResponseMiddleware()
>       app = create_app(asgi, middleware=mw)

tests/test_middleware.py:875: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:273: in __init__
    self.add_middleware(middleware)
falcon/app.py:472: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.CaptureResponseMiddleware object at 0x7f2480a4b190>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method CaptureResponseMiddleware.process_response of <test_middleware.CaptureResponseMiddleware object at 0x7f2480a4b190>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
____ TestEmptySignatureMiddleware.test_dont_need_params_in_signature[asgi] _____

self = <test_middleware.TestEmptySignatureMiddleware object at 0x7f23423818d0>
asgi = True

    def test_dont_need_params_in_signature(self, asgi):
        """
        Verify that we don't need parameters in the process_* signatures (for
        side-effect-only middlewares, mostly). Makes no difference on py27
        but does affect py36.
    
        https://github.com/falconry/falcon/issues/1254
        """
>       create_app(asgi, middleware=EmptySignatureMiddleware())

tests/test_middleware.py:869: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:273: in __init__
    self.add_middleware(middleware)
falcon/app.py:472: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.EmptySignatureMiddleware object at 0x7f237db57d00>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method EmptySignatureMiddleware.process_request of <test_middleware.EmptySignatureMiddleware object at 0x7f237db57d00>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
__________ TestRequestTimeMiddleware.test_skip_process_resource[asgi] __________

self = <test_middleware.TestRequestTimeMiddleware object at 0x7f23423557b0>
asgi = True

    def test_skip_process_resource(self, asgi):
        global context
        app = create_app(asgi, middleware=[RequestTimeMiddleware()])
    
>       app.add_route('/', MiddlewareClassResource())

tests/test_middleware.py:184: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f237d9d9d90>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f2481fee8c0>, 'CHECK...e8c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f2481fee8c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method MiddlewareClassResource.on_get of <test_middleware.MiddlewareClassResource object at 0x7f237db23280>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__ TestRequestTimeMiddleware.test_response_middleware_raises_exception[asgi] ___

self = <test_middleware.TestRequestTimeMiddleware object at 0x7f2342355a50>
asgi = True

    def test_response_middleware_raises_exception(self, asgi):
        """Test that error in response middleware is propagated up"""
    
        class RaiseErrorMiddleware:
            def process_response(self, req, resp, resource):
                raise Exception('Always fail')
    
>       app = create_app(asgi, middleware=[RaiseErrorMiddleware()])

tests/test_middleware.py:220: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:273: in __init__
    self.add_middleware(middleware)
falcon/app.py:472: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.TestRequestTimeMiddleware.test_response_middleware_raises_exception.<locals>.RaiseErrorMiddleware object at 0x7f237db3b3a0>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method TestRequestTimeMiddleware.test_response_middleware_raises_exception.<locals>.RaiseErrorMiddleware.process_response of <test_middleware.TestRequestTimeMiddleware.test_response_middleware_raises_exception.<locals>.RaiseErrorMiddleware object at 0x7f237db3b3a0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
__________ TestRequestTimeMiddleware.test_log_get_request[asgi-True] ___________

self = <test_middleware.TestRequestTimeMiddleware object at 0x7f2342356020>
independent_middleware = True, asgi = True

    @pytest.mark.parametrize('independent_middleware', [True, False])
    def test_log_get_request(self, independent_middleware, asgi):
        """Test that Log middleware is executed"""
        global context
        app = create_app(
            asgi,
            middleware=[RequestTimeMiddleware()],
            independent_middleware=independent_middleware,
        )
    
>       app.add_route(TEST_ROUTE, MiddlewareClassResource())

tests/test_middleware.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481e14a50>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f2481e80040>, 'CHECK...0040>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f2481e80040>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method MiddlewareClassResource.on_get of <test_middleware.MiddlewareClassResource object at 0x7f2480aee980>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________ TestRequestTimeMiddleware.test_log_get_request[asgi-False] __________

self = <test_middleware.TestRequestTimeMiddleware object at 0x7f23423560e0>
independent_middleware = False, asgi = True

    @pytest.mark.parametrize('independent_middleware', [True, False])
    def test_log_get_request(self, independent_middleware, asgi):
        """Test that Log middleware is executed"""
        global context
        app = create_app(
            asgi,
            middleware=[RequestTimeMiddleware()],
            independent_middleware=independent_middleware,
        )
    
>       app.add_route(TEST_ROUTE, MiddlewareClassResource())

tests/test_middleware.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:581: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7f2481e17ae0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f2481fee830>, 'CHECK...e830>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7f2481fee830>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method MiddlewareClassResource.on_get of <test_middleware.MiddlewareClassResource object at 0x7f237da52830>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
=============================== warnings summary ===============================
../../.local/lib/python3.10/site-packages/pyximport/pyximport.py:51
  /home/kaiyaok2/.local/lib/python3.10/site-packages/pyximport/pyximport.py:51: DeprecationWarning: the imp module is deprecated in favour of importlib and slated for removal in Python 3.12; see the module's documentation for alternative uses
    import imp

../../.local/lib/python3.10/site-packages/Cython/Distutils/old_build_ext.py:15
../../.local/lib/python3.10/site-packages/Cython/Distutils/old_build_ext.py:15
  /home/kaiyaok2/.local/lib/python3.10/site-packages/Cython/Distutils/old_build_ext.py:15: DeprecationWarning: dep_util is Deprecated. Use functions from setuptools instead.
    from distutils.dep_util import newer, newer_group

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/test_cmd_inspect_app.py::TestMain::test_routes_only[internal-not-verbose]
FAILED tests/test_cmd_inspect_app.py::TestMain::test_routes_only[not-internal-not-verbose]
FAILED tests/test_cmd_inspect_app.py::TestMain::test_inspect[not-internal-not-verbose]
FAILED tests/test_cmd_inspect_app.py::TestMain::test_routes_only[internal-verbose]
FAILED tests/test_cmd_inspect_app.py::TestMain::test_inspect[internal-verbose]
FAILED tests/test_cmd_inspect_app.py::TestMain::test_inspect[internal-not-verbose]
FAILED tests/test_cmd_inspect_app.py::TestMain::test_inspect[not-internal-verbose]
FAILED tests/test_cmd_inspect_app.py::TestMain::test_routes_only[not-internal-verbose]
FAILED tests/test_cmd_inspect_app.py::TestLoadApp::test_load_app_error[foo]
FAILED tests/test_cmd_inspect_app.py::TestLoadApp::test_load_app[_APP] - Modu...
FAILED tests/test_cmd_inspect_app.py::TestLoadApp::test_load_app_error[DummyResource]
FAILED tests/test_cmd_inspect_app.py::TestLoadApp::test_load_app[make_app] - ...
FAILED tests/test_cmd_inspect_app.py::TestLoadApp::test_load_app_error[_MODULE]
FAILED tests/asgi/test_cythonized_asgi.py::test_jsonchema_validator - TypeErr...
FAILED tests/asgi/test_cythonized_asgi.py::test_hooks - TypeError: The <bound...
FAILED tests/test_response_body.py::test_content_length_set_on_head_with_no_body[asgi]
FAILED tests/test_response_body.py::test_unsupported_response_content_type[asgi]
FAILED tests/test_response_body.py::test_response_body_rendition_error[asgi]
FAILED tests/test_cython.py::TestCythonized::test_stream_has_private_read - A...
FAILED tests/test_cython.py::TestCythonized::test_imported_from_c_modules - a...
FAILED tests/test_headers.py::TestHeaders::test_content_disposition_inline_header[asgi-Hello World.txt-inline; filename="Hello World.txt"]
FAILED tests/test_headers.py::TestHeaders::test_headers_with_custom_class_not_callable[asgi]
FAILED tests/test_headers.py::TestHeaders::test_no_content_type[asgi-204 No Content]
FAILED tests/test_headers.py::TestHeaders::test_unicode_headers_contain_non_ascii[asgi-PUT]
FAILED tests/test_headers.py::TestHeaders::test_default_value[asgi] - TypeErr...
FAILED tests/test_headers.py::TestHeaders::test_content_disposition_inline_header[asgi-report.csv-inline; filename="report.csv"]
FAILED tests/test_headers.py::TestHeaders::test_content_disposition_attachment_header[asgi-\xc5ngstr\xf6m unit.txt-attachment; filename=A_ngstro_m_unit.txt; filename*=UTF-8''%C3%85ngstr%C3%B6m%20unit.txt]
FAILED tests/test_headers.py::TestHeaders::test_response_append_header[asgi]
FAILED tests/test_headers.py::TestHeaders::test_declared_content_length_on_head[asgi]
FAILED tests/test_headers.py::TestHeaders::test_no_content_length[asgi-204 No Content]
FAILED tests/test_headers.py::TestHeaders::test_append_link_crossorigin[asgi-Use-Credentials-</related/thing>; rel=alternate; crossorigin="use-credentials"]
FAILED tests/test_headers.py::TestHeaders::test_append_link_crossorigin[asgi-Anonymous-</related/thing>; rel=alternate; crossorigin]
FAILED tests/test_headers.py::TestHeaders::test_unicode_location_headers[asgi]
FAILED tests/test_headers.py::TestHeaders::test_passthrough_request_headers[asgi]
FAILED tests/test_headers.py::TestHeaders::test_vary_header[asgi-vary1-accept-encoding, x-auth-token]
FAILED tests/test_headers.py::TestHeaders::test_request_multiple_header[asgi]
FAILED tests/test_headers.py::TestHeaders::test_required_header[asgi] - TypeE...
FAILED tests/test_headers.py::TestHeaders::test_declared_content_length_overridden_by_no_body[asgi]
FAILED tests/test_headers.py::TestHeaders::test_append_link_with_title_star[asgi]
FAILED tests/test_headers.py::TestHeaders::test_content_disposition_attachment_header[asgi-one,two.txt-attachment; filename="one,two.txt"]
FAILED tests/test_headers.py::TestHeaders::test_headers_as_list[asgi] - TypeE...
FAILED tests/test_headers.py::TestHeaders::test_append_link_multiple[asgi] - ...
FAILED tests/test_headers.py::TestHeaders::test_content_disposition_attachment_header[asgi-Hello World.txt-attachment; filename="Hello World.txt"]
FAILED tests/test_headers.py::TestHeaders::test_append_link_crossorigin[asgi-None-</related/thing>; rel=alternate]
FAILED tests/test_headers.py::TestHeaders::test_vary_header[asgi-vary0-accept-encoding]
FAILED tests/test_headers.py::TestHeaders::test_append_link_crossorigin[asgi-AnOnYmOUs-</related/thing>; rel=alternate; crossorigin]
FAILED tests/test_headers.py::TestHeaders::test_append_link_with_anchor[asgi]
FAILED tests/test_headers.py::TestHeaders::test_unicode_headers_contain_non_ascii[asgi-PATCH]
FAILED tests/test_headers.py::TestHeaders::test_append_link_crossorigin[asgi-use-credentials-</related/thing>; rel=alternate; crossorigin="use-credentials"]
FAILED tests/test_headers.py::TestHeaders::test_override_default_media_type[text/plain; charset=UTF-8-Hello Unicode! \U0001f638-True]
FAILED tests/test_headers.py::TestHeaders::test_unset_header[asgi-True] - Typ...
FAILED tests/test_headers.py::TestHeaders::test_declared_content_length_overriden_by_data_length[asgi]
FAILED tests/test_headers.py::TestHeaders::test_content_disposition_attachment_header[asgi-[foo] @ bar.txt-attachment; filename="[foo] @ bar.txt"]
FAILED tests/test_headers.py::TestHeaders::test_unicode_headers_contain_only_ascii[asgi]
FAILED tests/test_headers.py::TestHeaders::test_append_link_with_link_extension[asgi]
FAILED tests/test_headers.py::TestHeaders::test_response_header_helpers_on_get[asgi]
FAILED tests/test_headers.py::TestHeaders::test_unicode_headers_contain_non_ascii[asgi-CONNECT]
FAILED tests/test_headers.py::TestHeaders::test_content_length[asgi] - TypeEr...
FAILED tests/test_headers.py::TestHeaders::test_response_set_and_get_header[asgi]
FAILED tests/test_headers.py::TestHeaders::test_append_link_with_hreflang[asgi]
FAILED tests/test_headers.py::TestHeaders::test_append_link_crossorigin[asgi-anonymous-</related/thing>; rel=alternate; crossorigin]
FAILED tests/test_headers.py::TestHeaders::test_append_link_single[asgi] - Ty...
FAILED tests/test_headers.py::TestHeaders::test_content_disposition_attachment_header[asgi-\xbd,\xb2\u2044\u2082.txt-attachment; filename=1_2_2_2.txt; filename*=UTF-8''%C2%BD%2C%C2%B2%E2%81%84%E2%82%82.txt]
FAILED tests/test_headers.py::TestHeaders::test_append_link_with_title[asgi]
FAILED tests/test_headers.py::TestHeaders::test_append_link_with_type_hint[asgi]
FAILED tests/test_headers.py::TestHeaders::test_no_content_type[asgi-304 Not Modified]
FAILED tests/test_headers.py::TestHeaders::test_unicode_headers_contain_non_ascii[asgi-POST]
FAILED tests/test_headers.py::TestHeaders::test_expires_header[asgi] - TypeEr...
FAILED tests/test_headers.py::TestHeaders::test_content_type_no_body[asgi] - ...
FAILED tests/test_headers.py::TestHeaders::test_content_disposition_inline_header[asgi-Bold Digit \U0001d7cf.txt-inline; filename=Bold_Digit_1.txt; filename*=UTF-8''Bold%20Digit%20%F0%9D%9F%8F.txt]
FAILED tests/test_headers.py::TestHeaders::test_content_disposition_attachment_header[asgi-Bold Digit \U0001d7cf.txt-attachment; filename=Bold_Digit_1.txt; filename*=UTF-8''Bold%20Digit%20%F0%9D%9F%8F.txt]
FAILED tests/test_headers.py::TestHeaders::test_override_default_media_type[text/plain-Hello ISO-8859-1!-True]
FAILED tests/test_headers.py::TestHeaders::test_set_headers_with_custom_class[asgi]
FAILED tests/test_headers.py::TestHeaders::test_append_link_complex[asgi] - T...
FAILED tests/test_headers.py::TestHeaders::test_custom_content_type[asgi] - T...
FAILED tests/test_headers.py::TestHeaders::test_get_header_as_int[asgi] - Typ...
FAILED tests/test_headers.py::TestHeaders::test_declared_content_length_overriden_by_body_length[asgi]
FAILED tests/test_headers.py::TestHeaders::test_no_content_length[asgi-304 Not Modified]
FAILED tests/test_headers.py::TestHeaders::test_append_link_with_hreflang_multi[asgi]
FAILED tests/test_headers.py::TestHeaders::test_request_latin1_headers[asgi]
FAILED tests/test_headers.py::TestHeaders::test_override_default_media_type_missing_encoding[True]
FAILED tests/test_headers.py::TestHeaders::test_content_disposition_attachment_header[asgi-report.csv-attachment; filename="report.csv"]
FAILED tests/test_headers.py::TestHeaders::test_content_disposition_attachment_header[asgi-[f\xf2\xf3]@b\xe0r,b\xe4z.txt-attachment; filename=_fo_o___ba_r_ba_z.txt; filename*=UTF-8''%5Bf%C3%B2%C3%B3%5D%40b%C3%A0r%2Cb%C3%A4z.txt]
FAILED tests/test_headers.py::TestHeaders::test_vary_star[asgi] - TypeError: ...
FAILED tests/test_headers.py::TestHeaders::test_default_media_type[asgi] - Ty...
FAILED tests/test_headers.py::TestHeaders::test_unset_header[asgi-False] - Ty...
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-HTTPStatus.OK-2001]
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-HTTPStatus.USE_PROXY-305]
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-HTTPStatus.FORBIDDEN-403]
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-HTTPStatus.INTERNAL_SERVER_ERROR-500]
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-702-702] - TypeE...
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-200-200] - TypeE...
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-HTTPStatus.OK-2000]
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-307-307] - TypeE...
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-500-500] - TypeE...
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-HTTPStatus.NOT_IMPLEMENTED-501]
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-200 OK-200] - Ty...
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-HTTPStatus.ACCEPTED-202]
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-HTTPStatus.NOT_FOUND-404]
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-702 Emacs-702]
FAILED tests/test_utils.py::TestFalconTestingUtils::test_default_headers_with_override[asgi]
FAILED tests/test_utils.py::TestFalconTestingUtils::test_path_must_start_with_slash[asgi]
FAILED tests/test_utils.py::TestFalconTestingUtils::test_simulate_remote_addr[asgi-104.24.101.85]
FAILED tests/test_utils.py::TestFalconTestingUtils::test_override_method_with_extras[asgi]
FAILED tests/test_utils.py::TestFalconTestingUtils::test_status[asgi] - TypeE...
FAILED tests/test_utils.py::TestFalconTestingUtils::test_default_headers[asgi]
FAILED tests/test_utils.py::TestFalconTestingUtils::test_simulate_remote_addr[asgi-2606:4700:30::6818:6455]
FAILED tests/test_utils.py::TestFalconTestingUtils::test_query_string[asgi]
FAILED tests/test_utils.py::TestFalconTestingUtils::test_simulate_remote_addr[asgi-127.0.0.1]
FAILED tests/test_utils.py::TestFalconTestingUtils::test_query_string_in_path[asgi]
FAILED tests/test_utils.py::TestFalconTestingUtils::test_simulate_hostname[asgi]
FAILED tests/test_utils.py::TestFalconTestingUtils::test_simulate_remote_addr[asgi-8.8.8.8]
FAILED tests/test_utils.py::TestFalconTestingUtils::test_cached_text_in_result[asgi]
FAILED tests/test_utils.py::TestFalconTestingUtils::test_simulate_remote_addr[asgi-None]
FAILED tests/test_utils.py::TestFalconTestingUtils::test_query_string_no_question[asgi]
FAILED tests/test_after_hooks.py::test_resource_with_uri_fields[asgi-resource0]
FAILED tests/test_after_hooks.py::test_wrapped_resource[asgi-resource0] - Typ...
FAILED tests/test_after_hooks.py::test_resource_with_uri_fields[asgi-resource1]
FAILED tests/test_after_hooks.py::test_wrapped_resource[asgi-resource1] - Typ...
FAILED tests/test_after_hooks.py::test_wrapped_resource_with_hooks_aware_of_resource[asgi]
FAILED tests/test_testing.py::test_client_simulate_aliases[asgi-OPTIONS] - fa...
FAILED tests/test_testing.py::test_client_simulate_aliases[asgi-POST] - falco...
FAILED tests/test_testing.py::test_client_simulate_aliases[asgi-PATCH] - falc...
FAILED tests/test_testing.py::test_client_simulate_aliases[asgi-HEAD] - falco...
FAILED tests/test_testing.py::test_client_simulate_aliases[asgi-LOCK] - falco...
FAILED tests/test_testing.py::test_client_simulate_aliases[asgi-DELETE] - fal...
FAILED tests/test_testing.py::test_client_simulate_aliases[asgi-PUT] - falcon...
FAILED tests/test_testing.py::test_client_simulate_aliases[asgi-GET] - falcon...
FAILED tests/test_media_handlers.py::test_json_err_no_handler[asgi-False] - T...
FAILED tests/test_media_handlers.py::test_json_err_no_handler[asgi-True] - Ty...
FAILED tests/test_uri_templates.py::test_float_converter_non_finite_allowed[asgi--inf]
FAILED tests/test_uri_templates.py::test_same_level_complex_var[asgi-False]
FAILED tests/test_uri_templates.py::test_float_converter_non_finite_allowed[asgi-nan]
FAILED tests/test_uri_templates.py::test_float_converter[asgi-/{id:float}-2.1]
FAILED tests/test_uri_templates.py::test_uuid_converter[asgi-uuid_converter_4]
FAILED tests/test_uri_templates.py::test_adding_suffix_routes[asgi] - TypeErr...
FAILED tests/test_uri_templates.py::test_float_converter[asgi-/{id:float(1)}-2]
FAILED tests/test_uri_templates.py::test_int_converter[asgi-/{id:int(3)}] - T...
FAILED tests/test_uri_templates.py::test_int_converter[asgi-/{id:int(min=123)}]
FAILED tests/test_uri_templates.py::test_uuid_converter[asgi-uuid_converter_3]
FAILED tests/test_uri_templates.py::test_multiple[asgi] - TypeError: The <bou...
FAILED tests/test_uri_templates.py::test_uuid_converter_complex_segment[asgi]
FAILED tests/test_uri_templates.py::test_no_vars[asgi] - TypeError: The <boun...
FAILED tests/test_uri_templates.py::test_float_converter[asgi-/{id:float(1)}-1.9]
FAILED tests/test_uri_templates.py::test_converter_custom[asgi-/{food:spam}-/something-expected0]
FAILED tests/test_uri_templates.py::test_with_and_without_trailing_slash[asgi-True]
FAILED tests/test_uri_templates.py::test_converter_custom[asgi-/{food:spam(")")}:{food_too:spam("()")}-/bacon:eggs-expected1]
FAILED tests/test_uri_templates.py::test_single_path_segment[asgi] - TypeErro...
FAILED tests/test_uri_templates.py::test_int_converter_rejections[asgi-/{id:int(min=124)}]
FAILED tests/test_uri_templates.py::test_single[asgi-widget_id] - TypeError: ...
FAILED tests/test_uri_templates.py::test_float_converter[asgi-/{id:float(min=1.8, max=3)}-1.9]
FAILED tests/test_uri_templates.py::test_special_chars[asgi] - TypeError: The...
FAILED tests/test_uri_templates.py::test_same_level_complex_var[asgi-True] - ...
FAILED tests/test_uri_templates.py::test_uuid_converter[asgi-uuid_converter_1]
FAILED tests/test_uri_templates.py::test_root_path[asgi] - TypeError: The <bo...
FAILED tests/test_uri_templates.py::test_int_converter_rejections[asgi-/{id:int(2)}]
FAILED tests/test_uri_templates.py::test_float_converter[asgi-/{id:float}-1.9]
FAILED tests/test_uri_templates.py::test_float_converter_non_finite_disallowed[asgi]
FAILED tests/test_uri_templates.py::test_float_converter[asgi-/{id:float(min=1.9)}-2]
FAILED tests/test_uri_templates.py::test_single[asgi-id] - TypeError: The <bo...
FAILED tests/test_uri_templates.py::test_float_converter[asgi-/{id:float(min=1.9)}-2.1]
FAILED tests/test_uri_templates.py::test_float_converter_non_finite_allowed[asgi-inf]
FAILED tests/test_uri_templates.py::test_uuid_converter[asgi-uuid_converter_2]
FAILED tests/test_uri_templates.py::test_datetime_converter[asgi-/{start_year:int}-to-{timestamp:dt("%Y-%m-%d")}-/1961-to-1969-07-21-dt_expected1]
FAILED tests/test_uri_templates.py::test_float_converter[asgi-/{id:float(min=1.8, max=3)}-2.1]
FAILED tests/test_uri_templates.py::test_converter_custom[asgi-/({food:spam()}){food_too:spam("()")}-/(bacon)eggs-expected2]
FAILED tests/test_uri_templates.py::test_datetime_converter[asgi-/{start_year:int}-to-{timestamp:dt}-/1961-to-1969-07-21T02:56:00Z-dt_expected0]
FAILED tests/test_uri_templates.py::test_float_converter[asgi-/{id:float(min=1.8, max=3)}-2]
FAILED tests/test_uri_templates.py::test_single_trailing_slash[asgi] - TypeEr...
FAILED tests/test_uri_templates.py::test_single[asgi-id123] - TypeError: The ...
FAILED tests/test_uri_templates.py::test_uuid_converter[asgi-uuid_converter_5]
FAILED tests/test_uri_templates.py::test_int_converter[asgi-/{id:int(min=123, max=123)}]
FAILED tests/test_uri_templates.py::test_int_converter[asgi-/{id:int}] - Type...
FAILED tests/test_uri_templates.py::test_float_converter[asgi-/{id:float}-2]
FAILED tests/test_uri_templates.py::test_with_and_without_trailing_slash[asgi-False]
FAILED tests/test_uri_templates.py::test_int_converter_rejections[asgi-/{id:int(num_digits=3, max=100)}]
FAILED tests/test_uri_templates.py::test_datetime_converter[asgi-/{start_year:int}/{timestamp:dt("%Y-%m-%d %H:%M")}-/1961/1969-07-21 14:30-dt_expected2]
FAILED tests/test_uri_templates.py::test_float_converter[asgi-/{id:float(min=1.9)}-1.9]
FAILED tests/test_uri_templates.py::test_datetime_converter[asgi-/{start_year:int}-to-{timestamp:dt("%Y-%m")}-/1961-to-1969-07-21-None]
FAILED tests/test_uri_templates.py::test_uuid_converter[asgi-uuid_converter_6]
FAILED tests/test_uri_templates.py::test_float_converter[asgi-/{id:float(1)}-2.1]
FAILED tests/test_sinks.py::TestDefaultRouting::test_route_precedence_with_both_id[asgi]
FAILED tests/test_sinks.py::TestDefaultRouting::test_route_precedence[asgi]
FAILED tests/test_sinks.py::TestDefaultRouting::test_with_route[asgi] - TypeE...
FAILED tests/test_sinks.py::TestDefaultRouting::test_route_precedence_with_id[asgi]
FAILED tests/test_sinks.py::TestSinkMethodCompatibility::test_add_sync_sink_with_wrapping[asgi]
FAILED tests/test_error_handlers.py::TestErrorHandler::test_caught_error_async[asgi]
FAILED tests/test_error_handlers.py::TestErrorHandler::test_catch_http_no_route_error[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_order_mw_executed_when_exception_in_resp[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_inner_mw_with_ex_handler_throw_exception[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_inner_mw_throw_exception[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_order_mw_executed_when_exception_in_req[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_independent_middleware_execution_order[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_order_independent_mw_executed_when_exception_in_resp[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_order_mw_executed_when_exception_in_rsrc[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_order_independent_mw_executed_when_exception_in_req[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_legacy_middleware_called_with_correct_args[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_generate_trans_id_and_time_with_request[asgi-True]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_multiple_response_mw_throw_exception[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_outer_mw_with_ex_handler_throw_exception[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_inner_mw_throw_exception_while_processing_resp[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_middleware_execution_order[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_generate_trans_id_and_time_with_request[asgi-False]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_order_independent_mw_executed_when_exception_in_rsrc[asgi]
FAILED tests/test_middleware.py::TestResourceMiddleware::test_can_access_resource_params[asgi-False]
FAILED tests/test_middleware.py::TestResourceMiddleware::test_can_access_resource_params[asgi-True]
FAILED tests/test_middleware.py::TestShortCircuiting::test_process_resource_cached[asgi-True]
FAILED tests/test_middleware.py::TestShortCircuiting::test_process_request_not_cached[asgi]
FAILED tests/test_middleware.py::TestShortCircuiting::test_process_request_cached[asgi-False]
FAILED tests/test_middleware.py::TestShortCircuiting::test_process_resource_cached[asgi-False]
FAILED tests/test_middleware.py::TestShortCircuiting::test_process_request_cached[asgi-True]
FAILED tests/test_middleware.py::TestTransactionIdMiddleware::test_generate_trans_id_with_request[asgi]
FAILED tests/test_middleware.py::TestRemoveBasePathMiddleware::test_base_path_is_removed_before_routing[asgi]
FAILED tests/test_middleware.py::TestCORSMiddlewareWithAnotherMiddleware::test_api_initialization_with_cors_enabled_and_middleware_param[asgi-mw1]
FAILED tests/test_middleware.py::TestCORSMiddlewareWithAnotherMiddleware::test_api_initialization_with_cors_enabled_and_middleware_param[asgi-mw0]
FAILED tests/test_middleware.py::TestCORSMiddlewareWithAnotherMiddleware::test_api_initialization_with_cors_enabled_and_middleware_param[asgi-mw3]
FAILED tests/test_middleware.py::TestCORSMiddlewareWithAnotherMiddleware::test_api_initialization_with_cors_enabled_and_middleware_param[asgi-mw2]
FAILED tests/test_middleware.py::TestErrorHandling::test_http_status_raised_from_error_handler[asgi]
FAILED tests/test_middleware.py::TestErrorHandling::test_error_composed_before_resp_middleware_called[asgi]
FAILED tests/test_middleware.py::TestEmptySignatureMiddleware::test_dont_need_params_in_signature[asgi]
FAILED tests/test_middleware.py::TestRequestTimeMiddleware::test_skip_process_resource[asgi]
FAILED tests/test_middleware.py::TestRequestTimeMiddleware::test_response_middleware_raises_exception[asgi]
FAILED tests/test_middleware.py::TestRequestTimeMiddleware::test_log_get_request[asgi-True]
FAILED tests/test_middleware.py::TestRequestTimeMiddleware::test_log_get_request[asgi-False]
ERROR tests/test_httperror.py::TestHTTPError::test_epic_fail_xml[asgi-text/xml]
ERROR tests/test_httperror.py::TestHTTPError::test_epic_fail_json[asgi] - Typ...
ERROR tests/test_httperror.py::TestHTTPError::test_invalid_param[asgi] - Type...
ERROR tests/test_httperror.py::TestHTTPError::test_forbidden[asgi-application/json]
ERROR tests/test_httperror.py::TestHTTPError::test_no_description_json[asgi]
ERROR tests/test_httperror.py::TestHTTPError::test_405_without_body_with_extra_headers_double_check[asgi]
ERROR tests/test_httperror.py::TestHTTPError::test_414_with_title[asgi] - Typ...
ERROR tests/test_httperror.py::TestHTTPError::test_epic_fail_xml[asgi-application/xml]
ERROR tests/test_httperror.py::TestHTTPError::test_serialize_error_uses_media_handler[asgi]
ERROR tests/test_httperror.py::TestHTTPError::test_414[asgi] - TypeError: The...
ERROR tests/test_httperror.py::TestHTTPError::test_temporary_413_datetime_retry_after[asgi]
ERROR tests/test_httperror.py::TestHTTPError::test_missing_header[asgi] - Typ...
ERROR tests/test_httperror.py::TestHTTPError::test_429_datetime[asgi] - TypeE...
ERROR tests/test_httperror.py::TestHTTPError::test_title_default_message_if_none[asgi-503 Service Unavailable-bytes]
ERROR tests/test_httperror.py::TestHTTPError::test_misc[asgi] - TypeError: Th...
ERROR tests/test_httperror.py::TestHTTPError::test_custom_error_serializer_optional_representation[asgi-BREW-/notfound-400]
ERROR tests/test_httperror.py::TestHTTPError::test_missing_param[asgi] - Type...
ERROR tests/test_httperror.py::TestHTTPError::test_413[asgi] - TypeError: The...
ERROR tests/test_httperror.py::TestHTTPError::test_429_no_retry_after[asgi]
ERROR tests/test_httperror.py::TestHTTPError::test_405_with_body[asgi] - Type...
ERROR tests/test_httperror.py::TestHTTPError::test_410_with_body[asgi] - Type...
ERROR tests/test_httperror.py::TestHTTPError::test_custom_error_serializer_optional_representation[asgi-REPORT-/404-405]
ERROR tests/test_httperror.py::TestHTTPError::test_410_without_body[asgi] - T...
ERROR tests/test_httperror.py::TestHTTPError::test_client_does_not_accept_json_or_xml[asgi]
ERROR tests/test_httperror.py::TestHTTPError::test_custom_error_serializer_optional_representation[asgi-GET-/404-404]
ERROR tests/test_httperror.py::TestHTTPError::test_unicode_xml[asgi] - TypeEr...
ERROR tests/test_httperror.py::TestHTTPError::test_client_does_not_accept_anything[asgi]
ERROR tests/test_httperror.py::TestHTTPError::test_title_default_message_if_none[asgi-503-int]
ERROR tests/test_httperror.py::TestHTTPError::test_404_with_body[asgi] - Type...
ERROR tests/test_httperror.py::TestHTTPError::test_forbidden[asgi-application/vnd.company.system.project.resource+json;v=1.1]
ERROR tests/test_httperror.py::TestHTTPError::test_503_datetime_retry_after[asgi]
ERROR tests/test_httperror.py::TestHTTPError::test_title_default_message_if_none[asgi-503 Service Unavailable-str]
ERROR tests/test_httperror.py::TestHTTPError::test_404_without_body[asgi] - T...
ERROR tests/test_httperror.py::TestHTTPError::test_epic_fail_xml[asgi-application/atom+xml]
ERROR tests/test_httperror.py::TestHTTPError::test_custom_error_serializer_optional_representation[asgi-GET-/notfound-404]
ERROR tests/test_httperror.py::TestHTTPError::test_503_integer_retry_after[asgi]
ERROR tests/test_httperror.py::TestHTTPError::test_base_class[asgi] - TypeErr...
ERROR tests/test_httperror.py::TestHTTPError::test_414_with_description[asgi]
ERROR tests/test_httperror.py::TestHTTPError::test_429[asgi] - TypeError: The...
ERROR tests/test_httperror.py::TestHTTPError::test_title_default_message_if_none[asgi-503-HTTPStatus]
ERROR tests/test_httperror.py::TestHTTPError::test_serialize_no_json_media_handler[asgi]
ERROR tests/test_httperror.py::TestHTTPError::test_414_with_custom_kwargs[asgi]
ERROR tests/test_httperror.py::TestHTTPError::test_unicode_json[asgi] - TypeE...
ERROR tests/test_httperror.py::TestHTTPError::test_custom_error_serializer[asgi]
ERROR tests/test_httperror.py::TestHTTPError::test_title_default_message_if_none[asgi-503-bytes]
ERROR tests/test_httperror.py::TestHTTPError::test_custom_serializer_no_representation[asgi]
ERROR tests/test_httperror.py::TestHTTPError::test_no_description_xml[asgi]
ERROR tests/test_httperror.py::TestHTTPError::test_title_default_message_if_none[asgi-503-str]
ERROR tests/test_httperror.py::TestHTTPError::test_411[asgi] - TypeError: The...
ERROR tests/test_httperror.py::TestHTTPError::test_invalid_header[asgi] - Typ...
ERROR tests/test_httperror.py::TestHTTPError::test_forbidden[asgi-application/json-patch+json]
ERROR tests/test_httperror.py::TestHTTPError::test_epic_fail_xml[asgi-application/vnd.company.system.project.resource+xml;v=1.1]
ERROR tests/test_httperror.py::TestHTTPError::test_405_without_body_with_extra_headers[asgi]
ERROR tests/test_httperror.py::TestHTTPError::test_401[asgi] - TypeError: The...
ERROR tests/test_httperror.py::TestHTTPError::test_405_without_body[asgi] - T...
ERROR tests/test_httperror.py::TestHTTPError::test_temporary_413_integer_retry_after[asgi]
ERROR tests/test_httperror.py::TestHTTPError::test_416[asgi] - TypeError: The...
ERROR tests/test_httpstatus.py::TestHTTPStatusWithMiddleware::test_raise_status_in_process_resource[True]
ERROR tests/test_httpstatus.py::TestHTTPStatusWithMiddleware::test_raise_status_in_process_request[True]
ERROR tests/test_httpstatus.py::TestHTTPStatusWithMiddleware::test_raise_status_runs_process_response[True]
ERROR tests/test_httpstatus.py::TestNoBodyWithStatus::test_body_is_set[asgi]
ERROR tests/test_httpstatus.py::TestNoBodyWithStatus::test_media_is_set[asgi]
ERROR tests/test_httpstatus.py::TestNoBodyWithStatus::test_data_is_set[asgi]
ERROR tests/test_httpstatus.py::TestHTTPStatus::test_raise_status_empty_body[True]
ERROR tests/test_httpstatus.py::TestHTTPStatus::test_raise_status_in_before_hook[True]
ERROR tests/test_httpstatus.py::TestHTTPStatus::test_raise_status_runs_after_hooks[True]
ERROR tests/test_httpstatus.py::TestHTTPStatus::test_raise_status_survives_after_hooks[True]
ERROR tests/test_httpstatus.py::TestHTTPStatus::test_raise_status_in_responder[True]
ERROR tests/test_http_method_routing.py::TestHttpMethodRouting::test_meta_and_others_disallowed[asgi-SETECASTRONOMY]
ERROR tests/test_http_method_routing.py::TestHttpMethodRouting::test_methods_not_allowed_simple[asgi]
ERROR tests/test_http_method_routing.py::TestHttpMethodRouting::test_methods_not_allowed_complex[asgi]
ERROR tests/test_http_method_routing.py::TestHttpMethodRouting::test_put[asgi]
ERROR tests/test_http_method_routing.py::TestHttpMethodRouting::test_report[asgi]
ERROR tests/test_http_method_routing.py::TestHttpMethodRouting::test_method_not_allowed_with_param[asgi]
ERROR tests/test_http_method_routing.py::TestHttpMethodRouting::test_misc[asgi]
ERROR tests/test_http_method_routing.py::TestHttpMethodRouting::test_post_not_allowed[asgi]
ERROR tests/test_http_method_routing.py::TestHttpMethodRouting::test_default_on_options[asgi]
ERROR tests/test_http_method_routing.py::TestHttpMethodRouting::test_on_options[asgi]
ERROR tests/test_http_method_routing.py::TestHttpMethodRouting::test_get[asgi]
ERROR tests/test_http_method_routing.py::TestHttpMethodRouting::test_meta_and_others_disallowed[asgi-WEBSOCKET]
ERROR tests/test_before_hooks.py::test_field_validator[asgi-resource2] - Type...
ERROR tests/test_before_hooks.py::test_field_validator[asgi-resource1] - Type...
ERROR tests/test_before_hooks.py::test_multiple_resource_hooks[asgi-resource0]
ERROR tests/test_before_hooks.py::test_piggybacking_resource_post_item[True]
ERROR tests/test_before_hooks.py::test_input_validator_inherited[asgi] - Type...
ERROR tests/test_before_hooks.py::test_field_validator[asgi-resource0] - Type...
ERROR tests/test_before_hooks.py::test_multiple_resource_hooks[asgi-resource1]
ERROR tests/test_before_hooks.py::test_input_validator[asgi] - TypeError: The...
ERROR tests/test_before_hooks.py::test_piggybacking_resource_post_and_delete[True]
ERROR tests/test_before_hooks.py::test_wrapped_resource_with_hooks_aware_of_resource[asgi]
ERROR tests/test_before_hooks.py::test_param_validator[asgi] - TypeError: The...
ERROR tests/test_before_hooks.py::test_wrapped_resource[asgi] - TypeError: Th...
= 224 failed, 3166 passed, 180 skipped, 3 warnings, 92 errors in 282.77s (0:04:42) =
