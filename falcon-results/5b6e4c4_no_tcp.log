============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.2.2, pluggy-1.3.0
Using --randomly-seed=1705829641
PyQt5 5.15.10 -- Qt runtime 5.15.2 -- Qt compiled 5.15.2
rootdir: /home/kaiyaok2/PythonProjects/falcon, configfile: pyproject.toml, testpaths: tests
plugins: hypothesis-6.81.1, cov-4.1.0, randomly-3.1.0, typeguard-4.1.5, timeout-1.4.2, qt-4.3.1, nbval-0.10.0, mock-3.12.0, tcp-0.1.1, textual-snapshot-0.4.0, asyncio-0.21.1, xdist-3.2.1, cookies-0.7.0, instafail-0.5.0, syrupy-4.6.0, anyio-3.7.1
asyncio: mode=strict
collected 3667 items

tests/test_request_media.py .
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 0.14261555671691895s cumulative, 0.14261555671691895s individual

.
current test PASSED/SKIPPED -- test_complete_consumption in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 0.4177665710449219s cumulative, 0.27515101432800293s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 0.5733542442321777s cumulative, 0.15558767318725586s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 0.706995964050293s cumulative, 0.13364171981811523s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 0.8482794761657715s cumulative, 0.14128351211547852s individual

.
current test PASSED/SKIPPED -- test_fallback_does_not_override_media_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 0.9746320247650146s cumulative, 0.12635254859924316s individual

.
current test PASSED/SKIPPED -- test_fallback_not_for_error_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1.0909786224365234s cumulative, 0.11634659767150879s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1.2655603885650635s cumulative, 0.17458176612854004s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1.406816005706787s cumulative, 0.14125561714172363s individual

.
current test PASSED/SKIPPED -- test_repeated_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1.5550789833068848s cumulative, 0.14826297760009766s individual

.
current test PASSED/SKIPPED -- test_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1.6887233257293701s cumulative, 0.13364434242248535s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1.8244233131408691s cumulative, 0.13569998741149902s individual

.
current test PASSED/SKIPPED -- test_fallback_not_for_error_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1.9527390003204346s cumulative, 0.12831568717956543s individual

.
current test PASSED/SKIPPED -- test_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 2.0709645748138428s cumulative, 0.1182255744934082s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 2.2257275581359863s cumulative, 0.15476298332214355s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 2.339604616165161s cumulative, 0.1138770580291748s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 2.432154417037964s cumulative, 0.09254980087280273s individual

.
current test PASSED/SKIPPED -- test_fallback_not_for_error_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 2.623903751373291s cumulative, 0.19174933433532715s individual

.
current test PASSED/SKIPPED -- test_fallback in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 2.8410441875457764s cumulative, 0.21714043617248535s individual

.
current test PASSED/SKIPPED -- test_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 3.000824213027954s cumulative, 0.15978002548217773s individual

.
current test PASSED/SKIPPED -- test_repeated_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 3.226565361022949s cumulative, 0.22574114799499512s individual

.
current test PASSED/SKIPPED -- test_fallback_not_for_error_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 3.417999744415283s cumulative, 0.19143438339233398s individual

.
current test PASSED/SKIPPED -- test_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 3.627885103225708s cumulative, 0.2098853588104248s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 3.8172075748443604s cumulative, 0.18932247161865234s individual

.
current test PASSED/SKIPPED -- test_invalid_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 3.935520648956299s cumulative, 0.11831307411193848s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 3.986340284347534s cumulative, 0.05081963539123535s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 4.089022397994995s cumulative, 0.10268211364746094s individual

.
current test PASSED/SKIPPED -- test_fallback_does_not_override_media_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 4.115257740020752s cumulative, 0.026235342025756836s individual

.
current test PASSED/SKIPPED -- test_error_after_first_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 4.135352373123169s cumulative, 0.020094633102416992s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 4.1519389152526855s cumulative, 0.0165865421295166s individual

.
current test PASSED/SKIPPED -- test_invalid_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 4.184445142745972s cumulative, 0.03250622749328613s individual

.
current test PASSED/SKIPPED -- test_null_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 4.212975978851318s cumulative, 0.02853083610534668s individual

.
current test PASSED/SKIPPED -- test_complete_consumption in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 4.2255470752716064s cumulative, 0.012571096420288086s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 4.237272262573242s cumulative, 0.011725187301635742s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 4.248513221740723s cumulative, 0.011240959167480469s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 4.264101505279541s cumulative, 0.01558828353881836s individual

.
current test PASSED/SKIPPED -- test_invalid_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 4.271194934844971s cumulative, 0.0070934295654296875s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 4.278685092926025s cumulative, 0.0074901580810546875s individual

.
current test PASSED/SKIPPED -- test_fallback_not_for_error_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 4.289013147354126s cumulative, 0.010328054428100586s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 4.339322566986084s cumulative, 0.05030941963195801s individual

.
current test PASSED/SKIPPED -- test_unknown_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 4.352111101150513s cumulative, 0.012788534164428711s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 4.360208988189697s cumulative, 0.00809788703918457s individual

.
current test PASSED/SKIPPED -- test_invalid_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 4.374619483947754s cumulative, 0.01441049575805664s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 4.383127450942993s cumulative, 0.008507966995239258s individual

.
current test PASSED/SKIPPED -- test_error_after_first_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 4.391010046005249s cumulative, 0.00788259506225586s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 4.401249408721924s cumulative, 0.010239362716674805s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 4.4098920822143555s cumulative, 0.00864267349243164s individual

.
current test PASSED/SKIPPED -- test_unknown_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 4.417227029800415s cumulative, 0.00733494758605957s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 4.425279140472412s cumulative, 0.00805211067199707s individual

.
current test PASSED/SKIPPED -- test_fallback_not_for_error_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 4.432470083236694s cumulative, 0.0071909427642822266s individual

.
current test PASSED/SKIPPED -- test_fallback_not_for_error_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 4.440360069274902s cumulative, 0.007889986038208008s individual

.
current test PASSED/SKIPPED -- test_fallback_not_for_error_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 4.447749137878418s cumulative, 0.007389068603515625s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 4.455281019210815s cumulative, 0.007531881332397461s individual

.
current test PASSED/SKIPPED -- test_repeated_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 4.46358847618103s cumulative, 0.008307456970214844s individual

.
current test PASSED/SKIPPED -- test_null_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 4.471392631530762s cumulative, 0.007804155349731445s individual

.
current test PASSED/SKIPPED -- test_repeated_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 4.478379249572754s cumulative, 0.0069866180419921875s individual

.
current test PASSED/SKIPPED -- test_fallback in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 4.485658168792725s cumulative, 0.007278919219970703s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 4.493494033813477s cumulative, 0.007835865020751953s individual


tests/test_cookies.py .
current test PASSED/SKIPPED -- test_strict_same_site_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 4.51677131652832s cumulative, 0.02327728271484375s individual

.
current test PASSED/SKIPPED -- test_cookie_max_age_float_and_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 4.534478664398193s cumulative, 0.017707347869873047s individual

.
current test PASSED/SKIPPED -- test_cookies_setable in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 4.544116973876953s cumulative, 0.009638309478759766s individual

.
current test PASSED/SKIPPED -- test_invalid_same_site_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 4.549168586730957s cumulative, 0.005051612854003906s individual

.
current test PASSED/SKIPPED -- test_none_same_site_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 4.5573999881744385s cumulative, 0.008231401443481445s individual

.
current test PASSED/SKIPPED -- test_response_disable_secure_globally in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 4.572659969329834s cumulative, 0.015259981155395508s individual

.
current test PASSED/SKIPPED -- test_lax_same_site_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 4.582460403442383s cumulative, 0.009800434112548828s individual

.
current test PASSED/SKIPPED -- test_same_site_value_case_insensitive in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 4.586391448974609s cumulative, 0.0039310455322265625s individual

.
current test PASSED/SKIPPED -- test_cookie_max_age_float_and_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 4.5975282192230225s cumulative, 0.011136770248413086s individual

.
current test PASSED/SKIPPED -- test_cookie_timezone in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 4.603532791137695s cumulative, 0.0060045719146728516s individual

.
current test PASSED/SKIPPED -- test_same_site_value_case_insensitive in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 4.60751748085022s cumulative, 0.003984689712524414s individual

.
current test PASSED/SKIPPED -- test_cookie_expires_naive in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 4.623018264770508s cumulative, 0.015500783920288086s individual

.
current test PASSED/SKIPPED -- test_duplicate_cookie in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 4.627096652984619s cumulative, 0.004078388214111328s individual

.
current test PASSED/SKIPPED -- test_non_ascii_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 4.630978584289551s cumulative, 0.0038819313049316406s individual

.
current test PASSED/SKIPPED -- test_response_unset_cookie in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 4.638373613357544s cumulative, 0.007395029067993164s individual

.
current test PASSED/SKIPPED -- test_cookies_setable in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 4.644495248794556s cumulative, 0.006121635437011719s individual

.
current test PASSED/SKIPPED -- test_cookie_expires_aware in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 4.679163694381714s cumulative, 0.0346684455871582s individual

.
current test PASSED/SKIPPED -- test_same_site_value_case_insensitive in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 4.71454930305481s cumulative, 0.0353856086730957s individual

.
current test PASSED/SKIPPED -- test_invalid_cookies_are_ignored in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 4.872035980224609s cumulative, 0.1574866771697998s individual

.
current test PASSED/SKIPPED -- test_non_ascii_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 4.904468536376953s cumulative, 0.03243255615234375s individual

.
current test PASSED/SKIPPED -- test_response_base_case in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 4.962496757507324s cumulative, 0.058028221130371094s individual

.
current test PASSED/SKIPPED -- test_cookie_max_age_float_and_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 5.017782688140869s cumulative, 0.05528593063354492s individual

.
current test PASSED/SKIPPED -- test_response_base_case in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 5.089022874832153s cumulative, 0.07124018669128418s individual

.
current test PASSED/SKIPPED -- test_same_site_empty_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 5.140046834945679s cumulative, 0.05102396011352539s individual

.
current test PASSED/SKIPPED -- test_strict_same_site_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 5.189278602600098s cumulative, 0.049231767654418945s individual

.
current test PASSED/SKIPPED -- test_same_site_value_case_insensitive in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 5.2210869789123535s cumulative, 0.03180837631225586s individual

.
current test PASSED/SKIPPED -- test_same_site_empty_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 5.292230129241943s cumulative, 0.07114315032958984s individual

.
current test PASSED/SKIPPED -- test_non_ascii_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 5.320903539657593s cumulative, 0.028673410415649414s individual

.
current test PASSED/SKIPPED -- test_cookie_expires_aware in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 5.421664476394653s cumulative, 0.10076093673706055s individual

.
current test PASSED/SKIPPED -- test_response_complex_case in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 5.5117175579071045s cumulative, 0.09005308151245117s individual

.
current test PASSED/SKIPPED -- test_non_ascii_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 5.5489726066589355s cumulative, 0.037255048751831055s individual

.
current test PASSED/SKIPPED -- test_cookie_header_is_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 5.575195550918579s cumulative, 0.026222944259643555s individual

.
current test PASSED/SKIPPED -- test_lax_same_site_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 5.64133358001709s cumulative, 0.06613802909851074s individual

.
current test PASSED/SKIPPED -- test_unset_cookies_samesite in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 5.760960340499878s cumulative, 0.11962676048278809s individual

.
current test PASSED/SKIPPED -- test_response_disable_secure_globally in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 5.838770151138306s cumulative, 0.07780981063842773s individual

.
current test PASSED/SKIPPED -- test_invalid_same_site_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 5.876424074172974s cumulative, 0.03765392303466797s individual

.
current test PASSED/SKIPPED -- test_unset_cookies in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 5.963138103485107s cumulative, 0.08671402931213379s individual

.
current test PASSED/SKIPPED -- test_cookie_max_age_float_and_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 6.049225807189941s cumulative, 0.08608770370483398s individual

.
current test PASSED/SKIPPED -- test_none_same_site_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 6.136773347854614s cumulative, 0.08754754066467285s individual

.
current test PASSED/SKIPPED -- test_invalid_same_site_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 6.170096158981323s cumulative, 0.033322811126708984s individual

.
current test PASSED/SKIPPED -- test_unset_cookies in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 6.254229307174683s cumulative, 0.08413314819335938s individual

.
current test PASSED/SKIPPED -- test_same_site_value_case_insensitive in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 6.284025192260742s cumulative, 0.02979588508605957s individual

.
current test PASSED/SKIPPED -- test_cookie_timezone in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 6.320406436920166s cumulative, 0.03638124465942383s individual

.
current test PASSED/SKIPPED -- test_non_ascii_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 6.349533796310425s cumulative, 0.02912735939025879s individual

.
current test PASSED/SKIPPED -- test_unicode_inside_ascii_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 6.3729870319366455s cumulative, 0.023453235626220703s individual

.
current test PASSED/SKIPPED -- test_non_ascii_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 6.398164510726929s cumulative, 0.025177478790283203s individual

.
current test PASSED/SKIPPED -- test_cookie_expires_naive in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 6.475427627563477s cumulative, 0.07726311683654785s individual

.
current test PASSED/SKIPPED -- test_response_complex_case in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 6.538554430007935s cumulative, 0.06312680244445801s individual

.
current test PASSED/SKIPPED -- test_request_cookie_parsing in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 6.563331842422485s cumulative, 0.02477741241455078s individual

.
current test PASSED/SKIPPED -- test_unset_cookies_samesite in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 6.633527994155884s cumulative, 0.07019615173339844s individual

.
current test PASSED/SKIPPED -- test_same_site_value_case_insensitive in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 6.658118963241577s cumulative, 0.02459096908569336s individual

.
current test PASSED/SKIPPED -- test_response_unset_cookie in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 6.699321508407593s cumulative, 0.041202545166015625s individual


tests/test_uri_converters.py .
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 6.7202582359313965s cumulative, 0.02093672752380371s individual

.
current test PASSED/SKIPPED -- test_datetime_converter_default_format in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 6.752751350402832s cumulative, 0.03249311447143555s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 6.772237300872803s cumulative, 0.019485950469970703s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 6.796371698379517s cumulative, 0.024134397506713867s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 6.815298795700073s cumulative, 0.01892709732055664s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 6.83656644821167s cumulative, 0.02126765251159668s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 6.861428260803223s cumulative, 0.024861812591552734s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 6.881669282913208s cumulative, 0.02024102210998535s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 6.904726028442383s cumulative, 0.023056745529174805s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 6.926636695861816s cumulative, 0.021910667419433594s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 6.9504547119140625s cumulative, 0.023818016052246094s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 6.974616289138794s cumulative, 0.024161577224731445s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 6.993805646896362s cumulative, 0.01918935775756836s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 7.026776075363159s cumulative, 0.032970428466796875s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 7.048182964324951s cumulative, 0.021406888961791992s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 7.071826219558716s cumulative, 0.02364325523376465s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 7.094905614852905s cumulative, 0.023079395294189453s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 7.120085716247559s cumulative, 0.02518010139465332s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 7.141470432281494s cumulative, 0.021384716033935547s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 7.156250715255737s cumulative, 0.014780282974243164s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 7.171858072280884s cumulative, 0.015607357025146484s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 7.193926811218262s cumulative, 0.02206873893737793s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 7.223766803741455s cumulative, 0.02983999252319336s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 7.244507312774658s cumulative, 0.020740509033203125s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 7.258619546890259s cumulative, 0.014112234115600586s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 7.280784606933594s cumulative, 0.02216506004333496s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 7.292043209075928s cumulative, 0.011258602142333984s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 7.3092124462127686s cumulative, 0.01716923713684082s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 7.319265365600586s cumulative, 0.010052919387817383s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 7.324693441390991s cumulative, 0.0054280757904052734s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 7.340087890625s cumulative, 0.015394449234008789s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 7.366309404373169s cumulative, 0.026221513748168945s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 7.393159627914429s cumulative, 0.026850223541259766s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 7.421665191650391s cumulative, 0.028505563735961914s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 7.443264484405518s cumulative, 0.021599292755126953s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 7.474697113037109s cumulative, 0.0314326286315918s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 7.4827189445495605s cumulative, 0.008021831512451172s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 7.487507581710815s cumulative, 0.004788637161254883s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 7.4913413524627686s cumulative, 0.003833770751953125s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 7.51324987411499s cumulative, 0.02190852165222168s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 7.5206873416900635s cumulative, 0.007437467575073242s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 7.524684190750122s cumulative, 0.003996849060058594s individual

.
current test PASSED/SKIPPED -- test_int_converter_invalid_config in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 7.62509822845459s cumulative, 0.10041403770446777s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 7.8019773960113525s cumulative, 0.1768791675567627s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 7.97772741317749s cumulative, 0.1757500171661377s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 8.130324602127075s cumulative, 0.15259718894958496s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 8.286895513534546s cumulative, 0.1565709114074707s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 8.435998916625977s cumulative, 0.14910340309143066s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 8.582918405532837s cumulative, 0.14691948890686035s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 8.730952739715576s cumulative, 0.14803433418273926s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 8.838510751724243s cumulative, 0.10755801200866699s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 8.852701902389526s cumulative, 0.014191150665283203s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 8.85994291305542s cumulative, 0.007241010665893555s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 8.866589546203613s cumulative, 0.006646633148193359s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 8.87485957145691s cumulative, 0.008270025253295898s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 8.881300210952759s cumulative, 0.006440639495849609s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 8.888267993927002s cumulative, 0.006967782974243164s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 8.899857521057129s cumulative, 0.011589527130126953s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 8.90480089187622s cumulative, 0.004943370819091797s individual

.
current test PASSED/SKIPPED -- test_int_converter_invalid_config in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 8.909491062164307s cumulative, 0.0046901702880859375s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 8.91399621963501s cumulative, 0.004505157470703125s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 8.918363571166992s cumulative, 0.004367351531982422s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 8.92297887802124s cumulative, 0.004615306854248047s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 8.947440385818481s cumulative, 0.02446150779724121s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 8.952916860580444s cumulative, 0.005476474761962891s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 8.959239959716797s cumulative, 0.006323099136352539s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 8.963367700576782s cumulative, 0.0041277408599853516s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 8.96768569946289s cumulative, 0.0043179988861083984s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 8.972081661224365s cumulative, 0.004395961761474609s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 8.97644853591919s cumulative, 0.004366874694824219s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 8.98005223274231s cumulative, 0.003603696823120117s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 8.983801364898682s cumulative, 0.0037491321563720703s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 8.987728118896484s cumulative, 0.003926753997802734s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 8.99226450920105s cumulative, 0.00453639030456543s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 8.99622631072998s cumulative, 0.003961801528930664s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 9.000232458114624s cumulative, 0.004006147384643555s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 9.004541397094727s cumulative, 0.004308938980102539s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 9.008485794067383s cumulative, 0.00394439697265625s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 9.012519359588623s cumulative, 0.004033565521240234s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 9.01761269569397s cumulative, 0.00509333610534668s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 9.021928548812866s cumulative, 0.004315853118896484s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 9.025972127914429s cumulative, 0.0040435791015625s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 9.029129981994629s cumulative, 0.0031578540802001953s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 9.032875537872314s cumulative, 0.003745555877685547s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 9.037189722061157s cumulative, 0.0043141841888427734s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 9.0405912399292s cumulative, 0.003401517868041992s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 9.044808149337769s cumulative, 0.004216909408569336s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 9.048543214797974s cumulative, 0.003735065460205078s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 9.055208683013916s cumulative, 0.006665468215942383s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 9.060324668884277s cumulative, 0.005115985870361328s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 9.06401515007019s cumulative, 0.003690481185913086s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 9.067699670791626s cumulative, 0.003684520721435547s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 9.071292638778687s cumulative, 0.003592967987060547s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 9.07563853263855s cumulative, 0.004345893859863281s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 9.081649541854858s cumulative, 0.006011009216308594s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 9.085863828659058s cumulative, 0.004214286804199219s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 9.089945316314697s cumulative, 0.0040814876556396484s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 9.09385371208191s cumulative, 0.003908395767211914s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 9.098008871078491s cumulative, 0.004155158996582031s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 9.101985931396484s cumulative, 0.003977060317993164s individual

.
current test PASSED/SKIPPED -- test_int_converter_invalid_config in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 9.105805158615112s cumulative, 0.0038192272186279297s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 9.110423564910889s cumulative, 0.004618406295776367s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 9.11468243598938s cumulative, 0.004258871078491211s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 9.11891508102417s cumulative, 0.004232645034790039s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 9.122828722000122s cumulative, 0.0039136409759521484s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 9.127389669418335s cumulative, 0.004560947418212891s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 9.13058090209961s cumulative, 0.003191232681274414s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 9.134832382202148s cumulative, 0.0042514801025390625s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 9.138889074325562s cumulative, 0.004056692123413086s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 9.1431143283844s cumulative, 0.004225254058837891s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 9.146497249603271s cumulative, 0.0033829212188720703s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 9.149970293045044s cumulative, 0.003473043441772461s individual


tests/test_things_example.py .
current test PASSED/SKIPPED -- test_things_resource_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_things_example.py: 9.157857418060303s cumulative, 0.007887125015258789s individual


tests/test_alias.py .
current test PASSED/SKIPPED -- test_cookies in /home/kaiyaok2/PythonProjects/falcon/tests/test_alias.py: 9.176037549972534s cumulative, 0.018180131912231445s individual

.
current test PASSED/SKIPPED -- test_alias_equals_to_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_alias.py: 9.185058832168579s cumulative, 0.009021282196044922s individual


tests/test_request_forwarded.py .
current test PASSED/SKIPPED -- test_forwarded_host in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 9.190074682235718s cumulative, 0.005015850067138672s individual

.
current test PASSED/SKIPPED -- test_escape_malformed_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 9.195520401000977s cumulative, 0.005445718765258789s individual

.
current test PASSED/SKIPPED -- test_forwarded_multiple_params in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 9.200567483901978s cumulative, 0.0050470829010009766s individual

.
current test PASSED/SKIPPED -- test_forwarded_multiple_params in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 9.20765209197998s cumulative, 0.00708460807800293s individual

.
current test PASSED/SKIPPED -- test_escape_malformed_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 9.211795330047607s cumulative, 0.004143238067626953s individual

.
current test PASSED/SKIPPED -- test_escape_malformed_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 9.215315341949463s cumulative, 0.0035200119018554688s individual

.
current test PASSED/SKIPPED -- test_no_forwarded_headers_with_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 9.218712329864502s cumulative, 0.0033969879150390625s individual

.
current test PASSED/SKIPPED -- test_escape_malformed_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 9.22514271736145s cumulative, 0.006430387496948242s individual

.
current test PASSED/SKIPPED -- test_x_forwarded_proto in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 9.229955196380615s cumulative, 0.004812479019165039s individual

.
current test PASSED/SKIPPED -- test_forwarded_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 9.238640069961548s cumulative, 0.008684873580932617s individual

.
current test PASSED/SKIPPED -- test_escape_malformed_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 9.273144721984863s cumulative, 0.03450465202331543s individual

.
current test PASSED/SKIPPED -- test_escape_malformed_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 9.31046748161316s cumulative, 0.0373227596282959s individual

.
current test PASSED/SKIPPED -- test_x_forwarded_proto in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 9.34431004524231s cumulative, 0.03384256362915039s individual

.
current test PASSED/SKIPPED -- test_no_forwarded_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 9.376270532608032s cumulative, 0.031960487365722656s individual

.
current test PASSED/SKIPPED -- test_x_forwarded_host in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 9.410121440887451s cumulative, 0.033850908279418945s individual

.
current test PASSED/SKIPPED -- test_escape_malformed_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 9.446372747421265s cumulative, 0.03625130653381348s individual

.
current test PASSED/SKIPPED -- test_no_forwarded_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 9.491313934326172s cumulative, 0.04494118690490723s individual

.
current test PASSED/SKIPPED -- test_forwarded_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 9.526010036468506s cumulative, 0.034696102142333984s individual

.
current test PASSED/SKIPPED -- test_forwarded_quote_escaping in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 9.556867122650146s cumulative, 0.030857086181640625s individual

.
current test PASSED/SKIPPED -- test_forwarded_host in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 9.589995622634888s cumulative, 0.03312849998474121s individual

.
current test PASSED/SKIPPED -- test_forwarded_missing_first_hop_host in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 9.619898557662964s cumulative, 0.029902935028076172s individual

.
current test PASSED/SKIPPED -- test_escape_malformed_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 9.650022745132446s cumulative, 0.030124187469482422s individual

.
current test PASSED/SKIPPED -- test_escape_malformed_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 9.685459613800049s cumulative, 0.03543686866760254s individual

.
current test PASSED/SKIPPED -- test_x_forwarded_host_with_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 9.71755051612854s cumulative, 0.03209090232849121s individual

.
current test PASSED/SKIPPED -- test_forwarded_quote_escaping in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 9.751200675964355s cumulative, 0.03365015983581543s individual

.
current test PASSED/SKIPPED -- test_no_forwarded_headers_with_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 9.784565925598145s cumulative, 0.03336524963378906s individual

.
current test PASSED/SKIPPED -- test_x_forwarded_host_with_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 9.817718267440796s cumulative, 0.03315234184265137s individual

.
current test PASSED/SKIPPED -- test_x_forwarded_host in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 9.854019165039062s cumulative, 0.0363008975982666s individual

.
current test PASSED/SKIPPED -- test_escape_malformed_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 9.892096757888794s cumulative, 0.038077592849731445s individual

.
current test PASSED/SKIPPED -- test_forwarded_missing_first_hop_host in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 9.931302785873413s cumulative, 0.03920602798461914s individual


tests/test_hello.py .
current test PASSED/SKIPPED -- test_root_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 9.992713689804077s cumulative, 0.06141090393066406s individual

.
current test PASSED/SKIPPED -- test_filelike in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 10.06043291091919s cumulative, 0.0677192211151123s individual

.
current test PASSED/SKIPPED -- test_filelike_closing in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 10.121717929840088s cumulative, 0.06128501892089844s individual

.
current test PASSED/SKIPPED -- test_no_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 10.176571607589722s cumulative, 0.05485367774963379s individual

.
current test PASSED/SKIPPED -- test_status_not_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 10.239989519119263s cumulative, 0.06341791152954102s individual

.
current test PASSED/SKIPPED -- test_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 10.3056800365448s cumulative, 0.06569051742553711s individual

.
current test PASSED/SKIPPED -- test_filelike_closing in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 10.372613191604614s cumulative, 0.06693315505981445s individual

.
current test PASSED/SKIPPED -- test_no_body_on_head in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 10.435098648071289s cumulative, 0.062485456466674805s individual

.
current test PASSED/SKIPPED -- test_filelike_using_helper in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 10.496524810791016s cumulative, 0.06142616271972656s individual

.
current test PASSED/SKIPPED -- test_stream_chunked in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 10.564846515655518s cumulative, 0.06832170486450195s individual

.
current test PASSED/SKIPPED -- test_env_headers_list_of_tuples in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 10.592257738113403s cumulative, 0.027411222457885742s individual

.
current test PASSED/SKIPPED -- test_stream_known_len in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 10.648105144500732s cumulative, 0.0558474063873291s individual

.
current test PASSED/SKIPPED -- test_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 10.706439971923828s cumulative, 0.0583348274230957s individual

.
current test PASSED/SKIPPED -- test_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 10.764883756637573s cumulative, 0.05844378471374512s individual


tests/asgi/test_asgi_helpers.py .
current test PASSED/SKIPPED -- test_intricate_app in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_helpers.py: 10.79433822631836s cumulative, 0.029454469680786133s individual


tests/asgi/test_hello_asgi.py .
current test PASSED/SKIPPED -- test_filelike_using_helper in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 10.860324144363403s cumulative, 0.06598591804504395s individual

.
current test PASSED/SKIPPED -- test_filelike_closing_aiofiles in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 11.093735694885254s cumulative, 0.23341155052185059s individual

.
current test PASSED/SKIPPED -- test_env_headers_list_of_tuples in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 11.120458126068115s cumulative, 0.026722431182861328s individual

.
current test PASSED/SKIPPED -- test_stream_known_len in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 11.206307411193848s cumulative, 0.08584928512573242s individual

.
current test PASSED/SKIPPED -- test_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 11.26329231262207s cumulative, 0.056984901428222656s individual

.
current test PASSED/SKIPPED -- test_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 11.322221040725708s cumulative, 0.058928728103637695s individual

.
current test PASSED/SKIPPED -- test_closing_stream in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 11.392219543457031s cumulative, 0.06999850273132324s individual

.
current test PASSED/SKIPPED -- test_nongenfunc_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 11.44282841682434s cumulative, 0.05060887336730957s individual

.
current test PASSED/SKIPPED -- test_no_body_on_head in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 11.495666027069092s cumulative, 0.05283761024475098s individual

.
current test PASSED/SKIPPED -- test_closing_stream in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 11.560588121414185s cumulative, 0.06492209434509277s individual

.
current test PASSED/SKIPPED -- test_filelike in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 11.614622354507446s cumulative, 0.05403423309326172s individual

.
current test PASSED/SKIPPED -- test_status_not_set in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 11.65963888168335s cumulative, 0.04501652717590332s individual

.
current test PASSED/SKIPPED -- test_no_route in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 11.707292318344116s cumulative, 0.0476534366607666s individual

.
current test PASSED/SKIPPED -- test_stream_chunked in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 11.75585675239563s cumulative, 0.04856443405151367s individual

.
current test PASSED/SKIPPED -- test_closing_stream in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 11.81345009803772s cumulative, 0.057593345642089844s individual

.
current test PASSED/SKIPPED -- test_filelike_closing in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 11.86219573020935s cumulative, 0.04874563217163086s individual

.
current test PASSED/SKIPPED -- test_closing_stream in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 11.885892391204834s cumulative, 0.0236966609954834s individual

.
current test PASSED/SKIPPED -- test_filelike_closing in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 11.948283433914185s cumulative, 0.062391042709350586s individual

.
current test PASSED/SKIPPED -- test_coroutine_required in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 11.994707584381104s cumulative, 0.046424150466918945s individual

.
current test PASSED/SKIPPED -- test_noncoroutine_required in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 12.042652368545532s cumulative, 0.04794478416442871s individual

.
current test PASSED/SKIPPED -- test_genfunc_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 12.095036745071411s cumulative, 0.052384376525878906s individual

.
current test PASSED/SKIPPED -- test_root_route in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 12.112627267837524s cumulative, 0.01759052276611328s individual

.
current test PASSED/SKIPPED -- test_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 12.119954824447632s cumulative, 0.007327556610107422s individual


tests/test_query_params.py .
current test PASSED/SKIPPED -- test_empty_body_no_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 12.127453327178955s cumulative, 0.007498502731323242s individual

.
current test PASSED/SKIPPED -- test_http_methods_body_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 12.264058828353882s cumulative, 0.13660550117492676s individual

s
current test PASSED/SKIPPED -- test_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 12.445273876190186s cumulative, 0.1812150478363037s individual

s
current test PASSED/SKIPPED -- test_http_methods_body_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 12.6350576877594s cumulative, 0.18978381156921387s individual

s
current test PASSED/SKIPPED -- test_http_methods_body_not_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 12.7998628616333s cumulative, 0.16480517387390137s individual

.
current test PASSED/SKIPPED -- test_http_methods_body_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 13.0271315574646s cumulative, 0.22726869583129883s individual

.
current test PASSED/SKIPPED -- test_http_methods_body_not_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 13.304797410964966s cumulative, 0.2776658535003662s individual

s
current test PASSED/SKIPPED -- test_empty_body_no_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 13.566943645477295s cumulative, 0.2621462345123291s individual

s
current test PASSED/SKIPPED -- test_http_methods_body_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 13.810394048690796s cumulative, 0.24345040321350098s individual

s
current test PASSED/SKIPPED -- test_non_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 13.833205223083496s cumulative, 0.022811174392700195s individual

.
current test PASSED/SKIPPED -- test_http_methods_body_not_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 13.856183767318726s cumulative, 0.022978544235229492s individual

s
current test PASSED/SKIPPED -- test_http_methods_body_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 13.878652095794678s cumulative, 0.02246832847595215s individual

s
current test PASSED/SKIPPED -- test_http_methods_body_not_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 13.899168252944946s cumulative, 0.020516157150268555s individual

.
current test PASSED/SKIPPED -- test_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 13.944031715393066s cumulative, 0.04486346244812012s individual

.
current test PASSED/SKIPPED -- test_http_methods_body_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 13.971821784973145s cumulative, 0.027790069580078125s individual

s
current test PASSED/SKIPPED -- test_http_methods_body_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 13.993570566177368s cumulative, 0.021748781204223633s individual

.
current test PASSED/SKIPPED -- test_http_methods_body_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 14.01884388923645s cumulative, 0.02527332305908203s individual

.
current test PASSED/SKIPPED -- test_explicitly_disable_auto_parse in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 14.05835223197937s cumulative, 0.03950834274291992s individual

s
current test PASSED/SKIPPED -- test_http_methods_body_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 14.073800086975098s cumulative, 0.015447854995727539s individual

.
current test PASSED/SKIPPED -- test_http_methods_body_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 14.085783243179321s cumulative, 0.011983156204223633s individual

.
current test PASSED/SKIPPED -- test_asgi_raises_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 14.096593379974365s cumulative, 0.010810136795043945s individual

s
current test PASSED/SKIPPED -- test_explicitly_disable_auto_parse in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 14.10645580291748s cumulative, 0.009862422943115234s individual

.
current test PASSED/SKIPPED -- test_non_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 14.116920948028564s cumulative, 0.010465145111083984s individual

.
current test PASSED/SKIPPED -- test_dont_auto_parse_by_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 14.13277292251587s cumulative, 0.015851974487304688s individual

.
current test PASSED/SKIPPED -- test_dont_auto_parse_by_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 14.141685009002686s cumulative, 0.008912086486816406s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 14.159350156784058s cumulative, 0.01766514778137207s individual

.
current test PASSED/SKIPPED -- test_default_auto_parse_csv_behaviour in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 14.168811082839966s cumulative, 0.009460926055908203s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 14.181812047958374s cumulative, 0.013000965118408203s individual

.
current test PASSED/SKIPPED -- test_get_date_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 14.195228815078735s cumulative, 0.013416767120361328s individual

.
current test PASSED/SKIPPED -- test_param_property in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 14.206964015960693s cumulative, 0.011735200881958008s individual

.
current test PASSED/SKIPPED -- test_uuid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 14.223835229873657s cumulative, 0.016871213912963867s individual

s
current test PASSED/SKIPPED -- test_has_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 14.233357191085815s cumulative, 0.009521961212158203s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_simple_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 14.249128818511963s cumulative, 0.01577162742614746s individual

s
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 14.257822275161743s cumulative, 0.008693456649780273s individual

.
current test PASSED/SKIPPED -- test_boolean_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 14.271995544433594s cumulative, 0.014173269271850586s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 14.284388065338135s cumulative, 0.012392520904541016s individual

s
current test PASSED/SKIPPED -- test_get_dict_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 14.293874025344849s cumulative, 0.009485960006713867s individual

.
current test PASSED/SKIPPED -- test_get_datetime_valid_with_format in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 14.311659097671509s cumulative, 0.017785072326660156s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 14.328512907028198s cumulative, 0.016853809356689453s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_simple_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 14.337836265563965s cumulative, 0.009323358535766602s individual

.
current test PASSED/SKIPPED -- test_get_datetime_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 14.34548282623291s cumulative, 0.0076465606689453125s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 14.353796482086182s cumulative, 0.008313655853271484s individual

.
current test PASSED/SKIPPED -- test_get_date_valid_with_format in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 14.364375829696655s cumulative, 0.010579347610473633s individual

s
current test PASSED/SKIPPED -- test_bad_percentage in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 14.37274694442749s cumulative, 0.008371114730834961s individual

.
current test PASSED/SKIPPED -- test_list_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 14.380062818527222s cumulative, 0.007315874099731445s individual

s
current test PASSED/SKIPPED -- test_param_property in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 14.386465072631836s cumulative, 0.006402254104614258s individual

.
current test PASSED/SKIPPED -- test_uuid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 14.395800113677979s cumulative, 0.009335041046142578s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 14.403677225112915s cumulative, 0.007877111434936523s individual

.
current test PASSED/SKIPPED -- test_has_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 14.411503791809082s cumulative, 0.007826566696166992s individual

s
current test PASSED/SKIPPED -- test_get_dict_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 14.41821551322937s cumulative, 0.006711721420288086s individual

.
current test PASSED/SKIPPED -- test_has_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 14.426981925964355s cumulative, 0.008766412734985352s individual

.
current test PASSED/SKIPPED -- test_get_dict_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 14.465004444122314s cumulative, 0.038022518157958984s individual

.
current test PASSED/SKIPPED -- test_simple in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 14.518642902374268s cumulative, 0.053638458251953125s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 14.572973728179932s cumulative, 0.05433082580566406s individual

.
current test PASSED/SKIPPED -- test_get_date_valid_with_format in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 14.654499292373657s cumulative, 0.08152556419372559s individual

s
current test PASSED/SKIPPED -- test_list_transformer in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 14.695149660110474s cumulative, 0.040650367736816406s individual

.
current test PASSED/SKIPPED -- test_simple in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 14.749930620193481s cumulative, 0.05478096008300781s individual

.
current test PASSED/SKIPPED -- test_boolean in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 14.841574430465698s cumulative, 0.0916438102722168s individual

.
current test PASSED/SKIPPED -- test_multiple_form_keys_as_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 14.91973090171814s cumulative, 0.0781564712524414s individual

.
current test PASSED/SKIPPED -- test_float in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 14.972356081008911s cumulative, 0.052625179290771484s individual

s
current test PASSED/SKIPPED -- test_boolean_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 15.012772560119629s cumulative, 0.04041647911071777s individual

.
current test PASSED/SKIPPED -- test_multiple_keys_as_float in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 15.066415786743164s cumulative, 0.053643226623535156s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_complex_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 15.12269926071167s cumulative, 0.05628347396850586s individual

.
current test PASSED/SKIPPED -- test_uuid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 15.17402958869934s cumulative, 0.0513303279876709s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 15.227311372756958s cumulative, 0.05328178405761719s individual

.
current test PASSED/SKIPPED -- test_bad_percentage in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 15.297521829605103s cumulative, 0.07021045684814453s individual

.
current test PASSED/SKIPPED -- test_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 15.345548391342163s cumulative, 0.04802656173706055s individual

.
current test PASSED/SKIPPED -- test_get_datetime_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 15.400874853134155s cumulative, 0.05532646179199219s individual

s
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_simple_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 15.434053659439087s cumulative, 0.03317880630493164s individual

.
current test PASSED/SKIPPED -- test_get_dict_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 15.484299421310425s cumulative, 0.05024576187133789s individual

.
current test PASSED/SKIPPED -- test_get_date_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 15.524698257446289s cumulative, 0.04039883613586426s individual

s
current test PASSED/SKIPPED -- test_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 15.559276342391968s cumulative, 0.03457808494567871s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 15.617974519729614s cumulative, 0.058698177337646484s individual

s
current test PASSED/SKIPPED -- test_get_date_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 15.649348974227905s cumulative, 0.031374454498291016s individual

.
current test PASSED/SKIPPED -- test_get_datetime_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 15.691489696502686s cumulative, 0.04214072227478027s individual

.
current test PASSED/SKIPPED -- test_list_type_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 15.73099160194397s cumulative, 0.03950190544128418s individual

s
current test PASSED/SKIPPED -- test_float_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 15.768443584442139s cumulative, 0.037451982498168945s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 15.817712545394897s cumulative, 0.04926896095275879s individual

.
current test PASSED/SKIPPED -- test_float_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 15.866876125335693s cumulative, 0.0491635799407959s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 15.913141012191772s cumulative, 0.0462648868560791s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 15.963142395019531s cumulative, 0.05000138282775879s individual

.
current test PASSED/SKIPPED -- test_list_transformer in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 16.020632028579712s cumulative, 0.057489633560180664s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 16.069205284118652s cumulative, 0.04857325553894043s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 16.114001750946045s cumulative, 0.04479646682739258s individual

.
current test PASSED/SKIPPED -- test_multiple_keys_as_bool in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 16.18879532814026s cumulative, 0.07479357719421387s individual

.
current test PASSED/SKIPPED -- test_boolean_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 16.231407165527344s cumulative, 0.04261183738708496s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_complex_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 16.2727689743042s cumulative, 0.04136180877685547s individual

.
current test PASSED/SKIPPED -- test_allowed_names in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 16.311522722244263s cumulative, 0.03875374794006348s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 16.353114128112793s cumulative, 0.04159140586853027s individual

.
current test PASSED/SKIPPED -- test_int_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 16.40020442008972s cumulative, 0.04709029197692871s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_simple_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 16.438957691192627s cumulative, 0.03875327110290527s individual

.
current test PASSED/SKIPPED -- test_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 16.476276636123657s cumulative, 0.03731894493103027s individual

.
current test PASSED/SKIPPED -- test_list_type_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 16.516114234924316s cumulative, 0.03983759880065918s individual

.
current test PASSED/SKIPPED -- test_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 16.570513248443604s cumulative, 0.05439901351928711s individual

s
current test PASSED/SKIPPED -- test_boolean in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 16.601754665374756s cumulative, 0.031241416931152344s individual

.
current test PASSED/SKIPPED -- test_multiple_keys_as_int in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 16.647109270095825s cumulative, 0.045354604721069336s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_simple_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 16.68944239616394s cumulative, 0.042333126068115234s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 16.7511990070343s cumulative, 0.06175661087036133s individual

.
current test PASSED/SKIPPED -- test_boolean_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 16.799378395080566s cumulative, 0.04817938804626465s individual

.
current test PASSED/SKIPPED -- test_has_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 16.885701417922974s cumulative, 0.08632302284240723s individual

s
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 16.955953359603882s cumulative, 0.0702519416809082s individual

s
current test PASSED/SKIPPED -- test_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 17.023316860198975s cumulative, 0.06736350059509277s individual

s
current test PASSED/SKIPPED -- test_uuid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 17.086931943893433s cumulative, 0.06361508369445801s individual

.
current test PASSED/SKIPPED -- test_get_param_as_json_handler_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 17.16686773300171s cumulative, 0.07993578910827637s individual

.
current test PASSED/SKIPPED -- test_get_datetime_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 17.251009702682495s cumulative, 0.08414196968078613s individual

.
current test PASSED/SKIPPED -- test_int_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 17.307772159576416s cumulative, 0.0567624568939209s individual

.
current test PASSED/SKIPPED -- test_get_datetime_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 17.381552934646606s cumulative, 0.07378077507019043s individual

.
current test PASSED/SKIPPED -- test_multiple_form_keys in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 17.4442138671875s cumulative, 0.06266093254089355s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 17.50227189064026s cumulative, 0.05805802345275879s individual

.
current test PASSED/SKIPPED -- test_int in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 17.562236309051514s cumulative, 0.05996441841125488s individual

s
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 17.60599184036255s cumulative, 0.043755531311035156s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 17.6876118183136s cumulative, 0.0816199779510498s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 17.731327295303345s cumulative, 0.043715476989746094s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 17.794148206710815s cumulative, 0.0628209114074707s individual

.
current test PASSED/SKIPPED -- test_get_dict_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 17.85388207435608s cumulative, 0.05973386764526367s individual

.
current test PASSED/SKIPPED -- test_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 17.915870904922485s cumulative, 0.06198883056640625s individual

.
current test PASSED/SKIPPED -- test_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 17.932762622833252s cumulative, 0.0168917179107666s individual

s
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 17.94596290588379s cumulative, 0.01320028305053711s individual

.
current test PASSED/SKIPPED -- test_multiple_keys_as_float in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 17.966132879257202s cumulative, 0.020169973373413086s individual

.
current test PASSED/SKIPPED -- test_get_datetime_valid_with_format in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 18.268208265304565s cumulative, 0.3020753860473633s individual

s
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 18.490920066833496s cumulative, 0.22271180152893066s individual

.
current test PASSED/SKIPPED -- test_bad_percentage in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 18.677055835723877s cumulative, 0.18613576889038086s individual

.
current test PASSED/SKIPPED -- test_allowed_names in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 19.087981939315796s cumulative, 0.41092610359191895s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 19.43295121192932s cumulative, 0.3449692726135254s individual

s
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 19.639484882354736s cumulative, 0.20653367042541504s individual

.
current test PASSED/SKIPPED -- test_param_property in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 19.65820860862732s cumulative, 0.018723726272583008s individual

.
current test PASSED/SKIPPED -- test_get_dict_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 19.668474197387695s cumulative, 0.010265588760375977s individual

s
current test PASSED/SKIPPED -- test_get_datetime_valid_with_format in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 19.675843954086304s cumulative, 0.0073697566986083984s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 19.69458842277527s cumulative, 0.018744468688964844s individual

s
current test PASSED/SKIPPED -- test_list_type_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 19.71272301673889s cumulative, 0.018134593963623047s individual

s
current test PASSED/SKIPPED -- test_int_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 19.720473289489746s cumulative, 0.007750272750854492s individual

.
current test PASSED/SKIPPED -- test_get_dict_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 19.767488956451416s cumulative, 0.04701566696166992s individual

.
current test PASSED/SKIPPED -- test_multiple_form_keys in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 19.786827325820923s cumulative, 0.019338369369506836s individual

.
current test PASSED/SKIPPED -- test_boolean in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 19.795806407928467s cumulative, 0.008979082107543945s individual

.
current test PASSED/SKIPPED -- test_get_date_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 19.804028034210205s cumulative, 0.008221626281738281s individual

.
current test PASSED/SKIPPED -- test_get_datetime_valid_with_format in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 19.813188076019287s cumulative, 0.009160041809082031s individual

s
current test PASSED/SKIPPED -- test_list_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 19.822309494018555s cumulative, 0.009121417999267578s individual

.
current test PASSED/SKIPPED -- test_float in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 19.82985806465149s cumulative, 0.00754857063293457s individual

s
current test PASSED/SKIPPED -- test_get_date_valid_with_format in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 19.836349487304688s cumulative, 0.006491422653198242s individual

.
current test PASSED/SKIPPED -- test_get_datetime_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 19.848975896835327s cumulative, 0.012626409530639648s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 19.856757164001465s cumulative, 0.007781267166137695s individual

.
current test PASSED/SKIPPED -- test_get_datetime_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 19.86405062675476s cumulative, 0.0072934627532958984s individual

s
current test PASSED/SKIPPED -- test_int in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 19.87149691581726s cumulative, 0.0074462890625s individual

.
current test PASSED/SKIPPED -- test_get_datetime_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 19.880974531173706s cumulative, 0.009477615356445312s individual

s
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 19.88732647895813s cumulative, 0.006351947784423828s individual

s
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_complex_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 19.89327621459961s cumulative, 0.005949735641479492s individual

.
current test PASSED/SKIPPED -- test_boolean in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 19.902583599090576s cumulative, 0.009307384490966797s individual

.
current test PASSED/SKIPPED -- test_float_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 19.942599296569824s cumulative, 0.04001569747924805s individual

.
current test PASSED/SKIPPED -- test_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 19.956897974014282s cumulative, 0.014298677444458008s individual

s
current test PASSED/SKIPPED -- test_simple in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 19.964598417282104s cumulative, 0.007700443267822266s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 19.97754716873169s cumulative, 0.012948751449584961s individual

.
current test PASSED/SKIPPED -- test_get_date_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 19.98677158355713s cumulative, 0.009224414825439453s individual

s
current test PASSED/SKIPPED -- test_default_auto_parse_csv_behaviour in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 19.992897510528564s cumulative, 0.006125926971435547s individual

.
current test PASSED/SKIPPED -- test_get_datetime_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 20.00321936607361s cumulative, 0.010321855545043945s individual

s
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 20.009831190109253s cumulative, 0.006611824035644531s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 20.01841139793396s cumulative, 0.008580207824707031s individual

.
current test PASSED/SKIPPED -- test_get_date_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 20.02790331840515s cumulative, 0.009491920471191406s individual

.
current test PASSED/SKIPPED -- test_get_date_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 20.03596830368042s cumulative, 0.008064985275268555s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 20.04276156425476s cumulative, 0.00679326057434082s individual

.
current test PASSED/SKIPPED -- test_get_datetime_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 20.04992389678955s cumulative, 0.007162332534790039s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 20.058239221572876s cumulative, 0.008315324783325195s individual

s
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 20.06523084640503s cumulative, 0.00699162483215332s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 20.07241129875183s cumulative, 0.007180452346801758s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 20.078651666641235s cumulative, 0.006240367889404297s individual

s
current test PASSED/SKIPPED -- test_percent_encoded in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 20.084939002990723s cumulative, 0.006287336349487305s individual

.
current test PASSED/SKIPPED -- test_get_dict_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 20.09203863143921s cumulative, 0.007099628448486328s individual

.
current test PASSED/SKIPPED -- test_percent_encoded in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 20.09804105758667s cumulative, 0.0060024261474609375s individual

.
current test PASSED/SKIPPED -- test_get_date_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 20.104363679885864s cumulative, 0.006322622299194336s individual

.
current test PASSED/SKIPPED -- test_get_date_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 20.12132430076599s cumulative, 0.016960620880126953s individual

.
current test PASSED/SKIPPED -- test_multiple_form_keys_as_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 20.134844303131104s cumulative, 0.013520002365112305s individual

s
current test PASSED/SKIPPED -- test_get_datetime_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 20.181298971176147s cumulative, 0.046454668045043945s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 20.27198815345764s cumulative, 0.09068918228149414s individual

s
current test PASSED/SKIPPED -- test_allowed_names in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 20.31036353111267s cumulative, 0.0383753776550293s individual

.
current test PASSED/SKIPPED -- test_list_type_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 20.37201690673828s cumulative, 0.06165337562561035s individual

.
current test PASSED/SKIPPED -- test_allowed_names in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 20.42125177383423s cumulative, 0.049234867095947266s individual

.
current test PASSED/SKIPPED -- test_simple in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 20.488829612731934s cumulative, 0.06757783889770508s individual

.
current test PASSED/SKIPPED -- test_param_property in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 20.53989577293396s cumulative, 0.05106616020202637s individual

.
current test PASSED/SKIPPED -- test_get_param_as_json_no_handler_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 20.588377475738525s cumulative, 0.04848170280456543s individual

.
current test PASSED/SKIPPED -- test_get_dict_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 20.63343048095703s cumulative, 0.04505300521850586s individual

.
current test PASSED/SKIPPED -- test_get_date_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 20.686102390289307s cumulative, 0.05267190933227539s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 20.732921361923218s cumulative, 0.04681897163391113s individual

s
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 20.771199941635132s cumulative, 0.03827857971191406s individual

.
current test PASSED/SKIPPED -- test_list_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 20.83163094520569s cumulative, 0.06043100357055664s individual

.
current test PASSED/SKIPPED -- test_get_date_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 20.886339902877808s cumulative, 0.05470895767211914s individual

.
current test PASSED/SKIPPED -- test_get_dict_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 20.934650659561157s cumulative, 0.04831075668334961s individual

.
current test PASSED/SKIPPED -- test_get_dict_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 20.99362063407898s cumulative, 0.058969974517822266s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_simple_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 21.066192626953125s cumulative, 0.07257199287414551s individual

.
current test PASSED/SKIPPED -- test_multiple_keys_as_bool in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 21.116336584091187s cumulative, 0.05014395713806152s individual

s
current test PASSED/SKIPPED -- test_get_date_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 21.15425205230713s cumulative, 0.03791546821594238s individual

.
current test PASSED/SKIPPED -- test_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 21.216150045394897s cumulative, 0.061897993087768555s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 21.273726224899292s cumulative, 0.05757617950439453s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_simple_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 21.320823907852173s cumulative, 0.04709768295288086s individual

s
current test PASSED/SKIPPED -- test_get_dict_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 21.35814118385315s cumulative, 0.03731727600097656s individual

s
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 21.40495991706848s cumulative, 0.04681873321533203s individual

s
current test PASSED/SKIPPED -- test_get_date_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 21.441797733306885s cumulative, 0.03683781623840332s individual

s
current test PASSED/SKIPPED -- test_get_datetime_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 21.480361223220825s cumulative, 0.03856348991394043s individual

s
current test PASSED/SKIPPED -- test_float in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 21.523831844329834s cumulative, 0.04347062110900879s individual

.
current test PASSED/SKIPPED -- test_get_dict_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 21.58103609085083s cumulative, 0.057204246520996094s individual

.
current test PASSED/SKIPPED -- test_list_transformer in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 21.625704050064087s cumulative, 0.044667959213256836s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 21.688499450683594s cumulative, 0.06279540061950684s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 21.730520725250244s cumulative, 0.04202127456665039s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 21.778744220733643s cumulative, 0.04822349548339844s individual

.
current test PASSED/SKIPPED -- test_default_auto_parse_csv_behaviour in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 21.823164224624634s cumulative, 0.04442000389099121s individual

.
current test PASSED/SKIPPED -- test_multiple_keys_as_int in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 21.865068197250366s cumulative, 0.04190397262573242s individual

.
current test PASSED/SKIPPED -- test_get_date_valid_with_format in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 21.918607473373413s cumulative, 0.053539276123046875s individual

s
current test PASSED/SKIPPED -- test_multiple_keys_as_int in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 21.95471692085266s cumulative, 0.03610944747924805s individual

.
current test PASSED/SKIPPED -- test_float_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 22.015753507614136s cumulative, 0.06103658676147461s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 22.07336115837097s cumulative, 0.05760765075683594s individual

s
current test PASSED/SKIPPED -- test_get_datetime_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 22.12875199317932s cumulative, 0.05539083480834961s individual

.
current test PASSED/SKIPPED -- test_list_transformer in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 22.18260169029236s cumulative, 0.05384969711303711s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 22.23247194290161s cumulative, 0.04987025260925293s individual

.
current test PASSED/SKIPPED -- test_multiple_keys_as_bool in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 22.280134439468384s cumulative, 0.04766249656677246s individual

s
current test PASSED/SKIPPED -- test_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 22.322980642318726s cumulative, 0.0428462028503418s individual

.
current test PASSED/SKIPPED -- test_bad_percentage in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 22.367022275924683s cumulative, 0.04404163360595703s individual

s
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 22.407634019851685s cumulative, 0.04061174392700195s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 22.49290180206299s cumulative, 0.08526778221130371s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_complex_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 22.547802448272705s cumulative, 0.0549006462097168s individual

.
current test PASSED/SKIPPED -- test_get_datetime_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 22.611127138137817s cumulative, 0.0633246898651123s individual

.
current test PASSED/SKIPPED -- test_multiple_keys_as_int in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 22.662355184555054s cumulative, 0.05122804641723633s individual

.
current test PASSED/SKIPPED -- test_get_date_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 22.72691583633423s cumulative, 0.0645606517791748s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 22.792794942855835s cumulative, 0.06587910652160645s individual

.
current test PASSED/SKIPPED -- test_float in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 22.84974694252014s cumulative, 0.05695199966430664s individual

.
current test PASSED/SKIPPED -- test_multiple_keys_as_float in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 22.899977684020996s cumulative, 0.05023074150085449s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 22.952465057373047s cumulative, 0.05248737335205078s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 22.993510246276855s cumulative, 0.041045188903808594s individual

.
current test PASSED/SKIPPED -- test_percent_encoded in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 23.03716206550598s cumulative, 0.04365181922912598s individual

s
current test PASSED/SKIPPED -- test_multiple_form_keys_as_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 23.053497791290283s cumulative, 0.016335725784301758s individual

s
current test PASSED/SKIPPED -- test_get_date_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 23.09367275238037s cumulative, 0.04017496109008789s individual

s
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 23.144639492034912s cumulative, 0.050966739654541016s individual

.
current test PASSED/SKIPPED -- test_get_param_as_json_handler_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 23.211490154266357s cumulative, 0.06685066223144531s individual

s
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 23.246891021728516s cumulative, 0.0354008674621582s individual

.
current test PASSED/SKIPPED -- test_get_param_as_json_no_handler_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 23.262343645095825s cumulative, 0.01545262336730957s individual

s
current test PASSED/SKIPPED -- test_multiple_form_keys in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 23.270834922790527s cumulative, 0.008491277694702148s individual

s
current test PASSED/SKIPPED -- test_multiple_keys_as_float in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 23.28192114830017s cumulative, 0.011086225509643555s individual

s
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 23.287314414978027s cumulative, 0.005393266677856445s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 23.297767639160156s cumulative, 0.010453224182128906s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 23.50040864944458s cumulative, 0.20264101028442383s individual

.
current test PASSED/SKIPPED -- test_get_dict_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 23.799593210220337s cumulative, 0.29918456077575684s individual

.
current test PASSED/SKIPPED -- test_percent_encoded in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 24.006205797195435s cumulative, 0.20661258697509766s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 24.193264722824097s cumulative, 0.1870589256286621s individual

.
current test PASSED/SKIPPED -- test_default_auto_parse_csv_behaviour in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 24.448102951049805s cumulative, 0.254838228225708s individual

s
current test PASSED/SKIPPED -- test_multiple_keys_as_bool in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 24.66163659095764s cumulative, 0.21353363990783691s individual

s
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 24.797472953796387s cumulative, 0.13583636283874512s individual

.
current test PASSED/SKIPPED -- test_get_date_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 24.963577032089233s cumulative, 0.16610407829284668s individual

.
current test PASSED/SKIPPED -- test_int in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 24.994141578674316s cumulative, 0.030564546585083008s individual

s
current test PASSED/SKIPPED -- test_get_dict_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 25.00282597541809s cumulative, 0.008684396743774414s individual

.
current test PASSED/SKIPPED -- test_list_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 25.013659477233887s cumulative, 0.010833501815795898s individual

.
current test PASSED/SKIPPED -- test_get_dict_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 25.061222314834595s cumulative, 0.04756283760070801s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 25.079613208770752s cumulative, 0.018390893936157227s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 25.090380668640137s cumulative, 0.010767459869384766s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 25.100649118423462s cumulative, 0.010268449783325195s individual

s
current test PASSED/SKIPPED -- test_get_datetime_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 25.108086347579956s cumulative, 0.007437229156494141s individual

.
current test PASSED/SKIPPED -- test_int in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 25.116073846817017s cumulative, 0.007987499237060547s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 25.12363910675049s cumulative, 0.00756525993347168s individual

.
current test PASSED/SKIPPED -- test_get_datetime_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 25.131372451782227s cumulative, 0.007733345031738281s individual

.
current test PASSED/SKIPPED -- test_multiple_form_keys in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 25.174745321273804s cumulative, 0.04337286949157715s individual

s
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_simple_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 25.185576677322388s cumulative, 0.010831356048583984s individual

.
current test PASSED/SKIPPED -- test_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 25.19515872001648s cumulative, 0.009582042694091797s individual

.
current test PASSED/SKIPPED -- test_multiple_form_keys_as_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 25.20266628265381s cumulative, 0.0075075626373291016s individual

.
current test PASSED/SKIPPED -- test_int_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 25.22219681739807s cumulative, 0.019530534744262695s individual

.
current test PASSED/SKIPPED -- test_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 25.230233192443848s cumulative, 0.008036375045776367s individual


tests/asgi/test_ws.py .
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 25.241806030273438s cumulative, 0.011572837829589844s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 25.25167965888977s cumulative, 0.009873628616333008s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 25.264060974121094s cumulative, 0.012381315231323242s individual

.
current test PASSED/SKIPPED -- test_accept_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 25.272032022476196s cumulative, 0.007971048355102539s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 25.283089637756348s cumulative, 0.011057615280151367s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 25.292377948760986s cumulative, 0.009288311004638672s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 25.30141305923462s cumulative, 0.009035110473632812s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 25.312180519104004s cumulative, 0.010767459869384766s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 25.323441982269287s cumulative, 0.011261463165283203s individual

.
current test PASSED/SKIPPED -- test_send_receive_data in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 25.333264112472534s cumulative, 0.00982213020324707s individual

.
current test PASSED/SKIPPED -- test_subprotocol in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 25.340399980545044s cumulative, 0.007135868072509766s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 25.348923444747925s cumulative, 0.00852346420288086s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 25.35807228088379s cumulative, 0.009148836135864258s individual

.
current test PASSED/SKIPPED -- test_media in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 25.368568181991577s cumulative, 0.010495901107788086s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 25.380287647247314s cumulative, 0.011719465255737305s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 25.390597820281982s cumulative, 0.010310173034667969s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 25.41555428504944s cumulative, 0.024956464767456055s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 25.478753566741943s cumulative, 0.06319928169250488s individual

.
current test PASSED/SKIPPED -- test_accept_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 25.547767639160156s cumulative, 0.06901407241821289s individual

.
current test PASSED/SKIPPED -- test_media in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 25.610249996185303s cumulative, 0.062482357025146484s individual

.
current test PASSED/SKIPPED -- test_bad_spec_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 25.64998722076416s cumulative, 0.03973722457885742s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 25.73360252380371s cumulative, 0.08361530303955078s individual

.
current test PASSED/SKIPPED -- test_unexpected_param in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 25.800214290618896s cumulative, 0.06661176681518555s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 25.866222143173218s cumulative, 0.06600785255432129s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 25.934866666793823s cumulative, 0.06864452362060547s individual

.
current test PASSED/SKIPPED -- test_subprotocol_bad_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 26.003381490707397s cumulative, 0.06851482391357422s individual

.
current test PASSED/SKIPPED -- test_bad_spec_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 26.04702067375183s cumulative, 0.043639183044433594s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 26.12682795524597s cumulative, 0.07980728149414062s individual

.
current test PASSED/SKIPPED -- test_accept_with_bad_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 26.177329301834106s cumulative, 0.050501346588134766s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 26.22590947151184s cumulative, 0.048580169677734375s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 26.282317399978638s cumulative, 0.056407928466796875s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 26.328652143478394s cumulative, 0.04633474349975586s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 26.372378826141357s cumulative, 0.04372668266296387s individual

.
current test PASSED/SKIPPED -- test_missing_spec_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 26.40880823135376s cumulative, 0.036429405212402344s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 26.464176177978516s cumulative, 0.05536794662475586s individual

.
current test PASSED/SKIPPED -- test_accept_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 26.51227903366089s cumulative, 0.04810285568237305s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 26.57032012939453s cumulative, 0.05804109573364258s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 26.639031171798706s cumulative, 0.0687110424041748s individual

.
current test PASSED/SKIPPED -- test_responder_raises_unhandled_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 26.688811540603638s cumulative, 0.04978036880493164s individual

.
current test PASSED/SKIPPED -- test_ws_context_timeout in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 31.76417875289917s cumulative, 5.075367212295532s individual

s.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 31.788405179977417s cumulative, 0.02422642707824707s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 31.799575328826904s cumulative, 0.011170148849487305s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 31.815006256103516s cumulative, 0.015430927276611328s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 31.829559326171875s cumulative, 0.014553070068359375s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 31.8438138961792s cumulative, 0.014254570007324219s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 31.856371879577637s cumulative, 0.0125579833984375s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 31.872462034225464s cumulative, 0.01609015464782715s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 31.883697271347046s cumulative, 0.011235237121582031s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 31.89562225341797s cumulative, 0.011924982070922852s individual

.
current test PASSED/SKIPPED -- test_accept_with_headers_not_supported in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 31.906145095825195s cumulative, 0.010522842407226562s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 31.919052124023438s cumulative, 0.012907028198242188s individual

.
current test PASSED/SKIPPED -- test_ws_not_accepted in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 31.930599689483643s cumulative, 0.011547565460205078s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 31.943065881729126s cumulative, 0.012466192245483398s individual

.
current test PASSED/SKIPPED -- test_subprotocol_bad_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 31.95500659942627s cumulative, 0.011940717697143555s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 31.966846704483032s cumulative, 0.011840105056762695s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 31.988388299942017s cumulative, 0.021541595458984375s individual

.
current test PASSED/SKIPPED -- test_accept_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 32.056180477142334s cumulative, 0.06779217720031738s individual

.
current test PASSED/SKIPPED -- test_bad_spec_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 32.10214638710022s cumulative, 0.04596590995788574s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 32.17544484138489s cumulative, 0.07329845428466797s individual

.
current test PASSED/SKIPPED -- test_missing_ws_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 32.25726389884949s cumulative, 0.08181905746459961s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 32.30937099456787s cumulative, 0.05210709571838379s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 32.363659143447876s cumulative, 0.05428814888000488s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 32.41736936569214s cumulative, 0.053710222244262695s individual

.
current test PASSED/SKIPPED -- test_subprotocol in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 32.4639937877655s cumulative, 0.04662442207336426s individual

.
current test PASSED/SKIPPED -- test_bad_first_event in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 32.49578261375427s cumulative, 0.03178882598876953s individual

.
current test PASSED/SKIPPED -- test_ws_simulator_client_require_accepted in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 32.54566144943237s cumulative, 0.049878835678100586s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 32.61559271812439s cumulative, 0.0699312686920166s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 32.662095069885254s cumulative, 0.04650235176086426s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 32.72352075576782s cumulative, 0.06142568588256836s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 32.78632473945618s cumulative, 0.06280398368835449s individual

.
current test PASSED/SKIPPED -- test_send_receive_data in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 32.83460259437561s cumulative, 0.048277854919433594s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 32.883594036102295s cumulative, 0.04899144172668457s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 32.938408851623535s cumulative, 0.054814815521240234s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 32.996307373046875s cumulative, 0.057898521423339844s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 33.05131506919861s cumulative, 0.0550076961517334s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 33.101399183273315s cumulative, 0.05008411407470703s individual

.
current test PASSED/SKIPPED -- test_send_receive_wrong_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 33.17802572250366s cumulative, 0.07662653923034668s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 33.245030641555786s cumulative, 0.06700491905212402s individual

.
current test PASSED/SKIPPED -- test_ws_base_not_implemented in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 33.262773513793945s cumulative, 0.01774287223815918s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 33.32157349586487s cumulative, 0.05879998207092285s individual

.
current test PASSED/SKIPPED -- test_missing_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 33.35741591453552s cumulative, 0.0358424186706543s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 33.42007541656494s cumulative, 0.06265950202941895s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 33.470571994781494s cumulative, 0.050496578216552734s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 33.51746916770935s cumulative, 0.046897172927856445s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 33.57968878746033s cumulative, 0.06221961975097656s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 33.637487173080444s cumulative, 0.05779838562011719s individual

.
current test PASSED/SKIPPED -- test_bad_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 33.6773726940155s cumulative, 0.039885520935058594s individual

.
current test PASSED/SKIPPED -- test_subprotocol in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 33.74512982368469s cumulative, 0.06775712966918945s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 33.80122447013855s cumulative, 0.05609464645385742s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 33.85840582847595s cumulative, 0.057181358337402344s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 33.91789412498474s cumulative, 0.05948829650878906s individual

.
current test PASSED/SKIPPED -- test_subprotocol_bad_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 33.970444202423096s cumulative, 0.05255007743835449s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 34.0203595161438s cumulative, 0.049915313720703125s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 34.08202910423279s cumulative, 0.06166958808898926s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 34.13989996910095s cumulative, 0.05787086486816406s individual

.
current test PASSED/SKIPPED -- test_send_receive_data in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 34.192835330963135s cumulative, 0.05293536186218262s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 34.2627649307251s cumulative, 0.06992959976196289s individual

.
current test PASSED/SKIPPED -- test_bad_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 34.296852588653564s cumulative, 0.0340876579284668s individual

.
current test PASSED/SKIPPED -- test_subprotocol_bad_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 34.34517788887024s cumulative, 0.048325300216674805s individual

.
current test PASSED/SKIPPED -- test_subprotocol_bad_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 34.401556968688965s cumulative, 0.056379079818725586s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 34.45616269111633s cumulative, 0.054605722427368164s individual

.
current test PASSED/SKIPPED -- test_accept_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 34.50715208053589s cumulative, 0.050989389419555664s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 34.56338572502136s cumulative, 0.05623364448547363s individual

.
current test PASSED/SKIPPED -- test_responder_raises_unhandled_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 34.61566972732544s cumulative, 0.05228400230407715s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 34.639973878860474s cumulative, 0.02430415153503418s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 34.721301555633545s cumulative, 0.08132767677307129s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 34.794414043426514s cumulative, 0.07311248779296875s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 34.83299422264099s cumulative, 0.03858017921447754s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 34.844552993774414s cumulative, 0.011558771133422852s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 34.85784554481506s cumulative, 0.013292551040649414s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 35.124582290649414s cumulative, 0.2667367458343506s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 35.458810806274414s cumulative, 0.334228515625s individual

.
current test PASSED/SKIPPED -- test_echo in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 46.83852934837341s cumulative, 11.379718542098999s individual

.
current test PASSED/SKIPPED -- test_mw_methods_must_be_coroutines in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 46.87077784538269s cumulative, 0.032248497009277344s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 46.967588663101196s cumulative, 0.09681081771850586s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 47.02225303649902s cumulative, 0.05466437339782715s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 47.078291177749634s cumulative, 0.05603814125061035s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 47.132399797439575s cumulative, 0.054108619689941406s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 47.18242883682251s cumulative, 0.05002903938293457s individual

.
current test PASSED/SKIPPED -- test_accept_with_bad_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 47.22752285003662s cumulative, 0.04509401321411133s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 47.287078619003296s cumulative, 0.059555768966674805s individual

.
current test PASSED/SKIPPED -- test_ws_not_accepted in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 47.33656120300293s cumulative, 0.04948258399963379s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 47.39119482040405s cumulative, 0.05463361740112305s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 47.461254596710205s cumulative, 0.07005977630615234s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 47.52853536605835s cumulative, 0.06728076934814453s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 47.59437131881714s cumulative, 0.06583595275878906s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 47.63518834114075s cumulative, 0.0408170223236084s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 47.689621448516846s cumulative, 0.05443310737609863s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 47.73876118659973s cumulative, 0.04913973808288574s individual

.
current test PASSED/SKIPPED -- test_media in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 47.78973960876465s cumulative, 0.05097842216491699s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 47.839380502700806s cumulative, 0.04964089393615723s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 47.894099950790405s cumulative, 0.05471944808959961s individual

.
current test PASSED/SKIPPED -- test_accept_with_bad_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 47.93920540809631s cumulative, 0.0451054573059082s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 47.99420952796936s cumulative, 0.055004119873046875s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 48.04985952377319s cumulative, 0.05564999580383301s individual

.
current test PASSED/SKIPPED -- test_ws_simulator_collect_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 48.10305643081665s cumulative, 0.05319690704345703s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 48.16278791427612s cumulative, 0.059731483459472656s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 48.21359062194824s cumulative, 0.05080270767211914s individual

.
current test PASSED/SKIPPED -- test_translate_webserver_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 48.2585244178772s cumulative, 0.04493379592895508s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 48.31922245025635s cumulative, 0.06069803237915039s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 48.364516735076904s cumulative, 0.04529428482055664s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 48.40911531448364s cumulative, 0.04459857940673828s individual

.
current test PASSED/SKIPPED -- test_subprotocol_bad_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 48.49713206291199s cumulative, 0.08801674842834473s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 48.56133008003235s cumulative, 0.06419801712036133s individual

.
current test PASSED/SKIPPED -- test_accept_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 48.57586312294006s cumulative, 0.014533042907714844s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 48.58749866485596s cumulative, 0.011635541915893555s individual

.
current test PASSED/SKIPPED -- test_media in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 48.59754204750061s cumulative, 0.01004338264465332s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 48.765422105789185s cumulative, 0.16788005828857422s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 49.20364570617676s cumulative, 0.43822360038757324s individual

.
current test PASSED/SKIPPED -- test_accept_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 49.555198192596436s cumulative, 0.35155248641967773s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 49.96534872055054s cumulative, 0.41015052795410156s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 50.111337184906006s cumulative, 0.14598846435546875s individual

.
current test PASSED/SKIPPED -- test_subprotocol in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 50.121161460876465s cumulative, 0.009824275970458984s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 50.1305034160614s cumulative, 0.009341955184936523s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 50.14045000076294s cumulative, 0.009946584701538086s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 50.1479218006134s cumulative, 0.007471799850463867s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 50.1550030708313s cumulative, 0.007081270217895508s individual

.
current test PASSED/SKIPPED -- test_ws_responder_never_ready in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 50.690184354782104s cumulative, 0.5351812839508057s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 50.7070848941803s cumulative, 0.01690053939819336s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 50.71649742126465s cumulative, 0.009412527084350586s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 50.7249493598938s cumulative, 0.00845193862915039s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 50.73511981964111s cumulative, 0.010170459747314453s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 50.75067186355591s cumulative, 0.015552043914794922s individual

.
current test PASSED/SKIPPED -- test_path_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 50.796868562698364s cumulative, 0.046196699142456055s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 50.86868453025818s cumulative, 0.07181596755981445s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 50.94382977485657s cumulative, 0.07514524459838867s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 51.01010489463806s cumulative, 0.06627511978149414s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 51.07892417907715s cumulative, 0.06881928443908691s individual

.
current test PASSED/SKIPPED -- test_send_receive_data in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 51.153902530670166s cumulative, 0.07497835159301758s individual

.
current test PASSED/SKIPPED -- test_bad_spec_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 51.19980716705322s cumulative, 0.04590463638305664s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 51.289470195770264s cumulative, 0.08966302871704102s individual


tests/asgi/test_response_media_asgi.py .
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 51.36018490791321s cumulative, 0.07071471214294434s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 51.42877960205078s cumulative, 0.06859469413757324s individual

.
current test PASSED/SKIPPED -- test_non_ascii_json_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 51.50409770011902s cumulative, 0.0753180980682373s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 51.58204197883606s cumulative, 0.07794427871704102s individual

.
current test PASSED/SKIPPED -- test_custom_media_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 51.65029001235962s cumulative, 0.06824803352355957s individual

.
current test PASSED/SKIPPED -- test_default_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 51.70636987686157s cumulative, 0.056079864501953125s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 51.760905027389526s cumulative, 0.0545351505279541s individual

.
current test PASSED/SKIPPED -- test_mimeparse_edgecases in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 51.826287031173706s cumulative, 0.06538200378417969s individual

.
current test PASSED/SKIPPED -- test_text in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 51.88343262672424s cumulative, 0.05714559555053711s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 51.94643807411194s cumulative, 0.06300544738769531s individual

.
current test PASSED/SKIPPED -- test_non_ascii_json_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 52.01985239982605s cumulative, 0.07341432571411133s individual

.
current test PASSED/SKIPPED -- test_non_ascii_json_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 52.07933044433594s cumulative, 0.059478044509887695s individual

.
current test PASSED/SKIPPED -- test_media in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 52.12507104873657s cumulative, 0.045740604400634766s individual

.
current test PASSED/SKIPPED -- test_non_ascii_json_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 52.17317080497742s cumulative, 0.04809975624084473s individual

.
current test PASSED/SKIPPED -- test_unknown_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 52.22044014930725s cumulative, 0.047269344329833984s individual

.
current test PASSED/SKIPPED -- test_mimeparse_edgecases in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 52.2777361869812s cumulative, 0.057296037673950195s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 52.32598662376404s cumulative, 0.048250436782836914s individual

.
current test PASSED/SKIPPED -- test_data in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 52.373308420181274s cumulative, 0.04732179641723633s individual

.
current test PASSED/SKIPPED -- test_non_ascii_json_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 52.422998905181885s cumulative, 0.04969048500061035s individual

.
current test PASSED/SKIPPED -- test_data_masquerading_as_text in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 52.48249101638794s cumulative, 0.05949211120605469s individual

.
current test PASSED/SKIPPED -- test_custom_render_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 52.535037994384766s cumulative, 0.05254697799682617s individual

.
current test PASSED/SKIPPED -- test_media_rendered_cached in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 52.59108066558838s cumulative, 0.05604267120361328s individual


tests/test_static.py .
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 52.64705467224121s cumulative, 0.05597400665283203s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 52.70960474014282s cumulative, 0.06255006790161133s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 52.81638526916504s cumulative, 0.1067805290222168s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 52.845000982284546s cumulative, 0.028615713119506836s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 52.88333034515381s cumulative, 0.038329362869262695s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 52.921101570129395s cumulative, 0.03777122497558594s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 52.97815799713135s cumulative, 0.057056427001953125s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 53.063844203948975s cumulative, 0.08568620681762695s individual

.
current test PASSED/SKIPPED -- test_bounded_file_wrapper in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 53.08706974983215s cumulative, 0.02322554588317871s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 53.19451546669006s cumulative, 0.10744571685791016s individual

.
current test PASSED/SKIPPED -- test_invalid_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 53.234371185302734s cumulative, 0.0398557186126709s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 53.276296854019165s cumulative, 0.041925668716430664s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 53.315935134887695s cumulative, 0.03963828086853027s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 53.3500771522522s cumulative, 0.03414201736450195s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 53.416100025177s cumulative, 0.06602287292480469s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 53.46797442436218s cumulative, 0.051874399185180664s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 53.51215195655823s cumulative, 0.04417753219604492s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 53.56012272834778s cumulative, 0.04797077178955078s individual

.
current test PASSED/SKIPPED -- test_invalid_args_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 53.591978788375854s cumulative, 0.03185606002807617s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 53.613757371902466s cumulative, 0.021778583526611328s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 53.649261236190796s cumulative, 0.03550386428833008s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 53.69133520126343s cumulative, 0.042073965072631836s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 53.73905277252197s cumulative, 0.04771757125854492s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 53.799439430236816s cumulative, 0.06038665771484375s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 53.82913637161255s cumulative, 0.029696941375732422s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 53.83940291404724s cumulative, 0.010266542434692383s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 53.84984469413757s cumulative, 0.010441780090332031s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 53.97163391113281s cumulative, 0.12178921699523926s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 54.19703984260559s cumulative, 0.22540593147277832s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 54.38158130645752s cumulative, 0.1845414638519287s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 54.617780447006226s cumulative, 0.23619914054870605s individual

.
current test PASSED/SKIPPED -- test_invalid_args_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 54.776124715805054s cumulative, 0.15834426879882812s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 54.96664381027222s cumulative, 0.19051909446716309s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 55.0923810005188s cumulative, 0.12573719024658203s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 55.4631929397583s cumulative, 0.37081193923950195s individual

.
current test PASSED/SKIPPED -- test_invalid_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 55.48473334312439s cumulative, 0.021540403366088867s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 55.50741410255432s cumulative, 0.02268075942993164s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 55.54077744483948s cumulative, 0.03336334228515625s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 55.56090235710144s cumulative, 0.02012491226196289s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 55.59017014503479s cumulative, 0.02926778793334961s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 55.650559186935425s cumulative, 0.060389041900634766s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 55.663317918777466s cumulative, 0.012758731842041016s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 55.675808906555176s cumulative, 0.012490987777709961s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 55.68186569213867s cumulative, 0.006056785583496094s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 55.68752932548523s cumulative, 0.005663633346557617s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 55.69597387313843s cumulative, 0.008444547653198242s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 55.7027370929718s cumulative, 0.0067632198333740234s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 55.71032190322876s cumulative, 0.007584810256958008s individual

.
current test PASSED/SKIPPED -- test_invalid_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 55.7159686088562s cumulative, 0.005646705627441406s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 55.72650671005249s cumulative, 0.010538101196289062s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 55.74844837188721s cumulative, 0.021941661834716797s individual

.
current test PASSED/SKIPPED -- test_invalid_args_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 55.76366066932678s cumulative, 0.015212297439575195s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 55.771727085113525s cumulative, 0.008066415786743164s individual

.
current test PASSED/SKIPPED -- test_pathlib_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 55.77942252159119s cumulative, 0.007695436477661133s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 55.789488554000854s cumulative, 0.010066032409667969s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 55.81160283088684s cumulative, 0.022114276885986328s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 55.82403588294983s cumulative, 0.012433052062988281s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 55.83250117301941s cumulative, 0.008465290069580078s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 55.84439277648926s cumulative, 0.011891603469848633s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 55.857720375061035s cumulative, 0.013327598571777344s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 55.86762094497681s cumulative, 0.009900569915771484s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 55.872825384140015s cumulative, 0.005204439163208008s individual

.
current test PASSED/SKIPPED -- test_file_closed in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 55.88517999649048s cumulative, 0.012354612350463867s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 55.89110565185547s cumulative, 0.005925655364990234s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 55.90045642852783s cumulative, 0.009350776672363281s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 55.91218423843384s cumulative, 0.01172780990600586s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 55.928383350372314s cumulative, 0.016199111938476562s individual

.
current test PASSED/SKIPPED -- test_invalid_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 55.95146656036377s cumulative, 0.023083209991455078s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 55.96268177032471s cumulative, 0.0112152099609375s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 55.97603917121887s cumulative, 0.013357400894165039s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 56.01807451248169s cumulative, 0.04203534126281738s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 56.08273768424988s cumulative, 0.06466317176818848s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 56.123467206954956s cumulative, 0.040729522705078125s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 56.159780740737915s cumulative, 0.036313533782958984s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 56.20051026344299s cumulative, 0.040729522705078125s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 56.236119985580444s cumulative, 0.03560972213745117s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 56.27414798736572s cumulative, 0.03802800178527832s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 56.335625648498535s cumulative, 0.0614776611328125s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 56.37841606140137s cumulative, 0.04279041290283203s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 56.42418885231018s cumulative, 0.04577279090881348s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 56.462531328201294s cumulative, 0.03834247589111328s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 56.505754709243774s cumulative, 0.04322338104248047s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 56.58164691925049s cumulative, 0.07589221000671387s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 56.66086483001709s cumulative, 0.07921791076660156s individual

.
current test PASSED/SKIPPED -- test_lifo_negative in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 56.726649045944214s cumulative, 0.06578421592712402s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 56.77421522140503s cumulative, 0.04756617546081543s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 56.813409090042114s cumulative, 0.03919386863708496s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 56.88309192657471s cumulative, 0.06968283653259277s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 56.935168743133545s cumulative, 0.05207681655883789s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 56.99424624443054s cumulative, 0.05907750129699707s individual

.
current test PASSED/SKIPPED -- test_invalid_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 57.03329277038574s cumulative, 0.039046525955200195s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 57.13318395614624s cumulative, 0.09989118576049805s individual

.
current test PASSED/SKIPPED -- test_lifo in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 57.213600397109985s cumulative, 0.08041644096374512s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 57.25202465057373s cumulative, 0.03842425346374512s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 57.28842735290527s cumulative, 0.03640270233154297s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 57.39943075180054s cumulative, 0.11100339889526367s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 57.46604371070862s cumulative, 0.06661295890808105s individual

.
current test PASSED/SKIPPED -- test_pathlib_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 57.51214241981506s cumulative, 0.04609870910644531s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 57.552239656448364s cumulative, 0.04009723663330078s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 57.603429317474365s cumulative, 0.05118966102600098s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 57.662041902542114s cumulative, 0.05861258506774902s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 57.70063638687134s cumulative, 0.03859448432922363s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 57.79443430900574s cumulative, 0.09379792213439941s individual

.
current test PASSED/SKIPPED -- test_invalid_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 57.84635615348816s cumulative, 0.051921844482421875s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 57.89696025848389s cumulative, 0.05060410499572754s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 57.94928193092346s cumulative, 0.052321672439575195s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 58.04069209098816s cumulative, 0.09141016006469727s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 58.094669818878174s cumulative, 0.05397772789001465s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 58.185659408569336s cumulative, 0.09098958969116211s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 58.26438236236572s cumulative, 0.07872295379638672s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 58.35695123672485s cumulative, 0.09256887435913086s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 58.39092969894409s cumulative, 0.03397846221923828s individual

.
current test PASSED/SKIPPED -- test_filesystem_traversal_fuse in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 58.46283531188965s cumulative, 0.07190561294555664s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 58.49551010131836s cumulative, 0.03267478942871094s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 58.570393800735474s cumulative, 0.07488369941711426s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 58.617626905441284s cumulative, 0.04723310470581055s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 58.710387229919434s cumulative, 0.09276032447814941s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 58.75401020050049s cumulative, 0.04362297058105469s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 58.792121171951294s cumulative, 0.038110971450805664s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 58.859370470047s cumulative, 0.06724929809570312s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 58.90421390533447s cumulative, 0.044843435287475586s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 58.94962787628174s cumulative, 0.045413970947265625s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 58.979740858078s cumulative, 0.03011298179626465s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 59.052091121673584s cumulative, 0.07235026359558105s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 59.07977104187012s cumulative, 0.027679920196533203s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 59.14047384262085s cumulative, 0.06070280075073242s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 59.191835165023804s cumulative, 0.0513613224029541s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 59.25780415534973s cumulative, 0.06596899032592773s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 59.368638038635254s cumulative, 0.11083388328552246s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 59.403406381607056s cumulative, 0.03476834297180176s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 59.419914960861206s cumulative, 0.01650857925415039s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 59.432175159454346s cumulative, 0.012260198593139648s individual

.
current test PASSED/SKIPPED -- test_lifo in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 59.46577262878418s cumulative, 0.033597469329833984s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 59.83492183685303s cumulative, 0.36914920806884766s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 60.27172541618347s cumulative, 0.43680357933044434s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 60.58961462974548s cumulative, 0.3178892135620117s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 60.76277303695679s cumulative, 0.1731584072113037s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.02227234840393s cumulative, 0.25949931144714355s individual

.
current test PASSED/SKIPPED -- test_filesystem_traversal_fuse in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.04102277755737s cumulative, 0.018750429153442383s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.05780053138733s cumulative, 0.016777753829956055s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.071012020111084s cumulative, 0.013211488723754883s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.077088832855225s cumulative, 0.006076812744140625s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.09198355674744s cumulative, 0.014894723892211914s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.10202383995056s cumulative, 0.010040283203125s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.15809607505798s cumulative, 0.056072235107421875s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.17068791389465s cumulative, 0.012591838836669922s individual

.
current test PASSED/SKIPPED -- test_downloadable in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.187421798706055s cumulative, 0.016733884811401367s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.19412016868591s cumulative, 0.0066983699798583984s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.206156492233276s cumulative, 0.012036323547363281s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.212530851364136s cumulative, 0.006374359130859375s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.221460580825806s cumulative, 0.008929729461669922s individual

.
current test PASSED/SKIPPED -- test_downloadable_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.22852087020874s cumulative, 0.00706028938293457s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.234297037124634s cumulative, 0.005776166915893555s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.24436068534851s cumulative, 0.010063648223876953s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.24984121322632s cumulative, 0.005480527877807617s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.25833225250244s cumulative, 0.008491039276123047s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.26339554786682s cumulative, 0.005063295364379883s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.270737171173096s cumulative, 0.007341623306274414s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.281352519989014s cumulative, 0.010615348815917969s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.288954973220825s cumulative, 0.0076024532318115234s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.29910182952881s cumulative, 0.010146856307983398s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.30416679382324s cumulative, 0.005064964294433594s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.3083610534668s cumulative, 0.0041942596435546875s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.31457495689392s cumulative, 0.0062139034271240234s individual

.
current test PASSED/SKIPPED -- test_invalid_args_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.31982779502869s cumulative, 0.005252838134765625s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.32625412940979s cumulative, 0.006426334381103516s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.33807158470154s cumulative, 0.011817455291748047s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.34501910209656s cumulative, 0.006947517395019531s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.35062336921692s cumulative, 0.005604267120361328s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.357722759246826s cumulative, 0.0070993900299072266s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.36199760437012s cumulative, 0.004274845123291016s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.37000322341919s cumulative, 0.008005619049072266s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.37522482872009s cumulative, 0.00522160530090332s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.38076567649841s cumulative, 0.0055408477783203125s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.38459086418152s cumulative, 0.0038251876831054688s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.38923525810242s cumulative, 0.0046443939208984375s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.39586806297302s cumulative, 0.006632804870605469s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.40405464172363s cumulative, 0.008186578750610352s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.410395860672s cumulative, 0.006341218948364258s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.41920781135559s cumulative, 0.00881195068359375s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.424519300460815s cumulative, 0.005311489105224609s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.42955160140991s cumulative, 0.00503230094909668s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.437729835510254s cumulative, 0.008178234100341797s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.442065477371216s cumulative, 0.004335641860961914s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.446808099746704s cumulative, 0.004742622375488281s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.451622009277344s cumulative, 0.0048139095306396484s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.45622730255127s cumulative, 0.004605293273925781s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.46316194534302s cumulative, 0.006934642791748047s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.472601890563965s cumulative, 0.009439945220947266s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.47622776031494s cumulative, 0.0036258697509765625s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.47971248626709s cumulative, 0.0034847259521484375s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.485923767089844s cumulative, 0.006211280822753906s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.525269746780396s cumulative, 0.03934597969055176s individual

.
current test PASSED/SKIPPED -- test_lifo_negative in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.597689390182495s cumulative, 0.07241964340209961s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.63045120239258s cumulative, 0.03276181221008301s individual

.
current test PASSED/SKIPPED -- test_invalid_args_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.67065143585205s cumulative, 0.040200233459472656s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.71529483795166s cumulative, 0.044643402099609375s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.75886535644531s cumulative, 0.043570518493652344s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.822689056396484s cumulative, 0.06382369995117188s individual

.
current test PASSED/SKIPPED -- test_invalid_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.86205077171326s cumulative, 0.03936171531677246s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.92826199531555s cumulative, 0.06621122360229492s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 61.99286389350891s cumulative, 0.06460189819335938s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 62.022722005844116s cumulative, 0.029858112335205078s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 62.06532311439514s cumulative, 0.04260110855102539s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 62.099071741104126s cumulative, 0.033748626708984375s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 62.157246828079224s cumulative, 0.058175086975097656s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 62.20753788948059s cumulative, 0.05029106140136719s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 62.25590491294861s cumulative, 0.04836702346801758s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 62.28547811508179s cumulative, 0.02957320213317871s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 62.338651180267334s cumulative, 0.053173065185546875s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 62.39260649681091s cumulative, 0.0539553165435791s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 62.436986207962036s cumulative, 0.04437971115112305s individual

.
current test PASSED/SKIPPED -- test_downloadable in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 62.51806282997131s cumulative, 0.08107662200927734s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 62.58757400512695s cumulative, 0.06951117515563965s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 62.61627650260925s cumulative, 0.028702497482299805s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 62.66338086128235s cumulative, 0.0471043586730957s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 62.699511766433716s cumulative, 0.03613090515136719s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 62.76882791519165s cumulative, 0.06931614875793457s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 62.804980754852295s cumulative, 0.03615283966064453s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 62.85673713684082s cumulative, 0.05175638198852539s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 62.895702600479126s cumulative, 0.038965463638305664s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 62.940754652023315s cumulative, 0.04505205154418945s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 62.96934485435486s cumulative, 0.02859020233154297s individual

.
current test PASSED/SKIPPED -- test_invalid_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 63.00170969963074s cumulative, 0.032364845275878906s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 63.03333854675293s cumulative, 0.03162884712219238s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 63.05429768562317s cumulative, 0.020959138870239258s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 63.086007595062256s cumulative, 0.031709909439086914s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 63.13868284225464s cumulative, 0.05267524719238281s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 63.17663049697876s cumulative, 0.037947654724121094s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 63.248189210891724s cumulative, 0.07155871391296387s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 63.288350343704224s cumulative, 0.0401611328125s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 63.3395893573761s cumulative, 0.051239013671875s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 63.37664341926575s cumulative, 0.03705406188964844s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 63.449623107910156s cumulative, 0.07297968864440918s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 63.51775670051575s cumulative, 0.06813359260559082s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 63.57835102081299s cumulative, 0.06059432029724121s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 63.60810852050781s cumulative, 0.02975749969482422s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 63.65510296821594s cumulative, 0.04699444770812988s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 63.689873456954956s cumulative, 0.03477048873901367s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 63.76036357879639s cumulative, 0.07049012184143066s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 63.7918598651886s cumulative, 0.031496286392211914s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 63.826595067977905s cumulative, 0.03473520278930664s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 63.876272201538086s cumulative, 0.049677133560180664s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 63.916433811187744s cumulative, 0.0401616096496582s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 63.98894119262695s cumulative, 0.07250738143920898s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 64.0310206413269s cumulative, 0.04207944869995117s individual

.
current test PASSED/SKIPPED -- test_file_closed in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 64.06758379936218s cumulative, 0.03656315803527832s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 64.0932252407074s cumulative, 0.025641441345214844s individual

.
current test PASSED/SKIPPED -- test_invalid_args_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 64.11456990242004s cumulative, 0.021344661712646484s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 64.16555547714233s cumulative, 0.05098557472229004s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 64.19134211540222s cumulative, 0.025786638259887695s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 64.20980668067932s cumulative, 0.01846456527709961s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 64.22795605659485s cumulative, 0.018149375915527344s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 64.25299954414368s cumulative, 0.025043487548828125s individual

.
current test PASSED/SKIPPED -- test_downloadable_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 64.29358720779419s cumulative, 0.040587663650512695s individual


tests/asgi/test_misc.py .
current test PASSED/SKIPPED -- test_http_error_not_impl in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_misc.py: 64.33176898956299s cumulative, 0.03818178176879883s individual

.
current test PASSED/SKIPPED -- test_http_status_not_impl in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_misc.py: 64.36706137657166s cumulative, 0.03529238700866699s individual

.
current test PASSED/SKIPPED -- test_python_error_not_impl in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_misc.py: 64.40959358215332s cumulative, 0.04253220558166504s individual


tests/test_default_router.py .
current test PASSED/SKIPPED -- test_params_in_non_taken_branches in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 64.44089484214783s cumulative, 0.031301259994506836s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 64.44689059257507s cumulative, 0.005995750427246094s individual

.
current test PASSED/SKIPPED -- test_params_in_non_taken_branches in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 64.47517967224121s cumulative, 0.028289079666137695s individual

.
current test PASSED/SKIPPED -- test_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 64.63575673103333s cumulative, 0.16057705879211426s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 64.73996162414551s cumulative, 0.10420489311218262s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 64.75963807106018s cumulative, 0.01967644691467285s individual

.
current test PASSED/SKIPPED -- test_non_conflict in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 64.77336287498474s cumulative, 0.013724803924560547s individual

.
current test PASSED/SKIPPED -- test_dead_segment in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 65.2526798248291s cumulative, 0.47931694984436035s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 65.45862460136414s cumulative, 0.20594477653503418s individual

.
current test PASSED/SKIPPED -- test_dead_segment in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 65.9098391532898s cumulative, 0.4512145519256592s individual

.
current test PASSED/SKIPPED -- test_converters_malformed_specification in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 66.13211274147034s cumulative, 0.222273588180542s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 66.42838883399963s cumulative, 0.2962760925292969s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 66.57633209228516s cumulative, 0.14794325828552246s individual

.
current test PASSED/SKIPPED -- test_duplicate_field_names in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 66.58604741096497s cumulative, 0.00971531867980957s individual

.
current test PASSED/SKIPPED -- test_conflict in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 66.6681900024414s cumulative, 0.08214259147644043s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 66.67847609519958s cumulative, 0.010286092758178711s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 66.70473384857178s cumulative, 0.026257753372192383s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 66.72655272483826s cumulative, 0.021818876266479492s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 66.74801731109619s cumulative, 0.02146458625793457s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 66.76974725723267s cumulative, 0.02172994613647461s individual

.
current test PASSED/SKIPPED -- test_options_converters_invalid_name_on_update in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 66.78153848648071s cumulative, 0.011791229248046875s individual

.
current test PASSED/SKIPPED -- test_match_entire_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 66.78570771217346s cumulative, 0.0041692256927490234s individual

.
current test PASSED/SKIPPED -- test_complex_alt in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 66.80874180793762s cumulative, 0.023034095764160156s individual

.
current test PASSED/SKIPPED -- test_literal_segment in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 66.82560348510742s cumulative, 0.016861677169799805s individual

.
current test PASSED/SKIPPED -- test_options_converters_update in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 66.84213924407959s cumulative, 0.01653575897216797s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 66.8482186794281s cumulative, 0.006079435348510742s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 66.85479593276978s cumulative, 0.006577253341674805s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 66.8720076084137s cumulative, 0.0172116756439209s individual

.
current test PASSED/SKIPPED -- test_params_in_non_taken_branches in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 66.88917136192322s cumulative, 0.017163753509521484s individual

.
current test PASSED/SKIPPED -- test_user_regression_versioned_url in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 66.92868375778198s cumulative, 0.03951239585876465s individual

.
current test PASSED/SKIPPED -- test_match_entire_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 66.95088648796082s cumulative, 0.022202730178833008s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 66.98981714248657s cumulative, 0.038930654525756836s individual

.
current test PASSED/SKIPPED -- test_converters in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 67.01998281478882s cumulative, 0.030165672302246094s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 67.05432605743408s cumulative, 0.03434324264526367s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 67.06710505485535s cumulative, 0.012778997421264648s individual

.
current test PASSED/SKIPPED -- test_not_str in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 67.07584190368652s cumulative, 0.008736848831176758s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 67.08822798728943s cumulative, 0.012386083602905273s individual

.
current test PASSED/SKIPPED -- test_converters_with_invalid_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 67.10163116455078s cumulative, 0.013403177261352539s individual

.
current test PASSED/SKIPPED -- test_params_in_non_taken_branches in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 67.11180973052979s cumulative, 0.010178565979003906s individual

.
current test PASSED/SKIPPED -- test_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 67.13430762290955s cumulative, 0.022497892379760742s individual

.
current test PASSED/SKIPPED -- test_capture_path_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 67.139413356781s cumulative, 0.005105733871459961s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 67.14939069747925s cumulative, 0.009977340698242188s individual

.
current test PASSED/SKIPPED -- test_not_str in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 67.15669369697571s cumulative, 0.007302999496459961s individual

.
current test PASSED/SKIPPED -- test_params_in_non_taken_branches in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 67.16649293899536s cumulative, 0.00979924201965332s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 67.22958326339722s cumulative, 0.06309032440185547s individual

.
current test PASSED/SKIPPED -- test_converters in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 67.38313794136047s cumulative, 0.15355467796325684s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 67.44985461235046s cumulative, 0.06671667098999023s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 67.50110483169556s cumulative, 0.05125021934509277s individual

.
current test PASSED/SKIPPED -- test_malformed_pattern in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 67.63038277626038s cumulative, 0.12927794456481934s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 67.77349710464478s cumulative, 0.14311432838439941s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 67.82925057411194s cumulative, 0.055753469467163086s individual

.
current test PASSED/SKIPPED -- test_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 67.9701898097992s cumulative, 0.14093923568725586s individual

.
current test PASSED/SKIPPED -- test_conflict in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 68.05596160888672s cumulative, 0.08577179908752441s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 68.11701440811157s cumulative, 0.061052799224853516s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 68.17004036903381s cumulative, 0.05302596092224121s individual

.
current test PASSED/SKIPPED -- test_conflict in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 68.25082588195801s cumulative, 0.08078551292419434s individual

.
current test PASSED/SKIPPED -- test_not_str in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 68.29630470275879s cumulative, 0.04547882080078125s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 68.45963788032532s cumulative, 0.16333317756652832s individual

.
current test PASSED/SKIPPED -- test_capture_path_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 68.49839878082275s cumulative, 0.03876090049743652s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 68.58478450775146s cumulative, 0.08638572692871094s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 68.66923522949219s cumulative, 0.08445072174072266s individual

.
current test PASSED/SKIPPED -- test_duplicate_field_names in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 68.70266628265381s cumulative, 0.033431053161621094s individual

.
current test PASSED/SKIPPED -- test_match_entire_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 68.76000261306763s cumulative, 0.05733633041381836s individual

.
current test PASSED/SKIPPED -- test_dead_segment in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 68.89936327934265s cumulative, 0.13936066627502441s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 68.9871141910553s cumulative, 0.08775091171264648s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 69.06480193138123s cumulative, 0.07768774032592773s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 69.12123703956604s cumulative, 0.05643510818481445s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 69.25130867958069s cumulative, 0.13007164001464844s individual

.
current test PASSED/SKIPPED -- test_capture_path_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 69.29176163673401s cumulative, 0.04045295715332031s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 69.46839499473572s cumulative, 0.17663335800170898s individual

.
current test PASSED/SKIPPED -- test_options_converters_invalid_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 69.55711936950684s cumulative, 0.08872437477111816s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 69.63295769691467s cumulative, 0.07583832740783691s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 69.69310569763184s cumulative, 0.060148000717163086s individual

.
current test PASSED/SKIPPED -- test_converters in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 69.8262403011322s cumulative, 0.1331346035003662s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 69.96040105819702s cumulative, 0.13416075706481934s individual

.
current test PASSED/SKIPPED -- test_converters_with_invalid_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 70.04355192184448s cumulative, 0.08315086364746094s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 70.08976793289185s cumulative, 0.04621601104736328s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 70.2131929397583s cumulative, 0.12342500686645508s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 70.31458473205566s cumulative, 0.10139179229736328s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 70.44248032569885s cumulative, 0.12789559364318848s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 70.4905571937561s cumulative, 0.04807686805725098s individual

.
current test PASSED/SKIPPED -- test_capture_path_no_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 70.52460932731628s cumulative, 0.034052133560180664s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 70.58733177185059s cumulative, 0.06272244453430176s individual



def find(path, return_values, patterns, converters, params):
    path_len = len(path)
    if path_len > 0:
        if path[0] == 'repos':
            if path_len > 1:
                if path_len > 2:
                    if path_len > 3:
                        if path[3] == 'commits':
                            if path_len == 4:
                                params['org'] = path[1]
                                params['repo'] = path[2]
                                return return_values[3]
                            return None
                        if path[3] == 'compare':
                            if path_len > 4:
                                if path[4] == 'all':
                                    if path_len == 5:
                                        params['org'] = path[1]
                                        params['repo'] = path[2]
                                        return return_values[4]
                                match = patterns[0].match(path[4])  # ^(?P<usr0>.+):(?P<branch0>.+)\.\.\.(?P<usr1>.+):(?P<branch1>.+)$
                                if match is not None:
                                    dict_match_3 = match.groupdict()
                                    if path_len > 5:
                                        if path[5] == 'full':
                                            if path_len == 6:
                                                params['org'] = path[1]
                                                params['repo'] = path[2]
                                                params.update(dict_match_3)
                                                return return_values[6]
                                        if path[5] == 'part':
                                            if path_len == 6:
                                                params['org'] = path[1]
                                                params['repo'] = path[2]
                                                params.update(dict_match_3)
                                                return return_values[7]
                                    if path_len == 5:
                                        params['org'] = path[1]
                                        params['repo'] = path[2]
                                        params.update(dict_match_3)
                                        return return_values[5]
                                match = patterns[1].match(path[4])  # ^(?P<usr0>.+):(?P<branch0>.+)$
                                if match is not None:
                                    dict_match_3 = match.groupdict()
                                    if path_len > 5:
                                        if path[5] == 'full':
                                            if path_len == 6:
                                                params['org'] = path[1]
                                                params['repo'] = path[2]
                                                params.update(dict_match_3)
                                                return return_values[9]
                                    if path_len == 5:
                                        params['org'] = path[1]
                                        params['repo'] = path[2]
                                        params.update(dict_match_3)
                                        return return_values[8]
                            return None
                        return None
                    if path_len == 3:
                        params['org'] = path[1]
                        params['repo'] = path[2]
                        return return_values[2]
                    return None
                if path_len == 2:
                    params['org'] = path[1]
                    return return_values[1]
                return None
            if path_len == 1:
                return return_values[0]
            return None
        if path[0] == 'teams':
            if path_len > 1:
                if path[1] == 'default':
                    if path_len > 2:
                        if path[2] == 'members':
                            if path_len > 3:
                                if path[3] == 'thing':
                                    if path_len == 4:
                                        return return_values[11]
                    if path_len == 2:
                        return return_values[10]
                if path_len > 2:
                    if path[2] == 'members':
                        if path_len == 3:
                            params['id'] = path[1]
                            return return_values[13]
                if path_len == 2:
                    params['id'] = path[1]
                    return return_values[12]
            return None
        if path[0] == 'user':
            if path_len > 1:
                if path[1] == 'memberships':
                    if path_len == 2:
                        return return_values[14]
                    return None
                return None
            return None
        if path[0] == 'emojis':
            if path_len > 1:
                if path[1] == 'signs':
                    if path_len > 2:
                        if path[2] == '0':
                            if path_len == 3:
                                return return_values[16]
                        if path[2] == '42':
                            if path_len > 3:
                                if path[3] == 'small.jpg':
                                    if path_len == 4:
                                        return return_values[18]
                            if path_len == 3:
                                return return_values[17]
                        if path[2] == '78':
                            if path_len > 3:
                                if path[3] == 'small.png':
                                    if path_len == 4:
                                        return return_values[19]
                                if path[3] == 'small(png)':
                                    if path_len == 4:
                                        return return_values[20]
                                if path[3] == 'small_png':
                                    if path_len == 4:
                                        return return_values[21]
                        if path_len == 3:
                            params['id'] = path[2]
                            return return_values[22]
                    return None
                return None
            if path_len == 1:
                return return_values[15]
            return None
        if path[0] == 'images':
            if path_len > 1:
                match = patterns[2].match(path[1])  # ^(?P<id>.+)\.gif$
                if match is not None:
                    dict_match_1 = match.groupdict()
                    if path_len == 2:
                        params.update(dict_match_1)
                        return return_values[23]
                    return None
                return None
            return None
        if path[0] == 'gists':
            if path_len > 1:
                if path[1] == 'first':
                    if path_len == 2:
                        return return_values[24]
                if path_len > 2:
                    if path[2] == 'raw':
                        if path_len == 3:
                            params['id'] = path[1]
                            return return_values[25]
                    if path_len == 3:
                        params['id'] = path[1]
                        params['representation'] = path[2]
                        return return_values[26]
            return None
        if path[0] == 'item':
            if path_len > 1:
                if path_len == 2:
                    params['q'] = path[1]
                    return return_values[27]
                return None
            return None
        if path[0] == 'cvt':
            if path_len > 1:
                if path[1] == 'teams':
                    if path_len > 2:
                        if path[2] == 'default':
                            if path_len > 3:
                                if path[3] == 'members':
                                    if path_len > 4:
                                        match = patterns[3].match(path[4])  # ^(?P<id>.+)-(?P<tenure>.+)$
                                        if match is not None:
                                            groups = match.groupdict()
                                            fragment = groups.pop('id')
                                            field_value_1 = converters[0].convert(fragment)
                                            if field_value_1 is not None:
                                                fragment = groups.pop('tenure')
                                                field_value_2 = converters[1].convert(fragment)
                                                if field_value_2 is not None:
                                                    if path_len == 5:
                                                        params['id'] = field_value_1
                                                        params['tenure'] = field_value_2
                                                        return return_values[29]
                            if path_len == 3:
                                return return_values[28]
                        fragment = path[2]
                        field_value_1 = converters[2].convert(fragment)
                        if field_value_1 is not None:
                            if path_len > 3:
                                if path[3] == 'members':
                                    if path_len == 4:
                                        params['id'] = field_value_1
                                        return return_values[31]
                            if path_len == 3:
                                params['id'] = field_value_1
                                return return_values[30]
                    return None
                if path[1] == 'repos':
                    if path_len > 2:
                        if path_len > 3:
                            if path_len > 4:
                                if path[4] == 'compare':
                                    if path_len > 5:
                                        match = patterns[4].match(path[5])  # ^(?P<usr0>.+):(?P<branch0>.+)\.\.\.(?P<usr1>.+):(?P<branch1>.+)$
                                        if match is not None:
                                            groups = match.groupdict()
                                            fragment = groups.pop('branch0')
                                            field_value_3 = converters[3].convert(fragment)
                                            if field_value_3 is not None:
                                                fragment = groups.pop('branch1')
                                                field_value_4 = converters[4].convert(fragment)
                                                if field_value_4 is not None:
                                                    dict_groups_5 = groups
                                                    if path_len > 6:
                                                        if path[6] == 'part':
                                                            if path_len == 7:
                                                                params['org'] = path[2]
                                                                params['repo'] = path[3]
                                                                params['branch0'] = field_value_3
                                                                params['branch1'] = field_value_4
                                                                params.update(dict_groups_5)
                                                                return return_values[32]
                                        match = patterns[5].match(path[5])  # ^(?P<usr0>.+):(?P<branch0>.+)$
                                        if match is not None:
                                            groups = match.groupdict()
                                            fragment = groups.pop('branch0')
                                            field_value_3 = converters[5].convert(fragment)
                                            if field_value_3 is not None:
                                                dict_groups_4 = groups
                                                if path_len > 6:
                                                    if path[6] == 'full':
                                                        if path_len == 7:
                                                            params['org'] = path[2]
                                                            params['repo'] = path[3]
                                                            params['branch0'] = field_value_3
                                                            params.update(dict_groups_4)
                                                            return return_values[34]
                                                if path_len == 6:
                                                    params['org'] = path[2]
                                                    params['repo'] = path[3]
                                                    params['branch0'] = field_value_3
                                                    params.update(dict_groups_4)
                                                    return return_values[33]
                                    return None
                                return None
                            return None
                        return None
                    return None
                return None
            return None
        return None
    return None

.
current test PASSED/SKIPPED -- test_print_src in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 70.68301630020142s cumulative, 0.09568452835083008s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 70.71190571784973s cumulative, 0.02888941764831543s individual

.
current test PASSED/SKIPPED -- test_dead_segment in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 70.8018867969513s cumulative, 0.0899810791015625s individual

.
current test PASSED/SKIPPED -- test_literal in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 70.87873816490173s cumulative, 0.07685136795043945s individual

.
current test PASSED/SKIPPED -- test_converters_malformed_specification in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 70.96901106834412s cumulative, 0.09027290344238281s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 71.11448121070862s cumulative, 0.14547014236450195s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 71.140065908432s cumulative, 0.025584697723388672s individual

.
current test PASSED/SKIPPED -- test_converters_with_invalid_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 71.1581916809082s cumulative, 0.01812577247619629s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 71.17281579971313s cumulative, 0.01462411880493164s individual

.
current test PASSED/SKIPPED -- test_options_converters_invalid_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 71.18977642059326s cumulative, 0.016960620880126953s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 71.63605785369873s cumulative, 0.44628143310546875s individual

.
current test PASSED/SKIPPED -- test_malformed_pattern in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 72.26554703712463s cumulative, 0.6294891834259033s individual

.
current test PASSED/SKIPPED -- test_non_conflict in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 72.7171266078949s cumulative, 0.45157957077026367s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 72.97557759284973s cumulative, 0.258450984954834s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 73.12898063659668s cumulative, 0.15340304374694824s individual

.
current test PASSED/SKIPPED -- test_conflict in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 73.16133260726929s cumulative, 0.03235197067260742s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 73.17444372177124s cumulative, 0.013111114501953125s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 73.26317572593689s cumulative, 0.08873200416564941s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 73.30586171150208s cumulative, 0.04268598556518555s individual

.
current test PASSED/SKIPPED -- test_duplicate_field_names in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 73.31279110908508s cumulative, 0.0069293975830078125s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 73.3327043056488s cumulative, 0.019913196563720703s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 73.34981560707092s cumulative, 0.01711130142211914s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 73.38077974319458s cumulative, 0.030964136123657227s individual

.
current test PASSED/SKIPPED -- test_options_converters_invalid_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 73.40715551376343s cumulative, 0.026375770568847656s individual

.
current test PASSED/SKIPPED -- test_complex_alt in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 73.43850517272949s cumulative, 0.03134965896606445s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 73.44655275344849s cumulative, 0.00804758071899414s individual

.
current test PASSED/SKIPPED -- test_root_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 73.45184445381165s cumulative, 0.00529170036315918s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 73.48127484321594s cumulative, 0.029430389404296875s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 73.50847434997559s cumulative, 0.027199506759643555s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 73.52450013160706s cumulative, 0.016025781631469727s individual

.
current test PASSED/SKIPPED -- test_options_converters_update in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 73.55354499816895s cumulative, 0.02904486656188965s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 73.57179093360901s cumulative, 0.018245935440063477s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 73.58473515510559s cumulative, 0.012944221496582031s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 73.63144659996033s cumulative, 0.04671144485473633s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 73.65602779388428s cumulative, 0.024581193923950195s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 73.66454553604126s cumulative, 0.008517742156982422s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 73.6722240447998s cumulative, 0.007678508758544922s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 73.67803812026978s cumulative, 0.005814075469970703s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 73.70900177955627s cumulative, 0.030963659286499023s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 73.73467516899109s cumulative, 0.025673389434814453s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 73.76187682151794s cumulative, 0.02720165252685547s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 73.78622579574585s cumulative, 0.024348974227905273s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 73.82389616966248s cumulative, 0.03767037391662598s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 73.87213158607483s cumulative, 0.048235416412353516s individual

.
current test PASSED/SKIPPED -- test_not_str in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 73.90600109100342s cumulative, 0.03386950492858887s individual

.
current test PASSED/SKIPPED -- test_options_converters_invalid_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 73.97922468185425s cumulative, 0.07322359085083008s individual

.
current test PASSED/SKIPPED -- test_duplicate_field_names in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 74.0076093673706s cumulative, 0.028384685516357422s individual

.
current test PASSED/SKIPPED -- test_single_character_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 74.12902545928955s cumulative, 0.12141609191894531s individual

.
current test PASSED/SKIPPED -- test_capture_path_no_children in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 74.17675495147705s cumulative, 0.0477294921875s individual

.
current test PASSED/SKIPPED -- test_multivar in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 74.30998992919922s cumulative, 0.13323497772216797s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 74.36529588699341s cumulative, 0.05530595779418945s individual

.
current test PASSED/SKIPPED -- test_converters_with_invalid_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 74.43867421150208s cumulative, 0.07337832450866699s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 74.4917824268341s cumulative, 0.05310821533203125s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 74.61051177978516s cumulative, 0.1187293529510498s individual

.
current test PASSED/SKIPPED -- test_match_entire_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 74.6520848274231s cumulative, 0.04157304763793945s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 74.78228640556335s cumulative, 0.1302015781402588s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 74.88130736351013s cumulative, 0.09902095794677734s individual

.
current test PASSED/SKIPPED -- test_subsegment_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 75.01735544204712s cumulative, 0.1360480785369873s individual

.
current test PASSED/SKIPPED -- test_not_str in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 75.05651640892029s cumulative, 0.039160966873168945s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 75.13547086715698s cumulative, 0.07895445823669434s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 75.17394709587097s cumulative, 0.03847622871398926s individual

.
current test PASSED/SKIPPED -- test_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 75.29061150550842s cumulative, 0.11666440963745117s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 75.35772252082825s cumulative, 0.06711101531982422s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 75.47509145736694s cumulative, 0.11736893653869629s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 75.54769825935364s cumulative, 0.07260680198669434s individual

.
current test PASSED/SKIPPED -- test_user_regression_recipes in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 75.5838975906372s cumulative, 0.036199331283569336s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 75.70466637611389s cumulative, 0.12076878547668457s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 75.8127372264862s cumulative, 0.10807085037231445s individual

.
current test PASSED/SKIPPED -- test_converters in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 75.90895080566406s cumulative, 0.09621357917785645s individual

.
current test PASSED/SKIPPED -- test_converters in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 76.01255583763123s cumulative, 0.10360503196716309s individual

.
current test PASSED/SKIPPED -- test_options_converters_invalid_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 76.07028698921204s cumulative, 0.05773115158081055s individual

.
current test PASSED/SKIPPED -- test_non_conflict in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 76.13059759140015s cumulative, 0.06031060218811035s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 76.19698929786682s cumulative, 0.0663917064666748s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 76.23784494400024s cumulative, 0.04085564613342285s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 76.31289553642273s cumulative, 0.07505059242248535s individual

.
current test PASSED/SKIPPED -- test_override in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 76.45053553581238s cumulative, 0.13763999938964844s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 76.49676728248596s cumulative, 0.046231746673583984s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 76.610604763031s cumulative, 0.11383748054504395s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 76.68361639976501s cumulative, 0.07301163673400879s individual

.
current test PASSED/SKIPPED -- test_options_converters_invalid_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 76.75580191612244s cumulative, 0.07218551635742188s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 76.79642653465271s cumulative, 0.04062461853027344s individual

.
current test PASSED/SKIPPED -- test_capture_path_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 76.82604694366455s cumulative, 0.02962040901184082s individual

.
current test PASSED/SKIPPED -- test_converters in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 76.9465880393982s cumulative, 0.12054109573364258s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 76.98540449142456s cumulative, 0.03881645202636719s individual

.
current test PASSED/SKIPPED -- test_options_converters_invalid_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 77.0473153591156s cumulative, 0.06191086769104004s individual

.
current test PASSED/SKIPPED -- test_not_str in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 77.07663178443909s cumulative, 0.029316425323486328s individual

.
current test PASSED/SKIPPED -- test_options_converters_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 77.17839241027832s cumulative, 0.1017606258392334s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 77.28141927719116s cumulative, 0.1030268669128418s individual


tests/test_response_context.py .
current test PASSED/SKIPPED -- test_custom_response_context_factory in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_context.py: 77.301020860672s cumulative, 0.01960158348083496s individual

.
current test PASSED/SKIPPED -- test_custom_response_context in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_context.py: 77.3396155834198s cumulative, 0.038594722747802734s individual

.
current test PASSED/SKIPPED -- test_custom_response_context in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_context.py: 77.38095164299011s cumulative, 0.0413360595703125s individual

.
current test PASSED/SKIPPED -- test_custom_response_context_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_context.py: 77.41080689430237s cumulative, 0.02985525131225586s individual

.
current test PASSED/SKIPPED -- test_default_response_context in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_context.py: 77.42691206932068s cumulative, 0.016105175018310547s individual

.
current test PASSED/SKIPPED -- test_default_response_context in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_context.py: 77.44506430625916s cumulative, 0.018152236938476562s individual

.
current test PASSED/SKIPPED -- test_custom_response_context_factory in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_context.py: 77.4535596370697s cumulative, 0.008495330810546875s individual

.
current test PASSED/SKIPPED -- test_custom_response_context_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_context.py: 77.46150279045105s cumulative, 0.007943153381347656s individual


tests/test_boundedstream.py .
current test PASSED/SKIPPED -- test_not_writable in /home/kaiyaok2/PythonProjects/falcon/tests/test_boundedstream.py: 77.46761155128479s cumulative, 0.006108760833740234s individual


tests/test_wsgi.py .
current test PASSED/SKIPPED -- test_post_invalid_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi.py: 77.51205372810364s cumulative, 0.044442176818847656s individual

.
current test PASSED/SKIPPED -- test_post_read_bounded_stream in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi.py: 77.53380393981934s cumulative, 0.021750211715698242s individual

.
current test PASSED/SKIPPED -- test_put in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi.py: 77.55169415473938s cumulative, 0.017890214920043945s individual

.
current test PASSED/SKIPPED -- test_head_405 in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi.py: 77.56835675239563s cumulative, 0.01666259765625s individual

.
current test PASSED/SKIPPED -- test_post_read_bounded_stream_no_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi.py: 77.58277082443237s cumulative, 0.014414072036743164s individual

.
current test PASSED/SKIPPED -- test_post in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi.py: 77.60187315940857s cumulative, 0.01910233497619629s individual

.
current test PASSED/SKIPPED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi.py: 77.61571002006531s cumulative, 0.013836860656738281s individual


tests/asgi/test_asgi_servers.py s
current test PASSED/SKIPPED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 77.6675546169281s cumulative, 0.05184459686279297s individual

s
current test PASSED/SKIPPED -- test_disconnecting_client_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 77.70723080635071s cumulative, 0.03967618942260742s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]
E
current test FAILED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 93.6154568195343s cumulative, 15.908226013183594s individual

s
current test PASSED/SKIPPED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 93.66336059570312s cumulative, 0.04790377616882324s individual

s
current test PASSED/SKIPPED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 93.71345067024231s cumulative, 0.05009007453918457s individual


[Starting server process...]
E
current test FAILED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 99.95271849632263s cumulative, 6.239267826080322s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]
E
current test FAILED -- test_send_before_accept in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 116.401935338974s cumulative, 16.449216842651367s individual

s
current test PASSED/SKIPPED -- test_passing_path_params in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 116.4172375202179s cumulative, 0.015302181243896484s individual

s
current test PASSED/SKIPPED -- test_missing_responder in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 116.42897009849548s cumulative, 0.01173257827758789s individual

s
current test PASSED/SKIPPED -- test_close_code_on_unhandled_http_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 116.44852495193481s cumulative, 0.019554853439331055s individual

s
current test PASSED/SKIPPED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 116.45791101455688s cumulative, 0.009386062622070312s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]
E
current test FAILED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 132.0570945739746s cumulative, 15.599183559417725s individual

s
current test PASSED/SKIPPED -- test_recv_before_accept in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 132.07121801376343s cumulative, 0.01412343978881836s individual

s
current test PASSED/SKIPPED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 132.08258271217346s cumulative, 0.01136469841003418s individual

s
current test PASSED/SKIPPED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 132.09258246421814s cumulative, 0.009999752044677734s individual

s
current test PASSED/SKIPPED -- test_select_subprotocol_known in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 132.10189175605774s cumulative, 0.00930929183959961s individual

s
current test PASSED/SKIPPED -- test_select_subprotocol_unknown in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 132.11332273483276s cumulative, 0.011430978775024414s individual

s
current test PASSED/SKIPPED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 132.12295174598694s cumulative, 0.009629011154174805s individual

s
current test PASSED/SKIPPED -- test_close_code_on_unhandled_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 132.13157105445862s cumulative, 0.008619308471679688s individual

s
current test PASSED/SKIPPED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 132.13981127738953s cumulative, 0.008240222930908203s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]
E
current test FAILED -- test_recv_before_accept in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 147.69530749320984s cumulative, 15.555496215820312s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]
E
current test FAILED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 163.50313091278076s cumulative, 15.807823419570923s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]
E
current test FAILED -- test_passing_path_params in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 179.2016487121582s cumulative, 15.698517799377441s individual

s
current test PASSED/SKIPPED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 179.21247148513794s cumulative, 0.010822772979736328s individual

s
current test PASSED/SKIPPED -- test_select_subprotocol_known in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 179.2244415283203s cumulative, 0.011970043182373047s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]
E
current test FAILED -- test_missing_responder in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 195.58159518241882s cumulative, 16.35715365409851s individual

s
current test PASSED/SKIPPED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 195.72239756584167s cumulative, 0.14080238342285156s individual

s
current test PASSED/SKIPPED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 195.8556911945343s cumulative, 0.13329362869262695s individual

s
current test PASSED/SKIPPED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 195.99110865592957s cumulative, 0.13541746139526367s individual

s
current test PASSED/SKIPPED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 196.1342887878418s cumulative, 0.14318013191223145s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]
E
current test FAILED -- test_close_code_on_unhandled_http_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 211.7864272594452s cumulative, 15.652138471603394s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]
E
current test FAILED -- test_select_subprotocol_known in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 227.30707001686096s cumulative, 15.520642757415771s individual

s
current test PASSED/SKIPPED -- test_missing_responder in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 227.31662607192993s cumulative, 0.009556055068969727s individual

s
current test PASSED/SKIPPED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 227.3227026462555s cumulative, 0.0060765743255615234s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]
E
current test FAILED -- test_invalid_close_code in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 242.85551953315735s cumulative, 15.532816886901855s individual

s
current test PASSED/SKIPPED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 242.86724591255188s cumulative, 0.01172637939453125s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]
E
current test FAILED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 258.412415266037s cumulative, 15.545169353485107s individual

s
current test PASSED/SKIPPED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 258.42888498306274s cumulative, 0.016469717025756836s individual

s
current test PASSED/SKIPPED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 258.4388310909271s cumulative, 0.009946107864379883s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]
E
current test FAILED -- test_close_code_on_unhandled_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 274.11518836021423s cumulative, 15.67635726928711s individual

s
current test PASSED/SKIPPED -- test_close_code_on_unhandled_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 274.1227080821991s cumulative, 0.007519721984863281s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]
E
current test FAILED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 290.01296496391296s cumulative, 15.890256881713867s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]
E
current test FAILED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 306.00338077545166s cumulative, 15.990415811538696s individual

s
current test PASSED/SKIPPED -- test_invalid_close_code in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 306.0483145713806s cumulative, 0.04493379592895508s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]
E
current test FAILED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 321.83631205558777s cumulative, 15.787997484207153s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]
E
current test FAILED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 340.13979959487915s cumulative, 18.303487539291382s individual

s
current test PASSED/SKIPPED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 340.1700096130371s cumulative, 0.030210018157958984s individual

s
current test PASSED/SKIPPED -- test_select_subprotocol_unknown in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 340.19954538345337s cumulative, 0.029535770416259766s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]
E
current test FAILED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 355.68957710266113s cumulative, 15.490031719207764s individual

s
current test PASSED/SKIPPED -- test_passing_path_params in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 355.725599527359s cumulative, 0.03602242469787598s individual

s
current test PASSED/SKIPPED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 355.75897192955017s cumulative, 0.03337240219116211s individual

s
current test PASSED/SKIPPED -- test_disconnecting_client_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 355.7879800796509s cumulative, 0.029008150100708008s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]
E
current test FAILED -- test_disconnecting_client_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 366.626606464386s cumulative, 10.838626384735107s individual

s
current test PASSED/SKIPPED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 366.63927006721497s cumulative, 0.012663602828979492s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]
E
current test FAILED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 382.4190979003906s cumulative, 15.77982783317566s individual

s
current test PASSED/SKIPPED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 382.4310305118561s cumulative, 0.011932611465454102s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]
E
current test FAILED -- test_select_subprotocol_known in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 398.2610924243927s cumulative, 15.830061912536621s individual

s
current test PASSED/SKIPPED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 398.3221917152405s cumulative, 0.06109929084777832s individual

s
current test PASSED/SKIPPED -- test_invalid_close_code in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 398.33577847480774s cumulative, 0.013586759567260742s individual

s
current test PASSED/SKIPPED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 398.3450086116791s cumulative, 0.00923013687133789s individual

s
current test PASSED/SKIPPED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 398.352641582489s cumulative, 0.0076329708099365234s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]
E
current test FAILED -- test_select_subprotocol_unknown in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 413.9504370689392s cumulative, 15.597795486450195s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]
E
current test FAILED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 429.3769590854645s cumulative, 15.426522016525269s individual

s
current test PASSED/SKIPPED -- test_select_subprotocol_known in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 429.38953471183777s cumulative, 0.012575626373291016s individual

s
current test PASSED/SKIPPED -- test_send_before_accept in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 429.3992795944214s cumulative, 0.009744882583618164s individual

s
current test PASSED/SKIPPED -- test_send_before_accept in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 429.4103784561157s cumulative, 0.011098861694335938s individual

s
current test PASSED/SKIPPED -- test_select_subprotocol_known in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 429.4180681705475s cumulative, 0.007689714431762695s individual

s
current test PASSED/SKIPPED -- test_close_code_on_unhandled_http_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 429.42741560935974s cumulative, 0.00934743881225586s individual

s
current test PASSED/SKIPPED -- test_recv_before_accept in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 429.4354441165924s cumulative, 0.008028507232666016s individual

s
current test PASSED/SKIPPED -- test_put in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 429.4420893192291s cumulative, 0.00664520263671875s individual

s
current test PASSED/SKIPPED -- test_post_read_bounded_stream_no_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 429.4505043029785s cumulative, 0.008414983749389648s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]
E
current test FAILED -- test_post_multipart_form in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 444.9386124610901s cumulative, 15.488108158111572s individual

s
current test PASSED/SKIPPED -- test_sse in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 444.947767496109s cumulative, 0.009155035018920898s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]
E
current test FAILED -- test_post_read_bounded_stream in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 460.44454526901245s cumulative, 15.496777772903442s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]
E
current test FAILED -- test_post_multiple in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 476.4267222881317s cumulative, 15.982177019119263s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]
E
current test FAILED -- test_put in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 491.8867242336273s cumulative, 15.460001945495605s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]
E
current test FAILED -- test_post_invalid_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 507.6944913864136s cumulative, 15.807767152786255s individual

s
current test PASSED/SKIPPED -- test_post_invalid_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 507.72962760925293s cumulative, 0.03513622283935547s individual

s
current test PASSED/SKIPPED -- test_post_multiple in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 507.7622067928314s cumulative, 0.03257918357849121s individual

s
current test PASSED/SKIPPED -- test_head_405 in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 507.79611682891846s cumulative, 0.03391003608703613s individual

s
current test PASSED/SKIPPED -- test_post_multiple in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 507.8286807537079s cumulative, 0.03256392478942871s individual

s
current test PASSED/SKIPPED -- test_sse_client_disconnects_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 507.86345410346985s cumulative, 0.03477334976196289s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]
E
current test FAILED -- test_post_read_bounded_stream_no_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 523.4050858020782s cumulative, 15.541631698608398s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]
E
current test FAILED -- test_sse_client_disconnects_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 539.0522637367249s cumulative, 15.647177934646606s individual

s
current test PASSED/SKIPPED -- test_sse_client_disconnects_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 539.0851299762726s cumulative, 0.03286623954772949s individual

s
current test PASSED/SKIPPED -- test_sse in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 539.1168658733368s cumulative, 0.031735897064208984s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]
E
current test FAILED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 555.0827009677887s cumulative, 15.965835094451904s individual

s
current test PASSED/SKIPPED -- test_post_read_bounded_stream in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 555.1178381443024s cumulative, 0.035137176513671875s individual

s
current test PASSED/SKIPPED -- test_head_405 in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 555.1592907905579s cumulative, 0.041452646255493164s individual

s
current test PASSED/SKIPPED -- test_post_read_bounded_stream_no_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 555.2000398635864s cumulative, 0.04074907302856445s individual

s
current test PASSED/SKIPPED -- test_stream_chunked_request in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 555.2370657920837s cumulative, 0.03702592849731445s individual

s
current test PASSED/SKIPPED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 555.2778437137604s cumulative, 0.04077792167663574s individual

s
current test PASSED/SKIPPED -- test_post_read_bounded_stream_large in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 555.338707447052s cumulative, 0.06086373329162598s individual

s
current test PASSED/SKIPPED -- test_stream_chunked_request in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 555.3783700466156s cumulative, 0.03966259956359863s individual

s
current test PASSED/SKIPPED -- test_post_invalid_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 555.4166736602783s cumulative, 0.03830361366271973s individual

s
current test PASSED/SKIPPED -- test_post_read_bounded_stream in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 555.4544847011566s cumulative, 0.0378110408782959s individual

s
current test PASSED/SKIPPED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 555.4933769702911s cumulative, 0.038892269134521484s individual

s
current test PASSED/SKIPPED -- test_post_read_bounded_stream_large in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 555.5318658351898s cumulative, 0.03848886489868164s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]
E
current test FAILED -- test_post_read_bounded_stream_large in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 571.1587281227112s cumulative, 15.626862287521362s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]
E
current test FAILED -- test_sse in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 581.8247363567352s cumulative, 10.666008234024048s individual

s
current test PASSED/SKIPPED -- test_post_multipart_form in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 581.8366975784302s cumulative, 0.011961221694946289s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]
E
current test FAILED -- test_head_405 in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 598.0540640354156s cumulative, 16.217366456985474s individual

s
current test PASSED/SKIPPED -- test_post_multipart_form in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 598.0651807785034s cumulative, 0.011116743087768555s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]
E
current test FAILED -- test_stream_chunked_request in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 613.6975991725922s cumulative, 15.632418394088745s individual

s
current test PASSED/SKIPPED -- test_put in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 613.7072508335114s cumulative, 0.009651660919189453s individual


tests/test_cmd_inspect_app.py F
current test FAILED -- test_inspect in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 613.9219481945038s cumulative, 0.21469736099243164s individual

F
current test FAILED -- test_inspect in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 614.1003143787384s cumulative, 0.17836618423461914s individual

F
current test FAILED -- test_inspect in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 614.7507920265198s cumulative, 0.6504776477813721s individual

F
current test FAILED -- test_routes_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 615.5491712093353s cumulative, 0.7983791828155518s individual

F
current test FAILED -- test_routes_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 616.3230288028717s cumulative, 0.773857593536377s individual

F
current test FAILED -- test_routes_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 617.0924072265625s cumulative, 0.7693784236907959s individual

F
current test FAILED -- test_inspect in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 617.8017976284027s cumulative, 0.70939040184021s individual

F
current test FAILED -- test_routes_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 618.478277683258s cumulative, 0.6764800548553467s individual

.
current test PASSED/SKIPPED -- test_route_main in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 618.4832339286804s cumulative, 0.004956245422363281s individual

.
current test PASSED/SKIPPED -- test_make_parser_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 618.4913096427917s cumulative, 0.008075714111328125s individual

.
current test PASSED/SKIPPED -- test_make_parser in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 618.4970695972443s cumulative, 0.0057599544525146484s individual

.
current test PASSED/SKIPPED -- test_make_parser in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 618.5113210678101s cumulative, 0.014251470565795898s individual

.
current test PASSED/SKIPPED -- test_make_parser in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 618.6445941925049s cumulative, 0.13327312469482422s individual

.
current test PASSED/SKIPPED -- test_make_parser in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 618.7514805793762s cumulative, 0.10688638687133789s individual

.
current test PASSED/SKIPPED -- test_make_parser in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 618.8622951507568s cumulative, 0.11081457138061523s individual

.
current test PASSED/SKIPPED -- test_make_parser in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 618.966813325882s cumulative, 0.10451817512512207s individual

.
current test PASSED/SKIPPED -- test_make_parser in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 619.0793826580048s cumulative, 0.11256933212280273s individual

.
current test PASSED/SKIPPED -- test_make_parser in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 619.1981811523438s cumulative, 0.11879849433898926s individual

F
current test FAILED -- test_load_app_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 620.5738484859467s cumulative, 1.3756673336029053s individual

F
current test FAILED -- test_load_app_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 620.7522964477539s cumulative, 0.17844796180725098s individual

F
current test FAILED -- test_load_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 620.9263603687286s cumulative, 0.17406392097473145s individual

F
current test FAILED -- test_load_app_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 621.1451888084412s cumulative, 0.21882843971252441s individual

.
current test PASSED/SKIPPED -- test_load_app_module_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 621.1858897209167s cumulative, 0.04070091247558594s individual

F
current test FAILED -- test_load_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 621.9297571182251s cumulative, 0.7438673973083496s individual


tests/test_buffered_reader.py .
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 621.9517459869385s cumulative, 0.021988868713378906s individual

.
current test PASSED/SKIPPED -- test_irregular_large_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 632.9399116039276s cumulative, 10.988165616989136s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 632.9645307064056s cumulative, 0.024619102478027344s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 632.9806487560272s cumulative, 0.01611804962158203s individual

.
current test PASSED/SKIPPED -- test_readlines_hint in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 633.0050113201141s cumulative, 0.024362564086914062s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 633.0283827781677s cumulative, 0.023371458053588867s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 633.0491533279419s cumulative, 0.020770549774169922s individual

.
current test PASSED/SKIPPED -- test_readline in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 633.066808462143s cumulative, 0.017655134201049805s individual

.
current test PASSED/SKIPPED -- test_bounded_read in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 633.0832226276398s cumulative, 0.016414165496826172s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 633.1037664413452s cumulative, 0.020543813705444336s individual

.
current test PASSED/SKIPPED -- test_readlines_hint in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 633.1278936862946s cumulative, 0.02412724494934082s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 633.1520617008209s cumulative, 0.024168014526367188s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 633.1738426685333s cumulative, 0.021780967712402344s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 633.1958110332489s cumulative, 0.021968364715576172s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 633.2178792953491s cumulative, 0.022068262100219727s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 633.2399928569794s cumulative, 0.022113561630249023s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 633.2625901699066s cumulative, 0.022597312927246094s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 633.2815084457397s cumulative, 0.018918275833129883s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 633.3020415306091s cumulative, 0.020533084869384766s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 633.3216934204102s cumulative, 0.01965188980102539s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 633.3396933078766s cumulative, 0.017999887466430664s individual

.
current test PASSED/SKIPPED -- test_irregular_large_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 644.6589021682739s cumulative, 11.319208860397339s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 644.8111140727997s cumulative, 0.15221190452575684s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 644.965883731842s cumulative, 0.1547696590423584s individual

.
current test PASSED/SKIPPED -- test_readline_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 645.07617354393s cumulative, 0.1102898120880127s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 645.2308611869812s cumulative, 0.15468764305114746s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 645.3796198368073s cumulative, 0.1487586498260498s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 645.5223469734192s cumulative, 0.14272713661193848s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 645.5301563739777s cumulative, 0.00780940055847168s individual

.
current test PASSED/SKIPPED -- test_pipe_until_without_destination in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 645.898829460144s cumulative, 0.36867308616638184s individual

.
current test PASSED/SKIPPED -- test_duck_compatibility_with_io_base in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 645.9036581516266s cumulative, 0.004828691482543945s individual

.
current test PASSED/SKIPPED -- test_fragmented_reads in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 653.9458386898041s cumulative, 8.04218053817749s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 653.965035200119s cumulative, 0.019196510314941406s individual

.
current test PASSED/SKIPPED -- test_read_until_missing_delimiter in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 653.9756009578705s cumulative, 0.010565757751464844s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 653.9814105033875s cumulative, 0.0058095455169677734s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 653.987699508667s cumulative, 0.006289005279541016s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 653.9936876296997s cumulative, 0.005988121032714844s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 653.9995853900909s cumulative, 0.0058977603912353516s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 654.0059304237366s cumulative, 0.006345033645629883s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 654.0124912261963s cumulative, 0.006560802459716797s individual

.
current test PASSED/SKIPPED -- test_readlines_hint in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 654.0192756652832s cumulative, 0.0067844390869140625s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 654.0256185531616s cumulative, 0.006342887878417969s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 654.0320525169373s cumulative, 0.006433963775634766s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 654.0376596450806s cumulative, 0.005607128143310547s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 662.844265460968s cumulative, 8.806605815887451s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 662.8490388393402s cumulative, 0.004773378372192383s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 662.852579832077s cumulative, 0.0035409927368164062s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 662.8557779788971s cumulative, 0.0031981468200683594s individual

.
current test PASSED/SKIPPED -- test_read_until_delimiter_size_check in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 662.858966588974s cumulative, 0.003188610076904297s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 662.8622903823853s cumulative, 0.003323793411254883s individual

.
current test PASSED/SKIPPED -- test_readlines in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 662.866589307785s cumulative, 0.0042989253997802734s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 662.8698391914368s cumulative, 0.0032498836517333984s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 662.8727395534515s cumulative, 0.002900362014770508s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 662.8759052753448s cumulative, 0.003165721893310547s individual

.
current test PASSED/SKIPPED -- test_consume_delimiter in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 662.8794572353363s cumulative, 0.003551959991455078s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 662.8827767372131s cumulative, 0.0033195018768310547s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 662.8859124183655s cumulative, 0.00313568115234375s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 662.8941032886505s cumulative, 0.00819087028503418s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 662.900288105011s cumulative, 0.006184816360473633s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 662.9245464801788s cumulative, 0.02425837516784668s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 662.9487361907959s cumulative, 0.02418971061706543s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 662.9757602214813s cumulative, 0.027024030685424805s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 663.000691652298s cumulative, 0.02493143081665039s individual

.
current test PASSED/SKIPPED -- test_pipe in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 663.0283546447754s cumulative, 0.027662992477416992s individual

.
current test PASSED/SKIPPED -- test_readlines_hint in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 663.054705619812s cumulative, 0.026350975036621094s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 663.0763947963715s cumulative, 0.021689176559448242s individual

.
current test PASSED/SKIPPED -- test_exhaust in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 663.0984542369843s cumulative, 0.02205944061279297s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 663.1235463619232s cumulative, 0.025092124938964844s individual

.
current test PASSED/SKIPPED -- test_readlines_hint in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 663.1492581367493s cumulative, 0.025711774826049805s individual

.
current test PASSED/SKIPPED -- test_pipe_until in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 666.0917479991913s cumulative, 2.9424898624420166s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 666.1118512153625s cumulative, 0.02010321617126465s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 666.130049943924s cumulative, 0.018198728561401367s individual

.
current test PASSED/SKIPPED -- test_peek in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 666.1482837200165s cumulative, 0.018233776092529297s individual

.
current test PASSED/SKIPPED -- test_peek_eof in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 666.1644430160522s cumulative, 0.0161592960357666s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 666.1850101947784s cumulative, 0.02056717872619629s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 666.2037518024445s cumulative, 0.018741607666015625s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 666.2234580516815s cumulative, 0.019706249237060547s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 666.2413115501404s cumulative, 0.017853498458862305s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 666.2587745189667s cumulative, 0.017462968826293945s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 666.2766036987305s cumulative, 0.017829179763793945s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 666.297837972641s cumulative, 0.02123427391052246s individual


tests/test_media_handlers.py .
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 666.3539090156555s cumulative, 0.05607104301452637s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 666.3740310668945s cumulative, 0.020122051239013672s individual

.
current test PASSED/SKIPPED -- test_async_methods_not_overridden in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 666.4209501743317s cumulative, 0.04691910743713379s individual

.
current test PASSED/SKIPPED -- test_json_err_no_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 666.4883148670197s cumulative, 0.06736469268798828s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 666.5106399059296s cumulative, 0.02232503890991211s individual

.
current test PASSED/SKIPPED -- test_sync_methods_not_overridden in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 666.5898671150208s cumulative, 0.07922720909118652s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 666.6346139907837s cumulative, 0.04474687576293945s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 666.657883644104s cumulative, 0.0232696533203125s individual

.
current test PASSED/SKIPPED -- test_deserialization_raises in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 666.7092626094818s cumulative, 0.05137896537780762s individual

.
current test PASSED/SKIPPED -- test_deserialization_raises in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 666.744146823883s cumulative, 0.03488421440124512s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 666.8228590488434s cumulative, 0.07871222496032715s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 666.8381824493408s cumulative, 0.015323400497436523s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 666.8608770370483s cumulative, 0.02269458770751953s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 666.8808860778809s cumulative, 0.02000904083251953s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 666.8885385990143s cumulative, 0.0076525211334228516s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 666.8937184810638s cumulative, 0.005179882049560547s individual

.
current test PASSED/SKIPPED -- test_json_err_no_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 666.9301426410675s cumulative, 0.03642416000366211s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 666.9645571708679s cumulative, 0.03441452980041504s individual

.
current test PASSED/SKIPPED -- test_defaultError in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 666.9890587329865s cumulative, 0.024501562118530273s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 667.0227038860321s cumulative, 0.0336451530456543s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 667.0887181758881s cumulative, 0.06601428985595703s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 667.0969021320343s cumulative, 0.008183956146240234s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 667.105376958847s cumulative, 0.00847482681274414s individual

.
current test PASSED/SKIPPED -- test_sync_methods_not_overridden in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 667.1397707462311s cumulative, 0.0343937873840332s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 667.1438286304474s cumulative, 0.004057884216308594s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 667.2186028957367s cumulative, 0.07477426528930664s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 667.4270331859589s cumulative, 0.20843029022216797s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 667.6366879940033s cumulative, 0.2096548080444336s individual

.
current test PASSED/SKIPPED -- test_json_err_no_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 668.0230948925018s cumulative, 0.38640689849853516s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 668.2319233417511s cumulative, 0.20882844924926758s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 668.5554585456848s cumulative, 0.3235352039337158s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 668.6678729057312s cumulative, 0.11241436004638672s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 668.6733360290527s cumulative, 0.005463123321533203s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 668.6862423419952s cumulative, 0.012906312942504883s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 668.7131836414337s cumulative, 0.026941299438476562s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 668.7753582000732s cumulative, 0.06217455863952637s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 668.7870316505432s cumulative, 0.011673450469970703s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 668.8122906684875s cumulative, 0.025259017944335938s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 668.8285956382751s cumulative, 0.016304969787597656s individual

.
current test PASSED/SKIPPED -- test_deserialization_raises in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 668.8433995246887s cumulative, 0.014803886413574219s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 668.847989320755s cumulative, 0.00458979606628418s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 668.852367401123s cumulative, 0.004378080368041992s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 668.8614158630371s cumulative, 0.0090484619140625s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 668.8773427009583s cumulative, 0.015926837921142578s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 668.881418466568s cumulative, 0.004075765609741211s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 668.8944911956787s cumulative, 0.013072729110717773s individual

.
current test PASSED/SKIPPED -- test_deserialization_raises in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 668.904381275177s cumulative, 0.009890079498291016s individual

.
current test PASSED/SKIPPED -- test_deserialization_raises in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 668.9292089939117s cumulative, 0.02482771873474121s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 668.9339420795441s cumulative, 0.004733085632324219s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 668.9433410167694s cumulative, 0.009398937225341797s individual

.
current test PASSED/SKIPPED -- test_async_handler_returning_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 668.9501962661743s cumulative, 0.0068552494049072266s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 668.9580013751984s cumulative, 0.0078051090240478516s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 668.96173787117s cumulative, 0.0037364959716796875s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 668.970773935318s cumulative, 0.009036064147949219s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 668.9772508144379s cumulative, 0.006476879119873047s individual

.
current test PASSED/SKIPPED -- test_deserialization_raises in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 668.9844505786896s cumulative, 0.007199764251708984s individual

.
current test PASSED/SKIPPED -- test_deserialization_raises in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 668.991128206253s cumulative, 0.0066776275634765625s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 668.996267080307s cumulative, 0.005138874053955078s individual

.
current test PASSED/SKIPPED -- test_json_err_no_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 669.0029423236847s cumulative, 0.006675243377685547s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 669.0070767402649s cumulative, 0.004134416580200195s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 669.0105884075165s cumulative, 0.003511667251586914s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 669.0176548957825s cumulative, 0.007066488265991211s individual

.
current test PASSED/SKIPPED -- test_deserialization_raises in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 669.0285928249359s cumulative, 0.010937929153442383s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 669.0415554046631s cumulative, 0.012962579727172852s individual


tests/test_response_body.py .
current test PASSED/SKIPPED -- test_content_length_not_set_when_streaming_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 669.0492751598358s cumulative, 0.007719755172729492s individual

.
current test PASSED/SKIPPED -- test_content_length_not_set_when_streaming_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 669.0549864768982s cumulative, 0.00571131706237793s individual

.
current test PASSED/SKIPPED -- test_response_repr in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 669.0587372779846s cumulative, 0.0037508010864257812s individual

.
current test PASSED/SKIPPED -- test_content_length_set_on_head_with_no_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 669.0641086101532s cumulative, 0.0053713321685791016s individual

.
current test PASSED/SKIPPED -- test_response_repr in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 669.0681002140045s cumulative, 0.003991603851318359s individual

.
current test PASSED/SKIPPED -- test_response_body_rendition_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 669.0855414867401s cumulative, 0.017441272735595703s individual

.
current test PASSED/SKIPPED -- test_unsupported_response_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 669.0927886962891s cumulative, 0.007247209548950195s individual

.
current test PASSED/SKIPPED -- test_response_body_rendition_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 669.1000235080719s cumulative, 0.007234811782836914s individual

.
current test PASSED/SKIPPED -- test_append_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 669.1041719913483s cumulative, 0.0041484832763671875s individual

.
current test PASSED/SKIPPED -- test_content_length_not_set_when_streaming_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 669.1112184524536s cumulative, 0.00704646110534668s individual

.
current test PASSED/SKIPPED -- test_content_length_set_on_head_with_no_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 669.1225700378418s cumulative, 0.011351585388183594s individual

.
current test PASSED/SKIPPED -- test_unsupported_response_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 669.1358742713928s cumulative, 0.01330423355102539s individual

.
current test PASSED/SKIPPED -- test_append_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 669.1413090229034s cumulative, 0.005434751510620117s individual

.
current test PASSED/SKIPPED -- test_content_length_not_set_when_streaming_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 669.1927433013916s cumulative, 0.05143427848815918s individual


tests/test_request_attrs.py .
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 669.2396955490112s cumulative, 0.046952247619628906s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 669.2854063510895s cumulative, 0.04571080207824707s individual

.
current test PASSED/SKIPPED -- test_scheme_https in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 669.3234741687775s cumulative, 0.03806781768798828s individual

.
current test PASSED/SKIPPED -- test_nonlatin_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 669.3597800731659s cumulative, 0.036305904388427734s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 669.4025273323059s cumulative, 0.04274725914001465s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 669.4465744495392s cumulative, 0.04404711723327637s individual

.
current test PASSED/SKIPPED -- test_date in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 669.4860906600952s cumulative, 0.03951621055603027s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 669.5191416740417s cumulative, 0.0330510139465332s individual

.
current test PASSED/SKIPPED -- test_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 669.5520796775818s cumulative, 0.03293800354003906s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 669.5849289894104s cumulative, 0.03284931182861328s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 669.6201934814453s cumulative, 0.03526449203491211s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 669.6551287174225s cumulative, 0.03493523597717285s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 669.6921141147614s cumulative, 0.03698539733886719s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 669.7306816577911s cumulative, 0.038567543029785156s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 669.7661242485046s cumulative, 0.03544259071350098s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 669.8166720867157s cumulative, 0.05054783821105957s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 669.8671023845673s cumulative, 0.0504302978515625s individual

.
current test PASSED/SKIPPED -- test_date in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 669.9156882762909s cumulative, 0.04858589172363281s individual

.
current test PASSED/SKIPPED -- test_client_accepts in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 669.9736423492432s cumulative, 0.05795407295227051s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 670.0194809436798s cumulative, 0.04583859443664551s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 670.0643684864044s cumulative, 0.044887542724609375s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 670.109162569046s cumulative, 0.04479408264160156s individual

.
current test PASSED/SKIPPED -- test_netloc_from_env in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 670.1577143669128s cumulative, 0.04855179786682129s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 670.2032563686371s cumulative, 0.045542001724243164s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 670.2528755664825s cumulative, 0.049619197845458984s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 670.305600643158s cumulative, 0.05272507667541504s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 670.3638172149658s cumulative, 0.05821657180786133s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 670.4247777462006s cumulative, 0.06096053123474121s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 670.4752917289734s cumulative, 0.05051398277282715s individual

.
current test PASSED/SKIPPED -- test_empty in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 670.5109622478485s cumulative, 0.03567051887512207s individual

.
current test PASSED/SKIPPED -- test_etag_parsing_helper in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 670.5487248897552s cumulative, 0.03776264190673828s individual

.
current test PASSED/SKIPPED -- test_date_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 670.5917708873749s cumulative, 0.043045997619628906s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 670.6353693008423s cumulative, 0.04359841346740723s individual

.
current test PASSED/SKIPPED -- test_etag_parsing_helper in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 670.7063126564026s cumulative, 0.07094335556030273s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 670.7529053688049s cumulative, 0.04659271240234375s individual

.
current test PASSED/SKIPPED -- test_client_accepts_bogus in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 670.7963035106659s cumulative, 0.043398141860961914s individual

.
current test PASSED/SKIPPED -- test_date_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 670.8385491371155s cumulative, 0.04224562644958496s individual

.
current test PASSED/SKIPPED -- test_netloc_default_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 670.8799178600311s cumulative, 0.041368722915649414s individual

.
current test PASSED/SKIPPED -- test_bogus_content_length_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 670.9179236888885s cumulative, 0.038005828857421875s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 670.963315486908s cumulative, 0.04539179801940918s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 671.0022656917572s cumulative, 0.038950204849243164s individual

.
current test PASSED/SKIPPED -- test_uri in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 671.0320436954498s cumulative, 0.029778003692626953s individual

.
current test PASSED/SKIPPED -- test_reconstruct_url in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 671.0620334148407s cumulative, 0.02998971939086914s individual

.
current test PASSED/SKIPPED -- test_date_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 671.1035676002502s cumulative, 0.0415341854095459s individual

.
current test PASSED/SKIPPED -- test_netloc_nondefault_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 671.141354560852s cumulative, 0.03778696060180664s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 671.1776509284973s cumulative, 0.03629636764526367s individual

.
current test PASSED/SKIPPED -- test_port_explicit in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 671.2106728553772s cumulative, 0.03302192687988281s individual

.
current test PASSED/SKIPPED -- test_date in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 671.2511577606201s cumulative, 0.04048490524291992s individual

.
current test PASSED/SKIPPED -- test_netloc_from_env in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 671.2871770858765s cumulative, 0.036019325256347656s individual

.
current test PASSED/SKIPPED -- test_nonlatin_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 671.3269309997559s cumulative, 0.03975391387939453s individual

.
current test PASSED/SKIPPED -- test_port_explicit in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 671.3596384525299s cumulative, 0.03270745277404785s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 671.3949363231659s cumulative, 0.03529787063598633s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 671.4244604110718s cumulative, 0.02952408790588379s individual

.
current test PASSED/SKIPPED -- test_uri_http_1_0 in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 671.4520678520203s cumulative, 0.027607440948486328s individual

.
current test PASSED/SKIPPED -- test_date_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 671.4812562465668s cumulative, 0.02918839454650879s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 671.5079352855682s cumulative, 0.026679039001464844s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 671.5355515480042s cumulative, 0.027616262435913086s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 671.5664880275726s cumulative, 0.030936479568481445s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 671.605179309845s cumulative, 0.03869128227233887s individual

.
current test PASSED/SKIPPED -- test_relative_uri in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 671.6364803314209s cumulative, 0.031301021575927734s individual

.
current test PASSED/SKIPPED -- test_content_length_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 671.6600925922394s cumulative, 0.023612260818481445s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 671.6749165058136s cumulative, 0.01482391357421875s individual

.
current test PASSED/SKIPPED -- test_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 671.7146375179291s cumulative, 0.039721012115478516s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 671.7620499134064s cumulative, 0.04741239547729492s individual

.
current test PASSED/SKIPPED -- test_client_accepts_props in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 671.8066787719727s cumulative, 0.04462885856628418s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 671.8456003665924s cumulative, 0.03892159461975098s individual

.
current test PASSED/SKIPPED -- test_app_present in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 671.8591861724854s cumulative, 0.013585805892944336s individual

.
current test PASSED/SKIPPED -- test_netloc_from_env in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 671.8709247112274s cumulative, 0.01173853874206543s individual

.
current test PASSED/SKIPPED -- test_date_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 671.8835155963898s cumulative, 0.012590885162353516s individual

.
current test PASSED/SKIPPED -- test_missing_attribute_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 671.8920087814331s cumulative, 0.008493185043334961s individual

.
current test PASSED/SKIPPED -- test_bogus_content_length_nan in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 672.032949924469s cumulative, 0.14094114303588867s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 672.1936869621277s cumulative, 0.1607370376586914s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 672.3757462501526s cumulative, 0.18205928802490234s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 672.5508484840393s cumulative, 0.17510223388671875s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 672.7173833847046s cumulative, 0.1665349006652832s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 672.869332075119s cumulative, 0.1519486904144287s individual

.
current test PASSED/SKIPPED -- test_uri in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 672.9945311546326s cumulative, 0.1251990795135498s individual

.
current test PASSED/SKIPPED -- test_client_prefers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.1451349258423s cumulative, 0.1506037712097168s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.286084651947s cumulative, 0.14094972610473633s individual

.
current test PASSED/SKIPPED -- test_empty in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.4143958091736s cumulative, 0.1283111572265625s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.4282767772675s cumulative, 0.01388096809387207s individual

.
current test PASSED/SKIPPED -- test_subdomain in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.4508790969849s cumulative, 0.022602319717407227s individual

.
current test PASSED/SKIPPED -- test_port_explicit in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.4695112705231s cumulative, 0.018632173538208008s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.5027301311493s cumulative, 0.0332188606262207s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.5103178024292s cumulative, 0.0075876712799072266s individual

.
current test PASSED/SKIPPED -- test_netloc_default_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.516125202179s cumulative, 0.005807399749755859s individual

.
current test PASSED/SKIPPED -- test_scheme_https in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.5222754478455s cumulative, 0.006150245666503906s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.5290081501007s cumulative, 0.0067327022552490234s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.535920381546s cumulative, 0.0069122314453125s individual

.
current test PASSED/SKIPPED -- test_scheme_https in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.5409717559814s cumulative, 0.005051374435424805s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.5466165542603s cumulative, 0.005644798278808594s individual

.
current test PASSED/SKIPPED -- test_content_length_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.5590777397156s cumulative, 0.012461185455322266s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.5657193660736s cumulative, 0.0066416263580322266s individual

.
current test PASSED/SKIPPED -- test_app_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.5706977844238s cumulative, 0.0049784183502197266s individual

.
current test PASSED/SKIPPED -- test_date_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.5772309303284s cumulative, 0.006533145904541016s individual

.
current test PASSED/SKIPPED -- test_subdomain in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.5837769508362s cumulative, 0.0065460205078125s individual

.
current test PASSED/SKIPPED -- test_date_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.5889835357666s cumulative, 0.005206584930419922s individual

.
current test PASSED/SKIPPED -- test_scheme_https in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.5939309597015s cumulative, 0.0049474239349365234s individual

.
current test PASSED/SKIPPED -- test_netloc_default_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.5992562770844s cumulative, 0.0053253173828125s individual

.
current test PASSED/SKIPPED -- test_bogus_content_length_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.604679107666s cumulative, 0.005422830581665039s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.6107923984528s cumulative, 0.006113290786743164s individual

.
current test PASSED/SKIPPED -- test_netloc_nondefault_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.6170287132263s cumulative, 0.00623631477355957s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.6230549812317s cumulative, 0.006026268005371094s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.6290075778961s cumulative, 0.005952596664428711s individual

.
current test PASSED/SKIPPED -- test_nonlatin_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.6353094577789s cumulative, 0.0063018798828125s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.6415424346924s cumulative, 0.0062329769134521484s individual

.
current test PASSED/SKIPPED -- test_netloc_nondefault_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.646755695343s cumulative, 0.005213260650634766s individual

.
current test PASSED/SKIPPED -- test_nonlatin_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.6514263153076s cumulative, 0.004670619964599609s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.6572377681732s cumulative, 0.005811452865600586s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.6631536483765s cumulative, 0.00591588020324707s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.6691150665283s cumulative, 0.005961418151855469s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.6745884418488s cumulative, 0.00547337532043457s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.680722951889s cumulative, 0.006134510040283203s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.6859307289124s cumulative, 0.00520777702331543s individual

.
current test PASSED/SKIPPED -- test_empty_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.6906151771545s cumulative, 0.0046844482421875s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.6966202259064s cumulative, 0.006005048751831055s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.7023363113403s cumulative, 0.005716085433959961s individual

.
current test PASSED/SKIPPED -- test_uri_https in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.7068319320679s cumulative, 0.0044956207275390625s individual

.
current test PASSED/SKIPPED -- test_uri_http_1_0 in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.7122724056244s cumulative, 0.005440473556518555s individual

.
current test PASSED/SKIPPED -- test_netloc_nondefault_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.7176449298859s cumulative, 0.005372524261474609s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.7226192951202s cumulative, 0.004974365234375s individual

.
current test PASSED/SKIPPED -- test_range_unit in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.7282011508942s cumulative, 0.005581855773925781s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.7332220077515s cumulative, 0.005020856857299805s individual

.
current test PASSED/SKIPPED -- test_date_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.7377090454102s cumulative, 0.004487037658691406s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.7430574893951s cumulative, 0.0053484439849853516s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.7482590675354s cumulative, 0.005201578140258789s individual

.
current test PASSED/SKIPPED -- test_app_present in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.7527763843536s cumulative, 0.004517316818237305s individual

.
current test PASSED/SKIPPED -- test_date in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.7581653594971s cumulative, 0.005388975143432617s individual

.
current test PASSED/SKIPPED -- test_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.7629718780518s cumulative, 0.0048065185546875s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.7679233551025s cumulative, 0.00495147705078125s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.773243188858s cumulative, 0.005319833755493164s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.778728723526s cumulative, 0.00548553466796875s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.7832295894623s cumulative, 0.004500865936279297s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.7880802154541s cumulative, 0.004850625991821289s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.7930450439453s cumulative, 0.0049648284912109375s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.7974750995636s cumulative, 0.004430055618286133s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.8041532039642s cumulative, 0.006678104400634766s individual

.
current test PASSED/SKIPPED -- test_host in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.8174743652344s cumulative, 0.013321161270141602s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.8512020111084s cumulative, 0.03372764587402344s individual

.
current test PASSED/SKIPPED -- test_netloc_nondefault_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.8852934837341s cumulative, 0.03409147262573242s individual

.
current test PASSED/SKIPPED -- test_netloc_from_env in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.9200949668884s cumulative, 0.034801483154296875s individual

.
current test PASSED/SKIPPED -- test_nonlatin_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.9542331695557s cumulative, 0.03413820266723633s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 673.9902470111847s cumulative, 0.03601384162902832s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 674.0267705917358s cumulative, 0.03652358055114746s individual

.
current test PASSED/SKIPPED -- test_etag_parsing_helper in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 674.0585613250732s cumulative, 0.031790733337402344s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 674.1040210723877s cumulative, 0.045459747314453125s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 674.1414752006531s cumulative, 0.03745412826538086s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 674.1759555339813s cumulative, 0.03448033332824707s individual

.
current test PASSED/SKIPPED -- test_uri_https in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 674.2100987434387s cumulative, 0.03414320945739746s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 674.2435948848724s cumulative, 0.03349614143371582s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 674.2947685718536s cumulative, 0.05117368698120117s individual

.
current test PASSED/SKIPPED -- test_port_explicit in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 674.3251440525055s cumulative, 0.03037548065185547s individual

.
current test PASSED/SKIPPED -- test_scheme_https in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 674.3563170433044s cumulative, 0.031172990798950195s individual

.
current test PASSED/SKIPPED -- test_date in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 674.3955652713776s cumulative, 0.03924822807312012s individual

.
current test PASSED/SKIPPED -- test_nonlatin_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 674.4317634105682s cumulative, 0.03619813919067383s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 674.4725723266602s cumulative, 0.040808916091918945s individual

.
current test PASSED/SKIPPED -- test_host in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 674.5015180110931s cumulative, 0.0289456844329834s individual

.
current test PASSED/SKIPPED -- test_date_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 674.5333850383759s cumulative, 0.031867027282714844s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 674.5665187835693s cumulative, 0.033133745193481445s individual

.
current test PASSED/SKIPPED -- test_bogus_content_length_nan in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 674.5974817276001s cumulative, 0.03096294403076172s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 674.6298515796661s cumulative, 0.03236985206604004s individual

.
current test PASSED/SKIPPED -- test_netloc_from_env in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 674.6548211574554s cumulative, 0.02496957778930664s individual

.
current test PASSED/SKIPPED -- test_etag_is_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 674.6797947883606s cumulative, 0.024973630905151367s individual

.
current test PASSED/SKIPPED -- test_date in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 674.7100203037262s cumulative, 0.030225515365600586s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 674.7466557025909s cumulative, 0.036635398864746094s individual

.
current test PASSED/SKIPPED -- test_netloc_default_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 674.7770156860352s cumulative, 0.030359983444213867s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 674.8165547847748s cumulative, 0.03953909873962402s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 674.8526809215546s cumulative, 0.036126136779785156s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 674.8958919048309s cumulative, 0.04321098327636719s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 674.9343981742859s cumulative, 0.038506269454956055s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 674.9734437465668s cumulative, 0.03904557228088379s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 675.0154149532318s cumulative, 0.04197120666503906s individual

.
current test PASSED/SKIPPED -- test_netloc_from_env in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 675.0518317222595s cumulative, 0.03641676902770996s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 675.0935006141663s cumulative, 0.04166889190673828s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 675.1301732063293s cumulative, 0.03667259216308594s individual

.
current test PASSED/SKIPPED -- test_scheme_https in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 675.162451505661s cumulative, 0.03227829933166504s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 675.2006592750549s cumulative, 0.0382077693939209s individual

.
current test PASSED/SKIPPED -- test_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 675.2344059944153s cumulative, 0.03374671936035156s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 675.2706625461578s cumulative, 0.03625655174255371s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 675.3073556423187s cumulative, 0.03669309616088867s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 675.3460762500763s cumulative, 0.03872060775756836s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 675.3819601535797s cumulative, 0.03588390350341797s individual

.
current test PASSED/SKIPPED -- test_date_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 675.4217360019684s cumulative, 0.039775848388671875s individual

.
current test PASSED/SKIPPED -- test_client_prefers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 675.4595012664795s cumulative, 0.0377652645111084s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 675.497909784317s cumulative, 0.038408517837524414s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 675.5375075340271s cumulative, 0.03959774971008301s individual

.
current test PASSED/SKIPPED -- test_etag_parsing_helper in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 675.57062292099s cumulative, 0.033115386962890625s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 675.6074612140656s cumulative, 0.03683829307556152s individual

.
current test PASSED/SKIPPED -- test_content_type_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 675.6358683109283s cumulative, 0.02840709686279297s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 675.6709578037262s cumulative, 0.03508949279785156s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 675.7100102901459s cumulative, 0.039052486419677734s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 675.7426762580872s cumulative, 0.03266596794128418s individual

.
current test PASSED/SKIPPED -- test_reconstruct_url in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 675.7759785652161s cumulative, 0.03330230712890625s individual

.
current test PASSED/SKIPPED -- test_range_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 675.8359396457672s cumulative, 0.05996108055114746s individual

.
current test PASSED/SKIPPED -- test_app_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 675.8724112510681s cumulative, 0.03647160530090332s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 675.9157600402832s cumulative, 0.04334878921508789s individual

.
current test PASSED/SKIPPED -- test_etag_parsing_helper in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 675.9544432163239s cumulative, 0.038683176040649414s individual

.
current test PASSED/SKIPPED -- test_etag_is_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 675.9892020225525s cumulative, 0.034758806228637695s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 676.0337069034576s cumulative, 0.04450488090515137s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 676.080329656601s cumulative, 0.04662275314331055s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 676.1245746612549s cumulative, 0.044245004653930664s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 676.1648025512695s cumulative, 0.04022789001464844s individual

.
current test PASSED/SKIPPED -- test_date_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 676.2050642967224s cumulative, 0.04026174545288086s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 676.2519905567169s cumulative, 0.046926259994506836s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 676.2961263656616s cumulative, 0.04413580894470215s individual

.
current test PASSED/SKIPPED -- test_port_explicit in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 676.3349332809448s cumulative, 0.038806915283203125s individual

.
current test PASSED/SKIPPED -- test_missing_attribute_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 676.367983341217s cumulative, 0.0330500602722168s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 676.3926458358765s cumulative, 0.024662494659423828s individual

.
current test PASSED/SKIPPED -- test_missing_qs in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 676.4021475315094s cumulative, 0.00950169563293457s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 676.4377405643463s cumulative, 0.03559303283691406s individual

.
current test PASSED/SKIPPED -- test_client_accepts in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 676.5323765277863s cumulative, 0.0946359634399414s individual

.
current test PASSED/SKIPPED -- test_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 676.5751616954803s cumulative, 0.0427851676940918s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 676.5970969200134s cumulative, 0.021935224533081055s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 676.6081516742706s cumulative, 0.011054754257202148s individual

.
current test PASSED/SKIPPED -- test_port_explicit in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 676.618499994278s cumulative, 0.010348320007324219s individual

.
current test PASSED/SKIPPED -- test_netloc_default_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 676.648401260376s cumulative, 0.02990126609802246s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 676.8058130741119s cumulative, 0.15741181373596191s individual

.
current test PASSED/SKIPPED -- test_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 676.9425601959229s cumulative, 0.13674712181091309s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 677.0921115875244s cumulative, 0.1495513916015625s individual

.
current test PASSED/SKIPPED -- test_netloc_nondefault_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 677.233820438385s cumulative, 0.1417088508605957s individual

.
current test PASSED/SKIPPED -- test_client_accepts_bogus in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 677.3782427310944s cumulative, 0.14442229270935059s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 677.5290431976318s cumulative, 0.15080046653747559s individual

.
current test PASSED/SKIPPED -- test_range_unit in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 677.7062101364136s cumulative, 0.17716693878173828s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 677.9216814041138s cumulative, 0.2154712677001953s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 678.0583114624023s cumulative, 0.13663005828857422s individual

.
current test PASSED/SKIPPED -- test_empty_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 678.1161553859711s cumulative, 0.057843923568725586s individual

.
current test PASSED/SKIPPED -- test_content_type_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 678.1268141269684s cumulative, 0.010658740997314453s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 678.138210773468s cumulative, 0.011396646499633789s individual

.
current test PASSED/SKIPPED -- test_range_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 678.154541015625s cumulative, 0.016330242156982422s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 678.1721706390381s cumulative, 0.017629623413085938s individual

.
current test PASSED/SKIPPED -- test_client_accepts_props in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 678.1895725727081s cumulative, 0.017401933670043945s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 678.2113420963287s cumulative, 0.02176952362060547s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 678.2256829738617s cumulative, 0.014340877532958984s individual

.
current test PASSED/SKIPPED -- test_date_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 678.2373087406158s cumulative, 0.01162576675415039s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 678.2500302791595s cumulative, 0.012721538543701172s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 678.2624185085297s cumulative, 0.012388229370117188s individual

.
current test PASSED/SKIPPED -- test_etag_parsing_helper in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 678.2725605964661s cumulative, 0.010142087936401367s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 678.2851138114929s cumulative, 0.012553215026855469s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 678.2957010269165s cumulative, 0.010587215423583984s individual

.
current test PASSED/SKIPPED -- test_app_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 678.3036003112793s cumulative, 0.007899284362792969s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 678.3170282840729s cumulative, 0.013427972793579102s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 678.3320589065552s cumulative, 0.015030622482299805s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 678.3459868431091s cumulative, 0.013927936553955078s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 678.3567163944244s cumulative, 0.010729551315307617s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 678.3628506660461s cumulative, 0.0061342716217041016s individual

.
current test PASSED/SKIPPED -- test_relative_uri in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 678.3684170246124s cumulative, 0.00556635856628418s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 678.374609708786s cumulative, 0.006192684173583984s individual

.
current test PASSED/SKIPPED -- test_netloc_default_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 678.3802433013916s cumulative, 0.00563359260559082s individual


tests/test_error_handlers.py .
current test PASSED/SKIPPED -- test_data_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 678.3998267650604s cumulative, 0.019583463668823242s individual

.
current test PASSED/SKIPPED -- test_body_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 678.4094653129578s cumulative, 0.009638547897338867s individual

.
current test PASSED/SKIPPED -- test_media_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 678.419618844986s cumulative, 0.010153532028198242s individual

.
current test PASSED/SKIPPED -- test_media_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 678.4308347702026s cumulative, 0.011215925216674805s individual

.
current test PASSED/SKIPPED -- test_data_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 678.4390170574188s cumulative, 0.008182287216186523s individual

.
current test PASSED/SKIPPED -- test_body_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 678.4488184452057s cumulative, 0.009801387786865234s individual

.
current test PASSED/SKIPPED -- test_media_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 678.4556126594543s cumulative, 0.0067942142486572266s individual

.
current test PASSED/SKIPPED -- test_body_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 678.463586807251s cumulative, 0.00797414779663086s individual

.
current test PASSED/SKIPPED -- test_media_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 678.4745252132416s cumulative, 0.010938405990600586s individual

.
current test PASSED/SKIPPED -- test_data_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 678.4812586307526s cumulative, 0.006733417510986328s individual

.
current test PASSED/SKIPPED -- test_body_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 678.4906344413757s cumulative, 0.009375810623168945s individual

.
current test PASSED/SKIPPED -- test_data_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 678.5007736682892s cumulative, 0.010139226913452148s individual

.
current test PASSED/SKIPPED -- test_converted_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 678.5078084468842s cumulative, 0.007034778594970703s individual

.
current test PASSED/SKIPPED -- test_error_precedence_duplicate in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 678.5221180915833s cumulative, 0.01430964469909668s individual

.
current test PASSED/SKIPPED -- test_uncaught_error_else in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 678.5662994384766s cumulative, 0.04418134689331055s individual

.
current test PASSED/SKIPPED -- test_handler_must_be_coroutine_for_asgi in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 678.6027708053589s cumulative, 0.03647136688232422s individual

.
current test PASSED/SKIPPED -- test_uncaught_python_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 678.6677544116974s cumulative, 0.06498360633850098s individual

.
current test PASSED/SKIPPED -- test_invalid_add_exception_handler_input in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 678.7291672229767s cumulative, 0.061412811279296875s individual

.
current test PASSED/SKIPPED -- test_handler_multiple_exception_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 678.813304901123s cumulative, 0.0841376781463623s individual

.
current test PASSED/SKIPPED -- test_error_precedence_subclass_order_indifference in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 678.8772096633911s cumulative, 0.0639047622680664s individual

.
current test PASSED/SKIPPED -- test_error_precedence_subclass_order_indifference in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 678.927324295044s cumulative, 0.05011463165283203s individual

.
current test PASSED/SKIPPED -- test_uncaught_python_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 679.0135102272034s cumulative, 0.08618593215942383s individual

.
current test PASSED/SKIPPED -- test_handler_signature_shim in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 679.0704834461212s cumulative, 0.05697321891784668s individual

.
current test PASSED/SKIPPED -- test_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 679.1229906082153s cumulative, 0.05250716209411621s individual

.
current test PASSED/SKIPPED -- test_subclass_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 679.1871354579926s cumulative, 0.06414484977722168s individual

.
current test PASSED/SKIPPED -- test_invalid_add_exception_handler_input in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 679.2325911521912s cumulative, 0.0454556941986084s individual

.
current test PASSED/SKIPPED -- test_handler_multiple_exception_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 679.314968585968s cumulative, 0.08237743377685547s individual

.
current test PASSED/SKIPPED -- test_caught_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 679.3893265724182s cumulative, 0.07435798645019531s individual

.
current test PASSED/SKIPPED -- test_uncaught_python_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 679.4685869216919s cumulative, 0.07926034927368164s individual

.
current test PASSED/SKIPPED -- test_uncaught_python_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 679.5433430671692s cumulative, 0.07475614547729492s individual

.
current test PASSED/SKIPPED -- test_handler_single_exception_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 679.6140863895416s cumulative, 0.07074332237243652s individual

.
current test PASSED/SKIPPED -- test_invalid_add_exception_handler_input in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 679.6577305793762s cumulative, 0.04364418983459473s individual

.
current test PASSED/SKIPPED -- test_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 679.723283290863s cumulative, 0.0655527114868164s individual

.
current test PASSED/SKIPPED -- test_handler_single_exception_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 679.7847912311554s cumulative, 0.0615079402923584s individual

.
current test PASSED/SKIPPED -- test_handler_multiple_exception_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 679.8768784999847s cumulative, 0.0920872688293457s individual

.
current test PASSED/SKIPPED -- test_handle_not_defined in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 679.9261696338654s cumulative, 0.049291133880615234s individual

.
current test PASSED/SKIPPED -- test_catch_http_no_route_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 679.9934673309326s cumulative, 0.06729769706726074s individual

.
current test PASSED/SKIPPED -- test_error_precedence_duplicate in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 680.0541820526123s cumulative, 0.0607147216796875s individual

.
current test PASSED/SKIPPED -- test_handle_not_defined in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 680.0929720401764s cumulative, 0.038789987564086914s individual

.
current test PASSED/SKIPPED -- test_uncaught_python_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 680.1751329898834s cumulative, 0.08216094970703125s individual

.
current test PASSED/SKIPPED -- test_catch_http_no_route_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 680.2314686775208s cumulative, 0.0563356876373291s individual

.
current test PASSED/SKIPPED -- test_uncaught_python_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 680.2966156005859s cumulative, 0.06514692306518555s individual

.
current test PASSED/SKIPPED -- test_subclass_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 680.3652899265289s cumulative, 0.06867432594299316s individual

.
current test PASSED/SKIPPED -- test_invalid_add_exception_handler_input in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 680.4017794132233s cumulative, 0.03648948669433594s individual

.
current test PASSED/SKIPPED -- test_converted_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 680.4638004302979s cumulative, 0.06202101707458496s individual

.
current test PASSED/SKIPPED -- test_invalid_add_exception_handler_input in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 680.4961116313934s cumulative, 0.032311201095581055s individual

.
current test PASSED/SKIPPED -- test_invalid_add_exception_handler_input in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 680.5246493816376s cumulative, 0.028537750244140625s individual

.
current test PASSED/SKIPPED -- test_invalid_add_exception_handler_input in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 680.5629398822784s cumulative, 0.03829050064086914s individual

.
current test PASSED/SKIPPED -- test_handler_multiple_exception_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 680.6159062385559s cumulative, 0.05296635627746582s individual

.
current test PASSED/SKIPPED -- test_caught_error_async in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 680.6792552471161s cumulative, 0.06334900856018066s individual

.
current test PASSED/SKIPPED -- test_caught_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 680.7304427623749s cumulative, 0.05118751525878906s individual

.
current test PASSED/SKIPPED -- test_uncaught_error_else in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 680.7724194526672s cumulative, 0.0419766902923584s individual

s
current test PASSED/SKIPPED -- test_caught_error_async in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 680.8000049591064s cumulative, 0.027585506439208984s individual

.
current test PASSED/SKIPPED -- test_error_precedence_subclass in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 680.904271364212s cumulative, 0.10426640510559082s individual

.
current test PASSED/SKIPPED -- test_error_precedence_subclass in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 680.9662499427795s cumulative, 0.06197857856750488s individual

.
current test PASSED/SKIPPED -- test_invalid_add_exception_handler_input in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 681.0006425380707s cumulative, 0.034392595291137695s individual


tests/test_request_body.py .
current test PASSED/SKIPPED -- test_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_body.py: 681.0534856319427s cumulative, 0.05284309387207031s individual

.
current test PASSED/SKIPPED -- test_read_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_body.py: 681.1106472015381s cumulative, 0.057161569595336914s individual

.
current test PASSED/SKIPPED -- test_bounded_stream_property_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_body.py: 681.1324927806854s cumulative, 0.021845579147338867s individual

.
current test PASSED/SKIPPED -- test_tiny_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_body.py: 681.1849615573883s cumulative, 0.05246877670288086s individual

.
current test PASSED/SKIPPED -- test_request_repr in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_body.py: 681.2071146965027s cumulative, 0.022153139114379883s individual

.
current test PASSED/SKIPPED -- test_body_stream_wrapper in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_body.py: 681.2401337623596s cumulative, 0.033019065856933594s individual

.
current test PASSED/SKIPPED -- test_tiny_body_overflow in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_body.py: 681.3008751869202s cumulative, 0.060741424560546875s individual


tests/asgi/test_buffered_reader.py .
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 681.3356771469116s cumulative, 0.03480195999145508s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 681.3640897274017s cumulative, 0.028412580490112305s individual

.
current test PASSED/SKIPPED -- test_varying_read_size in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 700.9354228973389s cumulative, 19.571333169937134s individual

.
current test PASSED/SKIPPED -- test_irregular_large_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 710.7505741119385s cumulative, 9.81515121459961s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 710.7606029510498s cumulative, 0.010028839111328125s individual

.
current test PASSED/SKIPPED -- test_invalid_delimiter_length in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 710.7678368091583s cumulative, 0.007233858108520508s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 710.7744188308716s cumulative, 0.006582021713256836s individual

.
current test PASSED/SKIPPED -- test_pipe_until_delimiter_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 710.7794034481049s cumulative, 0.004984617233276367s individual

.
current test PASSED/SKIPPED -- test_read in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 710.7849922180176s cumulative, 0.0055887699127197266s individual

.
current test PASSED/SKIPPED -- test_peek in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 710.7899603843689s cumulative, 0.004968166351318359s individual

.
current test PASSED/SKIPPED -- test_placeholder_methods in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 710.7945668697357s cumulative, 0.004606485366821289s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 710.8014073371887s cumulative, 0.00684046745300293s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 710.806485414505s cumulative, 0.00507807731628418s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 710.8126142024994s cumulative, 0.006128787994384766s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 710.8197226524353s cumulative, 0.007108449935913086s individual

.
current test PASSED/SKIPPED -- test_varying_read_size in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 721.7061619758606s cumulative, 10.886439323425293s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 721.737069606781s cumulative, 0.030907630920410156s individual

.
current test PASSED/SKIPPED -- test_exhaust in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 721.7564527988434s cumulative, 0.01938319206237793s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 721.7883355617523s cumulative, 0.03188276290893555s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 721.8170809745789s cumulative, 0.028745412826538086s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 721.838650226593s cumulative, 0.021569252014160156s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 721.8691623210907s cumulative, 0.030512094497680664s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 721.891058921814s cumulative, 0.0218966007232666s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 721.9276306629181s cumulative, 0.03657174110412598s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 721.953860282898s cumulative, 0.0262296199798584s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 721.9793903827667s cumulative, 0.025530099868774414s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 722.0033941268921s cumulative, 0.02400374412536621s individual

.
current test PASSED/SKIPPED -- test_read in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 722.0261359214783s cumulative, 0.02274179458618164s individual

.
current test PASSED/SKIPPED -- test_readall in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 722.0471534729004s cumulative, 0.02101755142211914s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 722.0700843334198s cumulative, 0.02293086051940918s individual

.
current test PASSED/SKIPPED -- test_delimit in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 722.0890891551971s cumulative, 0.01900482177734375s individual

.
current test PASSED/SKIPPED -- test_delimit in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 722.1086905002594s cumulative, 0.01960134506225586s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 722.130241394043s cumulative, 0.021550893783569336s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 722.153448343277s cumulative, 0.02320694923400879s individual

.
current test PASSED/SKIPPED -- test_read_until_with_buffer_edge_case in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 722.1782877445221s cumulative, 0.024839401245117188s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 722.1997346878052s cumulative, 0.021446943283081055s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 722.2270801067352s cumulative, 0.02734541893005371s individual

.
current test PASSED/SKIPPED -- test_read in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 722.2543795108795s cumulative, 0.02729940414428711s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 722.2796583175659s cumulative, 0.025278806686401367s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 722.3021147251129s cumulative, 0.02245640754699707s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 722.3321800231934s cumulative, 0.030065298080444336s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 722.3559606075287s cumulative, 0.02378058433532715s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 722.3991391658783s cumulative, 0.043178558349609375s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 722.4302985668182s cumulative, 0.031159400939941406s individual

.
current test PASSED/SKIPPED -- test_peek in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 722.4573771953583s cumulative, 0.027078628540039062s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 722.4927883148193s cumulative, 0.03541111946105957s individual

.
current test PASSED/SKIPPED -- test_readall in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 722.5204288959503s cumulative, 0.027640581130981445s individual

.
current test PASSED/SKIPPED -- test_pipe in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 722.5468099117279s cumulative, 0.02638101577758789s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 722.5764651298523s cumulative, 0.02965521812438965s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 722.6013731956482s cumulative, 0.024908065795898438s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 722.6219062805176s cumulative, 0.020533084869384766s individual

.
current test PASSED/SKIPPED -- test_basic_aiter in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 722.6434245109558s cumulative, 0.021518230438232422s individual

.
current test PASSED/SKIPPED -- test_peek_at_eof in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 722.6612997055054s cumulative, 0.017875194549560547s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 722.6916933059692s cumulative, 0.030393600463867188s individual

.
current test PASSED/SKIPPED -- test_delimit in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 722.720541715622s cumulative, 0.02884840965270996s individual

.
current test PASSED/SKIPPED -- test_peek in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 722.7412519454956s cumulative, 0.020710229873657227s individual

.
current test PASSED/SKIPPED -- test_readall in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 722.7610244750977s cumulative, 0.01977252960205078s individual

.
current test PASSED/SKIPPED -- test_delimit in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 722.7792000770569s cumulative, 0.018175601959228516s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 722.8032321929932s cumulative, 0.024032115936279297s individual

.
current test PASSED/SKIPPED -- test_aiter_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 722.8221070766449s cumulative, 0.0188748836517334s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 722.8444340229034s cumulative, 0.022326946258544922s individual

.
current test PASSED/SKIPPED -- test_iteration_started in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 722.8649435043335s cumulative, 0.02050948143005371s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 722.893648147583s cumulative, 0.02870464324951172s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 722.9300887584686s cumulative, 0.03644061088562012s individual

.
current test PASSED/SKIPPED -- test_peek in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 722.9514775276184s cumulative, 0.021388769149780273s individual

.
current test PASSED/SKIPPED -- test_peek in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 722.9719293117523s cumulative, 0.020451784133911133s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 723.0074946880341s cumulative, 0.03556537628173828s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 723.032687664032s cumulative, 0.025192975997924805s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 723.0590147972107s cumulative, 0.026327133178710938s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 723.0833218097687s cumulative, 0.0243070125579834s individual

.
current test PASSED/SKIPPED -- test_delimit in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 723.1046392917633s cumulative, 0.021317481994628906s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 723.1263408660889s cumulative, 0.021701574325561523s individual

.
current test PASSED/SKIPPED -- test_peek in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 723.1437249183655s cumulative, 0.017384052276611328s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 723.1648001670837s cumulative, 0.02107524871826172s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 723.1924414634705s cumulative, 0.02764129638671875s individual

.
current test PASSED/SKIPPED -- test_small_reads_with_delimiter in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 727.011491060257s cumulative, 3.819049596786499s individual

.
current test PASSED/SKIPPED -- test_small_reads in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 728.3078634738922s cumulative, 1.296372413635254s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 728.5834860801697s cumulative, 0.2756226062774658s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 728.6294400691986s cumulative, 0.045953989028930664s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 728.6656022071838s cumulative, 0.03616213798522949s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 728.697832107544s cumulative, 0.03222990036010742s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 728.7296662330627s cumulative, 0.03183412551879883s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 728.7643761634827s cumulative, 0.034709930419921875s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 728.7993631362915s cumulative, 0.03498697280883789s individual

.
current test PASSED/SKIPPED -- test_read in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 728.83145570755s cumulative, 0.03209257125854492s individual

.
current test PASSED/SKIPPED -- test_irregular_large_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 738.530948638916s cumulative, 9.699492931365967s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 738.5545043945312s cumulative, 0.023555755615234375s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 738.5801703929901s cumulative, 0.025665998458862305s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 738.6038627624512s cumulative, 0.02369236946105957s individual


tests/test_compiled_router.py .
current test PASSED/SKIPPED -- test_no_compile_kw in /home/kaiyaok2/PythonProjects/falcon/tests/test_compiled_router.py: 738.6372570991516s cumulative, 0.03339433670043945s individual

.
current test PASSED/SKIPPED -- test_find_src in /home/kaiyaok2/PythonProjects/falcon/tests/test_compiled_router.py: 738.6639919281006s cumulative, 0.02673482894897461s individual

.
current test PASSED/SKIPPED -- test_multithread_compile in /home/kaiyaok2/PythonProjects/falcon/tests/test_compiled_router.py: 738.7662892341614s cumulative, 0.10229730606079102s individual

.
current test PASSED/SKIPPED -- test_no_compile_kw in /home/kaiyaok2/PythonProjects/falcon/tests/test_compiled_router.py: 738.810387134552s cumulative, 0.044097900390625s individual

.
current test PASSED/SKIPPED -- test_add_route_after_first_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_compiled_router.py: 738.8388152122498s cumulative, 0.028428077697753906s individual

.
current test PASSED/SKIPPED -- test_no_compile_kw in /home/kaiyaok2/PythonProjects/falcon/tests/test_compiled_router.py: 738.8693253993988s cumulative, 0.03051018714904785s individual

.
current test PASSED/SKIPPED -- test_converter_not_subclass in /home/kaiyaok2/PythonProjects/falcon/tests/test_compiled_router.py: 738.8970878124237s cumulative, 0.027762413024902344s individual

.
current test PASSED/SKIPPED -- test_no_compile_kw in /home/kaiyaok2/PythonProjects/falcon/tests/test_compiled_router.py: 738.9314186573029s cumulative, 0.03433084487915039s individual

.
current test PASSED/SKIPPED -- test_cannot_replace_compiled in /home/kaiyaok2/PythonProjects/falcon/tests/test_compiled_router.py: 738.9528977870941s cumulative, 0.021479129791259766s individual

.
current test PASSED/SKIPPED -- test_compile in /home/kaiyaok2/PythonProjects/falcon/tests/test_compiled_router.py: 738.9852302074432s cumulative, 0.032332420349121094s individual


tests/test_media_urlencoded.py .
current test PASSED/SKIPPED -- test_urlencoded_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 739.0430433750153s cumulative, 0.057813167572021484s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form_handler_serialize in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 739.0608131885529s cumulative, 0.017769813537597656s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 739.095781326294s cumulative, 0.03496813774108887s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 739.1278269290924s cumulative, 0.032045602798461914s individual

.
current test PASSED/SKIPPED -- test_deserialize_empty_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 739.1384816169739s cumulative, 0.010654687881469727s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 739.1812584400177s cumulative, 0.04277682304382324s individual

.
current test PASSED/SKIPPED -- test_empty_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 739.1986484527588s cumulative, 0.017390012741088867s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 739.2088224887848s cumulative, 0.010174036026000977s individual

.
current test PASSED/SKIPPED -- test_empty_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 739.2372488975525s cumulative, 0.028426408767700195s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 739.2923645973206s cumulative, 0.055115699768066406s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 739.3619866371155s cumulative, 0.06962203979492188s individual

.
current test PASSED/SKIPPED -- test_deserialize_invalid_unicode in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 739.3757355213165s cumulative, 0.013748884201049805s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 739.4020643234253s cumulative, 0.02632880210876465s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 739.4138028621674s cumulative, 0.01173853874206543s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form_handler_serialize in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 739.4191708564758s cumulative, 0.00536799430847168s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 739.4301121234894s cumulative, 0.010941267013549805s individual


tests/test_redirects.py .
current test PASSED/SKIPPED -- test_redirect in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 739.4456944465637s cumulative, 0.01558232307434082s individual

.
current test PASSED/SKIPPED -- test_redirect_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 739.6307244300842s cumulative, 0.1850299835205078s individual

.
current test PASSED/SKIPPED -- test_redirect in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 740.0467550754547s cumulative, 0.4160306453704834s individual

.
current test PASSED/SKIPPED -- test_redirect_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 740.4019598960876s cumulative, 0.35520482063293457s individual

.
current test PASSED/SKIPPED -- test_redirect_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 740.7494366168976s cumulative, 0.3474767208099365s individual

.
current test PASSED/SKIPPED -- test_redirect in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 741.1068918704987s cumulative, 0.3574552536010742s individual

.
current test PASSED/SKIPPED -- test_redirect in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 741.1978216171265s cumulative, 0.09092974662780762s individual

.
current test PASSED/SKIPPED -- test_redirect in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 741.2129380702972s cumulative, 0.015116453170776367s individual

.
current test PASSED/SKIPPED -- test_redirect_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 741.2398591041565s cumulative, 0.02692103385925293s individual

.
current test PASSED/SKIPPED -- test_redirect_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 741.2574367523193s cumulative, 0.017577648162841797s individual

.
current test PASSED/SKIPPED -- test_redirect_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 741.2791686058044s cumulative, 0.021731853485107422s individual

.
current test PASSED/SKIPPED -- test_redirect in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 741.2969763278961s cumulative, 0.017807722091674805s individual

.
current test PASSED/SKIPPED -- test_redirect in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 741.3086225986481s cumulative, 0.011646270751953125s individual

.
current test PASSED/SKIPPED -- test_redirect_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 741.3440265655518s cumulative, 0.03540396690368652s individual

.
current test PASSED/SKIPPED -- test_redirect_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 741.3584041595459s cumulative, 0.014377593994140625s individual

.
current test PASSED/SKIPPED -- test_redirect_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 741.3800187110901s cumulative, 0.021614551544189453s individual

.
current test PASSED/SKIPPED -- test_redirect_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 741.3965680599213s cumulative, 0.016549348831176758s individual

.
current test PASSED/SKIPPED -- test_redirect in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 741.411878824234s cumulative, 0.01531076431274414s individual

.
current test PASSED/SKIPPED -- test_redirect in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 741.4224667549133s cumulative, 0.010587930679321289s individual

.
current test PASSED/SKIPPED -- test_redirect in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 741.4313356876373s cumulative, 0.008868932723999023s individual


tests/test_headers.py .
current test PASSED/SKIPPED -- test_unicode_headers_contain_non_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 741.4397144317627s cumulative, 0.008378744125366211s individual

.
current test PASSED/SKIPPED -- test_append_link_invalid_crossorigin_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 741.4444963932037s cumulative, 0.004781961441040039s individual

.
current test PASSED/SKIPPED -- test_override_default_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 741.4550852775574s cumulative, 0.010588884353637695s individual

.
current test PASSED/SKIPPED -- test_declared_content_length_overriden_by_data_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 741.4630613327026s cumulative, 0.007976055145263672s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 741.4776964187622s cumulative, 0.014635086059570312s individual

.
current test PASSED/SKIPPED -- test_content_type_no_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 741.4871189594269s cumulative, 0.009422540664672852s individual

.
current test PASSED/SKIPPED -- test_vary_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 741.4961836338043s cumulative, 0.009064674377441406s individual

.
current test PASSED/SKIPPED -- test_vary_star in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 741.5115923881531s cumulative, 0.015408754348754883s individual

.
current test PASSED/SKIPPED -- test_content_length_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 741.5204379558563s cumulative, 0.00884556770324707s individual

.
current test PASSED/SKIPPED -- test_append_link_with_hreflang in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 741.5337505340576s cumulative, 0.013312578201293945s individual

.
current test PASSED/SKIPPED -- test_headers_with_custom_class_not_callable in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 741.5529294013977s cumulative, 0.01917886734008789s individual

.
current test PASSED/SKIPPED -- test_vary_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 741.5671498775482s cumulative, 0.014220476150512695s individual

.
current test PASSED/SKIPPED -- test_custom_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 741.5820152759552s cumulative, 0.014865398406982422s individual

.
current test PASSED/SKIPPED -- test_vary_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 741.5961318016052s cumulative, 0.014116525650024414s individual

.
current test PASSED/SKIPPED -- test_content_disposition_inline_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 741.6057236194611s cumulative, 0.009591817855834961s individual

.
current test PASSED/SKIPPED -- test_append_link_multiple in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 741.6174328327179s cumulative, 0.011709213256835938s individual

.
current test PASSED/SKIPPED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 741.6260948181152s cumulative, 0.008661985397338867s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 741.6348745822906s cumulative, 0.008779764175415039s individual

.
current test PASSED/SKIPPED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 741.6413977146149s cumulative, 0.00652313232421875s individual

.
current test PASSED/SKIPPED -- test_expires_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 741.6533713340759s cumulative, 0.01197361946105957s individual

.
current test PASSED/SKIPPED -- test_response_set_and_get_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 741.665239572525s cumulative, 0.01186823844909668s individual

.
current test PASSED/SKIPPED -- test_content_disposition_inline_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 741.6811611652374s cumulative, 0.015921592712402344s individual

.
current test PASSED/SKIPPED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 741.694406747818s cumulative, 0.013245582580566406s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 741.7015407085419s cumulative, 0.007133960723876953s individual

.
current test PASSED/SKIPPED -- test_content_disposition_inline_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 741.7134642601013s cumulative, 0.011923551559448242s individual

.
current test PASSED/SKIPPED -- test_unset_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 741.7286992073059s cumulative, 0.015234947204589844s individual

.
current test PASSED/SKIPPED -- test_set_headers_with_custom_class in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 741.7400498390198s cumulative, 0.011350631713867188s individual

.
current test PASSED/SKIPPED -- test_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 741.7538034915924s cumulative, 0.013753652572631836s individual

.
current test PASSED/SKIPPED -- test_expires_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 741.763608455658s cumulative, 0.009804964065551758s individual

.
current test PASSED/SKIPPED -- test_unicode_headers_contain_non_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 741.7739777565002s cumulative, 0.010369300842285156s individual

.
current test PASSED/SKIPPED -- test_response_set_and_get_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 741.7984943389893s cumulative, 0.024516582489013672s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 741.8090097904205s cumulative, 0.010515451431274414s individual

.
current test PASSED/SKIPPED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 741.8192925453186s cumulative, 0.010282754898071289s individual

.
current test PASSED/SKIPPED -- test_append_link_with_anchor in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 741.8410727977753s cumulative, 0.02178025245666504s individual

.
current test PASSED/SKIPPED -- test_no_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 741.8900496959686s cumulative, 0.048976898193359375s individual

.
current test PASSED/SKIPPED -- test_content_header_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 741.9502911567688s cumulative, 0.0602414608001709s individual

.
current test PASSED/SKIPPED -- test_append_link_with_title_star in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 742.0137424468994s cumulative, 0.06345129013061523s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 742.0748598575592s cumulative, 0.06111741065979004s individual

.
current test PASSED/SKIPPED -- test_append_link_invalid_crossorigin_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 742.1142196655273s cumulative, 0.03935980796813965s individual

.
current test PASSED/SKIPPED -- test_append_link_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 742.1758368015289s cumulative, 0.061617136001586914s individual

.
current test PASSED/SKIPPED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 742.2547979354858s cumulative, 0.07896113395690918s individual

.
current test PASSED/SKIPPED -- test_append_link_with_title_star in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 742.3182134628296s cumulative, 0.06341552734375s individual

.
current test PASSED/SKIPPED -- test_response_append_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 742.3995137214661s cumulative, 0.08130025863647461s individual

.
current test PASSED/SKIPPED -- test_no_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 742.4587585926056s cumulative, 0.05924487113952637s individual

.
current test PASSED/SKIPPED -- test_declared_content_length_overriden_by_body_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 742.5157058238983s cumulative, 0.05694723129272461s individual

.
current test PASSED/SKIPPED -- test_request_latin1_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 742.5977766513824s cumulative, 0.08207082748413086s individual

.
current test PASSED/SKIPPED -- test_default_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 742.6740036010742s cumulative, 0.07622694969177246s individual

.
current test PASSED/SKIPPED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 742.7404494285583s cumulative, 0.06644582748413086s individual

.
current test PASSED/SKIPPED -- test_headers_with_custom_class_not_callable in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 742.8077077865601s cumulative, 0.06725835800170898s individual

.
current test PASSED/SKIPPED -- test_custom_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 742.8659839630127s cumulative, 0.05827617645263672s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 742.9463970661163s cumulative, 0.0804131031036377s individual

.
current test PASSED/SKIPPED -- test_append_link_with_title in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 743.0021829605103s cumulative, 0.0557858943939209s individual

.
current test PASSED/SKIPPED -- test_default_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 743.063090801239s cumulative, 0.060907840728759766s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 743.1309938430786s cumulative, 0.06790304183959961s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 743.1904616355896s cumulative, 0.05946779251098633s individual

.
current test PASSED/SKIPPED -- test_vary_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 743.2763385772705s cumulative, 0.0858769416809082s individual

.
current test PASSED/SKIPPED -- test_declared_content_length_overridden_by_no_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 743.330406665802s cumulative, 0.05406808853149414s individual

.
current test PASSED/SKIPPED -- test_override_default_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 743.3977720737457s cumulative, 0.06736540794372559s individual

.
current test PASSED/SKIPPED -- test_unset_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 743.446004152298s cumulative, 0.048232078552246094s individual

.
current test PASSED/SKIPPED -- test_append_link_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 743.5091099739075s cumulative, 0.06310582160949707s individual

.
current test PASSED/SKIPPED -- test_declared_content_length_on_head in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 743.5578336715698s cumulative, 0.048723697662353516s individual

.
current test PASSED/SKIPPED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 743.5996084213257s cumulative, 0.041774749755859375s individual

.
current test PASSED/SKIPPED -- test_unicode_location_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 743.64599609375s cumulative, 0.046387672424316406s individual

.
current test PASSED/SKIPPED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 743.7136306762695s cumulative, 0.06763458251953125s individual

.
current test PASSED/SKIPPED -- test_append_link_with_anchor in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 743.7628216743469s cumulative, 0.04919099807739258s individual

.
current test PASSED/SKIPPED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 743.8202955722809s cumulative, 0.05747389793395996s individual

.
current test PASSED/SKIPPED -- test_unicode_headers_contain_non_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 743.8841731548309s cumulative, 0.06387758255004883s individual

.
current test PASSED/SKIPPED -- test_append_link_single in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 743.9453098773956s cumulative, 0.061136722564697266s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 743.9857547283173s cumulative, 0.04044485092163086s individual

.
current test PASSED/SKIPPED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 744.0519633293152s cumulative, 0.0662086009979248s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 744.1081395149231s cumulative, 0.056176185607910156s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 744.1624538898468s cumulative, 0.054314374923706055s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 744.2114105224609s cumulative, 0.04895663261413574s individual

.
current test PASSED/SKIPPED -- test_default_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 744.3212456703186s cumulative, 0.10983514785766602s individual

.
current test PASSED/SKIPPED -- test_no_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 744.3919253349304s cumulative, 0.0706796646118164s individual

.
current test PASSED/SKIPPED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 744.4539761543274s cumulative, 0.062050819396972656s individual

.
current test PASSED/SKIPPED -- test_get_header_as_int in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 744.5119168758392s cumulative, 0.05794072151184082s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 744.5608503818512s cumulative, 0.04893350601196289s individual

.
current test PASSED/SKIPPED -- test_unicode_location_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 744.6092886924744s cumulative, 0.048438310623168945s individual

.
current test PASSED/SKIPPED -- test_append_link_with_hreflang_multi in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 744.6446723937988s cumulative, 0.03538370132446289s individual

.
current test PASSED/SKIPPED -- test_override_default_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 744.6919736862183s cumulative, 0.047301292419433594s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 744.7142791748047s cumulative, 0.02230548858642578s individual

.
current test PASSED/SKIPPED -- test_override_default_media_type_missing_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 744.7431902885437s cumulative, 0.028911113739013672s individual

.
current test PASSED/SKIPPED -- test_unicode_headers_contain_only_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 744.7618114948273s cumulative, 0.018621206283569336s individual

.
current test PASSED/SKIPPED -- test_response_header_helpers_on_get in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 744.7883698940277s cumulative, 0.026558399200439453s individual

.
current test PASSED/SKIPPED -- test_append_link_with_hreflang in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 744.8083302974701s cumulative, 0.019960403442382812s individual

.
current test PASSED/SKIPPED -- test_headers_as_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 744.8352439403534s cumulative, 0.02691364288330078s individual

.
current test PASSED/SKIPPED -- test_append_link_with_hreflang_multi in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 744.8642456531525s cumulative, 0.029001712799072266s individual

.
current test PASSED/SKIPPED -- test_required_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 744.8893930912018s cumulative, 0.025147438049316406s individual

s
current test PASSED/SKIPPED -- test_unicode_headers_contain_non_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 744.9133477210999s cumulative, 0.02395462989807129s individual

.
current test PASSED/SKIPPED -- test_no_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 744.9405126571655s cumulative, 0.027164936065673828s individual

.
current test PASSED/SKIPPED -- test_unicode_headers_contain_non_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 744.9724552631378s cumulative, 0.03194260597229004s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 745.0063965320587s cumulative, 0.03394126892089844s individual

.
current test PASSED/SKIPPED -- test_append_link_with_type_hint in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 745.021092414856s cumulative, 0.014695882797241211s individual

.
current test PASSED/SKIPPED -- test_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 745.0444610118866s cumulative, 0.02336859703063965s individual

.
current test PASSED/SKIPPED -- test_append_link_invalid_crossorigin_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 745.0746958255768s cumulative, 0.030234813690185547s individual

.
current test PASSED/SKIPPED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 745.1565363407135s cumulative, 0.08184051513671875s individual

.
current test PASSED/SKIPPED -- test_content_disposition_inline_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 745.251787185669s cumulative, 0.09525084495544434s individual

.
current test PASSED/SKIPPED -- test_request_multiple_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 745.2702262401581s cumulative, 0.018439054489135742s individual

.
current test PASSED/SKIPPED -- test_unicode_headers_contain_non_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 745.2804274559021s cumulative, 0.010201215744018555s individual

.
current test PASSED/SKIPPED -- test_append_link_invalid_crossorigin_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 745.3371062278748s cumulative, 0.05667877197265625s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 745.708922624588s cumulative, 0.37181639671325684s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 746.1012880802155s cumulative, 0.3923654556274414s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 746.2997114658356s cumulative, 0.1984233856201172s individual

.
current test PASSED/SKIPPED -- test_declared_content_length_overriden_by_body_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 746.6206886768341s cumulative, 0.32097721099853516s individual

.
current test PASSED/SKIPPED -- test_request_multiple_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 746.8710715770721s cumulative, 0.2503829002380371s individual

.
current test PASSED/SKIPPED -- test_vary_star in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 746.886709690094s cumulative, 0.015638113021850586s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 746.9096908569336s cumulative, 0.02298116683959961s individual

.
current test PASSED/SKIPPED -- test_no_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 746.9319939613342s cumulative, 0.022303104400634766s individual

.
current test PASSED/SKIPPED -- test_passthrough_request_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 746.9699821472168s cumulative, 0.03798818588256836s individual

.
current test PASSED/SKIPPED -- test_append_link_invalid_crossorigin_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 746.9828453063965s cumulative, 0.0128631591796875s individual

.
current test PASSED/SKIPPED -- test_unicode_headers_contain_non_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 747.0055668354034s cumulative, 0.022721529006958008s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 747.0316593647003s cumulative, 0.026092529296875s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 747.0483477115631s cumulative, 0.01668834686279297s individual

.
current test PASSED/SKIPPED -- test_content_length_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 747.0602600574493s cumulative, 0.011912345886230469s individual

.
current test PASSED/SKIPPED -- test_append_link_with_link_extension in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 747.0769491195679s cumulative, 0.016689062118530273s individual

.
current test PASSED/SKIPPED -- test_append_link_with_title in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 747.0935850143433s cumulative, 0.016635894775390625s individual

.
current test PASSED/SKIPPED -- test_set_headers_with_custom_class in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 747.1129291057587s cumulative, 0.019344091415405273s individual

.
current test PASSED/SKIPPED -- test_request_latin1_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 747.1324541568756s cumulative, 0.01952505111694336s individual

.
current test PASSED/SKIPPED -- test_response_header_helpers_on_get in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 747.1522858142853s cumulative, 0.01983165740966797s individual

.
current test PASSED/SKIPPED -- test_declared_content_length_overridden_by_no_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 747.1677465438843s cumulative, 0.015460729598999023s individual

.
current test PASSED/SKIPPED -- test_no_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 747.183789730072s cumulative, 0.01604318618774414s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 747.1984553337097s cumulative, 0.014665603637695312s individual

.
current test PASSED/SKIPPED -- test_response_append_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 747.2134900093079s cumulative, 0.015034675598144531s individual

.
current test PASSED/SKIPPED -- test_content_type_no_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 747.2295370101929s cumulative, 0.016047000885009766s individual

.
current test PASSED/SKIPPED -- test_passthrough_request_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 747.2490832805634s cumulative, 0.0195462703704834s individual

.
current test PASSED/SKIPPED -- test_headers_as_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 747.2616245746613s cumulative, 0.01254129409790039s individual

.
current test PASSED/SKIPPED -- test_unicode_headers_contain_non_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 747.2752983570099s cumulative, 0.013673782348632812s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 747.2848069667816s cumulative, 0.009508609771728516s individual

.
current test PASSED/SKIPPED -- test_default_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 747.3289182186127s cumulative, 0.04411125183105469s individual

.
current test PASSED/SKIPPED -- test_no_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 747.3553900718689s cumulative, 0.026471853256225586s individual

.
current test PASSED/SKIPPED -- test_content_header_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 747.3883349895477s cumulative, 0.03294491767883301s individual

.
current test PASSED/SKIPPED -- test_override_default_media_type_missing_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 747.4558744430542s cumulative, 0.06753945350646973s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 747.5118489265442s cumulative, 0.055974483489990234s individual

.
current test PASSED/SKIPPED -- test_content_disposition_inline_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 747.5894155502319s cumulative, 0.07756662368774414s individual

.
current test PASSED/SKIPPED -- test_content_disposition_inline_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 747.6473093032837s cumulative, 0.05789375305175781s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 747.720445394516s cumulative, 0.0731360912322998s individual

.
current test PASSED/SKIPPED -- test_append_link_single in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 747.7794442176819s cumulative, 0.058998823165893555s individual

.
current test PASSED/SKIPPED -- test_declared_content_length_overriden_by_data_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 747.8451735973358s cumulative, 0.06572937965393066s individual

.
current test PASSED/SKIPPED -- test_declared_content_length_on_head in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 747.8934631347656s cumulative, 0.04828953742980957s individual

.
current test PASSED/SKIPPED -- test_required_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 747.9486563205719s cumulative, 0.055193185806274414s individual

.
current test PASSED/SKIPPED -- test_no_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 748.0051727294922s cumulative, 0.056516408920288086s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 748.044685125351s cumulative, 0.03951239585876465s individual

.
current test PASSED/SKIPPED -- test_override_default_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 748.1127061843872s cumulative, 0.06802105903625488s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 748.1767473220825s cumulative, 0.0640411376953125s individual

.
current test PASSED/SKIPPED -- test_unset_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 748.2488806247711s cumulative, 0.07213330268859863s individual

.
current test PASSED/SKIPPED -- test_unicode_headers_contain_only_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 748.3120412826538s cumulative, 0.06316065788269043s individual

.
current test PASSED/SKIPPED -- test_append_link_with_type_hint in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 748.3688960075378s cumulative, 0.0568547248840332s individual

.
current test PASSED/SKIPPED -- test_append_link_invalid_crossorigin_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 748.4009296894073s cumulative, 0.032033681869506836s individual

.
current test PASSED/SKIPPED -- test_append_link_with_link_extension in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 748.4522364139557s cumulative, 0.051306724548339844s individual

.
current test PASSED/SKIPPED -- test_unset_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 748.5070009231567s cumulative, 0.054764509201049805s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 748.5483803749084s cumulative, 0.041379451751708984s individual

.
current test PASSED/SKIPPED -- test_get_header_as_int in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 748.6152100563049s cumulative, 0.06682968139648438s individual

.
current test PASSED/SKIPPED -- test_append_link_multiple in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 748.678795337677s cumulative, 0.06358528137207031s individual


tests/test_sink_and_static.py .
current test PASSED/SKIPPED -- test_sink_before_static_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_sink_and_static.py: 748.772157907486s cumulative, 0.09336256980895996s individual

.
current test PASSED/SKIPPED -- test_sink_after_static_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_sink_and_static.py: 748.8463370800018s cumulative, 0.07417917251586914s individual

.
current test PASSED/SKIPPED -- test_sink_after_static_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_sink_and_static.py: 748.9277341365814s cumulative, 0.08139705657958984s individual

.
current test PASSED/SKIPPED -- test_sink_before_static_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_sink_and_static.py: 749.0223891735077s cumulative, 0.09465503692626953s individual


tests/asgi/test_request_body_asgi.py .
current test PASSED/SKIPPED -- test_content_length_smaller_than_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 749.0608186721802s cumulative, 0.03842949867248535s individual

.
current test PASSED/SKIPPED -- test_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 749.1316108703613s cumulative, 0.07079219818115234s individual

.
current test PASSED/SKIPPED -- test_content_length_smaller_than_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 749.1686832904816s cumulative, 0.03707242012023926s individual

.
current test PASSED/SKIPPED -- test_tiny_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 749.2301938533783s cumulative, 0.061510562896728516s individual

.
current test PASSED/SKIPPED -- test_tiny_body_overflow in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 749.2886412143707s cumulative, 0.05844736099243164s individual

.
current test PASSED/SKIPPED -- test_content_length_smaller_than_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 749.3233013153076s cumulative, 0.03466010093688965s individual

.
current test PASSED/SKIPPED -- test_content_length_smaller_than_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 749.3567309379578s cumulative, 0.033429622650146484s individual

.
current test PASSED/SKIPPED -- test_bounded_stream_alias in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 749.3790829181671s cumulative, 0.022351980209350586s individual

.
current test PASSED/SKIPPED -- test_request_repr in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 749.402147769928s cumulative, 0.023064851760864258s individual

.
current test PASSED/SKIPPED -- test_read_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 749.4817643165588s cumulative, 0.07961654663085938s individual

.
current test PASSED/SKIPPED -- test_content_length_smaller_than_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 749.5113034248352s cumulative, 0.029539108276367188s individual

.
current test PASSED/SKIPPED -- test_content_length_smaller_than_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 749.538565158844s cumulative, 0.027261734008789062s individual


tests/asgi/test_boundedstream_asgi.py .
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 801.4175524711609s cumulative, 51.878987312316895s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 801.5608167648315s cumulative, 0.1432642936706543s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 801.6657545566559s cumulative, 0.10493779182434082s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 801.7868251800537s cumulative, 0.12107062339782715s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 801.9060935974121s cumulative, 0.11926841735839844s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 843.330694437027s cumulative, 41.42460083961487s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 843.338773727417s cumulative, 0.008079290390014648s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 843.3469572067261s cumulative, 0.008183479309082031s individual

s
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 843.3539192676544s cumulative, 0.0069620609283447266s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 843.3609941005707s cumulative, 0.007074832916259766s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 843.3678598403931s cumulative, 0.006865739822387695s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 843.3875088691711s cumulative, 0.019649028778076172s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 843.4079325199127s cumulative, 0.02042365074157715s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 843.4562637805939s cumulative, 0.048331260681152344s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 843.4646489620209s cumulative, 0.008385181427001953s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 843.4723014831543s cumulative, 0.0076525211334228516s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 843.4800794124603s cumulative, 0.0077779293060302734s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 843.4894075393677s cumulative, 0.009328126907348633s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 884.5023663043976s cumulative, 41.01295876502991s individual

.
current test PASSED/SKIPPED -- test_exhaust_with_disconnect in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 884.5089251995087s cumulative, 0.006558895111083984s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 884.52077293396s cumulative, 0.011847734451293945s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 884.5315704345703s cumulative, 0.010797500610351562s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 884.5397627353668s cumulative, 0.008192300796508789s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 884.5499680042267s cumulative, 0.010205268859863281s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 884.5908350944519s cumulative, 0.04086709022521973s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 884.6385326385498s cumulative, 0.04769754409790039s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 884.6484422683716s cumulative, 0.009909629821777344s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 884.6571745872498s cumulative, 0.008732318878173828s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 884.6653506755829s cumulative, 0.008176088333129883s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 884.6729567050934s cumulative, 0.007606029510498047s individual

.
current test PASSED/SKIPPED -- test_filelike in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 884.6778774261475s cumulative, 0.0049207210540771484s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 884.6857080459595s cumulative, 0.007830619812011719s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 884.6927664279938s cumulative, 0.007058382034301758s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 884.6995680332184s cumulative, 0.006801605224609375s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 884.7068200111389s cumulative, 0.0072519779205322266s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 884.7142508029938s cumulative, 0.0074307918548583984s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 884.7303400039673s cumulative, 0.016089200973510742s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 884.7376883029938s cumulative, 0.007348299026489258s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 884.75128865242s cumulative, 0.013600349426269531s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 884.7594039440155s cumulative, 0.008115291595458984s individual

s
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 884.7645230293274s cumulative, 0.0051190853118896484s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 884.7715783119202s cumulative, 0.0070552825927734375s individual

s
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 884.7785980701447s cumulative, 0.007019758224487305s individual

.
current test PASSED/SKIPPED -- test_iterate_streaming_request in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 884.7842156887054s cumulative, 0.005617618560791016s individual

.
current test PASSED/SKIPPED -- test_iteration_already_started in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 884.7926518917084s cumulative, 0.008436203002929688s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 884.8025896549225s cumulative, 0.009937763214111328s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 884.8098227977753s cumulative, 0.007233142852783203s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 884.8165142536163s cumulative, 0.006691455841064453s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 884.8229629993439s cumulative, 0.0064487457275390625s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 884.8301057815552s cumulative, 0.007142782211303711s individual

s
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 884.8363285064697s cumulative, 0.006222724914550781s individual

s
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 884.8410038948059s cumulative, 0.004675388336181641s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 884.8478074073792s cumulative, 0.0068035125732421875s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 884.8539724349976s cumulative, 0.006165027618408203s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 884.8689348697662s cumulative, 0.014962434768676758s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 884.8774733543396s cumulative, 0.008538484573364258s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 884.8893392086029s cumulative, 0.011865854263305664s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 884.9399237632751s cumulative, 0.05058455467224121s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 884.9758899211884s cumulative, 0.03596615791320801s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 885.0096952915192s cumulative, 0.03380537033081055s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 885.0563113689423s cumulative, 0.0466160774230957s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 885.0947110652924s cumulative, 0.038399696350097656s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 885.1363451480865s cumulative, 0.04163408279418945s individual

.
current test PASSED/SKIPPED -- test_exhaust in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 885.164489030838s cumulative, 0.028143882751464844s individual

s
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 885.1914372444153s cumulative, 0.026948213577270508s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 885.227053642273s cumulative, 0.035616397857666016s individual

s
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 885.2539100646973s cumulative, 0.026856422424316406s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 885.2850143909454s cumulative, 0.031104326248168945s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 885.3147983551025s cumulative, 0.029783964157104492s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 885.3440291881561s cumulative, 0.029230833053588867s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 885.3777742385864s cumulative, 0.03374505043029785s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 885.4101281166077s cumulative, 0.032353878021240234s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 885.443327665329s cumulative, 0.03319954872131348s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 885.5076901912689s cumulative, 0.0643625259399414s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 885.5504047870636s cumulative, 0.042714595794677734s individual


tests/asgi/test_cythonized_asgi.py .
current test PASSED/SKIPPED -- test_is_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 885.5760481357574s cumulative, 0.025643348693847656s individual

.
current test PASSED/SKIPPED -- test_not_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 885.6024956703186s cumulative, 0.026447534561157227s individual

.
current test PASSED/SKIPPED -- test_not_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 885.6265637874603s cumulative, 0.024068117141723633s individual

F
current test FAILED -- test_jsonchema_validator in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 886.2203657627106s cumulative, 0.5938019752502441s individual

.
current test PASSED/SKIPPED -- test_is_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 886.245322227478s cumulative, 0.024956464767456055s individual

.
current test PASSED/SKIPPED -- test_scheduled_jobs_type_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 886.2993588447571s cumulative, 0.054036617279052734s individual

.
current test PASSED/SKIPPED -- test_is_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 886.3212444782257s cumulative, 0.02188563346862793s individual

.
current test PASSED/SKIPPED -- test_not_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 886.3468930721283s cumulative, 0.02564859390258789s individual

F
current test FAILED -- test_hooks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 886.9065864086151s cumulative, 0.5596933364868164s individual

.
current test PASSED/SKIPPED -- test_is_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 886.9316220283508s cumulative, 0.025035619735717773s individual

.
current test PASSED/SKIPPED -- test_is_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 886.9546012878418s cumulative, 0.022979259490966797s individual

.
current test PASSED/SKIPPED -- test_not_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 886.978394985199s cumulative, 0.023793697357177734s individual

.
current test PASSED/SKIPPED -- test_scheduled_jobs in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 887.5686030387878s cumulative, 0.5902080535888672s individual

.
current test PASSED/SKIPPED -- test_not_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 887.5921423435211s cumulative, 0.023539304733276367s individual

.
current test PASSED/SKIPPED -- test_not_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 887.6167016029358s cumulative, 0.02455925941467285s individual

.
current test PASSED/SKIPPED -- test_is_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 887.6385953426361s cumulative, 0.021893739700317383s individual


tests/test_validators.py .
current test PASSED/SKIPPED -- test_req_schema_validation_success in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 887.6748504638672s cumulative, 0.0362551212310791s individual

.
current test PASSED/SKIPPED -- test_both_schemas_validation_success in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 887.7502963542938s cumulative, 0.07544589042663574s individual

.
current test PASSED/SKIPPED -- test_req_schema_validation_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 887.7772881984711s cumulative, 0.026991844177246094s individual

.
current test PASSED/SKIPPED -- test_req_schema_validation_success in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 887.7964251041412s cumulative, 0.019136905670166016s individual

.
current test PASSED/SKIPPED -- test_req_schema_validation_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 887.8125874996185s cumulative, 0.016162395477294922s individual

.
current test PASSED/SKIPPED -- test_req_schema_validation_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 887.8369042873383s cumulative, 0.024316787719726562s individual

.
current test PASSED/SKIPPED -- test_resp_schema_validation_success in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 887.8866722583771s cumulative, 0.04976797103881836s individual

.
current test PASSED/SKIPPED -- test_req_schema_validation_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 887.939293384552s cumulative, 0.05262112617492676s individual

.
current test PASSED/SKIPPED -- test_resp_schema_validation_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 887.9827299118042s cumulative, 0.043436527252197266s individual

.
current test PASSED/SKIPPED -- test_both_schemas_validation_success in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 888.0350344181061s cumulative, 0.05230450630187988s individual

.
current test PASSED/SKIPPED -- test_both_schemas_validation_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 888.0633270740509s cumulative, 0.02829265594482422s individual

.
current test PASSED/SKIPPED -- test_both_schemas_validation_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 888.5383596420288s cumulative, 0.4750325679779053s individual

.
current test PASSED/SKIPPED -- test_resp_schema_validation_success in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 888.7933692932129s cumulative, 0.25500965118408203s individual

.
current test PASSED/SKIPPED -- test_resp_schema_validation_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 889.071161031723s cumulative, 0.27779173851013184s individual


tests/asgi/test_lifespan_handlers.py .
current test PASSED/SKIPPED -- test_multiple_handlers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_lifespan_handlers.py: 889.3797137737274s cumulative, 0.30855274200439453s individual

.
current test PASSED/SKIPPED -- test_asgi_conductor_raised_error_skips_shutdown in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_lifespan_handlers.py: 889.638614654541s cumulative, 0.25890088081359863s individual

.
current test PASSED/SKIPPED -- test_at_least_one_event_method_required in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_lifespan_handlers.py: 889.6679403781891s cumulative, 0.02932572364807129s individual

.
current test PASSED/SKIPPED -- test_startup_only in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_lifespan_handlers.py: 889.6827342510223s cumulative, 0.014793872833251953s individual

.
current test PASSED/SKIPPED -- test_shutdown_raises in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_lifespan_handlers.py: 889.693165063858s cumulative, 0.01043081283569336s individual

.
current test PASSED/SKIPPED -- test_startup_raises in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_lifespan_handlers.py: 889.700751543045s cumulative, 0.007586479187011719s individual

.
current test PASSED/SKIPPED -- test_shutdown_only in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_lifespan_handlers.py: 889.72673869133s cumulative, 0.02598714828491211s individual


tests/test_before_hooks.py .
current test PASSED/SKIPPED -- test_input_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 889.7589361667633s cumulative, 0.03219747543334961s individual

.
current test PASSED/SKIPPED -- test_parser_async in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 889.7787363529205s cumulative, 0.019800186157226562s individual

E
current test FAILED -- test_input_validator_inherited in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 889.9204459190369s cumulative, 0.141709566116333s individual

.
current test PASSED/SKIPPED -- test_field_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 889.9324634075165s cumulative, 0.012017488479614258s individual

E
current test FAILED -- test_piggybacking_resource_post_and_delete in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 897.5385298728943s cumulative, 7.606066465377808s individual

.
current test PASSED/SKIPPED -- test_parser_sync in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 897.5553736686707s cumulative, 0.016843795776367188s individual

E
current test FAILED -- test_wrapped_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 897.8225936889648s cumulative, 0.26722002029418945s individual

E
current test FAILED -- test_multiple_resource_hooks in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 897.9496893882751s cumulative, 0.12709569931030273s individual

E
current test FAILED -- test_param_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 898.0622766017914s cumulative, 0.11258721351623535s individual

.
current test PASSED/SKIPPED -- test_parser_async in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 898.1132671833038s cumulative, 0.05099058151245117s individual

.
current test PASSED/SKIPPED -- test_field_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 898.1811921596527s cumulative, 0.06792497634887695s individual

.
current test PASSED/SKIPPED -- test_multiple_resource_hooks in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 898.2462689876556s cumulative, 0.06507682800292969s individual

E
current test FAILED -- test_field_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 898.964105129242s cumulative, 0.7178361415863037s individual

.
current test PASSED/SKIPPED -- test_multiple_resource_hooks in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 899.024934053421s cumulative, 0.06082892417907715s individual

.
current test PASSED/SKIPPED -- test_parser_sync in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 899.0859732627869s cumulative, 0.06103920936584473s individual

.
current test PASSED/SKIPPED -- test_wrapped_resource_with_hooks_aware_of_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 899.1597242355347s cumulative, 0.07375097274780273s individual

E
current test FAILED -- test_piggybacking_resource_post_item in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 899.8596136569977s cumulative, 0.6998894214630127s individual

.
current test PASSED/SKIPPED -- test_piggybacking_resource_post_item in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 899.9147222042084s cumulative, 0.05510854721069336s individual

.
current test PASSED/SKIPPED -- test_wrapped_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 899.9732525348663s cumulative, 0.058530330657958984s individual

E
current test FAILED -- test_wrapped_resource_with_hooks_aware_of_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 900.5653200149536s cumulative, 0.5920674800872803s individual

.
current test PASSED/SKIPPED -- test_parser_sync in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 900.6140005588531s cumulative, 0.04868054389953613s individual

.
current test PASSED/SKIPPED -- test_param_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 900.6623599529266s cumulative, 0.04835939407348633s individual

.
current test PASSED/SKIPPED -- test_input_validator_inherited in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 900.7104992866516s cumulative, 0.048139333724975586s individual

.
current test PASSED/SKIPPED -- test_parser_sync in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 900.752792596817s cumulative, 0.04229331016540527s individual

.
current test PASSED/SKIPPED -- test_parser_async in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 900.8025996685028s cumulative, 0.049807071685791016s individual

E
current test FAILED -- test_field_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 901.4186599254608s cumulative, 0.6160602569580078s individual

.
current test PASSED/SKIPPED -- test_parser_async in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 901.4812018871307s cumulative, 0.06254196166992188s individual

.
current test PASSED/SKIPPED -- test_decorable_name_pattern in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 901.4969990253448s cumulative, 0.015797138214111328s individual

.
current test PASSED/SKIPPED -- test_field_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 901.5427613258362s cumulative, 0.04576230049133301s individual

E
current test FAILED -- test_multiple_resource_hooks in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 901.9832816123962s cumulative, 0.4405202865600586s individual

E
current test FAILED -- test_field_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 904.3598794937134s cumulative, 2.3765978813171387s individual

E
current test FAILED -- test_input_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 909.273095369339s cumulative, 4.91321587562561s individual

.
current test PASSED/SKIPPED -- test_piggybacking_resource_post_and_delete in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 909.3903136253357s cumulative, 0.1172182559967041s individual


tests/test_error.py .
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 909.4164841175079s cumulative, 0.02617049217224121s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 909.4411885738373s cumulative, 0.024704456329345703s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 909.4694111347198s cumulative, 0.02822256088256836s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 909.4910044670105s cumulative, 0.021593332290649414s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 909.5157835483551s cumulative, 0.024779081344604492s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 909.5329146385193s cumulative, 0.01713109016418457s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 909.5395619869232s cumulative, 0.006647348403930664s individual

.
current test PASSED/SKIPPED -- test_custom_400 in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 909.5573761463165s cumulative, 0.017814159393310547s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 909.5866351127625s cumulative, 0.02925896644592285s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 909.6228446960449s cumulative, 0.0362095832824707s individual

.
current test PASSED/SKIPPED -- test_with_retry_after_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 909.6580030918121s cumulative, 0.035158395767211914s individual

.
current test PASSED/SKIPPED -- test_other_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 909.6774957180023s cumulative, 0.019492626190185547s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 909.6971755027771s cumulative, 0.019679784774780273s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 909.7046041488647s cumulative, 0.007428646087646484s individual

.
current test PASSED/SKIPPED -- test_custom_400 in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 909.7115724086761s cumulative, 0.006968259811401367s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 909.7164731025696s cumulative, 0.004900693893432617s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 909.7221729755402s cumulative, 0.005699872970581055s individual

.
current test PASSED/SKIPPED -- test_override_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 909.727885723114s cumulative, 0.005712747573852539s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 909.7319433689117s cumulative, 0.004057645797729492s individual

.
current test PASSED/SKIPPED -- test_override_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 909.9540104866028s cumulative, 0.22206711769104004s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 910.1375241279602s cumulative, 0.18351364135742188s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 910.2884476184845s cumulative, 0.150923490524292s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 910.4007461071014s cumulative, 0.11229848861694336s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 910.5052468776703s cumulative, 0.10450077056884766s individual

.
current test PASSED/SKIPPED -- test_other_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 910.7195708751678s cumulative, 0.2143239974975586s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 910.9208164215088s cumulative, 0.20124554634094238s individual

.
current test PASSED/SKIPPED -- test_with_retry_after_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.0912630558014s cumulative, 0.17044663429260254s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.0962646007538s cumulative, 0.005001544952392578s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.1005642414093s cumulative, 0.004299640655517578s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.1043829917908s cumulative, 0.0038187503814697266s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.1082851886749s cumulative, 0.0039021968841552734s individual

.
current test PASSED/SKIPPED -- test_no_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.1131720542908s cumulative, 0.0048868656158447266s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.1165595054626s cumulative, 0.003387451171875s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.120044708252s cumulative, 0.0034852027893066406s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.1238961219788s cumulative, 0.0038514137268066406s individual

.
current test PASSED/SKIPPED -- test_other_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.1298027038574s cumulative, 0.005906581878662109s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.1363599300385s cumulative, 0.0065572261810302734s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.1401438713074s cumulative, 0.0037839412689208984s individual

.
current test PASSED/SKIPPED -- test_args_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.1439912319183s cumulative, 0.003847360610961914s individual

.
current test PASSED/SKIPPED -- test_custom_400 in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.1482074260712s cumulative, 0.004216194152832031s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.1516752243042s cumulative, 0.0034677982330322266s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.155012845993s cumulative, 0.0033376216888427734s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.1586363315582s cumulative, 0.003623485565185547s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.187566280365s cumulative, 0.028929948806762695s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.1929929256439s cumulative, 0.005426645278930664s individual

.
current test PASSED/SKIPPED -- test_with_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.1983768939972s cumulative, 0.005383968353271484s individual

.
current test PASSED/SKIPPED -- test_other_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.2041850090027s cumulative, 0.005808115005493164s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.2082560062408s cumulative, 0.00407099723815918s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.2123439311981s cumulative, 0.004087924957275391s individual

.
current test PASSED/SKIPPED -- test_other_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.2191593647003s cumulative, 0.006815433502197266s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.2226192951202s cumulative, 0.003459930419921875s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.2264132499695s cumulative, 0.003793954849243164s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.2301571369171s cumulative, 0.003743886947631836s individual

.
current test PASSED/SKIPPED -- test_args_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.2340188026428s cumulative, 0.003861665725708008s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.2373223304749s cumulative, 0.00330352783203125s individual

.
current test PASSED/SKIPPED -- test_override_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.2417206764221s cumulative, 0.004398345947265625s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.2450928688049s cumulative, 0.0033721923828125s individual

.
current test PASSED/SKIPPED -- test_args_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.2490556240082s cumulative, 0.00396275520324707s individual

.
current test PASSED/SKIPPED -- test_other_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.2539658546448s cumulative, 0.00491023063659668s individual

.
current test PASSED/SKIPPED -- test_override_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.2595603466034s cumulative, 0.005594491958618164s individual

.
current test PASSED/SKIPPED -- test_override_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.2643887996674s cumulative, 0.004828453063964844s individual

.
current test PASSED/SKIPPED -- test_no_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.2690818309784s cumulative, 0.004693031311035156s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.2728123664856s cumulative, 0.0037305355072021484s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.2767522335052s cumulative, 0.00393986701965332s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.2806460857391s cumulative, 0.0038938522338867188s individual

.
current test PASSED/SKIPPED -- test_override_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.285849571228s cumulative, 0.0052034854888916016s individual

.
current test PASSED/SKIPPED -- test_other_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.2904949188232s cumulative, 0.004645347595214844s individual

.
current test PASSED/SKIPPED -- test_other_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.294712305069s cumulative, 0.004217386245727539s individual

.
current test PASSED/SKIPPED -- test_http_error_repr in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.2978701591492s cumulative, 0.0031578540802001953s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.3025104999542s cumulative, 0.004640340805053711s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.3064069747925s cumulative, 0.003896474838256836s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.3103687763214s cumulative, 0.003961801528930664s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.3141922950745s cumulative, 0.003823518753051758s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.3174014091492s cumulative, 0.0032091140747070312s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.3214845657349s cumulative, 0.004083156585693359s individual

.
current test PASSED/SKIPPED -- test_no_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.3260941505432s cumulative, 0.004609584808349609s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.3298478126526s cumulative, 0.003753662109375s individual

.
current test PASSED/SKIPPED -- test_override_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.3341841697693s cumulative, 0.004336357116699219s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.33784532547s cumulative, 0.0036611557006835938s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.3421139717102s cumulative, 0.004268646240234375s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.3456392288208s cumulative, 0.003525257110595703s individual

.
current test PASSED/SKIPPED -- test_other_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.3504266738892s cumulative, 0.004787445068359375s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.354163646698s cumulative, 0.0037369728088378906s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.3584296703339s cumulative, 0.004266023635864258s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.3620345592499s cumulative, 0.003604888916015625s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.3657238483429s cumulative, 0.003689289093017578s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.3690767288208s cumulative, 0.0033528804779052734s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.3730072975159s cumulative, 0.003930568695068359s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.3764493465424s cumulative, 0.003442049026489258s individual

.
current test PASSED/SKIPPED -- test_args_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.380120754242s cumulative, 0.003671407699584961s individual

.
current test PASSED/SKIPPED -- test_other_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.3846583366394s cumulative, 0.0045375823974609375s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.3887438774109s cumulative, 0.004085540771484375s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.3926677703857s cumulative, 0.003923892974853516s individual

.
current test PASSED/SKIPPED -- test_args_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.3969037532806s cumulative, 0.004235982894897461s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.4013352394104s cumulative, 0.004431486129760742s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.413275718689s cumulative, 0.011940479278564453s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.4230644702911s cumulative, 0.009788751602172852s individual

.
current test PASSED/SKIPPED -- test_args_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.432062625885s cumulative, 0.00899815559387207s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.4382660388947s cumulative, 0.006203413009643555s individual

.
current test PASSED/SKIPPED -- test_override_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.490528345108s cumulative, 0.052262306213378906s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.522068977356s cumulative, 0.031540632247924805s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.5485877990723s cumulative, 0.026518821716308594s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.5760676860809s cumulative, 0.027479887008666992s individual

.
current test PASSED/SKIPPED -- test_override_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.6040978431702s cumulative, 0.0280301570892334s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.6270399093628s cumulative, 0.022942066192626953s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.6489057540894s cumulative, 0.0218658447265625s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.6732511520386s cumulative, 0.02434539794921875s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.6952710151672s cumulative, 0.02201986312866211s individual

.
current test PASSED/SKIPPED -- test_no_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.7260167598724s cumulative, 0.030745744705200195s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.7543566226959s cumulative, 0.028339862823486328s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.7811505794525s cumulative, 0.026793956756591797s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.8056945800781s cumulative, 0.02454400062561035s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.8292999267578s cumulative, 0.0236053466796875s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.8602032661438s cumulative, 0.030903339385986328s individual

.
current test PASSED/SKIPPED -- test_with_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.8830099105835s cumulative, 0.022806644439697266s individual

.
current test PASSED/SKIPPED -- test_other_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.9115657806396s cumulative, 0.028555870056152344s individual

.
current test PASSED/SKIPPED -- test_other_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.9409136772156s cumulative, 0.029347896575927734s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.9662644863129s cumulative, 0.02535080909729004s individual

.
current test PASSED/SKIPPED -- test_with_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 911.9919698238373s cumulative, 0.025705337524414062s individual

.
current test PASSED/SKIPPED -- test_override_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 912.0221853256226s cumulative, 0.03021550178527832s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 912.0518426895142s cumulative, 0.029657363891601562s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 912.0803668498993s cumulative, 0.028524160385131836s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 912.1082181930542s cumulative, 0.027851343154907227s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 912.1354155540466s cumulative, 0.02719736099243164s individual

.
current test PASSED/SKIPPED -- test_with_retry_after_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 912.1612989902496s cumulative, 0.02588343620300293s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 912.1846561431885s cumulative, 0.023357152938842773s individual

.
current test PASSED/SKIPPED -- test_no_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 912.2146964073181s cumulative, 0.030040264129638672s individual

.
current test PASSED/SKIPPED -- test_override_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 912.2499408721924s cumulative, 0.03524446487426758s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 912.2741131782532s cumulative, 0.024172306060791016s individual

.
current test PASSED/SKIPPED -- test_custom_400 in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 912.3007652759552s cumulative, 0.026652097702026367s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 912.326523065567s cumulative, 0.025757789611816406s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 912.3512191772461s cumulative, 0.02469611167907715s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 912.3781144618988s cumulative, 0.02689528465270996s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 912.4026906490326s cumulative, 0.024576187133789062s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 912.4281191825867s cumulative, 0.02542853355407715s individual

.
current test PASSED/SKIPPED -- test_no_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 912.456461429596s cumulative, 0.028342247009277344s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 912.4873049259186s cumulative, 0.030843496322631836s individual

.
current test PASSED/SKIPPED -- test_override_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 912.5171473026276s cumulative, 0.029842376708984375s individual


tests/test_deprecations.py .
current test PASSED/SKIPPED -- test_bounded_stream in /home/kaiyaok2/PythonProjects/falcon/tests/test_deprecations.py: 912.5374188423157s cumulative, 0.02027153968811035s individual


tests/asgi/test_sync.py .
current test PASSED/SKIPPED -- test_sync_helpers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_sync.py: 929.5514295101166s cumulative, 17.014010667800903s individual


tests/test_response.py .
current test PASSED/SKIPPED -- test_response_attempt_to_set_read_only_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 929.5995044708252s cumulative, 0.048074960708618164s individual

.
current test PASSED/SKIPPED -- test_response_set_content_type_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 929.6392436027527s cumulative, 0.039739131927490234s individual

.
current test PASSED/SKIPPED -- test_response_get_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 929.6831307411194s cumulative, 0.04388713836669922s individual

.
current test PASSED/SKIPPED -- test_response_set_content_type_not_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 929.7183113098145s cumulative, 0.03518056869506836s individual

.
current test PASSED/SKIPPED -- test_response_removed_stream_len in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 929.7637603282928s cumulative, 0.045449018478393555s individual

.
current test PASSED/SKIPPED -- test_response_option_mimetype_init in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 929.8345715999603s cumulative, 0.07081127166748047s individual

.
current test PASSED/SKIPPED -- test_response_set_content_type_not_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 929.8752372264862s cumulative, 0.040665626525878906s individual

.
current test PASSED/SKIPPED -- test_response_get_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 929.9202806949615s cumulative, 0.0450434684753418s individual

.
current test PASSED/SKIPPED -- test_response_set_content_type_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 929.9611093997955s cumulative, 0.040828704833984375s individual

.
current test PASSED/SKIPPED -- test_response_removed_stream_len in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 930.0002982616425s cumulative, 0.03918886184692383s individual

.
current test PASSED/SKIPPED -- test_response_attempt_to_set_read_only_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 930.0408067703247s cumulative, 0.04050850868225098s individual


tests/asgi/test_scheduled_callbacks.py .
current test PASSED/SKIPPED -- test_callback in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scheduled_callbacks.py: 930.1377823352814s cumulative, 0.09697556495666504s individual

.
current test PASSED/SKIPPED -- test_callback in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scheduled_callbacks.py: 930.2321784496307s cumulative, 0.09439611434936523s individual

.
current test PASSED/SKIPPED -- test_callback in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scheduled_callbacks.py: 930.3047723770142s cumulative, 0.07259392738342285s individual

.
current test PASSED/SKIPPED -- test_multiple in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scheduled_callbacks.py: 930.9060618877411s cumulative, 0.6012895107269287s individual

.
current test PASSED/SKIPPED -- test_callback in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scheduled_callbacks.py: 930.9546263217926s cumulative, 0.04856443405151367s individual


tests/test_sinks.py .
current test PASSED/SKIPPED -- test_single_simple_pattern in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 930.986813545227s cumulative, 0.03218722343444824s individual

.
current test PASSED/SKIPPED -- test_route_precedence_with_both_id in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 931.0700571537018s cumulative, 0.08324360847473145s individual

F
current test FAILED -- test_route_precedence_with_id in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 932.2669985294342s cumulative, 1.1969413757324219s individual

.
current test PASSED/SKIPPED -- test_single_simple_pattern in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 932.4547774791718s cumulative, 0.18777894973754883s individual

F
current test FAILED -- test_route_precedence_with_both_id in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 933.6526148319244s cumulative, 1.1978373527526855s individual

.
current test PASSED/SKIPPED -- test_multiple_patterns in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 933.6714162826538s cumulative, 0.018801450729370117s individual

.
current test PASSED/SKIPPED -- test_single_compiled_pattern in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 933.6856458187103s cumulative, 0.014229536056518555s individual

.
current test PASSED/SKIPPED -- test_single_default_pattern in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 933.7080674171448s cumulative, 0.022421598434448242s individual

.
current test PASSED/SKIPPED -- test_named_groups in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 933.7263345718384s cumulative, 0.018267154693603516s individual

.
current test PASSED/SKIPPED -- test_single_compiled_pattern in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 933.7397153377533s cumulative, 0.013380765914916992s individual

.
current test PASSED/SKIPPED -- test_route_precedence_with_id in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 933.7617211341858s cumulative, 0.022005796432495117s individual

F
current test FAILED -- test_with_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 933.9109809398651s cumulative, 0.1492598056793213s individual

.
current test PASSED/SKIPPED -- test_named_groups in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 933.9237923622131s cumulative, 0.012811422348022461s individual

.
current test PASSED/SKIPPED -- test_route_precedence in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 933.952565908432s cumulative, 0.02877354621887207s individual

F
current test FAILED -- test_route_precedence in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 934.1284725666046s cumulative, 0.17590665817260742s individual

.
current test PASSED/SKIPPED -- test_single_default_pattern in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 934.1514225006104s cumulative, 0.022949934005737305s individual

.
current test PASSED/SKIPPED -- test_multiple_patterns in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 934.2237060070038s cumulative, 0.07228350639343262s individual

.
current test PASSED/SKIPPED -- test_with_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 934.3052310943604s cumulative, 0.08152508735656738s individual

.
current test PASSED/SKIPPED -- test_add_sync_sink_with_wrapping in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 934.3565237522125s cumulative, 0.05129265785217285s individual

.
current test PASSED/SKIPPED -- test_add_sync_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 934.409116268158s cumulative, 0.05259251594543457s individual

.
current test PASSED/SKIPPED -- test_add_async_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 934.4718968868256s cumulative, 0.06278061866760254s individual

.
current test PASSED/SKIPPED -- test_add_async_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 934.5276505947113s cumulative, 0.05575370788574219s individual

.
current test PASSED/SKIPPED -- test_add_sync_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 934.5621516704559s cumulative, 0.034501075744628906s individual

F
current test FAILED -- test_add_sync_sink_with_wrapping in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 934.7953050136566s cumulative, 0.2331533432006836s individual


tests/test_httpstatus.py E
current test FAILED -- test_raise_status_in_before_hook in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 935.4782385826111s cumulative, 0.6829335689544678s individual

.
current test PASSED/SKIPPED -- test_raise_status_in_responder in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 935.5323779582977s cumulative, 0.05413937568664551s individual

.
current test PASSED/SKIPPED -- test_raise_status_survives_after_hooks in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 935.5823926925659s cumulative, 0.05001473426818848s individual

E
current test FAILED -- test_raise_status_in_responder in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 936.1820945739746s cumulative, 0.5997018814086914s individual

.
current test PASSED/SKIPPED -- test_raise_status_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 936.2292442321777s cumulative, 0.047149658203125s individual

E
current test FAILED -- test_raise_status_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 936.8761978149414s cumulative, 0.6469535827636719s individual

E
current test FAILED -- test_raise_status_survives_after_hooks in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 937.5108335018158s cumulative, 0.6346356868743896s individual

E
current test FAILED -- test_raise_status_runs_after_hooks in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 938.0433428287506s cumulative, 0.5325093269348145s individual

.
current test PASSED/SKIPPED -- test_raise_status_runs_after_hooks in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 938.1070413589478s cumulative, 0.06369853019714355s individual

.
current test PASSED/SKIPPED -- test_raise_status_in_before_hook in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 938.1502389907837s cumulative, 0.0431976318359375s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 938.1640901565552s cumulative, 0.013851165771484375s individual

F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 940.3462755680084s cumulative, 2.182185411453247s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 940.5397002696991s cumulative, 0.19342470169067383s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 940.5587589740753s cumulative, 0.019058704376220703s individual

F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 940.7793121337891s cumulative, 0.22055315971374512s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 940.7909069061279s cumulative, 0.011594772338867188s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 940.799088716507s cumulative, 0.00818181037902832s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 940.8075804710388s cumulative, 0.008491754531860352s individual

F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 940.9443776607513s cumulative, 0.13679718971252441s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 940.9771907329559s cumulative, 0.032813072204589844s individual

F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 941.5458126068115s cumulative, 0.5686218738555908s individual

F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 942.1209335327148s cumulative, 0.5751209259033203s individual

F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 949.1649804115295s cumulative, 7.044046878814697s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 949.2232449054718s cumulative, 0.05826449394226074s individual

.
current test PASSED/SKIPPED -- test_deprecated_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 949.2450497150421s cumulative, 0.0218048095703125s individual

F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 949.9825067520142s cumulative, 0.7374570369720459s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 950.0444884300232s cumulative, 0.0619816780090332s individual

F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 950.7141048908234s cumulative, 0.6696164608001709s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 950.7765140533447s cumulative, 0.062409162521362305s individual

F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 951.4945344924927s cumulative, 0.7180204391479492s individual

F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 952.1464068889618s cumulative, 0.6518723964691162s individual

F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 952.7940118312836s cumulative, 0.6476049423217773s individual

F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 953.2837264537811s cumulative, 0.4897146224975586s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 953.2947628498077s cumulative, 0.011036396026611328s individual

F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 955.7077867984772s cumulative, 2.4130239486694336s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 955.7242341041565s cumulative, 0.01644730567932129s individual

F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 956.1082870960236s cumulative, 0.38405299186706543s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 956.1441030502319s cumulative, 0.03581595420837402s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 956.1685345172882s cumulative, 0.024431467056274414s individual

.
current test PASSED/SKIPPED -- test_raise_status_in_process_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 956.1857361793518s cumulative, 0.017201662063598633s individual

.
current test PASSED/SKIPPED -- test_raise_status_in_process_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 956.2008168697357s cumulative, 0.015080690383911133s individual

E
current test FAILED -- test_raise_status_in_process_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 956.3466689586639s cumulative, 0.14585208892822266s individual

E
current test FAILED -- test_raise_status_runs_process_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 956.7774002552032s cumulative, 0.43073129653930664s individual

E
current test FAILED -- test_raise_status_in_process_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 964.2571802139282s cumulative, 7.479779958724976s individual

.
current test PASSED/SKIPPED -- test_raise_status_runs_process_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 964.2859709262848s cumulative, 0.028790712356567383s individual

E
current test FAILED -- test_media_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 964.9480662345886s cumulative, 0.662095308303833s individual

E
current test FAILED -- test_body_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 965.5617506504059s cumulative, 0.6136844158172607s individual

.
current test PASSED/SKIPPED -- test_body_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 965.6080460548401s cumulative, 0.0462954044342041s individual

E
current test FAILED -- test_data_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 966.2034931182861s cumulative, 0.5954470634460449s individual

.
current test PASSED/SKIPPED -- test_media_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 966.251136302948s cumulative, 0.047643184661865234s individual

.
current test PASSED/SKIPPED -- test_data_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 966.29177069664s cumulative, 0.0406343936920166s individual


tests/asgi/test_request_asgi.py .
current test PASSED/SKIPPED -- test_missing_server_in_scope in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_asgi.py: 966.3109838962555s cumulative, 0.019213199615478516s individual

.
current test PASSED/SKIPPED -- test_log_error_not_supported in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_asgi.py: 966.3311619758606s cumulative, 0.02017807960510254s individual


tests/test_cython.py F
current test FAILED -- test_imported_from_c_modules in /home/kaiyaok2/PythonProjects/falcon/tests/test_cython.py: 966.3909778594971s cumulative, 0.05981588363647461s individual

F
current test FAILED -- test_stream_has_private_read in /home/kaiyaok2/PythonProjects/falcon/tests/test_cython.py: 966.4349179267883s cumulative, 0.043940067291259766s individual


tests/asgi/test_scope.py .
current test PASSED/SKIPPED -- test_scheme in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 966.4593532085419s cumulative, 0.02443528175354004s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 966.509712934494s cumulative, 0.05035972595214844s individual

.
current test PASSED/SKIPPED -- test_cookies in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 966.535796880722s cumulative, 0.026083946228027344s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 966.581511259079s cumulative, 0.045714378356933594s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 966.6244113445282s cumulative, 0.04290008544921875s individual

.
current test PASSED/SKIPPED -- test_scheme in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 966.6510813236237s cumulative, 0.026669979095458984s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 966.6960608959198s cumulative, 0.04497957229614258s individual

.
current test PASSED/SKIPPED -- test_cookies in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 966.7202444076538s cumulative, 0.02418351173400879s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 966.7708044052124s cumulative, 0.05055999755859375s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 966.8078489303589s cumulative, 0.037044525146484375s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 966.8576488494873s cumulative, 0.04979991912841797s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 966.8965821266174s cumulative, 0.03893327713012695s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 966.941867351532s cumulative, 0.04528522491455078s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 966.9824504852295s cumulative, 0.040583133697509766s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_default_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 967.024448633194s cumulative, 0.04199814796447754s individual

.
current test PASSED/SKIPPED -- test_unsupported_scope_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 967.0613703727722s cumulative, 0.03692173957824707s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 967.1108293533325s cumulative, 0.049458980560302734s individual

.
current test PASSED/SKIPPED -- test_unsupported_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 967.1562249660492s cumulative, 0.045395612716674805s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 967.192666053772s cumulative, 0.03644108772277832s individual

.
current test PASSED/SKIPPED -- test_scheme in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 967.2181849479675s cumulative, 0.02551889419555664s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 967.2606222629547s cumulative, 0.04243731498718262s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 967.2989046573639s cumulative, 0.03828239440917969s individual

.
current test PASSED/SKIPPED -- test_scheme in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 967.3220934867859s cumulative, 0.02318882942199707s individual

.
current test PASSED/SKIPPED -- test_unsupported_scope_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 967.353349685669s cumulative, 0.03125619888305664s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 967.3844482898712s cumulative, 0.031098604202270508s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 967.4156291484833s cumulative, 0.031180858612060547s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 967.4472115039825s cumulative, 0.03158235549926758s individual

.
current test PASSED/SKIPPED -- test_query_string_values in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 967.4920673370361s cumulative, 0.04485583305358887s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 967.500411272049s cumulative, 0.008343935012817383s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 967.5065925121307s cumulative, 0.006181240081787109s individual

.
current test PASSED/SKIPPED -- test_unsupported_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 967.5232374668121s cumulative, 0.016644954681396484s individual

.
current test PASSED/SKIPPED -- test_scheme in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 967.5305879116058s cumulative, 0.007350444793701172s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 967.5657815933228s cumulative, 0.035193681716918945s individual

.
current test PASSED/SKIPPED -- test_scheme in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 967.5867147445679s cumulative, 0.020933151245117188s individual

.
current test PASSED/SKIPPED -- test_unsupported_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 967.6356112957001s cumulative, 0.04889655113220215s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 967.6715383529663s cumulative, 0.03592705726623535s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 967.7099094390869s cumulative, 0.03837108612060547s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 967.7480547428131s cumulative, 0.03814530372619629s individual

.
current test PASSED/SKIPPED -- test_missing_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 967.8017823696136s cumulative, 0.05372762680053711s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 967.8391680717468s cumulative, 0.03738570213317871s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 967.8691062927246s cumulative, 0.029938220977783203s individual

.
current test PASSED/SKIPPED -- test_scheme in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 967.8760714530945s cumulative, 0.006965160369873047s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 967.8822298049927s cumulative, 0.006158351898193359s individual

.
current test PASSED/SKIPPED -- test_unsupported_scope_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 967.8888099193573s cumulative, 0.0065801143646240234s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 967.8938271999359s cumulative, 0.005017280578613281s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 967.8983573913574s cumulative, 0.004530191421508789s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 968.0780839920044s cumulative, 0.17972660064697266s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 968.3582873344421s cumulative, 0.28020334243774414s individual

.
current test PASSED/SKIPPED -- test_unsupported_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 968.6654009819031s cumulative, 0.3071136474609375s individual

.
current test PASSED/SKIPPED -- test_cookies_options_meathod in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 968.7366666793823s cumulative, 0.07126569747924805s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 968.8662703037262s cumulative, 0.12960362434387207s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 969.031699180603s cumulative, 0.16542887687683105s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 969.1812524795532s cumulative, 0.1495532989501953s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 969.3312542438507s cumulative, 0.15000176429748535s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 969.4615015983582s cumulative, 0.1302473545074463s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 969.4767203330994s cumulative, 0.015218734741210938s individual


tests/test_cors_middleware.py F
current test FAILED -- test_allow_origin in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 969.6999373435974s cumulative, 0.22321701049804688s individual

F
current test FAILED -- test_allow_origin in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 969.8626656532288s cumulative, 0.16272830963134766s individual

.
current test PASSED/SKIPPED -- test_allow_credential_existing_origin in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 969.8740320205688s cumulative, 0.01136636734008789s individual

.
current test PASSED/SKIPPED -- test_expose_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 969.8822858333588s cumulative, 0.008253812789916992s individual

.
current test PASSED/SKIPPED -- test_allow_origin in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 969.8904032707214s cumulative, 0.008117437362670898s individual

.
current test PASSED/SKIPPED -- test_allow_origin_allow_credential in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 969.8982512950897s cumulative, 0.007848024368286133s individual

.
current test PASSED/SKIPPED -- test_allow_credential_list_or_str in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 969.9080348014832s cumulative, 0.009783506393432617s individual

F
current test FAILED -- test_allow_credential_wildcard in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 970.1925537586212s cumulative, 0.2845189571380615s individual

F
current test FAILED -- test_expose_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 970.8509957790375s cumulative, 0.6584420204162598s individual

.
current test PASSED/SKIPPED -- test_expose_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 970.9049308300018s cumulative, 0.05393505096435547s individual

.
current test PASSED/SKIPPED -- test_raises in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 970.9302313327789s cumulative, 0.02530050277709961s individual

F
current test FAILED -- test_allow_origin_allow_credential in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 971.5220925807953s cumulative, 0.5918612480163574s individual

F
current test FAILED -- test_expose_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 972.0716338157654s cumulative, 0.5495412349700928s individual

.
current test PASSED/SKIPPED -- test_allow_origin in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 972.1233243942261s cumulative, 0.05169057846069336s individual

.
current test PASSED/SKIPPED -- test_allow_credential_list_or_str in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 972.1753799915314s cumulative, 0.05205559730529785s individual

F
current test FAILED -- test_allow_credential_existing_origin in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 972.8456718921661s cumulative, 0.6702919006347656s individual

F
current test FAILED -- test_allow_credential_list_or_str in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 980.2283115386963s cumulative, 7.382639646530151s individual

.
current test PASSED/SKIPPED -- test_expose_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 980.2840642929077s cumulative, 0.05575275421142578s individual

F
current test FAILED -- test_allow_credential_list_or_str in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 980.9818818569183s cumulative, 0.6978175640106201s individual

.
current test PASSED/SKIPPED -- test_allow_origin in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 981.051415681839s cumulative, 0.0695338249206543s individual

.
current test PASSED/SKIPPED -- test_allow_credential_wildcard in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 981.0988564491272s cumulative, 0.04744076728820801s individual

F
current test FAILED -- test_allow_origin in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 981.7299427986145s cumulative, 0.6310863494873047s individual

F
current test FAILED -- test_expose_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 982.3624875545502s cumulative, 0.632544755935669s individual

.
current test PASSED/SKIPPED -- test_enabled_cors_no_origin in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 982.4082415103912s cumulative, 0.04575395584106445s individual

.
current test PASSED/SKIPPED -- test_enabled_cors_should_accept_all_origins_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 982.4527986049652s cumulative, 0.04455709457397461s individual

.
current test PASSED/SKIPPED -- test_enabled_cors_handles_preflighting in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 982.4996769428253s cumulative, 0.04687833786010742s individual

.
current test PASSED/SKIPPED -- test_enabled_cors_should_add_extra_headers_on_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 982.5367243289948s cumulative, 0.037047386169433594s individual

F
current test FAILED -- test_enabled_cors_handles_preflighting_no_headers_in_req in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 983.1385366916656s cumulative, 0.6018123626708984s individual

F
current test FAILED -- test_enabled_cors_no_origin in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 985.6093742847443s cumulative, 2.4708375930786133s individual

.
current test PASSED/SKIPPED -- test_disabled_cors_should_not_add_any_extra_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 985.624883890152s cumulative, 0.015509605407714844s individual

F
current test FAILED -- test_enabled_cors_handles_preflighting in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 985.8077828884125s cumulative, 0.18289899826049805s individual

F
current test FAILED -- test_enabled_cors_should_accept_all_origins_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 985.9490933418274s cumulative, 0.141310453414917s individual

F
current test FAILED -- test_enabled_cors_should_add_extra_headers_on_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 986.3019666671753s cumulative, 0.3528733253479004s individual

F
current test FAILED -- test_disabled_cors_should_not_add_any_extra_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 986.9756104946136s cumulative, 0.6736438274383545s individual

.
current test PASSED/SKIPPED -- test_enabled_cors_handles_preflighting_no_headers_in_req in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 987.0237374305725s cumulative, 0.048126935958862305s individual


tests/test_python_version_requirements.py .
current test PASSED/SKIPPED -- test_asgi in /home/kaiyaok2/PythonProjects/falcon/tests/test_python_version_requirements.py: 987.0429856777191s cumulative, 0.019248247146606445s individual


tests/test_app_initializers.py .
current test PASSED/SKIPPED -- test_api_media_type_overriding in /home/kaiyaok2/PythonProjects/falcon/tests/test_app_initializers.py: 987.0926218032837s cumulative, 0.049636125564575195s individual

.
current test PASSED/SKIPPED -- test_api_media_type_overriding in /home/kaiyaok2/PythonProjects/falcon/tests/test_app_initializers.py: 987.157220363617s cumulative, 0.06459856033325195s individual


tests/test_middleware.py F
current test FAILED -- test_response_middleware_raises_exception in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 994.4744024276733s cumulative, 7.3171820640563965s individual

F
current test FAILED -- test_log_get_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 995.4474718570709s cumulative, 0.973069429397583s individual

.
current test PASSED/SKIPPED -- test_response_middleware_raises_exception in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 995.5176992416382s cumulative, 0.07022738456726074s individual

.
current test PASSED/SKIPPED -- test_log_get_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 995.5723223686218s cumulative, 0.05462312698364258s individual

F
current test FAILED -- test_skip_process_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 996.4750552177429s cumulative, 0.9027328491210938s individual

.
current test PASSED/SKIPPED -- test_add_invalid_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 996.5052156448364s cumulative, 0.03016042709350586s individual

.
current test PASSED/SKIPPED -- test_log_get_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 996.5654294490814s cumulative, 0.06021380424499512s individual

.
current test PASSED/SKIPPED -- test_add_invalid_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 996.5944488048553s cumulative, 0.02901935577392578s individual

.
current test PASSED/SKIPPED -- test_skip_process_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 996.6523652076721s cumulative, 0.05791640281677246s individual

F
current test FAILED -- test_log_get_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 997.6975886821747s cumulative, 1.0452234745025635s individual

F
current test FAILED -- test_can_access_resource_params in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 998.4736289978027s cumulative, 0.7760403156280518s individual

.
current test PASSED/SKIPPED -- test_can_access_resource_params in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 998.5017976760864s cumulative, 0.028168678283691406s individual

F
current test FAILED -- test_can_access_resource_params in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1001.1024780273438s cumulative, 2.600680351257324s individual

.
current test PASSED/SKIPPED -- test_can_access_resource_params in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1001.1211731433868s cumulative, 0.01869511604309082s individual

.
current test PASSED/SKIPPED -- test_generate_trans_id_with_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1001.1343996524811s cumulative, 0.013226509094238281s individual

F
current test FAILED -- test_generate_trans_id_with_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1001.3344838619232s cumulative, 0.20008420944213867s individual

sF
current test FAILED -- test_api_initialization_with_cors_enabled_and_middleware_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1001.6130805015564s cumulative, 0.2785966396331787s individual

.
current test PASSED/SKIPPED -- test_api_initialization_with_cors_enabled_and_middleware_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1001.6421432495117s cumulative, 0.029062747955322266s individual

.
current test PASSED/SKIPPED -- test_api_initialization_with_cors_enabled_and_middleware_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1001.6667518615723s cumulative, 0.024608612060546875s individual

.
current test PASSED/SKIPPED -- test_api_initialization_with_cors_enabled_and_middleware_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1001.7116024494171s cumulative, 0.04485058784484863s individual

.
current test PASSED/SKIPPED -- test_api_initialization_with_cors_enabled_and_middleware_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1001.7387659549713s cumulative, 0.02716350555419922s individual

.
current test PASSED/SKIPPED -- test_api_initialization_with_cors_enabled_and_middleware_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1001.7618668079376s cumulative, 0.023100852966308594s individual

.
current test PASSED/SKIPPED -- test_api_initialization_with_cors_enabled_and_middleware_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1001.8052821159363s cumulative, 0.04341530799865723s individual

.
current test PASSED/SKIPPED -- test_api_initialization_with_cors_enabled_and_middleware_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1001.8474099636078s cumulative, 0.04212784767150879s individual

F
current test FAILED -- test_api_initialization_with_cors_enabled_and_middleware_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1009.2943134307861s cumulative, 7.446903467178345s individual

.
current test PASSED/SKIPPED -- test_api_initialization_with_cors_enabled_and_middleware_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1009.3055222034454s cumulative, 0.011208772659301758s individual

F
current test FAILED -- test_api_initialization_with_cors_enabled_and_middleware_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1009.8903942108154s cumulative, 0.5848720073699951s individual

F
current test FAILED -- test_api_initialization_with_cors_enabled_and_middleware_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1010.7062556743622s cumulative, 0.8158614635467529s individual

.
current test PASSED/SKIPPED -- test_error_composed_before_resp_middleware_called in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1010.7610239982605s cumulative, 0.05476832389831543s individual

.
current test PASSED/SKIPPED -- test_http_status_raised_from_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1010.8021450042725s cumulative, 0.04112100601196289s individual

F
current test FAILED -- test_http_status_raised_from_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1011.4948043823242s cumulative, 0.6926593780517578s individual

F
current test FAILED -- test_error_composed_before_resp_middleware_called in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1012.4082880020142s cumulative, 0.9134836196899414s individual

F
current test FAILED -- test_dont_need_params_in_signature in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1013.1719586849213s cumulative, 0.7636706829071045s individual

.
current test PASSED/SKIPPED -- test_dont_need_params_in_signature in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1013.197687625885s cumulative, 0.025728940963745117s individual

.
current test PASSED/SKIPPED -- test_process_request_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1013.2097923755646s cumulative, 0.01210474967956543s individual

.
current test PASSED/SKIPPED -- test_process_resource_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1013.2400097846985s cumulative, 0.030217409133911133s individual

F
current test FAILED -- test_process_resource_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1015.8445661067963s cumulative, 2.6045563220977783s individual

F
current test FAILED -- test_process_resource_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1016.1963303089142s cumulative, 0.3517642021179199s individual

.
current test PASSED/SKIPPED -- test_process_request_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1016.2132213115692s cumulative, 0.016891002655029297s individual

.
current test PASSED/SKIPPED -- test_process_resource_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1016.2275733947754s cumulative, 0.014352083206176758s individual

F
current test FAILED -- test_process_request_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1016.4189960956573s cumulative, 0.191422700881958s individual

.
current test PASSED/SKIPPED -- test_process_request_not_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1016.4309103488922s cumulative, 0.011914253234863281s individual

F
current test FAILED -- test_process_request_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1024.0955438613892s cumulative, 7.664633512496948s individual

F
current test FAILED -- test_process_request_not_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1024.4803576469421s cumulative, 0.3848137855529785s individual

F
current test FAILED -- test_order_mw_executed_when_exception_in_rsrc in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1025.1102244853973s cumulative, 0.6298668384552002s individual

.
current test PASSED/SKIPPED -- test_multiple_response_mw_throw_exception in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1025.1546549797058s cumulative, 0.04443049430847168s individual

F
current test FAILED -- test_middleware_execution_order in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1025.792095899582s cumulative, 0.6374409198760986s individual

F
current test FAILED -- test_inner_mw_throw_exception_while_processing_resp in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1026.4521279335022s cumulative, 0.6600320339202881s individual

F
current test FAILED -- test_order_independent_mw_executed_when_exception_in_rsrc in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1027.1351420879364s cumulative, 0.6830141544342041s individual

.
current test PASSED/SKIPPED -- test_generate_trans_id_and_time_with_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1027.1823620796204s cumulative, 0.04721999168395996s individual

.
current test PASSED/SKIPPED -- test_generate_trans_id_and_time_with_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1027.2223596572876s cumulative, 0.03999757766723633s individual

F
current test FAILED -- test_order_mw_executed_when_exception_in_resp in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1027.8831582069397s cumulative, 0.6607985496520996s individual

.
current test PASSED/SKIPPED -- test_middleware_execution_order in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1027.9235842227936s cumulative, 0.040426015853881836s individual

F
current test FAILED -- test_multiple_response_mw_throw_exception in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1028.5683765411377s cumulative, 0.6447923183441162s individual

F
current test FAILED -- test_inner_mw_with_ex_handler_throw_exception in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1030.806639432907s cumulative, 2.238262891769409s individual

.
current test PASSED/SKIPPED -- test_order_independent_mw_executed_when_exception_in_resp in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1031.0443801879883s cumulative, 0.23774075508117676s individual

.
current test PASSED/SKIPPED -- test_inner_mw_throw_exception_while_processing_resp in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1031.0603907108307s cumulative, 0.016010522842407227s individual

.
current test PASSED/SKIPPED -- test_order_independent_mw_executed_when_exception_in_req in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1031.072796344757s cumulative, 0.012405633926391602s individual

.
current test PASSED/SKIPPED -- test_order_mw_executed_when_exception_in_req in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1031.0845339298248s cumulative, 0.011737585067749023s individual

F
current test FAILED -- test_order_mw_executed_when_exception_in_req in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1031.348555803299s cumulative, 0.2640218734741211s individual

.
current test PASSED/SKIPPED -- test_order_independent_mw_executed_when_exception_in_rsrc in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1031.361747264862s cumulative, 0.013191461563110352s individual

.
current test PASSED/SKIPPED -- test_independent_middleware_execution_order in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1031.3694775104523s cumulative, 0.007730245590209961s individual

F
current test FAILED -- test_order_independent_mw_executed_when_exception_in_resp in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1031.5838844776154s cumulative, 0.21440696716308594s individual

F
current test FAILED -- test_inner_mw_throw_exception in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1039.1753470897675s cumulative, 7.5914626121521s individual

.
current test PASSED/SKIPPED -- test_order_mw_executed_when_exception_in_rsrc in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1039.1947355270386s cumulative, 0.019388437271118164s individual

F
current test FAILED -- test_independent_middleware_execution_order in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1039.4016773700714s cumulative, 0.20694184303283691s individual

.
current test PASSED/SKIPPED -- test_order_mw_executed_when_exception_in_resp in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1039.4165797233582s cumulative, 0.014902353286743164s individual

.
current test PASSED/SKIPPED -- test_legacy_middleware_called_with_correct_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1039.425775527954s cumulative, 0.009195804595947266s individual

.
current test PASSED/SKIPPED -- test_inner_mw_with_ex_handler_throw_exception in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1039.434180021286s cumulative, 0.00840449333190918s individual

.
current test PASSED/SKIPPED -- test_inner_mw_throw_exception in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1039.4429638385773s cumulative, 0.008783817291259766s individual

F
current test FAILED -- test_legacy_middleware_called_with_correct_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1039.6099061965942s cumulative, 0.16694235801696777s individual

F
current test FAILED -- test_generate_trans_id_and_time_with_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1039.7733261585236s cumulative, 0.1634199619293213s individual

F
current test FAILED -- test_generate_trans_id_and_time_with_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1040.4126300811768s cumulative, 0.6393039226531982s individual

.
current test PASSED/SKIPPED -- test_outer_mw_with_ex_handler_throw_exception in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1040.4728653430939s cumulative, 0.06023526191711426s individual

F
current test FAILED -- test_outer_mw_with_ex_handler_throw_exception in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1041.367449760437s cumulative, 0.8945844173431396s individual

F
current test FAILED -- test_order_independent_mw_executed_when_exception_in_req in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1042.1439061164856s cumulative, 0.776456356048584s individual

.
current test PASSED/SKIPPED -- test_base_path_is_removed_before_routing in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1042.199714422226s cumulative, 0.055808305740356445s individual

F
current test FAILED -- test_base_path_is_removed_before_routing in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1042.9448189735413s cumulative, 0.7451045513153076s individual


tests/test_request_context.py .
current test PASSED/SKIPPED -- test_custom_request_context_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_context.py: 1042.9706060886383s cumulative, 0.0257871150970459s individual

.
current test PASSED/SKIPPED -- test_default_request_context in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_context.py: 1042.9941074848175s cumulative, 0.02350139617919922s individual

.
current test PASSED/SKIPPED -- test_custom_request_context_request_access in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_context.py: 1043.0149159431458s cumulative, 0.02080845832824707s individual

.
current test PASSED/SKIPPED -- test_custom_request_context in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_context.py: 1043.0368974208832s cumulative, 0.021981477737426758s individual


tests/test_after_hooks.py .
current test PASSED/SKIPPED -- test_output_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 1043.0890686511993s cumulative, 0.05217123031616211s individual

F
current test FAILED -- test_wrapped_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 1043.73210811615s cumulative, 0.6430394649505615s individual

.
current test PASSED/SKIPPED -- test_after_hooks_on_suffixed_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 1043.7803926467896s cumulative, 0.04828453063964844s individual

F
current test FAILED -- test_wrapped_resource_with_hooks_aware_of_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 1044.9745194911957s cumulative, 1.194126844406128s individual

.
current test PASSED/SKIPPED -- test_resource_with_uri_fields in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 1045.329525232315s cumulative, 0.35500574111938477s individual

.
current test PASSED/SKIPPED -- test_hook_as_callable_class in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 1045.6763396263123s cumulative, 0.3468143939971924s individual

.
current test PASSED/SKIPPED -- test_hook_as_callable_class in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 1046.0041780471802s cumulative, 0.3278384208679199s individual

.
current test PASSED/SKIPPED -- test_after_hooks_on_suffixed_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 1046.0201621055603s cumulative, 0.015984058380126953s individual

.
current test PASSED/SKIPPED -- test_wrapped_resource_with_hooks_aware_of_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 1046.0314149856567s cumulative, 0.011252880096435547s individual

F
current test FAILED -- test_wrapped_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 1051.5321097373962s cumulative, 5.500694751739502s individual

.
current test PASSED/SKIPPED -- test_after_hooks_on_suffixed_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 1051.600575208664s cumulative, 0.0684654712677002s individual

.
current test PASSED/SKIPPED -- test_wrapped_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 1051.6173796653748s cumulative, 0.01680445671081543s individual

.
current test PASSED/SKIPPED -- test_wrapped_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 1051.628514289856s cumulative, 0.011134624481201172s individual

F
current test FAILED -- test_resource_with_uri_fields in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 1054.1657195091248s cumulative, 2.537205219268799s individual

.
current test PASSED/SKIPPED -- test_resource_with_uri_fields in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 1054.1834993362427s cumulative, 0.017779827117919922s individual

.
current test PASSED/SKIPPED -- test_serializer in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 1054.1945848464966s cumulative, 0.01108551025390625s individual

F
current test FAILED -- test_resource_with_uri_fields in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 1054.348998785019s cumulative, 0.15441393852233887s individual

.
current test PASSED/SKIPPED -- test_serializer in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 1054.3592422008514s cumulative, 0.010243415832519531s individual

.
current test PASSED/SKIPPED -- test_output_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 1054.3684051036835s cumulative, 0.00916290283203125s individual

.
current test PASSED/SKIPPED -- test_resource_with_uri_fields_async in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 1054.3764536380768s cumulative, 0.008048534393310547s individual

.
current test PASSED/SKIPPED -- test_after_hooks_on_suffixed_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 1054.3875403404236s cumulative, 0.011086702346801758s individual


tests/test_httperror.py .
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1054.3915283679962s cumulative, 0.003988027572631836s individual

E
current test FAILED -- test_invalid_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1054.5663883686066s cumulative, 0.17486000061035156s individual

E
current test FAILED -- test_forbidden in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1055.4787383079529s cumulative, 0.9123499393463135s individual

.
current test PASSED/SKIPPED -- test_411 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1055.541921377182s cumulative, 0.06318306922912598s individual

E
current test FAILED -- test_client_does_not_accept_anything in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1056.3834958076477s cumulative, 0.8415744304656982s individual

E
current test FAILED -- test_413 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1057.269338130951s cumulative, 0.8858423233032227s individual

.
current test PASSED/SKIPPED -- test_custom_error_serializer in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1057.3409156799316s cumulative, 0.07157754898071289s individual

.
current test PASSED/SKIPPED -- test_unicode_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1057.3900151252747s cumulative, 0.04909944534301758s individual

E
current test FAILED -- test_client_does_not_accept_json_or_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1058.1486139297485s cumulative, 0.758598804473877s individual

E
current test FAILED -- test_414_with_custom_kwargs in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1058.7723445892334s cumulative, 0.6237306594848633s individual

E
current test FAILED -- test_forbidden in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1066.008303642273s cumulative, 7.235959053039551s individual

.
current test PASSED/SKIPPED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1066.0473356246948s cumulative, 0.039031982421875s individual

.
current test PASSED/SKIPPED -- test_missing_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1066.0790767669678s cumulative, 0.03174114227294922s individual

.
current test PASSED/SKIPPED -- test_410_without_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1066.1099209785461s cumulative, 0.03084421157836914s individual

.
current test PASSED/SKIPPED -- test_416 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1066.1437330245972s cumulative, 0.03381204605102539s individual

.
current test PASSED/SKIPPED -- test_413 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1066.16579079628s cumulative, 0.022057771682739258s individual

.
current test PASSED/SKIPPED -- test_414_with_title in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1066.197715997696s cumulative, 0.031925201416015625s individual

E
current test FAILED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1066.819412469864s cumulative, 0.6216964721679688s individual

E
current test FAILED -- test_custom_serializer_no_representation in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1069.391732931137s cumulative, 2.5723204612731934s individual

.
current test PASSED/SKIPPED -- test_404_with_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1069.4139420986176s cumulative, 0.02220916748046875s individual

.
current test PASSED/SKIPPED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1069.458333015442s cumulative, 0.04439091682434082s individual

E
current test FAILED -- test_410_with_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1069.7309548854828s cumulative, 0.27262187004089355s individual

.
current test PASSED/SKIPPED -- test_client_does_not_accept_json_or_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1069.7455086708069s cumulative, 0.01455378532409668s individual

E
current test FAILED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1070.4477248191833s cumulative, 0.7022161483764648s individual

E
current test FAILED -- test_411 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1071.310920715332s cumulative, 0.8631958961486816s individual

.
current test PASSED/SKIPPED -- test_epic_fail_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1071.3659670352936s cumulative, 0.05504631996154785s individual

.
current test PASSED/SKIPPED -- test_temporary_413_integer_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1071.414538860321s cumulative, 0.04857182502746582s individual

.
current test PASSED/SKIPPED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1071.4651339054108s cumulative, 0.05059504508972168s individual

.
current test PASSED/SKIPPED -- test_503_datetime_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1071.5180644989014s cumulative, 0.052930593490600586s individual

E
current test FAILED -- test_custom_error_serializer_optional_representation in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1072.2837183475494s cumulative, 0.7656538486480713s individual

.
current test PASSED/SKIPPED -- test_405_with_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1072.3407263755798s cumulative, 0.05700802803039551s individual

.
current test PASSED/SKIPPED -- test_429 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1072.3931550979614s cumulative, 0.0524287223815918s individual

.
current test PASSED/SKIPPED -- test_405_without_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1072.4422693252563s cumulative, 0.049114227294921875s individual

E
current test FAILED -- test_429_datetime in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1073.2739069461823s cumulative, 0.8316376209259033s individual

E
current test FAILED -- test_no_description_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1079.7524962425232s cumulative, 6.478589296340942s individual

E
current test FAILED -- test_custom_error_serializer_optional_representation in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1080.5028054714203s cumulative, 0.7503092288970947s individual

.
current test PASSED/SKIPPED -- test_epic_fail_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1080.5504698753357s cumulative, 0.04766440391540527s individual

E
current test FAILED -- test_unicode_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1081.1610839366913s cumulative, 0.6106140613555908s individual

E
current test FAILED -- test_414 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1081.7090196609497s cumulative, 0.5479357242584229s individual

E
current test FAILED -- test_429_no_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1082.2520744800568s cumulative, 0.5430548191070557s individual

E
current test FAILED -- test_temporary_413_integer_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1084.6952254772186s cumulative, 2.4431509971618652s individual

E
current test FAILED -- test_503_integer_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1084.9894435405731s cumulative, 0.2942180633544922s individual

E
current test FAILED -- test_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1085.1883113384247s cumulative, 0.1988677978515625s individual

E
current test FAILED -- test_416 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1092.7204217910767s cumulative, 7.5321104526519775s individual

E
current test FAILED -- test_429 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1092.9787192344666s cumulative, 0.2582974433898926s individual

E
current test FAILED -- test_epic_fail_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1093.9122383594513s cumulative, 0.9335191249847412s individual

E
current test FAILED -- test_epic_fail_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1094.7211410999298s cumulative, 0.8089027404785156s individual

.
current test PASSED/SKIPPED -- test_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1094.7747213840485s cumulative, 0.053580284118652344s individual

E
current test FAILED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1095.5916810035706s cumulative, 0.8169596195220947s individual

.
current test PASSED/SKIPPED -- test_no_description_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1095.6389837265015s cumulative, 0.0473027229309082s individual

.
current test PASSED/SKIPPED -- test_misc in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1095.7357151508331s cumulative, 0.09673142433166504s individual

E
current test FAILED -- test_405_without_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1096.4796831607819s cumulative, 0.7439680099487305s individual

E
current test FAILED -- test_404_without_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1097.695050239563s cumulative, 1.215367078781128s individual

.
current test PASSED/SKIPPED -- test_epic_fail_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1098.044005393982s cumulative, 0.3489551544189453s individual

.
current test PASSED/SKIPPED -- test_invalid_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1098.3854868412018s cumulative, 0.34148144721984863s individual

E
current test FAILED -- test_503_datetime_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1099.0982604026794s cumulative, 0.7127735614776611s individual

E
current test FAILED -- test_unicode_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1105.9822466373444s cumulative, 6.883986234664917s individual

E
current test FAILED -- test_405_without_body_with_extra_headers_double_check in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.8635702133179s cumulative, 0.8813235759735107s individual

.
current test PASSED/SKIPPED -- test_forbidden in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.8791108131409s cumulative, 0.015540599822998047s individual

E
current test FAILED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1107.1417438983917s cumulative, 0.2626330852508545s individual

E
current test FAILED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1107.9908587932587s cumulative, 0.8491148948669434s individual

E
current test FAILED -- test_custom_error_serializer_optional_representation in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1108.7980260849s cumulative, 0.8071672916412354s individual

.
current test PASSED/SKIPPED -- test_405_without_body_with_extra_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1108.8476631641388s cumulative, 0.0496370792388916s individual

.
current test PASSED/SKIPPED -- test_410_with_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1108.8945627212524s cumulative, 0.04689955711364746s individual

.
current test PASSED/SKIPPED -- test_503_integer_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1108.9411089420319s cumulative, 0.046546220779418945s individual

.
current test PASSED/SKIPPED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1108.9849014282227s cumulative, 0.0437924861907959s individual

E
current test FAILED -- test_epic_fail_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1109.741230726242s cumulative, 0.7563292980194092s individual

E
current test FAILED -- test_invalid_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1110.5213267803192s cumulative, 0.7800960540771484s individual

.
current test PASSED/SKIPPED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1110.5582036972046s cumulative, 0.03687691688537598s individual

E
current test FAILED -- test_serialize_error_uses_media_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1117.0395452976227s cumulative, 6.481341600418091s individual

E
current test FAILED -- test_misc in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1117.8657190799713s cumulative, 0.8261737823486328s individual

.
current test PASSED/SKIPPED -- test_429_datetime in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1117.905351638794s cumulative, 0.039632558822631836s individual

.
current test PASSED/SKIPPED -- test_invalid_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1117.9384903907776s cumulative, 0.03313875198364258s individual

.
current test PASSED/SKIPPED -- test_forbidden in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1117.9808967113495s cumulative, 0.042406320571899414s individual

.
current test PASSED/SKIPPED -- test_to_json_dumps in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1117.9983508586884s cumulative, 0.017454147338867188s individual

E
current test FAILED -- test_404_with_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1118.7048828601837s cumulative, 0.7065320014953613s individual

E
current test FAILED -- test_no_description_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1119.231187582016s cumulative, 0.5263047218322754s individual

.
current test PASSED/SKIPPED -- test_epic_fail_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1119.5930898189545s cumulative, 0.36190223693847656s individual

.
current test PASSED/SKIPPED -- test_414_with_custom_kwargs in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1119.9373648166656s cumulative, 0.34427499771118164s individual

.
current test PASSED/SKIPPED -- test_405_without_body_with_extra_headers_double_check in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1120.2848465442657s cumulative, 0.34748172760009766s individual

.
current test PASSED/SKIPPED -- test_forbidden in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1120.5680260658264s cumulative, 0.28317952156066895s individual

.
current test PASSED/SKIPPED -- test_no_description_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1120.8932580947876s cumulative, 0.32523202896118164s individual

.
current test PASSED/SKIPPED -- test_base_class in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1120.9152493476868s cumulative, 0.021991252899169922s individual

.
current test PASSED/SKIPPED -- test_414_with_description in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1120.9252481460571s cumulative, 0.009998798370361328s individual

E
current test FAILED -- test_414_with_description in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1121.1962904930115s cumulative, 0.2710423469543457s individual

E
current test FAILED -- test_401 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1121.3474249839783s cumulative, 0.15113449096679688s individual

.
current test PASSED/SKIPPED -- test_429_no_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1121.3584833145142s cumulative, 0.011058330535888672s individual

E
current test FAILED -- test_epic_fail_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1121.9251079559326s cumulative, 0.566624641418457s individual

.
current test PASSED/SKIPPED -- test_epic_fail_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1121.9730632305145s cumulative, 0.04795527458190918s individual

E
current test FAILED -- test_temporary_413_datetime_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1122.8083245754242s cumulative, 0.835261344909668s individual

.
current test PASSED/SKIPPED -- test_custom_serializer_no_representation in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1122.8645339012146s cumulative, 0.05620932579040527s individual

.
current test PASSED/SKIPPED -- test_client_does_not_accept_anything in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1122.9167139530182s cumulative, 0.05218005180358887s individual

E
current test FAILED -- test_405_with_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1130.0195860862732s cumulative, 7.102872133255005s individual

E
current test FAILED -- test_forbidden in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1130.887609243393s cumulative, 0.868023157119751s individual

.
current test PASSED/SKIPPED -- test_404_without_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1130.945799589157s cumulative, 0.058190345764160156s individual

E
current test FAILED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1131.8249294757843s cumulative, 0.8791298866271973s individual

E
current test FAILED -- test_414_with_title in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1132.6340944766998s cumulative, 0.8091650009155273s individual

E
current test FAILED -- test_serialize_no_json_media_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1133.409696817398s cumulative, 0.7756023406982422s individual

E
current test FAILED -- test_custom_error_serializer in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1135.7507965564728s cumulative, 2.341099739074707s individual

.
current test PASSED/SKIPPED -- test_serialize_no_json_media_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1135.99578166008s cumulative, 0.24498510360717773s individual

.
current test PASSED/SKIPPED -- test_custom_error_serializer_optional_representation in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1136.0226085186005s cumulative, 0.026826858520507812s individual

.
current test PASSED/SKIPPED -- test_temporary_413_datetime_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1136.1134989261627s cumulative, 0.09089040756225586s individual

.
current test PASSED/SKIPPED -- test_414 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1136.1248981952667s cumulative, 0.011399269104003906s individual

E
current test FAILED -- test_base_class in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1136.3346002101898s cumulative, 0.2097020149230957s individual

E
current test FAILED -- test_custom_error_serializer_optional_representation in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1136.4789044857025s cumulative, 0.1443042755126953s individual

.
current test PASSED/SKIPPED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1136.4885339736938s cumulative, 0.009629487991333008s individual

.
current test PASSED/SKIPPED -- test_serialize_error_uses_media_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1136.4959406852722s cumulative, 0.007406711578369141s individual

E
current test FAILED -- test_405_without_body_with_extra_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1144.257154226303s cumulative, 7.761213541030884s individual

.
current test PASSED/SKIPPED -- test_unicode_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1144.271343946457s cumulative, 0.014189720153808594s individual

.
current test PASSED/SKIPPED -- test_MediaMalformedError in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1144.2756042480469s cumulative, 0.00426030158996582s individual

E
current test FAILED -- test_missing_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1144.504755973816s cumulative, 0.22915172576904297s individual

.
current test PASSED/SKIPPED -- test_custom_error_serializer_optional_representation in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1144.5370650291443s cumulative, 0.03230905532836914s individual

.
current test PASSED/SKIPPED -- test_custom_error_serializer_optional_representation in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1144.5554206371307s cumulative, 0.018355607986450195s individual

E
current test FAILED -- test_epic_fail_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1145.5269372463226s cumulative, 0.9715166091918945s individual

.
current test PASSED/SKIPPED -- test_custom_error_serializer_optional_representation in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1145.6118483543396s cumulative, 0.08491110801696777s individual

E
current test FAILED -- test_410_without_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1146.8201696872711s cumulative, 1.2083213329315186s individual

.
current test PASSED/SKIPPED -- test_401 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1146.8935589790344s cumulative, 0.07338929176330566s individual


tests/test_wsgi_servers.py Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 40135 --interface wsgi _wsgi_test_app:app
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 32807 --interface wsgi _wsgi_test_app:app
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 50261 --interface wsgi _wsgi_test_app:app
E
current test FAILED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 1177.6449122428894s cumulative, 30.75135326385498s individual

s
current test PASSED/SKIPPED -- test_post_multipart_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 1177.6643478870392s cumulative, 0.019435644149780273s individual

Starting uWSGI...
uwsgi --http 127.0.0.1:50577 --wsgi-file _wsgi_test_app.py
s
current test PASSED/SKIPPED -- test_static_file in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 1177.6956655979156s cumulative, 0.031317710876464844s individual

Starting uWSGI...
uwsgi --http 127.0.0.1:58637 --wsgi-file _wsgi_test_app.py
s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 1177.7100493907928s cumulative, 0.014383792877197266s individual

Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:56875 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:52347 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:46133 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
E
current test FAILED -- test_get_deprecated in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 1208.7869229316711s cumulative, 31.076873540878296s individual

s
current test PASSED/SKIPPED -- test_get_deprecated in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 1209.0110363960266s cumulative, 0.22411346435546875s individual

s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 1209.2479140758514s cumulative, 0.2368776798248291s individual

Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 44655 --interface wsgi _wsgi_test_app:app
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 50097 --interface wsgi _wsgi_test_app:app
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 57193 --interface wsgi _wsgi_test_app:app
E
current test FAILED -- test_static_file in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 1240.1144478321075s cumulative, 30.866533756256104s individual

Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 41223 --interface wsgi _wsgi_test_app:app
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 40743 --interface wsgi _wsgi_test_app:app
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 43153 --interface wsgi _wsgi_test_app:app
E
current test FAILED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 1270.7724993228912s cumulative, 30.65805149078369s individual

Starting uWSGI...
uwsgi --http 127.0.0.1:42197 --wsgi-file _wsgi_test_app.py
s
current test PASSED/SKIPPED -- test_get_deprecated in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 1270.8183851242065s cumulative, 0.04588580131530762s individual

Starting uWSGI...
uwsgi --http 127.0.0.1:34299 --wsgi-file _wsgi_test_app.py
s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 1270.8641238212585s cumulative, 0.04573869705200195s individual

s
current test PASSED/SKIPPED -- test_post_multipart_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 1270.9148917198181s cumulative, 0.05076789855957031s individual

Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 58059 --interface wsgi _wsgi_test_app:app
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 57697 --interface wsgi _wsgi_test_app:app
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 48153 --interface wsgi _wsgi_test_app:app
E
current test FAILED -- test_post_multipart_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 1301.364112854004s cumulative, 30.44922113418579s individual

Starting uWSGI...
uwsgi --http 127.0.0.1:39221 --wsgi-file _wsgi_test_app.py
s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 1301.408215045929s cumulative, 0.04410219192504883s individual

s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 1301.4456260204315s cumulative, 0.03741097450256348s individual

Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 52643 --interface wsgi _wsgi_test_app:app
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 43539 --interface wsgi _wsgi_test_app:app
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 48151 --interface wsgi _wsgi_test_app:app
E
current test FAILED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 1332.3352663516998s cumulative, 30.88964033126831s individual

s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 1332.3798882961273s cumulative, 0.044621944427490234s individual

s
current test PASSED/SKIPPED -- test_static_file in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 1332.4196717739105s cumulative, 0.039783477783203125s individual

s
current test PASSED/SKIPPED -- test_get_deprecated in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 1332.459374666214s cumulative, 0.0397028923034668s individual

s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 1332.5020370483398s cumulative, 0.04266238212585449s individual

s
current test PASSED/SKIPPED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 1332.5483603477478s cumulative, 0.046323299407958984s individual

Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 34743 --interface wsgi _wsgi_test_app:app
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 54163 --interface wsgi _wsgi_test_app:app
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 43337 --interface wsgi _wsgi_test_app:app
E
current test FAILED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 1363.1037635803223s cumulative, 30.555403232574463s individual

s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 1363.1504681110382s cumulative, 0.04670453071594238s individual

Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:43867 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:51539 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:57237 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
E
current test FAILED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 1393.7223629951477s cumulative, 30.571894884109497s individual

s
current test PASSED/SKIPPED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 1393.771021604538s cumulative, 0.04865860939025879s individual

Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:49991 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:47751 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:44425 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
E
current test FAILED -- test_post_multipart_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 1424.5642657279968s cumulative, 30.793244123458862s individual

Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 57213 --interface wsgi _wsgi_test_app:app
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 42691 --interface wsgi _wsgi_test_app:app
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 40097 --interface wsgi _wsgi_test_app:app
E
current test FAILED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 1455.2711787223816s cumulative, 30.706912994384766s individual

Starting uWSGI...
uwsgi --http 127.0.0.1:54067 --wsgi-file _wsgi_test_app.py
s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 1455.2997651100159s cumulative, 0.028586387634277344s individual

Starting uWSGI...
uwsgi --http 127.0.0.1:57391 --wsgi-file _wsgi_test_app.py
s
current test PASSED/SKIPPED -- test_post_multipart_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 1455.3171529769897s cumulative, 0.017387866973876953s individual

Starting uWSGI...
uwsgi --http 127.0.0.1:39129 --wsgi-file _wsgi_test_app.py
s
current test PASSED/SKIPPED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 1455.3474705219269s cumulative, 0.03031754493713379s individual

s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 1455.3653588294983s cumulative, 0.017888307571411133s individual

Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:37333 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:43583 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:56075 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
E
current test FAILED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 1486.4491333961487s cumulative, 31.08377456665039s individual

Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:48817 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:56707 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:39717 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
E
current test FAILED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 1517.103777885437s cumulative, 30.65464448928833s individual

Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:60259 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:49769 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:40281 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
E
current test FAILED -- test_static_file in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 1547.7524671554565s cumulative, 30.64868927001953s individual

s
current test PASSED/SKIPPED -- test_static_file in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 1547.7874031066895s cumulative, 0.034935951232910156s individual

s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 1547.8538258075714s cumulative, 0.06642270088195801s individual

Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 35041 --interface wsgi _wsgi_test_app:app
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 46801 --interface wsgi _wsgi_test_app:app
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 56079 --interface wsgi _wsgi_test_app:app
E
current test FAILED -- test_get_deprecated in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 1579.2532844543457s cumulative, 31.399458646774292s individual

s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 1579.269363641739s cumulative, 0.016079187393188477s individual

Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:39421 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:60577 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:49169 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
E
current test FAILED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 1609.9558188915253s cumulative, 30.686455249786377s individual

Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:46047 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:33929 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:47903 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
E
current test FAILED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 1640.7630240917206s cumulative, 30.807205200195312s individual


tests/test_inspect.py F
current test FAILED -- test_static_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1641.2497119903564s cumulative, 0.48668789863586426s individual

.
current test PASSED/SKIPPED -- test_routes_empty_paths in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1641.2941007614136s cumulative, 0.044388771057128906s individual

.
current test PASSED/SKIPPED -- test_middleware_tree in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1641.3883519172668s cumulative, 0.09425115585327148s individual

F
current test FAILED -- test_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1641.8661329746246s cumulative, 0.4777810573577881s individual

.
current test PASSED/SKIPPED -- test_empty_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1642.0747511386871s cumulative, 0.2086181640625s individual

F
current test FAILED -- test_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1643.9094533920288s cumulative, 1.8347022533416748s individual

F
current test FAILED -- test_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1644.0815389156342s cumulative, 0.17208552360534668s individual

.
current test PASSED/SKIPPED -- test_dependent_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1644.0880382061005s cumulative, 0.006499290466308594s individual

.
current test PASSED/SKIPPED -- test_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1644.1124353408813s cumulative, 0.02439713478088379s individual

.
current test PASSED/SKIPPED -- test_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1644.1266605854034s cumulative, 0.014225244522094727s individual

F
current test FAILED -- test_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1644.2155990600586s cumulative, 0.08893847465515137s individual

.
current test PASSED/SKIPPED -- test_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1644.2227466106415s cumulative, 0.007147550582885742s individual

.
current test PASSED/SKIPPED -- test_dependent_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1644.2271628379822s cumulative, 0.004416227340698242s individual

.
current test PASSED/SKIPPED -- test_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1644.2342755794525s cumulative, 0.007112741470336914s individual

.
current test PASSED/SKIPPED -- test_routes_empty_paths in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1644.2411606311798s cumulative, 0.006885051727294922s individual

F
current test FAILED -- test_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1644.7064323425293s cumulative, 0.4652717113494873s individual

F
current test FAILED -- test_middleware_tree in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1651.3766162395477s cumulative, 6.670183897018433s individual

.
current test PASSED/SKIPPED -- test_static_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1651.3849596977234s cumulative, 0.00834345817565918s individual

.
current test PASSED/SKIPPED -- test_empty_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1651.3901665210724s cumulative, 0.0052068233489990234s individual

.
current test PASSED/SKIPPED -- test_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1651.4252634048462s cumulative, 0.03509688377380371s individual

.
current test PASSED/SKIPPED -- test_compiled_partial in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1651.4322714805603s cumulative, 0.007008075714111328s individual

.
current test PASSED/SKIPPED -- test_register_router_multiple_time in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1651.4370210170746s cumulative, 0.0047495365142822266s individual

.
current test PASSED/SKIPPED -- test_compiled_no_method_map in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1651.4505543708801s cumulative, 0.013533353805541992s individual

.
current test PASSED/SKIPPED -- test_route_method_info_suffix in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1651.4614973068237s cumulative, 0.010942935943603516s individual

.
current test PASSED/SKIPPED -- test_register_router_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1651.4937131404877s cumulative, 0.03221583366394043s individual

.
current test PASSED/SKIPPED -- test_register_other_router in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1651.5200350284576s cumulative, 0.026321887969970703s individual

.
current test PASSED/SKIPPED -- test_info_class_repr_to_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1651.6851019859314s cumulative, 0.16506695747375488s individual

.
current test PASSED/SKIPPED -- test_inspect_visitor in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1651.7069289684296s cumulative, 0.021826982498168945s individual

.
current test PASSED/SKIPPED -- test_process in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1651.7215631008148s cumulative, 0.014634132385253906s individual

.
current test PASSED/SKIPPED -- test_is_internal in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1651.7412152290344s cumulative, 0.019652128219604492s individual

.
current test PASSED/SKIPPED -- test_middleware_tree_no_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1651.848296403885s cumulative, 0.10708117485046387s individual

.
current test PASSED/SKIPPED -- test_middleware_tree_item in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1651.95033121109s cumulative, 0.1020348072052002s individual

.
current test PASSED/SKIPPED -- test_middleware_tree_no_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1652.0607345104218s cumulative, 0.11040329933166504s individual

.
current test PASSED/SKIPPED -- test_app_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1652.2240748405457s cumulative, 0.16334033012390137s individual

.
current test PASSED/SKIPPED -- test_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1652.2974255084991s cumulative, 0.07335066795349121s individual

.
current test PASSED/SKIPPED -- test_app_no_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1652.4558708667755s cumulative, 0.1584453582763672s individual

.
current test PASSED/SKIPPED -- test_app_static_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1652.6116843223572s cumulative, 0.15581345558166504s individual

.
current test PASSED/SKIPPED -- test_app_no_errors in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1652.7773995399475s cumulative, 0.16571521759033203s individual

.
current test PASSED/SKIPPED -- test_sink_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1652.8298273086548s cumulative, 0.05242776870727539s individual

.
current test PASSED/SKIPPED -- test_app_no_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1652.9978275299072s cumulative, 0.1680002212524414s individual

.
current test PASSED/SKIPPED -- test_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1653.0998175144196s cumulative, 0.1019899845123291s individual

.
current test PASSED/SKIPPED -- test_middleware_tree_response_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1653.1924738883972s cumulative, 0.09265637397766113s individual

.
current test PASSED/SKIPPED -- test_app_no_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1653.3322565555573s cumulative, 0.13978266716003418s individual

.
current test PASSED/SKIPPED -- test_app_no_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1653.4754247665405s cumulative, 0.14316821098327637s individual

.
current test PASSED/SKIPPED -- test_middleware_tree_no_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1653.5708305835724s cumulative, 0.09540581703186035s individual

.
current test PASSED/SKIPPED -- test_static_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1653.5971105098724s cumulative, 0.026279926300048828s individual

.
current test PASSED/SKIPPED -- test_middleware_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1653.6880328655243s cumulative, 0.09092235565185547s individual

.
current test PASSED/SKIPPED -- test_middleware_tree_response_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1653.7796468734741s cumulative, 0.0916140079498291s individual

.
current test PASSED/SKIPPED -- test_app_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1653.9275438785553s cumulative, 0.14789700508117676s individual

.
current test PASSED/SKIPPED -- test_app_no_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1654.0968968868256s cumulative, 0.16935300827026367s individual

.
current test PASSED/SKIPPED -- test_middleware_tree in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1654.2119343280792s cumulative, 0.11503744125366211s individual

.
current test PASSED/SKIPPED -- test_static_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1654.244716644287s cumulative, 0.03278231620788574s individual

.
current test PASSED/SKIPPED -- test_error_handler_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1654.2741422653198s cumulative, 0.029425621032714844s individual

.
current test PASSED/SKIPPED -- test_middleware_tree_item in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1654.376228094101s cumulative, 0.10208582878112793s individual

.
current test PASSED/SKIPPED -- test_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1654.424738407135s cumulative, 0.04851031303405762s individual

.
current test PASSED/SKIPPED -- test_middleware_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1654.5322568416595s cumulative, 0.10751843452453613s individual

.
current test PASSED/SKIPPED -- test_middleware_tree_no_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1654.6598165035248s cumulative, 0.12755966186523438s individual

.
current test PASSED/SKIPPED -- test_middleware_class in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1654.7650346755981s cumulative, 0.10521817207336426s individual

.
current test PASSED/SKIPPED -- test_static_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1654.7918612957s cumulative, 0.02682662010192871s individual

.
current test PASSED/SKIPPED -- test_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1654.8153681755066s cumulative, 0.023506879806518555s individual

.
current test PASSED/SKIPPED -- test_app_static_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1654.9671385288239s cumulative, 0.15177035331726074s individual

.
current test PASSED/SKIPPED -- test_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1655.095324754715s cumulative, 0.12818622589111328s individual

.
current test PASSED/SKIPPED -- test_app_no_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1655.4786806106567s cumulative, 0.38335585594177246s individual

.
current test PASSED/SKIPPED -- test_middleware_method_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1656.0313835144043s cumulative, 0.5527029037475586s individual

.
current test PASSED/SKIPPED -- test_middleware_class_no_methods in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1656.4993069171906s cumulative, 0.4679234027862549s individual

.
current test PASSED/SKIPPED -- test_app_static_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1657.1393523216248s cumulative, 0.6400454044342041s individual

.
current test PASSED/SKIPPED -- test_string_visitor_class in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1657.1427574157715s cumulative, 0.0034050941467285156s individual

.
current test PASSED/SKIPPED -- test_app_no_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1657.1796832084656s cumulative, 0.0369257926940918s individual

.
current test PASSED/SKIPPED -- test_middleware_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1657.2140927314758s cumulative, 0.034409523010253906s individual

.
current test PASSED/SKIPPED -- test_error_handler_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1657.2230274677277s cumulative, 0.008934736251831055s individual

.
current test PASSED/SKIPPED -- test_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1657.3078455924988s cumulative, 0.08481812477111816s individual

.
current test PASSED/SKIPPED -- test_middleware_class in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1657.337737083435s cumulative, 0.029891490936279297s individual

.
current test PASSED/SKIPPED -- test_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1657.3447675704956s cumulative, 0.007030487060546875s individual

.
current test PASSED/SKIPPED -- test_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1657.3606779575348s cumulative, 0.01591038703918457s individual

.
current test PASSED/SKIPPED -- test_app_no_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1657.3926711082458s cumulative, 0.03199315071105957s individual

.
current test PASSED/SKIPPED -- test_middleware_tree in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1657.4128336906433s cumulative, 0.020162582397460938s individual

.
current test PASSED/SKIPPED -- test_middleware_class_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1657.4321675300598s cumulative, 0.019333839416503906s individual

.
current test PASSED/SKIPPED -- test_static_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1657.4376230239868s cumulative, 0.005455493927001953s individual

.
current test PASSED/SKIPPED -- test_app_no_errors in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1657.4678292274475s cumulative, 0.03020620346069336s individual

.
current test PASSED/SKIPPED -- test_app_no_errors in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1657.4977858066559s cumulative, 0.029956579208374023s individual

.
current test PASSED/SKIPPED -- test_sink_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1657.5045008659363s cumulative, 0.006715059280395508s individual

.
current test PASSED/SKIPPED -- test_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1657.5461509227753s cumulative, 0.04165005683898926s individual

.
current test PASSED/SKIPPED -- test_route_method_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1657.632987499237s cumulative, 0.08683657646179199s individual

.
current test PASSED/SKIPPED -- test_app_static_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1657.8257675170898s cumulative, 0.1927800178527832s individual

.
current test PASSED/SKIPPED -- test_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1657.9655439853668s cumulative, 0.13977646827697754s individual

.
current test PASSED/SKIPPED -- test_app_no_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1658.1436290740967s cumulative, 0.1780850887298584s individual

.
current test PASSED/SKIPPED -- test_route_no_methods in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1658.2212007045746s cumulative, 0.07757163047790527s individual

.
current test PASSED/SKIPPED -- test_route_no_methods in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1658.2953610420227s cumulative, 0.07416033744812012s individual

.
current test PASSED/SKIPPED -- test_middleware_method_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1658.4158611297607s cumulative, 0.12050008773803711s individual

.
current test PASSED/SKIPPED -- test_middleware_tree in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1658.5571603775024s cumulative, 0.14129924774169922s individual

.
current test PASSED/SKIPPED -- test_route_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1658.6509048938751s cumulative, 0.09374451637268066s individual

.
current test PASSED/SKIPPED -- test_route_method_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1658.7461841106415s cumulative, 0.09527921676635742s individual

.
current test PASSED/SKIPPED -- test_middleware_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1658.8597555160522s cumulative, 0.1135714054107666s individual

.
current test PASSED/SKIPPED -- test_middleware_tree in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1658.9940159320831s cumulative, 0.1342604160308838s individual

.
current test PASSED/SKIPPED -- test_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1659.176507949829s cumulative, 0.18249201774597168s individual

.
current test PASSED/SKIPPED -- test_route_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1659.260769367218s cumulative, 0.08426141738891602s individual

.
current test PASSED/SKIPPED -- test_route_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1659.3355069160461s cumulative, 0.074737548828125s individual

.
current test PASSED/SKIPPED -- test_app_no_errors in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1659.49138712883s cumulative, 0.15588021278381348s individual

.
current test PASSED/SKIPPED -- test_app_no_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1659.6540048122406s cumulative, 0.16261768341064453s individual

.
current test PASSED/SKIPPED -- test_app_no_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1659.8215701580048s cumulative, 0.16756534576416016s individual

.
current test PASSED/SKIPPED -- test_route_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1659.886231660843s cumulative, 0.06466150283813477s individual

.
current test PASSED/SKIPPED -- test_middleware_class_no_methods in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1659.9781422615051s cumulative, 0.09191060066223145s individual

.
current test PASSED/SKIPPED -- test_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1660.0083680152893s cumulative, 0.030225753784179688s individual

.
current test PASSED/SKIPPED -- test_middleware_tree_item in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1660.106586933136s cumulative, 0.09821891784667969s individual

.
current test PASSED/SKIPPED -- test_middleware_tree_item in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1660.2116181850433s cumulative, 0.10503125190734863s individual

.
current test PASSED/SKIPPED -- test_app_no_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1660.3502006530762s cumulative, 0.13858246803283691s individual

.
current test PASSED/SKIPPED -- test_middleware_class_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1660.441871881485s cumulative, 0.09167122840881348s individual


tests/test_uri_templates_legacy.py .
current test PASSED/SKIPPED -- test_two_fields in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1660.4618871212006s cumulative, 0.020015239715576172s individual

.
current test PASSED/SKIPPED -- test_three_fields in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1660.477689743042s cumulative, 0.015802621841430664s individual

.
current test PASSED/SKIPPED -- test_two_fields in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1660.49706697464s cumulative, 0.01937723159790039s individual

.
current test PASSED/SKIPPED -- test_no_fields in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1660.5169322490692s cumulative, 0.01986527442932129s individual

.
current test PASSED/SKIPPED -- test_deprecated_warning in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1660.5364170074463s cumulative, 0.019484758377075195s individual

.
current test PASSED/SKIPPED -- test_string_type_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1660.555142402649s cumulative, 0.01872539520263672s individual

.
current test PASSED/SKIPPED -- test_one_field in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1660.5789232254028s cumulative, 0.02378082275390625s individual

.
current test PASSED/SKIPPED -- test_no_fields in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1660.5936369895935s cumulative, 0.014713764190673828s individual

.
current test PASSED/SKIPPED -- test_one_field_with_prefixed_digits in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1660.6079061031342s cumulative, 0.014269113540649414s individual

.
current test PASSED/SKIPPED -- test_template_may_not_contain_double_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1660.6230065822601s cumulative, 0.015100479125976562s individual

.
current test PASSED/SKIPPED -- test_template_may_not_contain_double_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1660.6382229328156s cumulative, 0.015216350555419922s individual

.
current test PASSED/SKIPPED -- test_string_type_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1660.6523473262787s cumulative, 0.014124393463134766s individual

.
current test PASSED/SKIPPED -- test_template_may_not_contain_double_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1660.6585981845856s cumulative, 0.006250858306884766s individual

.
current test PASSED/SKIPPED -- test_template_must_start_with_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1660.6781055927277s cumulative, 0.019507408142089844s individual

.
current test PASSED/SKIPPED -- test_template_must_start_with_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1660.7020990848541s cumulative, 0.023993492126464844s individual

.
current test PASSED/SKIPPED -- test_malformed_field in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1660.7288918495178s cumulative, 0.02679276466369629s individual

.
current test PASSED/SKIPPED -- test_no_fields in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1660.754229068756s cumulative, 0.02533721923828125s individual

.
current test PASSED/SKIPPED -- test_root in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1660.768713235855s cumulative, 0.014484167098999023s individual

.
current test PASSED/SKIPPED -- test_template_may_not_contain_double_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1660.7790248394012s cumulative, 0.010311603546142578s individual

.
current test PASSED/SKIPPED -- test_one_field_with_digits in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1660.7961089611053s cumulative, 0.017084121704101562s individual

.
current test PASSED/SKIPPED -- test_template_may_not_contain_double_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1660.8006212711334s cumulative, 0.004512310028076172s individual

.
current test PASSED/SKIPPED -- test_template_may_not_contain_double_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1660.8039631843567s cumulative, 0.0033419132232666016s individual


tests/test_wsgi_errors.py .
current test PASSED/SKIPPED -- test_responder_logged_bytestring in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_errors.py: 1660.813585281372s cumulative, 0.00962209701538086s individual


tests/test_response_media.py .
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 1660.9141857624054s cumulative, 0.1006004810333252s individual

.
current test PASSED/SKIPPED -- test_unknown_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 1661.0974323749542s cumulative, 0.18324661254882812s individual

.
current test PASSED/SKIPPED -- test_non_ascii_json_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 1661.2553794384003s cumulative, 0.15794706344604492s individual

.
current test PASSED/SKIPPED -- test_non_ascii_json_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 1661.4011044502258s cumulative, 0.14572501182556152s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 1661.5601716041565s cumulative, 0.15906715393066406s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 1661.7564251422882s cumulative, 0.19625353813171387s individual

.
current test PASSED/SKIPPED -- test_default_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 1661.9208726882935s cumulative, 0.16444754600524902s individual

.
current test PASSED/SKIPPED -- test_non_ascii_json_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 1662.088178396225s cumulative, 0.16730570793151855s individual

.
current test PASSED/SKIPPED -- test_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 1662.248033285141s cumulative, 0.15985488891601562s individual

.
current test PASSED/SKIPPED -- test_non_ascii_json_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 1662.4015548229218s cumulative, 0.15352153778076172s individual

.
current test PASSED/SKIPPED -- test_data in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 1662.4569065570831s cumulative, 0.05535173416137695s individual

.
current test PASSED/SKIPPED -- test_non_ascii_json_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 1662.4660415649414s cumulative, 0.009135007858276367s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 1662.4742758274078s cumulative, 0.008234262466430664s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 1662.51757979393s cumulative, 0.0433039665222168s individual

.
current test PASSED/SKIPPED -- test_mimeparse_edgecases in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 1662.5278675556183s cumulative, 0.010287761688232422s individual

.
current test PASSED/SKIPPED -- test_use_cached_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 1662.538177728653s cumulative, 0.010310173034667969s individual

.
current test PASSED/SKIPPED -- test_text in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 1662.544676542282s cumulative, 0.006498813629150391s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 1662.551406621933s cumulative, 0.006730079650878906s individual

.
current test PASSED/SKIPPED -- test_media_rendered_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 1662.5577096939087s cumulative, 0.006303071975708008s individual


tests/asgi/test_request_context_asgi.py .
current test PASSED/SKIPPED -- test_custom_request_context_failure in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_context_asgi.py: 1662.5618078708649s cumulative, 0.004098176956176758s individual

.
current test PASSED/SKIPPED -- test_custom_request_context_request_access in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_context_asgi.py: 1662.5656578540802s cumulative, 0.0038499832153320312s individual

.
current test PASSED/SKIPPED -- test_default_request_context in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_context_asgi.py: 1662.5690939426422s cumulative, 0.0034360885620117188s individual

.
current test PASSED/SKIPPED -- test_custom_request_context in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_context_asgi.py: 1662.5723247528076s cumulative, 0.0032308101654052734s individual


tests/asgi/test_asgi_conductor.py .
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 1662.5883157253265s cumulative, 0.0159909725189209s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 1662.5977697372437s cumulative, 0.009454011917114258s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 1662.6047081947327s cumulative, 0.006938457489013672s individual

.
current test PASSED/SKIPPED -- test_generic_request in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 1662.612015247345s cumulative, 0.0073070526123046875s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 1662.6259462833405s cumulative, 0.013931035995483398s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 1662.6326084136963s cumulative, 0.006662130355834961s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 1662.6387169361115s cumulative, 0.006108522415161133s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 1662.6449177265167s cumulative, 0.0062007904052734375s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 1662.651508808136s cumulative, 0.006591081619262695s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 1662.6575775146484s cumulative, 0.006068706512451172s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 1662.6644756793976s cumulative, 0.006898164749145508s individual

.
current test PASSED/SKIPPED -- test_wsgi_not_supported in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 1662.669759273529s cumulative, 0.0052835941314697266s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 1662.6775970458984s cumulative, 0.007837772369384766s individual

.
current test PASSED/SKIPPED -- test_generic_request in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 1662.6837689876556s cumulative, 0.0061719417572021484s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 1662.6896760463715s cumulative, 0.0059070587158203125s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 1662.695395231247s cumulative, 0.005719184875488281s individual

.
current test PASSED/SKIPPED -- test_default_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 1662.7013556957245s cumulative, 0.0059604644775390625s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 1662.7077515125275s cumulative, 0.006395816802978516s individual


tests/asgi/test_middleware_asgi.py .
current test PASSED/SKIPPED -- test_raise_on_incompatible in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_middleware_asgi.py: 1662.7118818759918s cumulative, 0.004130363464355469s individual

.
current test PASSED/SKIPPED -- test_raise_on_incompatible in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_middleware_asgi.py: 1662.7155044078827s cumulative, 0.0036225318908691406s individual

.
current test PASSED/SKIPPED -- test_raise_on_incompatible in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_middleware_asgi.py: 1662.7230246067047s cumulative, 0.007520198822021484s individual

.
current test PASSED/SKIPPED -- test_raise_on_incompatible in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_middleware_asgi.py: 1662.736139535904s cumulative, 0.01311492919921875s individual


tests/test_uri_templates.py .
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1662.7953279018402s cumulative, 0.0591883659362793s individual

F
current test FAILED -- test_single in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1663.4951593875885s cumulative, 0.699831485748291s individual

F
current test FAILED -- test_same_level_complex_var in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1664.2165756225586s cumulative, 0.7214162349700928s individual

.
current test PASSED/SKIPPED -- test_int_converter_rejections in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1664.2637195587158s cumulative, 0.04714393615722656s individual

F
current test FAILED -- test_uuid_converter_complex_segment in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1664.9637684822083s cumulative, 0.7000489234924316s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1665.010484457016s cumulative, 0.04671597480773926s individual

F
current test FAILED -- test_adding_suffix_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1665.6363017559052s cumulative, 0.6258172988891602s individual

.
current test PASSED/SKIPPED -- test_no_vars in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1665.6838619709015s cumulative, 0.04756021499633789s individual

.
current test PASSED/SKIPPED -- test_relative_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1665.713962316513s cumulative, 0.030100345611572266s individual

F
current test FAILED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1666.3295135498047s cumulative, 0.615551233291626s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1666.3802599906921s cumulative, 0.05074644088745117s individual

.
current test PASSED/SKIPPED -- test_single in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1666.4213988780975s cumulative, 0.04113888740539551s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1666.4557657241821s cumulative, 0.03436684608459473s individual

F
current test FAILED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1667.448013305664s cumulative, 0.9922475814819336s individual

F
current test FAILED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1669.2675840854645s cumulative, 1.819570779800415s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1669.2813653945923s cumulative, 0.013781309127807617s individual

F
current test FAILED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1669.4163482189178s cumulative, 0.13498282432556152s individual

F
current test FAILED -- test_converter_custom in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1676.5760216712952s cumulative, 7.159673452377319s individual

.
current test PASSED/SKIPPED -- test_empty_path_component in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1676.5839958190918s cumulative, 0.00797414779663086s individual

F
current test FAILED -- test_with_and_without_trailing_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1676.7613611221313s cumulative, 0.17736530303955078s individual

F
current test FAILED -- test_multiple in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1676.9546074867249s cumulative, 0.19324636459350586s individual

F
current test FAILED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1677.186630487442s cumulative, 0.23202300071716309s individual

F
current test FAILED -- test_converter_custom in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1677.9573616981506s cumulative, 0.7707312107086182s individual

.
current test PASSED/SKIPPED -- test_empty_path_component in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1678.001003742218s cumulative, 0.04364204406738281s individual

.
current test PASSED/SKIPPED -- test_empty_path_component in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1678.0420820713043s cumulative, 0.04107832908630371s individual

.
current test PASSED/SKIPPED -- test_empty_path_component in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1678.078544139862s cumulative, 0.03646206855773926s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1678.1338305473328s cumulative, 0.055286407470703125s individual

.
current test PASSED/SKIPPED -- test_single in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1678.1969666481018s cumulative, 0.06313610076904297s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1678.2534115314484s cumulative, 0.05644488334655762s individual

F
current test FAILED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1679.0176706314087s cumulative, 0.7642590999603271s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1679.0882885456085s cumulative, 0.0706179141998291s individual

F
current test FAILED -- test_int_converter_rejections in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1679.8244409561157s cumulative, 0.7361524105072021s individual

F
current test FAILED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1680.3680469989777s cumulative, 0.5436060428619385s individual

F
current test FAILED -- test_float_converter_non_finite_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1682.2877249717712s cumulative, 1.919677972793579s individual

.
current test PASSED/SKIPPED -- test_empty_path_component in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1682.5244824886322s cumulative, 0.23675751686096191s individual

.
current test PASSED/SKIPPED -- test_single_path_segment in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1682.674968957901s cumulative, 0.15048646926879883s individual

F
current test FAILED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1688.4787833690643s cumulative, 5.80381441116333s individual

F
current test FAILED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1690.0860192775726s cumulative, 1.6072359085083008s individual

F
current test FAILED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1690.273321390152s cumulative, 0.1873021125793457s individual

.
current test PASSED/SKIPPED -- test_converter_custom in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1690.2885067462921s cumulative, 0.015185356140136719s individual

.
current test PASSED/SKIPPED -- test_multiple in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1690.298168182373s cumulative, 0.009661436080932617s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1690.3071160316467s cumulative, 0.00894784927368164s individual

.
current test PASSED/SKIPPED -- test_custom_error_on_suffix_route_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1690.3152372837067s cumulative, 0.008121252059936523s individual

F
current test FAILED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1690.7325432300568s cumulative, 0.41730594635009766s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1690.787972688675s cumulative, 0.05542945861816406s individual

.
current test PASSED/SKIPPED -- test_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1690.8444340229034s cumulative, 0.056461334228515625s individual

.
current test PASSED/SKIPPED -- test_custom_error_on_suffix_route_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1690.874272108078s cumulative, 0.029838085174560547s individual

.
current test PASSED/SKIPPED -- test_empty_path_component in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1690.90430021286s cumulative, 0.030028104782104492s individual

F
current test FAILED -- test_int_converter_rejections in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1691.6130857467651s cumulative, 0.7087855339050293s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1691.662768125534s cumulative, 0.0496823787689209s individual

F
current test FAILED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1692.3899035453796s cumulative, 0.727135419845581s individual

F
current test FAILED -- test_single in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1693.181137084961s cumulative, 0.7912335395812988s individual

F
current test FAILED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1693.9017939567566s cumulative, 0.7206568717956543s individual

.
current test PASSED/SKIPPED -- test_single_trailing_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1693.977900981903s cumulative, 0.07610702514648438s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1694.0173089504242s cumulative, 0.039407968521118164s individual

.
current test PASSED/SKIPPED -- test_with_and_without_trailing_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1694.080272436142s cumulative, 0.06296348571777344s individual

F
current test FAILED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1695.0955505371094s cumulative, 1.0152781009674072s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1695.369285583496s cumulative, 0.27373504638671875s individual

.
current test PASSED/SKIPPED -- test_empty_path_component in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1695.5746400356293s cumulative, 0.2053544521331787s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1695.9012877941132s cumulative, 0.3266477584838867s individual

F
current test FAILED -- test_same_level_complex_var in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1696.5286793708801s cumulative, 0.6273915767669678s individual

F
current test FAILED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1703.063493013382s cumulative, 6.534813642501831s individual

.
current test PASSED/SKIPPED -- test_int_converter_rejections in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1703.3379304409027s cumulative, 0.27443742752075195s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1703.5802302360535s cumulative, 0.24229979515075684s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1703.5968821048737s cumulative, 0.01665186882019043s individual

F
current test FAILED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1703.917610168457s cumulative, 0.320728063583374s individual

.
current test PASSED/SKIPPED -- test_root_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1703.935796737671s cumulative, 0.018186569213867188s individual

.
current test PASSED/SKIPPED -- test_same_level_complex_var in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1703.953756570816s cumulative, 0.0179598331451416s individual

.
current test PASSED/SKIPPED -- test_uuid_converter_complex_segment in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1703.9710459709167s cumulative, 0.017289400100708008s individual

F
current test FAILED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1704.2941398620605s cumulative, 0.32309389114379883s individual

F
current test FAILED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1705.0693140029907s cumulative, 0.7751741409301758s individual

F
current test FAILED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1705.7972819805145s cumulative, 0.7279679775238037s individual

F
current test FAILED -- test_single in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1706.5650644302368s cumulative, 0.76778244972229s individual

F
current test FAILED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1707.3339393138885s cumulative, 0.7688748836517334s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1707.3996098041534s cumulative, 0.06567049026489258s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1707.4680659770966s cumulative, 0.06845617294311523s individual

F
current test FAILED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1708.0985004901886s cumulative, 0.630434513092041s individual

.
current test PASSED/SKIPPED -- test_relative_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1708.1284658908844s cumulative, 0.02996540069580078s individual

F
current test FAILED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1709.6031651496887s cumulative, 1.4746992588043213s individual

F
current test FAILED -- test_root_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1710.8362441062927s cumulative, 1.233078956604004s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1710.8980102539062s cumulative, 0.06176614761352539s individual

F
current test FAILED -- test_with_and_without_trailing_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1718.603057384491s cumulative, 7.705047130584717s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1718.8284685611725s cumulative, 0.22541117668151855s individual

.
current test PASSED/SKIPPED -- test_with_and_without_trailing_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1718.8513531684875s cumulative, 0.022884607315063477s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1718.8659164905548s cumulative, 0.014563322067260742s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1718.8804738521576s cumulative, 0.014557361602783203s individual

.
current test PASSED/SKIPPED -- test_converter_custom in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1718.9053990840912s cumulative, 0.02492523193359375s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1718.9682929515839s cumulative, 0.06289386749267578s individual

F
current test FAILED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1719.2211718559265s cumulative, 0.25287890434265137s individual

F
current test FAILED -- test_no_vars in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1719.3798360824585s cumulative, 0.15866422653198242s individual

F
current test FAILED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1719.9159832000732s cumulative, 0.5361471176147461s individual

F
current test FAILED -- test_single_trailing_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1720.692228794098s cumulative, 0.7762455940246582s individual

F
current test FAILED -- test_single_path_segment in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1721.4556753635406s cumulative, 0.763446569442749s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1721.5191669464111s cumulative, 0.0634915828704834s individual

F
current test FAILED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1722.3673496246338s cumulative, 0.8481826782226562s individual

.
current test PASSED/SKIPPED -- test_converter_custom in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1722.441962480545s cumulative, 0.07461285591125488s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1722.5003089904785s cumulative, 0.05834650993347168s individual

F
current test FAILED -- test_int_converter_rejections in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1723.2219126224518s cumulative, 0.7216036319732666s individual

F
current test FAILED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1724.2292757034302s cumulative, 1.0073630809783936s individual

.
current test PASSED/SKIPPED -- test_relative_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1724.4766945838928s cumulative, 0.24741888046264648s individual

F
current test FAILED -- test_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1726.093816280365s cumulative, 1.617121696472168s individual

.
current test PASSED/SKIPPED -- test_relative_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1726.119081735611s cumulative, 0.02526545524597168s individual

.
current test PASSED/SKIPPED -- test_relative_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1726.1809284687042s cumulative, 0.06184673309326172s individual

.
current test PASSED/SKIPPED -- test_empty_path_component in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1726.2033429145813s cumulative, 0.022414445877075195s individual

F
current test FAILED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1734.1818597316742s cumulative, 7.9785168170928955s individual

F
current test FAILED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1734.5796301364899s cumulative, 0.39777040481567383s individual

.
current test PASSED/SKIPPED -- test_adding_suffix_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1734.5980958938599s cumulative, 0.018465757369995117s individual

.
current test PASSED/SKIPPED -- test_single in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1734.6110322475433s cumulative, 0.01293635368347168s individual

.
current test PASSED/SKIPPED -- test_int_converter_rejections in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1734.6279702186584s cumulative, 0.016937971115112305s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1734.6494011878967s cumulative, 0.02143096923828125s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1734.6619145870209s cumulative, 0.012513399124145508s individual

.
current test PASSED/SKIPPED -- test_same_level_complex_var in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1734.674063205719s cumulative, 0.012148618698120117s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1734.687201499939s cumulative, 0.013138294219970703s individual

.
current test PASSED/SKIPPED -- test_relative_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1734.6956248283386s cumulative, 0.008423328399658203s individual

F
current test FAILED -- test_converter_custom in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1735.3843803405762s cumulative, 0.6887555122375488s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1735.4429845809937s cumulative, 0.05860424041748047s individual

F
current test FAILED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1736.2267351150513s cumulative, 0.7837505340576172s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1736.2773215770721s cumulative, 0.05058646202087402s individual


tests/test_options.py .
current test PASSED/SKIPPED -- test_options_toggle in /home/kaiyaok2/PythonProjects/falcon/tests/test_options.py: 1736.301070690155s cumulative, 0.023749113082885742s individual

.
current test PASSED/SKIPPED -- test_options_toggle in /home/kaiyaok2/PythonProjects/falcon/tests/test_options.py: 1736.3234918117523s cumulative, 0.02242112159729004s individual

.
current test PASSED/SKIPPED -- test_options_toggle in /home/kaiyaok2/PythonProjects/falcon/tests/test_options.py: 1736.3450677394867s cumulative, 0.021575927734375s individual

.
current test PASSED/SKIPPED -- test_option_defaults in /home/kaiyaok2/PythonProjects/falcon/tests/test_options.py: 1736.364322900772s cumulative, 0.01925516128540039s individual

.
current test PASSED/SKIPPED -- test_incorrect_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_options.py: 1736.3862791061401s cumulative, 0.021956205368041992s individual

.
current test PASSED/SKIPPED -- test_options_toggle in /home/kaiyaok2/PythonProjects/falcon/tests/test_options.py: 1736.4073739051819s cumulative, 0.021094799041748047s individual


tests/test_utils.py .
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1736.4332797527313s cumulative, 0.025905847549438477s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1736.46160030365s cumulative, 0.0283205509185791s individual

.
current test PASSED/SKIPPED -- test_to_query_str_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1736.4913895130157s cumulative, 0.029789209365844727s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1736.5185379981995s cumulative, 0.02714848518371582s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1736.5436568260193s cumulative, 0.02511882781982422s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_unicode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1736.577757358551s cumulative, 0.03410053253173828s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1736.6061482429504s cumulative, 0.028390884399414062s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1736.635704755783s cumulative, 0.0295565128326416s individual

.
current test PASSED/SKIPPED -- test_pack_query_params_several in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1736.6588299274445s cumulative, 0.023125171661376953s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_unicode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1736.688895702362s cumulative, 0.03006577491760254s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_unicode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1736.7170600891113s cumulative, 0.028164386749267578s individual

.
current test PASSED/SKIPPED -- test_dt_to_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1736.7416734695435s cumulative, 0.024613380432128906s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1736.7672214508057s cumulative, 0.02554798126220703s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1736.803245306015s cumulative, 0.036023855209350586s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1736.828238248825s cumulative, 0.024992942810058594s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1736.8531951904297s cumulative, 0.024956941604614258s individual

.
current test PASSED/SKIPPED -- test_secure_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1736.8801782131195s cumulative, 0.026983022689819336s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1736.9073779582977s cumulative, 0.027199745178222656s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_unicode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1736.937840461731s cumulative, 0.03046250343322754s individual

.
current test PASSED/SKIPPED -- test_secure_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1736.9596633911133s cumulative, 0.02182292938232422s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_coding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1736.9940123558044s cumulative, 0.03434896469116211s individual

.
current test PASSED/SKIPPED -- test_to_query_str_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1737.022428035736s cumulative, 0.028415679931640625s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_coding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1737.049058675766s cumulative, 0.026630640029907227s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1737.0751504898071s cumulative, 0.026091814041137695s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1737.1013731956482s cumulative, 0.026222705841064453s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1737.1256902217865s cumulative, 0.024317026138305664s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1737.1521880626678s cumulative, 0.026497840881347656s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1737.17804312706s cumulative, 0.025855064392089844s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1737.2080454826355s cumulative, 0.030002355575561523s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1737.2377226352692s cumulative, 0.029677152633666992s individual

.
current test PASSED/SKIPPED -- test_http_now in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1737.2664892673492s cumulative, 0.028766632080078125s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1737.2927544116974s cumulative, 0.02626514434814453s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1737.3192312717438s cumulative, 0.02647686004638672s individual

.
current test PASSED/SKIPPED -- test_secure_filename_empty_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1737.3416092395782s cumulative, 0.022377967834472656s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1737.3622703552246s cumulative, 0.020661115646362305s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1737.3876900672913s cumulative, 0.02541971206665039s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1737.4084265232086s cumulative, 0.0207364559173584s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1737.4370436668396s cumulative, 0.028617143630981445s individual

.
current test PASSED/SKIPPED -- test_uri_decode_unquote_plus in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1737.4594089984894s cumulative, 0.022365331649780273s individual

.
current test PASSED/SKIPPED -- test_etag_strong_vs_weak_comparison in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1737.484334230423s cumulative, 0.02492523193359375s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1737.5107519626617s cumulative, 0.02641773223876953s individual

.
current test PASSED/SKIPPED -- test_secure_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1737.5360519886017s cumulative, 0.025300025939941406s individual

.
current test PASSED/SKIPPED -- test_parse_host in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1737.5603568553925s cumulative, 0.024304866790771484s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1737.5795419216156s cumulative, 0.01918506622314453s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_unicode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1737.601893901825s cumulative, 0.022351980209350586s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1737.624775648117s cumulative, 0.022881746292114258s individual

.
current test PASSED/SKIPPED -- test_pack_query_params_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1737.6441090106964s cumulative, 0.019333362579345703s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_unicode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1737.6663818359375s cumulative, 0.022272825241088867s individual

.
current test PASSED/SKIPPED -- test_get_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1737.686475276947s cumulative, 0.020093441009521484s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1737.7083823680878s cumulative, 0.02190709114074707s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1737.7291753292084s cumulative, 0.02079296112060547s individual

.
current test PASSED/SKIPPED -- test_secure_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1737.7459235191345s cumulative, 0.01674818992614746s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1737.7610795497894s cumulative, 0.015156030654907227s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1737.7943592071533s cumulative, 0.0332796573638916s individual

.
current test PASSED/SKIPPED -- test_uri_decode_unquote_plus in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1737.8237340450287s cumulative, 0.02937483787536621s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_unicode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1737.855833530426s cumulative, 0.03209948539733887s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1737.8786964416504s cumulative, 0.022862911224365234s individual

.
current test PASSED/SKIPPED -- test_deprecated_decorator in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1737.9054894447327s cumulative, 0.02679300308227539s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1737.9156982898712s cumulative, 0.010208845138549805s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1737.924545288086s cumulative, 0.00884699821472168s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_coding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1737.9296679496765s cumulative, 0.005122661590576172s individual

.
current test PASSED/SKIPPED -- test_secure_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1737.9414682388306s cumulative, 0.011800289154052734s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1737.9463422298431s cumulative, 0.004873991012573242s individual

.
current test PASSED/SKIPPED -- test_to_query_str_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1737.999481678009s cumulative, 0.053139448165893555s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1738.193880558014s cumulative, 0.1943988800048828s individual

.
current test PASSED/SKIPPED -- test_http_date_to_dt in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1738.3995275497437s cumulative, 0.20564699172973633s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1738.5617020130157s cumulative, 0.16217446327209473s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1738.7326519489288s cumulative, 0.17094993591308594s individual

.
current test PASSED/SKIPPED -- test_to_query_str_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1738.8677875995636s cumulative, 0.13513565063476562s individual

.
current test PASSED/SKIPPED -- test_to_query_str_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1738.9908697605133s cumulative, 0.12308216094970703s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.0895743370056s cumulative, 0.09870457649230957s individual

.
current test PASSED/SKIPPED -- test_unquote_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.1911628246307s cumulative, 0.10158848762512207s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.3015689849854s cumulative, 0.11040616035461426s individual

.
current test PASSED/SKIPPED -- test_to_query_str_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.341504573822s cumulative, 0.03993558883666992s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.354722738266s cumulative, 0.013218164443969727s individual

.
current test PASSED/SKIPPED -- test_to_query_str_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.3990619182587s cumulative, 0.04433917999267578s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.407549381256s cumulative, 0.008487462997436523s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.4124598503113s cumulative, 0.004910469055175781s individual

.
current test PASSED/SKIPPED -- test_to_query_str_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.4167358875275s cumulative, 0.0042760372161865234s individual

.
current test PASSED/SKIPPED -- test_uri_encode_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.4201793670654s cumulative, 0.003443479537963867s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.424160003662s cumulative, 0.0039806365966796875s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.4281694889069s cumulative, 0.0040094852447509766s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.432063817978s cumulative, 0.003894329071044922s individual

.
current test PASSED/SKIPPED -- test_parse_query_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.4363029003143s cumulative, 0.004239082336425781s individual

.
current test PASSED/SKIPPED -- test_uri_encode_double in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.442364692688s cumulative, 0.0060617923736572266s individual

.
current test PASSED/SKIPPED -- test_to_query_str_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.4464242458344s cumulative, 0.004059553146362305s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.4503333568573s cumulative, 0.003909111022949219s individual

.
current test PASSED/SKIPPED -- test_secure_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.4545714855194s cumulative, 0.004238128662109375s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.4594144821167s cumulative, 0.004842996597290039s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.4637188911438s cumulative, 0.004304409027099609s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.4679260253906s cumulative, 0.004207134246826172s individual

.
current test PASSED/SKIPPED -- test_prop_uri_encode_value_models_stdlib_quote_safe_tilde in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.4765617847443s cumulative, 0.008635759353637695s individual

.
current test PASSED/SKIPPED -- test_uri_decode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.4810709953308s cumulative, 0.0045092105865478516s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.484884262085s cumulative, 0.0038132667541503906s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.4885473251343s cumulative, 0.0036630630493164062s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.4921605587006s cumulative, 0.0036132335662841797s individual

.
current test PASSED/SKIPPED -- test_uri_decode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.4959118366241s cumulative, 0.0037512779235839844s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.5000488758087s cumulative, 0.0041370391845703125s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.5047113895416s cumulative, 0.004662513732910156s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_coding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.5102751255035s cumulative, 0.0055637359619140625s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.513844013214s cumulative, 0.003568887710571289s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.5178663730621s cumulative, 0.004022359848022461s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.5221049785614s cumulative, 0.004238605499267578s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.5260009765625s cumulative, 0.003895998001098633s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.5294358730316s cumulative, 0.003434896469116211s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.5332379341125s cumulative, 0.003802061080932617s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_coding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.5379493236542s cumulative, 0.0047113895416259766s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.5418195724487s cumulative, 0.003870248794555664s individual

.
current test PASSED/SKIPPED -- test_prop_uri_decode_models_stdlib_unquote_plus in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.5547335147858s cumulative, 0.012913942337036133s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.560393333435s cumulative, 0.005659818649291992s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.5653944015503s cumulative, 0.005001068115234375s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.5719618797302s cumulative, 0.006567478179931641s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_coding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.5786986351013s cumulative, 0.00673675537109375s individual

.
current test PASSED/SKIPPED -- test_prop_uri_encode_models_stdlib_quote in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.5895116329193s cumulative, 0.010812997817993164s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.595407485962s cumulative, 0.005895853042602539s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.600269317627s cumulative, 0.0048618316650390625s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.6059749126434s cumulative, 0.005705595016479492s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.6103899478912s cumulative, 0.004415035247802734s individual

.
current test PASSED/SKIPPED -- test_secure_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.6150653362274s cumulative, 0.004675388336181641s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.61962890625s cumulative, 0.004563570022583008s individual

.
current test PASSED/SKIPPED -- test_etag_dumps_to_header_format in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.6231336593628s cumulative, 0.0035047531127929688s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.627990245819s cumulative, 0.004856586456298828s individual

.
current test PASSED/SKIPPED -- test_to_query_str_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.6328449249268s cumulative, 0.004854679107666016s individual

.
current test PASSED/SKIPPED -- test_get_http_status_warns in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.6377682685852s cumulative, 0.004923343658447266s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.641896724701s cumulative, 0.004128456115722656s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.648247718811s cumulative, 0.006350994110107422s individual

.
current test PASSED/SKIPPED -- test_uri_encode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.6617982387543s cumulative, 0.013550519943237305s individual

.
current test PASSED/SKIPPED -- test_pack_query_params_one in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.6719880104065s cumulative, 0.01018977165222168s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_unicode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.6795513629913s cumulative, 0.007563352584838867s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.6844401359558s cumulative, 0.004888772964477539s individual

.
current test PASSED/SKIPPED -- test_something in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.6947207450867s cumulative, 0.010280609130859375s individual

.
current test PASSED/SKIPPED -- test_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.7008683681488s cumulative, 0.006147623062133789s individual

.
current test PASSED/SKIPPED -- test_function in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.7059450149536s cumulative, 0.00507664680480957s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.719176530838s cumulative, 0.013231515884399414s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.7262289524078s cumulative, 0.007052421569824219s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.7356841564178s cumulative, 0.009455204010009766s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.7459921836853s cumulative, 0.010308027267456055s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.756489276886s cumulative, 0.010497093200683594s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.7626202106476s cumulative, 0.00613093376159668s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type_extra_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.77365899086s cumulative, 0.011038780212402344s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.7879190444946s cumulative, 0.014260053634643555s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type_extra_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.8428535461426s cumulative, 0.05493450164794922s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.9147684574127s cumulative, 0.0719149112701416s individual

.
current test PASSED/SKIPPED -- test_repr_without_content_type_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.938380241394s cumulative, 0.023611783981323242s individual

.
current test PASSED/SKIPPED -- test_default_headers_with_override in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1739.9931802749634s cumulative, 0.05480003356933594s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1740.0503902435303s cumulative, 0.05720996856689453s individual

.
current test PASSED/SKIPPED -- test_simulate_hostname in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1740.1019275188446s cumulative, 0.051537275314331055s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1740.1615388393402s cumulative, 0.05961132049560547s individual

F
current test FAILED -- test_default_headers_with_override in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1741.1736245155334s cumulative, 1.0120856761932373s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1741.2263329029083s cumulative, 0.05270838737487793s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1741.2728991508484s cumulative, 0.04656624794006348s individual

.
current test PASSED/SKIPPED -- test_query_string_no_question in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1741.3037195205688s cumulative, 0.030820369720458984s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1741.3546216487885s cumulative, 0.05090212821960449s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1741.3865268230438s cumulative, 0.031905174255371094s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1741.445131778717s cumulative, 0.05860495567321777s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1741.478921175003s cumulative, 0.03378939628601074s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1741.52632188797s cumulative, 0.047400712966918945s individual

F
current test FAILED -- test_simulate_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1742.5072762966156s cumulative, 0.9809544086456299s individual

F
current test FAILED -- test_query_string_in_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1743.5096817016602s cumulative, 1.0024054050445557s individual

.
current test PASSED/SKIPPED -- test_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1743.5578982830048s cumulative, 0.04821658134460449s individual

.
current test PASSED/SKIPPED -- test_simulate_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1743.6121988296509s cumulative, 0.054300546646118164s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1743.6570401191711s cumulative, 0.04484128952026367s individual

F
current test FAILED -- test_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1751.3741648197174s cumulative, 7.717124700546265s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1751.4092376232147s cumulative, 0.03507280349731445s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1751.43488073349s cumulative, 0.025643110275268555s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1751.4687824249268s cumulative, 0.03390169143676758s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1751.507358789444s cumulative, 0.038576364517211914s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1751.5343289375305s cumulative, 0.02697014808654785s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1751.587280511856s cumulative, 0.05295157432556152s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1751.6297414302826s cumulative, 0.04246091842651367s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1751.6637270450592s cumulative, 0.03398561477661133s individual

F
current test FAILED -- test_simulate_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1752.4039852619171s cumulative, 0.7402582168579102s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1752.5577232837677s cumulative, 0.15373802185058594s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1752.7073390483856s cumulative, 0.14961576461791992s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1752.9313979148865s cumulative, 0.2240588665008545s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1753.1647205352783s cumulative, 0.2333226203918457s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1753.3530316352844s cumulative, 0.18831110000610352s individual

.
current test PASSED/SKIPPED -- test_simulate_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1753.6503367424011s cumulative, 0.2973051071166992s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1753.831039905548s cumulative, 0.18070316314697266s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1753.908640384674s cumulative, 0.07760047912597656s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1753.9164822101593s cumulative, 0.007841825485229492s individual

F
current test FAILED -- test_path_must_start_with_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1754.2569165229797s cumulative, 0.34043431282043457s individual

.
current test PASSED/SKIPPED -- test_path_must_start_with_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1754.267618894577s cumulative, 0.010702371597290039s individual

.
current test PASSED/SKIPPED -- test_simulate_with_environ_extras in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1754.2774124145508s cumulative, 0.009793519973754883s individual

F
current test FAILED -- test_simulate_hostname in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1754.498258113861s cumulative, 0.22084569931030273s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1754.5100665092468s cumulative, 0.011808395385742188s individual

F
current test FAILED -- test_query_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1755.5149955749512s cumulative, 1.0049290657043457s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1755.5578157901764s cumulative, 0.04282021522521973s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1755.6198945045471s cumulative, 0.06207871437072754s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1755.6892807483673s cumulative, 0.06938624382019043s individual

.
current test PASSED/SKIPPED -- test_simulate_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1755.7461857795715s cumulative, 0.05690503120422363s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type_extra_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1755.8099026679993s cumulative, 0.06371688842773438s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type_extra_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1755.8681428432465s cumulative, 0.05824017524719238s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1755.9081497192383s cumulative, 0.04000687599182129s individual

.
current test PASSED/SKIPPED -- test_plus_in_path_in_create_environ in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1755.9291644096375s cumulative, 0.021014690399169922s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1755.995609998703s cumulative, 0.06644558906555176s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1756.0771148204803s cumulative, 0.08150482177734375s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1756.1174583435059s cumulative, 0.040343523025512695s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1756.166729927063s cumulative, 0.049271583557128906s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type_extra_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1756.2332503795624s cumulative, 0.06652045249938965s individual

.
current test PASSED/SKIPPED -- test_none_header_value_in_create_environ in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1756.260925769806s cumulative, 0.027675390243530273s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1756.3043603897095s cumulative, 0.04343461990356445s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type_extra_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1756.380509853363s cumulative, 0.07614946365356445s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1756.4176421165466s cumulative, 0.03713226318359375s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1756.4737079143524s cumulative, 0.05606579780578613s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1756.5351958274841s cumulative, 0.06148791313171387s individual

.
current test PASSED/SKIPPED -- test_no_prefix_allowed_for_query_strings_in_create_environ in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1756.5602431297302s cumulative, 0.02504730224609375s individual

.
current test PASSED/SKIPPED -- test_simulate_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1756.6233954429626s cumulative, 0.06315231323242188s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1756.691660642624s cumulative, 0.06826519966125488s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1756.753823041916s cumulative, 0.06216239929199219s individual

.
current test PASSED/SKIPPED -- test_simulate_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1756.8125s cumulative, 0.058676958084106445s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1756.8663122653961s cumulative, 0.053812265396118164s individual

.
current test PASSED/SKIPPED -- test_decode_empty_result in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1756.919827222824s cumulative, 0.053514957427978516s individual

F
current test FAILED -- test_simulate_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1757.9483609199524s cumulative, 1.028533697128296s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1758.0044929981232s cumulative, 0.05613207817077637s individual

.
current test PASSED/SKIPPED -- test_path_escape_chars_in_create_environ in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1758.0175154209137s cumulative, 0.013022422790527344s individual

F
current test FAILED -- test_simulate_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1760.834166765213s cumulative, 2.8166513442993164s individual

.
current test PASSED/SKIPPED -- test_override_method_with_extras in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1760.8502707481384s cumulative, 0.01610398292541504s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1760.8602435588837s cumulative, 0.009972810745239258s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1760.8751747608185s cumulative, 0.014931201934814453s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type_extra_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1760.8996005058289s cumulative, 0.024425745010375977s individual

.
current test PASSED/SKIPPED -- test_wsgi_iterable_not_closeable in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1760.9046700000763s cumulative, 0.0050694942474365234s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1760.9178848266602s cumulative, 0.013214826583862305s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1760.924912929535s cumulative, 0.007028102874755859s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1760.9451134204865s cumulative, 0.020200490951538086s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1760.964935541153s cumulative, 0.019822120666503906s individual

F
current test FAILED -- test_default_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1767.2762331962585s cumulative, 6.311297655105591s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1767.576333284378s cumulative, 0.30010008811950684s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1767.814433813095s cumulative, 0.23810052871704102s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1768.0268337726593s cumulative, 0.21239995956420898s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1768.3147592544556s cumulative, 0.28792548179626465s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1768.5741930007935s cumulative, 0.2594337463378906s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1768.6081731319427s cumulative, 0.03398013114929199s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1768.6193668842316s cumulative, 0.01119375228881836s individual

.
current test PASSED/SKIPPED -- test_httpnow_alias_for_backwards_compat in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1768.6231307983398s cumulative, 0.003763914108276367s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1768.6699130535126s cumulative, 0.04678225517272949s individual

.
current test PASSED/SKIPPED -- test_query_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1768.6960079669952s cumulative, 0.026094913482666016s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1768.7045514583588s cumulative, 0.00854349136352539s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1768.7137615680695s cumulative, 0.00921010971069336s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1768.7210841178894s cumulative, 0.007322549819946289s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1768.7259640693665s cumulative, 0.004879951477050781s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1768.7344191074371s cumulative, 0.008455038070678711s individual

F
current test FAILED -- test_simulate_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1768.9555113315582s cumulative, 0.22109222412109375s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type_extra_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1768.968516111374s cumulative, 0.013004779815673828s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1768.9769098758698s cumulative, 0.00839376449584961s individual

F
current test FAILED -- test_query_string_no_question in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1769.6242775917053s cumulative, 0.6473677158355713s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1769.66166305542s cumulative, 0.03738546371459961s individual

.
current test PASSED/SKIPPED -- test_decode_empty_result in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1769.7085988521576s cumulative, 0.0469357967376709s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1769.7411787509918s cumulative, 0.032579898834228516s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1769.7891426086426s cumulative, 0.047963857650756836s individual

.
current test PASSED/SKIPPED -- test_repr_without_content_type_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1769.8147931098938s cumulative, 0.025650501251220703s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1769.8710405826569s cumulative, 0.05624747276306152s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1769.9081737995148s cumulative, 0.037133216857910156s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1769.9409837722778s cumulative, 0.03280997276306152s individual

.
current test PASSED/SKIPPED -- test_simulate_with_environ_extras in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1769.9949243068695s cumulative, 0.053940534591674805s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1770.046956062317s cumulative, 0.052031755447387695s individual

.
current test PASSED/SKIPPED -- test_simple_resource_body_json_xor in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1770.06898188591s cumulative, 0.02202582359313965s individual

.
current test PASSED/SKIPPED -- test_default_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1770.1327939033508s cumulative, 0.0638120174407959s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1770.1839406490326s cumulative, 0.051146745681762695s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1770.2166244983673s cumulative, 0.0326838493347168s individual

.
current test PASSED/SKIPPED -- test_query_string_in_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1770.2632112503052s cumulative, 0.04658675193786621s individual

F
current test FAILED -- test_cached_text_in_result in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1771.3028061389923s cumulative, 1.0395948886871338s individual

.
current test PASSED/SKIPPED -- test_cached_text_in_result in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1771.3529222011566s cumulative, 0.05011606216430664s individual

F
current test FAILED -- test_override_method_with_extras in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1772.4148137569427s cumulative, 1.0618915557861328s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1772.467828989029s cumulative, 0.05301523208618164s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1772.4981327056885s cumulative, 0.0303037166595459s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1772.526798248291s cumulative, 0.028665542602539062s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1772.5660018920898s cumulative, 0.039203643798828125s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1772.606748342514s cumulative, 0.040746450424194336s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1772.6413187980652s cumulative, 0.03457045555114746s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1772.6664593219757s cumulative, 0.02514052391052246s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1772.707175731659s cumulative, 0.04071640968322754s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1772.728624343872s cumulative, 0.021448612213134766s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1772.7740378379822s cumulative, 0.04541349411010742s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1772.8375978469849s cumulative, 0.06356000900268555s individual

.
current test PASSED/SKIPPED -- test_simple_resource_body_json_xor in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1772.8573713302612s cumulative, 0.019773483276367188s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1772.8931477069855s cumulative, 0.035776376724243164s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type_extra_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1772.908165216446s cumulative, 0.015017509460449219s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1772.914935350418s cumulative, 0.006770133972167969s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type_extra_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1772.924885749817s cumulative, 0.009950399398803711s individual

.
current test PASSED/SKIPPED -- test_something in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1772.9413805007935s cumulative, 0.0164947509765625s individual

.
current test PASSED/SKIPPED -- test_json_deprecation in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1773.1169803142548s cumulative, 0.1755998134613037s individual

.
current test PASSED/SKIPPED -- test_attributes_from_items in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1773.2795515060425s cumulative, 0.16257119178771973s individual

.
current test PASSED/SKIPPED -- test_keys_and_values in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1773.4796373844147s cumulative, 0.20008587837219238s individual

.
current test PASSED/SKIPPED -- test_items_from_attributes in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1773.6488058567047s cumulative, 0.16916847229003906s individual

.
current test PASSED/SKIPPED -- test_attributes_from_items in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1773.8174457550049s cumulative, 0.1686398983001709s individual

.
current test PASSED/SKIPPED -- test_attributes in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1773.9891645908356s cumulative, 0.17171883583068848s individual

.
current test PASSED/SKIPPED -- test_keys_and_values in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1774.10311627388s cumulative, 0.1139516830444336s individual

.
current test PASSED/SKIPPED -- test_attributes in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1774.2800600528717s cumulative, 0.17694377899169922s individual

.
current test PASSED/SKIPPED -- test_dict_interface in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1774.2903032302856s cumulative, 0.01024317741394043s individual

.
current test PASSED/SKIPPED -- test_dict_interface in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1774.298547744751s cumulative, 0.008244514465332031s individual

.
current test PASSED/SKIPPED -- test_items_from_attributes in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1774.3036127090454s cumulative, 0.005064964294433594s individual

.
current test PASSED/SKIPPED -- test_get_argnames in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1774.3086438179016s cumulative, 0.005031108856201172s individual


tests/test_request_access_route.py .
current test PASSED/SKIPPED -- test_remote_addr_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 1774.3158512115479s cumulative, 0.007207393646240234s individual

.
current test PASSED/SKIPPED -- test_x_forwarded_for in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 1774.3237736225128s cumulative, 0.00792241096496582s individual

.
current test PASSED/SKIPPED -- test_x_forwarded_for in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 1774.3293924331665s cumulative, 0.0056188106536865234s individual

.
current test PASSED/SKIPPED -- test_x_forwarded_for in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 1774.3364679813385s cumulative, 0.00707554817199707s individual

.
current test PASSED/SKIPPED -- test_rfc_forwarded in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 1774.369921207428s cumulative, 0.03345322608947754s individual

.
current test PASSED/SKIPPED -- test_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 1774.377213716507s cumulative, 0.007292509078979492s individual

.
current test PASSED/SKIPPED -- test_x_forwarded_for in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 1774.3813557624817s cumulative, 0.004142045974731445s individual

.
current test PASSED/SKIPPED -- test_x_real_ip in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 1774.3872792720795s cumulative, 0.00592350959777832s individual

.
current test PASSED/SKIPPED -- test_remote_addr_non_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 1774.3911483287811s cumulative, 0.0038690567016601562s individual

.
current test PASSED/SKIPPED -- test_x_real_ip in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 1774.3946194648743s cumulative, 0.0034711360931396484s individual

.
current test PASSED/SKIPPED -- test_rfc_forwarded in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 1774.3998732566833s cumulative, 0.005253791809082031s individual

.
current test PASSED/SKIPPED -- test_remote_addr_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 1774.403230190277s cumulative, 0.00335693359375s individual

.
current test PASSED/SKIPPED -- test_malformed_rfc_forwarded in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 1774.4102749824524s cumulative, 0.007044792175292969s individual

.
current test PASSED/SKIPPED -- test_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 1774.4154891967773s cumulative, 0.005214214324951172s individual

.
current test PASSED/SKIPPED -- test_remote_addr_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 1774.41925907135s cumulative, 0.0037698745727539062s individual

.
current test PASSED/SKIPPED -- test_remote_addr_non_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 1774.4237325191498s cumulative, 0.004473447799682617s individual

.
current test PASSED/SKIPPED -- test_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 1774.4276716709137s cumulative, 0.003939151763916016s individual

.
current test PASSED/SKIPPED -- test_malformed_rfc_forwarded in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 1774.4341912269592s cumulative, 0.0065195560455322266s individual

.
current test PASSED/SKIPPED -- test_remote_addr_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 1774.440316438675s cumulative, 0.006125211715698242s individual

.
current test PASSED/SKIPPED -- test_remote_addr_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 1774.4461636543274s cumulative, 0.00584721565246582s individual

.
current test PASSED/SKIPPED -- test_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 1774.4514155387878s cumulative, 0.005251884460449219s individual


tests/asgi/test_sse.py .
current test PASSED/SKIPPED -- test_no_events in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_sse.py: 1774.4655027389526s cumulative, 0.014087200164794922s individual

.
current test PASSED/SKIPPED -- test_no_json_media_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_sse.py: 1774.479954957962s cumulative, 0.014452219009399414s individual

.
current test PASSED/SKIPPED -- test_use_media_handler_dumps in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_sse.py: 1774.493320465088s cumulative, 0.013365507125854492s individual

.
current test PASSED/SKIPPED -- test_single_event in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_sse.py: 1774.5076966285706s cumulative, 0.014376163482666016s individual

.
current test PASSED/SKIPPED -- test_multiple_events_early_disconnect in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_sse.py: 1774.5878207683563s cumulative, 0.0801241397857666s individual

.
current test PASSED/SKIPPED -- test_multiple_events in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_sse.py: 1774.6155688762665s cumulative, 0.02774810791015625s individual

.
current test PASSED/SKIPPED -- test_non_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_sse.py: 1774.6266794204712s cumulative, 0.011110544204711914s individual

.
current test PASSED/SKIPPED -- test_invalid_event_values in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_sse.py: 1774.6311020851135s cumulative, 0.004422664642333984s individual


tests/asgi/test_testing_asgi.py .
current test PASSED/SKIPPED -- test_create_scope_default_ua in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_testing_asgi.py: 1774.6353330612183s cumulative, 0.004230976104736328s individual

.
current test PASSED/SKIPPED -- test_invalid_asgi_events in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_testing_asgi.py: 1774.6397738456726s cumulative, 0.004440784454345703s individual

.
current test PASSED/SKIPPED -- test_create_scope_default_ua_override in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_testing_asgi.py: 1774.6434569358826s cumulative, 0.0036830902099609375s individual

.
current test PASSED/SKIPPED -- test_is_asgi_app_cls in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_testing_asgi.py: 1774.6478912830353s cumulative, 0.004434347152709961s individual

.
current test PASSED/SKIPPED -- test_create_scope_default_ua_modify_global in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_testing_asgi.py: 1774.6530401706696s cumulative, 0.005148887634277344s individual

.
current test PASSED/SKIPPED -- test_ignore_extra_asgi_events in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_testing_asgi.py: 1774.6602289676666s cumulative, 0.0071887969970703125s individual

.
current test PASSED/SKIPPED -- test_immediate_disconnect in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_testing_asgi.py: 1774.6662831306458s cumulative, 0.0060541629791259766s individual

.
current test PASSED/SKIPPED -- test_missing_header_is_none in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_testing_asgi.py: 1774.671455860138s cumulative, 0.0051727294921875s individual

.
current test PASSED/SKIPPED -- test_cookies_jar in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_testing_asgi.py: 1774.6863451004028s cumulative, 0.014889240264892578s individual

.
current test PASSED/SKIPPED -- test_asgi_request_event_emitter_hang in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_testing_asgi.py: 1775.7325654029846s cumulative, 1.046220302581787s individual


tests/test_http_custom_method_routing.py .
current test PASSED/SKIPPED -- test_bar in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_custom_method_routing.py: 1775.8270218372345s cumulative, 0.09445643424987793s individual

sss.
current test PASSED/SKIPPED -- test_foo in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_custom_method_routing.py: 1775.9328899383545s cumulative, 0.10586810111999512s individual

E
current test FAILED -- test_bar in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_custom_method_routing.py: 1776.6609501838684s cumulative, 0.728060245513916s individual

E
current test FAILED -- test_map_http_methods in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_custom_method_routing.py: 1777.2659406661987s cumulative, 0.6049904823303223s individual

E
current test FAILED -- test_foo in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_custom_method_routing.py: 1777.8617737293243s cumulative, 0.5958330631256104s individual

sss.
current test PASSED/SKIPPED -- test_map_http_methods in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_custom_method_routing.py: 1777.9120004177094s cumulative, 0.050226688385009766s individual


tests/test_http_method_routing.py .
current test PASSED/SKIPPED -- test_post_not_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 1777.9835212230682s cumulative, 0.07152080535888672s individual

.
current test PASSED/SKIPPED -- test_on_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 1778.0286483764648s cumulative, 0.045127153396606445s individual

E
current test FAILED -- test_meta_and_others_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 1785.9982523918152s cumulative, 7.969604015350342s individual

E
current test FAILED -- test_default_on_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 1786.670763015747s cumulative, 0.6725106239318848s individual

E
current test FAILED -- test_put in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 1787.3341341018677s cumulative, 0.6633710861206055s individual

E
current test FAILED -- test_on_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 1787.960786819458s cumulative, 0.626652717590332s individual

E
current test FAILED -- test_misc in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 1789.7573380470276s cumulative, 1.79655122756958s individual

.
current test PASSED/SKIPPED -- test_default_on_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 1790.1191248893738s cumulative, 0.3617868423461914s individual

E
current test FAILED -- test_meta_and_others_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 1790.6635119915009s cumulative, 0.5443871021270752s individual

.
current test PASSED/SKIPPED -- test_put in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 1790.6842477321625s cumulative, 0.020735740661621094s individual

.
current test PASSED/SKIPPED -- test_misc in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 1790.7041161060333s cumulative, 0.01986837387084961s individual

.
current test PASSED/SKIPPED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 1790.7220108509064s cumulative, 0.017894744873046875s individual

E
current test FAILED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 1790.8829290866852s cumulative, 0.1609182357788086s individual

.
current test PASSED/SKIPPED -- test_method_not_allowed_with_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 1790.91109085083s cumulative, 0.02816176414489746s individual

.
current test PASSED/SKIPPED -- test_meta_and_others_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 1790.9261078834534s cumulative, 0.015017032623291016s individual

.
current test PASSED/SKIPPED -- test_report in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 1790.9394347667694s cumulative, 0.013326883316040039s individual

E
current test FAILED -- test_methods_not_allowed_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 1791.431833267212s cumulative, 0.4923985004425049s individual

E
current test FAILED -- test_methods_not_allowed_simple in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 1792.147338628769s cumulative, 0.7155053615570068s individual

.
current test PASSED/SKIPPED -- test_methods_not_allowed_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 1792.3130142688751s cumulative, 0.16567564010620117s individual

E
current test FAILED -- test_report in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 1793.1215283870697s cumulative, 0.8085141181945801s individual

.
current test PASSED/SKIPPED -- test_meta_and_others_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 1793.1931066513062s cumulative, 0.0715782642364502s individual

E
current test FAILED -- test_post_not_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 1793.9502704143524s cumulative, 0.7571637630462646s individual

E
current test FAILED -- test_method_not_allowed_with_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 1794.6381342411041s cumulative, 0.687863826751709s individual

.
current test PASSED/SKIPPED -- test_methods_not_allowed_simple in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 1794.7224476337433s cumulative, 0.08431339263916016s individual


tests/test_wsgi_interface.py .
current test PASSED/SKIPPED -- test_srmock in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_interface.py: 1794.7517266273499s cumulative, 0.029278993606567383s individual

.
current test PASSED/SKIPPED -- test_pep3333 in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_interface.py: 1794.7997887134552s cumulative, 0.04806208610534668s individual


tests/test_testing.py .
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1794.839816570282s cumulative, 0.04002785682678223s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1794.8782751560211s cumulative, 0.03845858573913574s individual

F
current test FAILED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1795.1714866161346s cumulative, 0.2932114601135254s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1795.2057313919067s cumulative, 0.03424477577209473s individual

.
current test PASSED/SKIPPED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1795.2575178146362s cumulative, 0.05178642272949219s individual

.
current test PASSED/SKIPPED -- test_testing_client_handles_wsgi_generator_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1795.2885670661926s cumulative, 0.031049251556396484s individual

F
current test FAILED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1795.4487798213959s cumulative, 0.16021275520324707s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1795.6565766334534s cumulative, 0.20779681205749512s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1795.8855004310608s cumulative, 0.22892379760742188s individual

.
current test PASSED/SKIPPED -- test_closed_wsgi_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1796.0091335773468s cumulative, 0.12363314628601074s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1796.1724610328674s cumulative, 0.16332745552062988s individual

F
current test FAILED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1797.1714532375336s cumulative, 0.9989922046661377s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1797.2032489776611s cumulative, 0.03179574012756348s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1797.2123305797577s cumulative, 0.009081602096557617s individual

.
current test PASSED/SKIPPED -- test_create_environ_preserve_raw_uri in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1797.2177662849426s cumulative, 0.0054357051849365234s individual

.
current test PASSED/SKIPPED -- test_simulate_request_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1797.2396857738495s cumulative, 0.02191948890686035s individual

.
current test PASSED/SKIPPED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1797.24990773201s cumulative, 0.01022195816040039s individual

.
current test PASSED/SKIPPED -- test_create_environ_cookies_options_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1797.253500699997s cumulative, 0.003592967987060547s individual

.
current test PASSED/SKIPPED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1797.2660484313965s cumulative, 0.012547731399536133s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1797.2917573451996s cumulative, 0.025708913803100586s individual

F
current test FAILED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1797.3536050319672s cumulative, 0.061847686767578125s individual

F
current test FAILED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1804.477994441986s cumulative, 7.124389410018921s individual

.
current test PASSED/SKIPPED -- test_create_environ_default_ua in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1804.6228246688843s cumulative, 0.14483022689819336s individual

.
current test PASSED/SKIPPED -- test_create_environ_cookies in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1804.7745053768158s cumulative, 0.15168070793151855s individual

F
current test FAILED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1804.888798236847s cumulative, 0.11429286003112793s individual

F
current test FAILED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1805.008534669876s cumulative, 0.1197364330291748s individual

.
current test PASSED/SKIPPED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1805.0223460197449s cumulative, 0.013811349868774414s individual

.
current test PASSED/SKIPPED -- test_cookies_jar in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1805.0365459918976s cumulative, 0.014199972152709961s individual

.
current test PASSED/SKIPPED -- test_closed_wsgi_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1805.0432524681091s cumulative, 0.0067064762115478516s individual

.
current test PASSED/SKIPPED -- test_closed_wsgi_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1805.0487911701202s cumulative, 0.0055387020111083984s individual

.
current test PASSED/SKIPPED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1805.059381723404s cumulative, 0.010590553283691406s individual

.
current test PASSED/SKIPPED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1805.0679278373718s cumulative, 0.008546113967895508s individual

.
current test PASSED/SKIPPED -- test_closed_wsgi_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1805.073073387146s cumulative, 0.005145549774169922s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1805.0818746089935s cumulative, 0.00880122184753418s individual

F
current test FAILED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1805.1584582328796s cumulative, 0.0765836238861084s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1805.1728065013885s cumulative, 0.014348268508911133s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1805.1851980686188s cumulative, 0.01239156723022461s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1805.1933200359344s cumulative, 0.008121967315673828s individual

.
current test PASSED/SKIPPED -- test_missing_header_is_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1805.1980347633362s cumulative, 0.0047147274017333984s individual

.
current test PASSED/SKIPPED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1805.211960554123s cumulative, 0.013925790786743164s individual

.
current test PASSED/SKIPPED -- test_create_environ_default_ua_override in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1805.2190563678741s cumulative, 0.007095813751220703s individual

.
current test PASSED/SKIPPED -- test_create_environ_cookies in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1805.2250933647156s cumulative, 0.006036996841430664s individual

.
current test PASSED/SKIPPED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1805.2385313510895s cumulative, 0.013437986373901367s individual


tests/test_slots.py .
current test PASSED/SKIPPED -- test_slots_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_slots.py: 1805.2448313236237s cumulative, 0.0062999725341796875s individual

.
current test PASSED/SKIPPED -- test_slots_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_slots.py: 1805.2511003017426s cumulative, 0.006268978118896484s individual

.
current test PASSED/SKIPPED -- test_slots_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_slots.py: 1805.25821018219s cumulative, 0.007109880447387695s individual

.
current test PASSED/SKIPPED -- test_slots_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_slots.py: 1805.264450788498s cumulative, 0.0062406063079833984s individual


tests/test_wsgiref_inputwrapper_with_size.py .
current test PASSED/SKIPPED -- test_resources_can_read_request_stream_during_tests in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgiref_inputwrapper_with_size.py: 1805.2743818759918s cumulative, 0.009931087493896484s individual


tests/test_custom_router.py .
current test PASSED/SKIPPED -- test_custom_router_takes_req_keyword_argument in /home/kaiyaok2/PythonProjects/falcon/tests/test_custom_router.py: 1805.2823276519775s cumulative, 0.007945775985717773s individual

.
current test PASSED/SKIPPED -- test_custom_router_takes_req_positional_argument in /home/kaiyaok2/PythonProjects/falcon/tests/test_custom_router.py: 1805.289024591446s cumulative, 0.006696939468383789s individual

.
current test PASSED/SKIPPED -- test_custom_router_find_should_be_used in /home/kaiyaok2/PythonProjects/falcon/tests/test_custom_router.py: 1805.3144435882568s cumulative, 0.025418996810913086s individual

.
current test PASSED/SKIPPED -- test_can_pass_additional_params_to_add_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_custom_router.py: 1805.3485066890717s cumulative, 0.034063100814819336s individual

.
current test PASSED/SKIPPED -- test_custom_router_takes_req_keyword_argument in /home/kaiyaok2/PythonProjects/falcon/tests/test_custom_router.py: 1805.4049398899078s cumulative, 0.05643320083618164s individual

.
current test PASSED/SKIPPED -- test_custom_router_takes_req_positional_argument in /home/kaiyaok2/PythonProjects/falcon/tests/test_custom_router.py: 1805.4586441516876s cumulative, 0.053704261779785156s individual

.
current test PASSED/SKIPPED -- test_custom_router_add_route_should_be_used in /home/kaiyaok2/PythonProjects/falcon/tests/test_custom_router.py: 1805.495718717575s cumulative, 0.03707456588745117s individual

.
current test PASSED/SKIPPED -- test_custom_router_add_route_should_be_used in /home/kaiyaok2/PythonProjects/falcon/tests/test_custom_router.py: 1805.5361759662628s cumulative, 0.04045724868774414s individual

.
current test PASSED/SKIPPED -- test_can_pass_additional_params_to_add_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_custom_router.py: 1805.580327987671s cumulative, 0.044152021408081055s individual

.
current test PASSED/SKIPPED -- test_custom_router_find_should_be_used in /home/kaiyaok2/PythonProjects/falcon/tests/test_custom_router.py: 1805.6652612686157s cumulative, 0.08493328094482422s individual


tests/test_media_multipart.py .
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1805.7044961452484s cumulative, 0.03923487663269043s individual

.
current test PASSED/SKIPPED -- test_truncated_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1805.7800204753876s cumulative, 0.07552433013916016s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1805.8495972156525s cumulative, 0.06957674026489258s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1805.8823776245117s cumulative, 0.03278040885925293s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1805.9214415550232s cumulative, 0.03906393051147461s individual

.
current test PASSED/SKIPPED -- test_empty_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1805.9443011283875s cumulative, 0.022859573364257812s individual

.
current test PASSED/SKIPPED -- test_deserialize_part_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1806.0170018672943s cumulative, 0.07270073890686035s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1806.096027135849s cumulative, 0.0790252685546875s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1806.1757447719574s cumulative, 0.07971763610839844s individual

.
current test PASSED/SKIPPED -- test_deserialize_custom_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1806.2597756385803s cumulative, 0.0840308666229248s individual

.
current test PASSED/SKIPPED -- test_truncated_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1806.3327369689941s cumulative, 0.07296133041381836s individual

.
current test PASSED/SKIPPED -- test_parse in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1806.359787940979s cumulative, 0.02705097198486328s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1806.4390659332275s cumulative, 0.07927799224853516s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1806.471438407898s cumulative, 0.032372474670410156s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1806.4999949932098s cumulative, 0.02855658531188965s individual

.
current test PASSED/SKIPPED -- test_truncated_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1806.5690262317657s cumulative, 0.0690312385559082s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1806.5961034297943s cumulative, 0.027077198028564453s individual

.
current test PASSED/SKIPPED -- test_missing_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1806.6238269805908s cumulative, 0.02772355079650879s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1806.7092785835266s cumulative, 0.08545160293579102s individual

.
current test PASSED/SKIPPED -- test_truncated_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1806.7906475067139s cumulative, 0.08136892318725586s individual

.
current test PASSED/SKIPPED -- test_upload_multipart in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1806.8581733703613s cumulative, 0.06752586364746094s individual

.
current test PASSED/SKIPPED -- test_upload_multipart in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1806.9321897029877s cumulative, 0.07401633262634277s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1806.9995937347412s cumulative, 0.06740403175354004s individual

.
current test PASSED/SKIPPED -- test_truncated_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1807.0688846111298s cumulative, 0.0692908763885498s individual

.
current test PASSED/SKIPPED -- test_body_part_properties in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1807.0935106277466s cumulative, 0.02462601661682129s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1807.1633522510529s cumulative, 0.06984162330627441s individual

.
current test PASSED/SKIPPED -- test_unexected_form_structure in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1807.2369391918182s cumulative, 0.07358694076538086s individual

.
current test PASSED/SKIPPED -- test_truncated_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1807.3159732818604s cumulative, 0.07903409004211426s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1807.4036400318146s cumulative, 0.08766674995422363s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1807.4819412231445s cumulative, 0.07830119132995605s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1807.5220243930817s cumulative, 0.04008316993713379s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1807.5561692714691s cumulative, 0.03414487838745117s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1807.5888879299164s cumulative, 0.032718658447265625s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1807.6615180969238s cumulative, 0.07263016700744629s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1807.6953604221344s cumulative, 0.03384232521057129s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1807.7791361808777s cumulative, 0.08377575874328613s individual

.
current test PASSED/SKIPPED -- test_random_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1809.1873898506165s cumulative, 1.4082536697387695s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1809.3285927772522s cumulative, 0.1412029266357422s individual

.
current test PASSED/SKIPPED -- test_content_transfer_encoding_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1809.9773728847504s cumulative, 0.648780107498169s individual

.
current test PASSED/SKIPPED -- test_invalid_text_or_charset in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1810.272465467453s cumulative, 0.2950925827026367s individual

.
current test PASSED/SKIPPED -- test_unexected_form_structure in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1810.7626585960388s cumulative, 0.49019312858581543s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1810.964575767517s cumulative, 0.20191717147827148s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1811.146736383438s cumulative, 0.1821606159210205s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1811.1614282131195s cumulative, 0.014691829681396484s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1811.2184309959412s cumulative, 0.05700278282165527s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1811.2685914039612s cumulative, 0.05016040802001953s individual

.
current test PASSED/SKIPPED -- test_body_part_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1811.2824387550354s cumulative, 0.01384735107421875s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1811.315045118332s cumulative, 0.03260636329650879s individual

.
current test PASSED/SKIPPED -- test_invalid_text_or_charset in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1811.3647034168243s cumulative, 0.04965829849243164s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1811.3953285217285s cumulative, 0.030625104904174805s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1811.4120473861694s cumulative, 0.01671886444091797s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1811.4240601062775s cumulative, 0.012012720108032227s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1811.438949584961s cumulative, 0.01488947868347168s individual

.
current test PASSED/SKIPPED -- test_parse in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1811.4732475280762s cumulative, 0.034297943115234375s individual

.
current test PASSED/SKIPPED -- test_random_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1812.1418199539185s cumulative, 0.6685724258422852s individual

.
current test PASSED/SKIPPED -- test_from_buffered_stream in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1812.1519486904144s cumulative, 0.01012873649597168s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1812.1662991046906s cumulative, 0.014350414276123047s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1812.17724275589s cumulative, 0.01094365119934082s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1812.2062368392944s cumulative, 0.028994083404541016s individual

.
current test PASSED/SKIPPED -- test_unsupported_charset in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1812.2318482398987s cumulative, 0.025611400604248047s individual

.
current test PASSED/SKIPPED -- test_content_transfer_encoding_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1812.268824338913s cumulative, 0.03697609901428223s individual

.
current test PASSED/SKIPPED -- test_filename_star in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1812.4281604290009s cumulative, 0.15933609008789062s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1812.5164449214935s cumulative, 0.08828449249267578s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1812.5448820590973s cumulative, 0.028437137603759766s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1812.573337316513s cumulative, 0.028455257415771484s individual

.
current test PASSED/SKIPPED -- test_nested_multipart_mixed in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1812.6354823112488s cumulative, 0.06214499473571777s individual

.
current test PASSED/SKIPPED -- test_parse in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1812.6642274856567s cumulative, 0.028745174407958984s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1812.7497563362122s cumulative, 0.08552885055541992s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1812.782535791397s cumulative, 0.03277945518493652s individual

.
current test PASSED/SKIPPED -- test_invalid_text_or_charset in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1812.815716266632s cumulative, 0.03318047523498535s individual

.
current test PASSED/SKIPPED -- test_data_too_large in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1812.9588706493378s cumulative, 0.14315438270568848s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1813.0664503574371s cumulative, 0.10757970809936523s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1813.105967283249s cumulative, 0.03951692581176758s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1813.1436531543732s cumulative, 0.03768587112426758s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1813.1785678863525s cumulative, 0.03491473197937012s individual

.
current test PASSED/SKIPPED -- test_invalid_random_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1813.3745183944702s cumulative, 0.19595050811767578s individual

.
current test PASSED/SKIPPED -- test_unknown_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1813.4001808166504s cumulative, 0.02566242218017578s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1813.474314212799s cumulative, 0.07413339614868164s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1813.5512201786041s cumulative, 0.07690596580505371s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1813.6174063682556s cumulative, 0.06618618965148926s individual

.
current test PASSED/SKIPPED -- test_deserialize_part_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1813.6895632743835s cumulative, 0.07215690612792969s individual

.
current test PASSED/SKIPPED -- test_filename_star in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1813.7733125686646s cumulative, 0.08374929428100586s individual

.
current test PASSED/SKIPPED -- test_truncated_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1813.8493206501007s cumulative, 0.07600808143615723s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1813.913682937622s cumulative, 0.0643622875213623s individual

.
current test PASSED/SKIPPED -- test_invalid_text_or_charset in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1813.9408540725708s cumulative, 0.02717113494873047s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1814.0158603191376s cumulative, 0.07500624656677246s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1814.043203830719s cumulative, 0.0273435115814209s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1814.067409992218s cumulative, 0.024206161499023438s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1814.0959317684174s cumulative, 0.02852177619934082s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1814.1204092502594s cumulative, 0.024477481842041016s individual

.
current test PASSED/SKIPPED -- test_serialize in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1814.145301580429s cumulative, 0.024892330169677734s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1814.177309513092s cumulative, 0.03200793266296387s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1814.2066266536713s cumulative, 0.029317140579223633s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1814.270204782486s cumulative, 0.06357812881469727s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1814.3459250926971s cumulative, 0.07572031021118164s individual

.
current test PASSED/SKIPPED -- test_parse in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1814.3674466609955s cumulative, 0.021521568298339844s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1814.4326872825623s cumulative, 0.06524062156677246s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1814.498609304428s cumulative, 0.06592202186584473s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1814.5716543197632s cumulative, 0.07304501533508301s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1814.604418516159s cumulative, 0.03276419639587402s individual

.
current test PASSED/SKIPPED -- test_empty_input in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1814.6330029964447s cumulative, 0.02858448028564453s individual

.
current test PASSED/SKIPPED -- test_truncated_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1814.7124528884888s cumulative, 0.07944989204406738s individual

.
current test PASSED/SKIPPED -- test_data_too_large in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1814.8189585208893s cumulative, 0.1065056324005127s individual

.
current test PASSED/SKIPPED -- test_unsupported_charset in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1814.8966031074524s cumulative, 0.07764458656311035s individual

.
current test PASSED/SKIPPED -- test_deserialize_custom_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1814.9659540653229s cumulative, 0.0693509578704834s individual

.
current test PASSED/SKIPPED -- test_invalid_random_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1815.1239693164825s cumulative, 0.15801525115966797s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1815.1625697612762s cumulative, 0.03860044479370117s individual


tests/test_deps.py .
current test PASSED/SKIPPED -- test_deps_mimeparse_correct_package in /home/kaiyaok2/PythonProjects/falcon/tests/test_deps.py: 1815.18665599823s cumulative, 0.02408623695373535s individual



==================================== ERRORS ====================================
__ ERROR at setup of TestWebSocket.test_rejected[_uvicorn_factory-4040-True] ___

request = <SubRequest 'server_base_url' for <Function test_rejected[_uvicorn_factory-4040-True]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
                        pytest.fail('Server is not responding to requests')
                    else:
                        # NOTE(kgriffs): The server did not start up; probably due to
                        #   the port being in use. We could check the output but
                        #   capsys fixture may not have buffered the error output
                        #   yet, so we just retry.
                        continue
    
                yield base_url
    
            assert server.returncode == 0
    
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/asgi/test_asgi_servers.py:628: Failed
__ ERROR at setup of TestWebSocket.test_rejected[_uvicorn_factory-None-True] ___

request = <SubRequest 'server_base_url' for <Function test_rejected[_uvicorn_factory-None-True]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
>                       pytest.fail('Server is not responding to requests')
E                       Failed: Server is not responding to requests

tests/asgi/test_asgi_servers.py:613: Failed
__ ERROR at setup of TestWebSocket.test_send_before_accept[_uvicorn_factory] ___

request = <SubRequest 'server_base_url' for <Function test_send_before_accept[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
                        pytest.fail('Server is not responding to requests')
                    else:
                        # NOTE(kgriffs): The server did not start up; probably due to
                        #   the port being in use. We could check the output but
                        #   capsys fixture may not have buffered the error output
                        #   yet, so we just retry.
                        continue
    
                yield base_url
    
            assert server.returncode == 0
    
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/asgi/test_asgi_servers.py:628: Failed
_ ERROR at setup of TestWebSocket.test_type_mismatch[_uvicorn_factory-text-recv] _

request = <SubRequest 'server_base_url' for <Function test_type_mismatch[_uvicorn_factory-text-recv]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
>                       pytest.fail('Server is not responding to requests')
E                       Failed: Server is not responding to requests

tests/asgi/test_asgi_servers.py:613: Failed
__ ERROR at setup of TestWebSocket.test_recv_before_accept[_uvicorn_factory] ___

request = <SubRequest 'server_base_url' for <Function test_recv_before_accept[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
                        pytest.fail('Server is not responding to requests')
                    else:
                        # NOTE(kgriffs): The server did not start up; probably due to
                        #   the port being in use. We could check the output but
                        #   capsys fixture may not have buffered the error output
                        #   yet, so we just retry.
                        continue
    
                yield base_url
    
            assert server.returncode == 0
    
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/asgi/test_asgi_servers.py:628: Failed
__ ERROR at setup of TestWebSocket.test_rejected[_uvicorn_factory-4040-False] __

request = <SubRequest 'server_base_url' for <Function test_rejected[_uvicorn_factory-4040-False]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
>                       pytest.fail('Server is not responding to requests')
E                       Failed: Server is not responding to requests

tests/asgi/test_asgi_servers.py:613: Failed
__ ERROR at setup of TestWebSocket.test_passing_path_params[_uvicorn_factory] __

request = <SubRequest 'server_base_url' for <Function test_passing_path_params[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
                        pytest.fail('Server is not responding to requests')
                    else:
                        # NOTE(kgriffs): The server did not start up; probably due to
                        #   the port being in use. We could check the output but
                        #   capsys fixture may not have buffered the error output
                        #   yet, so we just retry.
                        continue
    
                yield base_url
    
            assert server.returncode == 0
    
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/asgi/test_asgi_servers.py:628: Failed
___ ERROR at setup of TestWebSocket.test_missing_responder[_uvicorn_factory] ___

request = <SubRequest 'server_base_url' for <Function test_missing_responder[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
                        pytest.fail('Server is not responding to requests')
                    else:
                        # NOTE(kgriffs): The server did not start up; probably due to
                        #   the port being in use. We could check the output but
                        #   capsys fixture may not have buffered the error output
                        #   yet, so we just retry.
                        continue
    
                yield base_url
    
            assert server.returncode == 0
    
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/asgi/test_asgi_servers.py:628: Failed
_ ERROR at setup of TestWebSocket.test_close_code_on_unhandled_http_error[_uvicorn_factory] _

request = <SubRequest 'server_base_url' for <Function test_close_code_on_unhandled_http_error[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
>                       pytest.fail('Server is not responding to requests')
E                       Failed: Server is not responding to requests

tests/asgi/test_asgi_servers.py:613: Failed
_ ERROR at setup of TestWebSocket.test_select_subprotocol_known[_uvicorn_factory-*-amqp] _

request = <SubRequest 'server_base_url' for <Function test_select_subprotocol_known[_uvicorn_factory-*-amqp]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
>                       pytest.fail('Server is not responding to requests')
E                       Failed: Server is not responding to requests

tests/asgi/test_asgi_servers.py:613: Failed
__ ERROR at setup of TestWebSocket.test_invalid_close_code[_uvicorn_factory] ___

request = <SubRequest 'server_base_url' for <Function test_invalid_close_code[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
>                       pytest.fail('Server is not responding to requests')
E                       Failed: Server is not responding to requests

tests/asgi/test_asgi_servers.py:613: Failed
__ ERROR at setup of TestWebSocket.test_rejected[_uvicorn_factory-None-False] __

request = <SubRequest 'server_base_url' for <Function test_rejected[_uvicorn_factory-None-False]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
>                       pytest.fail('Server is not responding to requests')
E                       Failed: Server is not responding to requests

tests/asgi/test_asgi_servers.py:613: Failed
_ ERROR at setup of TestWebSocket.test_close_code_on_unhandled_error[_uvicorn_factory] _

request = <SubRequest 'server_base_url' for <Function test_close_code_on_unhandled_error[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
                        pytest.fail('Server is not responding to requests')
                    else:
                        # NOTE(kgriffs): The server did not start up; probably due to
                        #   the port being in use. We could check the output but
                        #   capsys fixture may not have buffered the error output
                        #   yet, so we just retry.
                        continue
    
                yield base_url
    
            assert server.returncode == 0
    
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/asgi/test_asgi_servers.py:628: Failed
____ ERROR at setup of TestWebSocket.test_hello[_uvicorn_factory-4321-True] ____

request = <SubRequest 'server_base_url' for <Function test_hello[_uvicorn_factory-4321-True]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
>                       pytest.fail('Server is not responding to requests')
E                       Failed: Server is not responding to requests

tests/asgi/test_asgi_servers.py:613: Failed
____ ERROR at setup of TestWebSocket.test_hello[_uvicorn_factory-None-True] ____

request = <SubRequest 'server_base_url' for <Function test_hello[_uvicorn_factory-None-True]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
                        pytest.fail('Server is not responding to requests')
                    else:
                        # NOTE(kgriffs): The server did not start up; probably due to
                        #   the port being in use. We could check the output but
                        #   capsys fixture may not have buffered the error output
                        #   yet, so we just retry.
                        continue
    
                yield base_url
    
            assert server.returncode == 0
    
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/asgi/test_asgi_servers.py:628: Failed
___ ERROR at setup of TestWebSocket.test_hello[_uvicorn_factory-4321-False] ____

request = <SubRequest 'server_base_url' for <Function test_hello[_uvicorn_factory-4321-False]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
                        pytest.fail('Server is not responding to requests')
                    else:
                        # NOTE(kgriffs): The server did not start up; probably due to
                        #   the port being in use. We could check the output but
                        #   capsys fixture may not have buffered the error output
                        #   yet, so we just retry.
                        continue
    
                yield base_url
    
            assert server.returncode == 0
    
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/asgi/test_asgi_servers.py:628: Failed
_ ERROR at setup of TestWebSocket.test_type_mismatch[_uvicorn_factory-text-send] _

request = <SubRequest 'server_base_url' for <Function test_type_mismatch[_uvicorn_factory-text-send]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
                        pytest.fail('Server is not responding to requests')
                    else:
                        # NOTE(kgriffs): The server did not start up; probably due to
                        #   the port being in use. We could check the output but
                        #   capsys fixture may not have buffered the error output
                        #   yet, so we just retry.
                        continue
    
                yield base_url
    
            assert server.returncode == 0
    
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/asgi/test_asgi_servers.py:628: Failed
_ ERROR at setup of TestWebSocket.test_type_mismatch[_uvicorn_factory-data-send] _

request = <SubRequest 'server_base_url' for <Function test_type_mismatch[_uvicorn_factory-data-send]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
                        pytest.fail('Server is not responding to requests')
                    else:
                        # NOTE(kgriffs): The server did not start up; probably due to
                        #   the port being in use. We could check the output but
                        #   capsys fixture may not have buffered the error output
                        #   yet, so we just retry.
                        continue
    
                yield base_url
    
            assert server.returncode == 0
    
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/asgi/test_asgi_servers.py:628: Failed
_ ERROR at setup of TestWebSocket.test_disconnecting_client_early[_uvicorn_factory] _

request = <SubRequest 'server_base_url' for <Function test_disconnecting_client_early[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
>                       pytest.fail('Server is not responding to requests')
E                       Failed: Server is not responding to requests

tests/asgi/test_asgi_servers.py:613: Failed
___ ERROR at setup of TestWebSocket.test_hello[_uvicorn_factory-None-False] ____

request = <SubRequest 'server_base_url' for <Function test_hello[_uvicorn_factory-None-False]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
>                       pytest.fail('Server is not responding to requests')
E                       Failed: Server is not responding to requests

tests/asgi/test_asgi_servers.py:613: Failed
_ ERROR at setup of TestWebSocket.test_select_subprotocol_known[_uvicorn_factory-wamp-wamp] _

request = <SubRequest 'server_base_url' for <Function test_select_subprotocol_known[_uvicorn_factory-wamp-wamp]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
>                       pytest.fail('Server is not responding to requests')
E                       Failed: Server is not responding to requests

tests/asgi/test_asgi_servers.py:613: Failed
_ ERROR at setup of TestWebSocket.test_select_subprotocol_unknown[_uvicorn_factory] _

request = <SubRequest 'server_base_url' for <Function test_select_subprotocol_unknown[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
>                       pytest.fail('Server is not responding to requests')
E                       Failed: Server is not responding to requests

tests/asgi/test_asgi_servers.py:613: Failed
_ ERROR at setup of TestWebSocket.test_type_mismatch[_uvicorn_factory-data-recv] _

request = <SubRequest 'server_base_url' for <Function test_type_mismatch[_uvicorn_factory-data-recv]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
>                       pytest.fail('Server is not responding to requests')
E                       Failed: Server is not responding to requests

tests/asgi/test_asgi_servers.py:613: Failed
_ ERROR at setup of TestASGIServer.test_post_multipart_form[_uvicorn_factory] __

request = <SubRequest 'server_base_url' for <Function test_post_multipart_form[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
>                       pytest.fail('Server is not responding to requests')
E                       Failed: Server is not responding to requests

tests/asgi/test_asgi_servers.py:613: Failed
_ ERROR at setup of TestASGIServer.test_post_read_bounded_stream[_uvicorn_factory] _

request = <SubRequest 'server_base_url' for <Function test_post_read_bounded_stream[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
>                       pytest.fail('Server is not responding to requests')
E                       Failed: Server is not responding to requests

tests/asgi/test_asgi_servers.py:613: Failed
____ ERROR at setup of TestASGIServer.test_post_multiple[_uvicorn_factory] _____

request = <SubRequest 'server_base_url' for <Function test_post_multiple[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
                        pytest.fail('Server is not responding to requests')
                    else:
                        # NOTE(kgriffs): The server did not start up; probably due to
                        #   the port being in use. We could check the output but
                        #   capsys fixture may not have buffered the error output
                        #   yet, so we just retry.
                        continue
    
                yield base_url
    
            assert server.returncode == 0
    
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/asgi/test_asgi_servers.py:628: Failed
_________ ERROR at setup of TestASGIServer.test_put[_uvicorn_factory] __________

request = <SubRequest 'server_base_url' for <Function test_put[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
                        pytest.fail('Server is not responding to requests')
                    else:
                        # NOTE(kgriffs): The server did not start up; probably due to
                        #   the port being in use. We could check the output but
                        #   capsys fixture may not have buffered the error output
                        #   yet, so we just retry.
                        continue
    
                yield base_url
    
            assert server.returncode == 0
    
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/asgi/test_asgi_servers.py:628: Failed
_ ERROR at setup of TestASGIServer.test_post_invalid_content_length[_uvicorn_factory] _

request = <SubRequest 'server_base_url' for <Function test_post_invalid_content_length[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
                        pytest.fail('Server is not responding to requests')
                    else:
                        # NOTE(kgriffs): The server did not start up; probably due to
                        #   the port being in use. We could check the output but
                        #   capsys fixture may not have buffered the error output
                        #   yet, so we just retry.
                        continue
    
                yield base_url
    
            assert server.returncode == 0
    
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/asgi/test_asgi_servers.py:628: Failed
_ ERROR at setup of TestASGIServer.test_post_read_bounded_stream_no_body[_uvicorn_factory] _

request = <SubRequest 'server_base_url' for <Function test_post_read_bounded_stream_no_body[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
                        pytest.fail('Server is not responding to requests')
                    else:
                        # NOTE(kgriffs): The server did not start up; probably due to
                        #   the port being in use. We could check the output but
                        #   capsys fixture may not have buffered the error output
                        #   yet, so we just retry.
                        continue
    
                yield base_url
    
            assert server.returncode == 0
    
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/asgi/test_asgi_servers.py:628: Failed
_ ERROR at setup of TestASGIServer.test_sse_client_disconnects_early[_uvicorn_factory] _

request = <SubRequest 'server_base_url' for <Function test_sse_client_disconnects_early[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
                        pytest.fail('Server is not responding to requests')
                    else:
                        # NOTE(kgriffs): The server did not start up; probably due to
                        #   the port being in use. We could check the output but
                        #   capsys fixture may not have buffered the error output
                        #   yet, so we just retry.
                        continue
    
                yield base_url
    
            assert server.returncode == 0
    
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/asgi/test_asgi_servers.py:628: Failed
_________ ERROR at setup of TestASGIServer.test_get[_uvicorn_factory] __________

request = <SubRequest 'server_base_url' for <Function test_get[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
                        pytest.fail('Server is not responding to requests')
                    else:
                        # NOTE(kgriffs): The server did not start up; probably due to
                        #   the port being in use. We could check the output but
                        #   capsys fixture may not have buffered the error output
                        #   yet, so we just retry.
                        continue
    
                yield base_url
    
            assert server.returncode == 0
    
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/asgi/test_asgi_servers.py:628: Failed
_ ERROR at setup of TestASGIServer.test_post_read_bounded_stream_large[_uvicorn_factory] _

request = <SubRequest 'server_base_url' for <Function test_post_read_bounded_stream_large[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
                        pytest.fail('Server is not responding to requests')
                    else:
                        # NOTE(kgriffs): The server did not start up; probably due to
                        #   the port being in use. We could check the output but
                        #   capsys fixture may not have buffered the error output
                        #   yet, so we just retry.
                        continue
    
                yield base_url
    
            assert server.returncode == 0
    
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/asgi/test_asgi_servers.py:628: Failed
_________ ERROR at setup of TestASGIServer.test_sse[_uvicorn_factory] __________

request = <SubRequest 'server_base_url' for <Function test_sse[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
>                       pytest.fail('Server is not responding to requests')
E                       Failed: Server is not responding to requests

tests/asgi/test_asgi_servers.py:613: Failed
_______ ERROR at setup of TestASGIServer.test_head_405[_uvicorn_factory] _______

request = <SubRequest 'server_base_url' for <Function test_head_405[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
                        pytest.fail('Server is not responding to requests')
                    else:
                        # NOTE(kgriffs): The server did not start up; probably due to
                        #   the port being in use. We could check the output but
                        #   capsys fixture may not have buffered the error output
                        #   yet, so we just retry.
                        continue
    
                yield base_url
    
            assert server.returncode == 0
    
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/asgi/test_asgi_servers.py:628: Failed
_ ERROR at setup of TestASGIServer.test_stream_chunked_request[_uvicorn_factory] _

request = <SubRequest 'server_base_url' for <Function test_stream_chunked_request[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
>                       pytest.fail('Server is not responding to requests')
E                       Failed: Server is not responding to requests

tests/asgi/test_asgi_servers.py:613: Failed
____________ ERROR at setup of test_input_validator_inherited[asgi] ____________

asgi = True
request = <SubRequest 'client' for <Function test_input_validator_inherited[asgi]>>
resource = <test_before_hooks.WrappedRespondersResource object at 0x7fd73c617f70>

    @pytest.fixture
    def client(asgi, request, resource):
        app = create_app(asgi)
>       app.add_route('/', resource)

tests/test_before_hooks.py:251: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c526420>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd5e83741f0>, 'CHECK...41f0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd5e83741f0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method WrappedRespondersResource.on_get of <test_before_hooks.WrappedRespondersResource object at 0x7fd73c617f70>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ ERROR at setup of test_piggybacking_resource_post_and_delete[True] ______

request = <SubRequest 'app_client' for <Function test_piggybacking_resource_post_and_delete[True]>>

    @pytest.fixture(params=[True, False])
    def app_client(request):
        items = PiggybackingCollectionAsync() if request.param else PiggybackingCollection()
    
        app = create_app(asgi=request.param)
>       app.add_route('/items', items, suffix='collection')

tests/test_before_hooks.py:487: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c527a70>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c6c8af0>, 'CHECK...8af0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c6c8af0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method PiggybackingCollection.on_delete_collection of <test_before_hooks.PiggybackingCollectionAsync object at 0x7fd73c489f90>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ ERROR at setup of test_wrapped_resource[asgi] _________________

asgi = True
request = <SubRequest 'client' for <Function test_wrapped_resource[asgi]>>
resource = <test_before_hooks.WrappedRespondersResource object at 0x7fd73c716890>

    @pytest.fixture
    def client(asgi, request, resource):
        app = create_app(asgi)
>       app.add_route('/', resource)

tests/test_before_hooks.py:251: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c4a8510>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd5e851a680>, 'CHECK...a680>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd5e851a680>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method WrappedRespondersResource.on_get of <test_before_hooks.WrappedRespondersResource object at 0x7fd73c716890>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ ERROR at setup of test_multiple_resource_hooks[asgi-resource0] ________

asgi = True
request = <SubRequest 'client' for <Function test_multiple_resource_hooks[asgi-resource0]>>
resource = <test_before_hooks.ZooResource object at 0x7fd6091345e0>

    @pytest.fixture
    def client(asgi, request, resource):
        app = create_app(asgi)
>       app.add_route('/', resource)

tests/test_before_hooks.py:251: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c4a8820>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd5e842a440>, 'CHECK...a440>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd5e842a440>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ZooResource.on_get of <test_before_hooks.ZooResource object at 0x7fd6091345e0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________________ ERROR at setup of test_param_validator[asgi] _________________

asgi = True
request = <SubRequest 'client' for <Function test_param_validator[asgi]>>
resource = <test_before_hooks.WrappedRespondersResource object at 0x7fd5e84d6f80>

    @pytest.fixture
    def client(asgi, request, resource):
        app = create_app(asgi)
>       app.add_route('/', resource)

tests/test_before_hooks.py:251: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c4a8c80>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd5e8377010>, 'CHECK...7010>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd5e8377010>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method WrappedRespondersResource.on_get of <test_before_hooks.WrappedRespondersResource object at 0x7fd5e84d6f80>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ ERROR at setup of test_field_validator[asgi-resource2] ____________

asgi = True
request = <SubRequest 'client' for <Function test_field_validator[asgi-resource2]>>
resource = <test_before_hooks.TestFieldResourceChildToo object at 0x7fd609134640>

    @pytest.fixture
    def client(asgi, request, resource):
        app = create_app(asgi)
>       app.add_route('/', resource)

tests/test_before_hooks.py:251: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c4ab7d0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c6c93f0>, 'CHECK...93f0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c6c93f0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestFieldResourceChildToo.on_get of <test_before_hooks.TestFieldResourceChildToo object at 0x7fd609134640>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________ ERROR at setup of test_piggybacking_resource_post_item[True] _________

request = <SubRequest 'app_client' for <Function test_piggybacking_resource_post_item[True]>>

    @pytest.fixture(params=[True, False])
    def app_client(request):
        items = PiggybackingCollectionAsync() if request.param else PiggybackingCollection()
    
        app = create_app(asgi=request.param)
>       app.add_route('/items', items, suffix='collection')

tests/test_before_hooks.py:487: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c4a99a0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd5e836b010>, 'CHECK...b010>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd5e836b010>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method PiggybackingCollection.on_delete_collection of <test_before_hooks.PiggybackingCollectionAsync object at 0x7fd5fccc7fd0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__ ERROR at setup of test_wrapped_resource_with_hooks_aware_of_resource[asgi] __

asgi = True
request = <SubRequest 'client' for <Function test_wrapped_resource_with_hooks_aware_of_resource[asgi]>>
resource = <test_before_hooks.WrappedRespondersResource object at 0x7fd73bd0e470>

    @pytest.fixture
    def client(asgi, request, resource):
        app = create_app(asgi)
>       app.add_route('/', resource)

tests/test_before_hooks.py:251: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c4aa570>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c689fc0>, 'CHECK...9fc0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c689fc0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method WrappedRespondersResource.on_get of <test_before_hooks.WrappedRespondersResource object at 0x7fd73bd0e470>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ ERROR at setup of test_field_validator[asgi-resource1] ____________

asgi = True
request = <SubRequest 'client' for <Function test_field_validator[asgi-resource1]>>
resource = <test_before_hooks.TestFieldResourceChild object at 0x7fd609134580>

    @pytest.fixture
    def client(asgi, request, resource):
        app = create_app(asgi)
>       app.add_route('/', resource)

tests/test_before_hooks.py:251: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c51f990>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c723520>, 'CHECK...3520>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c723520>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestFieldResourceChild.on_get of <test_before_hooks.TestFieldResourceChild object at 0x7fd609134580>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ ERROR at setup of test_multiple_resource_hooks[asgi-resource1] ________

asgi = True
request = <SubRequest 'client' for <Function test_multiple_resource_hooks[asgi-resource1]>>
resource = <test_before_hooks.ZooResourceChild object at 0x7fd609134610>

    @pytest.fixture
    def client(asgi, request, resource):
        app = create_app(asgi)
>       app.add_route('/', resource)

tests/test_before_hooks.py:251: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd5fcb79a10>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c561480>, 'CHECK...1480>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c561480>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ZooResourceChild.on_get of <test_before_hooks.ZooResourceChild object at 0x7fd609134610>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ ERROR at setup of test_field_validator[asgi-resource0] ____________

asgi = True
request = <SubRequest 'client' for <Function test_field_validator[asgi-resource0]>>
resource = <test_before_hooks.TestFieldResource object at 0x7fd609134520>

    @pytest.fixture
    def client(asgi, request, resource):
        app = create_app(asgi)
>       app.add_route('/', resource)

tests/test_before_hooks.py:251: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c51eea0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c68a7a0>, 'CHECK...a7a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c68a7a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestFieldResource.on_get of <test_before_hooks.TestFieldResource object at 0x7fd609134520>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________________ ERROR at setup of test_input_validator[asgi] _________________

asgi = True
request = <SubRequest 'client' for <Function test_input_validator[asgi]>>
resource = <test_before_hooks.WrappedRespondersResource object at 0x7fd73bd0c070>

    @pytest.fixture
    def client(asgi, request, resource):
        app = create_app(asgi)
>       app.add_route('/', resource)

tests/test_before_hooks.py:251: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c47d850>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c563130>, 'CHECK...3130>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c563130>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method WrappedRespondersResource.on_get of <test_before_hooks.WrappedRespondersResource object at 0x7fd73bd0c070>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___ ERROR at setup of TestHTTPStatus.test_raise_status_in_before_hook[True] ____

request = <SubRequest 'client' for <Function test_raise_status_in_before_hook[True]>>

    @pytest.fixture(params=[True, False])
    def client(request):
        app = create_app(asgi=request.param)
>       app.add_route('/status', TestStatusResource())

tests/test_httpstatus.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c47dee0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c097eb0>, 'CHECK...7eb0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c097eb0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestStatusResource.on_delete of <test_httpstatus.TestStatusResource object at 0x7fd638d8e6b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____ ERROR at setup of TestHTTPStatus.test_raise_status_in_responder[True] _____

request = <SubRequest 'client' for <Function test_raise_status_in_responder[True]>>

    @pytest.fixture(params=[True, False])
    def client(request):
        app = create_app(asgi=request.param)
>       app.add_route('/status', TestStatusResource())

tests/test_httpstatus.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c2d27a0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c097370>, 'CHECK...7370>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c097370>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestStatusResource.on_delete of <test_httpstatus.TestStatusResource object at 0x7fd63904a1d0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____ ERROR at setup of TestHTTPStatus.test_raise_status_empty_body[True] ______

request = <SubRequest 'client' for <Function test_raise_status_empty_body[True]>>

    @pytest.fixture(params=[True, False])
    def client(request):
        app = create_app(asgi=request.param)
>       app.add_route('/status', TestStatusResource())

tests/test_httpstatus.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c2d1000>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c095b40>, 'CHECK...5b40>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c095b40>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestStatusResource.on_delete of <test_httpstatus.TestStatusResource object at 0x7fd639107a90>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPStatus.test_raise_status_survives_after_hooks[True] _

request = <SubRequest 'client' for <Function test_raise_status_survives_after_hooks[True]>>

    @pytest.fixture(params=[True, False])
    def client(request):
        app = create_app(asgi=request.param)
>       app.add_route('/status', TestStatusResource())

tests/test_httpstatus.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c2d2260>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c096e60>, 'CHECK...6e60>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c096e60>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestStatusResource.on_delete of <test_httpstatus.TestStatusResource object at 0x7fd6390e81c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__ ERROR at setup of TestHTTPStatus.test_raise_status_runs_after_hooks[True] ___

request = <SubRequest 'client' for <Function test_raise_status_runs_after_hooks[True]>>

    @pytest.fixture(params=[True, False])
    def client(request):
        app = create_app(asgi=request.param)
>       app.add_route('/status', TestStatusResource())

tests/test_httpstatus.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c2d1230>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c096dd0>, 'CHECK...6dd0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c096dd0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestStatusResource.on_delete of <test_httpstatus.TestStatusResource object at 0x7fd73c084be0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPStatusWithMiddleware.test_raise_status_in_process_request[True] _

request = <SubRequest 'hook_test_client' for <Function test_raise_status_in_process_request[True]>>

    @pytest.fixture(params=[True, False])
    def hook_test_client(request):
        app = create_app(asgi=request.param)
>       app.add_route('/status', TestHookResource())

tests/test_httpstatus.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c4aa880>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c076c20>, 'CHECK...6c20>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c076c20>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestHookResource.on_get of <test_httpstatus.TestHookResource object at 0x7fd638f9e830>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPStatusWithMiddleware.test_raise_status_runs_process_response[True] _

request = <SubRequest 'hook_test_client' for <Function test_raise_status_runs_process_response[True]>>

    @pytest.fixture(params=[True, False])
    def hook_test_client(request):
        app = create_app(asgi=request.param)
>       app.add_route('/status', TestHookResource())

tests/test_httpstatus.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c5257e0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c077250>, 'CHECK...7250>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c077250>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestHookResource.on_get of <test_httpstatus.TestHookResource object at 0x7fd73c46b070>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPStatusWithMiddleware.test_raise_status_in_process_resource[True] _

request = <SubRequest 'hook_test_client' for <Function test_raise_status_in_process_resource[True]>>

    @pytest.fixture(params=[True, False])
    def hook_test_client(request):
        app = create_app(asgi=request.param)
>       app.add_route('/status', TestHookResource())

tests/test_httpstatus.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c47dbd0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c077640>, 'CHECK...7640>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c077640>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestHookResource.on_get of <test_httpstatus.TestHookResource object at 0x7fd5fd247fa0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ ERROR at setup of TestNoBodyWithStatus.test_media_is_set[asgi] ________

asgi = True

    @pytest.fixture()
    def body_client(asgi):
        app = create_app(asgi=asgi)
>       app.add_route('/status', NoBodyResource())

tests/test_httpstatus.py:210: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c47cd60>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c097be0>, 'CHECK...7be0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c097be0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method NoBodyResource.on_get of <test_httpstatus.NoBodyResource object at 0x7fd638d8cb50>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ ERROR at setup of TestNoBodyWithStatus.test_body_is_set[asgi] _________

asgi = True

    @pytest.fixture()
    def body_client(asgi):
        app = create_app(asgi=asgi)
>       app.add_route('/status', NoBodyResource())

tests/test_httpstatus.py:210: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c1946d0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c097d00>, 'CHECK...7d00>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c097d00>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method NoBodyResource.on_get of <test_httpstatus.NoBodyResource object at 0x7fd73be8d570>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ ERROR at setup of TestNoBodyWithStatus.test_data_is_set[asgi] _________

asgi = True

    @pytest.fixture()
    def body_client(asgi):
        app = create_app(asgi=asgi)
>       app.add_route('/status', NoBodyResource())

tests/test_httpstatus.py:210: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c197d80>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c0969e0>, 'CHECK...69e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c0969e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method NoBodyResource.on_get of <test_httpstatus.NoBodyResource object at 0x7fd73abe3130>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________ ERROR at setup of TestHTTPError.test_invalid_param[asgi] ___________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c2b2c00>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c2225f0>, 'CHECK...25f0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c2225f0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd73c58d360>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____ ERROR at setup of TestHTTPError.test_forbidden[asgi-application/json] _____

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c2e1af0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c209750>, 'CHECK...9750>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c209750>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd73c0663e0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__ ERROR at setup of TestHTTPError.test_client_does_not_accept_anything[asgi] __

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c2e1d20>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a6d40>, 'CHECK...6d40>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a6d40>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd73c10b580>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ ERROR at setup of TestHTTPError.test_413[asgi] ________________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c2e21f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a7880>, 'CHECK...7880>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a7880>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd73aa52620>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_client_does_not_accept_json_or_xml[asgi] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c2e36f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a7370>, 'CHECK...7370>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a7370>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd638d8cd00>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ ERROR at setup of TestHTTPError.test_414_with_custom_kwargs[asgi] _______

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c309d90>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a51b0>, 'CHECK...51b0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a51b0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd73bcf7850>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_forbidden[asgi-application/json-patch+json] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c308120>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a4280>, 'CHECK...4280>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a4280>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd73c087820>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_title_default_message_if_none[asgi-503-bytes] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c309770>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a7910>, 'CHECK...7910>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a7910>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd73aa53490>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_custom_serializer_no_representation[asgi] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c2e1bd0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c20a4d0>, 'CHECK...a4d0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c20a4d0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd638fb4970>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________ ERROR at setup of TestHTTPError.test_410_with_body[asgi] ___________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c2e2730>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a5240>, 'CHECK...5240>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a5240>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd638dab9a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_title_default_message_if_none[asgi-503-str] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c2b2490>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a6ef0>, 'CHECK...6ef0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a6ef0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd6390e8dc0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ ERROR at setup of TestHTTPError.test_411[asgi] ________________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c308cf0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c222ef0>, 'CHECK...2ef0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c222ef0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd73c58e3e0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_custom_error_serializer_optional_representation[asgi-GET-/404-404] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c30b530>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a5360>, 'CHECK...5360>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a5360>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd73c48b4c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________ ERROR at setup of TestHTTPError.test_429_datetime[asgi] ____________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c30a810>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a6b00>, 'CHECK...6b00>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a6b00>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd73c494730>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ ERROR at setup of TestHTTPError.test_no_description_json[asgi] ________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c30bc30>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a57e0>, 'CHECK...57e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a57e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd73aa69630>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_custom_error_serializer_optional_representation[asgi-BREW-/notfound-400] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c2b1d20>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c20a4d0>, 'CHECK...a4d0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c20a4d0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd6391792d0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ ERROR at setup of TestHTTPError.test_unicode_xml[asgi] ____________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c06edc0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a4ca0>, 'CHECK...4ca0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a4ca0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd73c049a20>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ ERROR at setup of TestHTTPError.test_414[asgi] ________________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c2e35a0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a5480>, 'CHECK...5480>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a5480>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd638f3a770>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ ERROR at setup of TestHTTPError.test_429_no_retry_after[asgi] _________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c2e3680>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a7880>, 'CHECK...7880>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a7880>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd73c48aa70>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_temporary_413_integer_retry_after[asgi] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c308d60>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a40d0>, 'CHECK...40d0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a40d0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd73c084370>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ ERROR at setup of TestHTTPError.test_503_integer_retry_after[asgi] ______

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c30aa40>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a56c0>, 'CHECK...56c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a56c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd73c488cd0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________ ERROR at setup of TestHTTPError.test_missing_param[asgi] ___________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c30aea0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a51b0>, 'CHECK...51b0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a51b0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd73c1aabf0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ ERROR at setup of TestHTTPError.test_416[asgi] ________________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c309770>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a72e0>, 'CHECK...72e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a72e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd638ec79a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ ERROR at setup of TestHTTPError.test_429[asgi] ________________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73be7de70>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c074280>, 'CHECK...4280>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c074280>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd73ab89570>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___ ERROR at setup of TestHTTPError.test_epic_fail_xml[asgi-application/xml] ___

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73be7c0b0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a52d0>, 'CHECK...52d0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a52d0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd73c12a440>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_epic_fail_xml[asgi-application/atom+xml] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73be7ed50>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a5510>, 'CHECK...5510>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a5510>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd63917b1c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_title_default_message_if_none[asgi-503-HTTPStatus] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73be7ea40>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a79a0>, 'CHECK...79a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a79a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd73c488130>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________ ERROR at setup of TestHTTPError.test_405_without_body[asgi] __________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c2e2030>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a7370>, 'CHECK...7370>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a7370>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd73c4f6800>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________ ERROR at setup of TestHTTPError.test_404_without_body[asgi] __________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c2b0ba0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a41f0>, 'CHECK...41f0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a41f0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd638dabb20>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____ ERROR at setup of TestHTTPError.test_503_datetime_retry_after[asgi] ______

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c308b30>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a4160>, 'CHECK...4160>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a4160>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd73bc61bd0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________ ERROR at setup of TestHTTPError.test_unicode_json[asgi] ____________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73be7d690>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a49d0>, 'CHECK...49d0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a49d0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd6390b00d0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_405_without_body_with_extra_headers_double_check[asgi] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c2e1bd0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a67a0>, 'CHECK...67a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a67a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd73c128610>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_title_default_message_if_none[asgi-503 Service Unavailable-bytes] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73be7cd60>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a6c20>, 'CHECK...6c20>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a6c20>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd638e8ac20>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_title_default_message_if_none[asgi-503 Service Unavailable-str] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c30a7a0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a75b0>, 'CHECK...75b0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a75b0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd639049600>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_custom_error_serializer_optional_representation[asgi-REPORT-/404-405] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c3085f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a5ea0>, 'CHECK...5ea0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a5ea0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd73becdb40>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________ ERROR at setup of TestHTTPError.test_epic_fail_json[asgi] ___________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c309cb0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a5000>, 'CHECK...5000>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a5000>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd63904a9b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________ ERROR at setup of TestHTTPError.test_invalid_header[asgi] ___________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73be7e340>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a5510>, 'CHECK...5510>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a5510>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd73befaa70>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_serialize_error_uses_media_handler[asgi] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73be7d8c0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c177ac0>, 'CHECK...7ac0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c177ac0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd73c12beb0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______________ ERROR at setup of TestHTTPError.test_misc[asgi] ________________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73be34510>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a5510>, 'CHECK...5510>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a5510>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd73c46f430>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________ ERROR at setup of TestHTTPError.test_404_with_body[asgi] ___________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73be37df0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a7490>, 'CHECK...7490>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a7490>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd73c086ec0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ ERROR at setup of TestHTTPError.test_no_description_xml[asgi] _________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73be343c0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a4790>, 'CHECK...4790>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a4790>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd638e88e50>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______ ERROR at setup of TestHTTPError.test_414_with_description[asgi] ________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73be35850>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c177f40>, 'CHECK...7f40>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c177f40>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd6390281f0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ ERROR at setup of TestHTTPError.test_401[asgi] ________________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c308ac0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a67a0>, 'CHECK...67a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a67a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd73aaca260>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ ERROR at setup of TestHTTPError.test_epic_fail_xml[asgi-text/xml] _______

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c3082e0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c176200>, 'CHECK...6200>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c176200>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd638d84a60>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_temporary_413_datetime_retry_after[asgi] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c2e2110>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c177be0>, 'CHECK...7be0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c177be0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd638f9dcc0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________ ERROR at setup of TestHTTPError.test_405_with_body[asgi] ___________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73be7f220>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1768c0>, 'CHECK...68c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1768c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd638ee4d60>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_forbidden[asgi-application/vnd.company.system.project.resource+json;v=1.1] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c309460>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a5630>, 'CHECK...5630>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a5630>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd6391557e0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_title_default_message_if_none[asgi-503-int] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c30a1f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c176320>, 'CHECK...6320>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c176320>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd73c067fd0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________ ERROR at setup of TestHTTPError.test_414_with_title[asgi] ___________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73be37610>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a7a30>, 'CHECK...7a30>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a7a30>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd638ea6710>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__ ERROR at setup of TestHTTPError.test_serialize_no_json_media_handler[asgi] __

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73be350e0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c175120>, 'CHECK...5120>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c175120>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd73abe20b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ ERROR at setup of TestHTTPError.test_custom_error_serializer[asgi] ______

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73be367a0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c175630>, 'CHECK...5630>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c175630>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd73bc62200>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ ERROR at setup of TestHTTPError.test_base_class[asgi] _____________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73be37840>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c177a30>, 'CHECK...7a30>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c177a30>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd638f39d20>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_custom_error_serializer_optional_representation[asgi-GET-/notfound-404] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73be7d8c0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c175360>, 'CHECK...5360>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c175360>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd73c0651e0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_405_without_body_with_extra_headers[asgi] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73be7d770>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c175000>, 'CHECK...5000>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c175000>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd638f72e90>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________ ERROR at setup of TestHTTPError.test_missing_header[asgi] ___________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73be35bd0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1740d0>, 'CHECK...40d0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1740d0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd73c2054e0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_epic_fail_xml[asgi-application/vnd.company.system.project.resource+xml;v=1.1] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c309ee0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c176f80>, 'CHECK...6f80>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c176f80>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd73c4cc580>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________ ERROR at setup of TestHTTPError.test_410_without_body[asgi] __________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73be7c190>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c177c70>, 'CHECK...7c70>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c177c70>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd638ec77c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestWSGIServer.test_static_file_byte_range[uvicorn--47-The content of this comment is part of a test.\n] _

server_args = <function _uvicorn_args at 0x7fd5fc0e97e0>

    @pytest.fixture
    def server_url(server_args):
        if sys.platform.startswith('win'):
            pytest.skip('WSGI server tests are currently unsupported on Windows')
    
        for attempt in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}'.format(_SERVER_HOST, server_port)
    
            args = server_args(_SERVER_HOST, server_port)
            print('Starting {}...'.format(server_args.__doc__))
            print(' '.join(args))
            try:
                server = subprocess.Popen(args, cwd=_HERE)
            except FileNotFoundError:
                pytest.skip('{} executable is not installed'.format(args[0]))
    
            # NOTE(vytas): give the app server some time to start.
            start_time = time.time()
            while time.time() - start_time < _STARTUP_TIMEOUT:
                try:
                    requests.get(base_url + '/hello', timeout=0.2)
                except (requests.exceptions.Timeout, requests.exceptions.ConnectionError):
                    time.sleep(0.2)
                else:
                    break
            else:
                if server.poll() is None:
                    pytest.fail('Server is not responding to requests')
                else:
                    # NOTE(kgriffs): The server did not start up; probably due to
                    #   the port being in use. We could check the output but
                    #   capsys fixture may not have buffered the error output
                    #   yet, so we just retry.
                    continue
    
            yield base_url
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/test_wsgi_servers.py:175: Failed
________ ERROR at setup of TestWSGIServer.test_get_deprecated[gunicorn] ________

server_args = <function _gunicorn_args at 0x7fd5fc0e96c0>

    @pytest.fixture
    def server_url(server_args):
        if sys.platform.startswith('win'):
            pytest.skip('WSGI server tests are currently unsupported on Windows')
    
        for attempt in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}'.format(_SERVER_HOST, server_port)
    
            args = server_args(_SERVER_HOST, server_port)
            print('Starting {}...'.format(server_args.__doc__))
            print(' '.join(args))
            try:
                server = subprocess.Popen(args, cwd=_HERE)
            except FileNotFoundError:
                pytest.skip('{} executable is not installed'.format(args[0]))
    
            # NOTE(vytas): give the app server some time to start.
            start_time = time.time()
            while time.time() - start_time < _STARTUP_TIMEOUT:
                try:
                    requests.get(base_url + '/hello', timeout=0.2)
                except (requests.exceptions.Timeout, requests.exceptions.ConnectionError):
                    time.sleep(0.2)
                else:
                    break
            else:
                if server.poll() is None:
                    pytest.fail('Server is not responding to requests')
                else:
                    # NOTE(kgriffs): The server did not start up; probably due to
                    #   the port being in use. We could check the output but
                    #   capsys fixture may not have buffered the error output
                    #   yet, so we just retry.
                    continue
    
            yield base_url
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/test_wsgi_servers.py:175: Failed
__________ ERROR at setup of TestWSGIServer.test_static_file[uvicorn] __________

server_args = <function _uvicorn_args at 0x7fd5fc0e97e0>

    @pytest.fixture
    def server_url(server_args):
        if sys.platform.startswith('win'):
            pytest.skip('WSGI server tests are currently unsupported on Windows')
    
        for attempt in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}'.format(_SERVER_HOST, server_port)
    
            args = server_args(_SERVER_HOST, server_port)
            print('Starting {}...'.format(server_args.__doc__))
            print(' '.join(args))
            try:
                server = subprocess.Popen(args, cwd=_HERE)
            except FileNotFoundError:
                pytest.skip('{} executable is not installed'.format(args[0]))
    
            # NOTE(vytas): give the app server some time to start.
            start_time = time.time()
            while time.time() - start_time < _STARTUP_TIMEOUT:
                try:
                    requests.get(base_url + '/hello', timeout=0.2)
                except (requests.exceptions.Timeout, requests.exceptions.ConnectionError):
                    time.sleep(0.2)
                else:
                    break
            else:
                if server.poll() is None:
                    pytest.fail('Server is not responding to requests')
                else:
                    # NOTE(kgriffs): The server did not start up; probably due to
                    #   the port being in use. We could check the output but
                    #   capsys fixture may not have buffered the error output
                    #   yet, so we just retry.
                    continue
    
            yield base_url
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/test_wsgi_servers.py:175: Failed
_ ERROR at setup of TestWSGIServer.test_static_file_byte_range[uvicorn-32-38-random] _

server_args = <function _uvicorn_args at 0x7fd5fc0e97e0>

    @pytest.fixture
    def server_url(server_args):
        if sys.platform.startswith('win'):
            pytest.skip('WSGI server tests are currently unsupported on Windows')
    
        for attempt in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}'.format(_SERVER_HOST, server_port)
    
            args = server_args(_SERVER_HOST, server_port)
            print('Starting {}...'.format(server_args.__doc__))
            print(' '.join(args))
            try:
                server = subprocess.Popen(args, cwd=_HERE)
            except FileNotFoundError:
                pytest.skip('{} executable is not installed'.format(args[0]))
    
            # NOTE(vytas): give the app server some time to start.
            start_time = time.time()
            while time.time() - start_time < _STARTUP_TIMEOUT:
                try:
                    requests.get(base_url + '/hello', timeout=0.2)
                except (requests.exceptions.Timeout, requests.exceptions.ConnectionError):
                    time.sleep(0.2)
                else:
                    break
            else:
                if server.poll() is None:
                    pytest.fail('Server is not responding to requests')
                else:
                    # NOTE(kgriffs): The server did not start up; probably due to
                    #   the port being in use. We could check the output but
                    #   capsys fixture may not have buffered the error output
                    #   yet, so we just retry.
                    continue
    
            yield base_url
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/test_wsgi_servers.py:175: Failed
______ ERROR at setup of TestWSGIServer.test_post_multipart_form[uvicorn] ______

server_args = <function _uvicorn_args at 0x7fd5fc0e97e0>

    @pytest.fixture
    def server_url(server_args):
        if sys.platform.startswith('win'):
            pytest.skip('WSGI server tests are currently unsupported on Windows')
    
        for attempt in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}'.format(_SERVER_HOST, server_port)
    
            args = server_args(_SERVER_HOST, server_port)
            print('Starting {}...'.format(server_args.__doc__))
            print(' '.join(args))
            try:
                server = subprocess.Popen(args, cwd=_HERE)
            except FileNotFoundError:
                pytest.skip('{} executable is not installed'.format(args[0]))
    
            # NOTE(vytas): give the app server some time to start.
            start_time = time.time()
            while time.time() - start_time < _STARTUP_TIMEOUT:
                try:
                    requests.get(base_url + '/hello', timeout=0.2)
                except (requests.exceptions.Timeout, requests.exceptions.ConnectionError):
                    time.sleep(0.2)
                else:
                    break
            else:
                if server.poll() is None:
                    pytest.fail('Server is not responding to requests')
                else:
                    # NOTE(kgriffs): The server did not start up; probably due to
                    #   the port being in use. We could check the output but
                    #   capsys fixture may not have buffered the error output
                    #   yet, so we just retry.
                    continue
    
            yield base_url
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/test_wsgi_servers.py:175: Failed
_ ERROR at setup of TestWSGIServer.test_static_file_byte_range[uvicorn-7--hashlib] _

server_args = <function _uvicorn_args at 0x7fd5fc0e97e0>

    @pytest.fixture
    def server_url(server_args):
        if sys.platform.startswith('win'):
            pytest.skip('WSGI server tests are currently unsupported on Windows')
    
        for attempt in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}'.format(_SERVER_HOST, server_port)
    
            args = server_args(_SERVER_HOST, server_port)
            print('Starting {}...'.format(server_args.__doc__))
            print(' '.join(args))
            try:
                server = subprocess.Popen(args, cwd=_HERE)
            except FileNotFoundError:
                pytest.skip('{} executable is not installed'.format(args[0]))
    
            # NOTE(vytas): give the app server some time to start.
            start_time = time.time()
            while time.time() - start_time < _STARTUP_TIMEOUT:
                try:
                    requests.get(base_url + '/hello', timeout=0.2)
                except (requests.exceptions.Timeout, requests.exceptions.ConnectionError):
                    time.sleep(0.2)
                else:
                    break
            else:
                if server.poll() is None:
                    pytest.fail('Server is not responding to requests')
                else:
                    # NOTE(kgriffs): The server did not start up; probably due to
                    #   the port being in use. We could check the output but
                    #   capsys fixture may not have buffered the error output
                    #   yet, so we just retry.
                    continue
    
            yield base_url
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/test_wsgi_servers.py:175: Failed
_ ERROR at setup of TestWSGIServer.test_static_file_byte_range[uvicorn-2-6-port] _

server_args = <function _uvicorn_args at 0x7fd5fc0e97e0>

    @pytest.fixture
    def server_url(server_args):
        if sys.platform.startswith('win'):
            pytest.skip('WSGI server tests are currently unsupported on Windows')
    
        for attempt in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}'.format(_SERVER_HOST, server_port)
    
            args = server_args(_SERVER_HOST, server_port)
            print('Starting {}...'.format(server_args.__doc__))
            print(' '.join(args))
            try:
                server = subprocess.Popen(args, cwd=_HERE)
            except FileNotFoundError:
                pytest.skip('{} executable is not installed'.format(args[0]))
    
            # NOTE(vytas): give the app server some time to start.
            start_time = time.time()
            while time.time() - start_time < _STARTUP_TIMEOUT:
                try:
                    requests.get(base_url + '/hello', timeout=0.2)
                except (requests.exceptions.Timeout, requests.exceptions.ConnectionError):
                    time.sleep(0.2)
                else:
                    break
            else:
                if server.poll() is None:
                    pytest.fail('Server is not responding to requests')
                else:
                    # NOTE(kgriffs): The server did not start up; probably due to
                    #   the port being in use. We could check the output but
                    #   capsys fixture may not have buffered the error output
                    #   yet, so we just retry.
                    continue
    
            yield base_url
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/test_wsgi_servers.py:175: Failed
_ ERROR at setup of TestWSGIServer.test_static_file_byte_range[gunicorn--47-The content of this comment is part of a test.\n] _

server_args = <function _gunicorn_args at 0x7fd5fc0e96c0>

    @pytest.fixture
    def server_url(server_args):
        if sys.platform.startswith('win'):
            pytest.skip('WSGI server tests are currently unsupported on Windows')
    
        for attempt in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}'.format(_SERVER_HOST, server_port)
    
            args = server_args(_SERVER_HOST, server_port)
            print('Starting {}...'.format(server_args.__doc__))
            print(' '.join(args))
            try:
                server = subprocess.Popen(args, cwd=_HERE)
            except FileNotFoundError:
                pytest.skip('{} executable is not installed'.format(args[0]))
    
            # NOTE(vytas): give the app server some time to start.
            start_time = time.time()
            while time.time() - start_time < _STARTUP_TIMEOUT:
                try:
                    requests.get(base_url + '/hello', timeout=0.2)
                except (requests.exceptions.Timeout, requests.exceptions.ConnectionError):
                    time.sleep(0.2)
                else:
                    break
            else:
                if server.poll() is None:
                    pytest.fail('Server is not responding to requests')
                else:
                    # NOTE(kgriffs): The server did not start up; probably due to
                    #   the port being in use. We could check the output but
                    #   capsys fixture may not have buffered the error output
                    #   yet, so we just retry.
                    continue
    
            yield base_url
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/test_wsgi_servers.py:175: Failed
_____ ERROR at setup of TestWSGIServer.test_post_multipart_form[gunicorn] ______

server_args = <function _gunicorn_args at 0x7fd5fc0e96c0>

    @pytest.fixture
    def server_url(server_args):
        if sys.platform.startswith('win'):
            pytest.skip('WSGI server tests are currently unsupported on Windows')
    
        for attempt in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}'.format(_SERVER_HOST, server_port)
    
            args = server_args(_SERVER_HOST, server_port)
            print('Starting {}...'.format(server_args.__doc__))
            print(' '.join(args))
            try:
                server = subprocess.Popen(args, cwd=_HERE)
            except FileNotFoundError:
                pytest.skip('{} executable is not installed'.format(args[0]))
    
            # NOTE(vytas): give the app server some time to start.
            start_time = time.time()
            while time.time() - start_time < _STARTUP_TIMEOUT:
                try:
                    requests.get(base_url + '/hello', timeout=0.2)
                except (requests.exceptions.Timeout, requests.exceptions.ConnectionError):
                    time.sleep(0.2)
                else:
                    break
            else:
                if server.poll() is None:
                    pytest.fail('Server is not responding to requests')
                else:
                    # NOTE(kgriffs): The server did not start up; probably due to
                    #   the port being in use. We could check the output but
                    #   capsys fixture may not have buffered the error output
                    #   yet, so we just retry.
                    continue
    
            yield base_url
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/test_wsgi_servers.py:175: Failed
______________ ERROR at setup of TestWSGIServer.test_get[uvicorn] ______________

server_args = <function _uvicorn_args at 0x7fd5fc0e97e0>

    @pytest.fixture
    def server_url(server_args):
        if sys.platform.startswith('win'):
            pytest.skip('WSGI server tests are currently unsupported on Windows')
    
        for attempt in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}'.format(_SERVER_HOST, server_port)
    
            args = server_args(_SERVER_HOST, server_port)
            print('Starting {}...'.format(server_args.__doc__))
            print(' '.join(args))
            try:
                server = subprocess.Popen(args, cwd=_HERE)
            except FileNotFoundError:
                pytest.skip('{} executable is not installed'.format(args[0]))
    
            # NOTE(vytas): give the app server some time to start.
            start_time = time.time()
            while time.time() - start_time < _STARTUP_TIMEOUT:
                try:
                    requests.get(base_url + '/hello', timeout=0.2)
                except (requests.exceptions.Timeout, requests.exceptions.ConnectionError):
                    time.sleep(0.2)
                else:
                    break
            else:
                if server.poll() is None:
                    pytest.fail('Server is not responding to requests')
                else:
                    # NOTE(kgriffs): The server did not start up; probably due to
                    #   the port being in use. We could check the output but
                    #   capsys fixture may not have buffered the error output
                    #   yet, so we just retry.
                    continue
    
            yield base_url
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/test_wsgi_servers.py:175: Failed
_ ERROR at setup of TestWSGIServer.test_static_file_byte_range[gunicorn-2-6-port] _

server_args = <function _gunicorn_args at 0x7fd5fc0e96c0>

    @pytest.fixture
    def server_url(server_args):
        if sys.platform.startswith('win'):
            pytest.skip('WSGI server tests are currently unsupported on Windows')
    
        for attempt in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}'.format(_SERVER_HOST, server_port)
    
            args = server_args(_SERVER_HOST, server_port)
            print('Starting {}...'.format(server_args.__doc__))
            print(' '.join(args))
            try:
                server = subprocess.Popen(args, cwd=_HERE)
            except FileNotFoundError:
                pytest.skip('{} executable is not installed'.format(args[0]))
    
            # NOTE(vytas): give the app server some time to start.
            start_time = time.time()
            while time.time() - start_time < _STARTUP_TIMEOUT:
                try:
                    requests.get(base_url + '/hello', timeout=0.2)
                except (requests.exceptions.Timeout, requests.exceptions.ConnectionError):
                    time.sleep(0.2)
                else:
                    break
            else:
                if server.poll() is None:
                    pytest.fail('Server is not responding to requests')
                else:
                    # NOTE(kgriffs): The server did not start up; probably due to
                    #   the port being in use. We could check the output but
                    #   capsys fixture may not have buffered the error output
                    #   yet, so we just retry.
                    continue
    
            yield base_url
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/test_wsgi_servers.py:175: Failed
_ ERROR at setup of TestWSGIServer.test_static_file_byte_range[gunicorn-7--hashlib] _

server_args = <function _gunicorn_args at 0x7fd5fc0e96c0>

    @pytest.fixture
    def server_url(server_args):
        if sys.platform.startswith('win'):
            pytest.skip('WSGI server tests are currently unsupported on Windows')
    
        for attempt in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}'.format(_SERVER_HOST, server_port)
    
            args = server_args(_SERVER_HOST, server_port)
            print('Starting {}...'.format(server_args.__doc__))
            print(' '.join(args))
            try:
                server = subprocess.Popen(args, cwd=_HERE)
            except FileNotFoundError:
                pytest.skip('{} executable is not installed'.format(args[0]))
    
            # NOTE(vytas): give the app server some time to start.
            start_time = time.time()
            while time.time() - start_time < _STARTUP_TIMEOUT:
                try:
                    requests.get(base_url + '/hello', timeout=0.2)
                except (requests.exceptions.Timeout, requests.exceptions.ConnectionError):
                    time.sleep(0.2)
                else:
                    break
            else:
                if server.poll() is None:
                    pytest.fail('Server is not responding to requests')
                else:
                    # NOTE(kgriffs): The server did not start up; probably due to
                    #   the port being in use. We could check the output but
                    #   capsys fixture may not have buffered the error output
                    #   yet, so we just retry.
                    continue
    
            yield base_url
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/test_wsgi_servers.py:175: Failed
_________ ERROR at setup of TestWSGIServer.test_static_file[gunicorn] __________

server_args = <function _gunicorn_args at 0x7fd5fc0e96c0>

    @pytest.fixture
    def server_url(server_args):
        if sys.platform.startswith('win'):
            pytest.skip('WSGI server tests are currently unsupported on Windows')
    
        for attempt in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}'.format(_SERVER_HOST, server_port)
    
            args = server_args(_SERVER_HOST, server_port)
            print('Starting {}...'.format(server_args.__doc__))
            print(' '.join(args))
            try:
                server = subprocess.Popen(args, cwd=_HERE)
            except FileNotFoundError:
                pytest.skip('{} executable is not installed'.format(args[0]))
    
            # NOTE(vytas): give the app server some time to start.
            start_time = time.time()
            while time.time() - start_time < _STARTUP_TIMEOUT:
                try:
                    requests.get(base_url + '/hello', timeout=0.2)
                except (requests.exceptions.Timeout, requests.exceptions.ConnectionError):
                    time.sleep(0.2)
                else:
                    break
            else:
                if server.poll() is None:
                    pytest.fail('Server is not responding to requests')
                else:
                    # NOTE(kgriffs): The server did not start up; probably due to
                    #   the port being in use. We could check the output but
                    #   capsys fixture may not have buffered the error output
                    #   yet, so we just retry.
                    continue
    
            yield base_url
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/test_wsgi_servers.py:175: Failed
________ ERROR at setup of TestWSGIServer.test_get_deprecated[uvicorn] _________

server_args = <function _uvicorn_args at 0x7fd5fc0e97e0>

    @pytest.fixture
    def server_url(server_args):
        if sys.platform.startswith('win'):
            pytest.skip('WSGI server tests are currently unsupported on Windows')
    
        for attempt in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}'.format(_SERVER_HOST, server_port)
    
            args = server_args(_SERVER_HOST, server_port)
            print('Starting {}...'.format(server_args.__doc__))
            print(' '.join(args))
            try:
                server = subprocess.Popen(args, cwd=_HERE)
            except FileNotFoundError:
                pytest.skip('{} executable is not installed'.format(args[0]))
    
            # NOTE(vytas): give the app server some time to start.
            start_time = time.time()
            while time.time() - start_time < _STARTUP_TIMEOUT:
                try:
                    requests.get(base_url + '/hello', timeout=0.2)
                except (requests.exceptions.Timeout, requests.exceptions.ConnectionError):
                    time.sleep(0.2)
                else:
                    break
            else:
                if server.poll() is None:
                    pytest.fail('Server is not responding to requests')
                else:
                    # NOTE(kgriffs): The server did not start up; probably due to
                    #   the port being in use. We could check the output but
                    #   capsys fixture may not have buffered the error output
                    #   yet, so we just retry.
                    continue
    
            yield base_url
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/test_wsgi_servers.py:175: Failed
_ ERROR at setup of TestWSGIServer.test_static_file_byte_range[gunicorn-32-38-random] _

server_args = <function _gunicorn_args at 0x7fd5fc0e96c0>

    @pytest.fixture
    def server_url(server_args):
        if sys.platform.startswith('win'):
            pytest.skip('WSGI server tests are currently unsupported on Windows')
    
        for attempt in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}'.format(_SERVER_HOST, server_port)
    
            args = server_args(_SERVER_HOST, server_port)
            print('Starting {}...'.format(server_args.__doc__))
            print(' '.join(args))
            try:
                server = subprocess.Popen(args, cwd=_HERE)
            except FileNotFoundError:
                pytest.skip('{} executable is not installed'.format(args[0]))
    
            # NOTE(vytas): give the app server some time to start.
            start_time = time.time()
            while time.time() - start_time < _STARTUP_TIMEOUT:
                try:
                    requests.get(base_url + '/hello', timeout=0.2)
                except (requests.exceptions.Timeout, requests.exceptions.ConnectionError):
                    time.sleep(0.2)
                else:
                    break
            else:
                if server.poll() is None:
                    pytest.fail('Server is not responding to requests')
                else:
                    # NOTE(kgriffs): The server did not start up; probably due to
                    #   the port being in use. We could check the output but
                    #   capsys fixture may not have buffered the error output
                    #   yet, so we just retry.
                    continue
    
            yield base_url
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/test_wsgi_servers.py:175: Failed
_____________ ERROR at setup of TestWSGIServer.test_get[gunicorn] ______________

server_args = <function _gunicorn_args at 0x7fd5fc0e96c0>

    @pytest.fixture
    def server_url(server_args):
        if sys.platform.startswith('win'):
            pytest.skip('WSGI server tests are currently unsupported on Windows')
    
        for attempt in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}'.format(_SERVER_HOST, server_port)
    
            args = server_args(_SERVER_HOST, server_port)
            print('Starting {}...'.format(server_args.__doc__))
            print(' '.join(args))
            try:
                server = subprocess.Popen(args, cwd=_HERE)
            except FileNotFoundError:
                pytest.skip('{} executable is not installed'.format(args[0]))
    
            # NOTE(vytas): give the app server some time to start.
            start_time = time.time()
            while time.time() - start_time < _STARTUP_TIMEOUT:
                try:
                    requests.get(base_url + '/hello', timeout=0.2)
                except (requests.exceptions.Timeout, requests.exceptions.ConnectionError):
                    time.sleep(0.2)
                else:
                    break
            else:
                if server.poll() is None:
                    pytest.fail('Server is not responding to requests')
                else:
                    # NOTE(kgriffs): The server did not start up; probably due to
                    #   the port being in use. We could check the output but
                    #   capsys fixture may not have buffered the error output
                    #   yet, so we just retry.
                    continue
    
            yield base_url
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/test_wsgi_servers.py:175: Failed
_______________________ ERROR at setup of test_bar[asgi] _______________________

asgi = True
request = <SubRequest 'custom_http_client' for <Function test_bar[asgi]>>
cleanup_constants = None
resource_things = <test_http_custom_method_routing.ThingsResource object at 0x7fd5fc701cc0>

    @pytest.fixture
    def custom_http_client(asgi, request, cleanup_constants, resource_things):
        falcon.constants.COMBINED_METHODS += FALCON_CUSTOM_HTTP_METHODS
    
        app = create_app(asgi)
>       app.add_route('/things', resource_things)

tests/test_http_custom_method_routing.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd639147290>
method_map = {'BAR': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c175750>, 'CHECKIN':...0>, 'CONNECT': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c175750>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ThingsResource.on_foo of <test_http_custom_method_routing.ThingsResource object at 0x7fd5fc701cc0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ ERROR at setup of test_map_http_methods[asgi] _________________

asgi = True
request = <SubRequest 'custom_http_client' for <Function test_map_http_methods[asgi]>>
cleanup_constants = None
resource_things = <test_http_custom_method_routing.ThingsResource object at 0x7fd6390eda50>

    @pytest.fixture
    def custom_http_client(asgi, request, cleanup_constants, resource_things):
        falcon.constants.COMBINED_METHODS += FALCON_CUSTOM_HTTP_METHODS
    
        app = create_app(asgi)
>       app.add_route('/things', resource_things)

tests/test_http_custom_method_routing.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73bc3c4a0>
method_map = {'BAR': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd5e8429bd0>, 'CHECKIN':...0>, 'CONNECT': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd5e8429bd0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ThingsResource.on_foo of <test_http_custom_method_routing.ThingsResource object at 0x7fd6390eda50>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______________________ ERROR at setup of test_foo[asgi] _______________________

asgi = True
request = <SubRequest 'custom_http_client' for <Function test_foo[asgi]>>
cleanup_constants = None
resource_things = <test_http_custom_method_routing.ThingsResource object at 0x7fd73c1aab30>

    @pytest.fixture
    def custom_http_client(asgi, request, cleanup_constants, resource_things):
        falcon.constants.COMBINED_METHODS += FALCON_CUSTOM_HTTP_METHODS
    
        app = create_app(asgi)
>       app.add_route('/things', resource_things)

tests/test_http_custom_method_routing.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73bc3ec00>
method_map = {'BAR': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c176f80>, 'CHECKIN':...0>, 'CONNECT': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c176f80>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ThingsResource.on_foo of <test_http_custom_method_routing.ThingsResource object at 0x7fd73c1aab30>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHttpMethodRouting.test_meta_and_others_disallowed[asgi-SETECASTRONOMY] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        app.add_route('/stonewall', Stonewall())
    
        resource_things = ThingsResource()
>       app.add_route('/things', resource_things)

tests/test_http_method_routing.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73bc3c040>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c161990>, 'CHECK...1990>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c161990>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ThingsResource.on_get of <test_http_method_routing.ThingsResource object at 0x7fd638efdc00>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____ ERROR at setup of TestHttpMethodRouting.test_default_on_options[asgi] _____

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        app.add_route('/stonewall', Stonewall())
    
        resource_things = ThingsResource()
>       app.add_route('/things', resource_things)

tests/test_http_method_routing.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd63909c740>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c176ef0>, 'CHECK...6ef0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c176ef0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ThingsResource.on_get of <test_http_method_routing.ThingsResource object at 0x7fd73c1abbb0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ ERROR at setup of TestHttpMethodRouting.test_put[asgi] ____________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        app.add_route('/stonewall', Stonewall())
    
        resource_things = ThingsResource()
>       app.add_route('/things', resource_things)

tests/test_http_method_routing.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd63909d850>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1765f0>, 'CHECK...65f0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1765f0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ThingsResource.on_get of <test_http_method_routing.ThingsResource object at 0x7fd6390698a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ ERROR at setup of TestHttpMethodRouting.test_on_options[asgi] _________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        app.add_route('/stonewall', Stonewall())
    
        resource_things = ThingsResource()
>       app.add_route('/things', resource_things)

tests/test_http_method_routing.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd63909ef10>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c163490>, 'CHECK...3490>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c163490>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ThingsResource.on_get of <test_http_method_routing.ThingsResource object at 0x7fd639155480>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________ ERROR at setup of TestHttpMethodRouting.test_misc[asgi] ____________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        app.add_route('/stonewall', Stonewall())
    
        resource_things = ThingsResource()
>       app.add_route('/things', resource_things)

tests/test_http_method_routing.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd63909fa00>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c162c20>, 'CHECK...2c20>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c162c20>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ThingsResource.on_get of <test_http_method_routing.ThingsResource object at 0x7fd639104310>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHttpMethodRouting.test_meta_and_others_disallowed[asgi-WEBSOCKET] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        app.add_route('/stonewall', Stonewall())
    
        resource_things = ThingsResource()
>       app.add_route('/things', resource_things)

tests/test_http_method_routing.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd63909dd90>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c563910>, 'CHECK...3910>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c563910>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ThingsResource.on_get of <test_http_method_routing.ThingsResource object at 0x7fd73c372410>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ ERROR at setup of TestHttpMethodRouting.test_get[asgi] ____________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        app.add_route('/stonewall', Stonewall())
    
        resource_things = ThingsResource()
>       app.add_route('/things', resource_things)

tests/test_http_method_routing.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd63909fa70>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c149750>, 'CHECK...9750>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c149750>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ThingsResource.on_get of <test_http_method_routing.ThingsResource object at 0x7fd639099150>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHttpMethodRouting.test_methods_not_allowed_complex[asgi] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        app.add_route('/stonewall', Stonewall())
    
        resource_things = ThingsResource()
>       app.add_route('/things', resource_things)

tests/test_http_method_routing.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd639144900>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c14ae60>, 'CHECK...ae60>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c14ae60>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ThingsResource.on_get of <test_http_method_routing.ThingsResource object at 0x7fd73ab6fd30>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHttpMethodRouting.test_methods_not_allowed_simple[asgi] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        app.add_route('/stonewall', Stonewall())
    
        resource_things = ThingsResource()
>       app.add_route('/things', resource_things)

tests/test_http_method_routing.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd639146500>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c160ca0>, 'CHECK...0ca0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c160ca0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ThingsResource.on_get of <test_http_method_routing.ThingsResource object at 0x7fd638f73b50>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________ ERROR at setup of TestHttpMethodRouting.test_report[asgi] ___________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        app.add_route('/stonewall', Stonewall())
    
        resource_things = ThingsResource()
>       app.add_route('/things', resource_things)

tests/test_http_method_routing.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73bd280b0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c148af0>, 'CHECK...8af0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c148af0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ThingsResource.on_get of <test_http_method_routing.ThingsResource object at 0x7fd6391043d0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____ ERROR at setup of TestHttpMethodRouting.test_post_not_allowed[asgi] ______

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        app.add_route('/stonewall', Stonewall())
    
        resource_things = ThingsResource()
>       app.add_route('/things', resource_things)

tests/test_http_method_routing.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73bd28820>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1628c0>, 'CHECK...28c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1628c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ThingsResource.on_get of <test_http_method_routing.ThingsResource object at 0x7fd639028ca0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHttpMethodRouting.test_method_not_allowed_with_param[asgi] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        app.add_route('/stonewall', Stonewall())
    
        resource_things = ThingsResource()
>       app.add_route('/things', resource_things)

tests/test_http_method_routing.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73bc3fd80>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c14b9a0>, 'CHECK...b9a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c14b9a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ThingsResource.on_get of <test_http_method_routing.ThingsResource object at 0x7fd5fc6f9030>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
=================================== FAILURES ===================================
___________________ TestMain.test_inspect[internal-verbose] ____________________

self = <test_cmd_inspect_app.TestMain object at 0x7fd6091ab490>, verbose = True
internal = True
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fd5fc0463e0>

    def test_inspect(self, verbose, internal, monkeypatch):
        args = ['some-file.py', '{}:{}'.format(_MODULE, '_APP')]
        if verbose:
            args.append('-v')
        if internal:
            args.append('-i')
        monkeypatch.setattr('sys.argv', args)
        output = io.StringIO()
        with redirected(stdout=output):
>           inspect_app.main()

tests/test_cmd_inspect_app.py:178: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:100: in main
    app = load_app(parser, args)
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7fd740d1b400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
_______________ TestMain.test_inspect[not-internal-not-verbose] ________________

self = <test_cmd_inspect_app.TestMain object at 0x7fd6091ab640>, verbose = False
internal = False
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fd5e87d5d80>

    def test_inspect(self, verbose, internal, monkeypatch):
        args = ['some-file.py', '{}:{}'.format(_MODULE, '_APP')]
        if verbose:
            args.append('-v')
        if internal:
            args.append('-i')
        monkeypatch.setattr('sys.argv', args)
        output = io.StringIO()
        with redirected(stdout=output):
>           inspect_app.main()

tests/test_cmd_inspect_app.py:178: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:100: in main
    app = load_app(parser, args)
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7fd740d1b400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
_________________ TestMain.test_inspect[not-internal-verbose] __________________

self = <test_cmd_inspect_app.TestMain object at 0x7fd6091ab5b0>, verbose = True
internal = False
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fd5e8401600>

    def test_inspect(self, verbose, internal, monkeypatch):
        args = ['some-file.py', '{}:{}'.format(_MODULE, '_APP')]
        if verbose:
            args.append('-v')
        if internal:
            args.append('-i')
        monkeypatch.setattr('sys.argv', args)
        output = io.StringIO()
        with redirected(stdout=output):
>           inspect_app.main()

tests/test_cmd_inspect_app.py:178: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:100: in main
    app = load_app(parser, args)
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7fd740d1b400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
_______________ TestMain.test_routes_only[internal-not-verbose] ________________

self = <test_cmd_inspect_app.TestMain object at 0x7fd6091ab130>, verbose = False
internal = True
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fd5e9710c70>

    def test_routes_only(self, verbose, internal, monkeypatch):
        args = ['some-file.py', '{}:{}'.format(_MODULE, '_APP'), '-r']
        if verbose:
            args.append('-v')
        if internal:
            args.append('-i')
        monkeypatch.setattr('sys.argv', args)
        output = io.StringIO()
        with redirected(stdout=output):
>           inspect_app.main()

tests/test_cmd_inspect_app.py:163: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:100: in main
    app = load_app(parser, args)
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7fd740d1b400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
_____________ TestMain.test_routes_only[not-internal-not-verbose] ______________

self = <test_cmd_inspect_app.TestMain object at 0x7fd6091ab250>, verbose = False
internal = False
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fd5e87377f0>

    def test_routes_only(self, verbose, internal, monkeypatch):
        args = ['some-file.py', '{}:{}'.format(_MODULE, '_APP'), '-r']
        if verbose:
            args.append('-v')
        if internal:
            args.append('-i')
        monkeypatch.setattr('sys.argv', args)
        output = io.StringIO()
        with redirected(stdout=output):
>           inspect_app.main()

tests/test_cmd_inspect_app.py:163: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:100: in main
    app = load_app(parser, args)
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7fd740d1b400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
_______________ TestMain.test_routes_only[not-internal-verbose] ________________

self = <test_cmd_inspect_app.TestMain object at 0x7fd6091ab1c0>, verbose = True
internal = False
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fd5e85a1ed0>

    def test_routes_only(self, verbose, internal, monkeypatch):
        args = ['some-file.py', '{}:{}'.format(_MODULE, '_APP'), '-r']
        if verbose:
            args.append('-v')
        if internal:
            args.append('-i')
        monkeypatch.setattr('sys.argv', args)
        output = io.StringIO()
        with redirected(stdout=output):
>           inspect_app.main()

tests/test_cmd_inspect_app.py:163: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:100: in main
    app = load_app(parser, args)
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7fd740d1b400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
_________________ TestMain.test_inspect[internal-not-verbose] __________________

self = <test_cmd_inspect_app.TestMain object at 0x7fd6091ab520>, verbose = False
internal = True
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fd5e87b32b0>

    def test_inspect(self, verbose, internal, monkeypatch):
        args = ['some-file.py', '{}:{}'.format(_MODULE, '_APP')]
        if verbose:
            args.append('-v')
        if internal:
            args.append('-i')
        monkeypatch.setattr('sys.argv', args)
        output = io.StringIO()
        with redirected(stdout=output):
>           inspect_app.main()

tests/test_cmd_inspect_app.py:178: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:100: in main
    app = load_app(parser, args)
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7fd740d1b400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
_________________ TestMain.test_routes_only[internal-verbose] __________________

self = <test_cmd_inspect_app.TestMain object at 0x7fd6091ab0a0>, verbose = True
internal = True
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fd5e93dc580>

    def test_routes_only(self, verbose, internal, monkeypatch):
        args = ['some-file.py', '{}:{}'.format(_MODULE, '_APP'), '-r']
        if verbose:
            args.append('-v')
        if internal:
            args.append('-i')
        monkeypatch.setattr('sys.argv', args)
        output = io.StringIO()
        with redirected(stdout=output):
>           inspect_app.main()

tests/test_cmd_inspect_app.py:163: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:100: in main
    app = load_app(parser, args)
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7fd740d1b400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
___________________ TestLoadApp.test_load_app_error[_MODULE] ___________________

self = <test_cmd_inspect_app.TestLoadApp object at 0x7fd6091aabf0>
name = '_MODULE'

    @pytest.mark.parametrize(
        'name',
        (
            'foo',  # not exists
            '_MODULE',  # not callable and not app
            'DummyResource',  # callable and not app
        ),
    )
    def test_load_app_error(self, name):
        parser = inspect_app.make_parser()
        args = Namespace(
            app_module='{}:{}'.format(_MODULE, name), route_only=False, verbose=False
        )
        with pytest.raises(SystemExit):
>           inspect_app.load_app(parser, args)

tests/test_cmd_inspect_app.py:134: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7fd740d1b400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
________________ TestLoadApp.test_load_app_error[DummyResource] ________________

self = <test_cmd_inspect_app.TestLoadApp object at 0x7fd6091aac80>
name = 'DummyResource'

    @pytest.mark.parametrize(
        'name',
        (
            'foo',  # not exists
            '_MODULE',  # not callable and not app
            'DummyResource',  # callable and not app
        ),
    )
    def test_load_app_error(self, name):
        parser = inspect_app.make_parser()
        args = Namespace(
            app_module='{}:{}'.format(_MODULE, name), route_only=False, verbose=False
        )
        with pytest.raises(SystemExit):
>           inspect_app.load_app(parser, args)

tests/test_cmd_inspect_app.py:134: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7fd740d1b400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
_____________________ TestLoadApp.test_load_app[make_app] ______________________

self = <test_cmd_inspect_app.TestLoadApp object at 0x7fd6091aa9b0>
name = 'make_app'

    @pytest.mark.parametrize('name', ('_APP', 'make_app'))
    def test_load_app(self, name):
        parser = inspect_app.make_parser()
        args = Namespace(
            app_module='{}:{}'.format(_MODULE, name), route_only=False, verbose=False
        )
>       app = inspect_app.load_app(parser, args)

tests/test_cmd_inspect_app.py:116: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7fd740d1b400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
_____________________ TestLoadApp.test_load_app_error[foo] _____________________

self = <test_cmd_inspect_app.TestLoadApp object at 0x7fd6091aab60>, name = 'foo'

    @pytest.mark.parametrize(
        'name',
        (
            'foo',  # not exists
            '_MODULE',  # not callable and not app
            'DummyResource',  # callable and not app
        ),
    )
    def test_load_app_error(self, name):
        parser = inspect_app.make_parser()
        args = Namespace(
            app_module='{}:{}'.format(_MODULE, name), route_only=False, verbose=False
        )
        with pytest.raises(SystemExit):
>           inspect_app.load_app(parser, args)

tests/test_cmd_inspect_app.py:134: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7fd740d1b400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
_______________________ TestLoadApp.test_load_app[_APP] ________________________

self = <test_cmd_inspect_app.TestLoadApp object at 0x7fd6091aa920>
name = '_APP'

    @pytest.mark.parametrize('name', ('_APP', 'make_app'))
    def test_load_app(self, name):
        parser = inspect_app.make_parser()
        args = Namespace(
            app_module='{}:{}'.format(_MODULE, name), route_only=False, verbose=False
        )
>       app = inspect_app.load_app(parser, args)

tests/test_cmd_inspect_app.py:116: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7fd740d1b400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
___________________________ test_jsonchema_validator ___________________________

client = <falcon.testing.client.TestClient object at 0x7fd73c623580>

    @pytest.mark.skipif(not pyximport, reason='Cython not installed')
    def test_jsonchema_validator(client):
        with disable_asgi_non_coroutine_wrapping():
            if CYTHON_COROUTINE_HINT:
>               client.app.add_route('/', _cythonized.TestResourceWithValidationNoHint())

tests/asgi/test_cythonized_asgi.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd5fcb7a1f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd5e851a680>, 'CHECK...a680>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd5e851a680>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestResourceWithValidationNoHint.on_get of <asgi._cythonized.TestResourceWithValidationNoHint object at 0x7fd73c6234f0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________________________ test_hooks __________________________________

client = <falcon.testing.client.TestClient object at 0x7fd5fd15ecb0>

    @pytest.mark.skipif(not pyximport, reason='Cython not installed')
    def test_hooks(client):
        with disable_asgi_non_coroutine_wrapping():
            if CYTHON_COROUTINE_HINT:
>               client.app.add_route('/', _cythonized.TestResourceWithHooksNoHint())

tests/asgi/test_cythonized_asgi.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c51fb50>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c722b00>, 'CHECK...2b00>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c722b00>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestResourceWithHooksNoHint.on_get of <asgi._cythonized.TestResourceWithHooksNoHint object at 0x7fd5fc069fc0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ TestDefaultRouting.test_route_precedence_with_id[asgi] ____________

self = <test_sinks.TestDefaultRouting object at 0x7fd5fca453f0>
client = <falcon.testing.client.TestClient object at 0x7fd638f9f0d0>
sink = <test_sinks.SinkAsync object at 0x7fd638f9c1c0>
resource = <test_sinks.BookCollection object at 0x7fd638f9c610>

    def test_route_precedence_with_id(self, client, sink, resource):
        # NOTE(kgriffs): In case of collision, the route takes precedence.
>       client.app.add_route('/books/{id}', resource)

tests/test_sinks.py:135: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c525230>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c0979a0>, 'CHECK...79a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c0979a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <test_sinks.BookCollection object at 0x7fd638f9c610>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________ TestDefaultRouting.test_route_precedence_with_both_id[asgi] __________

self = <test_sinks.TestDefaultRouting object at 0x7fd5fca45690>
client = <falcon.testing.client.TestClient object at 0x7fd73c49c760>
sink = <test_sinks.SinkAsync object at 0x7fd73c49d780>
resource = <test_sinks.BookCollection object at 0x7fd73c49de70>

    def test_route_precedence_with_both_id(self, client, sink, resource):
        # NOTE(kgriffs): In case of collision, the route takes precedence.
>       client.app.add_route('/books/{id}', resource)

tests/test_sinks.py:144: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c47f6f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c096950>, 'CHECK...6950>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c096950>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <test_sinks.BookCollection object at 0x7fd73c49de70>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________________ TestDefaultRouting.test_with_route[asgi] ___________________

self = <test_sinks.TestDefaultRouting object at 0x7fd5fca44eb0>
client = <falcon.testing.client.TestClient object at 0x7fd638d8f250>
sink = <test_sinks.SinkAsync object at 0x7fd638d8eef0>
resource = <test_sinks.BookCollection object at 0x7fd73c4b8be0>

    def test_with_route(self, client, sink, resource):
>       client.app.add_route('/books', resource)

tests/test_sinks.py:113: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c47c580>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c0951b0>, 'CHECK...51b0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c0951b0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <test_sinks.BookCollection object at 0x7fd73c4b8be0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ TestDefaultRouting.test_route_precedence[asgi] ________________

self = <test_sinks.TestDefaultRouting object at 0x7fd5fca45150>
client = <falcon.testing.client.TestClient object at 0x7fd73c10ae90>
sink = <test_sinks.SinkAsync object at 0x7fd73c108160>
resource = <test_sinks.BookCollection object at 0x7fd73c10b0d0>

    def test_route_precedence(self, client, sink, resource):
        # NOTE(kgriffs): In case of collision, the route takes precedence.
>       client.app.add_route('/books', resource)

tests/test_sinks.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd5fcb7a110>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c0945e0>, 'CHECK...45e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c0945e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <test_sinks.BookCollection object at 0x7fd73c10b0d0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ TestSinkMethodCompatibility.test_add_sync_sink_with_wrapping[asgi] ______

self = <test_sinks.TestSinkMethodCompatibility object at 0x7fd5fca45e70>
client = <falcon.testing.client.TestClient object at 0x7fd638efd8d0>
asgi = True

    def test_add_sync_sink_with_wrapping(self, client, asgi):
>       client.app.add_sink(kitchen_sink, '/features')

tests/test_sinks.py:176: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.asgi.app.App object at 0x7fd73c6c3dc0>
sink = <function kitchen_sink at 0x7fd5fca03250>, prefix = '/features'

    def add_sink(self, sink: Callable, prefix: SinkPrefix = r'/'):
        if not iscoroutinefunction(sink) and is_python_func(sink):
            if _should_wrap_non_coroutines():
                sink = wrap_sync_to_async(sink)
            else:
>               raise CompatibilityError(
                    'The sink method must be an awaitable coroutine function '
                    'in order to be used safely with an ASGI app.'
                )
E               falcon.errors.CompatibilityError: The sink method must be an awaitable coroutine function in order to be used safely with an ASGI app.

falcon/asgi/app.py:740: CompatibilityError
______ test_non_string_status[asgi-HTTPStatus.INTERNAL_SERVER_ERROR-500] _______

custom_status_client = <function custom_status_client.<locals>.client at 0x7fd73c076950>
status = <HTTPStatus.INTERNAL_SERVER_ERROR: 500>, expected_code = 500

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c2d1070>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c075480>, 'CHECK...5480>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c075480>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7fd73be8cd00>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________________ test_non_string_status[asgi-702-702] _____________________

custom_status_client = <function custom_status_client.<locals>.client at 0x7fd73c094940>
status = 702, expected_code = 702

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c50c0b0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c075510>, 'CHECK...5510>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c075510>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7fd638ee4a60>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______________ test_non_string_status[asgi-HTTPStatus.OK-2001] ________________

custom_status_client = <function custom_status_client.<locals>.client at 0x7fd73c0749d0>
status = <HTTPStatus.OK: 200>, expected_code = 200

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c50d150>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c0772e0>, 'CHECK...72e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c0772e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7fd73c4971c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________________ test_non_string_status[asgi-500-500] _____________________

custom_status_client = <function custom_status_client.<locals>.client at 0x7fd73c077b50>
status = 500, expected_code = 500

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c50e420>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c075ea0>, 'CHECK...5ea0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c075ea0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7fd73abe21d0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________ test_non_string_status[asgi-HTTPStatus.ACCEPTED-202] _____________

custom_status_client = <function custom_status_client.<locals>.client at 0x7fd73c074af0>
status = <HTTPStatus.ACCEPTED: 202>, expected_code = 202

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c50e650>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c077640>, 'CHECK...7640>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c077640>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7fd73aacb490>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________________ test_non_string_status[asgi-307-307] _____________________

custom_status_client = <function custom_status_client.<locals>.client at 0x7fd73c074ee0>
status = 307, expected_code = 307

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c50f920>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c075cf0>, 'CHECK...5cf0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c075cf0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7fd73ab21870>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ test_non_string_status[asgi-702 Emacs-702] __________________

custom_status_client = <function custom_status_client.<locals>.client at 0x7fd73c094940>
status = b'702 Emacs', expected_code = 702

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c50da80>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c097760>, 'CHECK...7760>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c097760>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7fd639068910>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ test_non_string_status[asgi-HTTPStatus.FORBIDDEN-403] _____________

custom_status_client = <function custom_status_client.<locals>.client at 0x7fd73c094160>
status = <HTTPStatus.FORBIDDEN: 403>, expected_code = 403

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c50fd80>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c0970a0>, 'CHECK...70a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c0970a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7fd73c0490c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________________ test_non_string_status[asgi-200-200] _____________________

custom_status_client = <function custom_status_client.<locals>.client at 0x7fd73c0972e0>
status = 200, expected_code = 200

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c50f610>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c095240>, 'CHECK...5240>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c095240>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7fd73abe0c40>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________________ test_non_string_status[asgi-200 OK-200] ____________________

custom_status_client = <function custom_status_client.<locals>.client at 0x7fd73c0957e0>
status = b'200 OK', expected_code = 200

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c2d13f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c095e10>, 'CHECK...5e10>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c095e10>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7fd638f393f0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ test_non_string_status[asgi-HTTPStatus.USE_PROXY-305] _____________

custom_status_client = <function custom_status_client.<locals>.client at 0x7fd73c0944c0>
status = <HTTPStatus.USE_PROXY: 305>, expected_code = 305

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c2d21f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c0945e0>, 'CHECK...45e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c0945e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7fd73c204a60>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______________ test_non_string_status[asgi-HTTPStatus.OK-2000] ________________

custom_status_client = <function custom_status_client.<locals>.client at 0x7fd73c097490>
status = <HTTPStatus.OK: 200>, expected_code = 200

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c2d1af0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c096b90>, 'CHECK...6b90>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c096b90>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7fd73ab01b40>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________ test_non_string_status[asgi-HTTPStatus.NOT_IMPLEMENTED-501] __________

custom_status_client = <function custom_status_client.<locals>.client at 0x7fd73c094a60>
status = <HTTPStatus.NOT_IMPLEMENTED: 501>, expected_code = 501

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c2d02e0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c0777f0>, 'CHECK...77f0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c0777f0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7fd73aa6bc10>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ test_non_string_status[asgi-HTTPStatus.NOT_FOUND-404] _____________

custom_status_client = <function custom_status_client.<locals>.client at 0x7fd73c076290>
status = <HTTPStatus.NOT_FOUND: 404>, expected_code = 404

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd5fcb7a7a0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c076cb0>, 'CHECK...6cb0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c076cb0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7fd63902b310>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________________ TestCythonized.test_imported_from_c_modules __________________

self = <test_cython.TestCythonized object at 0x7fd5fd3a0ca0>

    @pytest.mark.skipif(not has_cython, reason='Cython not installed')
    def test_imported_from_c_modules(self):
>       assert 'falcon/app.py' not in str(falcon.app)
E       assert 'falcon/app.py' not in "<module 'fa...con/app.py'>"
E         'falcon/app.py' is contained here:
E           ts/falcon/falcon/app.py'>

tests/test_cython.py:14: AssertionError
_________________ TestCythonized.test_stream_has_private_read __________________

self = <test_cython.TestCythonized object at 0x7fd5fd3a0e20>

    def test_stream_has_private_read(self):
        stream = falcon.util.BufferedReader(io.BytesIO().read, 8)
    
        if has_cython and falcon.util.IS_64_BITS:
>           assert not hasattr(stream, '_read')
E           AssertionError: assert not True
E            +  where True = hasattr(<falcon.util.reader.BufferedReader object at 0x7fd6390e9540>, '_read')

tests/test_cython.py:20: AssertionError
_ TestCustomCorsMiddleware.test_allow_origin[asgi-allow2-fail_origins2-success_origins2] _

self = <test_cors_middleware.TestCustomCorsMiddleware object at 0x7fd5fd36e530>
make_cors_client = <function make_cors_client.<locals>.make at 0x7fd73c0956c0>
allow = ['foo', 'bar']
fail_origins = ['foo, bar', 'foobar', 'foo,bar', 'Foo', 'BAR']
success_origins = ['foo', 'bar']

    @pytest.mark.parametrize(
        'allow, fail_origins, success_origins',
        (
            ('*', [None], ['foo', 'bar']),
            ('test', ['other', 'Test', 'TEST'], ['test']),
            (
                ['foo', 'bar'],
                ['foo, bar', 'foobar', 'foo,bar', 'Foo', 'BAR'],
                ['foo', 'bar'],
            ),
        ),
    )
    def test_allow_origin(self, make_cors_client, allow, fail_origins, success_origins):
        client = make_cors_client(falcon.CORSMiddleware(allow_origins=allow))
>       client.app.add_route('/', CORSHeaderResource())

tests/test_cors_middleware.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c196490>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c095bd0>, 'CHECK...5bd0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c095bd0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CORSHeaderResource.on_delete of <test_cors_middleware.CORSHeaderResource object at 0x7fd5e9b6c2e0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestCustomCorsMiddleware.test_allow_origin[asgi-test-fail_origins1-success_origins1] _

self = <test_cors_middleware.TestCustomCorsMiddleware object at 0x7fd5fd36e4a0>
make_cors_client = <function make_cors_client.<locals>.make at 0x7fd73c096710>
allow = 'test', fail_origins = ['other', 'Test', 'TEST']
success_origins = ['test']

    @pytest.mark.parametrize(
        'allow, fail_origins, success_origins',
        (
            ('*', [None], ['foo', 'bar']),
            ('test', ['other', 'Test', 'TEST'], ['test']),
            (
                ['foo', 'bar'],
                ['foo, bar', 'foobar', 'foo,bar', 'Foo', 'BAR'],
                ['foo', 'bar'],
            ),
        ),
    )
    def test_allow_origin(self, make_cors_client, allow, fail_origins, success_origins):
        client = make_cors_client(falcon.CORSMiddleware(allow_origins=allow))
>       client.app.add_route('/', CORSHeaderResource())

tests/test_cors_middleware.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c51eff0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c097c70>, 'CHECK...7c70>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c097c70>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CORSHeaderResource.on_delete of <test_cors_middleware.CORSHeaderResource object at 0x7fd73aac9f00>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ TestCustomCorsMiddleware.test_allow_credential_wildcard[asgi] _________

self = <test_cors_middleware.TestCustomCorsMiddleware object at 0x7fd5fd36e380>
make_cors_client = <function make_cors_client.<locals>.make at 0x7fd73c095750>

    def test_allow_credential_wildcard(self, make_cors_client):
        client = make_cors_client(falcon.CORSMiddleware(allow_credentials='*'))
>       client.app.add_route('/', CORSHeaderResource())

tests/test_cors_middleware.py:153: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c2d1cb0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c077760>, 'CHECK...7760>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c077760>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CORSHeaderResource.on_delete of <test_cors_middleware.CORSHeaderResource object at 0x7fd73c1ab460>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ TestCustomCorsMiddleware.test_expose_headers[asgi-attr2-foo, bar] _______

self = <test_cors_middleware.TestCustomCorsMiddleware object at 0x7fd5fd36ee30>
make_cors_client = <function make_cors_client.<locals>.make at 0x7fd73c095c60>
attr = ['foo', 'bar'], exp = 'foo, bar'

    @pytest.mark.parametrize(
        'attr, exp',
        (
            ('foo', 'foo'),
            ('foo, bar', 'foo, bar'),
            (['foo', 'bar'], 'foo, bar'),
        ),
    )
    def test_expose_headers(self, make_cors_client, attr, exp):
        client = make_cors_client(
            falcon.CORSMiddleware(expose_headers=attr, allow_credentials=None)
        )
>       client.app.add_route('/', CORSHeaderResource())

tests/test_cors_middleware.py:224: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c2d09e0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c074820>, 'CHECK...4820>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c074820>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CORSHeaderResource.on_delete of <test_cors_middleware.CORSHeaderResource object at 0x7fd638f3abf0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ TestCustomCorsMiddleware.test_allow_origin_allow_credential[asgi] _______

self = <test_cors_middleware.TestCustomCorsMiddleware object at 0x7fd5fd36ee00>
make_cors_client = <function make_cors_client.<locals>.make at 0x7fd73c074940>

    def test_allow_origin_allow_credential(self, make_cors_client):
        client = make_cors_client(
            falcon.CORSMiddleware(allow_origins='test', allow_credentials='*')
        )
>       client.app.add_route('/', CORSHeaderResource())

tests/test_cors_middleware.py:197: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c197a00>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c0756c0>, 'CHECK...56c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c0756c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CORSHeaderResource.on_delete of <test_cors_middleware.CORSHeaderResource object at 0x7fd638f73430>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________ TestCustomCorsMiddleware.test_expose_headers[asgi-foo-foo] __________

self = <test_cors_middleware.TestCustomCorsMiddleware object at 0x7fd5fd36f490>
make_cors_client = <function make_cors_client.<locals>.make at 0x7fd73c076560>
attr = 'foo', exp = 'foo'

    @pytest.mark.parametrize(
        'attr, exp',
        (
            ('foo', 'foo'),
            ('foo, bar', 'foo, bar'),
            (['foo', 'bar'], 'foo, bar'),
        ),
    )
    def test_expose_headers(self, make_cors_client, attr, exp):
        client = make_cors_client(
            falcon.CORSMiddleware(expose_headers=attr, allow_credentials=None)
        )
>       client.app.add_route('/', CORSHeaderResource())

tests/test_cors_middleware.py:224: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c50d7e0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c075360>, 'CHECK...5360>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c075360>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CORSHeaderResource.on_delete of <test_cors_middleware.CORSHeaderResource object at 0x7fd73c170fd0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____ TestCustomCorsMiddleware.test_allow_credential_existing_origin[asgi] _____

self = <test_cors_middleware.TestCustomCorsMiddleware object at 0x7fd5fd36ea40>
make_cors_client = <function make_cors_client.<locals>.make at 0x7fd73c074550>

    def test_allow_credential_existing_origin(self, make_cors_client):
        client = make_cors_client(falcon.CORSMiddleware(allow_credentials='*'))
>       client.app.add_route('/', CORSHeaderResource())

tests/test_cors_middleware.py:186: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c50e880>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c0749d0>, 'CHECK...49d0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c0749d0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CORSHeaderResource.on_delete of <test_cors_middleware.CORSHeaderResource object at 0x7fd638e8b400>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestCustomCorsMiddleware.test_allow_credential_list_or_str[asgi-allow0-successOrigin0] _

self = <test_cors_middleware.TestCustomCorsMiddleware object at 0x7fd5fd36eb90>
make_cors_client = <function make_cors_client.<locals>.make at 0x7fd73c075b40>
allow = ['foo', 'bar'], successOrigin = ['foo', 'bar']

    @pytest.mark.parametrize(
        'allow, successOrigin',
        (
            (['foo', 'bar'], ['foo', 'bar']),
            ('foo', ['foo']),
        ),
    )
    def test_allow_credential_list_or_str(self, make_cors_client, allow, successOrigin):
        client = make_cors_client(falcon.CORSMiddleware(allow_credentials=allow))
>       client.app.add_route('/', CORSHeaderResource())

tests/test_cors_middleware.py:168: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c50d0e0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c076dd0>, 'CHECK...6dd0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c076dd0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CORSHeaderResource.on_delete of <test_cors_middleware.CORSHeaderResource object at 0x7fd73c46c310>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestCustomCorsMiddleware.test_allow_credential_list_or_str[asgi-foo-successOrigin1] _

self = <test_cors_middleware.TestCustomCorsMiddleware object at 0x7fd5fd36ebf0>
make_cors_client = <function make_cors_client.<locals>.make at 0x7fd73c097880>
allow = 'foo', successOrigin = ['foo']

    @pytest.mark.parametrize(
        'allow, successOrigin',
        (
            (['foo', 'bar'], ['foo', 'bar']),
            ('foo', ['foo']),
        ),
    )
    def test_allow_credential_list_or_str(self, make_cors_client, allow, successOrigin):
        client = make_cors_client(falcon.CORSMiddleware(allow_credentials=allow))
>       client.app.add_route('/', CORSHeaderResource())

tests/test_cors_middleware.py:168: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c50d150>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c0953f0>, 'CHECK...53f0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c0953f0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CORSHeaderResource.on_delete of <test_cors_middleware.CORSHeaderResource object at 0x7fd638d8c6d0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestCustomCorsMiddleware.test_allow_origin[asgi-*-fail_origins0-success_origins0] _

self = <test_cors_middleware.TestCustomCorsMiddleware object at 0x7fd5fd36e440>
make_cors_client = <function make_cors_client.<locals>.make at 0x7fd73c095bd0>
allow = '*', fail_origins = [None], success_origins = ['foo', 'bar']

    @pytest.mark.parametrize(
        'allow, fail_origins, success_origins',
        (
            ('*', [None], ['foo', 'bar']),
            ('test', ['other', 'Test', 'TEST'], ['test']),
            (
                ['foo', 'bar'],
                ['foo, bar', 'foobar', 'foo,bar', 'Foo', 'BAR'],
                ['foo', 'bar'],
            ),
        ),
    )
    def test_allow_origin(self, make_cors_client, allow, fail_origins, success_origins):
        client = make_cors_client(falcon.CORSMiddleware(allow_origins=allow))
>       client.app.add_route('/', CORSHeaderResource())

tests/test_cors_middleware.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c2d0dd0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c097be0>, 'CHECK...7be0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c097be0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CORSHeaderResource.on_delete of <test_cors_middleware.CORSHeaderResource object at 0x7fd73c0481c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____ TestCustomCorsMiddleware.test_expose_headers[asgi-foo, bar-foo, bar] _____

self = <test_cors_middleware.TestCustomCorsMiddleware object at 0x7fd5fd36f520>
make_cors_client = <function make_cors_client.<locals>.make at 0x7fd73c0960e0>
attr = 'foo, bar', exp = 'foo, bar'

    @pytest.mark.parametrize(
        'attr, exp',
        (
            ('foo', 'foo'),
            ('foo, bar', 'foo, bar'),
            (['foo', 'bar'], 'foo, bar'),
        ),
    )
    def test_expose_headers(self, make_cors_client, attr, exp):
        client = make_cors_client(
            falcon.CORSMiddleware(expose_headers=attr, allow_credentials=None)
        )
>       client.app.add_route('/', CORSHeaderResource())

tests/test_cors_middleware.py:224: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c2d0970>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c0969e0>, 'CHECK...69e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c0969e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CORSHeaderResource.on_delete of <test_cors_middleware.CORSHeaderResource object at 0x7fd73c1a8760>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestCorsMiddleware.test_enabled_cors_handles_preflighting_no_headers_in_req[asgi] _

self = <test_cors_middleware.TestCorsMiddleware object at 0x7fd5fd36dd20>
cors_client = <falcon.testing.client.TestClient object at 0x7fd73ab02320>

    def test_enabled_cors_handles_preflighting_no_headers_in_req(self, cors_client):
>       cors_client.app.add_route('/', CORSHeaderResource())

tests/test_cors_middleware.py:86: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c197680>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c077130>, 'CHECK...7130>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c077130>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CORSHeaderResource.on_delete of <test_cors_middleware.CORSHeaderResource object at 0x7fd73ab01570>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________ TestCorsMiddleware.test_enabled_cors_no_origin[asgi] _____________

self = <test_cors_middleware.TestCorsMiddleware object at 0x7fd5fd36d330>
client = <falcon.testing.client.TestClient object at 0x7fd73bc60550>

    def test_enabled_cors_no_origin(self, client):
>       client.app.add_route('/', CORSHeaderResource())

tests/test_cors_middleware.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c47ee30>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c0768c0>, 'CHECK...68c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c0768c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CORSHeaderResource.on_delete of <test_cors_middleware.CORSHeaderResource object at 0x7fd73bc60640>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______ TestCorsMiddleware.test_enabled_cors_handles_preflighting[asgi] ________

self = <test_cors_middleware.TestCorsMiddleware object at 0x7fd5fd36dab0>
cors_client = <falcon.testing.client.TestClient object at 0x7fd638f9f850>

    def test_enabled_cors_handles_preflighting(self, cors_client):
>       cors_client.app.add_route('/', CORSHeaderResource())

tests/test_cors_middleware.py:68: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c1952a0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c075000>, 'CHECK...5000>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c075000>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CORSHeaderResource.on_delete of <test_cors_middleware.CORSHeaderResource object at 0x7fd638f9fe20>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestCorsMiddleware.test_enabled_cors_should_accept_all_origins_requests[asgi] _

self = <test_cors_middleware.TestCorsMiddleware object at 0x7fd5fd36d840>
cors_client = <falcon.testing.client.TestClient object at 0x7fd73c4965f0>

    def test_enabled_cors_should_accept_all_origins_requests(self, cors_client):
>       cors_client.app.add_route('/', CORSHeaderResource())

tests/test_cors_middleware.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c197a70>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c074160>, 'CHECK...4160>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c074160>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CORSHeaderResource.on_delete of <test_cors_middleware.CORSHeaderResource object at 0x7fd73c4975e0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestCorsMiddleware.test_enabled_cors_should_add_extra_headers_on_response[asgi] _

self = <test_cors_middleware.TestCorsMiddleware object at 0x7fd5fd36d5d0>
cors_client = <falcon.testing.client.TestClient object at 0x7fd5e9b6c400>

    def test_enabled_cors_should_add_extra_headers_on_response(self, cors_client):
>       cors_client.app.add_route('/', CORSHeaderResource())

tests/test_cors_middleware.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c0582e0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c074a60>, 'CHECK...4a60>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c074a60>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CORSHeaderResource.on_delete of <test_cors_middleware.CORSHeaderResource object at 0x7fd5fd246e30>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestCorsMiddleware.test_disabled_cors_should_not_add_any_extra_headers[asgi] _

self = <test_cors_middleware.TestCorsMiddleware object at 0x7fd5fd36d2d0>
client = <falcon.testing.client.TestClient object at 0x7fd73c04ace0>

    def test_disabled_cors_should_not_add_any_extra_headers(self, client):
>       client.app.add_route('/', CORSHeaderResource())

tests/test_cors_middleware.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c0585f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c0764d0>, 'CHECK...64d0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c0764d0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CORSHeaderResource.on_delete of <test_cors_middleware.CORSHeaderResource object at 0x7fd73c049090>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__ TestRequestTimeMiddleware.test_response_middleware_raises_exception[asgi] ___

self = <test_middleware.TestRequestTimeMiddleware object at 0x7fd5fcd15600>
asgi = True

    def test_response_middleware_raises_exception(self, asgi):
        """Test that error in response middleware is propagated up"""
    
        class RaiseErrorMiddleware:
            def process_response(self, req, resp, resource):
                raise Exception('Always fail')
    
>       app = create_app(asgi, middleware=[RaiseErrorMiddleware()])

tests/test_middleware.py:220: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:274: in __init__
    self.add_middleware(middleware)
falcon/app.py:491: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.TestRequestTimeMiddleware.test_response_middleware_raises_exception.<locals>.RaiseErrorMiddleware object at 0x7fd638ea64a0>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method TestRequestTimeMiddleware.test_response_middleware_raises_exception.<locals>.RaiseErrorMiddleware.process_response of <test_middleware.TestRequestTimeMiddleware.test_response_middleware_raises_exception.<locals>.RaiseErrorMiddleware object at 0x7fd638ea64a0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
__________ TestRequestTimeMiddleware.test_log_get_request[asgi-False] __________

self = <test_middleware.TestRequestTimeMiddleware object at 0x7fd5fcd15c90>
independent_middleware = False, asgi = True

    @pytest.mark.parametrize('independent_middleware', [True, False])
    def test_log_get_request(self, independent_middleware, asgi):
        """Test that Log middleware is executed"""
        global context
        app = create_app(
            asgi,
            middleware=[RequestTimeMiddleware()],
            independent_middleware=independent_middleware,
        )
    
>       app.add_route(TEST_ROUTE, MiddlewareClassResource())

tests/test_middleware.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c06ece0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c097c70>, 'CHECK...7c70>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c097c70>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method MiddlewareClassResource.on_get of <test_middleware.MiddlewareClassResource object at 0x7fd73c469990>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________ TestRequestTimeMiddleware.test_skip_process_resource[asgi] __________

self = <test_middleware.TestRequestTimeMiddleware object at 0x7fd5fcd15360>
asgi = True

    def test_skip_process_resource(self, asgi):
        global context
        app = create_app(asgi, middleware=[RequestTimeMiddleware()])
    
>       app.add_route('/', MiddlewareClassResource())

tests/test_middleware.py:184: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c06fae0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c077f40>, 'CHECK...7f40>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c077f40>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method MiddlewareClassResource.on_get of <test_middleware.MiddlewareClassResource object at 0x7fd73bef8250>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________ TestRequestTimeMiddleware.test_log_get_request[asgi-True] ___________

self = <test_middleware.TestRequestTimeMiddleware object at 0x7fd5fcd15bd0>
independent_middleware = True, asgi = True

    @pytest.mark.parametrize('independent_middleware', [True, False])
    def test_log_get_request(self, independent_middleware, asgi):
        """Test that Log middleware is executed"""
        global context
        app = create_app(
            asgi,
            middleware=[RequestTimeMiddleware()],
            independent_middleware=independent_middleware,
        )
    
>       app.add_route(TEST_ROUTE, MiddlewareClassResource())

tests/test_middleware.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c058900>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c0764d0>, 'CHECK...64d0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c0764d0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method MiddlewareClassResource.on_get of <test_middleware.MiddlewareClassResource object at 0x7fd73c46a4a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ TestResourceMiddleware.test_can_access_resource_params[asgi-True] _______

self = <test_middleware.TestResourceMiddleware object at 0x7fd5fcd410c0>
asgi = True, independent_middleware = True

    @pytest.mark.parametrize('independent_middleware', [True, False])
    def test_can_access_resource_params(self, asgi, independent_middleware):
        """Test that params can be accessed from within process_resource"""
        global context
    
        class Resource:
            def on_get(self, req, resp, **params):
                resp.text = json.dumps(params)
    
>       app = create_app(
            asgi,
            middleware=AccessParamsMiddleware(),
            independent_middleware=independent_middleware,
        )

tests/test_middleware.py:845: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:274: in __init__
    self.add_middleware(middleware)
falcon/app.py:491: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.AccessParamsMiddleware object at 0x7fd73bd20610>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method AccessParamsMiddleware.process_resource of <test_middleware.AccessParamsMiddleware object at 0x7fd73bd20610>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
______ TestResourceMiddleware.test_can_access_resource_params[asgi-False] ______

self = <test_middleware.TestResourceMiddleware object at 0x7fd5fcd411b0>
asgi = True, independent_middleware = False

    @pytest.mark.parametrize('independent_middleware', [True, False])
    def test_can_access_resource_params(self, asgi, independent_middleware):
        """Test that params can be accessed from within process_resource"""
        global context
    
        class Resource:
            def on_get(self, req, resp, **params):
                resp.text = json.dumps(params)
    
>       app = create_app(
            asgi,
            middleware=AccessParamsMiddleware(),
            independent_middleware=independent_middleware,
        )

tests/test_middleware.py:845: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:274: in __init__
    self.add_middleware(middleware)
falcon/app.py:491: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.AccessParamsMiddleware object at 0x7fd638ee57b0>]
independent_middleware = False, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method AccessParamsMiddleware.process_resource of <test_middleware.AccessParamsMiddleware object at 0x7fd638ee57b0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
____ TestTransactionIdMiddleware.test_generate_trans_id_with_request[asgi] _____

self = <test_middleware.TestTransactionIdMiddleware object at 0x7fd5fcd160e0>
asgi = True

    def test_generate_trans_id_with_request(self, asgi):
        """Test that TransactionIdmiddleware is executed"""
        global context
    
        middleware = (
            TransactionIdMiddlewareAsync() if asgi else TransactionIdMiddleware()
        )
        app = create_app(asgi, middleware=middleware)
    
>       app.add_route(TEST_ROUTE, MiddlewareClassResource())

tests/test_middleware.py:268: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c196ab0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c074430>, 'CHECK...4430>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c074430>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method MiddlewareClassResource.on_get of <test_middleware.MiddlewareClassResource object at 0x7fd73bd23e80>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestCORSMiddlewareWithAnotherMiddleware.test_api_initialization_with_cors_enabled_and_middleware_param[asgi-mw1-True] _

self = <test_middleware.TestCORSMiddlewareWithAnotherMiddleware object at 0x7fd5fcd43040>
mw = [<test_middleware.CaptureResponseMiddleware object at 0x7fd5fcd14370>]
asgi = True, allowed = True

    @pytest.mark.parametrize(
        'mw,allowed',
        [
            (CaptureResponseMiddleware(), True),
            ([CaptureResponseMiddleware()], True),
            ((CaptureResponseMiddleware(),), True),
            (iter([CaptureResponseMiddleware()]), True),
            (falcon.CORSMiddleware(), False),
            ([falcon.CORSMiddleware()], False),
        ],
    )
    def test_api_initialization_with_cors_enabled_and_middleware_param(
        self, mw, asgi, allowed
    ):
        if allowed:
>           app = create_app(asgi, middleware=mw, cors_enable=True)

tests/test_middleware.py:1017: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:274: in __init__
    self.add_middleware(middleware)
falcon/app.py:491: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.CaptureResponseMiddleware object at 0x7fd5fcd14370>, <falcon.middleware.CORSMiddleware object at 0x7fd73bed5810>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method CaptureResponseMiddleware.process_response of <test_middleware.CaptureResponseMiddleware object at 0x7fd5fcd14370>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_ TestCORSMiddlewareWithAnotherMiddleware.test_api_initialization_with_cors_enabled_and_middleware_param[asgi-mw2-True] _

self = <test_middleware.TestCORSMiddlewareWithAnotherMiddleware object at 0x7fd5fcd430d0>
mw = (<test_middleware.CaptureResponseMiddleware object at 0x7fd5fcd14490>,)
asgi = True, allowed = True

    @pytest.mark.parametrize(
        'mw,allowed',
        [
            (CaptureResponseMiddleware(), True),
            ([CaptureResponseMiddleware()], True),
            ((CaptureResponseMiddleware(),), True),
            (iter([CaptureResponseMiddleware()]), True),
            (falcon.CORSMiddleware(), False),
            ([falcon.CORSMiddleware()], False),
        ],
    )
    def test_api_initialization_with_cors_enabled_and_middleware_param(
        self, mw, asgi, allowed
    ):
        if allowed:
>           app = create_app(asgi, middleware=mw, cors_enable=True)

tests/test_middleware.py:1017: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:274: in __init__
    self.add_middleware(middleware)
falcon/app.py:491: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.CaptureResponseMiddleware object at 0x7fd5fcd14490>, <falcon.middleware.CORSMiddleware object at 0x7fd73bed6cb0>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method CaptureResponseMiddleware.process_response of <test_middleware.CaptureResponseMiddleware object at 0x7fd5fcd14490>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_ TestCORSMiddlewareWithAnotherMiddleware.test_api_initialization_with_cors_enabled_and_middleware_param[asgi-mw0-True] _

self = <test_middleware.TestCORSMiddlewareWithAnotherMiddleware object at 0x7fd5fcd42fb0>
mw = <test_middleware.CaptureResponseMiddleware object at 0x7fd5fcd14130>
asgi = True, allowed = True

    @pytest.mark.parametrize(
        'mw,allowed',
        [
            (CaptureResponseMiddleware(), True),
            ([CaptureResponseMiddleware()], True),
            ((CaptureResponseMiddleware(),), True),
            (iter([CaptureResponseMiddleware()]), True),
            (falcon.CORSMiddleware(), False),
            ([falcon.CORSMiddleware()], False),
        ],
    )
    def test_api_initialization_with_cors_enabled_and_middleware_param(
        self, mw, asgi, allowed
    ):
        if allowed:
>           app = create_app(asgi, middleware=mw, cors_enable=True)

tests/test_middleware.py:1017: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:274: in __init__
    self.add_middleware(middleware)
falcon/app.py:491: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.CaptureResponseMiddleware object at 0x7fd5fcd14130>, <falcon.middleware.CORSMiddleware object at 0x7fd73c4bb850>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method CaptureResponseMiddleware.process_response of <test_middleware.CaptureResponseMiddleware object at 0x7fd5fcd14130>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_ TestCORSMiddlewareWithAnotherMiddleware.test_api_initialization_with_cors_enabled_and_middleware_param[asgi-mw3-True] _

self = <test_middleware.TestCORSMiddlewareWithAnotherMiddleware object at 0x7fd5fcd43160>
mw = <list_iterator object at 0x7fd5fcd14640>, asgi = True, allowed = True

    @pytest.mark.parametrize(
        'mw,allowed',
        [
            (CaptureResponseMiddleware(), True),
            ([CaptureResponseMiddleware()], True),
            ((CaptureResponseMiddleware(),), True),
            (iter([CaptureResponseMiddleware()]), True),
            (falcon.CORSMiddleware(), False),
            ([falcon.CORSMiddleware()], False),
        ],
    )
    def test_api_initialization_with_cors_enabled_and_middleware_param(
        self, mw, asgi, allowed
    ):
        if allowed:
            app = create_app(asgi, middleware=mw, cors_enable=True)
>           app.add_route('/', TestCorsResource())

tests/test_middleware.py:1018: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c05c200>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c076320>, 'CHECK...6320>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c076320>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestCorsResource.on_get of <test_middleware.TestCorsResource object at 0x7fd73bc624a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ TestErrorHandling.test_http_status_raised_from_error_handler[asgi] ______

self = <test_middleware.TestErrorHandling object at 0x7fd5fcd41b10>, asgi = True

    def test_http_status_raised_from_error_handler(self, asgi):
        mw = CaptureResponseMiddleware()
>       app = create_app(asgi, middleware=mw)

tests/test_middleware.py:895: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:274: in __init__
    self.add_middleware(middleware)
falcon/app.py:491: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.CaptureResponseMiddleware object at 0x7fd73c4963e0>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method CaptureResponseMiddleware.process_response of <test_middleware.CaptureResponseMiddleware object at 0x7fd73c4963e0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
__ TestErrorHandling.test_error_composed_before_resp_middleware_called[asgi] ___

self = <test_middleware.TestErrorHandling object at 0x7fd5fcd41b70>, asgi = True

    def test_error_composed_before_resp_middleware_called(self, asgi):
        mw = CaptureResponseMiddleware()
>       app = create_app(asgi, middleware=mw)

tests/test_middleware.py:875: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:274: in __init__
    self.add_middleware(middleware)
falcon/app.py:491: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.CaptureResponseMiddleware object at 0x7fd73c496c50>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method CaptureResponseMiddleware.process_response of <test_middleware.CaptureResponseMiddleware object at 0x7fd73c496c50>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
____ TestEmptySignatureMiddleware.test_dont_need_params_in_signature[asgi] _____

self = <test_middleware.TestEmptySignatureMiddleware object at 0x7fd5fcd41600>
asgi = True

    def test_dont_need_params_in_signature(self, asgi):
        """
        Verify that we don't need parameters in the process_* signatures (for
        side-effect-only middlewares, mostly). Makes no difference on py27
        but does affect py36.
    
        https://github.com/falconry/falcon/issues/1254
        """
>       create_app(asgi, middleware=EmptySignatureMiddleware())

tests/test_middleware.py:869: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:274: in __init__
    self.add_middleware(middleware)
falcon/app.py:491: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.EmptySignatureMiddleware object at 0x7fd73c4945b0>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method EmptySignatureMiddleware.process_request of <test_middleware.EmptySignatureMiddleware object at 0x7fd73c4945b0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_________ TestShortCircuiting.test_process_resource_cached[asgi-True] __________

self = <test_middleware.TestShortCircuiting object at 0x7fd5fcd428c0>
asgi = True, independent_middleware = True

    @pytest.mark.parametrize('independent_middleware', [True, False])
    def test_process_resource_cached(self, asgi, independent_middleware):
>       response = self._make_client(asgi, independent_middleware).simulate_get(
            '/cached/resource'
        )

tests/test_middleware.py:976: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_middleware.py:933: in _make_client
    app = create_app(
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:274: in __init__
    self.add_middleware(middleware)
falcon/app.py:491: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.RequestTimeMiddleware object at 0x7fd73c10a7d0>, <test_middleware.ResponseCacheMiddlware object at 0x7fd73c10aa10>, <test_middleware.TransactionIdMiddleware object at 0x7fd73c109cc0>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ResponseCacheMiddlware.process_request of <test_middleware.ResponseCacheMiddlware object at 0x7fd73c10aa10>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_________ TestShortCircuiting.test_process_resource_cached[asgi-False] _________

self = <test_middleware.TestShortCircuiting object at 0x7fd5fcd428f0>
asgi = True, independent_middleware = False

    @pytest.mark.parametrize('independent_middleware', [True, False])
    def test_process_resource_cached(self, asgi, independent_middleware):
>       response = self._make_client(asgi, independent_middleware).simulate_get(
            '/cached/resource'
        )

tests/test_middleware.py:976: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_middleware.py:933: in _make_client
    app = create_app(
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:274: in __init__
    self.add_middleware(middleware)
falcon/app.py:491: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.RequestTimeMiddleware object at 0x7fd73c58f190>, <test_middleware.ResponseCacheMiddlware object at 0x7fd73c58f730>, <test_middleware.TransactionIdMiddleware object at 0x7fd73c58d7b0>]
independent_middleware = False, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ResponseCacheMiddlware.process_request of <test_middleware.ResponseCacheMiddlware object at 0x7fd73c58f730>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
__________ TestShortCircuiting.test_process_request_cached[asgi-True] __________

self = <test_middleware.TestShortCircuiting object at 0x7fd5fcd424d0>
asgi = True, independent_middleware = True

    @pytest.mark.parametrize('independent_middleware', [True, False])
    def test_process_request_cached(self, asgi, independent_middleware):
>       response = self._make_client(asgi, independent_middleware).simulate_get(
            '/cached'
        )

tests/test_middleware.py:953: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_middleware.py:933: in _make_client
    app = create_app(
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:274: in __init__
    self.add_middleware(middleware)
falcon/app.py:491: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.RequestTimeMiddleware object at 0x7fd638fb5510>, <test_middleware.ResponseCacheMiddlware object at 0x7fd638fb77c0>, <test_middleware.TransactionIdMiddleware object at 0x7fd638fb7670>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ResponseCacheMiddlware.process_request of <test_middleware.ResponseCacheMiddlware object at 0x7fd638fb77c0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_________ TestShortCircuiting.test_process_request_cached[asgi-False] __________

self = <test_middleware.TestShortCircuiting object at 0x7fd5fcd42590>
asgi = True, independent_middleware = False

    @pytest.mark.parametrize('independent_middleware', [True, False])
    def test_process_request_cached(self, asgi, independent_middleware):
>       response = self._make_client(asgi, independent_middleware).simulate_get(
            '/cached'
        )

tests/test_middleware.py:953: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_middleware.py:933: in _make_client
    app = create_app(
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:274: in __init__
    self.add_middleware(middleware)
falcon/app.py:491: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.RequestTimeMiddleware object at 0x7fd73c10ba30>, <test_middleware.ResponseCacheMiddlware object at 0x7fd73c10ac80>, <test_middleware.TransactionIdMiddleware object at 0x7fd73c10b520>]
independent_middleware = False, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ResponseCacheMiddlware.process_request of <test_middleware.ResponseCacheMiddlware object at 0x7fd73c10ac80>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
__________ TestShortCircuiting.test_process_request_not_cached[asgi] ___________

self = <test_middleware.TestShortCircuiting object at 0x7fd5fcd40490>
asgi = True

    def test_process_request_not_cached(self, asgi):
>       response = self._make_client(asgi).simulate_get('/')

tests/test_middleware.py:943: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_middleware.py:933: in _make_client
    app = create_app(
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:274: in __init__
    self.add_middleware(middleware)
falcon/app.py:491: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.RequestTimeMiddleware object at 0x7fd73aa53f10>, <test_middleware.ResponseCacheMiddlware object at 0x7fd73aa52830>, <test_middleware.TransactionIdMiddleware object at 0x7fd73aa51bd0>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ResponseCacheMiddlware.process_request of <test_middleware.ResponseCacheMiddlware object at 0x7fd73aa52830>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
__ TestSeveralMiddlewares.test_order_mw_executed_when_exception_in_rsrc[asgi] __

self = <test_middleware.TestSeveralMiddlewares object at 0x7fd5fcd40220>
asgi = True

    def test_order_mw_executed_when_exception_in_rsrc(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        class RaiseErrorMiddleware:
            def process_resource(self, req, resp, resource):
                raise Exception('Always fail')
    
        class RaiseErrorMiddlewareAsync:
            # NOTE(kgriffs): The *_async postfix is not required in this
            #   case, but we include it to make sure it works as expected.
            async def process_resource_async(self, req, resp, resource):
                raise Exception('Always fail')
    
        rem = RaiseErrorMiddlewareAsync() if asgi else RaiseErrorMiddleware()
    
>       app = create_app(
            asgi, middleware=[ExecutedFirstMiddleware(), rem, ExecutedLastMiddleware()]
        )

tests/test_middleware.py:754: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:274: in __init__
    self.add_middleware(middleware)
falcon/app.py:491: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.ExecutedFirstMiddleware object at 0x7fd73aa69fc0>, <test_middleware.TestSeveralMiddlewares.test_orde...RaiseErrorMiddlewareAsync object at 0x7fd73aa6a680>, <test_middleware.ExecutedLastMiddleware object at 0x7fd73aa69780>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ExecutedFirstMiddleware.process_request of <test_middleware.ExecutedFirstMiddleware object at 0x7fd73aa69fc0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_________ TestSeveralMiddlewares.test_middleware_execution_order[asgi] _________

self = <test_middleware.TestSeveralMiddlewares object at 0x7fd5fcd16aa0>
asgi = True

    def test_middleware_execution_order(self, asgi):
        global context
>       app = create_app(
            asgi,
            independent_middleware=False,
            middleware=[ExecutedFirstMiddleware(), ExecutedLastMiddleware()],
        )

tests/test_middleware.py:338: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:274: in __init__
    self.add_middleware(middleware)
falcon/app.py:491: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.ExecutedFirstMiddleware object at 0x7fd73aa6a140>, <test_middleware.ExecutedLastMiddleware object at 0x7fd73aa68370>]
independent_middleware = False, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ExecutedFirstMiddleware.process_request of <test_middleware.ExecutedFirstMiddleware object at 0x7fd73aa6a140>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_ TestSeveralMiddlewares.test_inner_mw_throw_exception_while_processing_resp[asgi] _

self = <test_middleware.TestSeveralMiddlewares object at 0x7fd5fcd171f0>
asgi = True

    def test_inner_mw_throw_exception_while_processing_resp(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        class MyException(Exception):
            pass
    
        class RaiseErrorMiddleware:
            def process_response(self, req, resp, resource, req_succeeded):
                raise MyException('Always fail')
    
>       app = create_app(
            asgi,
            middleware=[
                TransactionIdMiddleware(),
                RequestTimeMiddleware(),
                RaiseErrorMiddleware(),
            ],
        )

tests/test_middleware.py:485: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:274: in __init__
    self.add_middleware(middleware)
falcon/app.py:491: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.TransactionIdMiddleware object at 0x7fd73aa51a20>, <test_middleware.RequestTimeMiddleware object at ...iddlewares.test_inner_mw_throw_exception_while_processing_resp.<locals>.RaiseErrorMiddleware object at 0x7fd73aa52b90>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method TransactionIdMiddleware.process_request of <test_middleware.TransactionIdMiddleware object at 0x7fd73aa51a20>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_ TestSeveralMiddlewares.test_order_independent_mw_executed_when_exception_in_rsrc[asgi] _

self = <test_middleware.TestSeveralMiddlewares object at 0x7fd5fcd402b0>
asgi = True

    def test_order_independent_mw_executed_when_exception_in_rsrc(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        class RaiseErrorMiddleware:
            def process_resource(self, req, resp, resource):
                raise Exception('Always fail')
    
        class RaiseErrorMiddlewareAsync:
            async def process_resource(self, req, resp, resource):
                raise Exception('Always fail')
    
        rem = RaiseErrorMiddlewareAsync() if asgi else RaiseErrorMiddleware()
    
>       app = create_app(
            asgi,
            independent_middleware=True,
            middleware=[ExecutedFirstMiddleware(), rem, ExecutedLastMiddleware()],
        )

tests/test_middleware.py:792: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:274: in __init__
    self.add_middleware(middleware)
falcon/app.py:491: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.ExecutedFirstMiddleware object at 0x7fd73bcf5900>, <test_middleware.TestSeveralMiddlewares.test_orde...RaiseErrorMiddlewareAsync object at 0x7fd73bcf6680>, <test_middleware.ExecutedLastMiddleware object at 0x7fd73bcf7640>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ExecutedFirstMiddleware.process_request of <test_middleware.ExecutedFirstMiddleware object at 0x7fd73bcf5900>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
__ TestSeveralMiddlewares.test_order_mw_executed_when_exception_in_resp[asgi] __

self = <test_middleware.TestSeveralMiddlewares object at 0x7fd5fcd17940>
asgi = True

    def test_order_mw_executed_when_exception_in_resp(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        class RaiseErrorMiddleware:
            def process_response(self, req, resp, resource):
                raise Exception('Always fail')
    
>       app = create_app(
            asgi,
            middleware=[
                ExecutedFirstMiddleware(),
                RaiseErrorMiddleware(),
                ExecutedLastMiddleware(),
            ],
        )

tests/test_middleware.py:595: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:274: in __init__
    self.add_middleware(middleware)
falcon/app.py:491: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.ExecutedFirstMiddleware object at 0x7fd73c4ba140>, <test_middleware.TestSeveralMiddlewares.test_orde...als>.RaiseErrorMiddleware object at 0x7fd73c4baaa0>, <test_middleware.ExecutedLastMiddleware object at 0x7fd73c4b9de0>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ExecutedFirstMiddleware.process_request of <test_middleware.ExecutedFirstMiddleware object at 0x7fd73c4ba140>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
____ TestSeveralMiddlewares.test_multiple_response_mw_throw_exception[asgi] ____

self = <test_middleware.TestSeveralMiddlewares object at 0x7fd5fcd16d10>
asgi = True

    def test_multiple_response_mw_throw_exception(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        context['req_succeeded'] = []
    
        class RaiseStatusMiddleware:
            def process_response(self, req, resp, resource, req_succeeded):
                raise falcon.HTTPStatus(falcon.HTTP_201)
    
        class RaiseErrorMiddleware:
            def process_response(self, req, resp, resource, req_succeeded):
                raise falcon.HTTPError(falcon.HTTP_748)
    
        class ProcessResponseMiddleware:
            def process_response(self, req, resp, resource, req_succeeded):
                context['executed_methods'].append('process_response')
                context['req_succeeded'].append(req_succeeded)
    
>       app = create_app(
            asgi,
            middleware=[
                ProcessResponseMiddleware(),
                RaiseErrorMiddleware(),
                ProcessResponseMiddleware(),
                RaiseStatusMiddleware(),
                ProcessResponseMiddleware(),
            ],
        )

tests/test_middleware.py:407: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:274: in __init__
    self.add_middleware(middleware)
falcon/app.py:491: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.TestSeveralMiddlewares.test_multiple_response_mw_throw_exception.<locals>.ProcessResponseMiddleware ...eralMiddlewares.test_multiple_response_mw_throw_exception.<locals>.ProcessResponseMiddleware object at 0x7fd73c4b9870>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method TestSeveralMiddlewares.test_multiple_response_mw_throw_exception.<locals>.ProcessResponseMiddleware.process_response of <test_middleware.TestSeveralMiddlewares.test_multiple_response_mw_throw_exception.<locals>.ProcessResponseMiddleware object at 0x7fd73c4ba9e0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
__ TestSeveralMiddlewares.test_inner_mw_with_ex_handler_throw_exception[asgi] __

self = <test_middleware.TestSeveralMiddlewares object at 0x7fd5fcd17460>
asgi = True

    def test_inner_mw_with_ex_handler_throw_exception(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        class RaiseErrorMiddleware:
            def process_request(self, req, resp, resource):
                raise Exception('Always fail')
    
>       app = create_app(
            asgi,
            middleware=[
                TransactionIdMiddleware(),
                RequestTimeMiddleware(),
                RaiseErrorMiddleware(),
            ],
        )

tests/test_middleware.py:527: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:274: in __init__
    self.add_middleware(middleware)
falcon/app.py:491: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.TransactionIdMiddleware object at 0x7fd638ec7a90>, <test_middleware.RequestTimeMiddleware object at ...veralMiddlewares.test_inner_mw_with_ex_handler_throw_exception.<locals>.RaiseErrorMiddleware object at 0x7fd638ec7d60>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method TransactionIdMiddleware.process_request of <test_middleware.TransactionIdMiddleware object at 0x7fd638ec7a90>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
__ TestSeveralMiddlewares.test_order_mw_executed_when_exception_in_req[asgi] ___

self = <test_middleware.TestSeveralMiddlewares object at 0x7fd5fcd17df0>
asgi = True

    def test_order_mw_executed_when_exception_in_req(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        class RaiseErrorMiddleware:
            def process_request(self, req, resp):
                raise Exception('Always fail')
    
        class RaiseErrorMiddlewareAsync:
            async def process_request(self, req, resp):
                raise Exception('Always fail')
    
        rem = RaiseErrorMiddlewareAsync() if asgi else RaiseErrorMiddleware()
    
>       app = create_app(
            asgi, middleware=[ExecutedFirstMiddleware(), rem, ExecutedLastMiddleware()]
        )

tests/test_middleware.py:678: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:274: in __init__
    self.add_middleware(middleware)
falcon/app.py:491: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.ExecutedFirstMiddleware object at 0x7fd73c58f130>, <test_middleware.TestSeveralMiddlewares.test_orde...RaiseErrorMiddlewareAsync object at 0x7fd73c58f070>, <test_middleware.ExecutedLastMiddleware object at 0x7fd73c58e350>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ExecutedFirstMiddleware.process_request of <test_middleware.ExecutedFirstMiddleware object at 0x7fd73c58f130>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_ TestSeveralMiddlewares.test_order_independent_mw_executed_when_exception_in_resp[asgi] _

self = <test_middleware.TestSeveralMiddlewares object at 0x7fd5fcd17bb0>
asgi = True

    def test_order_independent_mw_executed_when_exception_in_resp(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        class RaiseErrorMiddleware:
            def process_response(self, req, resp, resource):
                raise Exception('Always fail')
    
>       app = create_app(
            asgi,
            independent_middleware=True,
            middleware=[
                ExecutedFirstMiddleware(),
                RaiseErrorMiddleware(),
                ExecutedLastMiddleware(),
            ],
        )

tests/test_middleware.py:633: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:274: in __init__
    self.add_middleware(middleware)
falcon/app.py:491: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.ExecutedFirstMiddleware object at 0x7fd73c4b8820>, <test_middleware.TestSeveralMiddlewares.test_orde...als>.RaiseErrorMiddleware object at 0x7fd73c4b9330>, <test_middleware.ExecutedLastMiddleware object at 0x7fd73c4ba3e0>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ExecutedFirstMiddleware.process_request of <test_middleware.ExecutedFirstMiddleware object at 0x7fd73c4b8820>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
__________ TestSeveralMiddlewares.test_inner_mw_throw_exception[asgi] __________

self = <test_middleware.TestSeveralMiddlewares object at 0x7fd5fcd16f80>
asgi = True

    def test_inner_mw_throw_exception(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        class MyException(Exception):
            pass
    
        class RaiseErrorMiddleware:
            def process_request(self, req, resp):
                raise MyException('Always fail')
    
>       app = create_app(
            asgi,
            middleware=[
                TransactionIdMiddleware(),
                RequestTimeMiddleware(),
                RaiseErrorMiddleware(),
            ],
        )

tests/test_middleware.py:440: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:274: in __init__
    self.add_middleware(middleware)
falcon/app.py:491: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.TransactionIdMiddleware object at 0x7fd6391057e0>, <test_middleware.RequestTimeMiddleware object at ...iddleware.TestSeveralMiddlewares.test_inner_mw_throw_exception.<locals>.RaiseErrorMiddleware object at 0x7fd639105720>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method TransactionIdMiddleware.process_request of <test_middleware.TransactionIdMiddleware object at 0x7fd6391057e0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
___ TestSeveralMiddlewares.test_independent_middleware_execution_order[asgi] ___

self = <test_middleware.TestSeveralMiddlewares object at 0x7fd5fcd15ab0>
asgi = True

    def test_independent_middleware_execution_order(self, asgi):
        global context
>       app = create_app(
            asgi,
            independent_middleware=True,
            middleware=[ExecutedFirstMiddleware(), ExecutedLastMiddleware()],
        )

tests/test_middleware.py:364: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:274: in __init__
    self.add_middleware(middleware)
falcon/app.py:491: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.ExecutedFirstMiddleware object at 0x7fd73c128a90>, <test_middleware.ExecutedLastMiddleware object at 0x7fd73c12a1d0>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ExecutedFirstMiddleware.process_request of <test_middleware.ExecutedFirstMiddleware object at 0x7fd73c128a90>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_ TestSeveralMiddlewares.test_legacy_middleware_called_with_correct_args[asgi] _

self = <test_middleware.TestSeveralMiddlewares object at 0x7fd5fcd16860>
asgi = True

    def test_legacy_middleware_called_with_correct_args(self, asgi):
        global context
>       app = create_app(asgi, middleware=[ExecutedFirstMiddleware()])

tests/test_middleware.py:327: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:274: in __init__
    self.add_middleware(middleware)
falcon/app.py:491: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.ExecutedFirstMiddleware object at 0x7fd638ec71c0>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ExecutedFirstMiddleware.process_request of <test_middleware.ExecutedFirstMiddleware object at 0x7fd638ec71c0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_ TestSeveralMiddlewares.test_generate_trans_id_and_time_with_request[asgi-False] _

self = <test_middleware.TestSeveralMiddlewares object at 0x7fd5fcd168c0>
independent_middleware = False, asgi = True

    @pytest.mark.parametrize('independent_middleware', [True, False])
    def test_generate_trans_id_and_time_with_request(
        self, independent_middleware, asgi
    ):
        # NOTE(kgriffs): We test both so that we can cover the code paths
        # where only a single middleware method is implemented by a
        # component.
        creq = CaptureRequestMiddleware()
        cresp = CaptureResponseMiddleware()
    
        global context
>       app = create_app(
            asgi,
            independent_middleware=independent_middleware,
            # NOTE(kgriffs): Pass as a generic iterable to verify that works.
            middleware=iter(
                [
                    TransactionIdMiddleware(),
                    RequestTimeMiddleware(),
                ]
            ),
        )

tests/test_middleware.py:290: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:274: in __init__
    self.add_middleware(middleware)
falcon/app.py:491: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.TransactionIdMiddleware object at 0x7fd638ee62c0>, <test_middleware.RequestTimeMiddleware object at 0x7fd638ee42b0>]
independent_middleware = False, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method TransactionIdMiddleware.process_request of <test_middleware.TransactionIdMiddleware object at 0x7fd638ee62c0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_ TestSeveralMiddlewares.test_generate_trans_id_and_time_with_request[asgi-True] _

self = <test_middleware.TestSeveralMiddlewares object at 0x7fd5fcd167d0>
independent_middleware = True, asgi = True

    @pytest.mark.parametrize('independent_middleware', [True, False])
    def test_generate_trans_id_and_time_with_request(
        self, independent_middleware, asgi
    ):
        # NOTE(kgriffs): We test both so that we can cover the code paths
        # where only a single middleware method is implemented by a
        # component.
        creq = CaptureRequestMiddleware()
        cresp = CaptureResponseMiddleware()
    
        global context
>       app = create_app(
            asgi,
            independent_middleware=independent_middleware,
            # NOTE(kgriffs): Pass as a generic iterable to verify that works.
            middleware=iter(
                [
                    TransactionIdMiddleware(),
                    RequestTimeMiddleware(),
                ]
            ),
        )

tests/test_middleware.py:290: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:274: in __init__
    self.add_middleware(middleware)
falcon/app.py:491: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.TransactionIdMiddleware object at 0x7fd73c46d330>, <test_middleware.RequestTimeMiddleware object at 0x7fd73c46f280>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method TransactionIdMiddleware.process_request of <test_middleware.TransactionIdMiddleware object at 0x7fd73c46d330>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
__ TestSeveralMiddlewares.test_outer_mw_with_ex_handler_throw_exception[asgi] __

self = <test_middleware.TestSeveralMiddlewares object at 0x7fd5fcd176d0>
asgi = True

    def test_outer_mw_with_ex_handler_throw_exception(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        class RaiseErrorMiddleware:
            def process_request(self, req, resp):
                raise Exception('Always fail')
    
>       app = create_app(
            asgi,
            middleware=[
                TransactionIdMiddleware(),
                RaiseErrorMiddleware(),
                RequestTimeMiddleware(),
            ],
        )

tests/test_middleware.py:561: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:274: in __init__
    self.add_middleware(middleware)
falcon/app.py:491: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.TransactionIdMiddleware object at 0x7fd73c4bb730>, <test_middleware.TestSeveralMiddlewares.test_oute...cals>.RaiseErrorMiddleware object at 0x7fd73c4b8d60>, <test_middleware.RequestTimeMiddleware object at 0x7fd73c4bbfd0>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method TransactionIdMiddleware.process_request of <test_middleware.TransactionIdMiddleware object at 0x7fd73c4bb730>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_ TestSeveralMiddlewares.test_order_independent_mw_executed_when_exception_in_req[asgi] _

self = <test_middleware.TestSeveralMiddlewares object at 0x7fd5fcd17e50>
asgi = True

    def test_order_independent_mw_executed_when_exception_in_req(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        class RaiseErrorMiddleware:
            def process_request(self, req, resp):
                raise Exception('Always fail')
    
        class RaiseErrorMiddlewareAsync:
            async def process_request(self, req, resp):
                raise Exception('Always fail')
    
        rem = RaiseErrorMiddlewareAsync() if asgi else RaiseErrorMiddleware()
    
>       app = create_app(
            asgi,
            independent_middleware=True,
            middleware=[ExecutedFirstMiddleware(), rem, ExecutedLastMiddleware()],
        )

tests/test_middleware.py:714: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:274: in __init__
    self.add_middleware(middleware)
falcon/app.py:491: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.ExecutedFirstMiddleware object at 0x7fd73c4b9960>, <test_middleware.TestSeveralMiddlewares.test_orde...RaiseErrorMiddlewareAsync object at 0x7fd73c4ba590>, <test_middleware.ExecutedLastMiddleware object at 0x7fd73c4b8820>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ExecutedFirstMiddleware.process_request of <test_middleware.ExecutedFirstMiddleware object at 0x7fd73c4b9960>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_ TestRemoveBasePathMiddleware.test_base_path_is_removed_before_routing[asgi] __

self = <test_middleware.TestRemoveBasePathMiddleware object at 0x7fd5fcd409a0>
asgi = True

    def test_base_path_is_removed_before_routing(self, asgi):
        """Test that RemoveBasePathMiddleware is executed before routing"""
>       app = create_app(asgi, middleware=RemoveBasePathMiddleware())

tests/test_middleware.py:822: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:274: in __init__
    self.add_middleware(middleware)
falcon/app.py:491: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.RemoveBasePathMiddleware object at 0x7fd638d96590>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method RemoveBasePathMiddleware.process_request of <test_middleware.RemoveBasePathMiddleware object at 0x7fd638d96590>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
____________________ test_wrapped_resource[asgi-resource0] _____________________

client = <falcon.testing.client.TestClient object at 0x7fd73c61fe80>
resource = <test_after_hooks.WrappedClassResource object at 0x7fd6092e8a30>

    @pytest.mark.parametrize(
        'resource', [WrappedClassResource(), WrappedClassResourceChild()]
    )
    def test_wrapped_resource(client, resource):
>       client.app.add_route('/wrapped', resource)

tests/test_after_hooks.py:293: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c0d7d10>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c221120>, 'CHECK...1120>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c221120>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method WrappedClassResource.on_get of <test_after_hooks.WrappedClassResource object at 0x7fd6092e8a30>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________ test_wrapped_resource_with_hooks_aware_of_resource[asgi] ___________

client = <falcon.testing.client.TestClient object at 0x7fd6390b2620>
wrapped_resource_aware = <test_after_hooks.ClassResourceWithAwareHooks object at 0x7fd6390b10f0>

    def test_wrapped_resource_with_hooks_aware_of_resource(client, wrapped_resource_aware):
>       client.app.add_route('/wrapped_aware', wrapped_resource_aware)

tests/test_after_hooks.py:319: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c2b0040>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c074dc0>, 'CHECK...4dc0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c074dc0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ClassResourceWithAwareHooks.on_get of <test_after_hooks.ClassResourceWithAwareHooks object at 0x7fd6390b10f0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________________ test_wrapped_resource[asgi-resource1] _____________________

client = <falcon.testing.client.TestClient object at 0x7fd73c22ace0>
resource = <test_after_hooks.WrappedClassResourceChild object at 0x7fd6092e9330>

    @pytest.mark.parametrize(
        'resource', [WrappedClassResource(), WrappedClassResourceChild()]
    )
    def test_wrapped_resource(client, resource):
>       client.app.add_route('/wrapped', resource)

tests/test_after_hooks.py:293: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c2b2030>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c2203a0>, 'CHECK...03a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c2203a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method WrappedClassResource.on_get of <test_after_hooks.WrappedClassResourceChild object at 0x7fd6092e9330>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ test_resource_with_uri_fields[asgi-resource1] _________________

client = <falcon.testing.client.TestClient object at 0x7fd73c204280>
resource = <test_after_hooks.ClassResourceWithURIFieldsChild object at 0x7fd6092e9210>

    @pytest.mark.parametrize(
        'resource', [ClassResourceWithURIFields(), ClassResourceWithURIFieldsChild()]
    )
    def test_resource_with_uri_fields(client, resource):
>       client.app.add_route('/{field1}/{field2}', resource)

tests/test_after_hooks.py:255: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c2b3370>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c096170>, 'CHECK...6170>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c096170>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ClassResourceWithURIFieldsChild.on_get of <test_after_hooks.ClassResourceWithURIFieldsChild object at 0x7fd6092e9210>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ test_resource_with_uri_fields[asgi-resource0] _________________

client = <falcon.testing.client.TestClient object at 0x7fd638d8cc10>
resource = <test_after_hooks.ClassResourceWithURIFields object at 0x7fd6092e9300>

    @pytest.mark.parametrize(
        'resource', [ClassResourceWithURIFields(), ClassResourceWithURIFieldsChild()]
    )
    def test_resource_with_uri_fields(client, resource):
>       client.app.add_route('/{field1}/{field2}', resource)

tests/test_after_hooks.py:255: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c05ef10>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c208040>, 'CHECK...8040>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c208040>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ClassResourceWithURIFields.on_get of <test_after_hooks.ClassResourceWithURIFields object at 0x7fd6092e9300>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________________ TestInspectApp.test_static_routes[asgi] ____________________

self = <test_inspect.TestInspectApp object at 0x7fd5fd0fa260>, asgi = True

    def test_static_routes(self, asgi):
>       routes = inspect.inspect_static_routes(make_app_async() if asgi else make_app())

tests/test_inspect.py:149: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_inspect.py:46: in make_app_async
    app.add_sink(i_f.sinkFn, '/sink_fn')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.asgi.app.App object at 0x7fd73c1fbd00>
sink = <function sinkFn at 0x7fd5fd0fcc10>, prefix = '/sink_fn'

    def add_sink(self, sink: Callable, prefix: SinkPrefix = r'/'):
        if not iscoroutinefunction(sink) and is_python_func(sink):
            if _should_wrap_non_coroutines():
                sink = wrap_sync_to_async(sink)
            else:
>               raise CompatibilityError(
                    'The sink method must be an awaitable coroutine function '
                    'in order to be used safely with an ASGI app.'
                )
E               falcon.errors.CompatibilityError: The sink method must be an awaitable coroutine function in order to be used safely with an ASGI app.

falcon/asgi/app.py:740: CompatibilityError
________________________ TestInspectApp.test_app[asgi] _________________________

self = <test_inspect.TestInspectApp object at 0x7fd5fd0f9ba0>, asgi = True

    def test_app(self, asgi):
>       ai = inspect.inspect_app(make_app_async() if asgi else make_app())

tests/test_inspect.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_inspect.py:46: in make_app_async
    app.add_sink(i_f.sinkFn, '/sink_fn')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.asgi.app.App object at 0x7fd73c1f90c0>
sink = <function sinkFn at 0x7fd5fd0fcc10>, prefix = '/sink_fn'

    def add_sink(self, sink: Callable, prefix: SinkPrefix = r'/'):
        if not iscoroutinefunction(sink) and is_python_func(sink):
            if _should_wrap_non_coroutines():
                sink = wrap_sync_to_async(sink)
            else:
>               raise CompatibilityError(
                    'The sink method must be an awaitable coroutine function '
                    'in order to be used safely with an ASGI app.'
                )
E               falcon.errors.CompatibilityError: The sink method must be an awaitable coroutine function in order to be used safely with an ASGI app.

falcon/asgi/app.py:740: CompatibilityError
________________________ TestInspectApp.test_sink[asgi] ________________________

self = <test_inspect.TestInspectApp object at 0x7fd5fd0bedd0>, asgi = True

    def test_sink(self, asgi):
>       sinks = inspect.inspect_sinks(make_app_async() if asgi else make_app())

tests/test_inspect.py:160: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_inspect.py:46: in make_app_async
    app.add_sink(i_f.sinkFn, '/sink_fn')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.asgi.app.App object at 0x7fd73c1fbe80>
sink = <function sinkFn at 0x7fd5fd0fcc10>, prefix = '/sink_fn'

    def add_sink(self, sink: Callable, prefix: SinkPrefix = r'/'):
        if not iscoroutinefunction(sink) and is_python_func(sink):
            if _should_wrap_non_coroutines():
                sink = wrap_sync_to_async(sink)
            else:
>               raise CompatibilityError(
                    'The sink method must be an awaitable coroutine function '
                    'in order to be used safely with an ASGI app.'
                )
E               falcon.errors.CompatibilityError: The sink method must be an awaitable coroutine function in order to be used safely with an ASGI app.

falcon/asgi/app.py:740: CompatibilityError
___________________ TestInspectApp.test_error_handler[asgi] ____________________

self = <test_inspect.TestInspectApp object at 0x7fd5fd047ca0>, asgi = True

    @pytest.mark.skipif(sys.version_info < (3, 6), reason='dict order is not stable')
    def test_error_handler(self, asgi):
        errors = inspect.inspect_error_handlers(
>           make_app_async() if asgi else make_app()
        )

tests/test_inspect.py:175: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_inspect.py:46: in make_app_async
    app.add_sink(i_f.sinkFn, '/sink_fn')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.asgi.app.App object at 0x7fd73c1fb400>
sink = <function sinkFn at 0x7fd5fd0fcc10>, prefix = '/sink_fn'

    def add_sink(self, sink: Callable, prefix: SinkPrefix = r'/'):
        if not iscoroutinefunction(sink) and is_python_func(sink):
            if _should_wrap_non_coroutines():
                sink = wrap_sync_to_async(sink)
            else:
>               raise CompatibilityError(
                    'The sink method must be an awaitable coroutine function '
                    'in order to be used safely with an ASGI app.'
                )
E               falcon.errors.CompatibilityError: The sink method must be an awaitable coroutine function in order to be used safely with an ASGI app.

falcon/asgi/app.py:740: CompatibilityError
_____________________ TestInspectApp.test_middleware[asgi] _____________________

self = <test_inspect.TestInspectApp object at 0x7fd5fd0f9870>, asgi = True

    def test_middleware(self, asgi):
>       mi = inspect.inspect_middleware(make_app_async() if asgi else make_app())

tests/test_inspect.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_inspect.py:46: in make_app_async
    app.add_sink(i_f.sinkFn, '/sink_fn')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.asgi.app.App object at 0x7fd73c1f9b40>
sink = <function sinkFn at 0x7fd5fd0fcc10>, prefix = '/sink_fn'

    def add_sink(self, sink: Callable, prefix: SinkPrefix = r'/'):
        if not iscoroutinefunction(sink) and is_python_func(sink):
            if _should_wrap_non_coroutines():
                sink = wrap_sync_to_async(sink)
            else:
>               raise CompatibilityError(
                    'The sink method must be an awaitable coroutine function '
                    'in order to be used safely with an ASGI app.'
                )
E               falcon.errors.CompatibilityError: The sink method must be an awaitable coroutine function in order to be used safely with an ASGI app.

falcon/asgi/app.py:740: CompatibilityError
_______________________ TestInspectApp.test_routes[asgi] _______________________

self = <test_inspect.TestInspectApp object at 0x7fd5fd0f9de0>, asgi = True

    def test_routes(self, asgi):
>       routes = inspect.inspect_routes(make_app_async() if asgi else make_app())

tests/test_inspect.py:113: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_inspect.py:46: in make_app_async
    app.add_sink(i_f.sinkFn, '/sink_fn')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.asgi.app.App object at 0x7fd73bebe080>
sink = <function sinkFn at 0x7fd5fd0fcc10>, prefix = '/sink_fn'

    def add_sink(self, sink: Callable, prefix: SinkPrefix = r'/'):
        if not iscoroutinefunction(sink) and is_python_func(sink):
            if _should_wrap_non_coroutines():
                sink = wrap_sync_to_async(sink)
            else:
>               raise CompatibilityError(
                    'The sink method must be an awaitable coroutine function '
                    'in order to be used safely with an ASGI app.'
                )
E               falcon.errors.CompatibilityError: The sink method must be an awaitable coroutine function in order to be used safely with an ASGI app.

falcon/asgi/app.py:740: CompatibilityError
__________________ TestInspectApp.test_middleware_tree[asgi] ___________________

self = <test_inspect.TestInspectApp object at 0x7fd5fd0f98a0>, asgi = True

    def test_middleware_tree(self, asgi):
>       mi = inspect.inspect_middleware(make_app_async() if asgi else make_app())

tests/test_inspect.py:233: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_inspect.py:46: in make_app_async
    app.add_sink(i_f.sinkFn, '/sink_fn')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.asgi.app.App object at 0x7fd73c1fb340>
sink = <function sinkFn at 0x7fd5fd0fcc10>, prefix = '/sink_fn'

    def add_sink(self, sink: Callable, prefix: SinkPrefix = r'/'):
        if not iscoroutinefunction(sink) and is_python_func(sink):
            if _should_wrap_non_coroutines():
                sink = wrap_sync_to_async(sink)
            else:
>               raise CompatibilityError(
                    'The sink method must be an awaitable coroutine function '
                    'in order to be used safely with an ASGI app.'
                )
E               falcon.errors.CompatibilityError: The sink method must be an awaitable coroutine function in order to be used safely with an ASGI app.

falcon/asgi/app.py:740: CompatibilityError
_________________________ test_single[asgi-widget_id] __________________________

client = <falcon.testing.client.TestClient object at 0x7fd73c49d1e0>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7fd73c49df30>
field_name = 'widget_id'

    @pytest.mark.parametrize(
        'field_name',
        [
            'id',
            'id123',
            'widget_id',
        ],
    )
    def test_single(client, resource, field_name):
        template = '/widgets/{{{}}}'.format(field_name)
    
>       client.app.add_route(template, resource)

tests/test_uri_templates.py:182: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73bf03290>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c163520>, 'CHECK...3520>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c163520>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fd73c49df30>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________________ test_same_level_complex_var[asgi-True] ____________________

client = <falcon.testing.client.TestClient object at 0x7fd638ec58d0>
reverse = True

    @pytest.mark.parametrize('reverse', [True, False])
    def test_same_level_complex_var(client, reverse):
        file_resource = FileResource()
        details_resource = FileDetailsResource()
    
        routes = [
            ('/files/{file_id}', file_resource),
            ('/files/{file_id}.{ext}', details_resource),
        ]
        if reverse:
            routes.reverse()
    
        for uri_template, resource in routes:
>           client.app.add_route(uri_template, resource)

tests/test_uri_templates.py:511: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73be5b920>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c14b9a0>, 'CHECK...b9a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c14b9a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FileDetailsResource.on_get of <test_uri_templates.FileDetailsResource object at 0x7fd638ec43d0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ test_uuid_converter_complex_segment[asgi] ___________________

client = <falcon.testing.client.TestClient object at 0x7fd73be50070>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7fd73be51a80>

    def test_uuid_converter_complex_segment(client, resource):
>       client.app.add_route('/pages/{first:uuid}...{last:uuid}', resource)

tests/test_uri_templates.py:375: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73bca5930>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a5fc0>, 'CHECK...5fc0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a5fc0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fd73be51a80>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______________________ test_adding_suffix_routes[asgi] ________________________

client = <falcon.testing.client.TestClient object at 0x7fd73c4ce530>

    def test_adding_suffix_routes(client):
        resource_with_suffix_routes = ResourceWithSuffixRoutes()
>       client.app.add_route(
            '/collections/{collection_id}/items/{item_id}', resource_with_suffix_routes
        )

tests/test_uri_templates.py:531: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73bca4120>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c174f70>, 'CHECK...4f70>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c174f70>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ResourceWithSuffixRoutes.on_get of <test_uri_templates.ResourceWithSuffixRoutes object at 0x7fd73c4cce80>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________ test_float_converter[asgi-/{id:float(min=1.9)}-1.9] ______________

client = <falcon.testing.client.TestClient object at 0x7fd73c46d810>
uri_template = '/{id:float(min=1.9)}', id_value = 1.9

    @pytest.mark.parametrize('id_value', [2, 2.1, 1.9])
    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:float}',
            '/{id:float(1)}',
            '/{id:float(min=1.9)}',
            '/{id:float(min=1.8, max=3)}',
        ],
    )
    def test_float_converter(client, uri_template, id_value):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:230: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73bca4350>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c176c20>, 'CHECK...6c20>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c176c20>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7fd73c46d210>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ test_float_converter[asgi-/{id:float(1)}-2.1] _________________

client = <falcon.testing.client.TestClient object at 0x7fd639107640>
uri_template = '/{id:float(1)}', id_value = 2.1

    @pytest.mark.parametrize('id_value', [2, 2.1, 1.9])
    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:float}',
            '/{id:float(1)}',
            '/{id:float(min=1.9)}',
            '/{id:float(min=1.8, max=3)}',
        ],
    )
    def test_float_converter(client, uri_template, id_value):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:230: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73bcefed0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c163ac0>, 'CHECK...3ac0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c163ac0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7fd639104b50>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________ test_float_converter[asgi-/{id:float(min=1.8, max=3)}-1.9] __________

client = <falcon.testing.client.TestClient object at 0x7fd73c048190>
uri_template = '/{id:float(min=1.8, max=3)}', id_value = 1.9

    @pytest.mark.parametrize('id_value', [2, 2.1, 1.9])
    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:float}',
            '/{id:float(1)}',
            '/{id:float(min=1.9)}',
            '/{id:float(min=1.8, max=3)}',
        ],
    )
    def test_float_converter(client, uri_template, id_value):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:230: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73bcec350>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c174670>, 'CHECK...4670>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c174670>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7fd73c048a60>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ test_uuid_converter[asgi-uuid_converter_4] __________________

client = <falcon.testing.client.TestClient object at 0x7fd638d8f4f0>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7fd638d8f820>
uri_template = '/versions/diff/{left:uuid}...{right:uuid()}'
path = '/versions/diff/3a9e0bad-25c7-40e1-b00a-f5efe40af689...ad5cc430-09ec-40bd-bed1-cc12847bb0ce'
expected = {'left': UUID('3a9e0bad-25c7-40e1-b00a-f5efe40af689'), 'right': UUID('ad5cc430-09ec-40bd-bed1-cc12847bb0ce')}

    @pytest.mark.parametrize(
        'uri_template, path, expected',
        as_params(
            (
                '/widgets/{widget_id:uuid}',
                '/widgets/' + _TEST_UUID_STR,
                {'widget_id': _TEST_UUID},
            ),
            (
                '/widgets/{widget_id:uuid}/orders',
                '/widgets/' + _TEST_UUID_STR_SANS_HYPHENS + '/orders',
                {'widget_id': _TEST_UUID},
            ),
            (
                '/versions/diff/{left:uuid()}...{right:uuid()}',
                '/versions/diff/{}...{}'.format(_TEST_UUID_STR, _TEST_UUID_STR_2),
                {
                    'left': _TEST_UUID,
                    'right': _TEST_UUID_2,
                },
            ),
            (
                '/versions/diff/{left:uuid}...{right:uuid()}',
                '/versions/diff/{}...{}'.format(_TEST_UUID_STR, _TEST_UUID_STR_2),
                {
                    'left': _TEST_UUID,
                    'right': _TEST_UUID_2,
                },
            ),
            (
                '/versions/diff/{left:uuid()}...{right:uuid}',
                '/versions/diff/{}...{}'.format(_TEST_UUID_STR, _TEST_UUID_STR_2),
                {
                    'left': _TEST_UUID,
                    'right': _TEST_UUID_2,
                },
            ),
            (
                '/widgets/{widget_id:uuid}/orders',
                '/widgets/' + _TEST_UUID_STR_SANS_HYPHENS[:-1] + '/orders',
                None,
            ),
            prefix='uuid_converter',
        ),
    )
    def test_uuid_converter(client, resource, uri_template, path, expected):
>       client.app.add_route(uri_template, resource)

tests/test_uri_templates.py:361: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73bcefbc0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c161e10>, 'CHECK...1e10>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c161e10>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fd638d8f820>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ test_converter_custom[asgi-/{food:spam}-/something-expected0] _________

client = <falcon.testing.client.TestClient object at 0x7fd73c48aa70>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7fd73c488f70>
uri_template = '/{food:spam}', path = '/something', expected = {'food': 'spam!'}

    @pytest.mark.parametrize(
        'uri_template, path, expected',
        [
            ('/{food:spam}', '/something', {'food': 'spam!'}),
            (
                '/{food:spam(")")}:{food_too:spam("()")}',
                '/bacon:eggs',
                {'food': 'spam!', 'food_too': 'spam!'},
            ),
            (
                '/({food:spam()}){food_too:spam("()")}',
                '/(bacon)eggs',
                {'food': 'spam!', 'food_too': 'spam!'},
            ),
        ],
    )
    def test_converter_custom(client, resource, uri_template, path, expected):
        class SpamConverter:
            def __init__(self, useless_text=None):
                pass
    
            def convert(self, fragment):
                return 'spam!'
    
        client.app.router_options.converters['spam'] = SpamConverter
>       client.app.add_route(uri_template, resource)

tests/test_uri_templates.py:413: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73bcefa00>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c160280>, 'CHECK...0280>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c160280>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fd73c488f70>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______________ test_with_and_without_trailing_slash[asgi-False] _______________

client = <falcon.testing.client.TestClient object at 0x7fd73ab6cdc0>
reverse = False

    @pytest.mark.parametrize('reverse', [True, False])
    def test_with_and_without_trailing_slash(client, reverse):
        routes = [
            ('/kitchen', KitchenSinkResource()),
            ('/kitchen/', KitchenSinkResource()),
            ('/kitchen/{item}', KitchenSinkResource()),
            ('/kitchen/{item}/', KitchenSinkResource()),
            ('/kitchen/sink', KitchenSinkResource()),
            ('/kitchen/sink/', KitchenSinkResource()),
        ]
        if reverse:
            routes.reverse()
    
        for route in routes:
>           client.app.add_route(*route)

tests/test_uri_templates.py:576: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73bcee2d0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c14a8c0>, 'CHECK...a8c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c14a8c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method KitchenSinkResource.on_get of <test_uri_templates.KitchenSinkResource object at 0x7fd639029480>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________________________ test_multiple[asgi] ______________________________

client = <falcon.testing.client.TestClient object at 0x7fd638f3b7f0>

    def test_multiple(client):
        resource = NameResource()
>       client.app.add_route('/messages/{id}/names/{name}', resource)

tests/test_uri_templates.py:459: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73bcedc40>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c14ab90>, 'CHECK...ab90>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c14ab90>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method NameResource.on_get of <test_uri_templates.NameResource object at 0x7fd638f38e80>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________________ test_float_converter[asgi-/{id:float(1)}-2] __________________

client = <falcon.testing.client.TestClient object at 0x7fd638d8df00>
uri_template = '/{id:float(1)}', id_value = 2

    @pytest.mark.parametrize('id_value', [2, 2.1, 1.9])
    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:float}',
            '/{id:float(1)}',
            '/{id:float(min=1.9)}',
            '/{id:float(min=1.8, max=3)}',
        ],
    )
    def test_float_converter(client, uri_template, id_value):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:230: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73bcecdd0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c14b490>, 'CHECK...b490>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c14b490>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7fd638d8eb30>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ test_converter_custom[asgi-/{food:spam(")")}:{food_too:spam("()")}-/bacon:eggs-expected1] _

client = <falcon.testing.client.TestClient object at 0x7fd639107c40>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7fd639105090>
uri_template = '/{food:spam(")")}:{food_too:spam("()")}', path = '/bacon:eggs'
expected = {'food': 'spam!', 'food_too': 'spam!'}

    @pytest.mark.parametrize(
        'uri_template, path, expected',
        [
            ('/{food:spam}', '/something', {'food': 'spam!'}),
            (
                '/{food:spam(")")}:{food_too:spam("()")}',
                '/bacon:eggs',
                {'food': 'spam!', 'food_too': 'spam!'},
            ),
            (
                '/({food:spam()}){food_too:spam("()")}',
                '/(bacon)eggs',
                {'food': 'spam!', 'food_too': 'spam!'},
            ),
        ],
    )
    def test_converter_custom(client, resource, uri_template, path, expected):
        class SpamConverter:
            def __init__(self, useless_text=None):
                pass
    
            def convert(self, fragment):
                return 'spam!'
    
        client.app.router_options.converters['spam'] = SpamConverter
>       client.app.add_route(uri_template, resource)

tests/test_uri_templates.py:413: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73bcec9e0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c14b520>, 'CHECK...b520>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c14b520>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fd639105090>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ test_uuid_converter[asgi-uuid_converter_5] __________________

client = <falcon.testing.client.TestClient object at 0x7fd6390e95a0>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7fd6390eaf50>
uri_template = '/versions/diff/{left:uuid()}...{right:uuid}'
path = '/versions/diff/3a9e0bad-25c7-40e1-b00a-f5efe40af689...ad5cc430-09ec-40bd-bed1-cc12847bb0ce'
expected = {'left': UUID('3a9e0bad-25c7-40e1-b00a-f5efe40af689'), 'right': UUID('ad5cc430-09ec-40bd-bed1-cc12847bb0ce')}

    @pytest.mark.parametrize(
        'uri_template, path, expected',
        as_params(
            (
                '/widgets/{widget_id:uuid}',
                '/widgets/' + _TEST_UUID_STR,
                {'widget_id': _TEST_UUID},
            ),
            (
                '/widgets/{widget_id:uuid}/orders',
                '/widgets/' + _TEST_UUID_STR_SANS_HYPHENS + '/orders',
                {'widget_id': _TEST_UUID},
            ),
            (
                '/versions/diff/{left:uuid()}...{right:uuid()}',
                '/versions/diff/{}...{}'.format(_TEST_UUID_STR, _TEST_UUID_STR_2),
                {
                    'left': _TEST_UUID,
                    'right': _TEST_UUID_2,
                },
            ),
            (
                '/versions/diff/{left:uuid}...{right:uuid()}',
                '/versions/diff/{}...{}'.format(_TEST_UUID_STR, _TEST_UUID_STR_2),
                {
                    'left': _TEST_UUID,
                    'right': _TEST_UUID_2,
                },
            ),
            (
                '/versions/diff/{left:uuid()}...{right:uuid}',
                '/versions/diff/{}...{}'.format(_TEST_UUID_STR, _TEST_UUID_STR_2),
                {
                    'left': _TEST_UUID,
                    'right': _TEST_UUID_2,
                },
            ),
            (
                '/widgets/{widget_id:uuid}/orders',
                '/widgets/' + _TEST_UUID_STR_SANS_HYPHENS[:-1] + '/orders',
                None,
            ),
            prefix='uuid_converter',
        ),
    )
    def test_uuid_converter(client, resource, uri_template, path, expected):
>       client.app.add_route(uri_template, resource)

tests/test_uri_templates.py:361: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73be33d10>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c14b7f0>, 'CHECK...b7f0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c14b7f0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fd6390eaf50>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ test_int_converter_rejections[asgi-/{id:int(min=124)}] ____________

client = <falcon.testing.client.TestClient object at 0x7fd638d86f80>
uri_template = '/{id:int(min=124)}'

    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:int(2)}',
            '/{id:int(min=124)}',
            '/{id:int(num_digits=3, max=100)}',
        ],
    )
    def test_int_converter_rejections(client, uri_template):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:271: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73bf01930>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a7e20>, 'CHECK...7e20>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a7e20>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7fd638d874c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ test_uuid_converter[asgi-uuid_converter_6] __________________

client = <falcon.testing.client.TestClient object at 0x7fd73bd0e290>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7fd73bd0ef20>
uri_template = '/widgets/{widget_id:uuid}/orders'
path = '/widgets/3a9e0bad25c740e1b00af5efe40af68/orders', expected = None

    @pytest.mark.parametrize(
        'uri_template, path, expected',
        as_params(
            (
                '/widgets/{widget_id:uuid}',
                '/widgets/' + _TEST_UUID_STR,
                {'widget_id': _TEST_UUID},
            ),
            (
                '/widgets/{widget_id:uuid}/orders',
                '/widgets/' + _TEST_UUID_STR_SANS_HYPHENS + '/orders',
                {'widget_id': _TEST_UUID},
            ),
            (
                '/versions/diff/{left:uuid()}...{right:uuid()}',
                '/versions/diff/{}...{}'.format(_TEST_UUID_STR, _TEST_UUID_STR_2),
                {
                    'left': _TEST_UUID,
                    'right': _TEST_UUID_2,
                },
            ),
            (
                '/versions/diff/{left:uuid}...{right:uuid()}',
                '/versions/diff/{}...{}'.format(_TEST_UUID_STR, _TEST_UUID_STR_2),
                {
                    'left': _TEST_UUID,
                    'right': _TEST_UUID_2,
                },
            ),
            (
                '/versions/diff/{left:uuid()}...{right:uuid}',
                '/versions/diff/{}...{}'.format(_TEST_UUID_STR, _TEST_UUID_STR_2),
                {
                    'left': _TEST_UUID,
                    'right': _TEST_UUID_2,
                },
            ),
            (
                '/widgets/{widget_id:uuid}/orders',
                '/widgets/' + _TEST_UUID_STR_SANS_HYPHENS[:-1] + '/orders',
                None,
            ),
            prefix='uuid_converter',
        ),
    )
    def test_uuid_converter(client, resource, uri_template, path, expected):
>       client.app.add_route(uri_template, resource)

tests/test_uri_templates.py:361: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73be46a40>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c176200>, 'CHECK...6200>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c176200>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fd73bd0ef20>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______________ test_float_converter_non_finite_disallowed[asgi] _______________

client = <falcon.testing.client.TestClient object at 0x7fd638efd930>

    def test_float_converter_non_finite_disallowed(client):
        resource1 = IDResource()
>       client.app.add_route('/{id:float}', resource1)

tests/test_uri_templates.py:254: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73be46960>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1740d0>, 'CHECK...40d0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1740d0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7fd638efd780>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______________ test_float_converter[asgi-/{id:float(min=1.9)}-2] _______________

client = <falcon.testing.client.TestClient object at 0x7fd73be8f280>
uri_template = '/{id:float(min=1.9)}', id_value = 2

    @pytest.mark.parametrize('id_value', [2, 2.1, 1.9])
    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:float}',
            '/{id:float(1)}',
            '/{id:float(min=1.9)}',
            '/{id:float(min=1.8, max=3)}',
        ],
    )
    def test_float_converter(client, uri_template, id_value):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:230: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73bca7df0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a5c60>, 'CHECK...5c60>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a5c60>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7fd73be8cf40>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ test_uuid_converter[asgi-uuid_converter_2] __________________

client = <falcon.testing.client.TestClient object at 0x7fd63917b0a0>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7fd63917b730>
uri_template = '/widgets/{widget_id:uuid}/orders'
path = '/widgets/3a9e0bad25c740e1b00af5efe40af689/orders'
expected = {'widget_id': UUID('3a9e0bad-25c7-40e1-b00a-f5efe40af689')}

    @pytest.mark.parametrize(
        'uri_template, path, expected',
        as_params(
            (
                '/widgets/{widget_id:uuid}',
                '/widgets/' + _TEST_UUID_STR,
                {'widget_id': _TEST_UUID},
            ),
            (
                '/widgets/{widget_id:uuid}/orders',
                '/widgets/' + _TEST_UUID_STR_SANS_HYPHENS + '/orders',
                {'widget_id': _TEST_UUID},
            ),
            (
                '/versions/diff/{left:uuid()}...{right:uuid()}',
                '/versions/diff/{}...{}'.format(_TEST_UUID_STR, _TEST_UUID_STR_2),
                {
                    'left': _TEST_UUID,
                    'right': _TEST_UUID_2,
                },
            ),
            (
                '/versions/diff/{left:uuid}...{right:uuid()}',
                '/versions/diff/{}...{}'.format(_TEST_UUID_STR, _TEST_UUID_STR_2),
                {
                    'left': _TEST_UUID,
                    'right': _TEST_UUID_2,
                },
            ),
            (
                '/versions/diff/{left:uuid()}...{right:uuid}',
                '/versions/diff/{}...{}'.format(_TEST_UUID_STR, _TEST_UUID_STR_2),
                {
                    'left': _TEST_UUID,
                    'right': _TEST_UUID_2,
                },
            ),
            (
                '/widgets/{widget_id:uuid}/orders',
                '/widgets/' + _TEST_UUID_STR_SANS_HYPHENS[:-1] + '/orders',
                None,
            ),
            prefix='uuid_converter',
        ),
    )
    def test_uuid_converter(client, resource, uri_template, path, expected):
>       client.app.add_route(uri_template, resource)

tests/test_uri_templates.py:361: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73bca6960>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c175750>, 'CHECK...5750>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c175750>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fd63917b730>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________________ test_float_converter[asgi-/{id:float}-2] ___________________

client = <falcon.testing.client.TestClient object at 0x7fd73abe0340>
uri_template = '/{id:float}', id_value = 2

    @pytest.mark.parametrize('id_value', [2, 2.1, 1.9])
    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:float}',
            '/{id:float(1)}',
            '/{id:float(min=1.9)}',
            '/{id:float(min=1.8, max=3)}',
        ],
    )
    def test_float_converter(client, uri_template, id_value):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:230: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73bca59a0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1775b0>, 'CHECK...75b0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1775b0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7fd73abe12a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________ test_int_converter[asgi-/{id:int(min=123, max=123)}] _____________

client = <falcon.testing.client.TestClient object at 0x7fd6390eba90>
uri_template = '/{id:int(min=123, max=123)}'

    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:int}',
            '/{id:int(3)}',
            '/{id:int(min=123)}',
            '/{id:int(min=123, max=123)}',
        ],
    )
    def test_int_converter(client, uri_template):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:208: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73be451c0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c14b6d0>, 'CHECK...b6d0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c14b6d0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7fd638f9ea40>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______________ test_int_converter_rejections[asgi-/{id:int(2)}] _______________

client = <falcon.testing.client.TestClient object at 0x7fd73c4680d0>
uri_template = '/{id:int(2)}'

    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:int(2)}',
            '/{id:int(min=124)}',
            '/{id:int(num_digits=3, max=100)}',
        ],
    )
    def test_int_converter_rejections(client, uri_template):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:271: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73be7e570>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c14ab90>, 'CHECK...ab90>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c14ab90>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7fd73c46add0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______________ test_float_converter_non_finite_allowed[asgi-nan] _______________

value = 'nan'
client = <falcon.testing.client.TestClient object at 0x7fd73bd23b20>

    @pytest.mark.parametrize('value', ['nan', '-inf', 'inf'])
    def test_float_converter_non_finite_allowed(value, client):
        resource1 = IDResource()
>       client.app.add_route('/{id:float(finite=False)}', resource1)

tests/test_uri_templates.py:243: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73be5a5e0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c14b7f0>, 'CHECK...b7f0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c14b7f0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7fd73bd20820>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________________________ test_single[asgi-id] _____________________________

client = <falcon.testing.client.TestClient object at 0x7fd73c1a8dc0>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7fd73c1a9060>
field_name = 'id'

    @pytest.mark.parametrize(
        'field_name',
        [
            'id',
            'id123',
            'widget_id',
        ],
    )
    def test_single(client, resource, field_name):
        template = '/widgets/{{{}}}'.format(field_name)
    
>       client.app.add_route(template, resource)

tests/test_uri_templates.py:182: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73bcee810>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c14bbe0>, 'CHECK...bbe0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c14bbe0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fd73c1a9060>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ test_datetime_converter[asgi-/{start_year:int}/{timestamp:dt("%Y-%m-%d %H:%M")}-/1961/1969-07-21 14:30-dt_expected2] _

client = <falcon.testing.client.TestClient object at 0x7fd73aa52fe0>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7fd73aa53850>
uri_template = '/{start_year:int}/{timestamp:dt("%Y-%m-%d %H:%M")}'
path = '/1961/1969-07-21 14:30'
dt_expected = datetime.datetime(1969, 7, 21, 14, 30)

    @pytest.mark.parametrize(
        'uri_template, path, dt_expected',
        [
            (
                '/{start_year:int}-to-{timestamp:dt}',
                '/1961-to-1969-07-21T02:56:00Z',
                datetime(1969, 7, 21, 2, 56, 0),
            ),
            (
                '/{start_year:int}-to-{timestamp:dt("%Y-%m-%d")}',
                '/1961-to-1969-07-21',
                datetime(1969, 7, 21),
            ),
            (
                '/{start_year:int}/{timestamp:dt("%Y-%m-%d %H:%M")}',
                '/1961/1969-07-21 14:30',
                datetime(1969, 7, 21, 14, 30),
            ),
            ('/{start_year:int}-to-{timestamp:dt("%Y-%m")}', '/1961-to-1969-07-21', None),
        ],
    )
    def test_datetime_converter(client, resource, uri_template, path, dt_expected):
>       client.app.add_route(uri_template, resource)

tests/test_uri_templates.py:301: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73bcef6f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c163490>, 'CHECK...3490>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c163490>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fd73aa53850>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ test_datetime_converter[asgi-/{start_year:int}-to-{timestamp:dt}-/1961-to-1969-07-21T02:56:00Z-dt_expected0] _

client = <falcon.testing.client.TestClient object at 0x7fd638f39810>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7fd638f39120>
uri_template = '/{start_year:int}-to-{timestamp:dt}'
path = '/1961-to-1969-07-21T02:56:00Z'
dt_expected = datetime.datetime(1969, 7, 21, 2, 56)

    @pytest.mark.parametrize(
        'uri_template, path, dt_expected',
        [
            (
                '/{start_year:int}-to-{timestamp:dt}',
                '/1961-to-1969-07-21T02:56:00Z',
                datetime(1969, 7, 21, 2, 56, 0),
            ),
            (
                '/{start_year:int}-to-{timestamp:dt("%Y-%m-%d")}',
                '/1961-to-1969-07-21',
                datetime(1969, 7, 21),
            ),
            (
                '/{start_year:int}/{timestamp:dt("%Y-%m-%d %H:%M")}',
                '/1961/1969-07-21 14:30',
                datetime(1969, 7, 21, 14, 30),
            ),
            ('/{start_year:int}-to-{timestamp:dt("%Y-%m")}', '/1961-to-1969-07-21', None),
        ],
    )
    def test_datetime_converter(client, resource, uri_template, path, dt_expected):
>       client.app.add_route(uri_template, resource)

tests/test_uri_templates.py:301: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73bcedfc0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c161630>, 'CHECK...1630>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c161630>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fd638f39120>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________________ test_same_level_complex_var[asgi-False] ____________________

client = <falcon.testing.client.TestClient object at 0x7fd638fb7a60>
reverse = False

    @pytest.mark.parametrize('reverse', [True, False])
    def test_same_level_complex_var(client, reverse):
        file_resource = FileResource()
        details_resource = FileDetailsResource()
    
        routes = [
            ('/files/{file_id}', file_resource),
            ('/files/{file_id}.{ext}', details_resource),
        ]
        if reverse:
            routes.reverse()
    
        for uri_template, resource in routes:
>           client.app.add_route(uri_template, resource)

tests/test_uri_templates.py:511: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c0a0190>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c162cb0>, 'CHECK...2cb0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c162cb0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FileResource.on_get of <test_uri_templates.FileResource object at 0x7fd638fb5db0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ test_uuid_converter[asgi-uuid_converter_3] __________________

client = <falcon.testing.client.TestClient object at 0x7fd73aacb0d0>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7fd73aac9ba0>
uri_template = '/versions/diff/{left:uuid()}...{right:uuid()}'
path = '/versions/diff/3a9e0bad-25c7-40e1-b00a-f5efe40af689...ad5cc430-09ec-40bd-bed1-cc12847bb0ce'
expected = {'left': UUID('3a9e0bad-25c7-40e1-b00a-f5efe40af689'), 'right': UUID('ad5cc430-09ec-40bd-bed1-cc12847bb0ce')}

    @pytest.mark.parametrize(
        'uri_template, path, expected',
        as_params(
            (
                '/widgets/{widget_id:uuid}',
                '/widgets/' + _TEST_UUID_STR,
                {'widget_id': _TEST_UUID},
            ),
            (
                '/widgets/{widget_id:uuid}/orders',
                '/widgets/' + _TEST_UUID_STR_SANS_HYPHENS + '/orders',
                {'widget_id': _TEST_UUID},
            ),
            (
                '/versions/diff/{left:uuid()}...{right:uuid()}',
                '/versions/diff/{}...{}'.format(_TEST_UUID_STR, _TEST_UUID_STR_2),
                {
                    'left': _TEST_UUID,
                    'right': _TEST_UUID_2,
                },
            ),
            (
                '/versions/diff/{left:uuid}...{right:uuid()}',
                '/versions/diff/{}...{}'.format(_TEST_UUID_STR, _TEST_UUID_STR_2),
                {
                    'left': _TEST_UUID,
                    'right': _TEST_UUID_2,
                },
            ),
            (
                '/versions/diff/{left:uuid()}...{right:uuid}',
                '/versions/diff/{}...{}'.format(_TEST_UUID_STR, _TEST_UUID_STR_2),
                {
                    'left': _TEST_UUID,
                    'right': _TEST_UUID_2,
                },
            ),
            (
                '/widgets/{widget_id:uuid}/orders',
                '/widgets/' + _TEST_UUID_STR_SANS_HYPHENS[:-1] + '/orders',
                None,
            ),
            prefix='uuid_converter',
        ),
    )
    def test_uuid_converter(client, resource, uri_template, path, expected):
>       client.app.add_route(uri_template, resource)

tests/test_uri_templates.py:361: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c0a0e40>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c160a60>, 'CHECK...0a60>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c160a60>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fd73aac9ba0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ test_float_converter[asgi-/{id:float}-1.9] __________________

client = <falcon.testing.client.TestClient object at 0x7fd73c488460>
uri_template = '/{id:float}', id_value = 1.9

    @pytest.mark.parametrize('id_value', [2, 2.1, 1.9])
    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:float}',
            '/{id:float(1)}',
            '/{id:float(min=1.9)}',
            '/{id:float(min=1.8, max=3)}',
        ],
    )
    def test_float_converter(client, uri_template, id_value):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:230: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c0a3ca0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c175000>, 'CHECK...5000>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c175000>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7fd73c488700>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________ test_float_converter[asgi-/{id:float(min=1.8, max=3)}-2.1] __________

client = <falcon.testing.client.TestClient object at 0x7fd73c1a82b0>
uri_template = '/{id:float(min=1.8, max=3)}', id_value = 2.1

    @pytest.mark.parametrize('id_value', [2, 2.1, 1.9])
    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:float}',
            '/{id:float(1)}',
            '/{id:float(min=1.9)}',
            '/{id:float(min=1.8, max=3)}',
        ],
    )
    def test_float_converter(client, uri_template, id_value):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:230: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c0a1c40>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c14aef0>, 'CHECK...aef0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c14aef0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7fd73c370f70>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______________ test_float_converter_non_finite_allowed[asgi-inf] _______________

value = 'inf'
client = <falcon.testing.client.TestClient object at 0x7fd63917a770>

    @pytest.mark.parametrize('value', ['nan', '-inf', 'inf'])
    def test_float_converter_non_finite_allowed(value, client):
        resource1 = IDResource()
>       client.app.add_route('/{id:float(finite=False)}', resource1)

tests/test_uri_templates.py:243: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c0a3a00>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c149ab0>, 'CHECK...9ab0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c149ab0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7fd639179f00>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________ test_float_converter[asgi-/{id:float(min=1.9)}-2.1] ______________

client = <falcon.testing.client.TestClient object at 0x7fd73befb7c0>
uri_template = '/{id:float(min=1.9)}', id_value = 2.1

    @pytest.mark.parametrize('id_value', [2, 2.1, 1.9])
    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:float}',
            '/{id:float(1)}',
            '/{id:float(min=1.9)}',
            '/{id:float(min=1.8, max=3)}',
        ],
    )
    def test_float_converter(client, uri_template, id_value):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:230: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73bceccf0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c14af80>, 'CHECK...af80>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c14af80>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7fd73bef8ca0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________________________ test_single[asgi-id123] ____________________________

client = <falcon.testing.client.TestClient object at 0x7fd638da0bb0>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7fd638da3bb0>
field_name = 'id123'

    @pytest.mark.parametrize(
        'field_name',
        [
            'id',
            'id123',
            'widget_id',
        ],
    )
    def test_single(client, resource, field_name):
        template = '/widgets/{{{}}}'.format(field_name)
    
>       client.app.add_route(template, resource)

tests/test_uri_templates.py:182: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73bcef140>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a6680>, 'CHECK...6680>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1a6680>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fd638da3bb0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________ test_float_converter[asgi-/{id:float(min=1.8, max=3)}-2] ___________

client = <falcon.testing.client.TestClient object at 0x7fd73be8e3b0>
uri_template = '/{id:float(min=1.8, max=3)}', id_value = 2

    @pytest.mark.parametrize('id_value', [2, 2.1, 1.9])
    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:float}',
            '/{id:float(1)}',
            '/{id:float(min=1.9)}',
            '/{id:float(min=1.8, max=3)}',
        ],
    )
    def test_float_converter(client, uri_template, id_value):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:230: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73be7e340>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1625f0>, 'CHECK...25f0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1625f0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7fd73be8da50>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ test_float_converter[asgi-/{id:float}-2.1] __________________

client = <falcon.testing.client.TestClient object at 0x7fd73c0669b0>
uri_template = '/{id:float}', id_value = 2.1

    @pytest.mark.parametrize('id_value', [2, 2.1, 1.9])
    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:float}',
            '/{id:float(1)}',
            '/{id:float(min=1.9)}',
            '/{id:float(min=1.8, max=3)}',
        ],
    )
    def test_float_converter(client, uri_template, id_value):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:230: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73bca4040>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1628c0>, 'CHECK...28c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1628c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7fd73c0656c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ test_datetime_converter[asgi-/{start_year:int}-to-{timestamp:dt("%Y-%m")}-/1961-to-1969-07-21-None] _

client = <falcon.testing.client.TestClient object at 0x7fd638ee7f70>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7fd638ee5690>
uri_template = '/{start_year:int}-to-{timestamp:dt("%Y-%m")}'
path = '/1961-to-1969-07-21', dt_expected = None

    @pytest.mark.parametrize(
        'uri_template, path, dt_expected',
        [
            (
                '/{start_year:int}-to-{timestamp:dt}',
                '/1961-to-1969-07-21T02:56:00Z',
                datetime(1969, 7, 21, 2, 56, 0),
            ),
            (
                '/{start_year:int}-to-{timestamp:dt("%Y-%m-%d")}',
                '/1961-to-1969-07-21',
                datetime(1969, 7, 21),
            ),
            (
                '/{start_year:int}/{timestamp:dt("%Y-%m-%d %H:%M")}',
                '/1961/1969-07-21 14:30',
                datetime(1969, 7, 21, 14, 30),
            ),
            ('/{start_year:int}-to-{timestamp:dt("%Y-%m")}', '/1961-to-1969-07-21', None),
        ],
    )
    def test_datetime_converter(client, resource, uri_template, path, dt_expected):
>       client.app.add_route(uri_template, resource)

tests/test_uri_templates.py:301: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73be46c00>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c162b90>, 'CHECK...2b90>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c162b90>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fd638ee5690>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________________________ test_root_path[asgi] _____________________________

client = <falcon.testing.client.TestClient object at 0x7fd73aa53e80>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7fd73aa519c0>

    def test_root_path(client, resource):
>       client.app.add_route('/', resource)

tests/test_uri_templates.py:143: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73bca6ab0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1609d0>, 'CHECK...09d0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1609d0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fd73aa519c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______________ test_with_and_without_trailing_slash[asgi-True] ________________

client = <falcon.testing.client.TestClient object at 0x7fd73c488f70>
reverse = True

    @pytest.mark.parametrize('reverse', [True, False])
    def test_with_and_without_trailing_slash(client, reverse):
        routes = [
            ('/kitchen', KitchenSinkResource()),
            ('/kitchen/', KitchenSinkResource()),
            ('/kitchen/{item}', KitchenSinkResource()),
            ('/kitchen/{item}/', KitchenSinkResource()),
            ('/kitchen/sink', KitchenSinkResource()),
            ('/kitchen/sink/', KitchenSinkResource()),
        ]
        if reverse:
            routes.reverse()
    
        for route in routes:
>           client.app.add_route(*route)

tests/test_uri_templates.py:576: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c244c80>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1639a0>, 'CHECK...39a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1639a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method KitchenSinkResource.on_get of <test_uri_templates.KitchenSinkResource object at 0x7fd73c48a320>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ test_float_converter[asgi-/{id:float(1)}-1.9] _________________

client = <falcon.testing.client.TestClient object at 0x7fd638d940d0>
uri_template = '/{id:float(1)}', id_value = 1.9

    @pytest.mark.parametrize('id_value', [2, 2.1, 1.9])
    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:float}',
            '/{id:float(1)}',
            '/{id:float(min=1.9)}',
            '/{id:float(min=1.8, max=3)}',
        ],
    )
    def test_float_converter(client, uri_template, id_value):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:230: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c247610>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c14a0e0>, 'CHECK...a0e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c14a0e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7fd638d977c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______________________________ test_no_vars[asgi] ______________________________

client = <falcon.testing.client.TestClient object at 0x7fd73c489c30>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7fd73c48aa70>

    def test_no_vars(client, resource):
>       client.app.add_route('/hello/world', resource)

tests/test_uri_templates.py:149: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73bca6ab0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c14a830>, 'CHECK...a830>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c14a830>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fd73c48aa70>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ test_datetime_converter[asgi-/{start_year:int}-to-{timestamp:dt("%Y-%m-%d")}-/1961-to-1969-07-21-dt_expected1] _

client = <falcon.testing.client.TestClient object at 0x7fd638da82b0>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7fd638daa260>
uri_template = '/{start_year:int}-to-{timestamp:dt("%Y-%m-%d")}'
path = '/1961-to-1969-07-21', dt_expected = datetime.datetime(1969, 7, 21, 0, 0)

    @pytest.mark.parametrize(
        'uri_template, path, dt_expected',
        [
            (
                '/{start_year:int}-to-{timestamp:dt}',
                '/1961-to-1969-07-21T02:56:00Z',
                datetime(1969, 7, 21, 2, 56, 0),
            ),
            (
                '/{start_year:int}-to-{timestamp:dt("%Y-%m-%d")}',
                '/1961-to-1969-07-21',
                datetime(1969, 7, 21),
            ),
            (
                '/{start_year:int}/{timestamp:dt("%Y-%m-%d %H:%M")}',
                '/1961/1969-07-21 14:30',
                datetime(1969, 7, 21, 14, 30),
            ),
            ('/{start_year:int}-to-{timestamp:dt("%Y-%m")}', '/1961-to-1969-07-21', None),
        ],
    )
    def test_datetime_converter(client, resource, uri_template, path, dt_expected):
>       client.app.add_route(uri_template, resource)

tests/test_uri_templates.py:301: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73be5bd10>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c14bbe0>, 'CHECK...bbe0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c14bbe0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fd638daa260>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______________________ test_single_trailing_slash[asgi] _______________________

client = <falcon.testing.client.TestClient object at 0x7fd73bef8d30>

    def test_single_trailing_slash(client):
        resource1 = IDResource()
>       client.app.add_route('/1/{id}/', resource1)

tests/test_uri_templates.py:424: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c2453f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c68ae60>, 'CHECK...ae60>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c68ae60>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7fd73bef99c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________________ test_single_path_segment[asgi] ________________________

client = <falcon.testing.client.TestClient object at 0x7fd638ee5750>

    def test_single_path_segment(client):
        id_resource = IDResource()
    
>       client.app.add_route('/thing-{id}', id_resource)

tests/test_uri_templates.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c2452a0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c68a170>, 'CHECK...a170>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c68a170>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7fd638ee6c20>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______________________ test_int_converter[asgi-/{id:int}] ______________________

client = <falcon.testing.client.TestClient object at 0x7fd6390284f0>
uri_template = '/{id:int}'

    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:int}',
            '/{id:int(3)}',
            '/{id:int(min=123)}',
            '/{id:int(min=123, max=123)}',
        ],
    )
    def test_int_converter(client, uri_template):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:208: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c246c00>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c162050>, 'CHECK...2050>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c162050>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7fd639029d80>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____ test_int_converter_rejections[asgi-/{id:int(num_digits=3, max=100)}] _____

client = <falcon.testing.client.TestClient object at 0x7fd73aacace0>
uri_template = '/{id:int(num_digits=3, max=100)}'

    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:int(2)}',
            '/{id:int(min=124)}',
            '/{id:int(num_digits=3, max=100)}',
        ],
    )
    def test_int_converter_rejections(client, uri_template):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:271: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c2462d0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c162320>, 'CHECK...2320>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c162320>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7fd73aacb9d0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________________ test_int_converter[asgi-/{id:int(3)}] _____________________

client = <falcon.testing.client.TestClient object at 0x7fd73c0eb190>
uri_template = '/{id:int(3)}'

    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:int}',
            '/{id:int(3)}',
            '/{id:int(min=123)}',
            '/{id:int(min=123, max=123)}',
        ],
    )
    def test_int_converter(client, uri_template):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:208: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c0a0120>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1605e0>, 'CHECK...05e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1605e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7fd73c0e8fd0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________________________ test_special_chars[asgi] ___________________________

client = <falcon.testing.client.TestClient object at 0x7fd73c46c5b0>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7fd73c46d510>

    def test_special_chars(client, resource):
>       client.app.add_route('/hello/world.json', resource)

tests/test_uri_templates.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c0a23b0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c163a30>, 'CHECK...3a30>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c163a30>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fd73c46d510>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________________ test_int_converter[asgi-/{id:int(min=123)}] __________________

client = <falcon.testing.client.TestClient object at 0x7fd73aae9990>
uri_template = '/{id:int(min=123)}'

    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:int}',
            '/{id:int(3)}',
            '/{id:int(min=123)}',
            '/{id:int(min=123, max=123)}',
        ],
    )
    def test_int_converter(client, uri_template):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:208: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c0a1770>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1631c0>, 'CHECK...31c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c1631c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7fd73aae8850>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ test_uuid_converter[asgi-uuid_converter_1] __________________

client = <falcon.testing.client.TestClient object at 0x7fd73c373f40>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7fd73c372c20>
uri_template = '/widgets/{widget_id:uuid}'
path = '/widgets/3a9e0bad-25c7-40e1-b00a-f5efe40af689'
expected = {'widget_id': UUID('3a9e0bad-25c7-40e1-b00a-f5efe40af689')}

    @pytest.mark.parametrize(
        'uri_template, path, expected',
        as_params(
            (
                '/widgets/{widget_id:uuid}',
                '/widgets/' + _TEST_UUID_STR,
                {'widget_id': _TEST_UUID},
            ),
            (
                '/widgets/{widget_id:uuid}/orders',
                '/widgets/' + _TEST_UUID_STR_SANS_HYPHENS + '/orders',
                {'widget_id': _TEST_UUID},
            ),
            (
                '/versions/diff/{left:uuid()}...{right:uuid()}',
                '/versions/diff/{}...{}'.format(_TEST_UUID_STR, _TEST_UUID_STR_2),
                {
                    'left': _TEST_UUID,
                    'right': _TEST_UUID_2,
                },
            ),
            (
                '/versions/diff/{left:uuid}...{right:uuid()}',
                '/versions/diff/{}...{}'.format(_TEST_UUID_STR, _TEST_UUID_STR_2),
                {
                    'left': _TEST_UUID,
                    'right': _TEST_UUID_2,
                },
            ),
            (
                '/versions/diff/{left:uuid()}...{right:uuid}',
                '/versions/diff/{}...{}'.format(_TEST_UUID_STR, _TEST_UUID_STR_2),
                {
                    'left': _TEST_UUID,
                    'right': _TEST_UUID_2,
                },
            ),
            (
                '/widgets/{widget_id:uuid}/orders',
                '/widgets/' + _TEST_UUID_STR_SANS_HYPHENS[:-1] + '/orders',
                None,
            ),
            prefix='uuid_converter',
        ),
    )
    def test_uuid_converter(client, resource, uri_template, path, expected):
>       client.app.add_route(uri_template, resource)

tests/test_uri_templates.py:361: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73bd28820>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c14af80>, 'CHECK...af80>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c14af80>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fd73c372c20>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ test_converter_custom[asgi-/({food:spam()}){food_too:spam("()")}-/(bacon)eggs-expected2] _

client = <falcon.testing.client.TestClient object at 0x7fd73c206050>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7fd73c207610>
uri_template = '/({food:spam()}){food_too:spam("()")}', path = '/(bacon)eggs'
expected = {'food': 'spam!', 'food_too': 'spam!'}

    @pytest.mark.parametrize(
        'uri_template, path, expected',
        [
            ('/{food:spam}', '/something', {'food': 'spam!'}),
            (
                '/{food:spam(")")}:{food_too:spam("()")}',
                '/bacon:eggs',
                {'food': 'spam!', 'food_too': 'spam!'},
            ),
            (
                '/({food:spam()}){food_too:spam("()")}',
                '/(bacon)eggs',
                {'food': 'spam!', 'food_too': 'spam!'},
            ),
        ],
    )
    def test_converter_custom(client, resource, uri_template, path, expected):
        class SpamConverter:
            def __init__(self, useless_text=None):
                pass
    
            def convert(self, fragment):
                return 'spam!'
    
        client.app.router_options.converters['spam'] = SpamConverter
>       client.app.add_route(uri_template, resource)

tests/test_uri_templates.py:413: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73bd28190>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c149090>, 'CHECK...9090>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c149090>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fd73c207610>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______________ test_float_converter_non_finite_allowed[asgi--inf] ______________

value = '-inf'
client = <falcon.testing.client.TestClient object at 0x7fd638f71150>

    @pytest.mark.parametrize('value', ['nan', '-inf', 'inf'])
    def test_float_converter_non_finite_allowed(value, client):
        resource1 = IDResource()
>       client.app.add_route('/{id:float(finite=False)}', resource1)

tests/test_uri_templates.py:243: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c0a0d60>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c162830>, 'CHECK...2830>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c162830>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7fd638f700d0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______ TestFalconTestingUtils.test_default_headers_with_override[asgi] ________

self = <test_utils.TestFalconTestingUtils object at 0x7fd5fc6f8400>
app = <falcon.asgi.app.App object at 0x7fd73bebcb80>

    def test_default_headers_with_override(self, app):
        resource = testing.SimpleTestResource()
>       app.add_route('/', resource)

tests/test_utils.py:756: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c246730>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c6cbd90>, 'CHECK...bd90>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c6cbd90>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fd638d8dea0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______ TestFalconTestingUtils.test_simulate_remote_addr[asgi-127.0.0.1] _______

self = <test_utils.TestFalconTestingUtils object at 0x7fd5fc700070>
app = <falcon.asgi.app.App object at 0x7fd73bebef80>, remote_addr = '127.0.0.1'

    @pytest.mark.parametrize(
        'remote_addr',
        [
            None,
            '127.0.0.1',
            '8.8.8.8',
            '104.24.101.85',
            '2606:4700:30::6818:6455',
        ],
    )
    def test_simulate_remote_addr(self, app, remote_addr):
        class ShowMyIPResource:
            def on_get(self, req, resp):
                resp.text = req.remote_addr
                resp.content_type = falcon.MEDIA_TEXT
    
>       app.add_route('/', ShowMyIPResource())

tests/test_utils.py:1001: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73bcba730>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c723b50>, 'CHECK...3b50>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c723b50>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestFalconTestingUtils.test_simulate_remote_addr.<locals>.ShowMyIPResource.on_get of <test_utils.TestFalconTestingUtils.test_simulate_remote_addr.<locals>.ShowMyIPResource object at 0x7fd639160820>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ TestFalconTestingUtils.test_query_string_in_path[asgi] ____________

self = <test_utils.TestFalconTestingUtils object at 0x7fd5fc6fbdc0>
app = <falcon.asgi.app.App object at 0x7fd73bebce80>

    def test_query_string_in_path(self, app):
        resource = testing.SimpleTestResource()
>       app.add_route('/thing', resource)

tests/test_utils.py:919: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73bcbb140>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c5630a0>, 'CHECK...30a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c5630a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fd73c49ccd0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________________ TestFalconTestingUtils.test_status[asgi] ___________________

self = <test_utils.TestFalconTestingUtils object at 0x7fd5fc6f8a00>
app = <falcon.asgi.app.App object at 0x7fd73bebee00>

    def test_status(self, app):
        resource = testing.SimpleTestResource(status=falcon.HTTP_702)
>       app.add_route('/', resource)

tests/test_utils.py:776: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73bcbbb50>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73bc94280>, 'CHECK...4280>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73bc94280>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fd73c22ba90>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestFalconTestingUtils.test_simulate_remote_addr[asgi-2606:4700:30::6818:6455] _

self = <test_utils.TestFalconTestingUtils object at 0x7fd5fc700340>
app = <falcon.asgi.app.App object at 0x7fd73bebd540>
remote_addr = '2606:4700:30::6818:6455'

    @pytest.mark.parametrize(
        'remote_addr',
        [
            None,
            '127.0.0.1',
            '8.8.8.8',
            '104.24.101.85',
            '2606:4700:30::6818:6455',
        ],
    )
    def test_simulate_remote_addr(self, app, remote_addr):
        class ShowMyIPResource:
            def on_get(self, req, resp):
                resp.text = req.remote_addr
                resp.content_type = falcon.MEDIA_TEXT
    
>       app.add_route('/', ShowMyIPResource())

tests/test_utils.py:1001: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73bc3e260>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c14a8c0>, 'CHECK...a8c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c14a8c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestFalconTestingUtils.test_simulate_remote_addr.<locals>.ShowMyIPResource.on_get of <test_utils.TestFalconTestingUtils.test_simulate_remote_addr.<locals>.ShowMyIPResource object at 0x7fd638f3b0a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________ TestFalconTestingUtils.test_path_must_start_with_slash[asgi] _________

self = <test_utils.TestFalconTestingUtils object at 0x7fd5fc6fa5c0>
app = <falcon.asgi.app.App object at 0x7fd73c1fb4c0>

    def test_path_must_start_with_slash(self, app):
>       app.add_route('/', testing.SimpleTestResource())

tests/test_utils.py:847: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73bcbbed0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c560310>, 'CHECK...0310>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c560310>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fd638efc250>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________ TestFalconTestingUtils.test_simulate_hostname[asgi] ______________

self = <test_utils.TestFalconTestingUtils object at 0x7fd5fc700490>
app = <falcon.asgi.app.App object at 0x7fd73bebef80>

    def test_simulate_hostname(self, app):
        resource = testing.SimpleTestResource()
>       app.add_route('/', resource)

tests/test_utils.py:1014: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73bd2a110>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c563eb0>, 'CHECK...3eb0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c563eb0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fd73c10b460>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ TestFalconTestingUtils.test_query_string[asgi] ________________

self = <test_utils.TestFalconTestingUtils object at 0x7fd5fc6fb070>
app = <falcon.asgi.app.App object at 0x7fd73bebfdc0>

    def test_query_string(self, app):
        class SomeResource:
            def on_get(self, req, resp):
                doc = {}
    
                doc['oid'] = req.get_param_as_int('oid')
                doc['detailed'] = req.get_param_as_bool('detailed')
                doc['things'] = req.get_param_as_list('things', int)
                doc['query_string'] = req.query_string
    
                resp.text = json.dumps(doc)
    
        app.req_options.auto_parse_qs_csv = True
>       app.add_route('/', SomeResource())

tests/test_utils.py:883: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c245930>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c561480>, 'CHECK...1480>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73c561480>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestFalconTestingUtils.test_query_string.<locals>.SomeResource.on_get of <test_utils.TestFalconTestingUtils.test_query_string.<locals>.SomeResource object at 0x7fd638ec4e80>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____ TestFalconTestingUtils.test_simulate_remote_addr[asgi-104.24.101.85] _____

self = <test_utils.TestFalconTestingUtils object at 0x7fd5fc700280>
app = <falcon.asgi.app.App object at 0x7fd73c1f90c0>
remote_addr = '104.24.101.85'

    @pytest.mark.parametrize(
        'remote_addr',
        [
            None,
            '127.0.0.1',
            '8.8.8.8',
            '104.24.101.85',
            '2606:4700:30::6818:6455',
        ],
    )
    def test_simulate_remote_addr(self, app, remote_addr):
        class ShowMyIPResource:
            def on_get(self, req, resp):
                resp.text = req.remote_addr
                resp.content_type = falcon.MEDIA_TEXT
    
>       app.add_route('/', ShowMyIPResource())

tests/test_utils.py:1001: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73bc3ccf0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73bc95f30>, 'CHECK...5f30>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73bc95f30>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestFalconTestingUtils.test_simulate_remote_addr.<locals>.ShowMyIPResource.on_get of <test_utils.TestFalconTestingUtils.test_simulate_remote_addr.<locals>.ShowMyIPResource object at 0x7fd638e8b640>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________ TestFalconTestingUtils.test_simulate_remote_addr[asgi-None] __________

self = <test_utils.TestFalconTestingUtils object at 0x7fd5fc700130>
app = <falcon.asgi.app.App object at 0x7fd73bebf940>, remote_addr = None

    @pytest.mark.parametrize(
        'remote_addr',
        [
            None,
            '127.0.0.1',
            '8.8.8.8',
            '104.24.101.85',
            '2606:4700:30::6818:6455',
        ],
    )
    def test_simulate_remote_addr(self, app, remote_addr):
        class ShowMyIPResource:
            def on_get(self, req, resp):
                resp.text = req.remote_addr
                resp.content_type = falcon.MEDIA_TEXT
    
>       app.add_route('/', ShowMyIPResource())

tests/test_utils.py:1001: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73bc3f840>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73bc94dc0>, 'CHECK...4dc0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73bc94dc0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestFalconTestingUtils.test_simulate_remote_addr.<locals>.ShowMyIPResource.on_get of <test_utils.TestFalconTestingUtils.test_simulate_remote_addr.<locals>.ShowMyIPResource object at 0x7fd6390ede70>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______________ TestFalconTestingUtils.test_default_headers[asgi] _______________

self = <test_utils.TestFalconTestingUtils object at 0x7fd5fc6f1cc0>
app = <falcon.asgi.app.App object at 0x7fd73bc71180>

    def test_default_headers(self, app):
        resource = testing.SimpleTestResource()
>       app.add_route('/', resource)

tests/test_utils.py:740: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73bc3d230>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73bc97a30>, 'CHECK...7a30>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73bc97a30>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fd73c4cec80>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ TestFalconTestingUtils.test_simulate_remote_addr[asgi-8.8.8.8] ________

self = <test_utils.TestFalconTestingUtils object at 0x7fd5fc7001f0>
app = <falcon.asgi.app.App object at 0x7fd73c1f90c0>, remote_addr = '8.8.8.8'

    @pytest.mark.parametrize(
        'remote_addr',
        [
            None,
            '127.0.0.1',
            '8.8.8.8',
            '104.24.101.85',
            '2606:4700:30::6818:6455',
        ],
    )
    def test_simulate_remote_addr(self, app, remote_addr):
        class ShowMyIPResource:
            def on_get(self, req, resp):
                resp.text = req.remote_addr
                resp.content_type = falcon.MEDIA_TEXT
    
>       app.add_route('/', ShowMyIPResource())

tests/test_utils.py:1001: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73bd28660>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73bc972e0>, 'CHECK...72e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73bc972e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestFalconTestingUtils.test_simulate_remote_addr.<locals>.ShowMyIPResource.on_get of <test_utils.TestFalconTestingUtils.test_simulate_remote_addr.<locals>.ShowMyIPResource object at 0x7fd73c22a890>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________ TestFalconTestingUtils.test_query_string_no_question[asgi] __________

self = <test_utils.TestFalconTestingUtils object at 0x7fd5fc6fb160>
app = <falcon.asgi.app.App object at 0x7fd73bebd540>

    def test_query_string_no_question(self, app):
>       app.add_route('/', testing.SimpleTestResource())

tests/test_utils.py:912: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73c245b60>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73bc95bd0>, 'CHECK...5bd0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73bc95bd0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fd638f39660>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________ TestFalconTestingUtils.test_cached_text_in_result[asgi] ____________

self = <test_utils.TestFalconTestingUtils object at 0x7fd5fc6faa10>
app = <falcon.asgi.app.App object at 0x7fd73bebcb80>

    def test_cached_text_in_result(self, app):
>       app.add_route('/', testing.SimpleTestResource(body='test'))

tests/test_utils.py:853: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd73bc3f530>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd63913c4c0>, 'CHECK...c4c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd63913c4c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fd73c4977c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ TestFalconTestingUtils.test_override_method_with_extras[asgi] _________

self = <test_utils.TestFalconTestingUtils object at 0x7fd5fc700c70>, asgi = True

    def test_override_method_with_extras(self, asgi):
        app = create_app(asgi)
>       app.add_route('/', testing.SimpleTestResource(body='test'))

tests/test_utils.py:1046: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:600: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd639144120>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73bc94c10>, 'CHECK...4c10>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd73bc94c10>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fd638f53160>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________________ test_client_simulate_aliases[asgi-HEAD] ____________________

asgi = True, method = 'HEAD'

    @pytest.mark.parametrize(
        'method', ['DELETE', 'GET', 'HEAD', 'LOCK', 'OPTIONS', 'PATCH', 'POST', 'PUT']
    )
    def test_client_simulate_aliases(asgi, method):
        def capture_method(req, resp):
            resp.content_type = falcon.MEDIA_TEXT
            resp.text = req.method
    
        app = create_app(asgi)
>       app.add_sink(capture_method)

tests/test_testing.py:188: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.asgi.app.App object at 0x7fd73bc72380>
sink = <function test_client_simulate_aliases.<locals>.capture_method at 0x7fd5e83765f0>
prefix = '/'

    def add_sink(self, sink: Callable, prefix: SinkPrefix = r'/'):
        if not iscoroutinefunction(sink) and is_python_func(sink):
            if _should_wrap_non_coroutines():
                sink = wrap_sync_to_async(sink)
            else:
>               raise CompatibilityError(
                    'The sink method must be an awaitable coroutine function '
                    'in order to be used safely with an ASGI app.'
                )
E               falcon.errors.CompatibilityError: The sink method must be an awaitable coroutine function in order to be used safely with an ASGI app.

falcon/asgi/app.py:740: CompatibilityError
__________________ test_client_simulate_aliases[asgi-OPTIONS] __________________

asgi = True, method = 'OPTIONS'

    @pytest.mark.parametrize(
        'method', ['DELETE', 'GET', 'HEAD', 'LOCK', 'OPTIONS', 'PATCH', 'POST', 'PUT']
    )
    def test_client_simulate_aliases(asgi, method):
        def capture_method(req, resp):
            resp.content_type = falcon.MEDIA_TEXT
            resp.text = req.method
    
        app = create_app(asgi)
>       app.add_sink(capture_method)

tests/test_testing.py:188: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.asgi.app.App object at 0x7fd73bc71c00>
sink = <function test_client_simulate_aliases.<locals>.capture_method at 0x7fd73c162830>
prefix = '/'

    def add_sink(self, sink: Callable, prefix: SinkPrefix = r'/'):
        if not iscoroutinefunction(sink) and is_python_func(sink):
            if _should_wrap_non_coroutines():
                sink = wrap_sync_to_async(sink)
            else:
>               raise CompatibilityError(
                    'The sink method must be an awaitable coroutine function '
                    'in order to be used safely with an ASGI app.'
                )
E               falcon.errors.CompatibilityError: The sink method must be an awaitable coroutine function in order to be used safely with an ASGI app.

falcon/asgi/app.py:740: CompatibilityError
__________________ test_client_simulate_aliases[asgi-DELETE] ___________________

asgi = True, method = 'DELETE'

    @pytest.mark.parametrize(
        'method', ['DELETE', 'GET', 'HEAD', 'LOCK', 'OPTIONS', 'PATCH', 'POST', 'PUT']
    )
    def test_client_simulate_aliases(asgi, method):
        def capture_method(req, resp):
            resp.content_type = falcon.MEDIA_TEXT
            resp.text = req.method
    
        app = create_app(asgi)
>       app.add_sink(capture_method)

tests/test_testing.py:188: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.asgi.app.App object at 0x7fd73bc72740>
sink = <function test_client_simulate_aliases.<locals>.capture_method at 0x7fd73c563d90>
prefix = '/'

    def add_sink(self, sink: Callable, prefix: SinkPrefix = r'/'):
        if not iscoroutinefunction(sink) and is_python_func(sink):
            if _should_wrap_non_coroutines():
                sink = wrap_sync_to_async(sink)
            else:
>               raise CompatibilityError(
                    'The sink method must be an awaitable coroutine function '
                    'in order to be used safely with an ASGI app.'
                )
E               falcon.errors.CompatibilityError: The sink method must be an awaitable coroutine function in order to be used safely with an ASGI app.

falcon/asgi/app.py:740: CompatibilityError
___________________ test_client_simulate_aliases[asgi-LOCK] ____________________

asgi = True, method = 'LOCK'

    @pytest.mark.parametrize(
        'method', ['DELETE', 'GET', 'HEAD', 'LOCK', 'OPTIONS', 'PATCH', 'POST', 'PUT']
    )
    def test_client_simulate_aliases(asgi, method):
        def capture_method(req, resp):
            resp.content_type = falcon.MEDIA_TEXT
            resp.text = req.method
    
        app = create_app(asgi)
>       app.add_sink(capture_method)

tests/test_testing.py:188: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.asgi.app.App object at 0x7fd73bc72440>
sink = <function test_client_simulate_aliases.<locals>.capture_method at 0x7fd73c14bac0>
prefix = '/'

    def add_sink(self, sink: Callable, prefix: SinkPrefix = r'/'):
        if not iscoroutinefunction(sink) and is_python_func(sink):
            if _should_wrap_non_coroutines():
                sink = wrap_sync_to_async(sink)
            else:
>               raise CompatibilityError(
                    'The sink method must be an awaitable coroutine function '
                    'in order to be used safely with an ASGI app.'
                )
E               falcon.errors.CompatibilityError: The sink method must be an awaitable coroutine function in order to be used safely with an ASGI app.

falcon/asgi/app.py:740: CompatibilityError
___________________ test_client_simulate_aliases[asgi-PATCH] ___________________

asgi = True, method = 'PATCH'

    @pytest.mark.parametrize(
        'method', ['DELETE', 'GET', 'HEAD', 'LOCK', 'OPTIONS', 'PATCH', 'POST', 'PUT']
    )
    def test_client_simulate_aliases(asgi, method):
        def capture_method(req, resp):
            resp.content_type = falcon.MEDIA_TEXT
            resp.text = req.method
    
        app = create_app(asgi)
>       app.add_sink(capture_method)

tests/test_testing.py:188: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.asgi.app.App object at 0x7fd73bc72f80>
sink = <function test_client_simulate_aliases.<locals>.capture_method at 0x7fd73c14be20>
prefix = '/'

    def add_sink(self, sink: Callable, prefix: SinkPrefix = r'/'):
        if not iscoroutinefunction(sink) and is_python_func(sink):
            if _should_wrap_non_coroutines():
                sink = wrap_sync_to_async(sink)
            else:
>               raise CompatibilityError(
                    'The sink method must be an awaitable coroutine function '
                    'in order to be used safely with an ASGI app.'
                )
E               falcon.errors.CompatibilityError: The sink method must be an awaitable coroutine function in order to be used safely with an ASGI app.

falcon/asgi/app.py:740: CompatibilityError
____________________ test_client_simulate_aliases[asgi-GET] ____________________

asgi = True, method = 'GET'

    @pytest.mark.parametrize(
        'method', ['DELETE', 'GET', 'HEAD', 'LOCK', 'OPTIONS', 'PATCH', 'POST', 'PUT']
    )
    def test_client_simulate_aliases(asgi, method):
        def capture_method(req, resp):
            resp.content_type = falcon.MEDIA_TEXT
            resp.text = req.method
    
        app = create_app(asgi)
>       app.add_sink(capture_method)

tests/test_testing.py:188: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.asgi.app.App object at 0x7fd73c1f90c0>
sink = <function test_client_simulate_aliases.<locals>.capture_method at 0x7fd73c6c9090>
prefix = '/'

    def add_sink(self, sink: Callable, prefix: SinkPrefix = r'/'):
        if not iscoroutinefunction(sink) and is_python_func(sink):
            if _should_wrap_non_coroutines():
                sink = wrap_sync_to_async(sink)
            else:
>               raise CompatibilityError(
                    'The sink method must be an awaitable coroutine function '
                    'in order to be used safely with an ASGI app.'
                )
E               falcon.errors.CompatibilityError: The sink method must be an awaitable coroutine function in order to be used safely with an ASGI app.

falcon/asgi/app.py:740: CompatibilityError
____________________ test_client_simulate_aliases[asgi-PUT] ____________________

asgi = True, method = 'PUT'

    @pytest.mark.parametrize(
        'method', ['DELETE', 'GET', 'HEAD', 'LOCK', 'OPTIONS', 'PATCH', 'POST', 'PUT']
    )
    def test_client_simulate_aliases(asgi, method):
        def capture_method(req, resp):
            resp.content_type = falcon.MEDIA_TEXT
            resp.text = req.method
    
        app = create_app(asgi)
>       app.add_sink(capture_method)

tests/test_testing.py:188: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.asgi.app.App object at 0x7fd73bebd780>
sink = <function test_client_simulate_aliases.<locals>.capture_method at 0x7fd73c563640>
prefix = '/'

    def add_sink(self, sink: Callable, prefix: SinkPrefix = r'/'):
        if not iscoroutinefunction(sink) and is_python_func(sink):
            if _should_wrap_non_coroutines():
                sink = wrap_sync_to_async(sink)
            else:
>               raise CompatibilityError(
                    'The sink method must be an awaitable coroutine function '
                    'in order to be used safely with an ASGI app.'
                )
E               falcon.errors.CompatibilityError: The sink method must be an awaitable coroutine function in order to be used safely with an ASGI app.

falcon/asgi/app.py:740: CompatibilityError
___________________ test_client_simulate_aliases[asgi-POST] ____________________

asgi = True, method = 'POST'

    @pytest.mark.parametrize(
        'method', ['DELETE', 'GET', 'HEAD', 'LOCK', 'OPTIONS', 'PATCH', 'POST', 'PUT']
    )
    def test_client_simulate_aliases(asgi, method):
        def capture_method(req, resp):
            resp.content_type = falcon.MEDIA_TEXT
            resp.text = req.method
    
        app = create_app(asgi)
>       app.add_sink(capture_method)

tests/test_testing.py:188: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.asgi.app.App object at 0x7fd73bebef80>
sink = <function test_client_simulate_aliases.<locals>.capture_method at 0x7fd73c222cb0>
prefix = '/'

    def add_sink(self, sink: Callable, prefix: SinkPrefix = r'/'):
        if not iscoroutinefunction(sink) and is_python_func(sink):
            if _should_wrap_non_coroutines():
                sink = wrap_sync_to_async(sink)
            else:
>               raise CompatibilityError(
                    'The sink method must be an awaitable coroutine function '
                    'in order to be used safely with an ASGI app.'
                )
E               falcon.errors.CompatibilityError: The sink method must be an awaitable coroutine function in order to be used safely with an ASGI app.

falcon/asgi/app.py:740: CompatibilityError
=============================== warnings summary ===============================
../../.local/lib/python3.10/site-packages/pyximport/pyximport.py:51
  /home/kaiyaok2/.local/lib/python3.10/site-packages/pyximport/pyximport.py:51: DeprecationWarning: the imp module is deprecated in favour of importlib and slated for removal in Python 3.12; see the module's documentation for alternative uses
    import imp

../../.local/lib/python3.10/site-packages/Cython/Distutils/old_build_ext.py:15
../../.local/lib/python3.10/site-packages/Cython/Distutils/old_build_ext.py:15
  /home/kaiyaok2/.local/lib/python3.10/site-packages/Cython/Distutils/old_build_ext.py:15: DeprecationWarning: dep_util is Deprecated. Use functions from setuptools instead.
    from distutils.dep_util import newer, newer_group

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/test_cmd_inspect_app.py::TestMain::test_inspect[internal-verbose]
FAILED tests/test_cmd_inspect_app.py::TestMain::test_inspect[not-internal-not-verbose]
FAILED tests/test_cmd_inspect_app.py::TestMain::test_inspect[not-internal-verbose]
FAILED tests/test_cmd_inspect_app.py::TestMain::test_routes_only[internal-not-verbose]
FAILED tests/test_cmd_inspect_app.py::TestMain::test_routes_only[not-internal-not-verbose]
FAILED tests/test_cmd_inspect_app.py::TestMain::test_routes_only[not-internal-verbose]
FAILED tests/test_cmd_inspect_app.py::TestMain::test_inspect[internal-not-verbose]
FAILED tests/test_cmd_inspect_app.py::TestMain::test_routes_only[internal-verbose]
FAILED tests/test_cmd_inspect_app.py::TestLoadApp::test_load_app_error[_MODULE]
FAILED tests/test_cmd_inspect_app.py::TestLoadApp::test_load_app_error[DummyResource]
FAILED tests/test_cmd_inspect_app.py::TestLoadApp::test_load_app[make_app] - ...
FAILED tests/test_cmd_inspect_app.py::TestLoadApp::test_load_app_error[foo]
FAILED tests/test_cmd_inspect_app.py::TestLoadApp::test_load_app[_APP] - Modu...
FAILED tests/asgi/test_cythonized_asgi.py::test_jsonchema_validator - TypeErr...
FAILED tests/asgi/test_cythonized_asgi.py::test_hooks - TypeError: The <bound...
FAILED tests/test_sinks.py::TestDefaultRouting::test_route_precedence_with_id[asgi]
FAILED tests/test_sinks.py::TestDefaultRouting::test_route_precedence_with_both_id[asgi]
FAILED tests/test_sinks.py::TestDefaultRouting::test_with_route[asgi] - TypeE...
FAILED tests/test_sinks.py::TestDefaultRouting::test_route_precedence[asgi]
FAILED tests/test_sinks.py::TestSinkMethodCompatibility::test_add_sync_sink_with_wrapping[asgi]
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-HTTPStatus.INTERNAL_SERVER_ERROR-500]
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-702-702] - TypeE...
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-HTTPStatus.OK-2001]
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-500-500] - TypeE...
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-HTTPStatus.ACCEPTED-202]
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-307-307] - TypeE...
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-702 Emacs-702]
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-HTTPStatus.FORBIDDEN-403]
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-200-200] - TypeE...
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-200 OK-200] - Ty...
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-HTTPStatus.USE_PROXY-305]
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-HTTPStatus.OK-2000]
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-HTTPStatus.NOT_IMPLEMENTED-501]
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-HTTPStatus.NOT_FOUND-404]
FAILED tests/test_cython.py::TestCythonized::test_imported_from_c_modules - a...
FAILED tests/test_cython.py::TestCythonized::test_stream_has_private_read - A...
FAILED tests/test_cors_middleware.py::TestCustomCorsMiddleware::test_allow_origin[asgi-allow2-fail_origins2-success_origins2]
FAILED tests/test_cors_middleware.py::TestCustomCorsMiddleware::test_allow_origin[asgi-test-fail_origins1-success_origins1]
FAILED tests/test_cors_middleware.py::TestCustomCorsMiddleware::test_allow_credential_wildcard[asgi]
FAILED tests/test_cors_middleware.py::TestCustomCorsMiddleware::test_expose_headers[asgi-attr2-foo, bar]
FAILED tests/test_cors_middleware.py::TestCustomCorsMiddleware::test_allow_origin_allow_credential[asgi]
FAILED tests/test_cors_middleware.py::TestCustomCorsMiddleware::test_expose_headers[asgi-foo-foo]
FAILED tests/test_cors_middleware.py::TestCustomCorsMiddleware::test_allow_credential_existing_origin[asgi]
FAILED tests/test_cors_middleware.py::TestCustomCorsMiddleware::test_allow_credential_list_or_str[asgi-allow0-successOrigin0]
FAILED tests/test_cors_middleware.py::TestCustomCorsMiddleware::test_allow_credential_list_or_str[asgi-foo-successOrigin1]
FAILED tests/test_cors_middleware.py::TestCustomCorsMiddleware::test_allow_origin[asgi-*-fail_origins0-success_origins0]
FAILED tests/test_cors_middleware.py::TestCustomCorsMiddleware::test_expose_headers[asgi-foo, bar-foo, bar]
FAILED tests/test_cors_middleware.py::TestCorsMiddleware::test_enabled_cors_handles_preflighting_no_headers_in_req[asgi]
FAILED tests/test_cors_middleware.py::TestCorsMiddleware::test_enabled_cors_no_origin[asgi]
FAILED tests/test_cors_middleware.py::TestCorsMiddleware::test_enabled_cors_handles_preflighting[asgi]
FAILED tests/test_cors_middleware.py::TestCorsMiddleware::test_enabled_cors_should_accept_all_origins_requests[asgi]
FAILED tests/test_cors_middleware.py::TestCorsMiddleware::test_enabled_cors_should_add_extra_headers_on_response[asgi]
FAILED tests/test_cors_middleware.py::TestCorsMiddleware::test_disabled_cors_should_not_add_any_extra_headers[asgi]
FAILED tests/test_middleware.py::TestRequestTimeMiddleware::test_response_middleware_raises_exception[asgi]
FAILED tests/test_middleware.py::TestRequestTimeMiddleware::test_log_get_request[asgi-False]
FAILED tests/test_middleware.py::TestRequestTimeMiddleware::test_skip_process_resource[asgi]
FAILED tests/test_middleware.py::TestRequestTimeMiddleware::test_log_get_request[asgi-True]
FAILED tests/test_middleware.py::TestResourceMiddleware::test_can_access_resource_params[asgi-True]
FAILED tests/test_middleware.py::TestResourceMiddleware::test_can_access_resource_params[asgi-False]
FAILED tests/test_middleware.py::TestTransactionIdMiddleware::test_generate_trans_id_with_request[asgi]
FAILED tests/test_middleware.py::TestCORSMiddlewareWithAnotherMiddleware::test_api_initialization_with_cors_enabled_and_middleware_param[asgi-mw1-True]
FAILED tests/test_middleware.py::TestCORSMiddlewareWithAnotherMiddleware::test_api_initialization_with_cors_enabled_and_middleware_param[asgi-mw2-True]
FAILED tests/test_middleware.py::TestCORSMiddlewareWithAnotherMiddleware::test_api_initialization_with_cors_enabled_and_middleware_param[asgi-mw0-True]
FAILED tests/test_middleware.py::TestCORSMiddlewareWithAnotherMiddleware::test_api_initialization_with_cors_enabled_and_middleware_param[asgi-mw3-True]
FAILED tests/test_middleware.py::TestErrorHandling::test_http_status_raised_from_error_handler[asgi]
FAILED tests/test_middleware.py::TestErrorHandling::test_error_composed_before_resp_middleware_called[asgi]
FAILED tests/test_middleware.py::TestEmptySignatureMiddleware::test_dont_need_params_in_signature[asgi]
FAILED tests/test_middleware.py::TestShortCircuiting::test_process_resource_cached[asgi-True]
FAILED tests/test_middleware.py::TestShortCircuiting::test_process_resource_cached[asgi-False]
FAILED tests/test_middleware.py::TestShortCircuiting::test_process_request_cached[asgi-True]
FAILED tests/test_middleware.py::TestShortCircuiting::test_process_request_cached[asgi-False]
FAILED tests/test_middleware.py::TestShortCircuiting::test_process_request_not_cached[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_order_mw_executed_when_exception_in_rsrc[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_middleware_execution_order[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_inner_mw_throw_exception_while_processing_resp[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_order_independent_mw_executed_when_exception_in_rsrc[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_order_mw_executed_when_exception_in_resp[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_multiple_response_mw_throw_exception[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_inner_mw_with_ex_handler_throw_exception[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_order_mw_executed_when_exception_in_req[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_order_independent_mw_executed_when_exception_in_resp[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_inner_mw_throw_exception[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_independent_middleware_execution_order[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_legacy_middleware_called_with_correct_args[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_generate_trans_id_and_time_with_request[asgi-False]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_generate_trans_id_and_time_with_request[asgi-True]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_outer_mw_with_ex_handler_throw_exception[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_order_independent_mw_executed_when_exception_in_req[asgi]
FAILED tests/test_middleware.py::TestRemoveBasePathMiddleware::test_base_path_is_removed_before_routing[asgi]
FAILED tests/test_after_hooks.py::test_wrapped_resource[asgi-resource0] - Typ...
FAILED tests/test_after_hooks.py::test_wrapped_resource_with_hooks_aware_of_resource[asgi]
FAILED tests/test_after_hooks.py::test_wrapped_resource[asgi-resource1] - Typ...
FAILED tests/test_after_hooks.py::test_resource_with_uri_fields[asgi-resource1]
FAILED tests/test_after_hooks.py::test_resource_with_uri_fields[asgi-resource0]
FAILED tests/test_inspect.py::TestInspectApp::test_static_routes[asgi] - falc...
FAILED tests/test_inspect.py::TestInspectApp::test_app[asgi] - falcon.errors....
FAILED tests/test_inspect.py::TestInspectApp::test_sink[asgi] - falcon.errors...
FAILED tests/test_inspect.py::TestInspectApp::test_error_handler[asgi] - falc...
FAILED tests/test_inspect.py::TestInspectApp::test_middleware[asgi] - falcon....
FAILED tests/test_inspect.py::TestInspectApp::test_routes[asgi] - falcon.erro...
FAILED tests/test_inspect.py::TestInspectApp::test_middleware_tree[asgi] - fa...
FAILED tests/test_uri_templates.py::test_single[asgi-widget_id] - TypeError: ...
FAILED tests/test_uri_templates.py::test_same_level_complex_var[asgi-True] - ...
FAILED tests/test_uri_templates.py::test_uuid_converter_complex_segment[asgi]
FAILED tests/test_uri_templates.py::test_adding_suffix_routes[asgi] - TypeErr...
FAILED tests/test_uri_templates.py::test_float_converter[asgi-/{id:float(min=1.9)}-1.9]
FAILED tests/test_uri_templates.py::test_float_converter[asgi-/{id:float(1)}-2.1]
FAILED tests/test_uri_templates.py::test_float_converter[asgi-/{id:float(min=1.8, max=3)}-1.9]
FAILED tests/test_uri_templates.py::test_uuid_converter[asgi-uuid_converter_4]
FAILED tests/test_uri_templates.py::test_converter_custom[asgi-/{food:spam}-/something-expected0]
FAILED tests/test_uri_templates.py::test_with_and_without_trailing_slash[asgi-False]
FAILED tests/test_uri_templates.py::test_multiple[asgi] - TypeError: The <bou...
FAILED tests/test_uri_templates.py::test_float_converter[asgi-/{id:float(1)}-2]
FAILED tests/test_uri_templates.py::test_converter_custom[asgi-/{food:spam(")")}:{food_too:spam("()")}-/bacon:eggs-expected1]
FAILED tests/test_uri_templates.py::test_uuid_converter[asgi-uuid_converter_5]
FAILED tests/test_uri_templates.py::test_int_converter_rejections[asgi-/{id:int(min=124)}]
FAILED tests/test_uri_templates.py::test_uuid_converter[asgi-uuid_converter_6]
FAILED tests/test_uri_templates.py::test_float_converter_non_finite_disallowed[asgi]
FAILED tests/test_uri_templates.py::test_float_converter[asgi-/{id:float(min=1.9)}-2]
FAILED tests/test_uri_templates.py::test_uuid_converter[asgi-uuid_converter_2]
FAILED tests/test_uri_templates.py::test_float_converter[asgi-/{id:float}-2]
FAILED tests/test_uri_templates.py::test_int_converter[asgi-/{id:int(min=123, max=123)}]
FAILED tests/test_uri_templates.py::test_int_converter_rejections[asgi-/{id:int(2)}]
FAILED tests/test_uri_templates.py::test_float_converter_non_finite_allowed[asgi-nan]
FAILED tests/test_uri_templates.py::test_single[asgi-id] - TypeError: The <bo...
FAILED tests/test_uri_templates.py::test_datetime_converter[asgi-/{start_year:int}/{timestamp:dt("%Y-%m-%d %H:%M")}-/1961/1969-07-21 14:30-dt_expected2]
FAILED tests/test_uri_templates.py::test_datetime_converter[asgi-/{start_year:int}-to-{timestamp:dt}-/1961-to-1969-07-21T02:56:00Z-dt_expected0]
FAILED tests/test_uri_templates.py::test_same_level_complex_var[asgi-False]
FAILED tests/test_uri_templates.py::test_uuid_converter[asgi-uuid_converter_3]
FAILED tests/test_uri_templates.py::test_float_converter[asgi-/{id:float}-1.9]
FAILED tests/test_uri_templates.py::test_float_converter[asgi-/{id:float(min=1.8, max=3)}-2.1]
FAILED tests/test_uri_templates.py::test_float_converter_non_finite_allowed[asgi-inf]
FAILED tests/test_uri_templates.py::test_float_converter[asgi-/{id:float(min=1.9)}-2.1]
FAILED tests/test_uri_templates.py::test_single[asgi-id123] - TypeError: The ...
FAILED tests/test_uri_templates.py::test_float_converter[asgi-/{id:float(min=1.8, max=3)}-2]
FAILED tests/test_uri_templates.py::test_float_converter[asgi-/{id:float}-2.1]
FAILED tests/test_uri_templates.py::test_datetime_converter[asgi-/{start_year:int}-to-{timestamp:dt("%Y-%m")}-/1961-to-1969-07-21-None]
FAILED tests/test_uri_templates.py::test_root_path[asgi] - TypeError: The <bo...
FAILED tests/test_uri_templates.py::test_with_and_without_trailing_slash[asgi-True]
FAILED tests/test_uri_templates.py::test_float_converter[asgi-/{id:float(1)}-1.9]
FAILED tests/test_uri_templates.py::test_no_vars[asgi] - TypeError: The <boun...
FAILED tests/test_uri_templates.py::test_datetime_converter[asgi-/{start_year:int}-to-{timestamp:dt("%Y-%m-%d")}-/1961-to-1969-07-21-dt_expected1]
FAILED tests/test_uri_templates.py::test_single_trailing_slash[asgi] - TypeEr...
FAILED tests/test_uri_templates.py::test_single_path_segment[asgi] - TypeErro...
FAILED tests/test_uri_templates.py::test_int_converter[asgi-/{id:int}] - Type...
FAILED tests/test_uri_templates.py::test_int_converter_rejections[asgi-/{id:int(num_digits=3, max=100)}]
FAILED tests/test_uri_templates.py::test_int_converter[asgi-/{id:int(3)}] - T...
FAILED tests/test_uri_templates.py::test_special_chars[asgi] - TypeError: The...
FAILED tests/test_uri_templates.py::test_int_converter[asgi-/{id:int(min=123)}]
FAILED tests/test_uri_templates.py::test_uuid_converter[asgi-uuid_converter_1]
FAILED tests/test_uri_templates.py::test_converter_custom[asgi-/({food:spam()}){food_too:spam("()")}-/(bacon)eggs-expected2]
FAILED tests/test_uri_templates.py::test_float_converter_non_finite_allowed[asgi--inf]
FAILED tests/test_utils.py::TestFalconTestingUtils::test_default_headers_with_override[asgi]
FAILED tests/test_utils.py::TestFalconTestingUtils::test_simulate_remote_addr[asgi-127.0.0.1]
FAILED tests/test_utils.py::TestFalconTestingUtils::test_query_string_in_path[asgi]
FAILED tests/test_utils.py::TestFalconTestingUtils::test_status[asgi] - TypeE...
FAILED tests/test_utils.py::TestFalconTestingUtils::test_simulate_remote_addr[asgi-2606:4700:30::6818:6455]
FAILED tests/test_utils.py::TestFalconTestingUtils::test_path_must_start_with_slash[asgi]
FAILED tests/test_utils.py::TestFalconTestingUtils::test_simulate_hostname[asgi]
FAILED tests/test_utils.py::TestFalconTestingUtils::test_query_string[asgi]
FAILED tests/test_utils.py::TestFalconTestingUtils::test_simulate_remote_addr[asgi-104.24.101.85]
FAILED tests/test_utils.py::TestFalconTestingUtils::test_simulate_remote_addr[asgi-None]
FAILED tests/test_utils.py::TestFalconTestingUtils::test_default_headers[asgi]
FAILED tests/test_utils.py::TestFalconTestingUtils::test_simulate_remote_addr[asgi-8.8.8.8]
FAILED tests/test_utils.py::TestFalconTestingUtils::test_query_string_no_question[asgi]
FAILED tests/test_utils.py::TestFalconTestingUtils::test_cached_text_in_result[asgi]
FAILED tests/test_utils.py::TestFalconTestingUtils::test_override_method_with_extras[asgi]
FAILED tests/test_testing.py::test_client_simulate_aliases[asgi-HEAD] - falco...
FAILED tests/test_testing.py::test_client_simulate_aliases[asgi-OPTIONS] - fa...
FAILED tests/test_testing.py::test_client_simulate_aliases[asgi-DELETE] - fal...
FAILED tests/test_testing.py::test_client_simulate_aliases[asgi-LOCK] - falco...
FAILED tests/test_testing.py::test_client_simulate_aliases[asgi-PATCH] - falc...
FAILED tests/test_testing.py::test_client_simulate_aliases[asgi-GET] - falcon...
FAILED tests/test_testing.py::test_client_simulate_aliases[asgi-PUT] - falcon...
FAILED tests/test_testing.py::test_client_simulate_aliases[asgi-POST] - falco...
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_rejected[_uvicorn_factory-4040-True]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_rejected[_uvicorn_factory-None-True]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_send_before_accept[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_type_mismatch[_uvicorn_factory-text-recv]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_recv_before_accept[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_rejected[_uvicorn_factory-4040-False]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_passing_path_params[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_missing_responder[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_close_code_on_unhandled_http_error[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_select_subprotocol_known[_uvicorn_factory-*-amqp]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_invalid_close_code[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_rejected[_uvicorn_factory-None-False]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_close_code_on_unhandled_error[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_hello[_uvicorn_factory-4321-True]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_hello[_uvicorn_factory-None-True]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_hello[_uvicorn_factory-4321-False]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_type_mismatch[_uvicorn_factory-text-send]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_type_mismatch[_uvicorn_factory-data-send]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_disconnecting_client_early[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_hello[_uvicorn_factory-None-False]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_select_subprotocol_known[_uvicorn_factory-wamp-wamp]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_select_subprotocol_unknown[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_type_mismatch[_uvicorn_factory-data-recv]
ERROR tests/asgi/test_asgi_servers.py::TestASGIServer::test_post_multipart_form[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestASGIServer::test_post_read_bounded_stream[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestASGIServer::test_post_multiple[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestASGIServer::test_put[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestASGIServer::test_post_invalid_content_length[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestASGIServer::test_post_read_bounded_stream_no_body[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestASGIServer::test_sse_client_disconnects_early[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestASGIServer::test_get[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestASGIServer::test_post_read_bounded_stream_large[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestASGIServer::test_sse[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestASGIServer::test_head_405[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestASGIServer::test_stream_chunked_request[_uvicorn_factory]
ERROR tests/test_before_hooks.py::test_input_validator_inherited[asgi] - Type...
ERROR tests/test_before_hooks.py::test_piggybacking_resource_post_and_delete[True]
ERROR tests/test_before_hooks.py::test_wrapped_resource[asgi] - TypeError: Th...
ERROR tests/test_before_hooks.py::test_multiple_resource_hooks[asgi-resource0]
ERROR tests/test_before_hooks.py::test_param_validator[asgi] - TypeError: The...
ERROR tests/test_before_hooks.py::test_field_validator[asgi-resource2] - Type...
ERROR tests/test_before_hooks.py::test_piggybacking_resource_post_item[True]
ERROR tests/test_before_hooks.py::test_wrapped_resource_with_hooks_aware_of_resource[asgi]
ERROR tests/test_before_hooks.py::test_field_validator[asgi-resource1] - Type...
ERROR tests/test_before_hooks.py::test_multiple_resource_hooks[asgi-resource1]
ERROR tests/test_before_hooks.py::test_field_validator[asgi-resource0] - Type...
ERROR tests/test_before_hooks.py::test_input_validator[asgi] - TypeError: The...
ERROR tests/test_httpstatus.py::TestHTTPStatus::test_raise_status_in_before_hook[True]
ERROR tests/test_httpstatus.py::TestHTTPStatus::test_raise_status_in_responder[True]
ERROR tests/test_httpstatus.py::TestHTTPStatus::test_raise_status_empty_body[True]
ERROR tests/test_httpstatus.py::TestHTTPStatus::test_raise_status_survives_after_hooks[True]
ERROR tests/test_httpstatus.py::TestHTTPStatus::test_raise_status_runs_after_hooks[True]
ERROR tests/test_httpstatus.py::TestHTTPStatusWithMiddleware::test_raise_status_in_process_request[True]
ERROR tests/test_httpstatus.py::TestHTTPStatusWithMiddleware::test_raise_status_runs_process_response[True]
ERROR tests/test_httpstatus.py::TestHTTPStatusWithMiddleware::test_raise_status_in_process_resource[True]
ERROR tests/test_httpstatus.py::TestNoBodyWithStatus::test_media_is_set[asgi]
ERROR tests/test_httpstatus.py::TestNoBodyWithStatus::test_body_is_set[asgi]
ERROR tests/test_httpstatus.py::TestNoBodyWithStatus::test_data_is_set[asgi]
ERROR tests/test_httperror.py::TestHTTPError::test_invalid_param[asgi] - Type...
ERROR tests/test_httperror.py::TestHTTPError::test_forbidden[asgi-application/json]
ERROR tests/test_httperror.py::TestHTTPError::test_client_does_not_accept_anything[asgi]
ERROR tests/test_httperror.py::TestHTTPError::test_413[asgi] - TypeError: The...
ERROR tests/test_httperror.py::TestHTTPError::test_client_does_not_accept_json_or_xml[asgi]
ERROR tests/test_httperror.py::TestHTTPError::test_414_with_custom_kwargs[asgi]
ERROR tests/test_httperror.py::TestHTTPError::test_forbidden[asgi-application/json-patch+json]
ERROR tests/test_httperror.py::TestHTTPError::test_title_default_message_if_none[asgi-503-bytes]
ERROR tests/test_httperror.py::TestHTTPError::test_custom_serializer_no_representation[asgi]
ERROR tests/test_httperror.py::TestHTTPError::test_410_with_body[asgi] - Type...
ERROR tests/test_httperror.py::TestHTTPError::test_title_default_message_if_none[asgi-503-str]
ERROR tests/test_httperror.py::TestHTTPError::test_411[asgi] - TypeError: The...
ERROR tests/test_httperror.py::TestHTTPError::test_custom_error_serializer_optional_representation[asgi-GET-/404-404]
ERROR tests/test_httperror.py::TestHTTPError::test_429_datetime[asgi] - TypeE...
ERROR tests/test_httperror.py::TestHTTPError::test_no_description_json[asgi]
ERROR tests/test_httperror.py::TestHTTPError::test_custom_error_serializer_optional_representation[asgi-BREW-/notfound-400]
ERROR tests/test_httperror.py::TestHTTPError::test_unicode_xml[asgi] - TypeEr...
ERROR tests/test_httperror.py::TestHTTPError::test_414[asgi] - TypeError: The...
ERROR tests/test_httperror.py::TestHTTPError::test_429_no_retry_after[asgi]
ERROR tests/test_httperror.py::TestHTTPError::test_temporary_413_integer_retry_after[asgi]
ERROR tests/test_httperror.py::TestHTTPError::test_503_integer_retry_after[asgi]
ERROR tests/test_httperror.py::TestHTTPError::test_missing_param[asgi] - Type...
ERROR tests/test_httperror.py::TestHTTPError::test_416[asgi] - TypeError: The...
ERROR tests/test_httperror.py::TestHTTPError::test_429[asgi] - TypeError: The...
ERROR tests/test_httperror.py::TestHTTPError::test_epic_fail_xml[asgi-application/xml]
ERROR tests/test_httperror.py::TestHTTPError::test_epic_fail_xml[asgi-application/atom+xml]
ERROR tests/test_httperror.py::TestHTTPError::test_title_default_message_if_none[asgi-503-HTTPStatus]
ERROR tests/test_httperror.py::TestHTTPError::test_405_without_body[asgi] - T...
ERROR tests/test_httperror.py::TestHTTPError::test_404_without_body[asgi] - T...
ERROR tests/test_httperror.py::TestHTTPError::test_503_datetime_retry_after[asgi]
ERROR tests/test_httperror.py::TestHTTPError::test_unicode_json[asgi] - TypeE...
ERROR tests/test_httperror.py::TestHTTPError::test_405_without_body_with_extra_headers_double_check[asgi]
ERROR tests/test_httperror.py::TestHTTPError::test_title_default_message_if_none[asgi-503 Service Unavailable-bytes]
ERROR tests/test_httperror.py::TestHTTPError::test_title_default_message_if_none[asgi-503 Service Unavailable-str]
ERROR tests/test_httperror.py::TestHTTPError::test_custom_error_serializer_optional_representation[asgi-REPORT-/404-405]
ERROR tests/test_httperror.py::TestHTTPError::test_epic_fail_json[asgi] - Typ...
ERROR tests/test_httperror.py::TestHTTPError::test_invalid_header[asgi] - Typ...
ERROR tests/test_httperror.py::TestHTTPError::test_serialize_error_uses_media_handler[asgi]
ERROR tests/test_httperror.py::TestHTTPError::test_misc[asgi] - TypeError: Th...
ERROR tests/test_httperror.py::TestHTTPError::test_404_with_body[asgi] - Type...
ERROR tests/test_httperror.py::TestHTTPError::test_no_description_xml[asgi]
ERROR tests/test_httperror.py::TestHTTPError::test_414_with_description[asgi]
ERROR tests/test_httperror.py::TestHTTPError::test_401[asgi] - TypeError: The...
ERROR tests/test_httperror.py::TestHTTPError::test_epic_fail_xml[asgi-text/xml]
ERROR tests/test_httperror.py::TestHTTPError::test_temporary_413_datetime_retry_after[asgi]
ERROR tests/test_httperror.py::TestHTTPError::test_405_with_body[asgi] - Type...
ERROR tests/test_httperror.py::TestHTTPError::test_forbidden[asgi-application/vnd.company.system.project.resource+json;v=1.1]
ERROR tests/test_httperror.py::TestHTTPError::test_title_default_message_if_none[asgi-503-int]
ERROR tests/test_httperror.py::TestHTTPError::test_414_with_title[asgi] - Typ...
ERROR tests/test_httperror.py::TestHTTPError::test_serialize_no_json_media_handler[asgi]
ERROR tests/test_httperror.py::TestHTTPError::test_custom_error_serializer[asgi]
ERROR tests/test_httperror.py::TestHTTPError::test_base_class[asgi] - TypeErr...
ERROR tests/test_httperror.py::TestHTTPError::test_custom_error_serializer_optional_representation[asgi-GET-/notfound-404]
ERROR tests/test_httperror.py::TestHTTPError::test_405_without_body_with_extra_headers[asgi]
ERROR tests/test_httperror.py::TestHTTPError::test_missing_header[asgi] - Typ...
ERROR tests/test_httperror.py::TestHTTPError::test_epic_fail_xml[asgi-application/vnd.company.system.project.resource+xml;v=1.1]
ERROR tests/test_httperror.py::TestHTTPError::test_410_without_body[asgi] - T...
ERROR tests/test_wsgi_servers.py::TestWSGIServer::test_static_file_byte_range[uvicorn--47-The content of this comment is part of a test.\n]
ERROR tests/test_wsgi_servers.py::TestWSGIServer::test_get_deprecated[gunicorn]
ERROR tests/test_wsgi_servers.py::TestWSGIServer::test_static_file[uvicorn]
ERROR tests/test_wsgi_servers.py::TestWSGIServer::test_static_file_byte_range[uvicorn-32-38-random]
ERROR tests/test_wsgi_servers.py::TestWSGIServer::test_post_multipart_form[uvicorn]
ERROR tests/test_wsgi_servers.py::TestWSGIServer::test_static_file_byte_range[uvicorn-7--hashlib]
ERROR tests/test_wsgi_servers.py::TestWSGIServer::test_static_file_byte_range[uvicorn-2-6-port]
ERROR tests/test_wsgi_servers.py::TestWSGIServer::test_static_file_byte_range[gunicorn--47-The content of this comment is part of a test.\n]
ERROR tests/test_wsgi_servers.py::TestWSGIServer::test_post_multipart_form[gunicorn]
ERROR tests/test_wsgi_servers.py::TestWSGIServer::test_get[uvicorn] - Failed:...
ERROR tests/test_wsgi_servers.py::TestWSGIServer::test_static_file_byte_range[gunicorn-2-6-port]
ERROR tests/test_wsgi_servers.py::TestWSGIServer::test_static_file_byte_range[gunicorn-7--hashlib]
ERROR tests/test_wsgi_servers.py::TestWSGIServer::test_static_file[gunicorn]
ERROR tests/test_wsgi_servers.py::TestWSGIServer::test_get_deprecated[uvicorn]
ERROR tests/test_wsgi_servers.py::TestWSGIServer::test_static_file_byte_range[gunicorn-32-38-random]
ERROR tests/test_wsgi_servers.py::TestWSGIServer::test_get[gunicorn] - Failed...
ERROR tests/test_http_custom_method_routing.py::test_bar[asgi] - TypeError: T...
ERROR tests/test_http_custom_method_routing.py::test_map_http_methods[asgi]
ERROR tests/test_http_custom_method_routing.py::test_foo[asgi] - TypeError: T...
ERROR tests/test_http_method_routing.py::TestHttpMethodRouting::test_meta_and_others_disallowed[asgi-SETECASTRONOMY]
ERROR tests/test_http_method_routing.py::TestHttpMethodRouting::test_default_on_options[asgi]
ERROR tests/test_http_method_routing.py::TestHttpMethodRouting::test_put[asgi]
ERROR tests/test_http_method_routing.py::TestHttpMethodRouting::test_on_options[asgi]
ERROR tests/test_http_method_routing.py::TestHttpMethodRouting::test_misc[asgi]
ERROR tests/test_http_method_routing.py::TestHttpMethodRouting::test_meta_and_others_disallowed[asgi-WEBSOCKET]
ERROR tests/test_http_method_routing.py::TestHttpMethodRouting::test_get[asgi]
ERROR tests/test_http_method_routing.py::TestHttpMethodRouting::test_methods_not_allowed_complex[asgi]
ERROR tests/test_http_method_routing.py::TestHttpMethodRouting::test_methods_not_allowed_simple[asgi]
ERROR tests/test_http_method_routing.py::TestHttpMethodRouting::test_report[asgi]
ERROR tests/test_http_method_routing.py::TestHttpMethodRouting::test_post_not_allowed[asgi]
ERROR tests/test_http_method_routing.py::TestHttpMethodRouting::test_method_not_allowed_with_param[asgi]
= 175 failed, 3166 passed, 180 skipped, 3 warnings, 146 errors in 2072.40s (0:34:32) =
