============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.2.2, pluggy-1.3.0
Using --randomly-seed=1705881542
PyQt5 5.15.10 -- Qt runtime 5.15.2 -- Qt compiled 5.15.2
rootdir: /home/kaiyaok2/PythonProjects/falcon, configfile: pyproject.toml, testpaths: tests
plugins: hypothesis-6.81.1, cov-4.1.0, randomly-3.1.0, typeguard-4.1.5, timeout-1.4.2, qt-4.3.1, nbval-0.10.0, mock-3.12.0, tcp-0.1.1, textual-snapshot-0.4.0, asyncio-0.21.1, xdist-3.2.1, cookies-0.7.0, instafail-0.5.0, syrupy-4.6.0, anyio-3.7.1
asyncio: mode=strict
collected 3662 items

tests/test_response.py .
current test PASSED/SKIPPED -- test_response_attempt_to_set_read_only_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 0.01849198341369629s cumulative, 0.01849198341369629s individual

.
current test PASSED/SKIPPED -- test_response_get_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 0.02937006950378418s cumulative, 0.01087808609008789s individual

.
current test PASSED/SKIPPED -- test_response_set_content_type_not_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 0.04004621505737305s cumulative, 0.010676145553588867s individual

.
current test PASSED/SKIPPED -- test_response_option_mimetype_init in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 0.055937767028808594s cumulative, 0.015891551971435547s individual

.
current test PASSED/SKIPPED -- test_response_set_content_type_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 0.08080196380615234s cumulative, 0.02486419677734375s individual

.
current test PASSED/SKIPPED -- test_response_get_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 0.08888697624206543s cumulative, 0.008085012435913086s individual

.
current test PASSED/SKIPPED -- test_response_set_content_type_not_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 0.09938883781433105s cumulative, 0.010501861572265625s individual

.
current test PASSED/SKIPPED -- test_response_removed_stream_len in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 0.10977458953857422s cumulative, 0.010385751724243164s individual

.
current test PASSED/SKIPPED -- test_response_set_content_type_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 0.1362903118133545s cumulative, 0.026515722274780273s individual

.
current test PASSED/SKIPPED -- test_response_removed_stream_len in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 0.1600809097290039s cumulative, 0.023790597915649414s individual

.
current test PASSED/SKIPPED -- test_response_attempt_to_set_read_only_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 0.18883824348449707s cumulative, 0.028757333755493164s individual


tests/test_request_context.py .
current test PASSED/SKIPPED -- test_custom_request_context in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_context.py: 0.19933032989501953s cumulative, 0.010492086410522461s individual

.
current test PASSED/SKIPPED -- test_default_request_context in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_context.py: 0.22662830352783203s cumulative, 0.0272979736328125s individual

.
current test PASSED/SKIPPED -- test_custom_request_context_request_access in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_context.py: 0.24898242950439453s cumulative, 0.0223541259765625s individual

.
current test PASSED/SKIPPED -- test_custom_request_context_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_context.py: 0.25406622886657715s cumulative, 0.005083799362182617s individual


tests/test_hello.py .
current test PASSED/SKIPPED -- test_no_body_on_head in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 0.2854743003845215s cumulative, 0.031408071517944336s individual

.
current test PASSED/SKIPPED -- test_stream_known_len in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 0.31237101554870605s cumulative, 0.02689671516418457s individual

.
current test PASSED/SKIPPED -- test_filelike in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 0.328951358795166s cumulative, 0.01658034324645996s individual

.
current test PASSED/SKIPPED -- test_filelike_closing in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 0.3437628746032715s cumulative, 0.014811515808105469s individual

.
current test PASSED/SKIPPED -- test_no_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 0.3574259281158447s cumulative, 0.013663053512573242s individual

.
current test PASSED/SKIPPED -- test_filelike_using_helper in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 0.3712940216064453s cumulative, 0.013868093490600586s individual

.
current test PASSED/SKIPPED -- test_env_headers_list_of_tuples in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 0.3769505023956299s cumulative, 0.00565648078918457s individual

.
current test PASSED/SKIPPED -- test_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 0.3941679000854492s cumulative, 0.017217397689819336s individual

.
current test PASSED/SKIPPED -- test_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 0.41081714630126953s cumulative, 0.016649246215820312s individual

.
current test PASSED/SKIPPED -- test_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 0.4268612861633301s cumulative, 0.016044139862060547s individual

.
current test PASSED/SKIPPED -- test_stream_chunked in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 0.456834077835083s cumulative, 0.02997279167175293s individual

.
current test PASSED/SKIPPED -- test_root_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 0.4807751178741455s cumulative, 0.0239410400390625s individual

.
current test PASSED/SKIPPED -- test_filelike_closing in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 0.5070419311523438s cumulative, 0.026266813278198242s individual

.
current test PASSED/SKIPPED -- test_status_not_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 0.5270261764526367s cumulative, 0.01998424530029297s individual


tests/test_deprecations.py .
current test PASSED/SKIPPED -- test_bounded_stream in /home/kaiyaok2/PythonProjects/falcon/tests/test_deprecations.py: 0.5349030494689941s cumulative, 0.007876873016357422s individual


tests/test_request_media.py .
current test PASSED/SKIPPED -- test_null_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 0.5595858097076416s cumulative, 0.02468276023864746s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 0.6068952083587646s cumulative, 0.04730939865112305s individual

.
current test PASSED/SKIPPED -- test_error_after_first_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 0.635993242263794s cumulative, 0.029098033905029297s individual

.
current test PASSED/SKIPPED -- test_null_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 0.6575915813446045s cumulative, 0.021598339080810547s individual

.
current test PASSED/SKIPPED -- test_complete_consumption in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 0.7112410068511963s cumulative, 0.0536494255065918s individual

.
current test PASSED/SKIPPED -- test_invalid_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 0.7700748443603516s cumulative, 0.05883383750915527s individual

.
current test PASSED/SKIPPED -- test_fallback_not_for_error_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 0.8465919494628906s cumulative, 0.07651710510253906s individual

.
current test PASSED/SKIPPED -- test_fallback_not_for_error_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 0.8863546848297119s cumulative, 0.03976273536682129s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 0.9155476093292236s cumulative, 0.02919292449951172s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 0.9667525291442871s cumulative, 0.05120491981506348s individual

.
current test PASSED/SKIPPED -- test_fallback in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1.0082683563232422s cumulative, 0.04151582717895508s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1.0348749160766602s cumulative, 0.02660655975341797s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1.0644242763519287s cumulative, 0.029549360275268555s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1.1175892353057861s cumulative, 0.05316495895385742s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1.147489070892334s cumulative, 0.02989983558654785s individual

.
current test PASSED/SKIPPED -- test_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1.185426950454712s cumulative, 0.03793787956237793s individual

.
current test PASSED/SKIPPED -- test_error_after_first_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1.2074744701385498s cumulative, 0.02204751968383789s individual

.
current test PASSED/SKIPPED -- test_repeated_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1.2249879837036133s cumulative, 0.017513513565063477s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1.294421672821045s cumulative, 0.06943368911743164s individual

.
current test PASSED/SKIPPED -- test_fallback in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1.3140602111816406s cumulative, 0.019638538360595703s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1.333747386932373s cumulative, 0.019687175750732422s individual

.
current test PASSED/SKIPPED -- test_fallback_does_not_override_media_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1.3523545265197754s cumulative, 0.018607139587402344s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1.3728015422821045s cumulative, 0.0204470157623291s individual

.
current test PASSED/SKIPPED -- test_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1.394014596939087s cumulative, 0.021213054656982422s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1.4612767696380615s cumulative, 0.06726217269897461s individual

.
current test PASSED/SKIPPED -- test_invalid_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1.5039646625518799s cumulative, 0.04268789291381836s individual

.
current test PASSED/SKIPPED -- test_repeated_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1.5650708675384521s cumulative, 0.061106204986572266s individual

.
current test PASSED/SKIPPED -- test_fallback_does_not_override_media_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1.5889222621917725s cumulative, 0.023851394653320312s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1.6137561798095703s cumulative, 0.02483391761779785s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1.6392462253570557s cumulative, 0.02549004554748535s individual

.
current test PASSED/SKIPPED -- test_repeated_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1.6653556823730469s cumulative, 0.02610945701599121s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1.6811134815216064s cumulative, 0.01575779914855957s individual

.
current test PASSED/SKIPPED -- test_complete_consumption in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1.69504714012146s cumulative, 0.013933658599853516s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1.7375435829162598s cumulative, 0.042496442794799805s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1.7676582336425781s cumulative, 0.03011465072631836s individual

.
current test PASSED/SKIPPED -- test_fallback_not_for_error_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1.7853786945343018s cumulative, 0.017720460891723633s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1.8042325973510742s cumulative, 0.01885390281677246s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1.8239202499389648s cumulative, 0.019687652587890625s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1.852299451828003s cumulative, 0.028379201889038086s individual

.
current test PASSED/SKIPPED -- test_invalid_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1.8713982105255127s cumulative, 0.019098758697509766s individual

.
current test PASSED/SKIPPED -- test_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1.8918068408966064s cumulative, 0.02040863037109375s individual

.
current test PASSED/SKIPPED -- test_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1.9209082126617432s cumulative, 0.02910137176513672s individual

.
current test PASSED/SKIPPED -- test_fallback_not_for_error_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1.9519078731536865s cumulative, 0.03099966049194336s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1.983344554901123s cumulative, 0.03143668174743652s individual

.
current test PASSED/SKIPPED -- test_invalid_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 2.0149648189544678s cumulative, 0.03162026405334473s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 2.0398542881011963s cumulative, 0.024889469146728516s individual

.
current test PASSED/SKIPPED -- test_unknown_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 2.060666561126709s cumulative, 0.020812273025512695s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 2.0830390453338623s cumulative, 0.02237248420715332s individual

.
current test PASSED/SKIPPED -- test_fallback_not_for_error_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 2.105708360671997s cumulative, 0.022669315338134766s individual

.
current test PASSED/SKIPPED -- test_fallback_not_for_error_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 2.133357048034668s cumulative, 0.0276486873626709s individual

.
current test PASSED/SKIPPED -- test_repeated_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 2.1494228839874268s cumulative, 0.01606583595275879s individual

.
current test PASSED/SKIPPED -- test_fallback_not_for_error_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 2.16815447807312s cumulative, 0.01873159408569336s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 2.189331293106079s cumulative, 0.021176815032958984s individual

.
current test PASSED/SKIPPED -- test_fallback_not_for_error_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 2.2086684703826904s cumulative, 0.019337177276611328s individual

.
current test PASSED/SKIPPED -- test_unknown_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 2.2255280017852783s cumulative, 0.01685953140258789s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 2.247201681137085s cumulative, 0.02167367935180664s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 2.2740626335144043s cumulative, 0.026860952377319336s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 2.3158812522888184s cumulative, 0.04181861877441406s individual


tests/test_alias.py .
current test PASSED/SKIPPED -- test_cookies in /home/kaiyaok2/PythonProjects/falcon/tests/test_alias.py: 2.344362258911133s cumulative, 0.028481006622314453s individual

.
current test PASSED/SKIPPED -- test_alias_equals_to_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_alias.py: 2.3596365451812744s cumulative, 0.015274286270141602s individual


tests/asgi/test_middleware_asgi.py .
current test PASSED/SKIPPED -- test_raise_on_incompatible in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_middleware_asgi.py: 2.386110544204712s cumulative, 0.0264739990234375s individual

.
current test PASSED/SKIPPED -- test_raise_on_incompatible in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_middleware_asgi.py: 2.4159953594207764s cumulative, 0.029884815216064453s individual

.
current test PASSED/SKIPPED -- test_raise_on_incompatible in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_middleware_asgi.py: 2.4291794300079346s cumulative, 0.013184070587158203s individual

.
current test PASSED/SKIPPED -- test_raise_on_incompatible in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_middleware_asgi.py: 2.435465097427368s cumulative, 0.006285667419433594s individual


tests/test_before_hooks.py .
current test PASSED/SKIPPED -- test_param_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 2.4557461738586426s cumulative, 0.020281076431274414s individual

.
current test PASSED/SKIPPED -- test_decorable_name_pattern in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 2.4632718563079834s cumulative, 0.00752568244934082s individual

.
current test PASSED/SKIPPED -- test_multiple_resource_hooks in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 2.482757091522217s cumulative, 0.0194852352142334s individual

.
current test PASSED/SKIPPED -- test_wrapped_resource_with_hooks_aware_of_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 2.513218641281128s cumulative, 0.030461549758911133s individual

.
current test PASSED/SKIPPED -- test_multiple_resource_hooks in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 2.560229778289795s cumulative, 0.04701113700866699s individual

.
current test PASSED/SKIPPED -- test_field_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 2.585146903991699s cumulative, 0.024917125701904297s individual

.
current test PASSED/SKIPPED -- test_input_validator_inherited in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 2.613600969314575s cumulative, 0.028454065322875977s individual

.
current test PASSED/SKIPPED -- test_wrapped_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 2.636197328567505s cumulative, 0.022596359252929688s individual

.
current test PASSED/SKIPPED -- test_parser_async in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 2.6569104194641113s cumulative, 0.020713090896606445s individual

.
current test PASSED/SKIPPED -- test_field_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 2.6706855297088623s cumulative, 0.013775110244750977s individual

.
current test PASSED/SKIPPED -- test_field_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 2.6867644786834717s cumulative, 0.016078948974609375s individual

.
current test PASSED/SKIPPED -- test_param_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 2.709656000137329s cumulative, 0.022891521453857422s individual

.
current test PASSED/SKIPPED -- test_piggybacking_resource_post_and_delete in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 2.829084634780884s cumulative, 0.11942863464355469s individual

.
current test PASSED/SKIPPED -- test_parser_sync in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 2.8890323638916016s cumulative, 0.05994772911071777s individual

.
current test PASSED/SKIPPED -- test_multiple_resource_hooks in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 2.921792507171631s cumulative, 0.0327601432800293s individual

.
current test PASSED/SKIPPED -- test_field_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 2.9858522415161133s cumulative, 0.06405973434448242s individual

.
current test PASSED/SKIPPED -- test_parser_sync in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 3.0107829570770264s cumulative, 0.024930715560913086s individual

.
current test PASSED/SKIPPED -- test_input_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 3.0528671741485596s cumulative, 0.0420842170715332s individual

.
current test PASSED/SKIPPED -- test_parser_async in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 3.0822737216949463s cumulative, 0.02940654754638672s individual

.
current test PASSED/SKIPPED -- test_parser_sync in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 3.103348970413208s cumulative, 0.02107524871826172s individual

.
current test PASSED/SKIPPED -- test_piggybacking_resource_post_item in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 3.128559112548828s cumulative, 0.025210142135620117s individual

.
current test PASSED/SKIPPED -- test_input_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 3.1413283348083496s cumulative, 0.012769222259521484s individual

.
current test PASSED/SKIPPED -- test_piggybacking_resource_post_item in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 3.161606788635254s cumulative, 0.020278453826904297s individual

.
current test PASSED/SKIPPED -- test_multiple_resource_hooks in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 3.1812992095947266s cumulative, 0.019692420959472656s individual

.
current test PASSED/SKIPPED -- test_piggybacking_resource_post_and_delete in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 3.228593111038208s cumulative, 0.047293901443481445s individual

.
current test PASSED/SKIPPED -- test_field_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 3.2834224700927734s cumulative, 0.05482935905456543s individual

.
current test PASSED/SKIPPED -- test_input_validator_inherited in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 3.3231446743011475s cumulative, 0.03972220420837402s individual

.
current test PASSED/SKIPPED -- test_wrapped_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 3.352475643157959s cumulative, 0.029330968856811523s individual

.
current test PASSED/SKIPPED -- test_field_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 3.403400421142578s cumulative, 0.05092477798461914s individual

.
current test PASSED/SKIPPED -- test_parser_async in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 3.4834306240081787s cumulative, 0.08003020286560059s individual

.
current test PASSED/SKIPPED -- test_parser_sync in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 3.5652263164520264s cumulative, 0.08179569244384766s individual

.
current test PASSED/SKIPPED -- test_wrapped_resource_with_hooks_aware_of_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 3.8596572875976562s cumulative, 0.2944309711456299s individual

.
current test PASSED/SKIPPED -- test_parser_async in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 4.001138687133789s cumulative, 0.1414813995361328s individual


tests/test_request_forwarded.py .
current test PASSED/SKIPPED -- test_x_forwarded_host in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 4.024092435836792s cumulative, 0.02295374870300293s individual

.
current test PASSED/SKIPPED -- test_no_forwarded_headers_with_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 4.058408737182617s cumulative, 0.034316301345825195s individual

.
current test PASSED/SKIPPED -- test_forwarded_host in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 4.0830466747283936s cumulative, 0.024637937545776367s individual

.
current test PASSED/SKIPPED -- test_escape_malformed_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 4.105870723724365s cumulative, 0.02282404899597168s individual

.
current test PASSED/SKIPPED -- test_no_forwarded_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 4.126443386077881s cumulative, 0.020572662353515625s individual

.
current test PASSED/SKIPPED -- test_escape_malformed_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 4.153193235397339s cumulative, 0.026749849319458008s individual

.
current test PASSED/SKIPPED -- test_x_forwarded_host_with_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 4.172630548477173s cumulative, 0.019437313079833984s individual

.
current test PASSED/SKIPPED -- test_forwarded_multiple_params in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 4.1910834312438965s cumulative, 0.018452882766723633s individual

.
current test PASSED/SKIPPED -- test_x_forwarded_proto in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 4.21100926399231s cumulative, 0.019925832748413086s individual

.
current test PASSED/SKIPPED -- test_x_forwarded_host in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 4.230429649353027s cumulative, 0.019420385360717773s individual

.
current test PASSED/SKIPPED -- test_forwarded_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 4.254034757614136s cumulative, 0.0236051082611084s individual

.
current test PASSED/SKIPPED -- test_escape_malformed_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 4.272736310958862s cumulative, 0.018701553344726562s individual

.
current test PASSED/SKIPPED -- test_x_forwarded_host_with_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 4.298853158950806s cumulative, 0.02611684799194336s individual

.
current test PASSED/SKIPPED -- test_escape_malformed_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 4.320703029632568s cumulative, 0.021849870681762695s individual

.
current test PASSED/SKIPPED -- test_no_forwarded_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 4.343767881393433s cumulative, 0.023064851760864258s individual

.
current test PASSED/SKIPPED -- test_escape_malformed_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 4.369631290435791s cumulative, 0.0258634090423584s individual

.
current test PASSED/SKIPPED -- test_forwarded_missing_first_hop_host in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 4.390284538269043s cumulative, 0.020653247833251953s individual

.
current test PASSED/SKIPPED -- test_forwarded_missing_first_hop_host in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 4.4124228954315186s cumulative, 0.022138357162475586s individual

.
current test PASSED/SKIPPED -- test_forwarded_multiple_params in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 4.431538105010986s cumulative, 0.019115209579467773s individual

.
current test PASSED/SKIPPED -- test_forwarded_quote_escaping in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 4.484840154647827s cumulative, 0.05330204963684082s individual

.
current test PASSED/SKIPPED -- test_forwarded_quote_escaping in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 4.569496154785156s cumulative, 0.0846560001373291s individual

.
current test PASSED/SKIPPED -- test_forwarded_host in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 4.5931336879730225s cumulative, 0.02363753318786621s individual

.
current test PASSED/SKIPPED -- test_forwarded_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 4.6202685832977295s cumulative, 0.02713489532470703s individual

.
current test PASSED/SKIPPED -- test_escape_malformed_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 4.682562589645386s cumulative, 0.06229400634765625s individual

.
current test PASSED/SKIPPED -- test_no_forwarded_headers_with_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 4.729576349258423s cumulative, 0.04701375961303711s individual

.
current test PASSED/SKIPPED -- test_escape_malformed_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 4.765207529067993s cumulative, 0.03563117980957031s individual

.
current test PASSED/SKIPPED -- test_escape_malformed_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 4.792377710342407s cumulative, 0.027170181274414062s individual

.
current test PASSED/SKIPPED -- test_escape_malformed_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 4.823861837387085s cumulative, 0.031484127044677734s individual

.
current test PASSED/SKIPPED -- test_x_forwarded_proto in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 4.848679542541504s cumulative, 0.024817705154418945s individual

.
current test PASSED/SKIPPED -- test_escape_malformed_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 4.879409074783325s cumulative, 0.03072953224182129s individual


tests/test_deps.py .
current test PASSED/SKIPPED -- test_deps_mimeparse_correct_package in /home/kaiyaok2/PythonProjects/falcon/tests/test_deps.py: 4.901595830917358s cumulative, 0.022186756134033203s individual


tests/asgi/test_request_context_asgi.py .
current test PASSED/SKIPPED -- test_custom_request_context_request_access in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_context_asgi.py: 4.926298379898071s cumulative, 0.02470254898071289s individual

.
current test PASSED/SKIPPED -- test_custom_request_context in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_context_asgi.py: 4.953046083450317s cumulative, 0.026747703552246094s individual

.
current test PASSED/SKIPPED -- test_default_request_context in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_context_asgi.py: 4.98230242729187s cumulative, 0.029256343841552734s individual

.
current test PASSED/SKIPPED -- test_custom_request_context_failure in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_context_asgi.py: 5.010767698287964s cumulative, 0.02846527099609375s individual


tests/test_inspect.py .
current test PASSED/SKIPPED -- test_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 5.077831268310547s cumulative, 0.06706357002258301s individual

.
current test PASSED/SKIPPED -- test_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 5.37367582321167s cumulative, 0.29584455490112305s individual

.
current test PASSED/SKIPPED -- test_middleware_tree in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 5.52591872215271s cumulative, 0.15224289894104004s individual

.
current test PASSED/SKIPPED -- test_routes_empty_paths in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 5.585151433944702s cumulative, 0.05923271179199219s individual

.
current test PASSED/SKIPPED -- test_dependent_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 5.624524116516113s cumulative, 0.03937268257141113s individual

.
current test PASSED/SKIPPED -- test_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 5.782374382019043s cumulative, 0.1578502655029297s individual

.
current test PASSED/SKIPPED -- test_middleware_tree in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 5.9115564823150635s cumulative, 0.1291821002960205s individual

.
current test PASSED/SKIPPED -- test_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 5.968867778778076s cumulative, 0.057311296463012695s individual

.
current test PASSED/SKIPPED -- test_routes_empty_paths in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 5.99221134185791s cumulative, 0.023343563079833984s individual

.
current test PASSED/SKIPPED -- test_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 6.027194499969482s cumulative, 0.034983158111572266s individual

.
current test PASSED/SKIPPED -- test_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 6.0623390674591064s cumulative, 0.03514456748962402s individual

.
current test PASSED/SKIPPED -- test_empty_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 6.0828022956848145s cumulative, 0.020463228225708008s individual

.
current test PASSED/SKIPPED -- test_static_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 6.114889144897461s cumulative, 0.032086849212646484s individual

.
current test PASSED/SKIPPED -- test_empty_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 6.136192798614502s cumulative, 0.021303653717041016s individual

.
current test PASSED/SKIPPED -- test_dependent_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 6.154408931732178s cumulative, 0.01821613311767578s individual

.
current test PASSED/SKIPPED -- test_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 6.189102649688721s cumulative, 0.03469371795654297s individual

.
current test PASSED/SKIPPED -- test_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 6.242970943450928s cumulative, 0.05386829376220703s individual

.
current test PASSED/SKIPPED -- test_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 6.276210308074951s cumulative, 0.03323936462402344s individual

.
current test PASSED/SKIPPED -- test_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 6.378634452819824s cumulative, 0.10242414474487305s individual

.
current test PASSED/SKIPPED -- test_static_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 6.40971040725708s cumulative, 0.03107595443725586s individual

.
current test PASSED/SKIPPED -- test_process in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 6.424458980560303s cumulative, 0.014748573303222656s individual

.
current test PASSED/SKIPPED -- test_info_class_repr_to_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 6.655658006668091s cumulative, 0.23119902610778809s individual

.
current test PASSED/SKIPPED -- test_inspect_visitor in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 6.675117254257202s cumulative, 0.019459247589111328s individual

.
current test PASSED/SKIPPED -- test_static_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 6.718250751495361s cumulative, 0.04313349723815918s individual

.
current test PASSED/SKIPPED -- test_middleware_tree_item in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 6.826279163360596s cumulative, 0.10802841186523438s individual

.
current test PASSED/SKIPPED -- test_app_no_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 6.998399019241333s cumulative, 0.1721198558807373s individual

.
current test PASSED/SKIPPED -- test_app_no_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 7.246999740600586s cumulative, 0.24860072135925293s individual

.
current test PASSED/SKIPPED -- test_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 7.461745262145996s cumulative, 0.21474552154541016s individual

.
current test PASSED/SKIPPED -- test_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 7.522875547409058s cumulative, 0.06113028526306152s individual

.
current test PASSED/SKIPPED -- test_app_no_errors in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 7.64831018447876s cumulative, 0.12543463706970215s individual

.
current test PASSED/SKIPPED -- test_middleware_tree_no_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 7.742598533630371s cumulative, 0.09428834915161133s individual

.
current test PASSED/SKIPPED -- test_app_static_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 7.846346855163574s cumulative, 0.10374832153320312s individual

.
current test PASSED/SKIPPED -- test_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 7.8692307472229s cumulative, 0.022883892059326172s individual

.
current test PASSED/SKIPPED -- test_middleware_method_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 7.92667555809021s cumulative, 0.05744481086730957s individual

.
current test PASSED/SKIPPED -- test_static_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 7.947613477706909s cumulative, 0.02093791961669922s individual

.
current test PASSED/SKIPPED -- test_middleware_tree in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 8.02580738067627s cumulative, 0.07819390296936035s individual

.
current test PASSED/SKIPPED -- test_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 8.051340818405151s cumulative, 0.025533437728881836s individual

.
current test PASSED/SKIPPED -- test_app_static_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 8.147598505020142s cumulative, 0.09625768661499023s individual

.
current test PASSED/SKIPPED -- test_middleware_tree_no_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 8.208653211593628s cumulative, 0.06105470657348633s individual

.
current test PASSED/SKIPPED -- test_middleware_class_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 8.263386011123657s cumulative, 0.0547327995300293s individual

.
current test PASSED/SKIPPED -- test_middleware_tree in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 8.325040340423584s cumulative, 0.06165432929992676s individual

.
current test PASSED/SKIPPED -- test_app_static_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 8.426146745681763s cumulative, 0.10110640525817871s individual

.
current test PASSED/SKIPPED -- test_middleware_tree_item in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 8.499359607696533s cumulative, 0.07321286201477051s individual

.
current test PASSED/SKIPPED -- test_sink_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 8.532945394515991s cumulative, 0.03358578681945801s individual

.
current test PASSED/SKIPPED -- test_app_no_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 8.670318126678467s cumulative, 0.13737273216247559s individual

.
current test PASSED/SKIPPED -- test_app_no_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 8.7876136302948s cumulative, 0.11729550361633301s individual

.
current test PASSED/SKIPPED -- test_app_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 8.920567750930786s cumulative, 0.13295412063598633s individual

.
current test PASSED/SKIPPED -- test_middleware_tree_no_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 9.011579275131226s cumulative, 0.09101152420043945s individual

.
current test PASSED/SKIPPED -- test_route_method_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 9.077585220336914s cumulative, 0.06600594520568848s individual

.
current test PASSED/SKIPPED -- test_app_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 9.230169534683228s cumulative, 0.15258431434631348s individual

.
current test PASSED/SKIPPED -- test_route_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 9.306679725646973s cumulative, 0.07651019096374512s individual

.
current test PASSED/SKIPPED -- test_app_no_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 9.46386170387268s cumulative, 0.157181978225708s individual

.
current test PASSED/SKIPPED -- test_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 9.619867324829102s cumulative, 0.1560056209564209s individual

.
current test PASSED/SKIPPED -- test_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 9.71228575706482s cumulative, 0.09241843223571777s individual

.
current test PASSED/SKIPPED -- test_app_no_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 9.857704162597656s cumulative, 0.14541840553283691s individual

.
current test PASSED/SKIPPED -- test_middleware_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 9.97751522064209s cumulative, 0.1198110580444336s individual

.
current test PASSED/SKIPPED -- test_app_no_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 10.130707740783691s cumulative, 0.15319252014160156s individual

.
current test PASSED/SKIPPED -- test_app_no_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 10.192162990570068s cumulative, 0.06145524978637695s individual

.
current test PASSED/SKIPPED -- test_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 10.886057615280151s cumulative, 0.693894624710083s individual

.
current test PASSED/SKIPPED -- test_middleware_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 11.62769865989685s cumulative, 0.7416410446166992s individual

.
current test PASSED/SKIPPED -- test_error_handler_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 11.879227876663208s cumulative, 0.2515292167663574s individual

.
current test PASSED/SKIPPED -- test_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 12.520975589752197s cumulative, 0.6417477130889893s individual

.
current test PASSED/SKIPPED -- test_middleware_tree_no_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 12.567494630813599s cumulative, 0.04651904106140137s individual

.
current test PASSED/SKIPPED -- test_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 12.593712568283081s cumulative, 0.026217937469482422s individual

.
current test PASSED/SKIPPED -- test_error_handler_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 12.608592987060547s cumulative, 0.01488041877746582s individual

.
current test PASSED/SKIPPED -- test_route_no_methods in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 12.628964185714722s cumulative, 0.020371198654174805s individual

.
current test PASSED/SKIPPED -- test_app_no_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 12.6705162525177s cumulative, 0.041552066802978516s individual

.
current test PASSED/SKIPPED -- test_middleware_tree_response_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 12.698731422424316s cumulative, 0.02821516990661621s individual

.
current test PASSED/SKIPPED -- test_middleware_tree in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 12.723292827606201s cumulative, 0.024561405181884766s individual

.
current test PASSED/SKIPPED -- test_route_method_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 12.746748685836792s cumulative, 0.02345585823059082s individual

.
current test PASSED/SKIPPED -- test_middleware_class_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 12.78343939781189s cumulative, 0.036690711975097656s individual

.
current test PASSED/SKIPPED -- test_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 12.797735452651978s cumulative, 0.01429605484008789s individual

.
current test PASSED/SKIPPED -- test_app_no_errors in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 12.846582174301147s cumulative, 0.04884672164916992s individual

.
current test PASSED/SKIPPED -- test_app_no_errors in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 12.93669080734253s cumulative, 0.09010863304138184s individual

.
current test PASSED/SKIPPED -- test_app_no_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 13.166796684265137s cumulative, 0.23010587692260742s individual

.
current test PASSED/SKIPPED -- test_app_no_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 13.451205492019653s cumulative, 0.2844088077545166s individual

.
current test PASSED/SKIPPED -- test_middleware_tree_item in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 13.64440631866455s cumulative, 0.19320082664489746s individual

.
current test PASSED/SKIPPED -- test_route_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 13.780502557754517s cumulative, 0.13609623908996582s individual

.
current test PASSED/SKIPPED -- test_app_no_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 14.05155611038208s cumulative, 0.2710535526275635s individual

.
current test PASSED/SKIPPED -- test_middleware_class_no_methods in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 14.334971189498901s cumulative, 0.2834150791168213s individual

.
current test PASSED/SKIPPED -- test_middleware_method_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 14.508299589157104s cumulative, 0.17332839965820312s individual

.
current test PASSED/SKIPPED -- test_string_visitor_class in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 14.541095495223999s cumulative, 0.03279590606689453s individual

.
current test PASSED/SKIPPED -- test_app_static_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 14.848472595214844s cumulative, 0.3073770999908447s individual

.
current test PASSED/SKIPPED -- test_static_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 14.912602424621582s cumulative, 0.06412982940673828s individual

.
current test PASSED/SKIPPED -- test_middleware_class in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 15.084987878799438s cumulative, 0.17238545417785645s individual

.
current test PASSED/SKIPPED -- test_route_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 15.220195055007935s cumulative, 0.1352071762084961s individual

.
current test PASSED/SKIPPED -- test_route_no_methods in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 15.351240634918213s cumulative, 0.13104557991027832s individual

.
current test PASSED/SKIPPED -- test_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 15.613738298416138s cumulative, 0.2624976634979248s individual

.
current test PASSED/SKIPPED -- test_route_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 15.74290418624878s cumulative, 0.1291658878326416s individual

.
current test PASSED/SKIPPED -- test_middleware_tree_item in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 15.909235715866089s cumulative, 0.16633152961730957s individual

.
current test PASSED/SKIPPED -- test_middleware_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 16.13665246963501s cumulative, 0.2274167537689209s individual

.
current test PASSED/SKIPPED -- test_middleware_class_no_methods in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 16.318477869033813s cumulative, 0.1818253993988037s individual

.
current test PASSED/SKIPPED -- test_middleware_tree_response_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 16.498440742492676s cumulative, 0.1799628734588623s individual

.
current test PASSED/SKIPPED -- test_app_no_errors in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 16.742995500564575s cumulative, 0.24455475807189941s individual

.
current test PASSED/SKIPPED -- test_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 16.828745126724243s cumulative, 0.08574962615966797s individual

.
current test PASSED/SKIPPED -- test_middleware_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 16.985056400299072s cumulative, 0.1563112735748291s individual

.
current test PASSED/SKIPPED -- test_static_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 17.047813653945923s cumulative, 0.06275725364685059s individual

.
current test PASSED/SKIPPED -- test_middleware_tree in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 17.209419012069702s cumulative, 0.1616053581237793s individual

.
current test PASSED/SKIPPED -- test_sink_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 17.30453395843506s cumulative, 0.09511494636535645s individual

.
current test PASSED/SKIPPED -- test_middleware_class in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 17.511481761932373s cumulative, 0.20694780349731445s individual

.
current test PASSED/SKIPPED -- test_register_router_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 17.619797945022583s cumulative, 0.10831618309020996s individual

.
current test PASSED/SKIPPED -- test_compiled_partial in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 17.899319648742676s cumulative, 0.2795217037200928s individual

.
current test PASSED/SKIPPED -- test_compiled_no_method_map in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 18.218743085861206s cumulative, 0.3194234371185303s individual

.
current test PASSED/SKIPPED -- test_register_other_router in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 18.562599420547485s cumulative, 0.3438563346862793s individual

.
current test PASSED/SKIPPED -- test_register_router_multiple_time in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 18.845470666885376s cumulative, 0.2828712463378906s individual

.
current test PASSED/SKIPPED -- test_route_method_info_suffix in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 18.964099168777466s cumulative, 0.11862850189208984s individual

.
current test PASSED/SKIPPED -- test_is_internal in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 19.097922563552856s cumulative, 0.13382339477539062s individual


tests/test_request_attrs.py .
current test PASSED/SKIPPED -- test_missing_attribute_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 19.31170654296875s cumulative, 0.21378397941589355s individual

.
current test PASSED/SKIPPED -- test_date_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 19.53834843635559s cumulative, 0.22664189338684082s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 19.580501556396484s cumulative, 0.042153120040893555s individual

.
current test PASSED/SKIPPED -- test_empty in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 19.606724739074707s cumulative, 0.026223182678222656s individual

.
current test PASSED/SKIPPED -- test_empty_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 19.641406774520874s cumulative, 0.03468203544616699s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 19.662256002426147s cumulative, 0.020849227905273438s individual

.
current test PASSED/SKIPPED -- test_client_accepts_props in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 19.78774905204773s cumulative, 0.12549304962158203s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 19.900418758392334s cumulative, 0.11266970634460449s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 20.027234077453613s cumulative, 0.1268153190612793s individual

.
current test PASSED/SKIPPED -- test_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 20.151819944381714s cumulative, 0.12458586692810059s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 20.270007133483887s cumulative, 0.11818718910217285s individual

.
current test PASSED/SKIPPED -- test_netloc_default_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 20.382744789123535s cumulative, 0.11273765563964844s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 20.498780488967896s cumulative, 0.11603569984436035s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 20.595545053482056s cumulative, 0.09676456451416016s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 20.720342874526978s cumulative, 0.12479782104492188s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 20.907106637954712s cumulative, 0.18676376342773438s individual

.
current test PASSED/SKIPPED -- test_nonlatin_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 21.016258716583252s cumulative, 0.10915207862854004s individual

.
current test PASSED/SKIPPED -- test_range_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 21.287868976593018s cumulative, 0.2716102600097656s individual

.
current test PASSED/SKIPPED -- test_scheme_https in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 21.473010301589966s cumulative, 0.18514132499694824s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 21.646934986114502s cumulative, 0.17392468452453613s individual

.
current test PASSED/SKIPPED -- test_netloc_nondefault_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 21.74170207977295s cumulative, 0.09476709365844727s individual

.
current test PASSED/SKIPPED -- test_uri_http_1_0 in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 21.88128161430359s cumulative, 0.13957953453063965s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 22.040993452072144s cumulative, 0.1597118377685547s individual

.
current test PASSED/SKIPPED -- test_client_accepts_bogus in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 22.124393939971924s cumulative, 0.08340048789978027s individual

.
current test PASSED/SKIPPED -- test_etag_is_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 22.21877121925354s cumulative, 0.09437727928161621s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 22.339484691619873s cumulative, 0.12071347236633301s individual

.
current test PASSED/SKIPPED -- test_app_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 22.588926553726196s cumulative, 0.24944186210632324s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 22.784931659698486s cumulative, 0.19600510597229004s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 22.939010858535767s cumulative, 0.15407919883728027s individual

.
current test PASSED/SKIPPED -- test_netloc_nondefault_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 23.121232748031616s cumulative, 0.1822218894958496s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 23.278669357299805s cumulative, 0.15743660926818848s individual

.
current test PASSED/SKIPPED -- test_port_explicit in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 23.407782793045044s cumulative, 0.12911343574523926s individual

.
current test PASSED/SKIPPED -- test_app_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 23.519291877746582s cumulative, 0.11150908470153809s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 23.6687650680542s cumulative, 0.1494731903076172s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 23.805259227752686s cumulative, 0.13649415969848633s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 23.90464997291565s cumulative, 0.09939074516296387s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 23.962602853775024s cumulative, 0.057952880859375s individual

.
current test PASSED/SKIPPED -- test_date_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.006314754486084s cumulative, 0.04371190071105957s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.05726671218872s cumulative, 0.05095195770263672s individual

.
current test PASSED/SKIPPED -- test_scheme_https in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.099529266357422s cumulative, 0.04226255416870117s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.123493909835815s cumulative, 0.023964643478393555s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.141976594924927s cumulative, 0.018482685089111328s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.16612148284912s cumulative, 0.024144887924194336s individual

.
current test PASSED/SKIPPED -- test_netloc_from_env in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.248181104660034s cumulative, 0.08205962181091309s individual

.
current test PASSED/SKIPPED -- test_date in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.285208463668823s cumulative, 0.03702735900878906s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.32837438583374s cumulative, 0.04316592216491699s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.342308282852173s cumulative, 0.013933897018432617s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.354753017425537s cumulative, 0.012444734573364258s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.37372350692749s cumulative, 0.018970489501953125s individual

.
current test PASSED/SKIPPED -- test_date in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.384324550628662s cumulative, 0.010601043701171875s individual

.
current test PASSED/SKIPPED -- test_relative_uri in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.396421432495117s cumulative, 0.012096881866455078s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.406420946121216s cumulative, 0.009999513626098633s individual

.
current test PASSED/SKIPPED -- test_etag_parsing_helper in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.413809061050415s cumulative, 0.007388114929199219s individual

.
current test PASSED/SKIPPED -- test_reconstruct_url in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.419946670532227s cumulative, 0.0061376094818115234s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.443617343902588s cumulative, 0.023670673370361328s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.469518423080444s cumulative, 0.025901079177856445s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.52150321006775s cumulative, 0.05198478698730469s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.53585910797119s cumulative, 0.014355897903442383s individual

.
current test PASSED/SKIPPED -- test_nonlatin_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.54852533340454s cumulative, 0.01266622543334961s individual

.
current test PASSED/SKIPPED -- test_etag_parsing_helper in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.55789065361023s cumulative, 0.009365320205688477s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.570654153823853s cumulative, 0.012763500213623047s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.58519172668457s cumulative, 0.014537572860717773s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.595157861709595s cumulative, 0.009966135025024414s individual

.
current test PASSED/SKIPPED -- test_port_explicit in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.60347080230713s cumulative, 0.00831294059753418s individual

.
current test PASSED/SKIPPED -- test_netloc_default_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.612507343292236s cumulative, 0.009036540985107422s individual

.
current test PASSED/SKIPPED -- test_netloc_nondefault_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.622230291366577s cumulative, 0.00972294807434082s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.632495880126953s cumulative, 0.010265588760375977s individual

.
current test PASSED/SKIPPED -- test_scheme_https in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.640857934951782s cumulative, 0.008362054824829102s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.651970624923706s cumulative, 0.011112689971923828s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.661962509155273s cumulative, 0.009991884231567383s individual

.
current test PASSED/SKIPPED -- test_date_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.672718286514282s cumulative, 0.010755777359008789s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.684060096740723s cumulative, 0.01134181022644043s individual

.
current test PASSED/SKIPPED -- test_content_length_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.691649675369263s cumulative, 0.007589578628540039s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.70038628578186s cumulative, 0.008736610412597656s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.71171236038208s cumulative, 0.011326074600219727s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.72308588027954s cumulative, 0.011373519897460938s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.732876777648926s cumulative, 0.009790897369384766s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.743024349212646s cumulative, 0.010147571563720703s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.753881692886353s cumulative, 0.010857343673706055s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.764123678207397s cumulative, 0.010241985321044922s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.786588668823242s cumulative, 0.022464990615844727s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.80108404159546s cumulative, 0.014495372772216797s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.80997109413147s cumulative, 0.008887052536010742s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.819918394088745s cumulative, 0.00994729995727539s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.83147382736206s cumulative, 0.01155543327331543s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.840487718582153s cumulative, 0.009013891220092773s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.850197792053223s cumulative, 0.009710073471069336s individual

.
current test PASSED/SKIPPED -- test_client_accepts_props in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.861052751541138s cumulative, 0.010854959487915039s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.868799686431885s cumulative, 0.00774693489074707s individual

.
current test PASSED/SKIPPED -- test_nonlatin_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.878564834594727s cumulative, 0.009765148162841797s individual

.
current test PASSED/SKIPPED -- test_bogus_content_length_nan in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.886882066726685s cumulative, 0.008317232131958008s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.897910356521606s cumulative, 0.011028289794921875s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.910919904708862s cumulative, 0.01300954818725586s individual

.
current test PASSED/SKIPPED -- test_date_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.922865867614746s cumulative, 0.011945962905883789s individual

.
current test PASSED/SKIPPED -- test_content_type_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.928385019302368s cumulative, 0.00551915168762207s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.94066333770752s cumulative, 0.012278318405151367s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.962467193603516s cumulative, 0.021803855895996094s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 24.98118829727173s cumulative, 0.01872110366821289s individual

.
current test PASSED/SKIPPED -- test_date_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 25.028303146362305s cumulative, 0.04711484909057617s individual

.
current test PASSED/SKIPPED -- test_client_accepts_bogus in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 25.066401481628418s cumulative, 0.03809833526611328s individual

.
current test PASSED/SKIPPED -- test_client_prefers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 25.103294610977173s cumulative, 0.03689312934875488s individual

.
current test PASSED/SKIPPED -- test_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 25.1423499584198s cumulative, 0.03905534744262695s individual

.
current test PASSED/SKIPPED -- test_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 25.170973777770996s cumulative, 0.02862381935119629s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 25.2191264629364s cumulative, 0.04815268516540527s individual

.
current test PASSED/SKIPPED -- test_etag_parsing_helper in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 25.26535964012146s cumulative, 0.046233177185058594s individual

.
current test PASSED/SKIPPED -- test_date in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 25.33061647415161s cumulative, 0.06525683403015137s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 25.408059120178223s cumulative, 0.07744264602661133s individual

.
current test PASSED/SKIPPED -- test_range_unit in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 25.454363107681274s cumulative, 0.04630398750305176s individual

.
current test PASSED/SKIPPED -- test_nonlatin_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 25.50933289527893s cumulative, 0.05496978759765625s individual

.
current test PASSED/SKIPPED -- test_bogus_content_length_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 25.55810046195984s cumulative, 0.0487675666809082s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 25.607034921646118s cumulative, 0.0489344596862793s individual

.
current test PASSED/SKIPPED -- test_client_accepts in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 25.673283100128174s cumulative, 0.06624817848205566s individual

.
current test PASSED/SKIPPED -- test_missing_qs in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 25.708900690078735s cumulative, 0.03561758995056152s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 25.759181261062622s cumulative, 0.05028057098388672s individual

.
current test PASSED/SKIPPED -- test_netloc_from_env in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 25.795992612838745s cumulative, 0.03681135177612305s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 25.848500728607178s cumulative, 0.05250811576843262s individual

.
current test PASSED/SKIPPED -- test_content_length_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 25.891785860061646s cumulative, 0.04328513145446777s individual

.
current test PASSED/SKIPPED -- test_subdomain in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 25.936217546463013s cumulative, 0.04443168640136719s individual

.
current test PASSED/SKIPPED -- test_date_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 25.987432956695557s cumulative, 0.051215410232543945s individual

.
current test PASSED/SKIPPED -- test_port_explicit in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 26.03506088256836s cumulative, 0.047627925872802734s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 26.07901906967163s cumulative, 0.043958187103271484s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 26.126049280166626s cumulative, 0.04703021049499512s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 26.17147660255432s cumulative, 0.04542732238769531s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 26.21128821372986s cumulative, 0.03981161117553711s individual

.
current test PASSED/SKIPPED -- test_etag_is_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 26.239227294921875s cumulative, 0.0279390811920166s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 26.280017375946045s cumulative, 0.04079008102416992s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 26.313865184783936s cumulative, 0.033847808837890625s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 26.344555616378784s cumulative, 0.030690431594848633s individual

.
current test PASSED/SKIPPED -- test_scheme_https in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 26.37405514717102s cumulative, 0.029499530792236328s individual

.
current test PASSED/SKIPPED -- test_scheme_https in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 26.402764558792114s cumulative, 0.02870941162109375s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 26.43557620048523s cumulative, 0.032811641693115234s individual

.
current test PASSED/SKIPPED -- test_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 26.46696376800537s cumulative, 0.0313875675201416s individual

.
current test PASSED/SKIPPED -- test_date_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 26.496495723724365s cumulative, 0.02953195571899414s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 26.5309157371521s cumulative, 0.034420013427734375s individual

.
current test PASSED/SKIPPED -- test_range_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 26.58086848258972s cumulative, 0.04995274543762207s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 26.610080003738403s cumulative, 0.02921152114868164s individual

.
current test PASSED/SKIPPED -- test_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 26.648906707763672s cumulative, 0.038826704025268555s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 26.679590463638306s cumulative, 0.03068375587463379s individual

.
current test PASSED/SKIPPED -- test_bogus_content_length_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 26.707579374313354s cumulative, 0.027988910675048828s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 26.734145164489746s cumulative, 0.0265657901763916s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 26.76299500465393s cumulative, 0.02884984016418457s individual

.
current test PASSED/SKIPPED -- test_netloc_default_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 26.787513256072998s cumulative, 0.024518251419067383s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 26.823024034500122s cumulative, 0.03551077842712402s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 26.853373050689697s cumulative, 0.030349016189575195s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 26.889906406402588s cumulative, 0.036533355712890625s individual

.
current test PASSED/SKIPPED -- test_port_explicit in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 26.940993785858154s cumulative, 0.051087379455566406s individual

.
current test PASSED/SKIPPED -- test_port_explicit in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 26.987625122070312s cumulative, 0.0466313362121582s individual

.
current test PASSED/SKIPPED -- test_netloc_from_env in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 27.032138109207153s cumulative, 0.04451298713684082s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 27.08191967010498s cumulative, 0.04978156089782715s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 27.13985276222229s cumulative, 0.05793309211730957s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 27.176599979400635s cumulative, 0.03674721717834473s individual

.
current test PASSED/SKIPPED -- test_uri_https in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 27.225985288619995s cumulative, 0.04938530921936035s individual

.
current test PASSED/SKIPPED -- test_nonlatin_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 27.27556014060974s cumulative, 0.049574851989746094s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 27.313304662704468s cumulative, 0.03774452209472656s individual

.
current test PASSED/SKIPPED -- test_bogus_content_length_nan in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 27.350054264068604s cumulative, 0.03674960136413574s individual

.
current test PASSED/SKIPPED -- test_netloc_nondefault_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 27.373784065246582s cumulative, 0.023729801177978516s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 27.403512954711914s cumulative, 0.02972888946533203s individual

.
current test PASSED/SKIPPED -- test_range_unit in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 27.438475847244263s cumulative, 0.03496289253234863s individual

.
current test PASSED/SKIPPED -- test_uri in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 27.461841583251953s cumulative, 0.02336573600769043s individual

.
current test PASSED/SKIPPED -- test_netloc_nondefault_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 27.49809193611145s cumulative, 0.03625035285949707s individual

.
current test PASSED/SKIPPED -- test_client_prefers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 27.526621103286743s cumulative, 0.02852916717529297s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 27.55649471282959s cumulative, 0.02987360954284668s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 27.609435319900513s cumulative, 0.05294060707092285s individual

.
current test PASSED/SKIPPED -- test_date in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 27.64287042617798s cumulative, 0.03343510627746582s individual

.
current test PASSED/SKIPPED -- test_host in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 27.674502849578857s cumulative, 0.031632423400878906s individual

.
current test PASSED/SKIPPED -- test_etag_parsing_helper in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 27.704389572143555s cumulative, 0.029886722564697266s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 27.740774869918823s cumulative, 0.036385297775268555s individual

.
current test PASSED/SKIPPED -- test_relative_uri in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 27.77757239341736s cumulative, 0.036797523498535156s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 27.81519341468811s cumulative, 0.03762102127075195s individual

.
current test PASSED/SKIPPED -- test_content_type_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 27.841052055358887s cumulative, 0.025858640670776367s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 27.869961977005005s cumulative, 0.028909921646118164s individual

.
current test PASSED/SKIPPED -- test_host in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 27.898110151290894s cumulative, 0.028148174285888672s individual

.
current test PASSED/SKIPPED -- test_app_present in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 27.92353367805481s cumulative, 0.025423526763916016s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 27.95689582824707s cumulative, 0.03336215019226074s individual

.
current test PASSED/SKIPPED -- test_uri_http_1_0 in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 27.98981809616089s cumulative, 0.03292226791381836s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 28.02062702178955s cumulative, 0.03080892562866211s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 28.047678470611572s cumulative, 0.027051448822021484s individual

.
current test PASSED/SKIPPED -- test_netloc_default_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 28.072871923446655s cumulative, 0.025193452835083008s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 28.100363731384277s cumulative, 0.02749180793762207s individual

.
current test PASSED/SKIPPED -- test_date in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 28.131649017333984s cumulative, 0.03128528594970703s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 28.1634304523468s cumulative, 0.03178143501281738s individual

.
current test PASSED/SKIPPED -- test_netloc_default_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 28.19498085975647s cumulative, 0.03155040740966797s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 28.230637550354004s cumulative, 0.03565669059753418s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 28.26501965522766s cumulative, 0.03438210487365723s individual

.
current test PASSED/SKIPPED -- test_netloc_from_env in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 28.295148134231567s cumulative, 0.03012847900390625s individual

.
current test PASSED/SKIPPED -- test_date_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 28.318965673446655s cumulative, 0.02381753921508789s individual

.
current test PASSED/SKIPPED -- test_subdomain in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 28.345319271087646s cumulative, 0.02635359764099121s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 28.37536883354187s cumulative, 0.030049562454223633s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 28.41079020500183s cumulative, 0.03542137145996094s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 28.443910121917725s cumulative, 0.033119916915893555s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 28.47561287879944s cumulative, 0.03170275688171387s individual

.
current test PASSED/SKIPPED -- test_date_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 28.509159803390503s cumulative, 0.03354692459106445s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 28.53876829147339s cumulative, 0.029608488082885742s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 28.55387592315674s cumulative, 0.01510763168334961s individual

.
current test PASSED/SKIPPED -- test_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 28.57124137878418s cumulative, 0.017365455627441406s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 28.62381911277771s cumulative, 0.05257773399353027s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 28.666867971420288s cumulative, 0.043048858642578125s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 28.709342002868652s cumulative, 0.04247403144836426s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 28.735926389694214s cumulative, 0.026584386825561523s individual

.
current test PASSED/SKIPPED -- test_netloc_nondefault_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 28.745298862457275s cumulative, 0.009372472763061523s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 28.75523591041565s cumulative, 0.009937047958374023s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 28.763704299926758s cumulative, 0.008468389511108398s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 28.769060611724854s cumulative, 0.005356311798095703s individual

.
current test PASSED/SKIPPED -- test_etag_parsing_helper in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 28.774576425552368s cumulative, 0.0055158138275146484s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 28.86672043800354s cumulative, 0.09214401245117188s individual

.
current test PASSED/SKIPPED -- test_date_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 29.12778902053833s cumulative, 0.26106858253479004s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 29.37409210205078s cumulative, 0.24630308151245117s individual

.
current test PASSED/SKIPPED -- test_etag_parsing_helper in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 29.558457851409912s cumulative, 0.18436574935913086s individual

.
current test PASSED/SKIPPED -- test_scheme_https in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 29.795316457748413s cumulative, 0.23685860633850098s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 30.023046255111694s cumulative, 0.22772979736328125s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 30.236252546310425s cumulative, 0.21320629119873047s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 30.294221878051758s cumulative, 0.05796933174133301s individual

.
current test PASSED/SKIPPED -- test_client_accepts in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 30.330172300338745s cumulative, 0.035950422286987305s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 30.343777656555176s cumulative, 0.013605356216430664s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 30.35923171043396s cumulative, 0.01545405387878418s individual

.
current test PASSED/SKIPPED -- test_uri_https in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 30.37284564971924s cumulative, 0.01361393928527832s individual

.
current test PASSED/SKIPPED -- test_missing_attribute_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 30.38926386833191s cumulative, 0.0164182186126709s individual

.
current test PASSED/SKIPPED -- test_date_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 30.41009759902954s cumulative, 0.020833730697631836s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 30.430338382720947s cumulative, 0.02024078369140625s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 30.450437784194946s cumulative, 0.020099401473999023s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 30.470566511154175s cumulative, 0.020128726959228516s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 30.50025463104248s cumulative, 0.029688119888305664s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 30.516178369522095s cumulative, 0.015923738479614258s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 30.526434898376465s cumulative, 0.010256528854370117s individual

.
current test PASSED/SKIPPED -- test_netloc_from_env in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 30.536359548568726s cumulative, 0.009924650192260742s individual

.
current test PASSED/SKIPPED -- test_empty in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 30.544275522232056s cumulative, 0.007915973663330078s individual

.
current test PASSED/SKIPPED -- test_uri in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 30.55276608467102s cumulative, 0.008490562438964844s individual

.
current test PASSED/SKIPPED -- test_app_present in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 30.563684463500977s cumulative, 0.010918378829956055s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 30.57617497444153s cumulative, 0.012490510940551758s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 30.58777928352356s cumulative, 0.01160430908203125s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 30.597610235214233s cumulative, 0.009830951690673828s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 30.609790086746216s cumulative, 0.012179851531982422s individual

.
current test PASSED/SKIPPED -- test_reconstruct_url in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 30.617981672286987s cumulative, 0.008191585540771484s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 30.66536283493042s cumulative, 0.04738116264343262s individual

.
current test PASSED/SKIPPED -- test_empty_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 30.693874835968018s cumulative, 0.028512001037597656s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 30.728423357009888s cumulative, 0.03454852104187012s individual

.
current test PASSED/SKIPPED -- test_nonlatin_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 30.76232361793518s cumulative, 0.03390026092529297s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 30.803967237472534s cumulative, 0.041643619537353516s individual

.
current test PASSED/SKIPPED -- test_netloc_default_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 30.834879159927368s cumulative, 0.030911922454833984s individual

.
current test PASSED/SKIPPED -- test_netloc_from_env in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 30.869187593460083s cumulative, 0.034308433532714844s individual

.
current test PASSED/SKIPPED -- test_date in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 30.907003164291382s cumulative, 0.03781557083129883s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 30.947027444839478s cumulative, 0.0400242805480957s individual

.
current test PASSED/SKIPPED -- test_port_explicit in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 30.982189893722534s cumulative, 0.03516244888305664s individual

.
current test PASSED/SKIPPED -- test_date_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 31.01380968093872s cumulative, 0.03161978721618652s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 31.055071353912354s cumulative, 0.04126167297363281s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 31.161697387695312s cumulative, 0.10662603378295898s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 31.198923587799072s cumulative, 0.037226200103759766s individual

.
current test PASSED/SKIPPED -- test_app_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 31.225691318511963s cumulative, 0.026767730712890625s individual


tests/test_http_custom_method_routing.py ss.
current test PASSED/SKIPPED -- test_map_http_methods in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_custom_method_routing.py: 31.282480001449585s cumulative, 0.05678868293762207s individual

.
current test PASSED/SKIPPED -- test_bar in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_custom_method_routing.py: 31.370676279067993s cumulative, 0.0881962776184082s individual

s.
current test PASSED/SKIPPED -- test_map_http_methods in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_custom_method_routing.py: 31.424896240234375s cumulative, 0.054219961166381836s individual

s.
current test PASSED/SKIPPED -- test_foo in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_custom_method_routing.py: 31.53488564491272s cumulative, 0.10998940467834473s individual

ss.
current test PASSED/SKIPPED -- test_bar in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_custom_method_routing.py: 31.647597074508667s cumulative, 0.11271142959594727s individual

.
current test PASSED/SKIPPED -- test_foo in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_custom_method_routing.py: 31.716686725616455s cumulative, 0.06908965110778809s individual


tests/test_response_body.py .
current test PASSED/SKIPPED -- test_content_length_not_set_when_streaming_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 31.768667697906494s cumulative, 0.05198097229003906s individual

.
current test PASSED/SKIPPED -- test_response_body_rendition_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 31.822771549224854s cumulative, 0.054103851318359375s individual

.
current test PASSED/SKIPPED -- test_content_length_not_set_when_streaming_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 31.879743099212646s cumulative, 0.05697154998779297s individual

.
current test PASSED/SKIPPED -- test_unsupported_response_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 31.939801692962646s cumulative, 0.06005859375s individual

.
current test PASSED/SKIPPED -- test_append_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 31.9732985496521s cumulative, 0.033496856689453125s individual

.
current test PASSED/SKIPPED -- test_append_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 32.00345492362976s cumulative, 0.030156373977661133s individual

.
current test PASSED/SKIPPED -- test_content_length_set_on_head_with_no_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 32.06065082550049s cumulative, 0.05719590187072754s individual

.
current test PASSED/SKIPPED -- test_content_length_set_on_head_with_no_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 32.10629606246948s cumulative, 0.04564523696899414s individual

.
current test PASSED/SKIPPED -- test_content_length_not_set_when_streaming_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 32.15523338317871s cumulative, 0.048937320709228516s individual

.
current test PASSED/SKIPPED -- test_unsupported_response_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 32.21637845039368s cumulative, 0.06114506721496582s individual

.
current test PASSED/SKIPPED -- test_response_body_rendition_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 32.27608108520508s cumulative, 0.05970263481140137s individual

.
current test PASSED/SKIPPED -- test_response_repr in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 32.301960945129395s cumulative, 0.025879859924316406s individual

.
current test PASSED/SKIPPED -- test_content_length_not_set_when_streaming_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 32.35063409805298s cumulative, 0.048673152923583984s individual

.
current test PASSED/SKIPPED -- test_response_repr in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 32.38006639480591s cumulative, 0.029432296752929688s individual


tests/test_headers.py .
current test PASSED/SKIPPED -- test_override_default_media_type_missing_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 32.43330645561218s cumulative, 0.053240060806274414s individual

.
current test PASSED/SKIPPED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 32.495930194854736s cumulative, 0.06262373924255371s individual

.
current test PASSED/SKIPPED -- test_content_disposition_inline_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 32.55176877975464s cumulative, 0.055838584899902344s individual

.
current test PASSED/SKIPPED -- test_no_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 32.6010901927948s cumulative, 0.04932141304016113s individual

.
current test PASSED/SKIPPED -- test_append_link_multiple in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 32.66636395454407s cumulative, 0.06527376174926758s individual

.
current test PASSED/SKIPPED -- test_vary_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 32.73386526107788s cumulative, 0.06750130653381348s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 32.78771424293518s cumulative, 0.053848981857299805s individual

.
current test PASSED/SKIPPED -- test_content_type_no_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 32.839353799819946s cumulative, 0.051639556884765625s individual

.
current test PASSED/SKIPPED -- test_append_link_with_title_star in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 32.891125440597534s cumulative, 0.05177164077758789s individual

.
current test PASSED/SKIPPED -- test_expires_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 32.956599712371826s cumulative, 0.06547427177429199s individual

.
current test PASSED/SKIPPED -- test_declared_content_length_overridden_by_no_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 33.00859451293945s cumulative, 0.05199480056762695s individual

.
current test PASSED/SKIPPED -- test_unicode_headers_contain_only_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 33.06987738609314s cumulative, 0.06128287315368652s individual

.
current test PASSED/SKIPPED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 33.13195610046387s cumulative, 0.06207871437072754s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 33.18427038192749s cumulative, 0.05231428146362305s individual

.
current test PASSED/SKIPPED -- test_unicode_headers_contain_non_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 33.268717765808105s cumulative, 0.08444738388061523s individual

.
current test PASSED/SKIPPED -- test_unicode_headers_contain_non_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 33.32500696182251s cumulative, 0.0562891960144043s individual

.
current test PASSED/SKIPPED -- test_declared_content_length_on_head in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 33.37762999534607s cumulative, 0.05262303352355957s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 33.43587064743042s cumulative, 0.058240652084350586s individual

.
current test PASSED/SKIPPED -- test_unicode_location_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 33.50793194770813s cumulative, 0.07206130027770996s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 33.56411170959473s cumulative, 0.05617976188659668s individual

.
current test PASSED/SKIPPED -- test_content_length_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 33.62017631530762s cumulative, 0.056064605712890625s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 33.65664863586426s cumulative, 0.036472320556640625s individual

.
current test PASSED/SKIPPED -- test_unset_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 33.69899392127991s cumulative, 0.042345285415649414s individual

.
current test PASSED/SKIPPED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 33.71983218193054s cumulative, 0.020838260650634766s individual

.
current test PASSED/SKIPPED -- test_append_link_invalid_crossorigin_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 33.74251985549927s cumulative, 0.022687673568725586s individual

.
current test PASSED/SKIPPED -- test_response_set_and_get_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 33.81789422035217s cumulative, 0.07537436485290527s individual

.
current test PASSED/SKIPPED -- test_content_header_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 33.89675283432007s cumulative, 0.07885861396789551s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 34.245922565460205s cumulative, 0.3491697311401367s individual

.
current test PASSED/SKIPPED -- test_request_latin1_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 34.649096727371216s cumulative, 0.40317416191101074s individual

.
current test PASSED/SKIPPED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 34.94898462295532s cumulative, 0.29988789558410645s individual

.
current test PASSED/SKIPPED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 35.21043348312378s cumulative, 0.26144886016845703s individual

s
current test PASSED/SKIPPED -- test_unicode_headers_contain_non_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 35.459816455841064s cumulative, 0.24938297271728516s individual

.
current test PASSED/SKIPPED -- test_unset_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 35.80775237083435s cumulative, 0.34793591499328613s individual

.
current test PASSED/SKIPPED -- test_append_link_invalid_crossorigin_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 35.82255244255066s cumulative, 0.014800071716308594s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 35.83961200714111s cumulative, 0.0170595645904541s individual

.
current test PASSED/SKIPPED -- test_content_disposition_inline_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 35.873164653778076s cumulative, 0.03355264663696289s individual

.
current test PASSED/SKIPPED -- test_unicode_headers_contain_non_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 35.900920152664185s cumulative, 0.0277554988861084s individual

.
current test PASSED/SKIPPED -- test_append_link_with_hreflang in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 35.95179629325867s cumulative, 0.05087614059448242s individual

.
current test PASSED/SKIPPED -- test_append_link_invalid_crossorigin_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.016308546066284s cumulative, 0.06451225280761719s individual

.
current test PASSED/SKIPPED -- test_append_link_with_type_hint in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.15470504760742s cumulative, 0.1383965015411377s individual

.
current test PASSED/SKIPPED -- test_append_link_single in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.32615947723389s cumulative, 0.17145442962646484s individual

.
current test PASSED/SKIPPED -- test_append_link_with_hreflang_multi in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.46485185623169s cumulative, 0.13869237899780273s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.586137533187866s cumulative, 0.12128567695617676s individual

.
current test PASSED/SKIPPED -- test_no_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.77236223220825s cumulative, 0.18622469902038574s individual

.
current test PASSED/SKIPPED -- test_headers_with_custom_class_not_callable in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 36.947622299194336s cumulative, 0.17526006698608398s individual

.
current test PASSED/SKIPPED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 37.08796787261963s cumulative, 0.14034557342529297s individual

.
current test PASSED/SKIPPED -- test_no_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 37.22851014137268s cumulative, 0.14054226875305176s individual

.
current test PASSED/SKIPPED -- test_append_link_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 37.36501884460449s cumulative, 0.13650870323181152s individual

.
current test PASSED/SKIPPED -- test_headers_as_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 37.479273557662964s cumulative, 0.11425471305847168s individual

.
current test PASSED/SKIPPED -- test_no_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 37.586798429489136s cumulative, 0.10752487182617188s individual

.
current test PASSED/SKIPPED -- test_no_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 37.709521532058716s cumulative, 0.12272310256958008s individual

.
current test PASSED/SKIPPED -- test_headers_as_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 37.901886224746704s cumulative, 0.19236469268798828s individual

.
current test PASSED/SKIPPED -- test_response_set_and_get_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 38.04078936576843s cumulative, 0.13890314102172852s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 38.180123805999756s cumulative, 0.13933444023132324s individual

.
current test PASSED/SKIPPED -- test_vary_star in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 38.3171808719635s cumulative, 0.13705706596374512s individual

.
current test PASSED/SKIPPED -- test_content_disposition_inline_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 38.44146728515625s cumulative, 0.12428641319274902s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 38.54928112030029s cumulative, 0.10781383514404297s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 38.63540267944336s cumulative, 0.0861215591430664s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 38.71394896507263s cumulative, 0.07854628562927246s individual

.
current test PASSED/SKIPPED -- test_get_header_as_int in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 38.9536406993866s cumulative, 0.23969173431396484s individual

.
current test PASSED/SKIPPED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 39.23538613319397s cumulative, 0.28174543380737305s individual

.
current test PASSED/SKIPPED -- test_no_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 39.432899475097656s cumulative, 0.19751334190368652s individual

.
current test PASSED/SKIPPED -- test_content_disposition_inline_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 39.62584137916565s cumulative, 0.19294190406799316s individual

.
current test PASSED/SKIPPED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 39.87433648109436s cumulative, 0.24849510192871094s individual

.
current test PASSED/SKIPPED -- test_expires_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 40.03027534484863s cumulative, 0.15593886375427246s individual

.
current test PASSED/SKIPPED -- test_no_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 40.2104218006134s cumulative, 0.1801464557647705s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 40.36084985733032s cumulative, 0.15042805671691895s individual

.
current test PASSED/SKIPPED -- test_content_length_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 40.43575572967529s cumulative, 0.0749058723449707s individual

.
current test PASSED/SKIPPED -- test_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 40.4866669178009s cumulative, 0.05091118812561035s individual

.
current test PASSED/SKIPPED -- test_append_link_with_title in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 40.56720733642578s cumulative, 0.08054041862487793s individual

.
current test PASSED/SKIPPED -- test_declared_content_length_overriden_by_data_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 40.6391875743866s cumulative, 0.07198023796081543s individual

.
current test PASSED/SKIPPED -- test_unset_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 40.65544247627258s cumulative, 0.016254901885986328s individual

.
current test PASSED/SKIPPED -- test_vary_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 40.67082929611206s cumulative, 0.015386819839477539s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 40.683303117752075s cumulative, 0.012473821640014648s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 40.70557904243469s cumulative, 0.022275924682617188s individual

.
current test PASSED/SKIPPED -- test_custom_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 40.753708839416504s cumulative, 0.04812979698181152s individual

.
current test PASSED/SKIPPED -- test_append_link_multiple in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 40.819072008132935s cumulative, 0.06536316871643066s individual

.
current test PASSED/SKIPPED -- test_override_default_media_type_missing_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 40.84974265098572s cumulative, 0.030670642852783203s individual

.
current test PASSED/SKIPPED -- test_append_link_with_link_extension in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 40.86634969711304s cumulative, 0.016607046127319336s individual

.
current test PASSED/SKIPPED -- test_unicode_location_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 40.88301730155945s cumulative, 0.016667604446411133s individual

.
current test PASSED/SKIPPED -- test_declared_content_length_overriden_by_body_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 40.89593553543091s cumulative, 0.012918233871459961s individual

.
current test PASSED/SKIPPED -- test_content_disposition_inline_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 40.91086721420288s cumulative, 0.014931678771972656s individual

.
current test PASSED/SKIPPED -- test_declared_content_length_overriden_by_data_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 40.92570185661316s cumulative, 0.01483464241027832s individual

.
current test PASSED/SKIPPED -- test_append_link_with_anchor in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 40.93823003768921s cumulative, 0.012528181076049805s individual

.
current test PASSED/SKIPPED -- test_default_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 40.95448660850525s cumulative, 0.01625657081604004s individual

.
current test PASSED/SKIPPED -- test_declared_content_length_overriden_by_body_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 40.966004610061646s cumulative, 0.011518001556396484s individual

.
current test PASSED/SKIPPED -- test_no_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 40.97895693778992s cumulative, 0.012952327728271484s individual

.
current test PASSED/SKIPPED -- test_append_link_with_hreflang in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 40.99098324775696s cumulative, 0.012026309967041016s individual

.
current test PASSED/SKIPPED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 41.002633810043335s cumulative, 0.011650562286376953s individual

.
current test PASSED/SKIPPED -- test_unicode_headers_contain_non_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 41.018593549728394s cumulative, 0.015959739685058594s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 41.028674602508545s cumulative, 0.010081052780151367s individual

.
current test PASSED/SKIPPED -- test_request_latin1_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 41.048668384552s cumulative, 0.01999378204345703s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 41.06458878517151s cumulative, 0.015920400619506836s individual

.
current test PASSED/SKIPPED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 41.0810341835022s cumulative, 0.016445398330688477s individual

.
current test PASSED/SKIPPED -- test_response_append_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 41.098024129867554s cumulative, 0.016989946365356445s individual

.
current test PASSED/SKIPPED -- test_required_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 41.11232876777649s cumulative, 0.014304637908935547s individual

.
current test PASSED/SKIPPED -- test_unset_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 41.142624855041504s cumulative, 0.03029608726501465s individual

.
current test PASSED/SKIPPED -- test_override_default_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 41.21853280067444s cumulative, 0.07590794563293457s individual

.
current test PASSED/SKIPPED -- test_request_multiple_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 41.284937381744385s cumulative, 0.06640458106994629s individual

.
current test PASSED/SKIPPED -- test_append_link_with_link_extension in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 41.34091019630432s cumulative, 0.05597281455993652s individual

.
current test PASSED/SKIPPED -- test_default_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 41.447998046875s cumulative, 0.10708785057067871s individual

.
current test PASSED/SKIPPED -- test_override_default_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 41.669506311416626s cumulative, 0.22150826454162598s individual

.
current test PASSED/SKIPPED -- test_set_headers_with_custom_class in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 41.75479769706726s cumulative, 0.08529138565063477s individual

.
current test PASSED/SKIPPED -- test_append_link_with_anchor in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 41.98310923576355s cumulative, 0.22831153869628906s individual

.
current test PASSED/SKIPPED -- test_content_header_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 42.05923271179199s cumulative, 0.07612347602844238s individual

.
current test PASSED/SKIPPED -- test_unicode_headers_contain_only_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 42.12532329559326s cumulative, 0.06609058380126953s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 42.1937038898468s cumulative, 0.06838059425354004s individual

.
current test PASSED/SKIPPED -- test_default_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 42.276952266693115s cumulative, 0.08324837684631348s individual

.
current test PASSED/SKIPPED -- test_set_headers_with_custom_class in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 42.34255242347717s cumulative, 0.06560015678405762s individual

.
current test PASSED/SKIPPED -- test_passthrough_request_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 42.42012548446655s cumulative, 0.07757306098937988s individual

.
current test PASSED/SKIPPED -- test_response_append_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 42.479960441589355s cumulative, 0.059834957122802734s individual

.
current test PASSED/SKIPPED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 42.54111647605896s cumulative, 0.06115603446960449s individual

.
current test PASSED/SKIPPED -- test_request_multiple_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 42.59980654716492s cumulative, 0.05869007110595703s individual

.
current test PASSED/SKIPPED -- test_append_link_with_title_star in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 42.666507959365845s cumulative, 0.06670141220092773s individual

.
current test PASSED/SKIPPED -- test_declared_content_length_on_head in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 42.728899240493774s cumulative, 0.06239128112792969s individual

.
current test PASSED/SKIPPED -- test_append_link_invalid_crossorigin_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 42.762805700302124s cumulative, 0.03390645980834961s individual

.
current test PASSED/SKIPPED -- test_vary_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 42.841856479644775s cumulative, 0.07905077934265137s individual

.
current test PASSED/SKIPPED -- test_override_default_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 42.90103006362915s cumulative, 0.059173583984375s individual

.
current test PASSED/SKIPPED -- test_override_default_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 42.96888303756714s cumulative, 0.06785297393798828s individual

.
current test PASSED/SKIPPED -- test_unicode_headers_contain_non_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 43.01866555213928s cumulative, 0.049782514572143555s individual

.
current test PASSED/SKIPPED -- test_append_link_with_title in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 43.08714771270752s cumulative, 0.0684821605682373s individual

.
current test PASSED/SKIPPED -- test_append_link_invalid_crossorigin_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 43.12271451950073s cumulative, 0.03556680679321289s individual

.
current test PASSED/SKIPPED -- test_append_link_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 43.19397497177124s cumulative, 0.07126045227050781s individual

.
current test PASSED/SKIPPED -- test_get_header_as_int in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 43.26329326629639s cumulative, 0.06931829452514648s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 43.358010053634644s cumulative, 0.09471678733825684s individual

.
current test PASSED/SKIPPED -- test_vary_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 43.41856598854065s cumulative, 0.06055593490600586s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 43.48798632621765s cumulative, 0.06942033767700195s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 43.5251829624176s cumulative, 0.03719663619995117s individual

.
current test PASSED/SKIPPED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 43.595749378204346s cumulative, 0.07056641578674316s individual

.
current test PASSED/SKIPPED -- test_unicode_headers_contain_non_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 43.66399145126343s cumulative, 0.06824207305908203s individual

.
current test PASSED/SKIPPED -- test_required_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 43.72501230239868s cumulative, 0.061020851135253906s individual

.
current test PASSED/SKIPPED -- test_default_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 43.83906054496765s cumulative, 0.11404824256896973s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 43.886470794677734s cumulative, 0.04741024971008301s individual

.
current test PASSED/SKIPPED -- test_declared_content_length_overridden_by_no_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 43.95654344558716s cumulative, 0.07007265090942383s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 44.01358389854431s cumulative, 0.05704045295715332s individual

.
current test PASSED/SKIPPED -- test_response_header_helpers_on_get in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 44.07659697532654s cumulative, 0.06301307678222656s individual

.
current test PASSED/SKIPPED -- test_content_type_no_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 44.138649463653564s cumulative, 0.06205248832702637s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 44.188594341278076s cumulative, 0.04994487762451172s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 44.24472165107727s cumulative, 0.056127309799194336s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 44.30561637878418s cumulative, 0.06089472770690918s individual

.
current test PASSED/SKIPPED -- test_content_disposition_inline_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 44.370906829833984s cumulative, 0.06529045104980469s individual

.
current test PASSED/SKIPPED -- test_append_link_single in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 44.418314933776855s cumulative, 0.047408103942871094s individual

.
current test PASSED/SKIPPED -- test_custom_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 44.46520113945007s cumulative, 0.04688620567321777s individual

.
current test PASSED/SKIPPED -- test_response_header_helpers_on_get in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 44.543760538101196s cumulative, 0.07855939865112305s individual

.
current test PASSED/SKIPPED -- test_append_link_with_type_hint in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 44.60518288612366s cumulative, 0.06142234802246094s individual

.
current test PASSED/SKIPPED -- test_append_link_invalid_crossorigin_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 44.6345636844635s cumulative, 0.02938079833984375s individual

.
current test PASSED/SKIPPED -- test_passthrough_request_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 44.68130302429199s cumulative, 0.04673933982849121s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 44.72670125961304s cumulative, 0.04539823532104492s individual

.
current test PASSED/SKIPPED -- test_vary_star in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 44.76007890701294s cumulative, 0.033377647399902344s individual

.
current test PASSED/SKIPPED -- test_unicode_headers_contain_non_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 44.815648555755615s cumulative, 0.05556964874267578s individual

.
current test PASSED/SKIPPED -- test_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 44.85629081726074s cumulative, 0.04064226150512695s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 44.882039070129395s cumulative, 0.025748252868652344s individual

.
current test PASSED/SKIPPED -- test_headers_with_custom_class_not_callable in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 44.91560935974121s cumulative, 0.033570289611816406s individual

.
current test PASSED/SKIPPED -- test_append_link_with_hreflang_multi in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 44.9881317615509s cumulative, 0.07252240180969238s individual


tests/asgi/test_scope.py .
current test PASSED/SKIPPED -- test_unsupported_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 45.02825975418091s cumulative, 0.04012799263000488s individual

.
current test PASSED/SKIPPED -- test_missing_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 45.0427942276001s cumulative, 0.014534473419189453s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 45.06006073951721s cumulative, 0.017266511917114258s individual

.
current test PASSED/SKIPPED -- test_scheme in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 45.073668003082275s cumulative, 0.013607263565063477s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 45.26191473007202s cumulative, 0.1882467269897461s individual

.
current test PASSED/SKIPPED -- test_scheme in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 45.418133020401s cumulative, 0.1562182903289795s individual

.
current test PASSED/SKIPPED -- test_scheme in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 45.630515575408936s cumulative, 0.21238255500793457s individual

.
current test PASSED/SKIPPED -- test_query_string_values in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 46.047502279281616s cumulative, 0.41698670387268066s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 46.26652789115906s cumulative, 0.2190256118774414s individual

.
current test PASSED/SKIPPED -- test_unsupported_scope_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 46.48471641540527s cumulative, 0.21818852424621582s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 46.70647144317627s cumulative, 0.2217550277709961s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 46.737425804138184s cumulative, 0.030954360961914062s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 46.74929976463318s cumulative, 0.011873960494995117s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 46.759459257125854s cumulative, 0.010159492492675781s individual

.
current test PASSED/SKIPPED -- test_cookies_options_meathod in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 46.76401090621948s cumulative, 0.00455164909362793s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 46.78059220314026s cumulative, 0.016581296920776367s individual

.
current test PASSED/SKIPPED -- test_cookies in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 46.80614399909973s cumulative, 0.025551795959472656s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 46.82380676269531s cumulative, 0.017662763595581055s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 46.850932121276855s cumulative, 0.02712535858154297s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 46.86595416069031s cumulative, 0.015022039413452148s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 46.88754343986511s cumulative, 0.021589279174804688s individual

.
current test PASSED/SKIPPED -- test_scheme in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 46.91151976585388s cumulative, 0.02397632598876953s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 46.93546009063721s cumulative, 0.023940324783325195s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 46.95253086090088s cumulative, 0.017070770263671875s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 46.969497203826904s cumulative, 0.01696634292602539s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 46.98103404045105s cumulative, 0.011536836624145508s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_default_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 46.99486255645752s cumulative, 0.013828516006469727s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 47.00363349914551s cumulative, 0.008770942687988281s individual

.
current test PASSED/SKIPPED -- test_unsupported_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 47.009424924850464s cumulative, 0.005791425704956055s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 47.015902042388916s cumulative, 0.0064771175384521484s individual

.
current test PASSED/SKIPPED -- test_unsupported_scope_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 47.030320167541504s cumulative, 0.01441812515258789s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 47.036810636520386s cumulative, 0.006490468978881836s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 47.04247164726257s cumulative, 0.0056610107421875s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 47.05068516731262s cumulative, 0.008213520050048828s individual

.
current test PASSED/SKIPPED -- test_scheme in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 47.06757140159607s cumulative, 0.016886234283447266s individual

.
current test PASSED/SKIPPED -- test_unsupported_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 47.08591985702515s cumulative, 0.01834845542907715s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 47.111445903778076s cumulative, 0.025526046752929688s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 47.12985587120056s cumulative, 0.01840996742248535s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 47.14045429229736s cumulative, 0.010598421096801758s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 47.14941048622131s cumulative, 0.008956193923950195s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 47.16118359565735s cumulative, 0.011773109436035156s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 47.22445797920227s cumulative, 0.06327438354492188s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 47.267377853393555s cumulative, 0.04291987419128418s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 47.31325721740723s cumulative, 0.045879364013671875s individual

.
current test PASSED/SKIPPED -- test_cookies in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 47.345449924468994s cumulative, 0.03219270706176758s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 47.3980278968811s cumulative, 0.052577972412109375s individual

.
current test PASSED/SKIPPED -- test_scheme in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 47.4322235584259s cumulative, 0.034195661544799805s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 47.491342544555664s cumulative, 0.05911898612976074s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 47.5385205745697s cumulative, 0.047178030014038086s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 47.58029103279114s cumulative, 0.04177045822143555s individual

.
current test PASSED/SKIPPED -- test_scheme in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 47.60951900482178s cumulative, 0.02922797203063965s individual

.
current test PASSED/SKIPPED -- test_unsupported_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 47.65225410461426s cumulative, 0.04273509979248047s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 47.692354917526245s cumulative, 0.040100812911987305s individual

.
current test PASSED/SKIPPED -- test_unsupported_scope_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 47.74069118499756s cumulative, 0.04833626747131348s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 47.78156852722168s cumulative, 0.040877342224121094s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 47.83028030395508s cumulative, 0.04871177673339844s individual


tests/test_error.py .
current test PASSED/SKIPPED -- test_override_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 47.88128662109375s cumulative, 0.051006317138671875s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 47.913949728012085s cumulative, 0.03266310691833496s individual

.
current test PASSED/SKIPPED -- test_other_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 47.94653034210205s cumulative, 0.03258061408996582s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 47.97655725479126s cumulative, 0.030026912689208984s individual

.
current test PASSED/SKIPPED -- test_override_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 48.01258063316345s cumulative, 0.03602337837219238s individual

.
current test PASSED/SKIPPED -- test_other_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 48.044942140579224s cumulative, 0.032361507415771484s individual

.
current test PASSED/SKIPPED -- test_custom_400 in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 48.07684659957886s cumulative, 0.03190445899963379s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 48.10675501823425s cumulative, 0.029908418655395508s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 48.1379919052124s cumulative, 0.031236886978149414s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 48.18291258811951s cumulative, 0.04492068290710449s individual

.
current test PASSED/SKIPPED -- test_no_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 48.21617579460144s cumulative, 0.033263206481933594s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 48.24446392059326s cumulative, 0.02828812599182129s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 48.27371692657471s cumulative, 0.029253005981445312s individual

.
current test PASSED/SKIPPED -- test_args_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 48.30798602104187s cumulative, 0.034269094467163086s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 48.3354127407074s cumulative, 0.027426719665527344s individual

.
current test PASSED/SKIPPED -- test_custom_400 in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 48.37347888946533s cumulative, 0.03806614875793457s individual

.
current test PASSED/SKIPPED -- test_args_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 48.405431270599365s cumulative, 0.0319523811340332s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 48.43146252632141s cumulative, 0.0260312557220459s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 48.46262574195862s cumulative, 0.03116321563720703s individual

.
current test PASSED/SKIPPED -- test_with_retry_after_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 48.48944044113159s cumulative, 0.026814699172973633s individual

.
current test PASSED/SKIPPED -- test_custom_400 in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 48.516449213027954s cumulative, 0.027008771896362305s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 48.56115412712097s cumulative, 0.04470491409301758s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 48.589468240737915s cumulative, 0.02831411361694336s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 48.616649866104126s cumulative, 0.027181625366210938s individual

.
current test PASSED/SKIPPED -- test_with_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 48.64001417160034s cumulative, 0.02336430549621582s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 48.66548299789429s cumulative, 0.025468826293945312s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 48.69200944900513s cumulative, 0.026526451110839844s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 48.72086548805237s cumulative, 0.02885603904724121s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 48.748592376708984s cumulative, 0.02772688865661621s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 48.77625751495361s cumulative, 0.027665138244628906s individual

.
current test PASSED/SKIPPED -- test_custom_400 in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 48.80977249145508s cumulative, 0.033514976501464844s individual

.
current test PASSED/SKIPPED -- test_override_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 48.84796738624573s cumulative, 0.038194894790649414s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 48.876911878585815s cumulative, 0.02894449234008789s individual

.
current test PASSED/SKIPPED -- test_args_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 48.906471729278564s cumulative, 0.029559850692749023s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 48.945205211639404s cumulative, 0.038733482360839844s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 48.97469091415405s cumulative, 0.029485702514648438s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 49.002954721450806s cumulative, 0.02826380729675293s individual

.
current test PASSED/SKIPPED -- test_args_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 49.03877353668213s cumulative, 0.03581881523132324s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 49.06208300590515s cumulative, 0.02330946922302246s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 49.08902549743652s cumulative, 0.02694249153137207s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 49.116188287734985s cumulative, 0.027162790298461914s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 49.145442962646484s cumulative, 0.029254674911499023s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 49.1719651222229s cumulative, 0.026522159576416016s individual

.
current test PASSED/SKIPPED -- test_override_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 49.205811500549316s cumulative, 0.033846378326416016s individual

.
current test PASSED/SKIPPED -- test_override_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 49.24041175842285s cumulative, 0.034600257873535156s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 49.27164316177368s cumulative, 0.031231403350830078s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 49.2997407913208s cumulative, 0.02809762954711914s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 49.32887053489685s cumulative, 0.029129743576049805s individual

.
current test PASSED/SKIPPED -- test_override_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 49.36230540275574s cumulative, 0.03343486785888672s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 49.39312171936035s cumulative, 0.030816316604614258s individual

.
current test PASSED/SKIPPED -- test_override_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 49.43323373794556s cumulative, 0.04011201858520508s individual

.
current test PASSED/SKIPPED -- test_no_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 49.45717716217041s cumulative, 0.023943424224853516s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 49.4801070690155s cumulative, 0.022929906845092773s individual

.
current test PASSED/SKIPPED -- test_other_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 49.504061222076416s cumulative, 0.023954153060913086s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 49.52122688293457s cumulative, 0.017165660858154297s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 49.54229187965393s cumulative, 0.02106499671936035s individual

.
current test PASSED/SKIPPED -- test_other_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 49.564687967300415s cumulative, 0.022396087646484375s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 49.58423948287964s cumulative, 0.019551515579223633s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 49.60379123687744s cumulative, 0.019551753997802734s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 49.624958515167236s cumulative, 0.021167278289794922s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 49.64429783821106s cumulative, 0.019339323043823242s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 49.66253328323364s cumulative, 0.018235445022583008s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 49.672635078430176s cumulative, 0.010101795196533203s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 49.68331456184387s cumulative, 0.010679483413696289s individual

.
current test PASSED/SKIPPED -- test_other_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 49.72136116027832s cumulative, 0.03804659843444824s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 49.75658631324768s cumulative, 0.03522515296936035s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 49.84470891952515s cumulative, 0.08812260627746582s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 50.04102396965027s cumulative, 0.19631505012512207s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 50.31981062889099s cumulative, 0.27878665924072266s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 50.51719427108765s cumulative, 0.19738364219665527s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 50.64990425109863s cumulative, 0.13270998001098633s individual

.
current test PASSED/SKIPPED -- test_no_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 50.790708780288696s cumulative, 0.14080452919006348s individual

.
current test PASSED/SKIPPED -- test_other_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 50.99984169006348s cumulative, 0.20913290977478027s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 51.155985832214355s cumulative, 0.1561441421508789s individual

.
current test PASSED/SKIPPED -- test_with_retry_after_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 51.30870723724365s cumulative, 0.15272140502929688s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 51.43198370933533s cumulative, 0.1232764720916748s individual

.
current test PASSED/SKIPPED -- test_override_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 51.443026065826416s cumulative, 0.011042356491088867s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 51.44792079925537s cumulative, 0.004894733428955078s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 51.453011989593506s cumulative, 0.005091190338134766s individual

.
current test PASSED/SKIPPED -- test_with_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 51.458343267440796s cumulative, 0.005331277847290039s individual

.
current test PASSED/SKIPPED -- test_other_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 51.46674847602844s cumulative, 0.008405208587646484s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 51.47208762168884s cumulative, 0.005339145660400391s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 51.48069763183594s cumulative, 0.008610010147094727s individual

.
current test PASSED/SKIPPED -- test_override_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 51.493484020233154s cumulative, 0.012786388397216797s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 51.50262975692749s cumulative, 0.009145736694335938s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 51.512874126434326s cumulative, 0.010244369506835938s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 51.520344734191895s cumulative, 0.007470607757568359s individual

.
current test PASSED/SKIPPED -- test_other_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 51.60240578651428s cumulative, 0.0820610523223877s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 51.68668341636658s cumulative, 0.08427762985229492s individual

.
current test PASSED/SKIPPED -- test_with_retry_after_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 51.76587176322937s cumulative, 0.07918834686279297s individual

.
current test PASSED/SKIPPED -- test_other_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 51.84997773170471s cumulative, 0.0841059684753418s individual

.
current test PASSED/SKIPPED -- test_override_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 51.93816566467285s cumulative, 0.08818793296813965s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 52.02934145927429s cumulative, 0.09117579460144043s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 52.124563455581665s cumulative, 0.09522199630737305s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 52.19136142730713s cumulative, 0.06679797172546387s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 52.26451539993286s cumulative, 0.07315397262573242s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 52.40618681907654s cumulative, 0.14167141914367676s individual

.
current test PASSED/SKIPPED -- test_override_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 52.50029730796814s cumulative, 0.09411048889160156s individual

.
current test PASSED/SKIPPED -- test_with_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 52.582897424697876s cumulative, 0.08260011672973633s individual

.
current test PASSED/SKIPPED -- test_other_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 52.67437124252319s cumulative, 0.09147381782531738s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 52.752647161483765s cumulative, 0.07827591896057129s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 52.941638231277466s cumulative, 0.18899106979370117s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 53.040645360946655s cumulative, 0.09900712966918945s individual

.
current test PASSED/SKIPPED -- test_http_error_repr in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 53.119088888168335s cumulative, 0.07844352722167969s individual

.
current test PASSED/SKIPPED -- test_no_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 53.207178592681885s cumulative, 0.0880897045135498s individual

.
current test PASSED/SKIPPED -- test_other_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 53.30147647857666s cumulative, 0.09429788589477539s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 53.40851163864136s cumulative, 0.10703516006469727s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 53.60449576377869s cumulative, 0.1959841251373291s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 53.68575310707092s cumulative, 0.08125734329223633s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 53.79243803024292s cumulative, 0.10668492317199707s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 53.850634813308716s cumulative, 0.0581967830657959s individual

.
current test PASSED/SKIPPED -- test_override_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 53.9883770942688s cumulative, 0.137742280960083s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 54.05588698387146s cumulative, 0.06750988960266113s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 54.13335609436035s cumulative, 0.0774691104888916s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 54.201515436172485s cumulative, 0.06815934181213379s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 54.27537965774536s cumulative, 0.07386422157287598s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 54.35192608833313s cumulative, 0.07654643058776855s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 54.43130707740784s cumulative, 0.07938098907470703s individual

.
current test PASSED/SKIPPED -- test_no_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 54.490360736846924s cumulative, 0.059053659439086914s individual

.
current test PASSED/SKIPPED -- test_args_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 54.55376839637756s cumulative, 0.06340765953063965s individual

.
current test PASSED/SKIPPED -- test_other_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 54.61581516265869s cumulative, 0.06204676628112793s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 54.66670536994934s cumulative, 0.050890207290649414s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 54.6843159198761s cumulative, 0.017610549926757812s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 54.701626777648926s cumulative, 0.01731085777282715s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 54.74449348449707s cumulative, 0.04286670684814453s individual

.
current test PASSED/SKIPPED -- test_no_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 54.85331845283508s cumulative, 0.1088249683380127s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 61.33346676826477s cumulative, 6.4801483154296875s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 61.35394525527954s cumulative, 0.020478487014770508s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 61.37588667869568s cumulative, 0.021941423416137695s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 61.393593311309814s cumulative, 0.017706632614135742s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 61.41083598136902s cumulative, 0.0172426700592041s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 61.428011894226074s cumulative, 0.017175912857055664s individual

.
current test PASSED/SKIPPED -- test_args_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 61.44752526283264s cumulative, 0.019513368606567383s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 61.46578121185303s cumulative, 0.018255949020385742s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 61.483912229537964s cumulative, 0.018131017684936523s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 61.4999635219574s cumulative, 0.016051292419433594s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 61.51828575134277s cumulative, 0.018322229385375977s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 61.53677415847778s cumulative, 0.018488407135009766s individual


tests/test_wsgi.py .
current test PASSED/SKIPPED -- test_post_read_bounded_stream_no_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi.py: 61.68642473220825s cumulative, 0.14965057373046875s individual

.
current test PASSED/SKIPPED -- test_head_405 in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi.py: 61.7164249420166s cumulative, 0.03000020980834961s individual

.
current test PASSED/SKIPPED -- test_put in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi.py: 61.76093006134033s cumulative, 0.04450511932373047s individual

.
current test PASSED/SKIPPED -- test_post in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi.py: 62.16015148162842s cumulative, 0.39922142028808594s individual

.
current test PASSED/SKIPPED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi.py: 62.54465961456299s cumulative, 0.3845081329345703s individual

.
current test PASSED/SKIPPED -- test_post_invalid_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi.py: 62.95512771606445s cumulative, 0.41046810150146484s individual

.
current test PASSED/SKIPPED -- test_post_read_bounded_stream in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi.py: 63.375271797180176s cumulative, 0.42014408111572266s individual


tests/test_options.py .
current test PASSED/SKIPPED -- test_incorrect_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_options.py: 63.381717681884766s cumulative, 0.006445884704589844s individual

.
current test PASSED/SKIPPED -- test_options_toggle in /home/kaiyaok2/PythonProjects/falcon/tests/test_options.py: 63.386796951293945s cumulative, 0.0050792694091796875s individual

.
current test PASSED/SKIPPED -- test_options_toggle in /home/kaiyaok2/PythonProjects/falcon/tests/test_options.py: 63.39236378669739s cumulative, 0.005566835403442383s individual

.
current test PASSED/SKIPPED -- test_options_toggle in /home/kaiyaok2/PythonProjects/falcon/tests/test_options.py: 63.39791440963745s cumulative, 0.0055506229400634766s individual

.
current test PASSED/SKIPPED -- test_options_toggle in /home/kaiyaok2/PythonProjects/falcon/tests/test_options.py: 63.40626096725464s cumulative, 0.0083465576171875s individual

.
current test PASSED/SKIPPED -- test_option_defaults in /home/kaiyaok2/PythonProjects/falcon/tests/test_options.py: 63.4193434715271s cumulative, 0.013082504272460938s individual


tests/asgi/test_asgi_helpers.py .
current test PASSED/SKIPPED -- test_intricate_app in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_helpers.py: 63.445390462875366s cumulative, 0.0260469913482666s individual


tests/test_cors_middleware.py .
current test PASSED/SKIPPED -- test_enabled_cors_should_accept_all_origins_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 63.566529989242554s cumulative, 0.1211395263671875s individual

.
current test PASSED/SKIPPED -- test_enabled_cors_no_origin in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 63.634175539016724s cumulative, 0.06764554977416992s individual

.
current test PASSED/SKIPPED -- test_disabled_cors_should_not_add_any_extra_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 63.71690225601196s cumulative, 0.08272671699523926s individual

.
current test PASSED/SKIPPED -- test_enabled_cors_should_accept_all_origins_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 63.790860414505005s cumulative, 0.07395815849304199s individual

.
current test PASSED/SKIPPED -- test_enabled_cors_no_origin in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 63.8638014793396s cumulative, 0.07294106483459473s individual

.
current test PASSED/SKIPPED -- test_enabled_cors_should_add_extra_headers_on_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 63.92940664291382s cumulative, 0.06560516357421875s individual

.
current test PASSED/SKIPPED -- test_enabled_cors_handles_preflighting_no_headers_in_req in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 63.987852334976196s cumulative, 0.05844569206237793s individual

.
current test PASSED/SKIPPED -- test_enabled_cors_handles_preflighting in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 64.0642158985138s cumulative, 0.07636356353759766s individual

.
current test PASSED/SKIPPED -- test_disabled_cors_should_not_add_any_extra_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 64.15140724182129s cumulative, 0.08719134330749512s individual

.
current test PASSED/SKIPPED -- test_enabled_cors_handles_preflighting in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 64.20997214317322s cumulative, 0.05856490135192871s individual

.
current test PASSED/SKIPPED -- test_enabled_cors_should_add_extra_headers_on_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 64.27378988265991s cumulative, 0.06381773948669434s individual

.
current test PASSED/SKIPPED -- test_enabled_cors_handles_preflighting_no_headers_in_req in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 64.34867644309998s cumulative, 0.07488656044006348s individual

.
current test PASSED/SKIPPED -- test_allow_credential_existing_origin in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 64.41983199119568s cumulative, 0.07115554809570312s individual

.
current test PASSED/SKIPPED -- test_allow_credential_existing_origin in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 64.4941635131836s cumulative, 0.07433152198791504s individual

.
current test PASSED/SKIPPED -- test_allow_credential_list_or_str in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 64.60399985313416s cumulative, 0.10983633995056152s individual

.
current test PASSED/SKIPPED -- test_expose_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 64.68260073661804s cumulative, 0.07860088348388672s individual

.
current test PASSED/SKIPPED -- test_allow_origin_allow_credential in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 64.76295614242554s cumulative, 0.08035540580749512s individual

.
current test PASSED/SKIPPED -- test_allow_credential_list_or_str in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 64.82359051704407s cumulative, 0.06063437461853027s individual

.
current test PASSED/SKIPPED -- test_allow_credential_list_or_str in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 64.9244110584259s cumulative, 0.10082054138183594s individual

.
current test PASSED/SKIPPED -- test_allow_origin in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 65.0360221862793s cumulative, 0.11161112785339355s individual

.
current test PASSED/SKIPPED -- test_expose_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 65.08754253387451s cumulative, 0.051520347595214844s individual

.
current test PASSED/SKIPPED -- test_allow_origin in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 65.16432166099548s cumulative, 0.07677912712097168s individual

.
current test PASSED/SKIPPED -- test_allow_origin in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 65.21836137771606s cumulative, 0.054039716720581055s individual

.
current test PASSED/SKIPPED -- test_expose_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 65.28519916534424s cumulative, 0.06683778762817383s individual

.
current test PASSED/SKIPPED -- test_expose_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 65.35314989089966s cumulative, 0.06795072555541992s individual

.
current test PASSED/SKIPPED -- test_expose_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 65.40634727478027s cumulative, 0.053197383880615234s individual

.
current test PASSED/SKIPPED -- test_allow_origin in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 65.4809799194336s cumulative, 0.07463264465332031s individual

.
current test PASSED/SKIPPED -- test_raises in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 65.50837922096252s cumulative, 0.027399301528930664s individual

.
current test PASSED/SKIPPED -- test_allow_credential_wildcard in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 65.56935095787048s cumulative, 0.060971736907958984s individual

.
current test PASSED/SKIPPED -- test_allow_origin_allow_credential in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 65.62465119361877s cumulative, 0.055300235748291016s individual

.
current test PASSED/SKIPPED -- test_allow_origin in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 65.68453454971313s cumulative, 0.05988335609436035s individual

.
current test PASSED/SKIPPED -- test_allow_credential_wildcard in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 65.72772789001465s cumulative, 0.04319334030151367s individual

.
current test PASSED/SKIPPED -- test_allow_origin in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 65.83804249763489s cumulative, 0.11031460762023926s individual

.
current test PASSED/SKIPPED -- test_expose_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 65.90146255493164s cumulative, 0.06342005729675293s individual

.
current test PASSED/SKIPPED -- test_allow_credential_list_or_str in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 65.96532082557678s cumulative, 0.0638582706451416s individual


tests/test_request_access_route.py .
current test PASSED/SKIPPED -- test_remote_addr_non_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 65.98958349227905s cumulative, 0.024262666702270508s individual

.
current test PASSED/SKIPPED -- test_x_real_ip in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 66.01741290092468s cumulative, 0.027829408645629883s individual

.
current test PASSED/SKIPPED -- test_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 66.0466821193695s cumulative, 0.02926921844482422s individual

.
current test PASSED/SKIPPED -- test_x_forwarded_for in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 66.07494473457336s cumulative, 0.028262615203857422s individual

.
current test PASSED/SKIPPED -- test_remote_addr_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 66.10310101509094s cumulative, 0.028156280517578125s individual

.
current test PASSED/SKIPPED -- test_remote_addr_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 66.12868571281433s cumulative, 0.025584697723388672s individual

.
current test PASSED/SKIPPED -- test_remote_addr_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 66.15263295173645s cumulative, 0.02394723892211914s individual

.
current test PASSED/SKIPPED -- test_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 66.17361783981323s cumulative, 0.020984888076782227s individual

.
current test PASSED/SKIPPED -- test_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 66.19572567939758s cumulative, 0.022107839584350586s individual

.
current test PASSED/SKIPPED -- test_malformed_rfc_forwarded in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 66.21487140655518s cumulative, 0.019145727157592773s individual

.
current test PASSED/SKIPPED -- test_remote_addr_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 66.23230648040771s cumulative, 0.017435073852539062s individual

.
current test PASSED/SKIPPED -- test_rfc_forwarded in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 66.25246047973633s cumulative, 0.02015399932861328s individual

.
current test PASSED/SKIPPED -- test_x_forwarded_for in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 66.28489279747009s cumulative, 0.03243231773376465s individual

.
current test PASSED/SKIPPED -- test_remote_addr_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 66.30301690101624s cumulative, 0.018124103546142578s individual

.
current test PASSED/SKIPPED -- test_remote_addr_non_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 66.31943440437317s cumulative, 0.016417503356933594s individual

.
current test PASSED/SKIPPED -- test_x_forwarded_for in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 66.33745765686035s cumulative, 0.018023252487182617s individual

.
current test PASSED/SKIPPED -- test_rfc_forwarded in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 66.35715866088867s cumulative, 0.019701004028320312s individual

.
current test PASSED/SKIPPED -- test_x_forwarded_for in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 66.3772075176239s cumulative, 0.020048856735229492s individual

.
current test PASSED/SKIPPED -- test_malformed_rfc_forwarded in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 66.39937853813171s cumulative, 0.0221710205078125s individual

.
current test PASSED/SKIPPED -- test_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 66.42207956314087s cumulative, 0.022701025009155273s individual

.
current test PASSED/SKIPPED -- test_x_real_ip in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 66.4492244720459s cumulative, 0.027144908905029297s individual


tests/test_http_method_routing.py .
current test PASSED/SKIPPED -- test_methods_not_allowed_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 66.57255721092224s cumulative, 0.12333273887634277s individual

.
current test PASSED/SKIPPED -- test_methods_not_allowed_simple in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 66.63433170318604s cumulative, 0.061774492263793945s individual

.
current test PASSED/SKIPPED -- test_misc in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 66.77236890792847s cumulative, 0.13803720474243164s individual

.
current test PASSED/SKIPPED -- test_methods_not_allowed_simple in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 66.86843800544739s cumulative, 0.0960690975189209s individual

.
current test PASSED/SKIPPED -- test_report in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 66.90016746520996s cumulative, 0.03172945976257324s individual

.
current test PASSED/SKIPPED -- test_method_not_allowed_with_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 67.06133890151978s cumulative, 0.16117143630981445s individual

.
current test PASSED/SKIPPED -- test_default_on_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 67.56602144241333s cumulative, 0.5046825408935547s individual

.
current test PASSED/SKIPPED -- test_default_on_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 67.92266201972961s cumulative, 0.3566405773162842s individual

.
current test PASSED/SKIPPED -- test_put in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 68.21740818023682s cumulative, 0.29474616050720215s individual

.
current test PASSED/SKIPPED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 68.54330587387085s cumulative, 0.3258976936340332s individual

.
current test PASSED/SKIPPED -- test_on_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 68.82190084457397s cumulative, 0.278594970703125s individual

.
current test PASSED/SKIPPED -- test_meta_and_others_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 68.92738914489746s cumulative, 0.10548830032348633s individual

.
current test PASSED/SKIPPED -- test_on_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 68.95193886756897s cumulative, 0.02454972267150879s individual

.
current test PASSED/SKIPPED -- test_post_not_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 68.99024629592896s cumulative, 0.03830742835998535s individual

.
current test PASSED/SKIPPED -- test_put in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 69.0223023891449s cumulative, 0.03205609321594238s individual

.
current test PASSED/SKIPPED -- test_methods_not_allowed_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 69.08880877494812s cumulative, 0.06650638580322266s individual

.
current test PASSED/SKIPPED -- test_meta_and_others_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 69.11538529396057s cumulative, 0.026576519012451172s individual

.
current test PASSED/SKIPPED -- test_method_not_allowed_with_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 69.18002986907959s cumulative, 0.06464457511901855s individual

.
current test PASSED/SKIPPED -- test_meta_and_others_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 69.20140624046326s cumulative, 0.021376371383666992s individual

.
current test PASSED/SKIPPED -- test_post_not_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 69.21892189979553s cumulative, 0.01751565933227539s individual

.
current test PASSED/SKIPPED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 69.24341249465942s cumulative, 0.0244905948638916s individual

.
current test PASSED/SKIPPED -- test_report in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 69.26407885551453s cumulative, 0.02066636085510254s individual

.
current test PASSED/SKIPPED -- test_misc in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 69.28355097770691s cumulative, 0.019472122192382812s individual

.
current test PASSED/SKIPPED -- test_meta_and_others_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 69.2988440990448s cumulative, 0.015293121337890625s individual


tests/test_utils.py .
current test PASSED/SKIPPED -- test_something in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 69.31094694137573s cumulative, 0.012102842330932617s individual

.
current test PASSED/SKIPPED -- test_attributes_from_items in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 69.32100653648376s cumulative, 0.010059595108032227s individual

.
current test PASSED/SKIPPED -- test_attributes_from_items in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 69.32820677757263s cumulative, 0.0072002410888671875s individual

.
current test PASSED/SKIPPED -- test_attributes in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 69.3640685081482s cumulative, 0.03586173057556152s individual

.
current test PASSED/SKIPPED -- test_items_from_attributes in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 69.3980040550232s cumulative, 0.033935546875s individual

.
current test PASSED/SKIPPED -- test_get_argnames in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 69.44531989097595s cumulative, 0.04731583595275879s individual

.
current test PASSED/SKIPPED -- test_items_from_attributes in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 69.47386121749878s cumulative, 0.02854132652282715s individual

.
current test PASSED/SKIPPED -- test_attributes in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 69.50871896743774s cumulative, 0.034857749938964844s individual

.
current test PASSED/SKIPPED -- test_dict_interface in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 69.55072546005249s cumulative, 0.042006492614746094s individual

.
current test PASSED/SKIPPED -- test_dict_interface in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 69.57917857170105s cumulative, 0.02845311164855957s individual

.
current test PASSED/SKIPPED -- test_keys_and_values in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 69.61521649360657s cumulative, 0.03603792190551758s individual

.
current test PASSED/SKIPPED -- test_keys_and_values in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 69.65008282661438s cumulative, 0.0348663330078125s individual

.
current test PASSED/SKIPPED -- test_function in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 69.68849039077759s cumulative, 0.03840756416320801s individual

.
current test PASSED/SKIPPED -- test_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 69.72660803794861s cumulative, 0.03811764717102051s individual

.
current test PASSED/SKIPPED -- test_json_deprecation in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 69.76802659034729s cumulative, 0.04141855239868164s individual

.
current test PASSED/SKIPPED -- test_something in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 69.84877276420593s cumulative, 0.08074617385864258s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 69.92584943771362s cumulative, 0.07707667350769043s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 70.03298664093018s cumulative, 0.10713720321655273s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 70.1082329750061s cumulative, 0.07524633407592773s individual

.
current test PASSED/SKIPPED -- test_override_method_with_extras in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 70.17022228240967s cumulative, 0.06198930740356445s individual

.
current test PASSED/SKIPPED -- test_plus_in_path_in_create_environ in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 70.19542241096497s cumulative, 0.02520012855529785s individual

.
current test PASSED/SKIPPED -- test_query_string_in_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 70.32325792312622s cumulative, 0.12783551216125488s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 70.39292287826538s cumulative, 0.06966495513916016s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 70.46891260147095s cumulative, 0.0759897232055664s individual

.
current test PASSED/SKIPPED -- test_default_headers_with_override in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 70.55500984191895s cumulative, 0.08609724044799805s individual

.
current test PASSED/SKIPPED -- test_query_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 70.63473963737488s cumulative, 0.07972979545593262s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type_extra_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 70.70060801506042s cumulative, 0.06586837768554688s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 70.74959325790405s cumulative, 0.04898524284362793s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 70.78608679771423s cumulative, 0.036493539810180664s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 70.86602854728699s cumulative, 0.0799417495727539s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 70.93674516677856s cumulative, 0.07071661949157715s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 71.00065588951111s cumulative, 0.06391072273254395s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 71.06841802597046s cumulative, 0.06776213645935059s individual

.
current test PASSED/SKIPPED -- test_simulate_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 71.13788318634033s cumulative, 0.06946516036987305s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 71.1717164516449s cumulative, 0.03383326530456543s individual

.
current test PASSED/SKIPPED -- test_simple_resource_body_json_xor in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 71.20037341117859s cumulative, 0.028656959533691406s individual

.
current test PASSED/SKIPPED -- test_wsgi_iterable_not_closeable in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 71.22619318962097s cumulative, 0.025819778442382812s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 71.28016662597656s cumulative, 0.05397343635559082s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 71.33546590805054s cumulative, 0.05529928207397461s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 71.40762853622437s cumulative, 0.07216262817382812s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 71.47756218910217s cumulative, 0.06993365287780762s individual

.
current test PASSED/SKIPPED -- test_repr_without_content_type_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 71.5027105808258s cumulative, 0.025148391723632812s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 71.54605102539062s cumulative, 0.043340444564819336s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 71.61154103279114s cumulative, 0.0654900074005127s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 71.67354655265808s cumulative, 0.06200551986694336s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 71.73727655410767s cumulative, 0.06373000144958496s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 71.78891825675964s cumulative, 0.05164170265197754s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 71.82549381256104s cumulative, 0.0365755558013916s individual

.
current test PASSED/SKIPPED -- test_simulate_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 71.89212131500244s cumulative, 0.06662750244140625s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 71.93457388877869s cumulative, 0.04245257377624512s individual

.
current test PASSED/SKIPPED -- test_repr_without_content_type_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 71.96087145805359s cumulative, 0.026297569274902344s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 72.00190138816833s cumulative, 0.041029930114746094s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 72.15693688392639s cumulative, 0.15503549575805664s individual

.
current test PASSED/SKIPPED -- test_simulate_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 72.39549279212952s cumulative, 0.238555908203125s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type_extra_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 72.45643496513367s cumulative, 0.06094217300415039s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 72.51058268547058s cumulative, 0.05414772033691406s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 72.56621527671814s cumulative, 0.055632591247558594s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 72.60706734657288s cumulative, 0.04085206985473633s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type_extra_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 72.6646614074707s cumulative, 0.05759406089782715s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 72.70952296257019s cumulative, 0.044861555099487305s individual

.
current test PASSED/SKIPPED -- test_default_headers_with_override in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 72.75846004486084s cumulative, 0.048937082290649414s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 72.79319643974304s cumulative, 0.03473639488220215s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 72.85864663124084s cumulative, 0.06545019149780273s individual

.
current test PASSED/SKIPPED -- test_cached_text_in_result in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 72.92129564285278s cumulative, 0.06264901161193848s individual

.
current test PASSED/SKIPPED -- test_simulate_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 72.94556927680969s cumulative, 0.02427363395690918s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 72.97207951545715s cumulative, 0.026510238647460938s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type_extra_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 73.00246977806091s cumulative, 0.030390262603759766s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 73.21211647987366s cumulative, 0.20964670181274414s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 73.52766442298889s cumulative, 0.3155479431152344s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 73.78205156326294s cumulative, 0.25438714027404785s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 74.05896472930908s cumulative, 0.2769131660461426s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 74.43414068222046s cumulative, 0.37517595291137695s individual

.
current test PASSED/SKIPPED -- test_httpnow_alias_for_backwards_compat in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 74.5925362110138s cumulative, 0.15839552879333496s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type_extra_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 74.71885895729065s cumulative, 0.12632274627685547s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 74.76342439651489s cumulative, 0.044565439224243164s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 74.78219771385193s cumulative, 0.018773317337036133s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 74.79733204841614s cumulative, 0.015134334564208984s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 74.81603026390076s cumulative, 0.01869821548461914s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 74.82819938659668s cumulative, 0.012169122695922852s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 74.86710333824158s cumulative, 0.03890395164489746s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 74.89048361778259s cumulative, 0.023380279541015625s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 74.90401649475098s cumulative, 0.013532876968383789s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 74.91636824607849s cumulative, 0.012351751327514648s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 74.93763780593872s cumulative, 0.021269559860229492s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 74.96366739273071s cumulative, 0.026029586791992188s individual

.
current test PASSED/SKIPPED -- test_simulate_with_environ_extras in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 75.03496742248535s cumulative, 0.07130002975463867s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 75.08598065376282s cumulative, 0.05101323127746582s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 75.10326218605042s cumulative, 0.017281532287597656s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 75.12272834777832s cumulative, 0.019466161727905273s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 75.14119815826416s cumulative, 0.018469810485839844s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 75.16993832588196s cumulative, 0.02874016761779785s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 75.23756265640259s cumulative, 0.06762433052062988s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 75.28664088249207s cumulative, 0.04907822608947754s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 75.34105110168457s cumulative, 0.05441021919250488s individual

.
current test PASSED/SKIPPED -- test_none_header_value_in_create_environ in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 75.36480069160461s cumulative, 0.023749589920043945s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 75.40582275390625s cumulative, 0.04102206230163574s individual

.
current test PASSED/SKIPPED -- test_simple_resource_body_json_xor in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 75.4326241016388s cumulative, 0.026801347732543945s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 75.47364258766174s cumulative, 0.04101848602294922s individual

.
current test PASSED/SKIPPED -- test_override_method_with_extras in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 75.56005430221558s cumulative, 0.08641171455383301s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 75.6202700138092s cumulative, 0.06021571159362793s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type_extra_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 75.68183851242065s cumulative, 0.061568498611450195s individual

.
current test PASSED/SKIPPED -- test_simulate_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 75.73800802230835s cumulative, 0.05616950988769531s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 75.7721483707428s cumulative, 0.03414034843444824s individual

.
current test PASSED/SKIPPED -- test_simulate_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 75.84478545188904s cumulative, 0.07263708114624023s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 75.89093923568726s cumulative, 0.04615378379821777s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 75.92053699493408s cumulative, 0.029597759246826172s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 75.96925616264343s cumulative, 0.048719167709350586s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 76.01232767105103s cumulative, 0.04307150840759277s individual

.
current test PASSED/SKIPPED -- test_path_must_start_with_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 76.05591893196106s cumulative, 0.04359126091003418s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type_extra_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 76.10400056838989s cumulative, 0.04808163642883301s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 76.17059206962585s cumulative, 0.06659150123596191s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 76.21888875961304s cumulative, 0.04829668998718262s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 76.24730181694031s cumulative, 0.028413057327270508s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 76.30453062057495s cumulative, 0.057228803634643555s individual

.
current test PASSED/SKIPPED -- test_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 76.36968159675598s cumulative, 0.06515097618103027s individual

.
current test PASSED/SKIPPED -- test_cached_text_in_result in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 76.45537805557251s cumulative, 0.08569645881652832s individual

.
current test PASSED/SKIPPED -- test_decode_empty_result in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 76.51092624664307s cumulative, 0.05554819107055664s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 76.5464928150177s cumulative, 0.03556656837463379s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type_extra_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 76.61221194267273s cumulative, 0.0657191276550293s individual

.
current test PASSED/SKIPPED -- test_query_string_no_question in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 76.65227794647217s cumulative, 0.04006600379943848s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 76.70738196372986s cumulative, 0.05510401725769043s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 76.74788999557495s cumulative, 0.04050803184509277s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 76.80092358589172s cumulative, 0.05303359031677246s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 76.85475873947144s cumulative, 0.053835153579711914s individual

.
current test PASSED/SKIPPED -- test_simulate_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 76.8989417552948s cumulative, 0.04418301582336426s individual

.
current test PASSED/SKIPPED -- test_query_string_no_question in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 76.94014382362366s cumulative, 0.04120206832885742s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 77.01391816139221s cumulative, 0.07377433776855469s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 77.0533390045166s cumulative, 0.03942084312438965s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 77.11555600166321s cumulative, 0.062216997146606445s individual

.
current test PASSED/SKIPPED -- test_simulate_with_environ_extras in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 77.1848611831665s cumulative, 0.0693051815032959s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 77.25288653373718s cumulative, 0.06802535057067871s individual

.
current test PASSED/SKIPPED -- test_path_must_start_with_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 77.30346512794495s cumulative, 0.05057859420776367s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 77.35259532928467s cumulative, 0.04913020133972168s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 77.39106631278992s cumulative, 0.03847098350524902s individual

.
current test PASSED/SKIPPED -- test_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 77.46504592895508s cumulative, 0.07397961616516113s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 77.52679777145386s cumulative, 0.0617518424987793s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type_extra_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 77.59339928627014s cumulative, 0.06660151481628418s individual

.
current test PASSED/SKIPPED -- test_query_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 77.69701671600342s cumulative, 0.10361742973327637s individual

.
current test PASSED/SKIPPED -- test_simulate_hostname in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 77.74981737136841s cumulative, 0.052800655364990234s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 77.80505800247192s cumulative, 0.055240631103515625s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 77.86109399795532s cumulative, 0.05603599548339844s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 77.91978025436401s cumulative, 0.058686256408691406s individual

.
current test PASSED/SKIPPED -- test_simulate_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 77.98736715316772s cumulative, 0.06758689880371094s individual

.
current test PASSED/SKIPPED -- test_default_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 78.07968139648438s cumulative, 0.09231424331665039s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 78.1165087223053s cumulative, 0.03682732582092285s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 78.14992952346802s cumulative, 0.03342080116271973s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 78.21213293075562s cumulative, 0.062203407287597656s individual

.
current test PASSED/SKIPPED -- test_query_string_in_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 78.26893496513367s cumulative, 0.05680203437805176s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type_extra_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 78.35739183425903s cumulative, 0.08845686912536621s individual

.
current test PASSED/SKIPPED -- test_simulate_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 78.43516755104065s cumulative, 0.07777571678161621s individual

.
current test PASSED/SKIPPED -- test_no_prefix_allowed_for_query_strings_in_create_environ in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 78.45998620986938s cumulative, 0.02481865882873535s individual

.
current test PASSED/SKIPPED -- test_path_escape_chars_in_create_environ in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 78.47818756103516s cumulative, 0.018201351165771484s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 78.51679992675781s cumulative, 0.03861236572265625s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 78.57469487190247s cumulative, 0.05789494514465332s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 78.61705374717712s cumulative, 0.0423588752746582s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 78.67936706542969s cumulative, 0.06231331825256348s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 78.7171220779419s cumulative, 0.03775501251220703s individual

.
current test PASSED/SKIPPED -- test_default_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 78.74668884277344s cumulative, 0.02956676483154297s individual

.
current test PASSED/SKIPPED -- test_simulate_hostname in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 78.80127954483032s cumulative, 0.054590702056884766s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 78.83966875076294s cumulative, 0.03838920593261719s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 78.86562991142273s cumulative, 0.02596116065979004s individual

.
current test PASSED/SKIPPED -- test_simulate_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 78.88055372238159s cumulative, 0.014923810958862305s individual

.
current test PASSED/SKIPPED -- test_decode_empty_result in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 78.90399360656738s cumulative, 0.023439884185791016s individual

.
current test PASSED/SKIPPED -- test_uri_encode_double in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 78.933114528656s cumulative, 0.029120922088623047s individual

.
current test PASSED/SKIPPED -- test_secure_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 78.963547706604s cumulative, 0.030433177947998047s individual

.
current test PASSED/SKIPPED -- test_pack_query_params_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 78.99011778831482s cumulative, 0.02657008171081543s individual

.
current test PASSED/SKIPPED -- test_to_query_str_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 79.00467133522034s cumulative, 0.014553546905517578s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 79.02189564704895s cumulative, 0.01722431182861328s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 79.02896356582642s cumulative, 0.00706791877746582s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 79.03784537315369s cumulative, 0.008881807327270508s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 79.04393362998962s cumulative, 0.0060882568359375s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 79.04894733428955s cumulative, 0.005013704299926758s individual

.
current test PASSED/SKIPPED -- test_uri_encode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 79.0541341304779s cumulative, 0.005186796188354492s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 79.05895614624023s cumulative, 0.0048220157623291016s individual

.
current test PASSED/SKIPPED -- test_uri_decode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 79.06401944160461s cumulative, 0.005063295364379883s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 79.07182097434998s cumulative, 0.007801532745361328s individual

.
current test PASSED/SKIPPED -- test_pack_query_params_several in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 79.2316198348999s cumulative, 0.15979886054992676s individual

.
current test PASSED/SKIPPED -- test_to_query_str_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 79.36255693435669s cumulative, 0.1309370994567871s individual

.
current test PASSED/SKIPPED -- test_uri_decode_unquote_plus in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 79.49292922019958s cumulative, 0.1303722858428955s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 79.62307906150818s cumulative, 0.13014984130859375s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 79.74814367294312s cumulative, 0.12506461143493652s individual

.
current test PASSED/SKIPPED -- test_etag_strong_vs_weak_comparison in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 79.86348462104797s cumulative, 0.1153409481048584s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_unicode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 79.99997639656067s cumulative, 0.1364917755126953s individual

.
current test PASSED/SKIPPED -- test_to_query_str_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 80.1345944404602s cumulative, 0.13461804389953613s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 80.29514193534851s cumulative, 0.16054749488830566s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 80.53306889533997s cumulative, 0.23792695999145508s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 80.5512022972107s cumulative, 0.01813340187072754s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 80.564936876297s cumulative, 0.013734579086303711s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 80.57295966148376s cumulative, 0.008022785186767578s individual

.
current test PASSED/SKIPPED -- test_to_query_str_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 80.57794904708862s cumulative, 0.0049893856048583984s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 80.5830590724945s cumulative, 0.005110025405883789s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 80.58856582641602s cumulative, 0.005506753921508789s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 80.59430623054504s cumulative, 0.00574040412902832s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 80.61207365989685s cumulative, 0.01776742935180664s individual

.
current test PASSED/SKIPPED -- test_secure_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 80.62060236930847s cumulative, 0.008528709411621094s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 80.62716436386108s cumulative, 0.006561994552612305s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 80.63409614562988s cumulative, 0.006931781768798828s individual

.
current test PASSED/SKIPPED -- test_secure_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 80.6406683921814s cumulative, 0.006572246551513672s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 80.66212058067322s cumulative, 0.02145218849182129s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 80.67303085327148s cumulative, 0.010910272598266602s individual

.
current test PASSED/SKIPPED -- test_get_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 80.68370914459229s cumulative, 0.010678291320800781s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 80.69111561775208s cumulative, 0.007406473159790039s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 80.69695281982422s cumulative, 0.005837202072143555s individual

.
current test PASSED/SKIPPED -- test_to_query_str_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 80.70310950279236s cumulative, 0.0061566829681396484s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 80.70838642120361s cumulative, 0.005276918411254883s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_coding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 80.71450304985046s cumulative, 0.006116628646850586s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 80.72007632255554s cumulative, 0.005573272705078125s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 80.72674798965454s cumulative, 0.0066716670989990234s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_unicode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 80.73382067680359s cumulative, 0.0070726871490478516s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 80.73978114128113s cumulative, 0.0059604644775390625s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 80.74624848365784s cumulative, 0.006467342376708984s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_coding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 80.75240159034729s cumulative, 0.006153106689453125s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_unicode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 80.7583589553833s cumulative, 0.005957365036010742s individual

.
current test PASSED/SKIPPED -- test_secure_filename_empty_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 80.7639832496643s cumulative, 0.005624294281005859s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 80.77016592025757s cumulative, 0.006182670593261719s individual

.
current test PASSED/SKIPPED -- test_to_query_str_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 80.77673959732056s cumulative, 0.006573677062988281s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 80.79262828826904s cumulative, 0.015888690948486328s individual

.
current test PASSED/SKIPPED -- test_uri_encode_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 80.80040383338928s cumulative, 0.007775545120239258s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 80.83938193321228s cumulative, 0.03897809982299805s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_coding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 80.88317084312439s cumulative, 0.043788909912109375s individual

.
current test PASSED/SKIPPED -- test_prop_uri_decode_models_stdlib_unquote_plus in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 80.94396495819092s cumulative, 0.06079411506652832s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_coding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 80.98613691329956s cumulative, 0.04217195510864258s individual

.
current test PASSED/SKIPPED -- test_secure_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 81.01687908172607s cumulative, 0.030742168426513672s individual

.
current test PASSED/SKIPPED -- test_prop_uri_encode_models_stdlib_quote in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 81.05381798744202s cumulative, 0.03693890571594238s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 81.08526945114136s cumulative, 0.03145146369934082s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_unicode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 81.1180784702301s cumulative, 0.03280901908874512s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 81.14669418334961s cumulative, 0.028615713119506836s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 81.1729097366333s cumulative, 0.026215553283691406s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 81.2014832496643s cumulative, 0.02857351303100586s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 81.23134517669678s cumulative, 0.029861927032470703s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 81.26043248176575s cumulative, 0.029087305068969727s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 81.28933835029602s cumulative, 0.028905868530273438s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 81.31601023674011s cumulative, 0.026671886444091797s individual

.
current test PASSED/SKIPPED -- test_parse_query_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 81.34796118736267s cumulative, 0.031950950622558594s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 81.37986946105957s cumulative, 0.031908273696899414s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 81.4105761051178s cumulative, 0.03070664405822754s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 81.44475102424622s cumulative, 0.03417491912841797s individual

.
current test PASSED/SKIPPED -- test_uri_decode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 81.47689867019653s cumulative, 0.03214764595031738s individual

.
current test PASSED/SKIPPED -- test_secure_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 81.52664256095886s cumulative, 0.0497438907623291s individual

.
current test PASSED/SKIPPED -- test_pack_query_params_one in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 81.54954147338867s cumulative, 0.02289891242980957s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 81.57483196258545s cumulative, 0.025290489196777344s individual

.
current test PASSED/SKIPPED -- test_dt_to_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 81.60471034049988s cumulative, 0.02987837791442871s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 81.63152384757996s cumulative, 0.026813507080078125s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 81.66769051551819s cumulative, 0.03616666793823242s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 81.69788360595703s cumulative, 0.030193090438842773s individual

.
current test PASSED/SKIPPED -- test_to_query_str_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 81.72756218910217s cumulative, 0.0296785831451416s individual

.
current test PASSED/SKIPPED -- test_to_query_str_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 81.76458811759949s cumulative, 0.03702592849731445s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 81.79396486282349s cumulative, 0.029376745223999023s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 81.82287621498108s cumulative, 0.028911352157592773s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 81.85643315315247s cumulative, 0.03355693817138672s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 81.8842465877533s cumulative, 0.027813434600830078s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 81.9151074886322s cumulative, 0.03086090087890625s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 81.9419527053833s cumulative, 0.026845216751098633s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 81.97003316879272s cumulative, 0.028080463409423828s individual

.
current test PASSED/SKIPPED -- test_parse_host in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 81.99910140037537s cumulative, 0.0290682315826416s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 82.02784395217896s cumulative, 0.028742551803588867s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 82.05024814605713s cumulative, 0.022404193878173828s individual

.
current test PASSED/SKIPPED -- test_prop_uri_encode_value_models_stdlib_quote_safe_tilde in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 82.08573389053345s cumulative, 0.03548574447631836s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_coding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 82.11119556427002s cumulative, 0.025461673736572266s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 82.13358354568481s cumulative, 0.022387981414794922s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 82.15832281112671s cumulative, 0.02473926544189453s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 82.18315625190735s cumulative, 0.02483344078063965s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 82.2086877822876s cumulative, 0.025531530380249023s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_unicode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 82.2379801273346s cumulative, 0.02929234504699707s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_coding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 82.26157879829407s cumulative, 0.023598670959472656s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 82.29038667678833s cumulative, 0.028807878494262695s individual

.
current test PASSED/SKIPPED -- test_etag_dumps_to_header_format in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 82.31481766700745s cumulative, 0.02443099021911621s individual

.
current test PASSED/SKIPPED -- test_to_query_str_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 82.33836889266968s cumulative, 0.023551225662231445s individual

.
current test PASSED/SKIPPED -- test_unquote_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 82.36303687095642s cumulative, 0.024667978286743164s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 82.38437724113464s cumulative, 0.021340370178222656s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 82.40796875953674s cumulative, 0.02359151840209961s individual

.
current test PASSED/SKIPPED -- test_to_query_str_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 82.43331861495972s cumulative, 0.025349855422973633s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_unicode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 82.46088981628418s cumulative, 0.02757120132446289s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 82.48883724212646s cumulative, 0.027947425842285156s individual

.
current test PASSED/SKIPPED -- test_secure_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 82.51694917678833s cumulative, 0.028111934661865234s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_unicode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 82.54258942604065s cumulative, 0.025640249252319336s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 82.5652346611023s cumulative, 0.022645235061645508s individual

.
current test PASSED/SKIPPED -- test_uri_decode_unquote_plus in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 82.59262752532959s cumulative, 0.027392864227294922s individual

.
current test PASSED/SKIPPED -- test_http_now in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 82.61826634407043s cumulative, 0.025638818740844727s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 82.6494631767273s cumulative, 0.03119683265686035s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 82.67065215110779s cumulative, 0.021188974380493164s individual

.
current test PASSED/SKIPPED -- test_secure_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 82.69482350349426s cumulative, 0.02417135238647461s individual

.
current test PASSED/SKIPPED -- test_http_date_to_dt in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 82.76499891281128s cumulative, 0.0701754093170166s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 82.7950119972229s cumulative, 0.030013084411621094s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 82.82502841949463s cumulative, 0.030016422271728516s individual

.
current test PASSED/SKIPPED -- test_deprecated_decorator in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 82.85314178466797s cumulative, 0.028113365173339844s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 82.88144373893738s cumulative, 0.02830195426940918s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_unicode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 82.91292405128479s cumulative, 0.03148031234741211s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 82.9402494430542s cumulative, 0.02732539176940918s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 82.96765804290771s cumulative, 0.027408599853515625s individual

.
current test PASSED/SKIPPED -- test_get_http_status_warns in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 82.99067044258118s cumulative, 0.023012399673461914s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 83.01713371276855s cumulative, 0.02646327018737793s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 83.03873801231384s cumulative, 0.021604299545288086s individual


tests/asgi/test_misc.py .
current test PASSED/SKIPPED -- test_http_error_not_impl in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_misc.py: 83.08571791648865s cumulative, 0.04697990417480469s individual

.
current test PASSED/SKIPPED -- test_python_error_not_impl in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_misc.py: 83.1357033252716s cumulative, 0.049985408782958984s individual

.
current test PASSED/SKIPPED -- test_http_status_not_impl in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_misc.py: 83.18492364883423s cumulative, 0.04922032356262207s individual


tests/test_media_handlers.py .
current test PASSED/SKIPPED -- test_sync_methods_not_overridden in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 83.27370357513428s cumulative, 0.08877992630004883s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 83.31360077857971s cumulative, 0.03989720344543457s individual

.
current test PASSED/SKIPPED -- test_deserialization_raises in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 83.41339349746704s cumulative, 0.0997927188873291s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 83.46505117416382s cumulative, 0.051657676696777344s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 83.49223613739014s cumulative, 0.02718496322631836s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 83.50653791427612s cumulative, 0.014301776885986328s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 83.55282330513s cumulative, 0.046285390853881836s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 83.71863627433777s cumulative, 0.16581296920776367s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 83.72649645805359s cumulative, 0.007860183715820312s individual

.
current test PASSED/SKIPPED -- test_deserialization_raises in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 83.74420976638794s cumulative, 0.017713308334350586s individual

.
current test PASSED/SKIPPED -- test_json_err_no_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 84.18952584266663s cumulative, 0.4453160762786865s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 84.41252088546753s cumulative, 0.22299504280090332s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 84.65069460868835s cumulative, 0.2381737232208252s individual

.
current test PASSED/SKIPPED -- test_json_err_no_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 85.34783053398132s cumulative, 0.6971359252929688s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 85.63336396217346s cumulative, 0.28553342819213867s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 85.67586708068848s cumulative, 0.04250311851501465s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 85.68436646461487s cumulative, 0.008499383926391602s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 85.6924045085907s cumulative, 0.008038043975830078s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 85.697274684906s cumulative, 0.004870176315307617s individual

.
current test PASSED/SKIPPED -- test_defaultError in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 85.70209383964539s cumulative, 0.004819154739379883s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 85.72580909729004s cumulative, 0.02371525764465332s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 85.75062823295593s cumulative, 0.024819135665893555s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 85.76060199737549s cumulative, 0.009973764419555664s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 85.76999402046204s cumulative, 0.009392023086547852s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 85.77648305892944s cumulative, 0.0064890384674072266s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 85.7806556224823s cumulative, 0.004172563552856445s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 85.79237103462219s cumulative, 0.011715412139892578s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 85.79989266395569s cumulative, 0.007521629333496094s individual

.
current test PASSED/SKIPPED -- test_deserialization_raises in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 85.81997060775757s cumulative, 0.020077943801879883s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 85.82550811767578s cumulative, 0.005537509918212891s individual

.
current test PASSED/SKIPPED -- test_deserialization_raises in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 85.83749747276306s cumulative, 0.011989355087280273s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 85.8531289100647s cumulative, 0.015631437301635742s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 85.8597149848938s cumulative, 0.0065860748291015625s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 85.86642098426819s cumulative, 0.0067059993743896484s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 85.87038612365723s cumulative, 0.003965139389038086s individual

.
current test PASSED/SKIPPED -- test_deserialization_raises in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 85.88066077232361s cumulative, 0.010274648666381836s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 85.88985753059387s cumulative, 0.009196758270263672s individual

.
current test PASSED/SKIPPED -- test_async_methods_not_overridden in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 85.89700222015381s cumulative, 0.0071446895599365234s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 85.90119338035583s cumulative, 0.004191160202026367s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 85.90480494499207s cumulative, 0.0036115646362304688s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 85.90839529037476s cumulative, 0.0035903453826904297s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 85.9181535243988s cumulative, 0.009758234024047852s individual

.
current test PASSED/SKIPPED -- test_deserialization_raises in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 85.94228172302246s cumulative, 0.024128198623657227s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 85.95629405975342s cumulative, 0.014012336730957031s individual

.
current test PASSED/SKIPPED -- test_sync_methods_not_overridden in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 86.04379510879517s cumulative, 0.08750104904174805s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 86.15473914146423s cumulative, 0.11094403266906738s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 86.22295212745667s cumulative, 0.06821298599243164s individual

.
current test PASSED/SKIPPED -- test_json_err_no_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 86.28764224052429s cumulative, 0.06469011306762695s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 86.31799864768982s cumulative, 0.030356407165527344s individual

.
current test PASSED/SKIPPED -- test_deserialization_raises in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 86.42295026779175s cumulative, 0.10495162010192871s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 86.45352721214294s cumulative, 0.03057694435119629s individual

.
current test PASSED/SKIPPED -- test_async_handler_returning_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 86.51620841026306s cumulative, 0.06268119812011719s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 86.58325219154358s cumulative, 0.06704378128051758s individual

.
current test PASSED/SKIPPED -- test_deserialization_raises in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 86.66481328010559s cumulative, 0.08156108856201172s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 86.69435691833496s cumulative, 0.029543638229370117s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 86.76440668106079s cumulative, 0.07004976272583008s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 86.82512164115906s cumulative, 0.0607149600982666s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 86.93781328201294s cumulative, 0.11269164085388184s individual

.
current test PASSED/SKIPPED -- test_json_err_no_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 87.04075694084167s cumulative, 0.10294365882873535s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 87.09988832473755s cumulative, 0.05913138389587402s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 87.1267762184143s cumulative, 0.026887893676757812s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 87.15737724304199s cumulative, 0.030601024627685547s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 87.23727679252625s cumulative, 0.07989954948425293s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 87.3056218624115s cumulative, 0.0683450698852539s individual


tests/asgi/test_hello_asgi.py .
current test PASSED/SKIPPED -- test_filelike_using_helper in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 87.37155532836914s cumulative, 0.0659334659576416s individual

.
current test PASSED/SKIPPED -- test_nongenfunc_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 87.43433618545532s cumulative, 0.06278085708618164s individual

.
current test PASSED/SKIPPED -- test_filelike_closing in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 87.54328107833862s cumulative, 0.10894489288330078s individual

.
current test PASSED/SKIPPED -- test_status_not_set in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 87.60994052886963s cumulative, 0.06665945053100586s individual

.
current test PASSED/SKIPPED -- test_closing_stream in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 87.67101860046387s cumulative, 0.06107807159423828s individual

.
current test PASSED/SKIPPED -- test_root_route in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 87.72974467277527s cumulative, 0.05872607231140137s individual

.
current test PASSED/SKIPPED -- test_genfunc_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 87.79940748214722s cumulative, 0.06966280937194824s individual

.
current test PASSED/SKIPPED -- test_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 87.86179947853088s cumulative, 0.06239199638366699s individual

.
current test PASSED/SKIPPED -- test_no_body_on_head in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 87.92120671272278s cumulative, 0.05940723419189453s individual

.
current test PASSED/SKIPPED -- test_closing_stream in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 87.97954535484314s cumulative, 0.05833864212036133s individual

.
current test PASSED/SKIPPED -- test_env_headers_list_of_tuples in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 88.00126671791077s cumulative, 0.021721363067626953s individual

.
current test PASSED/SKIPPED -- test_stream_known_len in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 88.07202172279358s cumulative, 0.0707550048828125s individual

.
current test PASSED/SKIPPED -- test_filelike_closing_aiofiles in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 88.26028227806091s cumulative, 0.18826055526733398s individual

.
current test PASSED/SKIPPED -- test_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 88.31715631484985s cumulative, 0.05687403678894043s individual

.
current test PASSED/SKIPPED -- test_closing_stream in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 88.3704571723938s cumulative, 0.05330085754394531s individual

.
current test PASSED/SKIPPED -- test_coroutine_required in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 88.40818643569946s cumulative, 0.03772926330566406s individual

.
current test PASSED/SKIPPED -- test_stream_chunked in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 88.50115537643433s cumulative, 0.09296894073486328s individual

.
current test PASSED/SKIPPED -- test_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 88.56020998954773s cumulative, 0.05905461311340332s individual

.
current test PASSED/SKIPPED -- test_filelike in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 88.61781620979309s cumulative, 0.05760622024536133s individual

.
current test PASSED/SKIPPED -- test_closing_stream in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 88.681964635849s cumulative, 0.0641484260559082s individual

.
current test PASSED/SKIPPED -- test_noncoroutine_required in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 88.72033834457397s cumulative, 0.038373708724975586s individual

.
current test PASSED/SKIPPED -- test_no_route in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 88.78291368484497s cumulative, 0.0625753402709961s individual

.
current test PASSED/SKIPPED -- test_filelike_closing in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 88.8359808921814s cumulative, 0.05306720733642578s individual


tests/test_static.py .
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 88.87017297744751s cumulative, 0.03419208526611328s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 88.9169692993164s cumulative, 0.046796321868896484s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 88.95017504692078s cumulative, 0.03320574760437012s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 89.08882689476013s cumulative, 0.13865184783935547s individual

.
current test PASSED/SKIPPED -- test_downloadable in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 89.17502164840698s cumulative, 0.08619475364685059s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 89.21383786201477s cumulative, 0.038816213607788086s individual

.
current test PASSED/SKIPPED -- test_invalid_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 89.23058128356934s cumulative, 0.01674342155456543s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 89.2619092464447s cumulative, 0.03132796287536621s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 89.32147741317749s cumulative, 0.059568166732788086s individual

.
current test PASSED/SKIPPED -- test_downloadable in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 89.41416525840759s cumulative, 0.09268784523010254s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 89.46480536460876s cumulative, 0.050640106201171875s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 89.48326253890991s cumulative, 0.01845717430114746s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 89.49674820899963s cumulative, 0.01348567008972168s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 89.72204494476318s cumulative, 0.2252967357635498s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 90.31565618515015s cumulative, 0.5936112403869629s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 90.80341601371765s cumulative, 0.4877598285675049s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 91.06644940376282s cumulative, 0.263033390045166s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 91.26495242118835s cumulative, 0.1985030174255371s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 91.32381534576416s cumulative, 0.058862924575805664s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 91.34421825408936s cumulative, 0.020402908325195312s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 91.36441230773926s cumulative, 0.020194053649902344s individual

.
current test PASSED/SKIPPED -- test_bounded_file_wrapper in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 91.3717041015625s cumulative, 0.0072917938232421875s individual

.
current test PASSED/SKIPPED -- test_invalid_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 91.38451409339905s cumulative, 0.012809991836547852s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 91.3944571018219s cumulative, 0.009943008422851562s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 91.40533757209778s cumulative, 0.010880470275878906s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 91.41589069366455s cumulative, 0.010553121566772461s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 91.42585253715515s cumulative, 0.009961843490600586s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 91.44143557548523s cumulative, 0.015583038330078125s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 91.45362162590027s cumulative, 0.012186050415039062s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 91.46466660499573s cumulative, 0.011044979095458984s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 91.49388003349304s cumulative, 0.029213428497314453s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 91.51014065742493s cumulative, 0.016260623931884766s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 91.52604222297668s cumulative, 0.015901565551757812s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 91.54327321052551s cumulative, 0.017230987548828125s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 91.55487179756165s cumulative, 0.011598587036132812s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 91.58369040489197s cumulative, 0.028818607330322266s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 91.60048174858093s cumulative, 0.016791343688964844s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 91.61000752449036s cumulative, 0.009525775909423828s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 91.64050006866455s cumulative, 0.030492544174194336s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 91.67543911933899s cumulative, 0.03493905067443848s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 91.77627658843994s cumulative, 0.10083746910095215s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 91.821044921875s cumulative, 0.044768333435058594s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 91.88143348693848s cumulative, 0.06038856506347656s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 91.94037437438965s cumulative, 0.058940887451171875s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 92.05529165267944s cumulative, 0.11491727828979492s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 92.12311840057373s cumulative, 0.06782674789428711s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 92.1727089881897s cumulative, 0.0495905876159668s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 92.25628113746643s cumulative, 0.0835721492767334s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 92.34154605865479s cumulative, 0.08526492118835449s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 92.39362955093384s cumulative, 0.052083492279052734s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 92.44695711135864s cumulative, 0.05332756042480469s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 92.4905788898468s cumulative, 0.04362177848815918s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 92.5204906463623s cumulative, 0.02991175651550293s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 92.59135055541992s cumulative, 0.07085990905761719s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 92.63976001739502s cumulative, 0.048409461975097656s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 92.66998505592346s cumulative, 0.030225038528442383s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 92.7851197719574s cumulative, 0.11513471603393555s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 92.8297746181488s cumulative, 0.04465484619140625s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 92.86802220344543s cumulative, 0.03824758529663086s individual

.
current test PASSED/SKIPPED -- test_invalid_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 92.90018725395203s cumulative, 0.0321650505065918s individual

.
current test PASSED/SKIPPED -- test_downloadable_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 92.94950461387634s cumulative, 0.049317359924316406s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 92.98819279670715s cumulative, 0.03868818283081055s individual

.
current test PASSED/SKIPPED -- test_pathlib_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 93.02889370918274s cumulative, 0.04070091247558594s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 93.09617018699646s cumulative, 0.0672764778137207s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 93.1285080909729s cumulative, 0.03233790397644043s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 93.17552876472473s cumulative, 0.047020673751831055s individual

.
current test PASSED/SKIPPED -- test_downloadable_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 93.22548532485962s cumulative, 0.049956560134887695s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 93.27092623710632s cumulative, 0.0454409122467041s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 93.31584119796753s cumulative, 0.044914960861206055s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 93.37772250175476s cumulative, 0.061881303787231445s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 93.40920829772949s cumulative, 0.031485795974731445s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 93.445072889328s cumulative, 0.03586459159851074s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 93.49757862091064s cumulative, 0.0525057315826416s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 93.53213715553284s cumulative, 0.03455853462219238s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 93.5621247291565s cumulative, 0.029987573623657227s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 93.63322353363037s cumulative, 0.07109880447387695s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 93.73216414451599s cumulative, 0.09894061088562012s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 93.80788660049438s cumulative, 0.07572245597839355s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 93.87467956542969s cumulative, 0.06679296493530273s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 93.9687020778656s cumulative, 0.09402251243591309s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 94.0708372592926s cumulative, 0.10213518142700195s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 94.12959384918213s cumulative, 0.05875658988952637s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 94.18453407287598s cumulative, 0.054940223693847656s individual

.
current test PASSED/SKIPPED -- test_pathlib_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 94.2430157661438s cumulative, 0.058481693267822266s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 94.33268857002258s cumulative, 0.08967280387878418s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 94.40469169616699s cumulative, 0.07200312614440918s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 94.47211718559265s cumulative, 0.06742548942565918s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 94.50504040718079s cumulative, 0.032923221588134766s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 94.54016947746277s cumulative, 0.03512907028198242s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 94.60912585258484s cumulative, 0.06895637512207031s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 94.68666219711304s cumulative, 0.07753634452819824s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 94.71881771087646s cumulative, 0.032155513763427734s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 94.74912405014038s cumulative, 0.030306339263916016s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 94.78570652008057s cumulative, 0.03658246994018555s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 94.83989095687866s cumulative, 0.0541844367980957s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 94.8898241519928s cumulative, 0.04993319511413574s individual

.
current test PASSED/SKIPPED -- test_lifo in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 94.96323299407959s cumulative, 0.07340884208679199s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 95.00061821937561s cumulative, 0.03738522529602051s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 95.02767896652222s cumulative, 0.027060747146606445s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 95.07262516021729s cumulative, 0.04494619369506836s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 95.10201215744019s cumulative, 0.02938699722290039s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 95.1364254951477s cumulative, 0.03441333770751953s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 95.2455780506134s cumulative, 0.10915255546569824s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 95.30686616897583s cumulative, 0.06128811836242676s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 95.31329035758972s cumulative, 0.0064241886138916016s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 95.33098316192627s cumulative, 0.01769280433654785s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 95.34076166152954s cumulative, 0.009778499603271484s individual

.
current test PASSED/SKIPPED -- test_lifo in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 95.59495282173157s cumulative, 0.25419116020202637s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 95.73435139656067s cumulative, 0.13939857482910156s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 95.91567802429199s cumulative, 0.18132662773132324s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 96.22071886062622s cumulative, 0.3050408363342285s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 96.50571084022522s cumulative, 0.284991979598999s individual

.
current test PASSED/SKIPPED -- test_invalid_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 96.80316138267517s cumulative, 0.29745054244995117s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 97.0809063911438s cumulative, 0.27774500846862793s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 97.17289781570435s cumulative, 0.09199142456054688s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 97.1995792388916s cumulative, 0.02668142318725586s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 97.2140371799469s cumulative, 0.014457941055297852s individual

.
current test PASSED/SKIPPED -- test_invalid_args_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 97.22636723518372s cumulative, 0.012330055236816406s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 97.23716711997986s cumulative, 0.010799884796142578s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 97.24591326713562s cumulative, 0.008746147155761719s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 97.26016402244568s cumulative, 0.014250755310058594s individual

.
current test PASSED/SKIPPED -- test_filesystem_traversal_fuse in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 97.28109335899353s cumulative, 0.020929336547851562s individual

.
current test PASSED/SKIPPED -- test_invalid_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 97.29527282714844s cumulative, 0.014179468154907227s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 97.32307648658752s cumulative, 0.027803659439086914s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 97.34546303749084s cumulative, 0.022386550903320312s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 97.35301494598389s cumulative, 0.007551908493041992s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 97.37477469444275s cumulative, 0.021759748458862305s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 97.39635276794434s cumulative, 0.021578073501586914s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 97.41327667236328s cumulative, 0.016923904418945312s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 97.43251919746399s cumulative, 0.019242525100708008s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 97.44540500640869s cumulative, 0.012885808944702148s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 97.48902869224548s cumulative, 0.04362368583679199s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 97.50912427902222s cumulative, 0.0200955867767334s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 97.54717373847961s cumulative, 0.03804945945739746s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 97.59167313575745s cumulative, 0.04449939727783203s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 97.64293837547302s cumulative, 0.05126523971557617s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 97.71312427520752s cumulative, 0.07018589973449707s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 97.77075004577637s cumulative, 0.057625770568847656s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 97.83381366729736s cumulative, 0.0630636215209961s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 97.90652871131897s cumulative, 0.07271504402160645s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 97.94917583465576s cumulative, 0.04264712333679199s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 97.99509811401367s cumulative, 0.045922279357910156s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 98.06428027153015s cumulative, 0.06918215751647949s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 98.09955644607544s cumulative, 0.035276174545288086s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 98.16043496131897s cumulative, 0.06087851524353027s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 98.18989109992981s cumulative, 0.029456138610839844s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 98.23129463195801s cumulative, 0.04140353202819824s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 98.26407885551453s cumulative, 0.032784223556518555s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 98.32619261741638s cumulative, 0.06211376190185547s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 98.37490749359131s cumulative, 0.04871487617492676s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 98.41541886329651s cumulative, 0.040511369705200195s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 98.442063331604s cumulative, 0.026644468307495117s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 98.46738767623901s cumulative, 0.025324344635009766s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 98.51358890533447s cumulative, 0.046201229095458984s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 98.5434238910675s cumulative, 0.029834985733032227s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 98.59569239616394s cumulative, 0.05226850509643555s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 98.61575555801392s cumulative, 0.020063161849975586s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 98.64724326133728s cumulative, 0.03148770332336426s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 98.67675352096558s cumulative, 0.0295102596282959s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 98.70136761665344s cumulative, 0.02461409568786621s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 98.76201629638672s cumulative, 0.06064867973327637s individual

.
current test PASSED/SKIPPED -- test_file_closed in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 98.8535430431366s cumulative, 0.09152674674987793s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 98.91102600097656s cumulative, 0.05748295783996582s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 98.94470882415771s cumulative, 0.033682823181152344s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 98.99703454971313s cumulative, 0.05232572555541992s individual

.
current test PASSED/SKIPPED -- test_invalid_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 99.03853225708008s cumulative, 0.04149770736694336s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 99.15253186225891s cumulative, 0.11399960517883301s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 99.2071852684021s cumulative, 0.05465340614318848s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 99.24505138397217s cumulative, 0.03786611557006836s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 99.29934740066528s cumulative, 0.054296016693115234s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 99.33516216278076s cumulative, 0.035814762115478516s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 99.40186166763306s cumulative, 0.06669950485229492s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 99.44307661056519s cumulative, 0.041214942932128906s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 99.48282527923584s cumulative, 0.0397486686706543s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 99.52174043655396s cumulative, 0.038915157318115234s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 99.62322282791138s cumulative, 0.10148239135742188s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 99.69268584251404s cumulative, 0.06946301460266113s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 99.7395224571228s cumulative, 0.04683661460876465s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 99.81106400489807s cumulative, 0.07154154777526855s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 99.85100030899048s cumulative, 0.03993630409240723s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 99.91058540344238s cumulative, 0.0595850944519043s individual

.
current test PASSED/SKIPPED -- test_lifo_negative in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 99.96196460723877s cumulative, 0.05137920379638672s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 100.03901886940002s cumulative, 0.07705426216125488s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 100.10671281814575s cumulative, 0.06769394874572754s individual

.
current test PASSED/SKIPPED -- test_lifo_negative in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 100.18525576591492s cumulative, 0.07854294776916504s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 100.26523303985596s cumulative, 0.07997727394104004s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 100.31805515289307s cumulative, 0.052822113037109375s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 100.374520778656s cumulative, 0.05646562576293945s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 100.4281678199768s cumulative, 0.05364704132080078s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 100.46370697021484s cumulative, 0.03553915023803711s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 100.52127170562744s cumulative, 0.057564735412597656s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 100.57253050804138s cumulative, 0.05125880241394043s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 100.64326000213623s cumulative, 0.07072949409484863s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 100.68189358711243s cumulative, 0.03863358497619629s individual

.
current test PASSED/SKIPPED -- test_invalid_args_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 100.71177434921265s cumulative, 0.029880762100219727s individual

.
current test PASSED/SKIPPED -- test_invalid_args_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 100.73869061470032s cumulative, 0.0269162654876709s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 100.78028464317322s cumulative, 0.04159402847290039s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 100.81579327583313s cumulative, 0.03550863265991211s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 100.8686695098877s cumulative, 0.05287623405456543s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 100.88883304595947s cumulative, 0.020163536071777344s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 100.92186784744263s cumulative, 0.0330348014831543s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 100.96036744117737s cumulative, 0.03849959373474121s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 100.98618507385254s cumulative, 0.0258176326751709s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 101.02735376358032s cumulative, 0.0411686897277832s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 101.0967607498169s cumulative, 0.06940698623657227s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 101.15875172615051s cumulative, 0.061990976333618164s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 101.18316888809204s cumulative, 0.02441716194152832s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 101.19784688949585s cumulative, 0.014678001403808594s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 101.21919178962708s cumulative, 0.021344900131225586s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 101.25629878044128s cumulative, 0.037106990814208984s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 101.52986741065979s cumulative, 0.27356863021850586s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 101.8164792060852s cumulative, 0.28661179542541504s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 102.03063154220581s cumulative, 0.21415233612060547s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 102.50020241737366s cumulative, 0.4695708751678467s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 102.76283693313599s cumulative, 0.2626345157623291s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 103.11538410186768s cumulative, 0.35254716873168945s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 103.12759113311768s cumulative, 0.01220703125s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 103.14295363426208s cumulative, 0.01536250114440918s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 103.20906615257263s cumulative, 0.06611251831054688s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 103.22890591621399s cumulative, 0.019839763641357422s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 103.27605247497559s cumulative, 0.04714655876159668s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 103.29430818557739s cumulative, 0.01825571060180664s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 103.3216290473938s cumulative, 0.02732086181640625s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 103.33318901062012s cumulative, 0.01155996322631836s individual

.
current test PASSED/SKIPPED -- test_file_closed in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 103.34872651100159s cumulative, 0.015537500381469727s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 103.35601282119751s cumulative, 0.0072863101959228516s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 103.37499022483826s cumulative, 0.01897740364074707s individual

.
current test PASSED/SKIPPED -- test_filesystem_traversal_fuse in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 103.38985443115234s cumulative, 0.014864206314086914s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 103.39829158782959s cumulative, 0.008437156677246094s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 103.41156911849976s cumulative, 0.013277530670166016s individual

.
current test PASSED/SKIPPED -- test_invalid_args_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 103.42264795303345s cumulative, 0.011078834533691406s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 103.43464994430542s cumulative, 0.012001991271972656s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 103.46473956108093s cumulative, 0.030089616775512695s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 103.48638129234314s cumulative, 0.02164173126220703s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 103.49936747550964s cumulative, 0.012986183166503906s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 103.53285670280457s cumulative, 0.033489227294921875s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 103.54643487930298s cumulative, 0.013578176498413086s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 103.56243515014648s cumulative, 0.01600027084350586s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 103.5897753238678s cumulative, 0.027340173721313477s individual

.
current test PASSED/SKIPPED -- test_invalid_args_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 103.5988450050354s cumulative, 0.009069681167602539s individual

.
current test PASSED/SKIPPED -- test_invalid_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 103.64254355430603s cumulative, 0.04369854927062988s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 103.67533898353577s cumulative, 0.03279542922973633s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 103.71997022628784s cumulative, 0.044631242752075195s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 103.76079797744751s cumulative, 0.04082775115966797s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 103.84196043014526s cumulative, 0.0811624526977539s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 103.9034948348999s cumulative, 0.06153440475463867s individual

.
current test PASSED/SKIPPED -- test_invalid_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 103.95010042190552s cumulative, 0.046605587005615234s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 103.98191833496094s cumulative, 0.03181791305541992s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 104.03493022918701s cumulative, 0.05301189422607422s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 104.06433963775635s cumulative, 0.029409408569335938s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 104.10835599899292s cumulative, 0.044016361236572266s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 104.13526058197021s cumulative, 0.026904582977294922s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 104.20508337020874s cumulative, 0.06982278823852539s individual

.
current test PASSED/SKIPPED -- test_invalid_args_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 104.24530005455017s cumulative, 0.040216684341430664s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 104.31381678581238s cumulative, 0.06851673126220703s individual


tests/test_response_media.py .
current test PASSED/SKIPPED -- test_media_rendered_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 104.36851906776428s cumulative, 0.0547022819519043s individual

.
current test PASSED/SKIPPED -- test_text in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 104.4343786239624s cumulative, 0.06585955619812012s individual

.
current test PASSED/SKIPPED -- test_unknown_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 104.48965787887573s cumulative, 0.05527925491333008s individual

.
current test PASSED/SKIPPED -- test_data in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 104.53800368309021s cumulative, 0.04834580421447754s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 104.59764790534973s cumulative, 0.059644222259521484s individual

.
current test PASSED/SKIPPED -- test_non_ascii_json_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 104.65301752090454s cumulative, 0.05536961555480957s individual

.
current test PASSED/SKIPPED -- test_use_cached_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 104.70032906532288s cumulative, 0.04731154441833496s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 104.74673628807068s cumulative, 0.046407222747802734s individual

.
current test PASSED/SKIPPED -- test_non_ascii_json_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 104.79081273078918s cumulative, 0.04407644271850586s individual

.
current test PASSED/SKIPPED -- test_mimeparse_edgecases in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 104.84215354919434s cumulative, 0.05134081840515137s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 104.8794322013855s cumulative, 0.03727865219116211s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 104.91057705879211s cumulative, 0.03114485740661621s individual

.
current test PASSED/SKIPPED -- test_non_ascii_json_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 104.94422793388367s cumulative, 0.033650875091552734s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 104.98135352134705s cumulative, 0.037125587463378906s individual

.
current test PASSED/SKIPPED -- test_non_ascii_json_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 105.04323887825012s cumulative, 0.06188535690307617s individual

.
current test PASSED/SKIPPED -- test_non_ascii_json_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 105.09046745300293s cumulative, 0.04722857475280762s individual

.
current test PASSED/SKIPPED -- test_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 105.13323998451233s cumulative, 0.042772531509399414s individual

.
current test PASSED/SKIPPED -- test_default_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 105.18271994590759s cumulative, 0.04947996139526367s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 105.23084878921509s cumulative, 0.04812884330749512s individual


tests/test_request_body.py .
current test PASSED/SKIPPED -- test_tiny_body_overflow in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_body.py: 105.279714345932s cumulative, 0.048865556716918945s individual

.
current test PASSED/SKIPPED -- test_read_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_body.py: 105.34152173995972s cumulative, 0.06180739402770996s individual

.
current test PASSED/SKIPPED -- test_request_repr in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_body.py: 105.36421370506287s cumulative, 0.022691965103149414s individual

.
current test PASSED/SKIPPED -- test_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_body.py: 105.41067123413086s cumulative, 0.046457529067993164s individual

.
current test PASSED/SKIPPED -- test_body_stream_wrapper in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_body.py: 105.44061875343323s cumulative, 0.029947519302368164s individual

.
current test PASSED/SKIPPED -- test_tiny_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_body.py: 105.48827528953552s cumulative, 0.04765653610229492s individual

.
current test PASSED/SKIPPED -- test_bounded_stream_property_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_body.py: 105.509028673172s cumulative, 0.02075338363647461s individual


tests/asgi/test_cythonized_asgi.py .
current test PASSED/SKIPPED -- test_not_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 105.532071352005s cumulative, 0.023042678833007812s individual

.
current test PASSED/SKIPPED -- test_is_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 105.55293774604797s cumulative, 0.02086639404296875s individual

.
current test PASSED/SKIPPED -- test_scheduled_jobs_type_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 105.62438011169434s cumulative, 0.0714423656463623s individual

.
current test PASSED/SKIPPED -- test_not_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 105.64328598976135s cumulative, 0.0189058780670166s individual

.
current test PASSED/SKIPPED -- test_is_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 105.66318869590759s cumulative, 0.019902706146240234s individual

.
current test PASSED/SKIPPED -- test_not_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 105.68140912055969s cumulative, 0.01822042465209961s individual

.
current test PASSED/SKIPPED -- test_is_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 105.70302414894104s cumulative, 0.021615028381347656s individual

F
current test FAILED -- test_jsonchema_validator in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 106.27923083305359s cumulative, 0.5762066841125488s individual

.
current test PASSED/SKIPPED -- test_is_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 106.30291247367859s cumulative, 0.023681640625s individual

.
current test PASSED/SKIPPED -- test_not_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 106.3281729221344s cumulative, 0.025260448455810547s individual

.
current test PASSED/SKIPPED -- test_not_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 106.35010290145874s cumulative, 0.02192997932434082s individual

F
current test FAILED -- test_hooks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 106.87094020843506s cumulative, 0.5208373069763184s individual

.
current test PASSED/SKIPPED -- test_not_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 106.89213442802429s cumulative, 0.0211942195892334s individual

.
current test PASSED/SKIPPED -- test_is_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 106.90954422950745s cumulative, 0.017409801483154297s individual

.
current test PASSED/SKIPPED -- test_scheduled_jobs in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 107.48478627204895s cumulative, 0.5752420425415039s individual

.
current test PASSED/SKIPPED -- test_is_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 107.49059796333313s cumulative, 0.0058116912841796875s individual


tests/test_slots.py .
current test PASSED/SKIPPED -- test_slots_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_slots.py: 107.49824786186218s cumulative, 0.007649898529052734s individual

.
current test PASSED/SKIPPED -- test_slots_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_slots.py: 107.50230884552002s cumulative, 0.004060983657836914s individual

.
current test PASSED/SKIPPED -- test_slots_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_slots.py: 107.50615310668945s cumulative, 0.0038442611694335938s individual

.
current test PASSED/SKIPPED -- test_slots_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_slots.py: 107.50976991653442s cumulative, 0.003616809844970703s individual


tests/test_response_context.py .
current test PASSED/SKIPPED -- test_default_response_context in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_context.py: 107.79792475700378s cumulative, 0.28815484046936035s individual

.
current test PASSED/SKIPPED -- test_default_response_context in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_context.py: 108.04514765739441s cumulative, 0.247222900390625s individual

.
current test PASSED/SKIPPED -- test_custom_response_context_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_context.py: 108.36217927932739s cumulative, 0.3170316219329834s individual

.
current test PASSED/SKIPPED -- test_custom_response_context_factory in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_context.py: 108.6491596698761s cumulative, 0.28698039054870605s individual

.
current test PASSED/SKIPPED -- test_custom_response_context_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_context.py: 108.96696639060974s cumulative, 0.3178067207336426s individual

.
current test PASSED/SKIPPED -- test_custom_response_context in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_context.py: 109.07683515548706s cumulative, 0.10986876487731934s individual

.
current test PASSED/SKIPPED -- test_custom_response_context in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_context.py: 109.10991907119751s cumulative, 0.03308391571044922s individual

.
current test PASSED/SKIPPED -- test_custom_response_context_factory in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_context.py: 109.12107157707214s cumulative, 0.011152505874633789s individual


tests/test_httperror.py .
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 109.13115525245667s cumulative, 0.010083675384521484s individual

.
current test PASSED/SKIPPED -- test_no_description_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 109.15284132957458s cumulative, 0.021686077117919922s individual

.
current test PASSED/SKIPPED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 109.17281913757324s cumulative, 0.019977807998657227s individual

E
current test FAILED -- test_405_with_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 109.5308587551117s cumulative, 0.35803961753845215s individual

E
current test FAILED -- test_410_with_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 110.40919756889343s cumulative, 0.8783388137817383s individual

.
current test PASSED/SKIPPED -- test_custom_error_serializer_optional_representation in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 110.48556065559387s cumulative, 0.07636308670043945s individual

E
current test FAILED -- test_unicode_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 111.31974983215332s cumulative, 0.8341891765594482s individual

.
current test PASSED/SKIPPED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 111.38684701919556s cumulative, 0.06709718704223633s individual

.
current test PASSED/SKIPPED -- test_429 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 111.44197940826416s cumulative, 0.055132389068603516s individual

.
current test PASSED/SKIPPED -- test_401 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 111.50289368629456s cumulative, 0.06091427803039551s individual

.
current test PASSED/SKIPPED -- test_405_without_body_with_extra_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 111.55991387367249s cumulative, 0.05702018737792969s individual

.
current test PASSED/SKIPPED -- test_no_description_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 111.6098382472992s cumulative, 0.049924373626708984s individual

E
current test FAILED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 112.36889719963074s cumulative, 0.759058952331543s individual

E
current test FAILED -- test_414_with_custom_kwargs in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 120.91993641853333s cumulative, 8.551039218902588s individual

.
current test PASSED/SKIPPED -- test_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 120.99559259414673s cumulative, 0.07565617561340332s individual

E
current test FAILED -- test_custom_error_serializer in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 122.05398964881897s cumulative, 1.0583970546722412s individual

E
current test FAILED -- test_413 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 122.98241806030273s cumulative, 0.9284284114837646s individual

E
current test FAILED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 125.82084083557129s cumulative, 2.8384227752685547s individual

E
current test FAILED -- test_no_description_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 126.38122177124023s cumulative, 0.5603809356689453s individual

.
current test PASSED/SKIPPED -- test_429_no_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 126.40880060195923s cumulative, 0.02757883071899414s individual

.
current test PASSED/SKIPPED -- test_503_integer_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 126.43114137649536s cumulative, 0.022340774536132812s individual

E
current test FAILED -- test_custom_error_serializer_optional_representation in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 127.16489267349243s cumulative, 0.7337512969970703s individual

.
current test PASSED/SKIPPED -- test_epic_fail_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 127.2321925163269s cumulative, 0.06729984283447266s individual

E
current test FAILED -- test_no_description_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 128.08940148353577s cumulative, 0.8572089672088623s individual

.
current test PASSED/SKIPPED -- test_to_json_dumps in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 128.12735724449158s cumulative, 0.03795576095581055s individual

.
current test PASSED/SKIPPED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 128.2163577079773s cumulative, 0.08900046348571777s individual

E
current test FAILED -- test_404_with_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 129.04837274551392s cumulative, 0.8320150375366211s individual

.
current test PASSED/SKIPPED -- test_forbidden in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 129.1124141216278s cumulative, 0.0640413761138916s individual

.
current test PASSED/SKIPPED -- test_405_without_body_with_extra_headers_double_check in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 129.17530703544617s cumulative, 0.06289291381835938s individual

.
current test PASSED/SKIPPED -- test_405_with_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 129.24241399765015s cumulative, 0.06710696220397949s individual

E
current test FAILED -- test_404_without_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 137.42005395889282s cumulative, 8.177639961242676s individual

.
current test PASSED/SKIPPED -- test_429_datetime in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 137.51120162010193s cumulative, 0.09114766120910645s individual

.
current test PASSED/SKIPPED -- test_custom_error_serializer in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 137.61253261566162s cumulative, 0.10133099555969238s individual

.
current test PASSED/SKIPPED -- test_epic_fail_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 137.672354221344s cumulative, 0.05982160568237305s individual

E
current test FAILED -- test_503_datetime_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 138.47053337097168s cumulative, 0.7981791496276855s individual

E
current test FAILED -- test_411 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 139.31529593467712s cumulative, 0.8447625637054443s individual

E
current test FAILED -- test_429_datetime in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 139.92236161231995s cumulative, 0.6070656776428223s individual

E
current test FAILED -- test_serialize_no_json_media_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 141.6268608570099s cumulative, 1.7044992446899414s individual

E
current test FAILED -- test_client_does_not_accept_json_or_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 142.97429251670837s cumulative, 1.3474316596984863s individual

.
current test PASSED/SKIPPED -- test_404_without_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 143.00162482261658s cumulative, 0.027332305908203125s individual

E
current test FAILED -- test_epic_fail_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 143.50278663635254s cumulative, 0.5011618137359619s individual

.
current test PASSED/SKIPPED -- test_411 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 143.57384181022644s cumulative, 0.07105517387390137s individual

.
current test PASSED/SKIPPED -- test_temporary_413_datetime_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 143.64138865470886s cumulative, 0.06754684448242188s individual

E
current test FAILED -- test_temporary_413_integer_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 144.42088437080383s cumulative, 0.7794957160949707s individual

.
current test PASSED/SKIPPED -- test_MediaMalformedError in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 144.44106817245483s cumulative, 0.020183801651000977s individual

.
current test PASSED/SKIPPED -- test_serialize_no_json_media_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 144.5008852481842s cumulative, 0.05981707572937012s individual

.
current test PASSED/SKIPPED -- test_forbidden in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 144.56144309043884s cumulative, 0.06055784225463867s individual

.
current test PASSED/SKIPPED -- test_custom_error_serializer_optional_representation in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 144.62841081619263s cumulative, 0.06696772575378418s individual

.
current test PASSED/SKIPPED -- test_serialize_error_uses_media_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 144.69158267974854s cumulative, 0.0631718635559082s individual

.
current test PASSED/SKIPPED -- test_forbidden in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 144.7543535232544s cumulative, 0.06277084350585938s individual

.
current test PASSED/SKIPPED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 144.8151671886444s cumulative, 0.06081366539001465s individual

E
current test FAILED -- test_405_without_body_with_extra_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 152.9347321987152s cumulative, 8.1195650100708s individual

E
current test FAILED -- test_414 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 153.81545662879944s cumulative, 0.8807244300842285s individual

E
current test FAILED -- test_epic_fail_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 154.71348190307617s cumulative, 0.8980252742767334s individual

.
current test PASSED/SKIPPED -- test_epic_fail_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 154.78320717811584s cumulative, 0.06972527503967285s individual

.
current test PASSED/SKIPPED -- test_414_with_custom_kwargs in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 154.84187364578247s cumulative, 0.05866646766662598s individual

.
current test PASSED/SKIPPED -- test_unicode_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 154.9049859046936s cumulative, 0.06311225891113281s individual

E
current test FAILED -- test_misc in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 155.89090514183044s cumulative, 0.9859192371368408s individual

E
current test FAILED -- test_temporary_413_datetime_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 156.67116570472717s cumulative, 0.7802605628967285s individual

E
current test FAILED -- test_410_without_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 157.44262075424194s cumulative, 0.7714550495147705s individual

.
current test PASSED/SKIPPED -- test_client_does_not_accept_anything in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 157.49993801116943s cumulative, 0.057317256927490234s individual

E
current test FAILED -- test_client_does_not_accept_anything in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 159.2101812362671s cumulative, 1.7102432250976562s individual

.
current test PASSED/SKIPPED -- test_client_does_not_accept_json_or_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 159.53217768669128s cumulative, 0.32199645042419434s individual

E
current test FAILED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 161.0367147922516s cumulative, 1.5045371055603027s individual

.
current test PASSED/SKIPPED -- test_missing_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 161.07953810691833s cumulative, 0.04282331466674805s individual

.
current test PASSED/SKIPPED -- test_custom_error_serializer_optional_representation in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 161.1414361000061s cumulative, 0.061897993087768555s individual

.
current test PASSED/SKIPPED -- test_invalid_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 161.25538086891174s cumulative, 0.11394476890563965s individual

E
current test FAILED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 170.9978232383728s cumulative, 9.74244236946106s individual

.
current test PASSED/SKIPPED -- test_416 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 171.43255019187927s cumulative, 0.4347269535064697s individual

.
current test PASSED/SKIPPED -- test_410_without_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 171.5182204246521s cumulative, 0.08567023277282715s individual

.
current test PASSED/SKIPPED -- test_414_with_description in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 171.56205987930298s cumulative, 0.043839454650878906s individual

E
current test FAILED -- test_unicode_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 171.98017024993896s cumulative, 0.41811037063598633s individual

.
current test PASSED/SKIPPED -- test_misc in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 172.04180026054382s cumulative, 0.0616300106048584s individual

E
current test FAILED -- test_414_with_description in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 172.7896683216095s cumulative, 0.7478680610656738s individual

E
current test FAILED -- test_custom_error_serializer_optional_representation in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 173.59065556526184s cumulative, 0.8009872436523438s individual

E
current test FAILED -- test_429 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 174.3942928314209s cumulative, 0.8036372661590576s individual

.
current test PASSED/SKIPPED -- test_unicode_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 174.4500880241394s cumulative, 0.05579519271850586s individual

.
current test PASSED/SKIPPED -- test_epic_fail_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 174.5037865638733s cumulative, 0.05369853973388672s individual

.
current test PASSED/SKIPPED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 174.55338716506958s cumulative, 0.04960060119628906s individual

E
current test FAILED -- test_forbidden in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 175.39718413352966s cumulative, 0.843796968460083s individual

.
current test PASSED/SKIPPED -- test_503_datetime_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 175.47815346717834s cumulative, 0.08096933364868164s individual

E
current test FAILED -- test_429_no_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 176.44198179244995s cumulative, 0.9638283252716064s individual

.
current test PASSED/SKIPPED -- test_invalid_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 176.51550221443176s cumulative, 0.07352042198181152s individual

E
current test FAILED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 177.46597051620483s cumulative, 0.9504683017730713s individual

E
current test FAILED -- test_custom_error_serializer_optional_representation in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 186.76712727546692s cumulative, 9.301156759262085s individual

.
current test PASSED/SKIPPED -- test_base_class in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 186.83148956298828s cumulative, 0.0643622875213623s individual

E
current test FAILED -- test_custom_serializer_no_representation in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 187.63265752792358s cumulative, 0.8011679649353027s individual

E
current test FAILED -- test_405_without_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 189.011234998703s cumulative, 1.378577470779419s individual

.
current test PASSED/SKIPPED -- test_custom_error_serializer_optional_representation in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 189.29655075073242s cumulative, 0.28531575202941895s individual

E
current test FAILED -- test_custom_error_serializer_optional_representation in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 191.25189018249512s cumulative, 1.9553394317626953s individual

.
current test PASSED/SKIPPED -- test_414 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 191.4122257232666s cumulative, 0.16033554077148438s individual

E
current test FAILED -- test_forbidden in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 193.38242864608765s cumulative, 1.970202922821045s individual

E
current test FAILED -- test_forbidden in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 195.5881106853485s cumulative, 2.2056820392608643s individual

E
current test FAILED -- test_405_without_body_with_extra_headers_double_check in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 197.20064043998718s cumulative, 1.6125297546386719s individual

.
current test PASSED/SKIPPED -- test_414_with_title in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 197.22754740715027s cumulative, 0.026906967163085938s individual

E
current test FAILED -- test_invalid_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 197.48972177505493s cumulative, 0.2621743679046631s individual

.
current test PASSED/SKIPPED -- test_410_with_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 197.5494508743286s cumulative, 0.05972909927368164s individual

E
current test FAILED -- test_missing_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 206.3613884449005s cumulative, 8.8119375705719s individual

E
current test FAILED -- test_serialize_error_uses_media_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 206.62443733215332s cumulative, 0.2630488872528076s individual

.
current test PASSED/SKIPPED -- test_405_without_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 206.65006113052368s cumulative, 0.025623798370361328s individual

E
current test FAILED -- test_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 207.4906713962555s cumulative, 0.8406102657318115s individual

.
current test PASSED/SKIPPED -- test_epic_fail_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 207.5646996498108s cumulative, 0.07402825355529785s individual

E
current test FAILED -- test_414_with_title in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 208.48314213752747s cumulative, 0.9184424877166748s individual

E
current test FAILED -- test_416 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 209.4958474636078s cumulative, 1.0127053260803223s individual

.
current test PASSED/SKIPPED -- test_413 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 209.69189310073853s cumulative, 0.1960456371307373s individual

.
current test PASSED/SKIPPED -- test_temporary_413_integer_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 209.80430507659912s cumulative, 0.1124119758605957s individual

E
current test FAILED -- test_invalid_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 211.01683282852173s cumulative, 1.2125277519226074s individual

E
current test FAILED -- test_epic_fail_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 212.08203649520874s cumulative, 1.0652036666870117s individual

.
current test PASSED/SKIPPED -- test_custom_serializer_no_representation in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 212.13217568397522s cumulative, 0.05013918876647949s individual

E
current test FAILED -- test_401 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 220.10230541229248s cumulative, 7.970129728317261s individual

E
current test FAILED -- test_base_class in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 220.90859198570251s cumulative, 0.8062865734100342s individual

E
current test FAILED -- test_epic_fail_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 221.54022765159607s cumulative, 0.6316356658935547s individual

E
current test FAILED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 224.29244470596313s cumulative, 2.7522170543670654s individual

E
current test FAILED -- test_503_integer_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 224.6914930343628s cumulative, 0.3990483283996582s individual

.
current test PASSED/SKIPPED -- test_404_with_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 224.71809124946594s cumulative, 0.026598215103149414s individual

E
current test FAILED -- test_epic_fail_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 225.32357096672058s cumulative, 0.6054797172546387s individual

.
current test PASSED/SKIPPED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 225.37629580497742s cumulative, 0.05272483825683594s individual


tests/test_query_params.py .
current test PASSED/SKIPPED -- test_http_methods_body_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 225.4287977218628s cumulative, 0.05250191688537598s individual

F
current test FAILED -- test_http_methods_body_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 226.31592798233032s cumulative, 0.8871302604675293s individual

F
current test FAILED -- test_empty_body_no_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 227.1779887676239s cumulative, 0.8620607852935791s individual

F
current test FAILED -- test_explicitly_disable_auto_parse in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 234.85623979568481s cumulative, 7.678251028060913s individual

.
current test PASSED/SKIPPED -- test_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 234.9132730960846s cumulative, 0.05703330039978027s individual

.
current test PASSED/SKIPPED -- test_http_methods_body_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 234.9636721611023s cumulative, 0.050399065017700195s individual

F
current test FAILED -- test_http_methods_body_not_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 235.88556385040283s cumulative, 0.9218916893005371s individual

F
current test FAILED -- test_http_methods_body_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 236.8280291557312s cumulative, 0.9424653053283691s individual

.
current test PASSED/SKIPPED -- test_http_methods_body_not_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 236.8882656097412s cumulative, 0.060236454010009766s individual

.
current test PASSED/SKIPPED -- test_empty_body_no_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 236.94377207756042s cumulative, 0.05550646781921387s individual

F
current test FAILED -- test_asgi_raises_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 237.8218059539795s cumulative, 0.8780338764190674s individual

F
current test FAILED -- test_non_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 240.2171471118927s cumulative, 2.395341157913208s individual

.
current test PASSED/SKIPPED -- test_non_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 240.69288206100464s cumulative, 0.4757349491119385s individual

.
current test PASSED/SKIPPED -- test_http_methods_body_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 240.79357838630676s cumulative, 0.10069632530212402s individual

.
current test PASSED/SKIPPED -- test_http_methods_body_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 240.85802268981934s cumulative, 0.06444430351257324s individual

F
current test FAILED -- test_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 241.56197929382324s cumulative, 0.7039566040039062s individual

.
current test PASSED/SKIPPED -- test_explicitly_disable_auto_parse in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 241.58742904663086s cumulative, 0.025449752807617188s individual

.
current test PASSED/SKIPPED -- test_http_methods_body_not_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 241.62011551856995s cumulative, 0.032686471939086914s individual

F
current test FAILED -- test_http_methods_body_not_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 250.91774797439575s cumulative, 9.297632455825806s individual

.
current test PASSED/SKIPPED -- test_http_methods_body_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 250.9501302242279s cumulative, 0.03238224983215332s individual

F
current test FAILED -- test_http_methods_body_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 252.1220555305481s cumulative, 1.1719253063201904s individual

F
current test FAILED -- test_http_methods_body_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 253.3261468410492s cumulative, 1.2040913105010986s individual

F
current test FAILED -- test_http_methods_body_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 254.31597065925598s cumulative, 0.9898238182067871s individual

.
current test PASSED/SKIPPED -- test_dont_auto_parse_by_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 254.37866306304932s cumulative, 0.06269240379333496s individual

F
current test FAILED -- test_dont_auto_parse_by_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 255.49357056617737s cumulative, 1.1149075031280518s individual

.
current test PASSED/SKIPPED -- test_multiple_keys_as_int in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 255.55533599853516s cumulative, 0.061765432357788086s individual

F
current test FAILED -- test_boolean_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 256.6968960762024s cumulative, 1.1415600776672363s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 256.7654962539673s cumulative, 0.06860017776489258s individual

.
current test PASSED/SKIPPED -- test_boolean in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 256.8312110900879s cumulative, 0.06571483612060547s individual

.
current test PASSED/SKIPPED -- test_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 256.8946228027344s cumulative, 0.06341171264648438s individual

F
current test FAILED -- test_get_date_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 257.89527463912964s cumulative, 1.0006518363952637s individual

F
current test FAILED -- test_get_dict_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 268.0632927417755s cumulative, 10.168018102645874s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 268.71041989326477s cumulative, 0.6471271514892578s individual

F
current test FAILED -- test_int_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 271.72736740112305s cumulative, 3.0169475078582764s individual

.
current test PASSED/SKIPPED -- test_get_param_as_json_no_handler_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 271.7663927078247s cumulative, 0.039025306701660156s individual

F
current test FAILED -- test_get_date_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 272.0904357433319s cumulative, 0.32404303550720215s individual

F
current test FAILED -- test_get_date_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 272.8476355075836s cumulative, 0.757199764251709s individual

F
current test FAILED -- test_allowed_names in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 274.0370764732361s cumulative, 1.1894409656524658s individual

.
current test PASSED/SKIPPED -- test_has_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 274.0863313674927s cumulative, 0.0492548942565918s individual

F
current test FAILED -- test_percent_encoded in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 274.9370722770691s cumulative, 0.850740909576416s individual

F
current test FAILED -- test_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 284.01117992401123s cumulative, 9.074107646942139s individual

F
current test FAILED -- test_uuid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 284.81272530555725s cumulative, 0.8015453815460205s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 285.49617767333984s cumulative, 0.6834523677825928s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 285.5325973033905s cumulative, 0.03641963005065918s individual

.
current test PASSED/SKIPPED -- test_multiple_keys_as_bool in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 285.55938267707825s cumulative, 0.02678537368774414s individual

.
current test PASSED/SKIPPED -- test_get_date_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 285.5918056964874s cumulative, 0.03242301940917969s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 286.3177185058594s cumulative, 0.7259128093719482s individual

F
current test FAILED -- test_get_date_valid_with_format in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 286.9956820011139s cumulative, 0.6779634952545166s individual

F
current test FAILED -- test_percent_encoded in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 287.65981125831604s cumulative, 0.6641292572021484s individual

.
current test PASSED/SKIPPED -- test_get_datetime_valid_with_format in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 287.7088530063629s cumulative, 0.049041748046875s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 287.76153779029846s cumulative, 0.052684783935546875s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_complex_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 289.6066343784332s cumulative, 1.8450965881347656s individual

F
current test FAILED -- test_list_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 296.7124037742615s cumulative, 7.105769395828247s individual

.
current test PASSED/SKIPPED -- test_allowed_names in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 296.75364899635315s cumulative, 0.041245222091674805s individual

F
current test FAILED -- test_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 298.0789976119995s cumulative, 1.3253486156463623s individual

.
current test PASSED/SKIPPED -- test_bad_percentage in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 298.2723140716553s cumulative, 0.19331645965576172s individual

.
current test PASSED/SKIPPED -- test_get_dict_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 298.4568214416504s cumulative, 0.1845073699951172s individual

.
current test PASSED/SKIPPED -- test_percent_encoded in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 298.74262833595276s cumulative, 0.28580689430236816s individual

F
current test FAILED -- test_get_param_as_json_handler_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 299.6067683696747s cumulative, 0.8641400337219238s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 300.2109305858612s cumulative, 0.6041622161865234s individual

F
current test FAILED -- test_get_date_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 301.4355490207672s cumulative, 1.2246184349060059s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 301.50780391693115s cumulative, 0.07225489616394043s individual

.
current test PASSED/SKIPPED -- test_list_transformer in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 301.58106327056885s cumulative, 0.07325935363769531s individual

F
current test FAILED -- test_boolean_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 302.99217414855957s cumulative, 1.4111108779907227s individual

.
current test PASSED/SKIPPED -- test_get_dict_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 303.08144068717957s cumulative, 0.08926653861999512s individual

.
current test PASSED/SKIPPED -- test_uuid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 303.1829204559326s cumulative, 0.10147976875305176s individual

F
current test FAILED -- test_float_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 311.55104517936707s cumulative, 8.368124723434448s individual

F
current test FAILED -- test_multiple_form_keys in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 312.4647979736328s cumulative, 0.9137527942657471s individual

F
current test FAILED -- test_multiple_form_keys in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 313.33036708831787s cumulative, 0.8655691146850586s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 313.3635501861572s cumulative, 0.03318309783935547s individual

F
current test FAILED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 316.15742921829224s cumulative, 2.7938790321350098s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 316.1803638935089s cumulative, 0.022934675216674805s individual

F
current test FAILED -- test_get_date_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 316.6324017047882s cumulative, 0.4520378112792969s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 317.79369735717773s cumulative, 1.1612956523895264s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 325.94059443473816s cumulative, 8.146897077560425s individual

.
current test PASSED/SKIPPED -- test_float_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 326.0145206451416s cumulative, 0.07392621040344238s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 327.0477600097656s cumulative, 1.0332393646240234s individual

.
current test PASSED/SKIPPED -- test_get_param_as_json_handler_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 327.11506271362305s cumulative, 0.06730270385742188s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 327.1549389362335s cumulative, 0.03987622261047363s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_simple_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 327.1978385448456s cumulative, 0.04289960861206055s individual

.
current test PASSED/SKIPPED -- test_has_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 327.24404644966125s cumulative, 0.04620790481567383s individual

F
current test FAILED -- test_has_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 328.14618253707886s cumulative, 0.9021360874176025s individual

F
current test FAILED -- test_uuid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 329.0435757637024s cumulative, 0.8973932266235352s individual

F
current test FAILED -- test_get_date_valid_with_format in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 329.94285774230957s cumulative, 0.8992819786071777s individual

F
current test FAILED -- test_list_type_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 332.12022590637207s cumulative, 2.1773681640625s individual

F
current test FAILED -- test_list_type_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 333.13319158554077s cumulative, 1.0129656791687012s individual

F
current test FAILED -- test_get_datetime_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 341.71042680740356s cumulative, 8.577235221862793s individual

F
current test FAILED -- test_multiple_keys_as_int in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 342.16563653945923s cumulative, 0.45520973205566406s individual

F
current test FAILED -- test_get_datetime_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 342.67364978790283s cumulative, 0.5080132484436035s individual

.
current test PASSED/SKIPPED -- test_get_datetime_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 342.7660698890686s cumulative, 0.09242010116577148s individual

.
current test PASSED/SKIPPED -- test_allowed_names in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 342.8338327407837s cumulative, 0.06776285171508789s individual

F
current test FAILED -- test_list_transformer in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 344.08573722839355s cumulative, 1.2519044876098633s individual

F
current test FAILED -- test_get_dict_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 345.39964532852173s cumulative, 1.3139081001281738s individual

F
current test FAILED -- test_get_datetime_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 346.55014657974243s cumulative, 1.1505012512207031s individual

F
current test FAILED -- test_int in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 347.53314232826233s cumulative, 0.9829957485198975s individual

F
current test FAILED -- test_get_dict_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 356.63275837898254s cumulative, 9.099616050720215s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 356.68731808662415s cumulative, 0.05455970764160156s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 356.738347530365s cumulative, 0.05102944374084473s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_simple_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 356.78929686546326s cumulative, 0.0509493350982666s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_simple_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 356.84295177459717s cumulative, 0.05365490913391113s individual

.
current test PASSED/SKIPPED -- test_multiple_keys_as_float in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 356.8787899017334s cumulative, 0.03583812713623047s individual

.
current test PASSED/SKIPPED -- test_get_date_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 356.90174412727356s cumulative, 0.022954225540161133s individual

F
current test FAILED -- test_float in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 359.9238233566284s cumulative, 3.0220792293548584s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 360.1818664073944s cumulative, 0.2580430507659912s individual

.
current test PASSED/SKIPPED -- test_list_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 360.2024521827698s cumulative, 0.02058577537536621s individual

F
current test FAILED -- test_list_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 360.9205415248871s cumulative, 0.7180893421173096s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 360.9788661003113s cumulative, 0.058324575424194336s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_simple_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 361.9588432312012s cumulative, 0.9799771308898926s individual

F
current test FAILED -- test_simple in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 362.99515557289124s cumulative, 1.0363123416900635s individual

F
current test FAILED -- test_allowed_names in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 364.237446308136s cumulative, 1.242290735244751s individual

F
current test FAILED -- test_multiple_keys_as_float in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 373.31995034217834s cumulative, 9.082504034042358s individual

.
current test PASSED/SKIPPED -- test_int in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 373.3866322040558s cumulative, 0.0666818618774414s individual

F
current test FAILED -- test_get_datetime_valid_with_format in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 374.3400309085846s cumulative, 0.9533987045288086s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_simple_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 375.3725337982178s cumulative, 1.0325028896331787s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 378.0923192501068s cumulative, 2.719785451889038s individual

.
current test PASSED/SKIPPED -- test_multiple_keys_as_int in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 378.11386585235596s cumulative, 0.021546602249145508s individual

F
current test FAILED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 378.62033581733704s cumulative, 0.5064699649810791s individual

F
current test FAILED -- test_get_dict_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 379.6905725002289s cumulative, 1.0702366828918457s individual

.
current test PASSED/SKIPPED -- test_multiple_form_keys in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 379.7705907821655s cumulative, 0.08001828193664551s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 379.81867694854736s cumulative, 0.04808616638183594s individual

F
current test FAILED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 380.82287406921387s cumulative, 1.004197120666504s individual

F
current test FAILED -- test_default_auto_parse_csv_behaviour in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 389.9488470554352s cumulative, 9.125972986221313s individual

.
current test PASSED/SKIPPED -- test_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 390.0145688056946s cumulative, 0.06572175025939941s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 390.0860617160797s cumulative, 0.07149291038513184s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 390.15009021759033s cumulative, 0.06402850151062012s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 390.25323820114136s cumulative, 0.10314798355102539s individual

.
current test PASSED/SKIPPED -- test_multiple_keys_as_float in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 390.31181049346924s cumulative, 0.05857229232788086s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 391.5829436779022s cumulative, 1.2711331844329834s individual

.
current test PASSED/SKIPPED -- test_float in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 391.6623113155365s cumulative, 0.07936763763427734s individual

F
current test FAILED -- test_multiple_keys_as_bool in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 392.814888715744s cumulative, 1.1525774002075195s individual

.
current test PASSED/SKIPPED -- test_get_dict_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 392.87061762809753s cumulative, 0.055728912353515625s individual

.
current test PASSED/SKIPPED -- test_list_type_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 392.9197907447815s cumulative, 0.04917311668395996s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_simple_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 392.9626290798187s cumulative, 0.042838335037231445s individual

F
current test FAILED -- test_get_dict_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 394.2366862297058s cumulative, 1.274057149887085s individual

F
current test FAILED -- test_get_datetime_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 396.5747287273407s cumulative, 2.3380424976348877s individual

F
current test FAILED -- test_multiple_form_keys_as_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 397.32583808898926s cumulative, 0.7511093616485596s individual

F
current test FAILED -- test_bad_percentage in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 409.56705617904663s cumulative, 12.241218090057373s individual

.
current test PASSED/SKIPPED -- test_get_datetime_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 409.75602293014526s cumulative, 0.1889667510986328s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 412.64561343193054s cumulative, 2.8895905017852783s individual

.
current test PASSED/SKIPPED -- test_get_datetime_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 412.68470191955566s cumulative, 0.03908848762512207s individual

F
current test FAILED -- test_multiple_form_keys_as_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 413.1768743991852s cumulative, 0.4921724796295166s individual

F
current test FAILED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 414.037171125412s cumulative, 0.8602967262268066s individual

F
current test FAILED -- test_get_dict_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 415.2312819957733s cumulative, 1.1941108703613281s individual

F
current test FAILED -- test_default_auto_parse_csv_behaviour in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 416.302015542984s cumulative, 1.0707335472106934s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 417.4194278717041s cumulative, 1.1174123287200928s individual

.
current test PASSED/SKIPPED -- test_bad_percentage in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 417.4835376739502s cumulative, 0.06410980224609375s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 418.52611327171326s cumulative, 1.0425755977630615s individual

.
current test PASSED/SKIPPED -- test_get_dict_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 418.5864667892456s cumulative, 0.06035351753234863s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 427.8317816257477s cumulative, 9.245314836502075s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 428.52227210998535s cumulative, 0.6904904842376709s individual

F
current test FAILED -- test_boolean in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 429.50974011421204s cumulative, 0.9874680042266846s individual

.
current test PASSED/SKIPPED -- test_get_date_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 429.5753102302551s cumulative, 0.06557011604309082s individual

.
current test PASSED/SKIPPED -- test_default_auto_parse_csv_behaviour in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 429.64726424217224s cumulative, 0.07195401191711426s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_complex_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 430.97639560699463s cumulative, 1.3291313648223877s individual

.
current test PASSED/SKIPPED -- test_param_property in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 431.05242586135864s cumulative, 0.07603025436401367s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 431.13223910331726s cumulative, 0.07981324195861816s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 431.20392990112305s cumulative, 0.07169079780578613s individual

.
current test PASSED/SKIPPED -- test_multiple_keys_as_bool in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 431.2704267501831s cumulative, 0.0664968490600586s individual

.
current test PASSED/SKIPPED -- test_int_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 431.3556559085846s cumulative, 0.08522915840148926s individual

F
current test FAILED -- test_get_dict_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 432.097599029541s cumulative, 0.7419431209564209s individual

F
current test FAILED -- test_get_datetime_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 432.6918296813965s cumulative, 0.5942306518554688s individual

.
current test PASSED/SKIPPED -- test_multiple_form_keys in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 432.73917412757874s cumulative, 0.04734444618225098s individual

.
current test PASSED/SKIPPED -- test_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 432.7779321670532s cumulative, 0.038758039474487305s individual

F
current test FAILED -- test_bad_percentage in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 442.1046943664551s cumulative, 9.326762199401855s individual

.
current test PASSED/SKIPPED -- test_int in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 442.16612339019775s cumulative, 0.06142902374267578s individual

F
current test FAILED -- test_boolean in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 443.2037432193756s cumulative, 1.0376198291778564s individual

F
current test FAILED -- test_multiple_keys_as_bool in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 444.19410252571106s cumulative, 0.9903593063354492s individual

.
current test PASSED/SKIPPED -- test_get_date_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 444.2595925331116s cumulative, 0.0654900074005127s individual

.
current test PASSED/SKIPPED -- test_get_datetime_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 444.31013464927673s cumulative, 0.05054211616516113s individual

F
current test FAILED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 445.48721051216125s cumulative, 1.1770758628845215s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 445.70842146873474s cumulative, 0.22121095657348633s individual

.
current test PASSED/SKIPPED -- test_boolean_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 445.901752948761s cumulative, 0.19333148002624512s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 446.10951256752014s cumulative, 0.20775961875915527s individual

F
current test FAILED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 447.8454558849335s cumulative, 1.73594331741333s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 447.87376713752747s cumulative, 0.02831125259399414s individual

.
current test PASSED/SKIPPED -- test_get_dict_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 447.8953626155853s cumulative, 0.021595478057861328s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 447.9124507904053s cumulative, 0.01708817481994629s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 448.7091951370239s cumulative, 0.7967443466186523s individual

F
current test FAILED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 457.89534878730774s cumulative, 9.186153650283813s individual

.
current test PASSED/SKIPPED -- test_get_date_valid_with_format in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 457.9624733924866s cumulative, 0.06712460517883301s individual

.
current test PASSED/SKIPPED -- test_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 458.02997279167175s cumulative, 0.06749939918518066s individual

.
current test PASSED/SKIPPED -- test_get_date_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 458.09602069854736s cumulative, 0.06604790687561035s individual

.
current test PASSED/SKIPPED -- test_get_datetime_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 458.1726393699646s cumulative, 0.07661867141723633s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 458.2398133277893s cumulative, 0.06717395782470703s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 458.30906224250793s cumulative, 0.06924891471862793s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 458.37775588035583s cumulative, 0.06869363784790039s individual

F
current test FAILED -- test_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 459.45426845550537s cumulative, 1.0765125751495361s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_complex_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 459.51972794532776s cumulative, 0.0654594898223877s individual

.
current test PASSED/SKIPPED -- test_simple in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 459.58529138565063s cumulative, 0.06556344032287598s individual

.
current test PASSED/SKIPPED -- test_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 459.64759707450867s cumulative, 0.06230568885803223s individual

F
current test FAILED -- test_int in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 460.9592442512512s cumulative, 1.3116471767425537s individual

F
current test FAILED -- test_get_param_as_json_no_handler_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 462.1066782474518s cumulative, 1.1474339962005615s individual

.
current test PASSED/SKIPPED -- test_get_date_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 462.1769390106201s cumulative, 0.07026076316833496s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 465.6147711277008s cumulative, 3.4378321170806885s individual

F
current test FAILED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 468.0743443965912s cumulative, 2.459573268890381s individual

F
current test FAILED -- test_simple in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 471.94101119041443s cumulative, 3.866666793823242s individual

.
current test PASSED/SKIPPED -- test_uuid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 472.26688599586487s cumulative, 0.32587480545043945s individual

.
current test PASSED/SKIPPED -- test_get_datetime_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 472.4005410671234s cumulative, 0.13365507125854492s individual

F
current test FAILED -- test_get_datetime_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 479.03103017807007s cumulative, 6.630489110946655s individual

F
current test FAILED -- test_get_dict_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 481.9376196861267s cumulative, 2.9065895080566406s individual

F
current test FAILED -- test_get_date_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 482.298335313797s cumulative, 0.3607156276702881s individual

F
current test FAILED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 483.37651443481445s cumulative, 1.078179121017456s individual

.
current test PASSED/SKIPPED -- test_boolean in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 483.45437479019165s cumulative, 0.07786035537719727s individual

.
current test PASSED/SKIPPED -- test_percent_encoded in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 483.5177638530731s cumulative, 0.06338906288146973s individual

.
current test PASSED/SKIPPED -- test_get_date_valid_with_format in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 483.58232259750366s cumulative, 0.06455874443054199s individual

F
current test FAILED -- test_get_datetime_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 484.7184090614319s cumulative, 1.1360864639282227s individual

F
current test FAILED -- test_has_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 485.70020866394043s cumulative, 0.9817996025085449s individual

.
current test PASSED/SKIPPED -- test_get_date_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 485.76493072509766s cumulative, 0.06472206115722656s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 485.8225152492523s cumulative, 0.057584524154663086s individual

F
current test FAILED -- test_get_date_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 498.73673009872437s cumulative, 12.914214849472046s individual

.
current test PASSED/SKIPPED -- test_get_datetime_valid_with_format in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 498.8150460720062s cumulative, 0.07831597328186035s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 500.1432538032532s cumulative, 1.3282077312469482s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 500.2082943916321s cumulative, 0.06504058837890625s individual

F
current test FAILED -- test_multiple_keys_as_int in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 501.20602345466614s cumulative, 0.9977290630340576s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 501.26562905311584s cumulative, 0.05960559844970703s individual

.
current test PASSED/SKIPPED -- test_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 501.3255705833435s cumulative, 0.05994153022766113s individual

.
current test PASSED/SKIPPED -- test_default_auto_parse_csv_behaviour in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 501.3766453266144s cumulative, 0.05107474327087402s individual

F
current test FAILED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 502.4298267364502s cumulative, 1.0531814098358154s individual

.
current test PASSED/SKIPPED -- test_get_datetime_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 502.47596049308777s cumulative, 0.04613375663757324s individual

.
current test PASSED/SKIPPED -- test_multiple_form_keys_as_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 502.5284731388092s cumulative, 0.05251264572143555s individual

.
current test PASSED/SKIPPED -- test_list_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 502.56794023513794s cumulative, 0.03946709632873535s individual

F
current test FAILED -- test_multiple_keys_as_float in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 504.9019582271576s cumulative, 2.3340179920196533s individual

F
current test FAILED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 505.54931235313416s cumulative, 0.6473541259765625s individual

.
current test PASSED/SKIPPED -- test_get_dict_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 505.56485652923584s cumulative, 0.01554417610168457s individual

.
current test PASSED/SKIPPED -- test_param_property in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 505.5745334625244s cumulative, 0.009676933288574219s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 505.58489894866943s cumulative, 0.010365486145019531s individual

.
current test PASSED/SKIPPED -- test_float in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 505.594731092453s cumulative, 0.009832143783569336s individual

F
current test FAILED -- test_list_transformer in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 516.450070142746s cumulative, 10.855339050292969s individual

F
current test FAILED -- test_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 519.6090838909149s cumulative, 3.1590137481689453s individual

F
current test FAILED -- test_get_date_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 521.0595052242279s cumulative, 1.4504213333129883s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 521.2920918464661s cumulative, 0.23258662223815918s individual

F
current test FAILED -- test_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 522.0589084625244s cumulative, 0.7668166160583496s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 522.1159839630127s cumulative, 0.05707550048828125s individual

F
current test FAILED -- test_int_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 522.9826714992523s cumulative, 0.866687536239624s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_simple_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 523.8542020320892s cumulative, 0.8715305328369141s individual

F
current test FAILED -- test_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 524.7770688533783s cumulative, 0.9228668212890625s individual

F
current test FAILED -- test_float in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 533.0943901538849s cumulative, 8.317321300506592s individual

.
current test PASSED/SKIPPED -- test_get_datetime_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 533.1534254550934s cumulative, 0.059035301208496094s individual

.
current test PASSED/SKIPPED -- test_get_dict_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 533.2136118412018s cumulative, 0.06018638610839844s individual

.
current test PASSED/SKIPPED -- test_get_date_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 533.2676515579224s cumulative, 0.054039716720581055s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 533.3163411617279s cumulative, 0.04868960380554199s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_simple_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 535.5729553699493s cumulative, 2.2566142082214355s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 538.2127499580383s cumulative, 2.6397945880889893s individual

.
current test PASSED/SKIPPED -- test_int_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 538.3685894012451s cumulative, 0.1558394432067871s individual

.
current test PASSED/SKIPPED -- test_simple in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 538.513397693634s cumulative, 0.14480829238891602s individual

.
current test PASSED/SKIPPED -- test_float_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 538.6800291538239s cumulative, 0.16663146018981934s individual

.
current test PASSED/SKIPPED -- test_boolean_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 539.0964548587799s cumulative, 0.4164257049560547s individual

F
current test FAILED -- test_float_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 543.2971584796906s cumulative, 4.2007036209106445s individual

.
current test PASSED/SKIPPED -- test_get_dict_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 543.4353170394897s cumulative, 0.13815855979919434s individual

.
current test PASSED/SKIPPED -- test_multiple_form_keys_as_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 543.4955146312714s cumulative, 0.06019759178161621s individual

F
current test FAILED -- test_param_property in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 544.284346818924s cumulative, 0.7888321876525879s individual

F
current test FAILED -- test_get_datetime_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 545.1817417144775s cumulative, 0.8973948955535889s individual

F
current test FAILED -- test_param_property in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 554.8906443119049s cumulative, 9.708902597427368s individual

F
current test FAILED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 556.3343212604523s cumulative, 1.4436769485473633s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 556.5011644363403s cumulative, 0.16684317588806152s individual

.
current test PASSED/SKIPPED -- test_list_type_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 556.5615711212158s cumulative, 0.06040668487548828s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 556.6339778900146s cumulative, 0.07240676879882812s individual

.
current test PASSED/SKIPPED -- test_list_transformer in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 556.709570646286s cumulative, 0.0755927562713623s individual

F
current test FAILED -- test_get_datetime_valid_with_format in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 557.8576955795288s cumulative, 1.1481249332427979s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_complex_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 557.9199213981628s cumulative, 0.0622258186340332s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 558.0283720493317s cumulative, 0.10845065116882324s individual


tests/asgi/test_response_media_asgi.py .
current test PASSED/SKIPPED -- test_media in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 558.0976707935333s cumulative, 0.06929874420166016s individual

.
current test PASSED/SKIPPED -- test_non_ascii_json_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 558.159631729126s cumulative, 0.06196093559265137s individual

.
current test PASSED/SKIPPED -- test_non_ascii_json_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 558.2204389572144s cumulative, 0.060807228088378906s individual

.
current test PASSED/SKIPPED -- test_default_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 558.2972741127014s cumulative, 0.07683515548706055s individual

.
current test PASSED/SKIPPED -- test_mimeparse_edgecases in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 558.3659596443176s cumulative, 0.06868553161621094s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 558.427417755127s cumulative, 0.06145811080932617s individual

.
current test PASSED/SKIPPED -- test_custom_media_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 558.5079169273376s cumulative, 0.08049917221069336s individual

.
current test PASSED/SKIPPED -- test_non_ascii_json_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 558.5825757980347s cumulative, 0.07465887069702148s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 558.6464054584503s cumulative, 0.06382966041564941s individual

.
current test PASSED/SKIPPED -- test_mimeparse_edgecases in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 558.7123329639435s cumulative, 0.06592750549316406s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 558.7682230472565s cumulative, 0.05589008331298828s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 558.8301219940186s cumulative, 0.06189894676208496s individual

.
current test PASSED/SKIPPED -- test_data in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 558.8785884380341s cumulative, 0.04846644401550293s individual

.
current test PASSED/SKIPPED -- test_data_masquerading_as_text in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 558.9312925338745s cumulative, 0.0527040958404541s individual

.
current test PASSED/SKIPPED -- test_non_ascii_json_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 558.9860751628876s cumulative, 0.05478262901306152s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 559.0432665348053s cumulative, 0.05719137191772461s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 559.0904490947723s cumulative, 0.047182559967041016s individual

.
current test PASSED/SKIPPED -- test_unknown_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 559.1431632041931s cumulative, 0.05271410942077637s individual

.
current test PASSED/SKIPPED -- test_text in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 559.1868941783905s cumulative, 0.043730974197387695s individual

.
current test PASSED/SKIPPED -- test_non_ascii_json_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 559.2265138626099s cumulative, 0.03961968421936035s individual

.
current test PASSED/SKIPPED -- test_media_rendered_cached in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 559.2548406124115s cumulative, 0.028326749801635742s individual

.
current test PASSED/SKIPPED -- test_custom_render_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 559.2804410457611s cumulative, 0.025600433349609375s individual


tests/test_python_version_requirements.py .
current test PASSED/SKIPPED -- test_asgi in /home/kaiyaok2/PythonProjects/falcon/tests/test_python_version_requirements.py: 559.2962560653687s cumulative, 0.015815019607543945s individual


tests/asgi/test_testing_asgi.py .
current test PASSED/SKIPPED -- test_create_scope_default_ua in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_testing_asgi.py: 559.316445350647s cumulative, 0.020189285278320312s individual

.
current test PASSED/SKIPPED -- test_invalid_asgi_events in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_testing_asgi.py: 559.3608529567719s cumulative, 0.04440760612487793s individual

.
current test PASSED/SKIPPED -- test_immediate_disconnect in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_testing_asgi.py: 559.3865559101105s cumulative, 0.025702953338623047s individual

.
current test PASSED/SKIPPED -- test_cookies_jar in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_testing_asgi.py: 559.416995048523s cumulative, 0.030439138412475586s individual

.
current test PASSED/SKIPPED -- test_create_scope_default_ua_modify_global in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_testing_asgi.py: 559.4444634914398s cumulative, 0.027468442916870117s individual

.
current test PASSED/SKIPPED -- test_asgi_request_event_emitter_hang in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_testing_asgi.py: 560.5581345558167s cumulative, 1.113671064376831s individual

.
current test PASSED/SKIPPED -- test_ignore_extra_asgi_events in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_testing_asgi.py: 560.7729709148407s cumulative, 0.21483635902404785s individual

.
current test PASSED/SKIPPED -- test_missing_header_is_none in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_testing_asgi.py: 560.9304900169373s cumulative, 0.15751910209655762s individual

.
current test PASSED/SKIPPED -- test_is_asgi_app_cls in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_testing_asgi.py: 561.0106840133667s cumulative, 0.08019399642944336s individual

.
current test PASSED/SKIPPED -- test_create_scope_default_ua_override in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_testing_asgi.py: 561.1536026000977s cumulative, 0.14291858673095703s individual


tests/test_cmd_inspect_app.py .
current test PASSED/SKIPPED -- test_route_main in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 561.2613656520844s cumulative, 0.10776305198669434s individual

F
current test FAILED -- test_load_app_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 563.0547139644623s cumulative, 1.7933483123779297s individual

F
current test FAILED -- test_load_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 564.9567203521729s cumulative, 1.9020063877105713s individual

F
current test FAILED -- test_load_app_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 567.666032075882s cumulative, 2.7093117237091064s individual

.
current test PASSED/SKIPPED -- test_load_app_module_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 567.6884093284607s cumulative, 0.02237725257873535s individual

F
current test FAILED -- test_load_app_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 568.0063819885254s cumulative, 0.31797266006469727s individual

F
current test FAILED -- test_load_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 568.4016273021698s cumulative, 0.3952453136444092s individual

.
current test PASSED/SKIPPED -- test_make_parser in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 568.4196796417236s cumulative, 0.018052339553833008s individual

.
current test PASSED/SKIPPED -- test_make_parser in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 568.4309763908386s cumulative, 0.011296749114990234s individual

.
current test PASSED/SKIPPED -- test_make_parser in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 568.442214012146s cumulative, 0.011237621307373047s individual

.
current test PASSED/SKIPPED -- test_make_parser in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 568.4537556171417s cumulative, 0.011541604995727539s individual

.
current test PASSED/SKIPPED -- test_make_parser in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 568.4657185077667s cumulative, 0.011962890625s individual

.
current test PASSED/SKIPPED -- test_make_parser in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 568.4777481555939s cumulative, 0.012029647827148438s individual

.
current test PASSED/SKIPPED -- test_make_parser in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 568.4899489879608s cumulative, 0.01220083236694336s individual

.
current test PASSED/SKIPPED -- test_make_parser_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 568.5016679763794s cumulative, 0.011718988418579102s individual

.
current test PASSED/SKIPPED -- test_make_parser in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 568.5158705711365s cumulative, 0.014202594757080078s individual

F
current test FAILED -- test_routes_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 569.2392911911011s cumulative, 0.7234206199645996s individual

F
current test FAILED -- test_inspect in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 570.640282869339s cumulative, 1.400991678237915s individual

F
current test FAILED -- test_inspect in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 571.9163208007812s cumulative, 1.2760379314422607s individual

F
current test FAILED -- test_routes_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 573.2928035259247s cumulative, 1.3764827251434326s individual

F
current test FAILED -- test_inspect in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 574.4442937374115s cumulative, 1.1514902114868164s individual

F
current test FAILED -- test_inspect in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 575.4741539955139s cumulative, 1.029860258102417s individual

F
current test FAILED -- test_routes_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 577.9164781570435s cumulative, 2.442324161529541s individual

F
current test FAILED -- test_routes_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 579.0832543373108s cumulative, 1.166776180267334s individual


tests/test_wsgi_errors.py .
current test PASSED/SKIPPED -- test_responder_logged_bytestring in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_errors.py: 579.1162712574005s cumulative, 0.03301692008972168s individual


tests/test_wsgi_servers.py Starting uWSGI...
uwsgi --http 127.0.0.1:37325 --wsgi-file _wsgi_test_app.py
s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 579.1479887962341s cumulative, 0.031717538833618164s individual

Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 60629 --interface wsgi _wsgi_test_app:app
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 59327 --interface wsgi _wsgi_test_app:app
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 60125 --interface wsgi _wsgi_test_app:app
E
current test FAILED -- test_post_multipart_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 610.8665204048157s cumulative, 31.718531608581543s individual

Starting uWSGI...
uwsgi --http 127.0.0.1:52629 --wsgi-file _wsgi_test_app.py
s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 611.0932607650757s cumulative, 0.22674036026000977s individual

Starting uWSGI...
uwsgi --http 127.0.0.1:48279 --wsgi-file _wsgi_test_app.py
s
current test PASSED/SKIPPED -- test_post_multipart_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 611.3212523460388s cumulative, 0.22799158096313477s individual

s
current test PASSED/SKIPPED -- test_post_multipart_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 611.4937858581543s cumulative, 0.17253351211547852s individual

Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 51823 --interface wsgi _wsgi_test_app:app
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 59799 --interface wsgi _wsgi_test_app:app
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 57085 --interface wsgi _wsgi_test_app:app
E
current test FAILED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 642.2472941875458s cumulative, 30.75350832939148s individual

s
current test PASSED/SKIPPED -- test_static_file in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 642.3023722171783s cumulative, 0.05507802963256836s individual

s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 642.3155534267426s cumulative, 0.013181209564208984s individual

Starting uWSGI...
uwsgi --http 127.0.0.1:53267 --wsgi-file _wsgi_test_app.py
s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 642.3272416591644s cumulative, 0.011688232421875s individual

s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 642.3346474170685s cumulative, 0.007405757904052734s individual

s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 642.3441734313965s cumulative, 0.00952601432800293s individual

Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 51223 --interface wsgi _wsgi_test_app:app
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 39357 --interface wsgi _wsgi_test_app:app
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 56613 --interface wsgi _wsgi_test_app:app
E
current test FAILED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 673.4327957630157s cumulative, 31.088622331619263s individual

Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:47017 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:59023 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
E
current test FAILED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 694.1029968261719s cumulative, 20.670201063156128s individual

Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 34835 --interface wsgi _wsgi_test_app:app
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 54245 --interface wsgi _wsgi_test_app:app
E
current test FAILED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 714.4873406887054s cumulative, 20.38434386253357s individual

Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:49539 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:36209 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:49017 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
E
current test FAILED -- test_static_file in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 745.4726448059082s cumulative, 30.98530411720276s individual

s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 745.5520620346069s cumulative, 0.07941722869873047s individual

Starting uWSGI...
uwsgi --http 127.0.0.1:56869 --wsgi-file _wsgi_test_app.py
s
current test PASSED/SKIPPED -- test_static_file in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 745.661967754364s cumulative, 0.10990571975708008s individual

Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:45823 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:41037 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
E
current test FAILED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 766.0746474266052s cumulative, 20.41267967224121s individual

Starting uWSGI...
uwsgi --http 127.0.0.1:59177 --wsgi-file _wsgi_test_app.py
s
current test PASSED/SKIPPED -- test_get_deprecated in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 766.0970034599304s cumulative, 0.022356033325195312s individual

Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:60711 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:39281 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
E
current test FAILED -- test_get_deprecated in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 786.8343162536621s cumulative, 20.73731279373169s individual

s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 787.0635433197021s cumulative, 0.22922706604003906s individual

s
current test PASSED/SKIPPED -- test_get_deprecated in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 787.1530909538269s cumulative, 0.08954763412475586s individual

Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:36933 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:55219 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:54085 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
E
current test FAILED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 817.6688151359558s cumulative, 30.515724182128906s individual

Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 43341 --interface wsgi _wsgi_test_app:app
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 42825 --interface wsgi _wsgi_test_app:app
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 48681 --interface wsgi _wsgi_test_app:app
E
current test FAILED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 848.2874302864075s cumulative, 30.61861515045166s individual

Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:38409 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:54353 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
E
current test FAILED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 868.7475385665894s cumulative, 20.460108280181885s individual

Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 43155 --interface wsgi _wsgi_test_app:app
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 51373 --interface wsgi _wsgi_test_app:app
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 37031 --interface wsgi _wsgi_test_app:app
E
current test FAILED -- test_get_deprecated in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 899.6515891551971s cumulative, 30.904050588607788s individual

Starting uWSGI...
uwsgi --http 127.0.0.1:49335 --wsgi-file _wsgi_test_app.py
s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 899.7373843193054s cumulative, 0.08579516410827637s individual

s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 899.7852663993835s cumulative, 0.047882080078125s individual

s
current test PASSED/SKIPPED -- test_post_multipart_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 899.8271696567535s cumulative, 0.04190325736999512s individual

Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 43533 --interface wsgi _wsgi_test_app:app
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 33315 --interface wsgi _wsgi_test_app:app
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 53521 --interface wsgi _wsgi_test_app:app
E
current test FAILED -- test_static_file in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 931.0793399810791s cumulative, 31.25217032432556s individual

Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:49467 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:39799 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:45619 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
E
current test FAILED -- test_post_multipart_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 961.7907028198242s cumulative, 30.711362838745117s individual

s
current test PASSED/SKIPPED -- test_get_deprecated in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 961.8451929092407s cumulative, 0.054490089416503906s individual

s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 961.8836152553558s cumulative, 0.038422346115112305s individual

Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:49113 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
E
current test FAILED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 973.2268645763397s cumulative, 11.343249320983887s individual

s
current test PASSED/SKIPPED -- test_static_file in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 973.3813660144806s cumulative, 0.15450143814086914s individual

Starting uWSGI...
uwsgi --http 127.0.0.1:55591 --wsgi-file _wsgi_test_app.py
s
current test PASSED/SKIPPED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 973.7393252849579s cumulative, 0.3579592704772949s individual

s
current test PASSED/SKIPPED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 974.0718715190887s cumulative, 0.3325462341308594s individual

Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 37511 --interface wsgi _wsgi_test_app:app
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 48107 --interface wsgi _wsgi_test_app:app
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 60287 --interface wsgi _wsgi_test_app:app
E
current test FAILED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 1005.2989497184753s cumulative, 31.227078199386597s individual

s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 1005.3539979457855s cumulative, 0.055048227310180664s individual

s
current test PASSED/SKIPPED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 1005.401052236557s cumulative, 0.047054290771484375s individual


tests/test_custom_router.py .
current test PASSED/SKIPPED -- test_custom_router_find_should_be_used in /home/kaiyaok2/PythonProjects/falcon/tests/test_custom_router.py: 1005.471752166748s cumulative, 0.07069993019104004s individual

.
current test PASSED/SKIPPED -- test_custom_router_takes_req_keyword_argument in /home/kaiyaok2/PythonProjects/falcon/tests/test_custom_router.py: 1005.5714902877808s cumulative, 0.09973812103271484s individual

.
current test PASSED/SKIPPED -- test_custom_router_takes_req_keyword_argument in /home/kaiyaok2/PythonProjects/falcon/tests/test_custom_router.py: 1005.6428804397583s cumulative, 0.07139015197753906s individual

.
current test PASSED/SKIPPED -- test_custom_router_find_should_be_used in /home/kaiyaok2/PythonProjects/falcon/tests/test_custom_router.py: 1005.7294704914093s cumulative, 0.08659005165100098s individual

.
current test PASSED/SKIPPED -- test_custom_router_add_route_should_be_used in /home/kaiyaok2/PythonProjects/falcon/tests/test_custom_router.py: 1005.7666838169098s cumulative, 0.03721332550048828s individual

.
current test PASSED/SKIPPED -- test_custom_router_takes_req_positional_argument in /home/kaiyaok2/PythonProjects/falcon/tests/test_custom_router.py: 1005.8300688266754s cumulative, 0.063385009765625s individual

.
current test PASSED/SKIPPED -- test_custom_router_add_route_should_be_used in /home/kaiyaok2/PythonProjects/falcon/tests/test_custom_router.py: 1005.8698518276215s cumulative, 0.03978300094604492s individual

.
current test PASSED/SKIPPED -- test_custom_router_takes_req_positional_argument in /home/kaiyaok2/PythonProjects/falcon/tests/test_custom_router.py: 1005.9128057956696s cumulative, 0.0429539680480957s individual

.
current test PASSED/SKIPPED -- test_can_pass_additional_params_to_add_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_custom_router.py: 1005.9475898742676s cumulative, 0.03478407859802246s individual

.
current test PASSED/SKIPPED -- test_can_pass_additional_params_to_add_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_custom_router.py: 1005.9774549007416s cumulative, 0.029865026473999023s individual


tests/test_media_multipart.py .
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1006.0463700294495s cumulative, 0.06891512870788574s individual

.
current test PASSED/SKIPPED -- test_data_too_large in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1006.1427142620087s cumulative, 0.0963442325592041s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1006.1739263534546s cumulative, 0.03121209144592285s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1006.2101509571075s cumulative, 0.0362246036529541s individual

.
current test PASSED/SKIPPED -- test_invalid_text_or_charset in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1006.2436606884003s cumulative, 0.03350973129272461s individual

.
current test PASSED/SKIPPED -- test_body_part_properties in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1006.2753596305847s cumulative, 0.03169894218444824s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1006.3571598529816s cumulative, 0.08180022239685059s individual

.
current test PASSED/SKIPPED -- test_parse in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1006.4793162345886s cumulative, 0.12215638160705566s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1006.5844967365265s cumulative, 0.10518050193786621s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1006.6171767711639s cumulative, 0.03268003463745117s individual

.
current test PASSED/SKIPPED -- test_truncated_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1006.6905467510223s cumulative, 0.07336997985839844s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1006.7230336666107s cumulative, 0.032486915588378906s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1006.7531502246857s cumulative, 0.030116558074951172s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1006.8648753166199s cumulative, 0.1117250919342041s individual

.
current test PASSED/SKIPPED -- test_invalid_text_or_charset in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1006.9100677967072s cumulative, 0.04519248008728027s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1006.9922420978546s cumulative, 0.08217430114746094s individual

.
current test PASSED/SKIPPED -- test_deserialize_part_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1007.0503034591675s cumulative, 0.05806136131286621s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1007.0745859146118s cumulative, 0.024282455444335938s individual

.
current test PASSED/SKIPPED -- test_content_transfer_encoding_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1007.1374435424805s cumulative, 0.06285762786865234s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1007.202446937561s cumulative, 0.0650033950805664s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1007.2615103721619s cumulative, 0.05906343460083008s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1007.3153805732727s cumulative, 0.053870201110839844s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1007.3400173187256s cumulative, 0.02463674545288086s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1007.3628714084625s cumulative, 0.022854089736938477s individual

.
current test PASSED/SKIPPED -- test_deserialize_part_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1007.425701379776s cumulative, 0.06282997131347656s individual

.
current test PASSED/SKIPPED -- test_serialize in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1007.442574262619s cumulative, 0.016872882843017578s individual

.
current test PASSED/SKIPPED -- test_unsupported_charset in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1007.4978716373444s cumulative, 0.0552973747253418s individual

.
current test PASSED/SKIPPED -- test_deserialize_custom_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1007.5490255355835s cumulative, 0.05115389823913574s individual

.
current test PASSED/SKIPPED -- test_empty_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1007.5688140392303s cumulative, 0.019788503646850586s individual

.
current test PASSED/SKIPPED -- test_missing_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1007.5870659351349s cumulative, 0.018251895904541016s individual

.
current test PASSED/SKIPPED -- test_parse in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1007.6159460544586s cumulative, 0.02888011932373047s individual

.
current test PASSED/SKIPPED -- test_truncated_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1007.6746273040771s cumulative, 0.05868124961853027s individual

.
current test PASSED/SKIPPED -- test_truncated_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1007.7276699542999s cumulative, 0.05304265022277832s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1007.8039886951447s cumulative, 0.07631874084472656s individual

.
current test PASSED/SKIPPED -- test_truncated_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1007.8646767139435s cumulative, 0.060688018798828125s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1007.9219055175781s cumulative, 0.057228803634643555s individual

.
current test PASSED/SKIPPED -- test_invalid_random_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1008.0652418136597s cumulative, 0.14333629608154297s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1008.0896830558777s cumulative, 0.024441242218017578s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1008.1472647190094s cumulative, 0.05758166313171387s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1008.1665153503418s cumulative, 0.01925063133239746s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1008.1886963844299s cumulative, 0.022181034088134766s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1008.2330667972565s cumulative, 0.044370412826538086s individual

.
current test PASSED/SKIPPED -- test_upload_multipart in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1008.2943003177643s cumulative, 0.0612335205078125s individual

.
current test PASSED/SKIPPED -- test_random_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1010.1426455974579s cumulative, 1.8483452796936035s individual

.
current test PASSED/SKIPPED -- test_random_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1013.4305765628815s cumulative, 3.287930965423584s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1013.4378886222839s cumulative, 0.00731205940246582s individual

.
current test PASSED/SKIPPED -- test_truncated_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1013.4804246425629s cumulative, 0.042536020278930664s individual

.
current test PASSED/SKIPPED -- test_invalid_text_or_charset in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1013.4855349063873s cumulative, 0.005110263824462891s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1013.4906249046326s cumulative, 0.005089998245239258s individual

.
current test PASSED/SKIPPED -- test_invalid_random_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1013.5554654598236s cumulative, 0.06484055519104004s individual

.
current test PASSED/SKIPPED -- test_unexected_form_structure in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1013.5753316879272s cumulative, 0.019866228103637695s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1013.5909342765808s cumulative, 0.015602588653564453s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1013.5974383354187s cumulative, 0.006504058837890625s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1013.619469165802s cumulative, 0.02203083038330078s individual

.
current test PASSED/SKIPPED -- test_content_transfer_encoding_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1013.6404016017914s cumulative, 0.020932435989379883s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1013.6638267040253s cumulative, 0.02342510223388672s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1013.6836099624634s cumulative, 0.01978325843811035s individual

.
current test PASSED/SKIPPED -- test_nested_multipart_mixed in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1013.6942415237427s cumulative, 0.010631561279296875s individual

.
current test PASSED/SKIPPED -- test_upload_multipart in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1013.7103350162506s cumulative, 0.01609349250793457s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1013.7345125675201s cumulative, 0.02417755126953125s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1013.797699213028s cumulative, 0.0631866455078125s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1013.8278615474701s cumulative, 0.030162334442138672s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1013.888575553894s cumulative, 0.060714006423950195s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1013.9638302326202s cumulative, 0.07525467872619629s individual

.
current test PASSED/SKIPPED -- test_unexected_form_structure in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1014.040736913681s cumulative, 0.07690668106079102s individual

.
current test PASSED/SKIPPED -- test_data_too_large in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1014.1823840141296s cumulative, 0.1416471004486084s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1014.2189435958862s cumulative, 0.0365595817565918s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1014.3001606464386s cumulative, 0.08121705055236816s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1014.3337578773499s cumulative, 0.03359723091125488s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1014.3621394634247s cumulative, 0.0283815860748291s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1014.3873641490936s cumulative, 0.025224685668945312s individual

.
current test PASSED/SKIPPED -- test_parse in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1014.4097187519073s cumulative, 0.022354602813720703s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1014.4361996650696s cumulative, 0.026480913162231445s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1014.4660475254059s cumulative, 0.02984786033630371s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1014.533212184906s cumulative, 0.06716465950012207s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1014.5988807678223s cumulative, 0.06566858291625977s individual

.
current test PASSED/SKIPPED -- test_filename_star in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1014.6847178936005s cumulative, 0.08583712577819824s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1014.7136056423187s cumulative, 0.02888774871826172s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1014.741242647171s cumulative, 0.027637004852294922s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1014.8085930347443s cumulative, 0.06735038757324219s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1014.8794424533844s cumulative, 0.07084941864013672s individual

.
current test PASSED/SKIPPED -- test_from_buffered_stream in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1014.8976929187775s cumulative, 0.018250465393066406s individual

.
current test PASSED/SKIPPED -- test_truncated_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1014.9624254703522s cumulative, 0.06473255157470703s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1015.01846575737s cumulative, 0.056040287017822266s individual

.
current test PASSED/SKIPPED -- test_body_part_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1015.0412306785583s cumulative, 0.022764921188354492s individual

.
current test PASSED/SKIPPED -- test_filename_star in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1015.1150887012482s cumulative, 0.07385802268981934s individual

.
current test PASSED/SKIPPED -- test_invalid_text_or_charset in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1015.1413199901581s cumulative, 0.02623128890991211s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1015.2077481746674s cumulative, 0.06642818450927734s individual

.
current test PASSED/SKIPPED -- test_truncated_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1015.2794392108917s cumulative, 0.07169103622436523s individual

.
current test PASSED/SKIPPED -- test_truncated_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1015.3805689811707s cumulative, 0.10112977027893066s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1015.456609249115s cumulative, 0.07604026794433594s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1015.5247218608856s cumulative, 0.06811261177062988s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1015.5985133647919s cumulative, 0.07379150390625s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1015.6308543682098s cumulative, 0.03234100341796875s individual

.
current test PASSED/SKIPPED -- test_unknown_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1015.6577589511871s cumulative, 0.026904582977294922s individual

.
current test PASSED/SKIPPED -- test_unsupported_charset in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1015.7301790714264s cumulative, 0.07242012023925781s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1015.7615203857422s cumulative, 0.0313413143157959s individual

.
current test PASSED/SKIPPED -- test_deserialize_custom_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1015.8261952400208s cumulative, 0.06467485427856445s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1015.8574042320251s cumulative, 0.03120899200439453s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1015.9398863315582s cumulative, 0.08248209953308105s individual

.
current test PASSED/SKIPPED -- test_parse in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1015.9665703773499s cumulative, 0.026684045791625977s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1015.9971141815186s cumulative, 0.030543804168701172s individual

.
current test PASSED/SKIPPED -- test_empty_input in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1016.0221061706543s cumulative, 0.024991989135742188s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1016.0541305541992s cumulative, 0.032024383544921875s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1016.0863220691681s cumulative, 0.03219151496887207s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1016.1306865215302s cumulative, 0.04436445236206055s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1016.1718542575836s cumulative, 0.0411677360534668s individual


tests/test_uri_templates.py .
current test PASSED/SKIPPED -- test_multiple in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1016.2279298305511s cumulative, 0.0560755729675293s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1016.2905209064484s cumulative, 0.0625910758972168s individual

F
current test FAILED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1017.117579460144s cumulative, 0.8270585536956787s individual

F
current test FAILED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1017.8019099235535s cumulative, 0.6843304634094238s individual

.
current test PASSED/SKIPPED -- test_empty_path_component in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1017.8389172554016s cumulative, 0.03700733184814453s individual

.
current test PASSED/SKIPPED -- test_no_vars in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1017.880003452301s cumulative, 0.04108619689941406s individual

.
current test PASSED/SKIPPED -- test_root_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1017.9024291038513s cumulative, 0.02242565155029297s individual

.
current test PASSED/SKIPPED -- test_same_level_complex_var in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1017.95774102211s cumulative, 0.05531191825866699s individual

.
current test PASSED/SKIPPED -- test_empty_path_component in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1018.0073390007019s cumulative, 0.049597978591918945s individual

.
current test PASSED/SKIPPED -- test_int_converter_rejections in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1018.1048593521118s cumulative, 0.09752035140991211s individual

.
current test PASSED/SKIPPED -- test_empty_path_component in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1018.3036525249481s cumulative, 0.1987931728363037s individual

F
current test FAILED -- test_no_vars in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1020.5080664157867s cumulative, 2.204413890838623s individual

F
current test FAILED -- test_single in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1022.009872674942s cumulative, 1.5018062591552734s individual

F
current test FAILED -- test_converter_custom in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1023.9659571647644s cumulative, 1.9560844898223877s individual

.
current test PASSED/SKIPPED -- test_adding_suffix_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1024.1744332313538s cumulative, 0.20847606658935547s individual

F
current test FAILED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1032.5226573944092s cumulative, 8.34822416305542s individual

F
current test FAILED -- test_int_converter_rejections in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1033.2278046607971s cumulative, 0.7051472663879395s individual

F
current test FAILED -- test_single in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1033.8102827072144s cumulative, 0.5824780464172363s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1033.842957019806s cumulative, 0.032674312591552734s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1034.0563967227936s cumulative, 0.2134397029876709s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1034.3694999217987s cumulative, 0.31310319900512695s individual

F
current test FAILED -- test_same_level_complex_var in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1036.4142067432404s cumulative, 2.0447068214416504s individual

.
current test PASSED/SKIPPED -- test_relative_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1036.4393348693848s cumulative, 0.02512812614440918s individual

.
current test PASSED/SKIPPED -- test_empty_path_component in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1036.4661207199097s cumulative, 0.026785850524902344s individual

F
current test FAILED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1036.9323163032532s cumulative, 0.46619558334350586s individual

F
current test FAILED -- test_converter_custom in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1037.7494766712189s cumulative, 0.8171603679656982s individual

.
current test PASSED/SKIPPED -- test_custom_error_on_suffix_route_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1037.7784147262573s cumulative, 0.02893805503845215s individual

F
current test FAILED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1038.5384154319763s cumulative, 0.7600007057189941s individual

F
current test FAILED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1040.7288711071014s cumulative, 2.190455675125122s individual

.
current test PASSED/SKIPPED -- test_relative_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1040.8446233272552s cumulative, 0.1157522201538086s individual

F
current test FAILED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1041.5941514968872s cumulative, 0.749528169631958s individual

F
current test FAILED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1042.4644730091095s cumulative, 0.87032151222229s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1042.5178101062775s cumulative, 0.05333709716796875s individual

.
current test PASSED/SKIPPED -- test_with_and_without_trailing_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1042.6007039546967s cumulative, 0.08289384841918945s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1042.6678841114044s cumulative, 0.06718015670776367s individual

F
current test FAILED -- test_int_converter_rejections in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1044.930960893631s cumulative, 2.2630767822265625s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1045.3679554462433s cumulative, 0.4369945526123047s individual

.
current test PASSED/SKIPPED -- test_single_path_segment in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1045.559665441513s cumulative, 0.1917099952697754s individual

F
current test FAILED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1057.4376244544983s cumulative, 11.87795901298523s individual

F
current test FAILED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1058.386343717575s cumulative, 0.9487192630767822s individual

.
current test PASSED/SKIPPED -- test_relative_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1058.431851387024s cumulative, 0.04550766944885254s individual

.
current test PASSED/SKIPPED -- test_uuid_converter_complex_segment in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1058.50097823143s cumulative, 0.06912684440612793s individual

.
current test PASSED/SKIPPED -- test_custom_error_on_suffix_route_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1058.5415062904358s cumulative, 0.040528059005737305s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1058.614794254303s cumulative, 0.0732879638671875s individual

.
current test PASSED/SKIPPED -- test_with_and_without_trailing_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1058.7044315338135s cumulative, 0.08963727951049805s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1058.7587423324585s cumulative, 0.05431079864501953s individual

.
current test PASSED/SKIPPED -- test_int_converter_rejections in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1058.807695388794s cumulative, 0.04895305633544922s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1058.8565673828125s cumulative, 0.04887199401855469s individual

.
current test PASSED/SKIPPED -- test_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1058.9372854232788s cumulative, 0.0807180404663086s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1059.0085937976837s cumulative, 0.07130837440490723s individual

.
current test PASSED/SKIPPED -- test_empty_path_component in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1059.0500903129578s cumulative, 0.04149651527404785s individual

.
current test PASSED/SKIPPED -- test_single in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1059.1045713424683s cumulative, 0.05448102951049805s individual

F
current test FAILED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1059.9232099056244s cumulative, 0.8186385631561279s individual

.
current test PASSED/SKIPPED -- test_converter_custom in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1059.9787452220917s cumulative, 0.055535316467285156s individual

F
current test FAILED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1061.7575199604034s cumulative, 1.7787747383117676s individual

F
current test FAILED -- test_single_trailing_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1063.5518336296082s cumulative, 1.794313669204712s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1063.5893325805664s cumulative, 0.03749895095825195s individual

F
current test FAILED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1064.211368560791s cumulative, 0.6220359802246094s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1064.2823069095612s cumulative, 0.0709383487701416s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1064.3554484844208s cumulative, 0.07314157485961914s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1064.446843624115s cumulative, 0.09139513969421387s individual

.
current test PASSED/SKIPPED -- test_single in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1064.5040760040283s cumulative, 0.05723237991333008s individual

F
current test FAILED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1065.3340713977814s cumulative, 0.8299953937530518s individual

F
current test FAILED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1066.2016952037811s cumulative, 0.8676238059997559s individual

F
current test FAILED -- test_with_and_without_trailing_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1066.9466621875763s cumulative, 0.744966983795166s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1067.0056722164154s cumulative, 0.05901002883911133s individual

F
current test FAILED -- test_int_converter_rejections in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1081.373461484909s cumulative, 14.367789268493652s individual

.
current test PASSED/SKIPPED -- test_converter_custom in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1081.4238765239716s cumulative, 0.0504150390625s individual

F
current test FAILED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1081.8413128852844s cumulative, 0.4174363613128662s individual

.
current test PASSED/SKIPPED -- test_relative_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1081.8599774837494s cumulative, 0.01866459846496582s individual

.
current test PASSED/SKIPPED -- test_int_converter_rejections in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1081.875815629959s cumulative, 0.015838146209716797s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1081.8898491859436s cumulative, 0.01403355598449707s individual

F
current test FAILED -- test_single in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1082.2270636558533s cumulative, 0.33721446990966797s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1082.3242933750153s cumulative, 0.0972297191619873s individual

F
current test FAILED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1083.2382950782776s cumulative, 0.9140017032623291s individual

F
current test FAILED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1084.01171708107s cumulative, 0.7734220027923584s individual

F
current test FAILED -- test_adding_suffix_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1084.8164086341858s cumulative, 0.8046915531158447s individual

.
current test PASSED/SKIPPED -- test_single_trailing_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1084.9091987609863s cumulative, 0.09279012680053711s individual

F
current test FAILED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1085.59019613266s cumulative, 0.680997371673584s individual

F
current test FAILED -- test_root_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1086.2770507335663s cumulative, 0.6868546009063721s individual

.
current test PASSED/SKIPPED -- test_relative_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1086.3157229423523s cumulative, 0.03867220878601074s individual

F
current test FAILED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1087.0524940490723s cumulative, 0.7367711067199707s individual

F
current test FAILED -- test_with_and_without_trailing_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1095.9644429683685s cumulative, 8.911948919296265s individual

F
current test FAILED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1096.760167837143s cumulative, 0.7957248687744141s individual

F
current test FAILED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1098.6423404216766s cumulative, 1.8821725845336914s individual

F
current test FAILED -- test_converter_custom in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1099.862853527069s cumulative, 1.220513105392456s individual

.
current test PASSED/SKIPPED -- test_empty_path_component in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1099.9646937847137s cumulative, 0.10184025764465332s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1100.1203167438507s cumulative, 0.1556229591369629s individual

F
current test FAILED -- test_multiple in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1101.7552859783173s cumulative, 1.6349692344665527s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1101.9972784519196s cumulative, 0.24199247360229492s individual

F
current test FAILED -- test_single_path_segment in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1104.462684392929s cumulative, 2.4654059410095215s individual

F
current test FAILED -- test_same_level_complex_var in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1105.8843677043915s cumulative, 1.4216833114624023s individual

F
current test FAILED -- test_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1106.2072513103485s cumulative, 0.32288360595703125s individual

F
current test FAILED -- test_float_converter_non_finite_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1106.444212436676s cumulative, 0.23696112632751465s individual

.
current test PASSED/SKIPPED -- test_empty_path_component in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1106.458580493927s cumulative, 0.014368057250976562s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1106.487743139267s cumulative, 0.02916264533996582s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1106.505800485611s cumulative, 0.01805734634399414s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1106.5211448669434s cumulative, 0.015344381332397461s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1106.5349328517914s cumulative, 0.013787984848022461s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1106.5457730293274s cumulative, 0.010840177536010742s individual

F
current test FAILED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1106.962647676468s cumulative, 0.41687464714050293s individual

.
current test PASSED/SKIPPED -- test_single in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1107.0207617282867s cumulative, 0.058114051818847656s individual

F
current test FAILED -- test_uuid_converter_complex_segment in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1116.828474521637s cumulative, 9.80771279335022s individual

F
current test FAILED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1117.4103002548218s cumulative, 0.5818257331848145s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1117.4492881298065s cumulative, 0.03898787498474121s individual

.
current test PASSED/SKIPPED -- test_relative_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1117.4927928447723s cumulative, 0.04350471496582031s individual

F
current test FAILED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1118.3815422058105s cumulative, 0.888749361038208s individual

F
current test FAILED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1119.2835969924927s cumulative, 0.9020547866821289s individual

F
current test FAILED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1120.100444316864s cumulative, 0.8168473243713379s individual

F
current test FAILED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1120.9925770759583s cumulative, 0.8921327590942383s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1121.059532880783s cumulative, 0.0669558048248291s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1121.1286833286285s cumulative, 0.06915044784545898s individual

.
current test PASSED/SKIPPED -- test_converter_custom in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1121.2094559669495s cumulative, 0.08077263832092285s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1121.393453836441s cumulative, 0.18399786949157715s individual

F
current test FAILED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1122.506112575531s cumulative, 1.1126587390899658s individual

.
current test PASSED/SKIPPED -- test_empty_path_component in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1122.563465833664s cumulative, 0.05735325813293457s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1122.6355044841766s cumulative, 0.07203865051269531s individual

.
current test PASSED/SKIPPED -- test_same_level_complex_var in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 1122.7202098369598s cumulative, 0.08470535278320312s individual


tests/test_wsgi_interface.py .
current test PASSED/SKIPPED -- test_srmock in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_interface.py: 1122.7650504112244s cumulative, 0.04484057426452637s individual

.
current test PASSED/SKIPPED -- test_pep3333 in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_interface.py: 1122.835109949112s cumulative, 0.07005953788757324s individual


tests/test_testing.py .
current test PASSED/SKIPPED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1122.8930246829987s cumulative, 0.05791473388671875s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1122.9532191753387s cumulative, 0.06019449234008789s individual

F
current test FAILED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1123.2604908943176s cumulative, 0.30727171897888184s individual

F
current test FAILED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1123.603404045105s cumulative, 0.3429131507873535s individual

.
current test PASSED/SKIPPED -- test_create_environ_default_ua_override in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1123.6466226577759s cumulative, 0.04321861267089844s individual

.
current test PASSED/SKIPPED -- test_create_environ_preserve_raw_uri in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1123.6857371330261s cumulative, 0.03911447525024414s individual

.
current test PASSED/SKIPPED -- test_closed_wsgi_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1123.7398509979248s cumulative, 0.05411386489868164s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1123.807294368744s cumulative, 0.0674433708190918s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1123.854910850525s cumulative, 0.04761648178100586s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1123.905529499054s cumulative, 0.050618648529052734s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1123.9472908973694s cumulative, 0.04176139831542969s individual

.
current test PASSED/SKIPPED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1124.0003595352173s cumulative, 0.05306863784790039s individual

.
current test PASSED/SKIPPED -- test_simulate_request_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1124.0748002529144s cumulative, 0.07444071769714355s individual

.
current test PASSED/SKIPPED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1124.116806268692s cumulative, 0.04200601577758789s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1124.1606466770172s cumulative, 0.04384040832519531s individual

F
current test FAILED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1124.497442483902s cumulative, 0.3367958068847656s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1124.5507247447968s cumulative, 0.05328226089477539s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1124.6414909362793s cumulative, 0.09076619148254395s individual

.
current test PASSED/SKIPPED -- test_cookies_jar in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1124.9251244068146s cumulative, 0.2836334705352783s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1125.1850402355194s cumulative, 0.259915828704834s individual

.
current test PASSED/SKIPPED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1125.5195446014404s cumulative, 0.3345043659210205s individual

.
current test PASSED/SKIPPED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1125.906371831894s cumulative, 0.3868272304534912s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1126.177759885788s cumulative, 0.27138805389404297s individual

F
current test FAILED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1126.8845403194427s cumulative, 0.7067804336547852s individual

.
current test PASSED/SKIPPED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1126.9140465259552s cumulative, 0.029506206512451172s individual

.
current test PASSED/SKIPPED -- test_create_environ_default_ua in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1126.9275014400482s cumulative, 0.013454914093017578s individual

F
current test FAILED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1127.5491526126862s cumulative, 0.6216511726379395s individual

.
current test PASSED/SKIPPED -- test_closed_wsgi_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1127.6082367897034s cumulative, 0.059084177017211914s individual

F
current test FAILED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1128.2059979438782s cumulative, 0.5977611541748047s individual

.
current test PASSED/SKIPPED -- test_create_environ_cookies_options_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1128.2720413208008s cumulative, 0.06604337692260742s individual

.
current test PASSED/SKIPPED -- test_closed_wsgi_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1128.3399155139923s cumulative, 0.06787419319152832s individual

.
current test PASSED/SKIPPED -- test_missing_header_is_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1128.4118373394012s cumulative, 0.07192182540893555s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1128.5270454883575s cumulative, 0.11520814895629883s individual

.
current test PASSED/SKIPPED -- test_create_environ_cookies in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1128.5851049423218s cumulative, 0.0580594539642334s individual

F
current test FAILED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1129.2101385593414s cumulative, 0.6250336170196533s individual

.
current test PASSED/SKIPPED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1129.3400177955627s cumulative, 0.12987923622131348s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1129.423154592514s cumulative, 0.08313679695129395s individual

.
current test PASSED/SKIPPED -- test_closed_wsgi_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1129.5282318592072s cumulative, 0.10507726669311523s individual

.
current test PASSED/SKIPPED -- test_testing_client_handles_wsgi_generator_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1129.6093137264252s cumulative, 0.08108186721801758s individual

.
current test PASSED/SKIPPED -- test_create_environ_cookies in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1129.6814506053925s cumulative, 0.07213687896728516s individual

F
current test FAILED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1130.3047244548798s cumulative, 0.6232738494873047s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1130.4192609786987s cumulative, 0.11453652381896973s individual

.
current test PASSED/SKIPPED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 1130.5750739574432s cumulative, 0.15581297874450684s individual


tests/asgi/test_request_body_asgi.py .
current test PASSED/SKIPPED -- test_tiny_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 1130.7903637886047s cumulative, 0.21528983116149902s individual

.
current test PASSED/SKIPPED -- test_content_length_smaller_than_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 1130.9193086624146s cumulative, 0.12894487380981445s individual

.
current test PASSED/SKIPPED -- test_read_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 1131.10639834404s cumulative, 0.1870896816253662s individual

.
current test PASSED/SKIPPED -- test_content_length_smaller_than_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 1131.2129571437836s cumulative, 0.10655879974365234s individual

.
current test PASSED/SKIPPED -- test_bounded_stream_alias in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 1131.2537999153137s cumulative, 0.04084277153015137s individual

.
current test PASSED/SKIPPED -- test_tiny_body_overflow in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 1131.4079320430756s cumulative, 0.15413212776184082s individual

.
current test PASSED/SKIPPED -- test_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 1131.558970451355s cumulative, 0.15103840827941895s individual

.
current test PASSED/SKIPPED -- test_content_length_smaller_than_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 1131.6441533565521s cumulative, 0.08518290519714355s individual

.
current test PASSED/SKIPPED -- test_content_length_smaller_than_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 1131.7606699466705s cumulative, 0.1165165901184082s individual

.
current test PASSED/SKIPPED -- test_request_repr in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 1131.8378176689148s cumulative, 0.0771477222442627s individual

.
current test PASSED/SKIPPED -- test_content_length_smaller_than_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 1131.948154449463s cumulative, 0.1103367805480957s individual

.
current test PASSED/SKIPPED -- test_content_length_smaller_than_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 1132.037831544876s cumulative, 0.08967709541320801s individual


tests/asgi/test_boundedstream_asgi.py .
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1132.12566614151s cumulative, 0.08783459663391113s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1132.2103898525238s cumulative, 0.08472371101379395s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1132.2526519298553s cumulative, 0.04226207733154297s individual

.
current test PASSED/SKIPPED -- test_exhaust_with_disconnect in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1132.2857570648193s cumulative, 0.03310513496398926s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1132.3618257045746s cumulative, 0.07606863975524902s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1132.3967471122742s cumulative, 0.03492140769958496s individual

s
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1132.4308049678802s cumulative, 0.0340578556060791s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1132.4598803520203s cumulative, 0.02907538414001465s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1132.5070688724518s cumulative, 0.047188520431518555s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1132.5344512462616s cumulative, 0.027382373809814453s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1132.5684711933136s cumulative, 0.03401994705200195s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1132.590980052948s cumulative, 0.022508859634399414s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1132.635265827179s cumulative, 0.04428577423095703s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1132.6831827163696s cumulative, 0.04791688919067383s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1132.7229125499725s cumulative, 0.03972983360290527s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1132.752013206482s cumulative, 0.029100656509399414s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1132.7831468582153s cumulative, 0.031133651733398438s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1132.8115515708923s cumulative, 0.028404712677001953s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1132.8469994068146s cumulative, 0.03544783592224121s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1132.8869597911835s cumulative, 0.039960384368896484s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1132.9106013774872s cumulative, 0.023641586303710938s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1132.9299311637878s cumulative, 0.01932978630065918s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1132.946878194809s cumulative, 0.016947031021118164s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1132.9636554718018s cumulative, 0.01677727699279785s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1132.9861075878143s cumulative, 0.022452116012573242s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1133.0157957077026s cumulative, 0.029688119888305664s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1133.0444712638855s cumulative, 0.028675556182861328s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1133.0714266300201s cumulative, 0.026955366134643555s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1191.8436341285706s cumulative, 58.772207498550415s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1191.8935086727142s cumulative, 0.04987454414367676s individual

s
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1191.9479439258575s cumulative, 0.05443525314331055s individual

s
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1191.9897491931915s cumulative, 0.041805267333984375s individual

s
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1192.014429807663s cumulative, 0.024680614471435547s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1192.0531673431396s cumulative, 0.03873753547668457s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1192.0905237197876s cumulative, 0.03735637664794922s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1192.1258456707s cumulative, 0.035321950912475586s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1192.165714263916s cumulative, 0.03986859321594238s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1192.2212510108948s cumulative, 0.055536746978759766s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1192.2583510875702s cumulative, 0.03710007667541504s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1192.314078092575s cumulative, 0.05572700500488281s individual

s
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1192.3764033317566s cumulative, 0.062325239181518555s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1192.4102144241333s cumulative, 0.033811092376708984s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1251.3650469779968s cumulative, 58.954832553863525s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1251.3951442241669s cumulative, 0.030097246170043945s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1251.4264862537384s cumulative, 0.0313420295715332s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1251.4710290431976s cumulative, 0.044542789459228516s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1251.4995939731598s cumulative, 0.028564929962158203s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1251.5280578136444s cumulative, 0.02846384048461914s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1251.5604298114777s cumulative, 0.03237199783325195s individual

s
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1251.5846440792084s cumulative, 0.02421426773071289s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1251.6369552612305s cumulative, 0.05231118202209473s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1251.6711792945862s cumulative, 0.03422403335571289s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1251.699938774109s cumulative, 0.028759479522705078s individual

.
current test PASSED/SKIPPED -- test_exhaust in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1251.7226676940918s cumulative, 0.022728919982910156s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1251.7441980838776s cumulative, 0.0215303897857666s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1251.768342256546s cumulative, 0.02414417266845703s individual

.
current test PASSED/SKIPPED -- test_iterate_streaming_request in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1251.7855105400085s cumulative, 0.017168283462524414s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1251.8084309101105s cumulative, 0.02292037010192871s individual

.
current test PASSED/SKIPPED -- test_filelike in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1251.8305485248566s cumulative, 0.02211761474609375s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1251.861082315445s cumulative, 0.030533790588378906s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1251.892141342163s cumulative, 0.03105902671813965s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1251.9207198619843s cumulative, 0.028578519821166992s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1251.9567453861237s cumulative, 0.0360255241394043s individual

.
current test PASSED/SKIPPED -- test_iteration_already_started in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1251.993944644928s cumulative, 0.03719925880432129s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1252.0221922397614s cumulative, 0.028247594833374023s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1252.0532279014587s cumulative, 0.031035661697387695s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1252.1051981449127s cumulative, 0.05197024345397949s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1252.1607220172882s cumulative, 0.05552387237548828s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1252.1905119419098s cumulative, 0.02978992462158203s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1333.88436794281s cumulative, 81.69385600090027s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1333.9208970069885s cumulative, 0.0365290641784668s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1333.9572100639343s cumulative, 0.03631305694580078s individual

s
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1333.990229845047s cumulative, 0.0330197811126709s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1334.0323338508606s cumulative, 0.04210400581359863s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1334.0674636363983s cumulative, 0.03512978553771973s individual


tests/test_uri_converters.py .
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1334.0960817337036s cumulative, 0.02861809730529785s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1334.1216247081757s cumulative, 0.0255429744720459s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1334.1482348442078s cumulative, 0.026610136032104492s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1334.1824831962585s cumulative, 0.03424835205078125s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1334.2092411518097s cumulative, 0.02675795555114746s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1334.2342772483826s cumulative, 0.025036096572875977s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1334.2660558223724s cumulative, 0.031778573989868164s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1334.2888503074646s cumulative, 0.022794485092163086s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1334.3199923038483s cumulative, 0.031141996383666992s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1334.3409287929535s cumulative, 0.02093648910522461s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1334.3578412532806s cumulative, 0.016912460327148438s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1334.3818943500519s cumulative, 0.024053096771240234s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1334.4045252799988s cumulative, 0.022630929946899414s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1334.4298074245453s cumulative, 0.02528214454650879s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1334.4559893608093s cumulative, 0.026181936264038086s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1334.4758019447327s cumulative, 0.019812583923339844s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1334.500379562378s cumulative, 0.024577617645263672s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1334.5262658596039s cumulative, 0.02588629722595215s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1334.548882484436s cumulative, 0.02261662483215332s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1334.5860812664032s cumulative, 0.037198781967163086s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1334.6094887256622s cumulative, 0.023407459259033203s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1334.6305482387543s cumulative, 0.021059513092041016s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1334.663544178009s cumulative, 0.03299593925476074s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1334.6927576065063s cumulative, 0.029213428497314453s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1334.7282619476318s cumulative, 0.03550434112548828s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1334.8601956367493s cumulative, 0.13193368911743164s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1334.885810136795s cumulative, 0.025614500045776367s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1334.910917520523s cumulative, 0.025107383728027344s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1334.935940027237s cumulative, 0.025022506713867188s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1334.9556572437286s cumulative, 0.01971721649169922s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1334.9737493991852s cumulative, 0.01809215545654297s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1335.0005366802216s cumulative, 0.026787281036376953s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1335.0185251235962s cumulative, 0.01798844337463379s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1335.044203042984s cumulative, 0.025677919387817383s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1335.0659818649292s cumulative, 0.02177882194519043s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1335.0959391593933s cumulative, 0.029957294464111328s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1335.119898557663s cumulative, 0.02395939826965332s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1335.1456880569458s cumulative, 0.025789499282836914s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1335.1757168769836s cumulative, 0.030028820037841797s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1335.20570063591s cumulative, 0.0299837589263916s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1335.2299909591675s cumulative, 0.02429032325744629s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1335.2621383666992s cumulative, 0.03214740753173828s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1335.2922611236572s cumulative, 0.030122756958007812s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1335.3182413578033s cumulative, 0.025980234146118164s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1335.3438329696655s cumulative, 0.025591611862182617s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1335.3658993244171s cumulative, 0.022066354751586914s individual

.
current test PASSED/SKIPPED -- test_int_converter_invalid_config in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1335.3887610435486s cumulative, 0.022861719131469727s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1335.4092464447021s cumulative, 0.020485401153564453s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1335.42516207695s cumulative, 0.015915632247924805s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1335.4443905353546s cumulative, 0.019228458404541016s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1335.4763193130493s cumulative, 0.03192877769470215s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1335.4953680038452s cumulative, 0.019048690795898438s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1335.5186786651611s cumulative, 0.02331066131591797s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1335.53804063797s cumulative, 0.01936197280883789s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1335.564291715622s cumulative, 0.02625107765197754s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1335.5892262458801s cumulative, 0.02493453025817871s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1335.6134388446808s cumulative, 0.02421259880065918s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1335.636320590973s cumulative, 0.022881746292114258s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1335.6626226902008s cumulative, 0.026302099227905273s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1335.6804156303406s cumulative, 0.017792940139770508s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1335.7010219097137s cumulative, 0.020606279373168945s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1335.7217452526093s cumulative, 0.020723342895507812s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1335.7425229549408s cumulative, 0.02077770233154297s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1335.7627174854279s cumulative, 0.020194530487060547s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1335.78129196167s cumulative, 0.01857447624206543s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1335.800259590149s cumulative, 0.018967628479003906s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1335.8154709339142s cumulative, 0.015211343765258789s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1335.8389773368835s cumulative, 0.02350640296936035s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1335.8622238636017s cumulative, 0.02324652671813965s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1335.8892328739166s cumulative, 0.027009010314941406s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1335.9109604358673s cumulative, 0.021727561950683594s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1335.9335119724274s cumulative, 0.022551536560058594s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1335.9522356987s cumulative, 0.018723726272583008s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1335.9753954410553s cumulative, 0.02315974235534668s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1335.9959070682526s cumulative, 0.020511627197265625s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1336.1964221000671s cumulative, 0.2005150318145752s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1336.2650499343872s cumulative, 0.06862783432006836s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1336.288587808609s cumulative, 0.023537874221801758s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1336.3095002174377s cumulative, 0.02091240882873535s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1336.3523833751678s cumulative, 0.04288315773010254s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1336.3807191848755s cumulative, 0.0283358097076416s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1336.3987576961517s cumulative, 0.018038511276245117s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1336.4242906570435s cumulative, 0.025532960891723633s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1336.4456098079681s cumulative, 0.021319150924682617s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1336.4639565944672s cumulative, 0.018346786499023438s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1336.4782054424286s cumulative, 0.014248847961425781s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1336.4925382137299s cumulative, 0.014332771301269531s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1336.5094456672668s cumulative, 0.016907453536987305s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1336.5303716659546s cumulative, 0.02092599868774414s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1336.5431492328644s cumulative, 0.012777566909790039s individual

.
current test PASSED/SKIPPED -- test_int_converter_invalid_config in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1336.5588357448578s cumulative, 0.015686511993408203s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1336.574536561966s cumulative, 0.015700817108154297s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1336.6027493476868s cumulative, 0.028212785720825195s individual

.
current test PASSED/SKIPPED -- test_datetime_converter_default_format in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1336.640742301941s cumulative, 0.03799295425415039s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1336.675787448883s cumulative, 0.03504514694213867s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1336.7021605968475s cumulative, 0.02637314796447754s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1336.7271263599396s cumulative, 0.024965763092041016s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1336.7500896453857s cumulative, 0.022963285446166992s individual

.
current test PASSED/SKIPPED -- test_int_converter_invalid_config in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1336.7666318416595s cumulative, 0.01654219627380371s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1336.7915365695953s cumulative, 0.024904727935791016s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1336.8057131767273s cumulative, 0.014176607131958008s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1336.821682214737s cumulative, 0.015969038009643555s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1336.829960823059s cumulative, 0.008278608322143555s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1336.833739042282s cumulative, 0.003778219223022461s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1336.8370378017426s cumulative, 0.0032987594604492188s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1336.842208623886s cumulative, 0.0051708221435546875s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1336.8456904888153s cumulative, 0.0034818649291992188s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1336.8625419139862s cumulative, 0.016851425170898438s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1336.8804256916046s cumulative, 0.017883777618408203s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1336.8993797302246s cumulative, 0.018954038619995117s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1336.9330723285675s cumulative, 0.03369259834289551s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 1336.9726784229279s cumulative, 0.03960609436035156s individual


tests/asgi/test_ws.py .
current test PASSED/SKIPPED -- test_client_disconnect_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1337.0887825489044s cumulative, 0.1161041259765625s individual

.
current test PASSED/SKIPPED -- test_bad_spec_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1337.2101185321808s cumulative, 0.12133598327636719s individual

.
current test PASSED/SKIPPED -- test_accept_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1337.6401550769806s cumulative, 0.4300365447998047s individual

.
current test PASSED/SKIPPED -- test_bad_spec_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1337.9230399131775s cumulative, 0.2828848361968994s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1338.320226430893s cumulative, 0.3971865177154541s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1338.7047889232635s cumulative, 0.38456249237060547s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1338.887246131897s cumulative, 0.18245720863342285s individual

.
current test PASSED/SKIPPED -- test_ws_context_timeout in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1343.9631519317627s cumulative, 5.075905799865723s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1344.041408777237s cumulative, 0.07825684547424316s individual

s.
current test PASSED/SKIPPED -- test_bad_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1344.0838766098022s cumulative, 0.04246783256530762s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1344.141842842102s cumulative, 0.05796623229980469s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1344.2020988464355s cumulative, 0.060256004333496094s individual

.
current test PASSED/SKIPPED -- test_mw_methods_must_be_coroutines in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1344.2228610515594s cumulative, 0.020762205123901367s individual

.
current test PASSED/SKIPPED -- test_media in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1344.2775387763977s cumulative, 0.054677724838256836s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1344.328628063202s cumulative, 0.05108928680419922s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1344.364499092102s cumulative, 0.035871028900146484s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1344.4113159179688s cumulative, 0.04681682586669922s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1344.506425857544s cumulative, 0.09510993957519531s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1344.9134557247162s cumulative, 0.4070298671722412s individual

.
current test PASSED/SKIPPED -- test_accept_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1345.2967989444733s cumulative, 0.3833432197570801s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1345.6797711849213s cumulative, 0.38297224044799805s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1346.0946912765503s cumulative, 0.4149200916290283s individual

.
current test PASSED/SKIPPED -- test_translate_webserver_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1346.1758778095245s cumulative, 0.08118653297424316s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1346.2034685611725s cumulative, 0.02759075164794922s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1346.2304649353027s cumulative, 0.026996374130249023s individual

.
current test PASSED/SKIPPED -- test_accept_with_bad_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1346.3954198360443s cumulative, 0.16495490074157715s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1346.5624437332153s cumulative, 0.1670238971710205s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1346.739468574524s cumulative, 0.17702484130859375s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1346.918823003769s cumulative, 0.17935442924499512s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1347.0988006591797s cumulative, 0.1799776554107666s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1347.3379302024841s cumulative, 0.23912954330444336s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1347.5154943466187s cumulative, 0.17756414413452148s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1347.6999266147614s cumulative, 0.1844322681427002s individual

.
current test PASSED/SKIPPED -- test_media in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1347.946291923523s cumulative, 0.24636530876159668s individual

.
current test PASSED/SKIPPED -- test_subprotocol_bad_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1348.1460185050964s cumulative, 0.19972658157348633s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1348.3778104782104s cumulative, 0.23179197311401367s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1348.5714421272278s cumulative, 0.19363164901733398s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1349.441069841385s cumulative, 0.8696277141571045s individual

.
current test PASSED/SKIPPED -- test_ws_simulator_client_require_accepted in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1349.8798696994781s cumulative, 0.4387998580932617s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1350.3192059993744s cumulative, 0.43933629989624023s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1350.436017036438s cumulative, 0.11681103706359863s individual

.
current test PASSED/SKIPPED -- test_missing_spec_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1350.4974112510681s cumulative, 0.06139421463012695s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1350.5718262195587s cumulative, 0.07441496849060059s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1350.631455898285s cumulative, 0.05962967872619629s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1350.7015142440796s cumulative, 0.07005834579467773s individual

.
current test PASSED/SKIPPED -- test_send_receive_data in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1350.7848699092865s cumulative, 0.08335566520690918s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1350.8340425491333s cumulative, 0.04917263984680176s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1350.8830754756927s cumulative, 0.04903292655944824s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1350.9328320026398s cumulative, 0.049756526947021484s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1350.9944291114807s cumulative, 0.06159710884094238s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1351.0420501232147s cumulative, 0.04762101173400879s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1351.08340716362s cumulative, 0.04135704040527344s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1351.1223676204681s cumulative, 0.03896045684814453s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1351.1727573871613s cumulative, 0.050389766693115234s individual

.
current test PASSED/SKIPPED -- test_accept_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1351.2061100006104s cumulative, 0.03335261344909668s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1351.2437765598297s cumulative, 0.03766655921936035s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1351.3194773197174s cumulative, 0.07570075988769531s individual

.
current test PASSED/SKIPPED -- test_send_receive_data in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1351.378934621811s cumulative, 0.05945730209350586s individual

.
current test PASSED/SKIPPED -- test_responder_raises_unhandled_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1351.435395002365s cumulative, 0.05646038055419922s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1351.517321586609s cumulative, 0.08192658424377441s individual

.
current test PASSED/SKIPPED -- test_subprotocol in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1351.5913820266724s cumulative, 0.07406044006347656s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1351.6777913570404s cumulative, 0.08640933036804199s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1351.812134027481s cumulative, 0.13434267044067383s individual

.
current test PASSED/SKIPPED -- test_subprotocol_bad_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1351.9528968334198s cumulative, 0.1407628059387207s individual

.
current test PASSED/SKIPPED -- test_accept_with_headers_not_supported in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1352.0515418052673s cumulative, 0.09864497184753418s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1352.1275267601013s cumulative, 0.07598495483398438s individual

.
current test PASSED/SKIPPED -- test_send_receive_data in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1352.2019486427307s cumulative, 0.07442188262939453s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1352.2711889743805s cumulative, 0.06924033164978027s individual

.
current test PASSED/SKIPPED -- test_media in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1352.36958193779s cumulative, 0.09839296340942383s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1352.4393985271454s cumulative, 0.06981658935546875s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1352.506511926651s cumulative, 0.06711339950561523s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1352.5715370178223s cumulative, 0.06502509117126465s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1352.6257119178772s cumulative, 0.05417490005493164s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1352.6717205047607s cumulative, 0.04600858688354492s individual

.
current test PASSED/SKIPPED -- test_ws_not_accepted in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1352.7510695457458s cumulative, 0.07934904098510742s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1352.8151721954346s cumulative, 0.0641026496887207s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1352.8722121715546s cumulative, 0.05703997611999512s individual

.
current test PASSED/SKIPPED -- test_send_receive_wrong_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1352.9434623718262s cumulative, 0.07125020027160645s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1353.0284123420715s cumulative, 0.08494997024536133s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1353.0912144184113s cumulative, 0.06280207633972168s individual

.
current test PASSED/SKIPPED -- test_ws_base_not_implemented in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1353.1112747192383s cumulative, 0.020060300827026367s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1353.1734127998352s cumulative, 0.06213808059692383s individual

.
current test PASSED/SKIPPED -- test_accept_with_bad_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1353.2332274913788s cumulative, 0.0598146915435791s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1353.2870106697083s cumulative, 0.05378317832946777s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1353.3435940742493s cumulative, 0.056583404541015625s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1353.4020121097565s cumulative, 0.05841803550720215s individual

.
current test PASSED/SKIPPED -- test_subprotocol_bad_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1353.4604353904724s cumulative, 0.05842328071594238s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1353.5216579437256s cumulative, 0.06122255325317383s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1353.5871849060059s cumulative, 0.06552696228027344s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1353.6516284942627s cumulative, 0.06444358825683594s individual

.
current test PASSED/SKIPPED -- test_bad_spec_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1353.6955544948578s cumulative, 0.04392600059509277s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1353.7691378593445s cumulative, 0.07358336448669434s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1353.8326213359833s cumulative, 0.06348347663879395s individual

.
current test PASSED/SKIPPED -- test_subprotocol_bad_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1353.8953223228455s cumulative, 0.06270098686218262s individual

.
current test PASSED/SKIPPED -- test_subprotocol in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1353.960909128189s cumulative, 0.06558680534362793s individual

.
current test PASSED/SKIPPED -- test_ws_simulator_collect_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1354.018503189087s cumulative, 0.05759406089782715s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1354.075440645218s cumulative, 0.056937456130981445s individual

.
current test PASSED/SKIPPED -- test_media in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1354.1553797721863s cumulative, 0.07993912696838379s individual

.
current test PASSED/SKIPPED -- test_subprotocol in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1354.2136721611023s cumulative, 0.058292388916015625s individual

.
current test PASSED/SKIPPED -- test_subprotocol_bad_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1354.2748973369598s cumulative, 0.061225175857543945s individual

.
current test PASSED/SKIPPED -- test_echo in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1366.0213928222656s cumulative, 11.746495485305786s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1366.4053661823273s cumulative, 0.3839733600616455s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1366.7777924537659s cumulative, 0.37242627143859863s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1367.1127920150757s cumulative, 0.33499956130981445s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1367.1397559642792s cumulative, 0.02696394920349121s individual

.
current test PASSED/SKIPPED -- test_missing_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1367.1497592926025s cumulative, 0.010003328323364258s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1367.1619277000427s cumulative, 0.012168407440185547s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1367.1747686862946s cumulative, 0.012840986251831055s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1367.1843411922455s cumulative, 0.009572505950927734s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1367.1933374404907s cumulative, 0.008996248245239258s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1367.2032952308655s cumulative, 0.00995779037475586s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1367.2104065418243s cumulative, 0.007111310958862305s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1367.2185592651367s cumulative, 0.00815272331237793s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1367.2411897182465s cumulative, 0.02263045310974121s individual

.
current test PASSED/SKIPPED -- test_bad_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1367.2478775978088s cumulative, 0.00668787956237793s individual

.
current test PASSED/SKIPPED -- test_accept_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1367.2587327957153s cumulative, 0.01085519790649414s individual

.
current test PASSED/SKIPPED -- test_ws_not_accepted in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1367.3645424842834s cumulative, 0.10580968856811523s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1367.570919752121s cumulative, 0.20637726783752441s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1367.7486412525177s cumulative, 0.17772150039672852s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1367.9125921726227s cumulative, 0.16395092010498047s individual

.
current test PASSED/SKIPPED -- test_accept_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1368.1148347854614s cumulative, 0.20224261283874512s individual

.
current test PASSED/SKIPPED -- test_bad_first_event in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1368.2435154914856s cumulative, 0.12868070602416992s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1368.4710595607758s cumulative, 0.22754406929016113s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1368.6763813495636s cumulative, 0.2053217887878418s individual

.
current test PASSED/SKIPPED -- test_send_receive_data in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1368.8957529067993s cumulative, 0.21937155723571777s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1369.0922322273254s cumulative, 0.19647932052612305s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1369.2590961456299s cumulative, 0.16686391830444336s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1369.471239566803s cumulative, 0.2121434211730957s individual

.
current test PASSED/SKIPPED -- test_accept_with_bad_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1369.626298904419s cumulative, 0.1550593376159668s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1370.007078409195s cumulative, 0.380779504776001s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1370.452362537384s cumulative, 0.4452841281890869s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1370.8626227378845s cumulative, 0.4102602005004883s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1371.055954694748s cumulative, 0.19333195686340332s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1371.1998043060303s cumulative, 0.14384961128234863s individual

.
current test PASSED/SKIPPED -- test_accept_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1371.2523794174194s cumulative, 0.052575111389160156s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1371.2936897277832s cumulative, 0.04131031036376953s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1371.3499188423157s cumulative, 0.0562291145324707s individual

.
current test PASSED/SKIPPED -- test_responder_raises_unhandled_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1371.4006202220917s cumulative, 0.05070137977600098s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1371.462577342987s cumulative, 0.06195712089538574s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1371.4951393604279s cumulative, 0.0325620174407959s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1371.5297882556915s cumulative, 0.034648895263671875s individual

.
current test PASSED/SKIPPED -- test_path_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1371.5588269233704s cumulative, 0.029038667678833008s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1371.5977528095245s cumulative, 0.038925886154174805s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1371.6542377471924s cumulative, 0.05648493766784668s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1371.6887958049774s cumulative, 0.03455805778503418s individual

.
current test PASSED/SKIPPED -- test_subprotocol_bad_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1371.721667289734s cumulative, 0.03287148475646973s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1371.8216903209686s cumulative, 0.10002303123474121s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1371.9088397026062s cumulative, 0.08714938163757324s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1372.009421825409s cumulative, 0.10058212280273438s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1372.1488802433014s cumulative, 0.13945841789245605s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1372.246262550354s cumulative, 0.0973823070526123s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1372.4576587677002s cumulative, 0.2113962173461914s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1372.6087183952332s cumulative, 0.15105962753295898s individual

.
current test PASSED/SKIPPED -- test_accept_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1372.700472354889s cumulative, 0.09175395965576172s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1372.8118588924408s cumulative, 0.11138653755187988s individual

.
current test PASSED/SKIPPED -- test_missing_ws_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1372.908495426178s cumulative, 0.09663653373718262s individual

.
current test PASSED/SKIPPED -- test_bad_spec_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1372.9914028644562s cumulative, 0.08290743827819824s individual

.
current test PASSED/SKIPPED -- test_unexpected_param in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1373.0898241996765s cumulative, 0.09842133522033691s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1373.1789228916168s cumulative, 0.08909869194030762s individual

.
current test PASSED/SKIPPED -- test_subprotocol in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1373.2550258636475s cumulative, 0.07610297203063965s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1373.3621969223022s cumulative, 0.10717105865478516s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1373.4554271697998s cumulative, 0.0932302474975586s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1373.5474531650543s cumulative, 0.0920259952545166s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1373.6745767593384s cumulative, 0.12712359428405762s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1373.7562880516052s cumulative, 0.0817112922668457s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1373.8440742492676s cumulative, 0.08778619766235352s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1373.9534039497375s cumulative, 0.1093297004699707s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1374.047081232071s cumulative, 0.09367728233337402s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1374.1154997348785s cumulative, 0.06841850280761719s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1374.1806094646454s cumulative, 0.0651097297668457s individual


tests/asgi/test_sse.py .
current test PASSED/SKIPPED -- test_multiple_events_early_disconnect in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_sse.py: 1374.3163936138153s cumulative, 0.13578414916992188s individual

.
current test PASSED/SKIPPED -- test_no_events in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_sse.py: 1374.3807926177979s cumulative, 0.06439900398254395s individual

.
current test PASSED/SKIPPED -- test_no_json_media_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_sse.py: 1374.4480271339417s cumulative, 0.06723451614379883s individual

.
current test PASSED/SKIPPED -- test_use_media_handler_dumps in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_sse.py: 1374.5086119174957s cumulative, 0.06058478355407715s individual

.
current test PASSED/SKIPPED -- test_single_event in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_sse.py: 1374.5673568248749s cumulative, 0.05874490737915039s individual

.
current test PASSED/SKIPPED -- test_multiple_events in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_sse.py: 1374.6635427474976s cumulative, 0.09618592262268066s individual

.
current test PASSED/SKIPPED -- test_invalid_event_values in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_sse.py: 1374.7229480743408s cumulative, 0.05940532684326172s individual

.
current test PASSED/SKIPPED -- test_non_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_sse.py: 1374.7816362380981s cumulative, 0.05868816375732422s individual


tests/test_app_initializers.py .
current test PASSED/SKIPPED -- test_api_media_type_overriding in /home/kaiyaok2/PythonProjects/falcon/tests/test_app_initializers.py: 1374.8826558589935s cumulative, 0.10101962089538574s individual

.
current test PASSED/SKIPPED -- test_api_media_type_overriding in /home/kaiyaok2/PythonProjects/falcon/tests/test_app_initializers.py: 1374.9506967067719s cumulative, 0.06804084777832031s individual


tests/test_buffered_reader.py .
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1374.9796652793884s cumulative, 0.02896857261657715s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1375.014076948166s cumulative, 0.03441166877746582s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1375.0454726219177s cumulative, 0.031395673751831055s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1375.0720200538635s cumulative, 0.02654743194580078s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1375.0954403877258s cumulative, 0.023420333862304688s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1375.1209645271301s cumulative, 0.025524139404296875s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1375.1469616889954s cumulative, 0.025997161865234375s individual

.
current test PASSED/SKIPPED -- test_read_until_delimiter_size_check in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1375.1721506118774s cumulative, 0.025188922882080078s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1375.2043879032135s cumulative, 0.03223729133605957s individual

.
current test PASSED/SKIPPED -- test_readlines_hint in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1375.2296650409698s cumulative, 0.025277137756347656s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1375.2560765743256s cumulative, 0.02641153335571289s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1375.2810316085815s cumulative, 0.024955034255981445s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1375.305414199829s cumulative, 0.024382591247558594s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1375.3312060832977s cumulative, 0.02579188346862793s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1375.3605253696442s cumulative, 0.029319286346435547s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1375.3849635124207s cumulative, 0.024438142776489258s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1375.4130640029907s cumulative, 0.02810049057006836s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1375.4403367042542s cumulative, 0.027272701263427734s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1375.4566767215729s cumulative, 0.016340017318725586s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1375.4821753501892s cumulative, 0.025498628616333008s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1375.5216648578644s cumulative, 0.0394895076751709s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1375.56019282341s cumulative, 0.0385279655456543s individual

.
current test PASSED/SKIPPED -- test_pipe in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1375.5926005840302s cumulative, 0.03240776062011719s individual

.
current test PASSED/SKIPPED -- test_pipe_until in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1379.8278093338013s cumulative, 4.235208749771118s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1379.870106935501s cumulative, 0.0422976016998291s individual

.
current test PASSED/SKIPPED -- test_readlines_hint in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1379.9117617607117s cumulative, 0.04165482521057129s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1379.9704296588898s cumulative, 0.058667898178100586s individual

.
current test PASSED/SKIPPED -- test_pipe_until_without_destination in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1381.6045265197754s cumulative, 1.6340968608856201s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1381.628185749054s cumulative, 0.023659229278564453s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1381.6568167209625s cumulative, 0.028630971908569336s individual

.
current test PASSED/SKIPPED -- test_readlines in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1381.6864366531372s cumulative, 0.029619932174682617s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1381.7175045013428s cumulative, 0.031067848205566406s individual

.
current test PASSED/SKIPPED -- test_readlines_hint in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1381.7464609146118s cumulative, 0.02895641326904297s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1381.7778587341309s cumulative, 0.03139781951904297s individual

.
current test PASSED/SKIPPED -- test_readline in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1381.818755865097s cumulative, 0.04089713096618652s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1381.865479707718s cumulative, 0.04672384262084961s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1381.9009761810303s cumulative, 0.03549647331237793s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1381.9288687705994s cumulative, 0.027892589569091797s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1381.9547007083893s cumulative, 0.025831937789916992s individual

.
current test PASSED/SKIPPED -- test_irregular_large_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1398.7283647060394s cumulative, 16.773663997650146s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1409.5138986110687s cumulative, 10.785533905029297s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1409.5577521324158s cumulative, 0.0438535213470459s individual

.
current test PASSED/SKIPPED -- test_readlines_hint in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1409.6077041625977s cumulative, 0.049952030181884766s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1409.6453394889832s cumulative, 0.03763532638549805s individual

.
current test PASSED/SKIPPED -- test_duck_compatibility_with_io_base in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1409.6807372570038s cumulative, 0.03539776802062988s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1409.7255976200104s cumulative, 0.0448603630065918s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1409.8115458488464s cumulative, 0.08594822883605957s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1409.8668537139893s cumulative, 0.055307865142822266s individual

.
current test PASSED/SKIPPED -- test_peek in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1409.9367973804474s cumulative, 0.06994366645812988s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1409.9803400039673s cumulative, 0.04354262351989746s individual

.
current test PASSED/SKIPPED -- test_bounded_read in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1410.0033514499664s cumulative, 0.023011445999145508s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1410.0310833454132s cumulative, 0.027731895446777344s individual

.
current test PASSED/SKIPPED -- test_exhaust in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1410.0560367107391s cumulative, 0.024953365325927734s individual

.
current test PASSED/SKIPPED -- test_read_until_missing_delimiter in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1410.0816881656647s cumulative, 0.02565145492553711s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1410.1112697124481s cumulative, 0.029581546783447266s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1410.1424810886383s cumulative, 0.031211376190185547s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1410.1759452819824s cumulative, 0.03346419334411621s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1410.209123134613s cumulative, 0.033177852630615234s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1410.238118171692s cumulative, 0.028995037078857422s individual

.
current test PASSED/SKIPPED -- test_irregular_large_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1423.9366543293s cumulative, 13.698536157608032s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1424.088915348053s cumulative, 0.15226101875305176s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1424.264228105545s cumulative, 0.17531275749206543s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1424.4398522377014s cumulative, 0.17562413215637207s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1424.648020029068s cumulative, 0.20816779136657715s individual

.
current test PASSED/SKIPPED -- test_peek_eof in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1424.815033197403s cumulative, 0.16701316833496094s individual

.
current test PASSED/SKIPPED -- test_readline_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1424.9727580547333s cumulative, 0.15772485733032227s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1425.1557354927063s cumulative, 0.18297743797302246s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1425.3025071620941s cumulative, 0.14677166938781738s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1425.3155286312103s cumulative, 0.013021469116210938s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1425.3236277103424s cumulative, 0.008099079132080078s individual

.
current test PASSED/SKIPPED -- test_readlines_hint in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1425.3348269462585s cumulative, 0.011199235916137695s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1425.3527092933655s cumulative, 0.017882347106933594s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1425.371397972107s cumulative, 0.018688678741455078s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1425.389041185379s cumulative, 0.017643213272094727s individual

.
current test PASSED/SKIPPED -- test_fragmented_reads in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1437.31929397583s cumulative, 11.93025279045105s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1437.3483700752258s cumulative, 0.029076099395751953s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1437.3757565021515s cumulative, 0.02738642692565918s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1437.4039900302887s cumulative, 0.02823352813720703s individual

.
current test PASSED/SKIPPED -- test_consume_delimiter in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1437.4326708316803s cumulative, 0.028680801391601562s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1437.4611675739288s cumulative, 0.028496742248535156s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1437.491213798523s cumulative, 0.03004622459411621s individual


tests/test_cython.py F
current test FAILED -- test_imported_from_c_modules in /home/kaiyaok2/PythonProjects/falcon/tests/test_cython.py: 1437.5759446620941s cumulative, 0.08473086357116699s individual

F
current test FAILED -- test_stream_has_private_read in /home/kaiyaok2/PythonProjects/falcon/tests/test_cython.py: 1437.6341111660004s cumulative, 0.05816650390625s individual


tests/test_wsgiref_inputwrapper_with_size.py .
current test PASSED/SKIPPED -- test_resources_can_read_request_stream_during_tests in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgiref_inputwrapper_with_size.py: 1437.6903994083405s cumulative, 0.05628824234008789s individual


tests/test_things_example.py .
current test PASSED/SKIPPED -- test_things_resource_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_things_example.py: 1437.7312273979187s cumulative, 0.04082798957824707s individual


tests/asgi/test_sync.py .
current test PASSED/SKIPPED -- test_sync_helpers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_sync.py: 1461.0295021533966s cumulative, 23.298274755477905s individual


tests/test_media_urlencoded.py .
current test PASSED/SKIPPED -- test_urlencoded_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 1461.1103417873383s cumulative, 0.08083963394165039s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 1461.1748521327972s cumulative, 0.06451034545898438s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 1461.244330406189s cumulative, 0.06947827339172363s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 1461.3026943206787s cumulative, 0.058363914489746094s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form_handler_serialize in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 1461.3276314735413s cumulative, 0.024937152862548828s individual

.
current test PASSED/SKIPPED -- test_empty_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 1461.3919041156769s cumulative, 0.06427264213562012s individual

.
current test PASSED/SKIPPED -- test_empty_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 1461.4475696086884s cumulative, 0.05566549301147461s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 1461.5122821331024s cumulative, 0.0647125244140625s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 1461.5768930912018s cumulative, 0.06461095809936523s individual

.
current test PASSED/SKIPPED -- test_deserialize_invalid_unicode in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 1461.6048452854156s cumulative, 0.027952194213867188s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 1461.664143562317s cumulative, 0.05929827690124512s individual

.
current test PASSED/SKIPPED -- test_deserialize_empty_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 1461.684839963913s cumulative, 0.020696401596069336s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 1461.7515487670898s cumulative, 0.06670880317687988s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 1461.8154032230377s cumulative, 0.06385445594787598s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 1461.8735296726227s cumulative, 0.05812644958496094s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form_handler_serialize in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 1461.9003686904907s cumulative, 0.026839017868041992s individual


tests/asgi/test_scheduled_callbacks.py .
current test PASSED/SKIPPED -- test_callback in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scheduled_callbacks.py: 1461.962972164154s cumulative, 0.06260347366333008s individual

.
current test PASSED/SKIPPED -- test_callback in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scheduled_callbacks.py: 1462.025228023529s cumulative, 0.062255859375s individual

.
current test PASSED/SKIPPED -- test_callback in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scheduled_callbacks.py: 1462.103462934494s cumulative, 0.07823491096496582s individual

.
current test PASSED/SKIPPED -- test_callback in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scheduled_callbacks.py: 1462.1779987812042s cumulative, 0.07453584671020508s individual

.
current test PASSED/SKIPPED -- test_multiple in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scheduled_callbacks.py: 1462.8008484840393s cumulative, 0.622849702835083s individual


tests/test_error_handlers.py .
current test PASSED/SKIPPED -- test_uncaught_python_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1462.8619616031647s cumulative, 0.06111311912536621s individual

.
current test PASSED/SKIPPED -- test_handle_not_defined in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1462.9064252376556s cumulative, 0.0444636344909668s individual

E
current test FAILED -- test_uncaught_python_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1463.5596575737s cumulative, 0.6532323360443115s individual

E
current test FAILED -- test_uncaught_python_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1473.3536536693573s cumulative, 9.793996095657349s individual

E
current test FAILED -- test_uncaught_python_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1476.2062027454376s cumulative, 2.8525490760803223s individual

E
current test FAILED -- test_invalid_add_exception_handler_input in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1477.9705874919891s cumulative, 1.7643847465515137s individual

.
current test PASSED/SKIPPED -- test_handler_multiple_exception_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1478.1293730735779s cumulative, 0.15878558158874512s individual

.
current test PASSED/SKIPPED -- test_error_precedence_subclass in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1478.28573012352s cumulative, 0.1563570499420166s individual

E
current test FAILED -- test_invalid_add_exception_handler_input in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1480.044248342514s cumulative, 1.7585182189941406s individual

E
current test FAILED -- test_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1482.277262687683s cumulative, 2.2330143451690674s individual

.
current test PASSED/SKIPPED -- test_invalid_add_exception_handler_input in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1482.3297142982483s cumulative, 0.05245161056518555s individual

.
current test PASSED/SKIPPED -- test_uncaught_python_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1482.3946301937103s cumulative, 0.06491589546203613s individual

E
current test FAILED -- test_handler_multiple_exception_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1482.7710673809052s cumulative, 0.3764371871948242s individual

.
current test PASSED/SKIPPED -- test_uncaught_error_else in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1482.7877731323242s cumulative, 0.016705751419067383s individual

F
current test FAILED -- test_caught_error_async in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1482.973150730133s cumulative, 0.1853775978088379s individual

.
current test PASSED/SKIPPED -- test_invalid_add_exception_handler_input in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1482.9842405319214s cumulative, 0.011089801788330078s individual

.
current test PASSED/SKIPPED -- test_invalid_add_exception_handler_input in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1482.9916319847107s cumulative, 0.007391452789306641s individual

.
current test PASSED/SKIPPED -- test_handler_multiple_exception_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1483.0052244663239s cumulative, 0.01359248161315918s individual

E
current test FAILED -- test_handler_multiple_exception_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1483.9660630226135s cumulative, 0.9608385562896729s individual

s
current test PASSED/SKIPPED -- test_caught_error_async in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1484.0026032924652s cumulative, 0.03654026985168457s individual

E
current test FAILED -- test_invalid_add_exception_handler_input in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1484.8672001361847s cumulative, 0.8645968437194824s individual

.
current test PASSED/SKIPPED -- test_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1484.9361083507538s cumulative, 0.0689082145690918s individual

.
current test PASSED/SKIPPED -- test_subclass_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1484.9913234710693s cumulative, 0.05521512031555176s individual

.
current test PASSED/SKIPPED -- test_catch_http_no_route_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1485.0529663562775s cumulative, 0.06164288520812988s individual

.
current test PASSED/SKIPPED -- test_handler_single_exception_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1485.121580839157s cumulative, 0.06861448287963867s individual

E
current test FAILED -- test_invalid_add_exception_handler_input in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1494.9333536624908s cumulative, 9.81177282333374s individual

E
current test FAILED -- test_uncaught_error_else in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1495.8282263278961s cumulative, 0.8948726654052734s individual

.
current test PASSED/SKIPPED -- test_uncaught_python_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1495.9054880142212s cumulative, 0.07726168632507324s individual

E
current test FAILED -- test_error_precedence_subclass_order_indifference in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1496.8135287761688s cumulative, 0.9080407619476318s individual

.
current test PASSED/SKIPPED -- test_invalid_add_exception_handler_input in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1496.8720586299896s cumulative, 0.05852985382080078s individual

E
current test FAILED -- test_handle_not_defined in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1497.7648544311523s cumulative, 0.8927958011627197s individual

.
current test PASSED/SKIPPED -- test_converted_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1497.8487226963043s cumulative, 0.08386826515197754s individual

E
current test FAILED -- test_error_precedence_subclass in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1498.8479957580566s cumulative, 0.9992730617523193s individual

.
current test PASSED/SKIPPED -- test_handler_signature_shim in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1498.9010503292084s cumulative, 0.0530545711517334s individual

E
current test FAILED -- test_converted_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1502.2392177581787s cumulative, 3.338167428970337s individual

.
current test PASSED/SKIPPED -- test_handler_must_be_coroutine_for_asgi in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1502.2577419281006s cumulative, 0.018524169921875s individual

E
current test FAILED -- test_handler_single_exception_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1503.8881559371948s cumulative, 1.6304140090942383s individual

.
current test PASSED/SKIPPED -- test_error_precedence_duplicate in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1504.0437541007996s cumulative, 0.15559816360473633s individual

.
current test PASSED/SKIPPED -- test_error_precedence_subclass_order_indifference in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1504.2497010231018s cumulative, 0.2059469223022461s individual

E
current test FAILED -- test_subclass_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1506.5631077289581s cumulative, 2.3134067058563232s individual

.
current test PASSED/SKIPPED -- test_caught_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1506.8415100574493s cumulative, 0.27840232849121094s individual

E
current test FAILED -- test_caught_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1509.5456926822662s cumulative, 2.7041826248168945s individual

F
current test FAILED -- test_catch_http_no_route_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1510.2386178970337s cumulative, 0.692925214767456s individual

E
current test FAILED -- test_error_precedence_duplicate in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1510.6328701972961s cumulative, 0.39425230026245117s individual

E
current test FAILED -- test_data_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1520.7833364009857s cumulative, 10.150466203689575s individual

E
current test FAILED -- test_body_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1521.1225991249084s cumulative, 0.3392627239227295s individual

.
current test PASSED/SKIPPED -- test_media_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1521.1936588287354s cumulative, 0.0710597038269043s individual

E
current test FAILED -- test_media_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1522.0470051765442s cumulative, 0.8533463478088379s individual

.
current test PASSED/SKIPPED -- test_data_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1522.109355688095s cumulative, 0.06235051155090332s individual

.
current test PASSED/SKIPPED -- test_body_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1522.1702120304108s cumulative, 0.06085634231567383s individual

E
current test FAILED -- test_media_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1523.2225153446198s cumulative, 1.0523033142089844s individual

.
current test PASSED/SKIPPED -- test_data_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1523.296281337738s cumulative, 0.07376599311828613s individual

E
current test FAILED -- test_body_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1524.1328556537628s cumulative, 0.8365743160247803s individual

.
current test PASSED/SKIPPED -- test_body_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1524.2047820091248s cumulative, 0.07192635536193848s individual

.
current test PASSED/SKIPPED -- test_media_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1524.2682511806488s cumulative, 0.06346917152404785s individual

E
current test FAILED -- test_data_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1525.2379143238068s cumulative, 0.969663143157959s individual


tests/asgi/test_buffered_reader.py .
current test PASSED/SKIPPED -- test_placeholder_methods in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1525.2609593868256s cumulative, 0.023045063018798828s individual

.
current test PASSED/SKIPPED -- test_delimit in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1525.291199684143s cumulative, 0.030240297317504883s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1525.326072692871s cumulative, 0.034873008728027344s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1525.3533980846405s cumulative, 0.02732539176940918s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1525.3807580471039s cumulative, 0.027359962463378906s individual

.
current test PASSED/SKIPPED -- test_irregular_large_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1541.9757041931152s cumulative, 16.594946146011353s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1542.0132150650024s cumulative, 0.03751087188720703s individual

.
current test PASSED/SKIPPED -- test_peek in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1542.0421657562256s cumulative, 0.02895069122314453s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1542.0881004333496s cumulative, 0.04593467712402344s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1542.131272315979s cumulative, 0.04317188262939453s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1542.1674101352692s cumulative, 0.03613781929016113s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1542.2009336948395s cumulative, 0.0335235595703125s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1542.2399425506592s cumulative, 0.03900885581970215s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1542.2697479724884s cumulative, 0.029805421829223633s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1542.3038141727448s cumulative, 0.034066200256347656s individual

.
current test PASSED/SKIPPED -- test_read_until_with_buffer_edge_case in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1542.3359882831573s cumulative, 0.032174110412597656s individual

.
current test PASSED/SKIPPED -- test_peek in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1542.3695876598358s cumulative, 0.0335993766784668s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1542.3970079421997s cumulative, 0.0274202823638916s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1542.4397287368774s cumulative, 0.042720794677734375s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1542.471692085266s cumulative, 0.031963348388671875s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1542.5055503845215s cumulative, 0.033858299255371094s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1542.5346727371216s cumulative, 0.029122352600097656s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1542.559671163559s cumulative, 0.02499842643737793s individual

.
current test PASSED/SKIPPED -- test_peek in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1542.5847578048706s cumulative, 0.025086641311645508s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1542.6181745529175s cumulative, 0.033416748046875s individual

.
current test PASSED/SKIPPED -- test_pipe_until_delimiter_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1542.643054485321s cumulative, 0.024879932403564453s individual

.
current test PASSED/SKIPPED -- test_exhaust in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1542.66920876503s cumulative, 0.026154279708862305s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1542.6960093975067s cumulative, 0.02680063247680664s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1542.7297756671906s cumulative, 0.03376626968383789s individual

.
current test PASSED/SKIPPED -- test_pipe in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1542.7564134597778s cumulative, 0.026637792587280273s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1542.7835230827332s cumulative, 0.027109622955322266s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1542.80774974823s cumulative, 0.024226665496826172s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1542.8205387592316s cumulative, 0.012789011001586914s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1542.836930513382s cumulative, 0.016391754150390625s individual

.
current test PASSED/SKIPPED -- test_irregular_large_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1555.3817014694214s cumulative, 12.544770956039429s individual

.
current test PASSED/SKIPPED -- test_peek in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1555.4729707241058s cumulative, 0.09126925468444824s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1555.573424577713s cumulative, 0.10045385360717773s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1555.6731901168823s cumulative, 0.09976553916931152s individual

.
current test PASSED/SKIPPED -- test_small_reads in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1559.0250794887543s cumulative, 3.3518893718719482s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1560.1222939491272s cumulative, 1.0972144603729248s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1560.331728219986s cumulative, 0.20943427085876465s individual

.
current test PASSED/SKIPPED -- test_varying_read_size in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1589.7208893299103s cumulative, 29.389161109924316s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1590.876175403595s cumulative, 1.1552860736846924s individual

.
current test PASSED/SKIPPED -- test_read in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1590.9010527133942s cumulative, 0.024877309799194336s individual

.
current test PASSED/SKIPPED -- test_delimit in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1590.9262037277222s cumulative, 0.02515101432800293s individual

.
current test PASSED/SKIPPED -- test_varying_read_size in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1607.2290580272675s cumulative, 16.302854299545288s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1607.2676985263824s cumulative, 0.038640499114990234s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1607.3081729412079s cumulative, 0.04047441482543945s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1607.3553614616394s cumulative, 0.047188520431518555s individual

.
current test PASSED/SKIPPED -- test_iteration_started in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1607.3893537521362s cumulative, 0.03399229049682617s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1607.4273374080658s cumulative, 0.03798365592956543s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1607.4817380905151s cumulative, 0.05440068244934082s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1607.526406288147s cumulative, 0.04466819763183594s individual

.
current test PASSED/SKIPPED -- test_readall in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1607.6048369407654s cumulative, 0.0784306526184082s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1607.6771504878998s cumulative, 0.07231354713439941s individual

.
current test PASSED/SKIPPED -- test_delimit in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1607.7228016853333s cumulative, 0.04565119743347168s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1607.7766795158386s cumulative, 0.053877830505371094s individual

.
current test PASSED/SKIPPED -- test_peek_at_eof in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1607.8159778118134s cumulative, 0.039298295974731445s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1607.8637926578522s cumulative, 0.04781484603881836s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1607.9025542736053s cumulative, 0.03876161575317383s individual

.
current test PASSED/SKIPPED -- test_read in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1607.9648921489716s cumulative, 0.06233787536621094s individual

.
current test PASSED/SKIPPED -- test_delimit in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1608.0759131908417s cumulative, 0.11102104187011719s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1608.1358485221863s cumulative, 0.05993533134460449s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1608.1734347343445s cumulative, 0.037586212158203125s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1608.2100541591644s cumulative, 0.03661942481994629s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1608.2560682296753s cumulative, 0.04601407051086426s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1608.2900490760803s cumulative, 0.0339808464050293s individual

.
current test PASSED/SKIPPED -- test_small_reads_with_delimiter in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1613.7944271564484s cumulative, 5.504378080368042s individual

.
current test PASSED/SKIPPED -- test_invalid_delimiter_length in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1614.4173119068146s cumulative, 0.6228847503662109s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1614.4716928005219s cumulative, 0.05438089370727539s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1614.4884684085846s cumulative, 0.01677560806274414s individual

.
current test PASSED/SKIPPED -- test_delimit in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1614.5004999637604s cumulative, 0.01203155517578125s individual

.
current test PASSED/SKIPPED -- test_read in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1614.5168104171753s cumulative, 0.016310453414916992s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1614.5263738632202s cumulative, 0.009563446044921875s individual

.
current test PASSED/SKIPPED -- test_aiter_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1614.5327665805817s cumulative, 0.006392717361450195s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1614.6283218860626s cumulative, 0.09555530548095703s individual

.
current test PASSED/SKIPPED -- test_readall in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1614.70578622818s cumulative, 0.07746434211730957s individual

.
current test PASSED/SKIPPED -- test_read in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1614.798808336258s cumulative, 0.09302210807800293s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1614.9015107154846s cumulative, 0.10270237922668457s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1615.0244209766388s cumulative, 0.1229102611541748s individual

.
current test PASSED/SKIPPED -- test_basic_aiter in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1615.1372258663177s cumulative, 0.11280488967895508s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1615.250706911087s cumulative, 0.11348104476928711s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1615.3406455516815s cumulative, 0.08993864059448242s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1615.4468777179718s cumulative, 0.1062321662902832s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1615.5701866149902s cumulative, 0.12330889701843262s individual

.
current test PASSED/SKIPPED -- test_peek in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1615.6544547080994s cumulative, 0.08426809310913086s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1615.7556071281433s cumulative, 0.10115242004394531s individual

.
current test PASSED/SKIPPED -- test_readall in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1615.8339779376984s cumulative, 0.07837080955505371s individual

.
current test PASSED/SKIPPED -- test_peek in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 1615.9754619598389s cumulative, 0.14148402214050293s individual


tests/test_uri_templates_legacy.py .
current test PASSED/SKIPPED -- test_no_fields in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1616.0883598327637s cumulative, 0.11289787292480469s individual

.
current test PASSED/SKIPPED -- test_template_may_not_contain_double_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1616.1820230484009s cumulative, 0.09366321563720703s individual

.
current test PASSED/SKIPPED -- test_template_may_not_contain_double_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1616.283937215805s cumulative, 0.1019141674041748s individual

.
current test PASSED/SKIPPED -- test_no_fields in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1616.382827281952s cumulative, 0.09889006614685059s individual

.
current test PASSED/SKIPPED -- test_template_may_not_contain_double_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1616.4629986286163s cumulative, 0.08017134666442871s individual

.
current test PASSED/SKIPPED -- test_one_field_with_prefixed_digits in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1616.5569896697998s cumulative, 0.09399104118347168s individual

.
current test PASSED/SKIPPED -- test_root in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1616.7673935890198s cumulative, 0.2104039192199707s individual

.
current test PASSED/SKIPPED -- test_string_type_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1617.0137872695923s cumulative, 0.24639368057250977s individual

.
current test PASSED/SKIPPED -- test_template_must_start_with_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1617.2699251174927s cumulative, 0.2561378479003906s individual

.
current test PASSED/SKIPPED -- test_one_field in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1617.6178624629974s cumulative, 0.34793734550476074s individual

.
current test PASSED/SKIPPED -- test_deprecated_warning in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1617.7495777606964s cumulative, 0.1317152976989746s individual

.
current test PASSED/SKIPPED -- test_template_must_start_with_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1617.8579714298248s cumulative, 0.10839366912841797s individual

.
current test PASSED/SKIPPED -- test_one_field_with_digits in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1617.9256720542908s cumulative, 0.06770062446594238s individual

.
current test PASSED/SKIPPED -- test_two_fields in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1617.9839224815369s cumulative, 0.05825042724609375s individual

.
current test PASSED/SKIPPED -- test_template_may_not_contain_double_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1618.008453130722s cumulative, 0.024530649185180664s individual

.
current test PASSED/SKIPPED -- test_string_type_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1618.0610167980194s cumulative, 0.05256366729736328s individual

.
current test PASSED/SKIPPED -- test_malformed_field in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1618.1125342845917s cumulative, 0.051517486572265625s individual

.
current test PASSED/SKIPPED -- test_template_may_not_contain_double_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1618.1325023174286s cumulative, 0.019968032836914062s individual

.
current test PASSED/SKIPPED -- test_template_may_not_contain_double_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1618.1497292518616s cumulative, 0.0172269344329834s individual

.
current test PASSED/SKIPPED -- test_two_fields in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1618.1642994880676s cumulative, 0.014570236206054688s individual

.
current test PASSED/SKIPPED -- test_no_fields in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1618.1821706295013s cumulative, 0.01787114143371582s individual

.
current test PASSED/SKIPPED -- test_three_fields in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1618.1944994926453s cumulative, 0.012328863143920898s individual


tests/test_redirects.py .
current test PASSED/SKIPPED -- test_redirect_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 1618.221757888794s cumulative, 0.02725839614868164s individual

.
current test PASSED/SKIPPED -- test_redirect_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 1618.272409439087s cumulative, 0.05065155029296875s individual

E
current test FAILED -- test_redirect in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 1618.4602591991425s cumulative, 0.187849760055542s individual

E
current test FAILED -- test_redirect in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 1618.7334747314453s cumulative, 0.27321553230285645s individual

E
current test FAILED -- test_redirect in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 1619.5124580860138s cumulative, 0.7789833545684814s individual

E
current test FAILED -- test_redirect_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 1620.4904820919037s cumulative, 0.9780240058898926s individual

E
current test FAILED -- test_redirect_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 1621.201374053955s cumulative, 0.7108919620513916s individual

.
current test PASSED/SKIPPED -- test_redirect in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 1621.2763919830322s cumulative, 0.07501792907714844s individual

E
current test FAILED -- test_redirect in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 1621.9522950649261s cumulative, 0.6759030818939209s individual

.
current test PASSED/SKIPPED -- test_redirect_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 1622.009727716446s cumulative, 0.05743265151977539s individual

E
current test FAILED -- test_redirect_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 1622.621318101883s cumulative, 0.6115903854370117s individual

E
current test FAILED -- test_redirect_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 1623.1746790409088s cumulative, 0.5533609390258789s individual

.
current test PASSED/SKIPPED -- test_redirect in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 1623.2226731777191s cumulative, 0.047994136810302734s individual

.
current test PASSED/SKIPPED -- test_redirect in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 1623.2573773860931s cumulative, 0.03470420837402344s individual

E
current test FAILED -- test_redirect_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 1623.7897517681122s cumulative, 0.532374382019043s individual

.
current test PASSED/SKIPPED -- test_redirect_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 1623.8254697322845s cumulative, 0.03571796417236328s individual

.
current test PASSED/SKIPPED -- test_redirect in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 1623.9300556182861s cumulative, 0.10458588600158691s individual

.
current test PASSED/SKIPPED -- test_redirect_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 1624.13929605484s cumulative, 0.20924043655395508s individual

E
current test FAILED -- test_redirect in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 1633.3957209587097s cumulative, 9.256424903869629s individual

.
current test PASSED/SKIPPED -- test_redirect in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 1633.4818305969238s cumulative, 0.08610963821411133s individual


tests/test_default_router.py .
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1633.937922000885s cumulative, 0.45609140396118164s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1634.2062644958496s cumulative, 0.2683424949645996s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1634.6526474952698s cumulative, 0.446382999420166s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1635.060350894928s cumulative, 0.4077033996582031s individual

.
current test PASSED/SKIPPED -- test_dead_segment in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1635.4516441822052s cumulative, 0.3912932872772217s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1635.6455438137054s cumulative, 0.19389963150024414s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1635.7804231643677s cumulative, 0.13487935066223145s individual

.
current test PASSED/SKIPPED -- test_converters in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1635.9857711791992s cumulative, 0.20534801483154297s individual

.
current test PASSED/SKIPPED -- test_not_str in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1636.094557762146s cumulative, 0.10878658294677734s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1636.3069069385529s cumulative, 0.21234917640686035s individual

.
current test PASSED/SKIPPED -- test_converters in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1636.6339178085327s cumulative, 0.3270108699798584s individual

.
current test PASSED/SKIPPED -- test_literal in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1636.937756538391s cumulative, 0.30383872985839844s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1637.1319212913513s cumulative, 0.19416475296020508s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1637.2833032608032s cumulative, 0.1513819694519043s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1637.5914850234985s cumulative, 0.3081817626953125s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1637.9764516353607s cumulative, 0.3849666118621826s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1638.122483253479s cumulative, 0.14603161811828613s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1638.2931983470917s cumulative, 0.1707150936126709s individual

.
current test PASSED/SKIPPED -- test_dead_segment in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1638.5563478469849s cumulative, 0.2631494998931885s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1638.696702003479s cumulative, 0.14035415649414062s individual

.
current test PASSED/SKIPPED -- test_user_regression_versioned_url in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1638.841190814972s cumulative, 0.14448881149291992s individual

.
current test PASSED/SKIPPED -- test_options_converters_update in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1639.5030419826508s cumulative, 0.661851167678833s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1640.1631422042847s cumulative, 0.6601002216339111s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1640.3559935092926s cumulative, 0.19285130500793457s individual

.
current test PASSED/SKIPPED -- test_options_converters_invalid_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1640.5639283657074s cumulative, 0.20793485641479492s individual

.
current test PASSED/SKIPPED -- test_non_conflict in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1640.627022743225s cumulative, 0.0630943775177002s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1640.6493945121765s cumulative, 0.022371768951416016s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1640.715986251831s cumulative, 0.06659173965454102s individual

.
current test PASSED/SKIPPED -- test_capture_path_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1640.7360246181488s cumulative, 0.020038366317749023s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1640.752358675003s cumulative, 0.016334056854248047s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1640.768622636795s cumulative, 0.016263961791992188s individual

.
current test PASSED/SKIPPED -- test_duplicate_field_names in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1640.7804679870605s cumulative, 0.01184535026550293s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1640.7997586727142s cumulative, 0.019290685653686523s individual

.
current test PASSED/SKIPPED -- test_literal_segment in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1640.8638472557068s cumulative, 0.06408858299255371s individual

.
current test PASSED/SKIPPED -- test_params_in_non_taken_branches in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1640.8992156982422s cumulative, 0.03536844253540039s individual

.
current test PASSED/SKIPPED -- test_params_in_non_taken_branches in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1640.9286108016968s cumulative, 0.029395103454589844s individual

.
current test PASSED/SKIPPED -- test_match_entire_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1640.9396669864655s cumulative, 0.011056184768676758s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1640.993766784668s cumulative, 0.05409979820251465s individual

.
current test PASSED/SKIPPED -- test_converters in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1641.0454289913177s cumulative, 0.05166220664978027s individual

.
current test PASSED/SKIPPED -- test_duplicate_field_names in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1641.0509057044983s cumulative, 0.005476713180541992s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1641.061770915985s cumulative, 0.010865211486816406s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1641.071712732315s cumulative, 0.009941816329956055s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1641.0824642181396s cumulative, 0.010751485824584961s individual

.
current test PASSED/SKIPPED -- test_not_str in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1641.0959718227386s cumulative, 0.013507604598999023s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1641.148838043213s cumulative, 0.052866220474243164s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1641.1623032093048s cumulative, 0.013465166091918945s individual

.
current test PASSED/SKIPPED -- test_complex_alt in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1641.2126100063324s cumulative, 0.05030679702758789s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1641.247403383255s cumulative, 0.03479337692260742s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1641.2569074630737s cumulative, 0.009504079818725586s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1641.2702655792236s cumulative, 0.013358116149902344s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1641.2806775569916s cumulative, 0.010411977767944336s individual

.
current test PASSED/SKIPPED -- test_converters in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1641.3419659137726s cumulative, 0.06128835678100586s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1641.4248282909393s cumulative, 0.08286237716674805s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1641.5795140266418s cumulative, 0.15468573570251465s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1641.6532151699066s cumulative, 0.07370114326477051s individual

.
current test PASSED/SKIPPED -- test_converters in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1641.841183423996s cumulative, 0.18796825408935547s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1641.9029307365417s cumulative, 0.06174731254577637s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1641.9894104003906s cumulative, 0.08647966384887695s individual

.
current test PASSED/SKIPPED -- test_match_entire_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1642.0306334495544s cumulative, 0.04122304916381836s individual

.
current test PASSED/SKIPPED -- test_params_in_non_taken_branches in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1642.1025972366333s cumulative, 0.07196378707885742s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1642.155345916748s cumulative, 0.052748680114746094s individual

.
current test PASSED/SKIPPED -- test_converters_with_invalid_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1642.257311820984s cumulative, 0.10196590423583984s individual

.
current test PASSED/SKIPPED -- test_capture_path_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1642.3161306381226s cumulative, 0.058818817138671875s individual

.
current test PASSED/SKIPPED -- test_not_str in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1642.3608849048615s cumulative, 0.0447542667388916s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1642.5274901390076s cumulative, 0.16660523414611816s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1642.6366136074066s cumulative, 0.10912346839904785s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1642.8570227622986s cumulative, 0.22040915489196777s individual

.
current test PASSED/SKIPPED -- test_params_in_non_taken_branches in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1642.9411244392395s cumulative, 0.08410167694091797s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1643.1120738983154s cumulative, 0.17094945907592773s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1643.2834088802338s cumulative, 0.17133498191833496s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1643.6273307800293s cumulative, 0.3439218997955322s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1643.7325916290283s cumulative, 0.10526084899902344s individual

.
current test PASSED/SKIPPED -- test_options_converters_invalid_name_on_update in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1643.8336832523346s cumulative, 0.10109162330627441s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1643.915815114975s cumulative, 0.08213186264038086s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1644.090503692627s cumulative, 0.17468857765197754s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1644.1486206054688s cumulative, 0.058116912841796875s individual

.
current test PASSED/SKIPPED -- test_match_entire_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1644.2026016712189s cumulative, 0.05398106575012207s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1644.2577252388s cumulative, 0.05512356758117676s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1644.3407504558563s cumulative, 0.08302521705627441s individual

.
current test PASSED/SKIPPED -- test_options_converters_invalid_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1644.4388399124146s cumulative, 0.09808945655822754s individual

.
current test PASSED/SKIPPED -- test_not_str in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1644.4863729476929s cumulative, 0.04753303527832031s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1644.5785675048828s cumulative, 0.0921945571899414s individual

.
current test PASSED/SKIPPED -- test_converters_with_invalid_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1644.7124860286713s cumulative, 0.13391852378845215s individual

.
current test PASSED/SKIPPED -- test_conflict in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1644.8129394054413s cumulative, 0.10045337677001953s individual

.
current test PASSED/SKIPPED -- test_params_in_non_taken_branches in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1644.8922646045685s cumulative, 0.07932519912719727s individual

.
current test PASSED/SKIPPED -- test_options_converters_invalid_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1644.9701364040375s cumulative, 0.07787179946899414s individual

.
current test PASSED/SKIPPED -- test_conflict in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1645.0502529144287s cumulative, 0.08011651039123535s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1645.0935144424438s cumulative, 0.04326152801513672s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1645.2715442180634s cumulative, 0.17802977561950684s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1645.3353457450867s cumulative, 0.06380152702331543s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1645.4217846393585s cumulative, 0.08643889427185059s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1645.5289771556854s cumulative, 0.1071925163269043s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1645.5630989074707s cumulative, 0.03412175178527832s individual

.
current test PASSED/SKIPPED -- test_complex_alt in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1645.6456484794617s cumulative, 0.0825495719909668s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1645.8186614513397s cumulative, 0.17301297187805176s individual

.
current test PASSED/SKIPPED -- test_options_converters_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1645.9006342887878s cumulative, 0.08197283744812012s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1645.9300963878632s cumulative, 0.029462099075317383s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1646.2698752880096s cumulative, 0.3397789001464844s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1646.7236030101776s cumulative, 0.45372772216796875s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1646.8716671466827s cumulative, 0.14806413650512695s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1647.1470041275024s cumulative, 0.27533698081970215s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1647.390623807907s cumulative, 0.24361968040466309s individual

.
current test PASSED/SKIPPED -- test_not_str in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1647.6567568778992s cumulative, 0.26613306999206543s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1647.9574933052063s cumulative, 0.3007364273071289s individual

.
current test PASSED/SKIPPED -- test_conflict in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1648.001826763153s cumulative, 0.044333457946777344s individual

.
current test PASSED/SKIPPED -- test_match_entire_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1648.0213787555695s cumulative, 0.019551992416381836s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1648.0871036052704s cumulative, 0.06572484970092773s individual

.
current test PASSED/SKIPPED -- test_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1648.1612131595612s cumulative, 0.07410955429077148s individual

.
current test PASSED/SKIPPED -- test_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1648.3427298069s cumulative, 0.1815166473388672s individual

.
current test PASSED/SKIPPED -- test_options_converters_invalid_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1648.3833651542664s cumulative, 0.04063534736633301s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1648.42063498497s cumulative, 0.03726983070373535s individual

.
current test PASSED/SKIPPED -- test_non_conflict in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1648.497563123703s cumulative, 0.07692813873291016s individual

.
current test PASSED/SKIPPED -- test_converters in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1648.6861546039581s cumulative, 0.18859148025512695s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1648.9244549274445s cumulative, 0.23830032348632812s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1649.0275933742523s cumulative, 0.10313844680786133s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1649.128487110138s cumulative, 0.10089373588562012s individual

.
current test PASSED/SKIPPED -- test_converters_malformed_specification in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1649.2395548820496s cumulative, 0.1110677719116211s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1649.2982425689697s cumulative, 0.058687686920166016s individual



def find(path, return_values, patterns, converters, params):
    path_len = len(path)
    if path_len > 0:
        if path[0] == 'repos':
            if path_len > 1:
                if path_len > 2:
                    if path_len > 3:
                        if path[3] == 'commits':
                            if path_len == 4:
                                params['org'] = path[1]
                                params['repo'] = path[2]
                                return return_values[3]
                            return None
                        if path[3] == 'compare':
                            if path_len > 4:
                                if path[4] == 'all':
                                    if path_len == 5:
                                        params['org'] = path[1]
                                        params['repo'] = path[2]
                                        return return_values[4]
                                match = patterns[0].match(path[4])  # ^(?P<usr0>.+):(?P<branch0>.+)\.\.\.(?P<usr1>.+):(?P<branch1>.+)$
                                if match is not None:
                                    dict_match_3 = match.groupdict()
                                    if path_len > 5:
                                        if path[5] == 'full':
                                            if path_len == 6:
                                                params['org'] = path[1]
                                                params['repo'] = path[2]
                                                params.update(dict_match_3)
                                                return return_values[6]
                                        if path[5] == 'part':
                                            if path_len == 6:
                                                params['org'] = path[1]
                                                params['repo'] = path[2]
                                                params.update(dict_match_3)
                                                return return_values[7]
                                    if path_len == 5:
                                        params['org'] = path[1]
                                        params['repo'] = path[2]
                                        params.update(dict_match_3)
                                        return return_values[5]
                                match = patterns[1].match(path[4])  # ^(?P<usr0>.+):(?P<branch0>.+)$
                                if match is not None:
                                    dict_match_3 = match.groupdict()
                                    if path_len > 5:
                                        if path[5] == 'full':
                                            if path_len == 6:
                                                params['org'] = path[1]
                                                params['repo'] = path[2]
                                                params.update(dict_match_3)
                                                return return_values[9]
                                    if path_len == 5:
                                        params['org'] = path[1]
                                        params['repo'] = path[2]
                                        params.update(dict_match_3)
                                        return return_values[8]
                            return None
                        return None
                    if path_len == 3:
                        params['org'] = path[1]
                        params['repo'] = path[2]
                        return return_values[2]
                    return None
                if path_len == 2:
                    params['org'] = path[1]
                    return return_values[1]
                return None
            if path_len == 1:
                return return_values[0]
            return None
        if path[0] == 'teams':
            if path_len > 1:
                if path[1] == 'default':
                    if path_len > 2:
                        if path[2] == 'members':
                            if path_len > 3:
                                if path[3] == 'thing':
                                    if path_len == 4:
                                        return return_values[11]
                    if path_len == 2:
                        return return_values[10]
                if path_len > 2:
                    if path[2] == 'members':
                        if path_len == 3:
                            params['id'] = path[1]
                            return return_values[13]
                if path_len == 2:
                    params['id'] = path[1]
                    return return_values[12]
            return None
        if path[0] == 'user':
            if path_len > 1:
                if path[1] == 'memberships':
                    if path_len == 2:
                        return return_values[14]
                    return None
                return None
            return None
        if path[0] == 'emojis':
            if path_len > 1:
                if path[1] == 'signs':
                    if path_len > 2:
                        if path[2] == '0':
                            if path_len == 3:
                                return return_values[16]
                        if path[2] == '42':
                            if path_len > 3:
                                if path[3] == 'small.jpg':
                                    if path_len == 4:
                                        return return_values[18]
                            if path_len == 3:
                                return return_values[17]
                        if path[2] == '78':
                            if path_len > 3:
                                if path[3] == 'small.png':
                                    if path_len == 4:
                                        return return_values[19]
                                if path[3] == 'small(png)':
                                    if path_len == 4:
                                        return return_values[20]
                                if path[3] == 'small_png':
                                    if path_len == 4:
                                        return return_values[21]
                        if path_len == 3:
                            params['id'] = path[2]
                            return return_values[22]
                    return None
                return None
            if path_len == 1:
                return return_values[15]
            return None
        if path[0] == 'images':
            if path_len > 1:
                match = patterns[2].match(path[1])  # ^(?P<id>.+)\.gif$
                if match is not None:
                    dict_match_1 = match.groupdict()
                    if path_len == 2:
                        params.update(dict_match_1)
                        return return_values[23]
                    return None
                return None
            return None
        if path[0] == 'gists':
            if path_len > 1:
                if path[1] == 'first':
                    if path_len == 2:
                        return return_values[24]
                if path_len > 2:
                    if path[2] == 'raw':
                        if path_len == 3:
                            params['id'] = path[1]
                            return return_values[25]
                    if path_len == 3:
                        params['id'] = path[1]
                        params['representation'] = path[2]
                        return return_values[26]
            return None
        if path[0] == 'item':
            if path_len > 1:
                if path_len == 2:
                    params['q'] = path[1]
                    return return_values[27]
                return None
            return None
        if path[0] == 'cvt':
            if path_len > 1:
                if path[1] == 'teams':
                    if path_len > 2:
                        if path[2] == 'default':
                            if path_len > 3:
                                if path[3] == 'members':
                                    if path_len > 4:
                                        match = patterns[3].match(path[4])  # ^(?P<id>.+)-(?P<tenure>.+)$
                                        if match is not None:
                                            groups = match.groupdict()
                                            fragment = groups.pop('id')
                                            field_value_1 = converters[0].convert(fragment)
                                            if field_value_1 is not None:
                                                fragment = groups.pop('tenure')
                                                field_value_2 = converters[1].convert(fragment)
                                                if field_value_2 is not None:
                                                    if path_len == 5:
                                                        params['id'] = field_value_1
                                                        params['tenure'] = field_value_2
                                                        return return_values[29]
                            if path_len == 3:
                                return return_values[28]
                        fragment = path[2]
                        field_value_1 = converters[2].convert(fragment)
                        if field_value_1 is not None:
                            if path_len > 3:
                                if path[3] == 'members':
                                    if path_len == 4:
                                        params['id'] = field_value_1
                                        return return_values[31]
                            if path_len == 3:
                                params['id'] = field_value_1
                                return return_values[30]
                    return None
                if path[1] == 'repos':
                    if path_len > 2:
                        if path_len > 3:
                            if path_len > 4:
                                if path[4] == 'compare':
                                    if path_len > 5:
                                        match = patterns[4].match(path[5])  # ^(?P<usr0>.+):(?P<branch0>.+)\.\.\.(?P<usr1>.+):(?P<branch1>.+)$
                                        if match is not None:
                                            groups = match.groupdict()
                                            fragment = groups.pop('branch0')
                                            field_value_3 = converters[3].convert(fragment)
                                            if field_value_3 is not None:
                                                fragment = groups.pop('branch1')
                                                field_value_4 = converters[4].convert(fragment)
                                                if field_value_4 is not None:
                                                    dict_groups_5 = groups
                                                    if path_len > 6:
                                                        if path[6] == 'part':
                                                            if path_len == 7:
                                                                params['org'] = path[2]
                                                                params['repo'] = path[3]
                                                                params['branch0'] = field_value_3
                                                                params['branch1'] = field_value_4
                                                                params.update(dict_groups_5)
                                                                return return_values[32]
                                        match = patterns[5].match(path[5])  # ^(?P<usr0>.+):(?P<branch0>.+)$
                                        if match is not None:
                                            groups = match.groupdict()
                                            fragment = groups.pop('branch0')
                                            field_value_3 = converters[5].convert(fragment)
                                            if field_value_3 is not None:
                                                dict_groups_4 = groups
                                                if path_len > 6:
                                                    if path[6] == 'full':
                                                        if path_len == 7:
                                                            params['org'] = path[2]
                                                            params['repo'] = path[3]
                                                            params['branch0'] = field_value_3
                                                            params.update(dict_groups_4)
                                                            return return_values[34]
                                                if path_len == 6:
                                                    params['org'] = path[2]
                                                    params['repo'] = path[3]
                                                    params['branch0'] = field_value_3
                                                    params.update(dict_groups_4)
                                                    return return_values[33]
                                    return None
                                return None
                            return None
                        return None
                    return None
                return None
            return None
        return None
    return None

.
current test PASSED/SKIPPED -- test_print_src in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1649.489780664444s cumulative, 0.19153809547424316s individual

.
current test PASSED/SKIPPED -- test_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1649.7386219501495s cumulative, 0.2488412857055664s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1649.8663058280945s cumulative, 0.1276838779449463s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1650.0887339115143s cumulative, 0.2224280834197998s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1650.221749305725s cumulative, 0.13301539421081543s individual

.
current test PASSED/SKIPPED -- test_capture_path_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1650.2818558216095s cumulative, 0.060106515884399414s individual

.
current test PASSED/SKIPPED -- test_converters_malformed_specification in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1650.4206409454346s cumulative, 0.13878512382507324s individual

.
current test PASSED/SKIPPED -- test_not_str in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1650.4932980537415s cumulative, 0.07265710830688477s individual

.
current test PASSED/SKIPPED -- test_malformed_pattern in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1650.6812460422516s cumulative, 0.18794798851013184s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1650.8668446540833s cumulative, 0.18559861183166504s individual

.
current test PASSED/SKIPPED -- test_malformed_pattern in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1651.0617499351501s cumulative, 0.19490528106689453s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1651.226381778717s cumulative, 0.16463184356689453s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1651.31050157547s cumulative, 0.08411979675292969s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1651.471118927002s cumulative, 0.16061735153198242s individual

.
current test PASSED/SKIPPED -- test_single_character_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1651.638159275055s cumulative, 0.16704034805297852s individual

.
current test PASSED/SKIPPED -- test_converters_with_invalid_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1651.7580258846283s cumulative, 0.11986660957336426s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1651.9249687194824s cumulative, 0.16694283485412598s individual

.
current test PASSED/SKIPPED -- test_duplicate_field_names in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1651.9634811878204s cumulative, 0.038512468338012695s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1652.2039513587952s cumulative, 0.24047017097473145s individual

.
current test PASSED/SKIPPED -- test_conflict in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1652.315618276596s cumulative, 0.11166691780090332s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1652.4241406917572s cumulative, 0.10852241516113281s individual

.
current test PASSED/SKIPPED -- test_multivar in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1652.602848291397s cumulative, 0.17870759963989258s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1652.7811424732208s cumulative, 0.17829418182373047s individual

.
current test PASSED/SKIPPED -- test_override in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1652.9524290561676s cumulative, 0.17128658294677734s individual

.
current test PASSED/SKIPPED -- test_non_conflict in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1653.0535373687744s cumulative, 0.10110831260681152s individual

.
current test PASSED/SKIPPED -- test_options_converters_invalid_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1653.2010881900787s cumulative, 0.1475508213043213s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1653.2936654090881s cumulative, 0.09257721900939941s individual

.
current test PASSED/SKIPPED -- test_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1653.4402096271515s cumulative, 0.1465442180633545s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1653.5125353336334s cumulative, 0.0723257064819336s individual

.
current test PASSED/SKIPPED -- test_options_converters_update in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1653.6660594940186s cumulative, 0.15352416038513184s individual

.
current test PASSED/SKIPPED -- test_capture_path_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1653.7067704200745s cumulative, 0.0407109260559082s individual

.
current test PASSED/SKIPPED -- test_user_regression_recipes in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1653.7595796585083s cumulative, 0.05280923843383789s individual

.
current test PASSED/SKIPPED -- test_options_converters_invalid_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1654.0304162502289s cumulative, 0.27083659172058105s individual

.
current test PASSED/SKIPPED -- test_capture_path_no_children in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1654.2150423526764s cumulative, 0.18462610244750977s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1655.0142121315002s cumulative, 0.7991697788238525s individual

.
current test PASSED/SKIPPED -- test_dead_segment in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1655.6366000175476s cumulative, 0.6223878860473633s individual

.
current test PASSED/SKIPPED -- test_capture_path_no_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1655.7536232471466s cumulative, 0.11702322959899902s individual

.
current test PASSED/SKIPPED -- test_root_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1655.7751743793488s cumulative, 0.021551132202148438s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1655.8483197689056s cumulative, 0.07314538955688477s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1656.0063691139221s cumulative, 0.1580493450164795s individual

.
current test PASSED/SKIPPED -- test_options_converters_invalid_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1656.196237564087s cumulative, 0.18986845016479492s individual

.
current test PASSED/SKIPPED -- test_subsegment_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1656.4782967567444s cumulative, 0.2820591926574707s individual

.
current test PASSED/SKIPPED -- test_converters_with_invalid_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1656.6570658683777s cumulative, 0.17876911163330078s individual

.
current test PASSED/SKIPPED -- test_duplicate_field_names in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1656.7335917949677s cumulative, 0.07652592658996582s individual

.
current test PASSED/SKIPPED -- test_dead_segment in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1657.1436190605164s cumulative, 0.41002726554870605s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1657.7710757255554s cumulative, 0.6274566650390625s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1658.032631635666s cumulative, 0.26155591011047363s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1658.3810863494873s cumulative, 0.34845471382141113s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1658.5236093997955s cumulative, 0.14252305030822754s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1658.6882450580597s cumulative, 0.16463565826416016s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1659.0219871997833s cumulative, 0.3337421417236328s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1659.1905879974365s cumulative, 0.16860079765319824s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 1659.3428046703339s cumulative, 0.15221667289733887s individual


tests/asgi/test_asgi_conductor.py .
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 1659.7628347873688s cumulative, 0.4200301170349121s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 1660.4558062553406s cumulative, 0.6929714679718018s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 1660.6966280937195s cumulative, 0.24082183837890625s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 1660.9025521278381s cumulative, 0.20592403411865234s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 1661.034527540207s cumulative, 0.13197541236877441s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 1661.1569323539734s cumulative, 0.12240481376647949s individual

.
current test PASSED/SKIPPED -- test_wsgi_not_supported in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 1661.1907982826233s cumulative, 0.033865928649902344s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 1661.228327035904s cumulative, 0.03752875328063965s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 1661.251202583313s cumulative, 0.022875547409057617s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 1661.2758095264435s cumulative, 0.024606943130493164s individual

.
current test PASSED/SKIPPED -- test_default_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 1661.3510382175446s cumulative, 0.07522869110107422s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 1661.4325678348541s cumulative, 0.08152961730957031s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 1661.4612684249878s cumulative, 0.028700590133666992s individual

.
current test PASSED/SKIPPED -- test_generic_request in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 1661.4848146438599s cumulative, 0.023546218872070312s individual

.
current test PASSED/SKIPPED -- test_generic_request in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 1661.5118153095245s cumulative, 0.02700066566467285s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 1661.5454359054565s cumulative, 0.033620595932006836s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 1661.569638967514s cumulative, 0.024203062057495117s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 1661.5924441814423s cumulative, 0.022805213928222656s individual


tests/asgi/test_asgi_servers.py s
current test PASSED/SKIPPED -- test_post_read_bounded_stream_no_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1661.6191048622131s cumulative, 0.026660680770874023s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]
E
current test FAILED -- test_post_read_bounded_stream_no_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1672.0111601352692s cumulative, 10.39205527305603s individual

s
current test PASSED/SKIPPED -- test_stream_chunked_request in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1672.0479516983032s cumulative, 0.03679156303405762s individual

s
current test PASSED/SKIPPED -- test_post_invalid_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1672.100219488144s cumulative, 0.05226778984069824s individual


[Starting server process...]
E
current test FAILED -- test_post_multiple in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1677.5911085605621s cumulative, 5.490889072418213s individual

s
current test PASSED/SKIPPED -- test_sse_client_disconnects_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1677.628112077713s cumulative, 0.037003517150878906s individual

s
current test PASSED/SKIPPED -- test_post_multipart_form in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1677.6600451469421s cumulative, 0.03193306922912598s individual


[Starting server process...]
E
current test FAILED -- test_put in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1683.6896381378174s cumulative, 6.029592990875244s individual

s
current test PASSED/SKIPPED -- test_post_read_bounded_stream_large in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1683.7811357975006s cumulative, 0.09149765968322754s individual


[Starting server process...]
E
current test FAILED -- test_post_invalid_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1688.9429640769958s cumulative, 5.161828279495239s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]
E
current test FAILED -- test_sse_client_disconnects_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1699.4719672203064s cumulative, 10.529003143310547s individual

s
current test PASSED/SKIPPED -- test_post_read_bounded_stream_no_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1699.5083222389221s cumulative, 0.036355018615722656s individual

s
current test PASSED/SKIPPED -- test_post_multipart_form in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1699.5376393795013s cumulative, 0.029317140579223633s individual

s
current test PASSED/SKIPPED -- test_post_read_bounded_stream_large in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1699.5670111179352s cumulative, 0.02937173843383789s individual

s
current test PASSED/SKIPPED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1699.59734582901s cumulative, 0.0303347110748291s individual


[Starting server process...]
E
current test FAILED -- test_post_read_bounded_stream_large in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1706.3550877571106s cumulative, 6.757741928100586s individual


[Starting server process...]
E
current test FAILED -- test_head_405 in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1712.6285219192505s cumulative, 6.273434162139893s individual


[Starting server process...]
E
current test FAILED -- test_stream_chunked_request in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1718.3873369693756s cumulative, 5.758815050125122s individual


[Starting server process...]
E
current test FAILED -- test_post_multipart_form in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1723.84490609169s cumulative, 5.457569122314453s individual

s
current test PASSED/SKIPPED -- test_post_read_bounded_stream in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1723.870216369629s cumulative, 0.025310277938842773s individual

s
current test PASSED/SKIPPED -- test_head_405 in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1723.891593694687s cumulative, 0.0213773250579834s individual

s
current test PASSED/SKIPPED -- test_post_read_bounded_stream in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1723.9151198863983s cumulative, 0.02352619171142578s individual

s
current test PASSED/SKIPPED -- test_head_405 in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1723.9314806461334s cumulative, 0.016360759735107422s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]
E
current test FAILED -- test_post_read_bounded_stream in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1734.5103657245636s cumulative, 10.578885078430176s individual

s
current test PASSED/SKIPPED -- test_post_multiple in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1734.5801165103912s cumulative, 0.06975078582763672s individual

s
current test PASSED/SKIPPED -- test_post_multiple in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1734.7385778427124s cumulative, 0.158461332321167s individual

s
current test PASSED/SKIPPED -- test_sse in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1734.8193187713623s cumulative, 0.08074092864990234s individual


[Starting server process...]
E
current test FAILED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1740.6155743598938s cumulative, 5.796255588531494s individual

s
current test PASSED/SKIPPED -- test_post_invalid_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1740.6896178722382s cumulative, 0.07404351234436035s individual

s
current test PASSED/SKIPPED -- test_put in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1740.7968580722809s cumulative, 0.10724020004272461s individual

s
current test PASSED/SKIPPED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1740.8792850971222s cumulative, 0.0824270248413086s individual

s
current test PASSED/SKIPPED -- test_sse_client_disconnects_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1740.955819606781s cumulative, 0.07653450965881348s individual

s
current test PASSED/SKIPPED -- test_stream_chunked_request in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1741.011037349701s cumulative, 0.055217742919921875s individual

s
current test PASSED/SKIPPED -- test_put in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1741.0435662269592s cumulative, 0.03252887725830078s individual


[Starting server process...]
E
current test FAILED -- test_sse in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1747.307362794876s cumulative, 6.26379656791687s individual

s
current test PASSED/SKIPPED -- test_sse in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1747.3468716144562s cumulative, 0.039508819580078125s individual

s
current test PASSED/SKIPPED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1747.3682765960693s cumulative, 0.02140498161315918s individual

s
current test PASSED/SKIPPED -- test_close_code_on_unhandled_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1747.378909111023s cumulative, 0.010632514953613281s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]
E
current test FAILED -- test_close_code_on_unhandled_http_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1758.3525366783142s cumulative, 10.97362756729126s individual

s
current test PASSED/SKIPPED -- test_invalid_close_code in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1758.4576144218445s cumulative, 0.10507774353027344s individual


[Starting server process...]
E
current test FAILED -- test_recv_before_accept in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1763.7877900600433s cumulative, 5.3301756381988525s individual

s
current test PASSED/SKIPPED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1763.8190760612488s cumulative, 0.031286001205444336s individual

s
current test PASSED/SKIPPED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1763.844716310501s cumulative, 0.025640249252319336s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]
E
current test FAILED -- test_passing_path_params in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1774.4336638450623s cumulative, 10.588947534561157s individual

s
current test PASSED/SKIPPED -- test_select_subprotocol_unknown in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1774.4562292099s cumulative, 0.022565364837646484s individual

s
current test PASSED/SKIPPED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1774.4770395755768s cumulative, 0.020810365676879883s individual

s
current test PASSED/SKIPPED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1774.4997794628143s cumulative, 0.022739887237548828s individual

s
current test PASSED/SKIPPED -- test_recv_before_accept in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1774.5222661495209s cumulative, 0.02248668670654297s individual

s
current test PASSED/SKIPPED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1774.5456669330597s cumulative, 0.02340078353881836s individual

s
current test PASSED/SKIPPED -- test_disconnecting_client_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1774.5595879554749s cumulative, 0.013921022415161133s individual

s
current test PASSED/SKIPPED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1774.5790979862213s cumulative, 0.01951003074645996s individual

s
current test PASSED/SKIPPED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1774.5939705371857s cumulative, 0.014872550964355469s individual

s
current test PASSED/SKIPPED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1774.609492301941s cumulative, 0.015521764755249023s individual

s
current test PASSED/SKIPPED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1774.6281206607819s cumulative, 0.018628358840942383s individual

s
current test PASSED/SKIPPED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1774.639741897583s cumulative, 0.011621236801147461s individual


[Starting server process...]
E
current test FAILED -- test_send_before_accept in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1780.172635793686s cumulative, 5.532893896102905s individual

s
current test PASSED/SKIPPED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1780.2564351558685s cumulative, 0.08379936218261719s individual

s
current test PASSED/SKIPPED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1780.3415660858154s cumulative, 0.08513092994689941s individual

s
current test PASSED/SKIPPED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1780.40726852417s cumulative, 0.06570243835449219s individual


[Starting server process...]
E
current test FAILED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1786.4013135433197s cumulative, 5.99404501914978s individual


[Starting server process...]
E
current test FAILED -- test_invalid_close_code in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1791.9378409385681s cumulative, 5.536527395248413s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]
E
current test FAILED -- test_select_subprotocol_known in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1802.4563827514648s cumulative, 10.518541812896729s individual

s
current test PASSED/SKIPPED -- test_close_code_on_unhandled_http_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1802.4717445373535s cumulative, 0.015361785888671875s individual

s
current test PASSED/SKIPPED -- test_select_subprotocol_unknown in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1802.4856572151184s cumulative, 0.013912677764892578s individual

s
current test PASSED/SKIPPED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1802.4992389678955s cumulative, 0.01358175277709961s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]
E
current test FAILED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1813.3017356395721s cumulative, 10.802496671676636s individual


[Starting server process...]
E
current test FAILED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1819.5533874034882s cumulative, 6.251651763916016s individual


[Starting server process...]
E
current test FAILED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1824.8922448158264s cumulative, 5.338857412338257s individual

s
current test PASSED/SKIPPED -- test_passing_path_params in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1824.9209277629852s cumulative, 0.028682947158813477s individual


[Starting server process...]
E
current test FAILED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1830.452891588211s cumulative, 5.53196382522583s individual


[Starting server process...]
E
current test FAILED -- test_disconnecting_client_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1837.1241178512573s cumulative, 6.671226263046265s individual

s
current test PASSED/SKIPPED -- test_select_subprotocol_known in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1837.1431114673615s cumulative, 0.018993616104125977s individual

s
current test PASSED/SKIPPED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1837.1580390930176s cumulative, 0.01492762565612793s individual

s
current test PASSED/SKIPPED -- test_select_subprotocol_known in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1837.1777503490448s cumulative, 0.01971125602722168s individual

s
current test PASSED/SKIPPED -- test_select_subprotocol_known in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1837.196537733078s cumulative, 0.018787384033203125s individual


[Starting server process...]
E
current test FAILED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1843.1798911094666s cumulative, 5.98335337638855s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]
E
current test FAILED -- test_missing_responder in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1853.8288660049438s cumulative, 10.648974895477295s individual


[Starting server process...]
E
current test FAILED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1859.2216074466705s cumulative, 5.392741441726685s individual


[Starting server process...]
E
current test FAILED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1865.0576498508453s cumulative, 5.836042404174805s individual

s
current test PASSED/SKIPPED -- test_send_before_accept in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1865.1705975532532s cumulative, 0.11294770240783691s individual

s
current test PASSED/SKIPPED -- test_send_before_accept in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1865.2503850460052s cumulative, 0.0797874927520752s individual

s
current test PASSED/SKIPPED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1865.3441903591156s cumulative, 0.09380531311035156s individual

s
current test PASSED/SKIPPED -- test_recv_before_accept in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1865.429931640625s cumulative, 0.08574128150939941s individual

s
current test PASSED/SKIPPED -- test_close_code_on_unhandled_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1865.535016298294s cumulative, 0.10508465766906738s individual


[Starting server process...]
E
current test FAILED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1871.2023038864136s cumulative, 5.667287588119507s individual

s
current test PASSED/SKIPPED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1871.2481637001038s cumulative, 0.04585981369018555s individual


[Starting server process...]
E
current test FAILED -- test_select_subprotocol_unknown in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1877.1353182792664s cumulative, 5.887154579162598s individual

s
current test PASSED/SKIPPED -- test_select_subprotocol_known in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1877.2583594322205s cumulative, 0.12304115295410156s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]
E
current test FAILED -- test_select_subprotocol_known in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1888.2964985370636s cumulative, 11.03813910484314s individual

s
current test PASSED/SKIPPED -- test_missing_responder in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1888.4084961414337s cumulative, 0.11199760437011719s individual


[Starting server process...]
E
current test FAILED -- test_close_code_on_unhandled_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1893.6393892765045s cumulative, 5.230893135070801s individual

s
current test PASSED/SKIPPED -- test_disconnecting_client_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1893.651831626892s cumulative, 0.012442350387573242s individual

s
current test PASSED/SKIPPED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1893.6597092151642s cumulative, 0.007877588272094727s individual

s
current test PASSED/SKIPPED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1893.6697630882263s cumulative, 0.010053873062133789s individual

s
current test PASSED/SKIPPED -- test_invalid_close_code in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1893.6934180259705s cumulative, 0.023654937744140625s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]
E
current test FAILED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1904.2385885715485s cumulative, 10.545170545578003s individual

s
current test PASSED/SKIPPED -- test_passing_path_params in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1904.2897448539734s cumulative, 0.05115628242492676s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]
E
current test FAILED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1915.4495165348053s cumulative, 11.15977168083191s individual

s
current test PASSED/SKIPPED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1915.5508205890656s cumulative, 0.1013040542602539s individual

s
current test PASSED/SKIPPED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1915.63272690773s cumulative, 0.08190631866455078s individual

s
current test PASSED/SKIPPED -- test_missing_responder in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1915.725480556488s cumulative, 0.09275364875793457s individual


[Starting server process...]
E
current test FAILED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1921.1026990413666s cumulative, 5.37721848487854s individual

s
current test PASSED/SKIPPED -- test_close_code_on_unhandled_http_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1921.1516728401184s cumulative, 0.048973798751831055s individual

s
current test PASSED/SKIPPED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1921.2000970840454s cumulative, 0.04842424392700195s individual

s
current test PASSED/SKIPPED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1921.24928855896s cumulative, 0.04919147491455078s individual


tests/test_middleware.py .
current test PASSED/SKIPPED -- test_dont_need_params_in_signature in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1921.3237068653107s cumulative, 0.07441830635070801s individual

F
current test FAILED -- test_dont_need_params_in_signature in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1922.3279213905334s cumulative, 1.0042145252227783s individual

F
current test FAILED -- test_http_status_raised_from_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1923.1394860744476s cumulative, 0.8115646839141846s individual

F
current test FAILED -- test_error_composed_before_resp_middleware_called in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1923.923460483551s cumulative, 0.7839744091033936s individual

.
current test PASSED/SKIPPED -- test_http_status_raised_from_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1923.9769122600555s cumulative, 0.0534517765045166s individual

.
current test PASSED/SKIPPED -- test_error_composed_before_resp_middleware_called in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1924.022033214569s cumulative, 0.045120954513549805s individual

F
current test FAILED -- test_can_access_resource_params in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1924.7234966754913s cumulative, 0.7014634609222412s individual

F
current test FAILED -- test_can_access_resource_params in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1933.8371534347534s cumulative, 9.113656759262085s individual

.
current test PASSED/SKIPPED -- test_can_access_resource_params in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1933.9186952114105s cumulative, 0.08154177665710449s individual

.
current test PASSED/SKIPPED -- test_can_access_resource_params in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1934.098292350769s cumulative, 0.1795971393585205s individual

F
current test FAILED -- test_generate_trans_id_with_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1936.5479547977448s cumulative, 2.449662446975708s individual

.
current test PASSED/SKIPPED -- test_generate_trans_id_with_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1936.5640106201172s cumulative, 0.016055822372436523s individual

F
current test FAILED -- test_log_get_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1938.7703676223755s cumulative, 2.206357002258301s individual

.
current test PASSED/SKIPPED -- test_skip_process_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1938.9535064697266s cumulative, 0.18313884735107422s individual

.
current test PASSED/SKIPPED -- test_response_middleware_raises_exception in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1939.2790832519531s cumulative, 0.3255767822265625s individual

F
current test FAILED -- test_log_get_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1943.2232043743134s cumulative, 3.9441211223602295s individual

.
current test PASSED/SKIPPED -- test_add_invalid_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1943.247447013855s cumulative, 0.024242639541625977s individual

.
current test PASSED/SKIPPED -- test_add_invalid_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1943.2573533058167s cumulative, 0.009906291961669922s individual

.
current test PASSED/SKIPPED -- test_log_get_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1943.2852647304535s cumulative, 0.02791142463684082s individual

.
current test PASSED/SKIPPED -- test_log_get_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1943.3044815063477s cumulative, 0.01921677589416504s individual

F
current test FAILED -- test_skip_process_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1943.8280017375946s cumulative, 0.5235202312469482s individual

F
current test FAILED -- test_response_middleware_raises_exception in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1944.1136705875397s cumulative, 0.28566884994506836s individual

s.
current test PASSED/SKIPPED -- test_api_initialization_with_cors_enabled_and_middleware_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1944.1401727199554s cumulative, 0.026502132415771484s individual

.
current test PASSED/SKIPPED -- test_api_initialization_with_cors_enabled_and_middleware_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1944.1918931007385s cumulative, 0.051720380783081055s individual

F
current test FAILED -- test_api_initialization_with_cors_enabled_and_middleware_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1945.0125091075897s cumulative, 0.8206160068511963s individual

F
current test FAILED -- test_api_initialization_with_cors_enabled_and_middleware_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1945.8189179897308s cumulative, 0.8064088821411133s individual

F
current test FAILED -- test_api_initialization_with_cors_enabled_and_middleware_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1946.6102068424225s cumulative, 0.7912888526916504s individual

.
current test PASSED/SKIPPED -- test_api_initialization_with_cors_enabled_and_middleware_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1946.667777299881s cumulative, 0.057570457458496094s individual

.
current test PASSED/SKIPPED -- test_api_initialization_with_cors_enabled_and_middleware_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1946.7163326740265s cumulative, 0.04855537414550781s individual

F
current test FAILED -- test_api_initialization_with_cors_enabled_and_middleware_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1956.6575725078583s cumulative, 9.941239833831787s individual

F
current test FAILED -- test_base_path_is_removed_before_routing in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1957.5814001560211s cumulative, 0.9238276481628418s individual

.
current test PASSED/SKIPPED -- test_base_path_is_removed_before_routing in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1957.6659734249115s cumulative, 0.08457326889038086s individual

F
current test FAILED -- test_inner_mw_throw_exception in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1958.4410018920898s cumulative, 0.7750284671783447s individual

F
current test FAILED -- test_order_independent_mw_executed_when_exception_in_rsrc in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1959.5324530601501s cumulative, 1.0914511680603027s individual

F
current test FAILED -- test_order_independent_mw_executed_when_exception_in_resp in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1962.263064622879s cumulative, 2.730611562728882s individual

.
current test PASSED/SKIPPED -- test_middleware_execution_order in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1962.4329597949982s cumulative, 0.16989517211914062s individual

.
current test PASSED/SKIPPED -- test_generate_trans_id_and_time_with_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1962.5895366668701s cumulative, 0.15657687187194824s individual

F
current test FAILED -- test_order_mw_executed_when_exception_in_resp in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1964.4513335227966s cumulative, 1.8617968559265137s individual

F
current test FAILED -- test_inner_mw_with_ex_handler_throw_exception in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1967.3693251609802s cumulative, 2.9179916381835938s individual

.
current test PASSED/SKIPPED -- test_multiple_response_mw_throw_exception in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1967.4358744621277s cumulative, 0.06654930114746094s individual

F
current test FAILED -- test_middleware_execution_order in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1967.8626985549927s cumulative, 0.42682409286499023s individual

.
current test PASSED/SKIPPED -- test_order_independent_mw_executed_when_exception_in_req in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1967.905643939972s cumulative, 0.04294538497924805s individual

.
current test PASSED/SKIPPED -- test_order_mw_executed_when_exception_in_req in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1967.9320328235626s cumulative, 0.026388883590698242s individual

.
current test PASSED/SKIPPED -- test_order_mw_executed_when_exception_in_resp in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1968.0421464443207s cumulative, 0.11011362075805664s individual

F
current test FAILED -- test_outer_mw_with_ex_handler_throw_exception in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1968.538601398468s cumulative, 0.49645495414733887s individual

.
current test PASSED/SKIPPED -- test_inner_mw_throw_exception_while_processing_resp in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1968.6002888679504s cumulative, 0.061687469482421875s individual

.
current test PASSED/SKIPPED -- test_legacy_middleware_called_with_correct_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1968.686044216156s cumulative, 0.0857553482055664s individual

.
current test PASSED/SKIPPED -- test_order_mw_executed_when_exception_in_rsrc in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1968.7861232757568s cumulative, 0.10007905960083008s individual

.
current test PASSED/SKIPPED -- test_inner_mw_with_ex_handler_throw_exception in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1968.8646428585052s cumulative, 0.07851958274841309s individual

.
current test PASSED/SKIPPED -- test_order_independent_mw_executed_when_exception_in_resp in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1968.9483959674835s cumulative, 0.08375310897827148s individual

.
current test PASSED/SKIPPED -- test_outer_mw_with_ex_handler_throw_exception in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1969.0131990909576s cumulative, 0.0648031234741211s individual

F
current test FAILED -- test_generate_trans_id_and_time_with_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1970.4483847618103s cumulative, 1.4351856708526611s individual

.
current test PASSED/SKIPPED -- test_generate_trans_id_and_time_with_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1970.5134160518646s cumulative, 0.06503129005432129s individual

F
current test FAILED -- test_order_mw_executed_when_exception_in_rsrc in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1971.4132115840912s cumulative, 0.8997955322265625s individual

F
current test FAILED -- test_legacy_middleware_called_with_correct_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1980.3934614658356s cumulative, 8.980249881744385s individual

F
current test FAILED -- test_order_independent_mw_executed_when_exception_in_req in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1981.1955482959747s cumulative, 0.8020868301391602s individual

.
current test PASSED/SKIPPED -- test_inner_mw_throw_exception in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1981.2511382102966s cumulative, 0.055589914321899414s individual

F
current test FAILED -- test_inner_mw_throw_exception_while_processing_resp in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1982.0874049663544s cumulative, 0.8362667560577393s individual

F
current test FAILED -- test_generate_trans_id_and_time_with_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1982.8595440387726s cumulative, 0.7721390724182129s individual

F
current test FAILED -- test_order_mw_executed_when_exception_in_req in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1984.787616968155s cumulative, 1.9280729293823242s individual

.
current test PASSED/SKIPPED -- test_order_independent_mw_executed_when_exception_in_rsrc in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1985.08629322052s cumulative, 0.2986762523651123s individual

F
current test FAILED -- test_independent_middleware_execution_order in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1987.0572443008423s cumulative, 1.9709510803222656s individual

.
current test PASSED/SKIPPED -- test_independent_middleware_execution_order in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1987.2744834423065s cumulative, 0.2172391414642334s individual

F
current test FAILED -- test_multiple_response_mw_throw_exception in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1989.7433712482452s cumulative, 2.4688878059387207s individual

F
current test FAILED -- test_process_resource_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1992.50537109375s cumulative, 2.7619998455047607s individual

F
current test FAILED -- test_process_request_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1992.8122644424438s cumulative, 0.30689334869384766s individual

.
current test PASSED/SKIPPED -- test_process_resource_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1992.8336064815521s cumulative, 0.021342039108276367s individual

.
current test PASSED/SKIPPED -- test_process_request_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1992.8453540802002s cumulative, 0.011747598648071289s individual

.
current test PASSED/SKIPPED -- test_process_request_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1992.8621451854706s cumulative, 0.016791105270385742s individual

F
current test FAILED -- test_process_request_not_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1993.1900124549866s cumulative, 0.3278672695159912s individual

.
current test PASSED/SKIPPED -- test_process_request_not_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1993.2140483856201s cumulative, 0.024035930633544922s individual

F
current test FAILED -- test_process_request_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1994.333795785904s cumulative, 1.1197474002838135s individual

.
current test PASSED/SKIPPED -- test_process_resource_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1994.393806695938s cumulative, 0.06001091003417969s individual

F
current test FAILED -- test_process_resource_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 2004.5572228431702s cumulative, 10.163416147232056s individual


tests/test_boundedstream.py .
current test PASSED/SKIPPED -- test_not_writable in /home/kaiyaok2/PythonProjects/falcon/tests/test_boundedstream.py: 2004.5903508663177s cumulative, 0.03312802314758301s individual


tests/test_sink_and_static.py .
current test PASSED/SKIPPED -- test_sink_before_static_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_sink_and_static.py: 2004.681601524353s cumulative, 0.09125065803527832s individual

.
current test PASSED/SKIPPED -- test_sink_before_static_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_sink_and_static.py: 2004.765843629837s cumulative, 0.08424210548400879s individual

.
current test PASSED/SKIPPED -- test_sink_after_static_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_sink_and_static.py: 2004.903203010559s cumulative, 0.1373593807220459s individual

.
current test PASSED/SKIPPED -- test_sink_after_static_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_sink_and_static.py: 2005.0018374919891s cumulative, 0.09863448143005371s individual


tests/test_httpstatus.py E
current test FAILED -- test_data_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 2005.8234932422638s cumulative, 0.8216557502746582s individual

.
current test PASSED/SKIPPED -- test_body_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 2005.8883273601532s cumulative, 0.0648341178894043s individual

E
current test FAILED -- test_media_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 2006.6565010547638s cumulative, 0.7681736946105957s individual

E
current test FAILED -- test_body_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 2007.4462196826935s cumulative, 0.7897186279296875s individual

.
current test PASSED/SKIPPED -- test_data_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 2007.4891955852509s cumulative, 0.04297590255737305s individual

.
current test PASSED/SKIPPED -- test_media_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 2007.5161051750183s cumulative, 0.026909589767456055s individual

F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 2008.106282234192s cumulative, 0.590177059173584s individual

F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 2010.9510061740875s cumulative, 2.84472393989563s individual

F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 2012.207974910736s cumulative, 1.2569687366485596s individual

F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 2013.958379983902s cumulative, 1.7504050731658936s individual

F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 2016.571916103363s cumulative, 2.6135361194610596s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 2016.7183747291565s cumulative, 0.14645862579345703s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 2016.8100163936615s cumulative, 0.09164166450500488s individual

.
current test PASSED/SKIPPED -- test_deprecated_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 2016.8278675079346s cumulative, 0.01785111427307129s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 2016.866810798645s cumulative, 0.03894329071044922s individual

F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 2017.4427235126495s cumulative, 0.5759127140045166s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 2017.4812953472137s cumulative, 0.038571834564208984s individual

F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 2017.9276740550995s cumulative, 0.4463787078857422s individual

F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 2018.779440164566s cumulative, 0.8517661094665527s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 2018.8450593948364s cumulative, 0.06561923027038574s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 2018.9041726589203s cumulative, 0.059113264083862305s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 2018.9637639522552s cumulative, 0.05959129333496094s individual

F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 2019.8487889766693s cumulative, 0.8850250244140625s individual

F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 2029.4564054012299s cumulative, 9.607616424560547s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 2029.5178818702698s cumulative, 0.06147646903991699s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 2029.5757129192352s cumulative, 0.0578310489654541s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 2029.6369729042053s cumulative, 0.06125998497009277s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 2029.701092004776s cumulative, 0.06411910057067871s individual

F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 2030.4998137950897s cumulative, 0.7987217903137207s individual

F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 2031.3047399520874s cumulative, 0.8049261569976807s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 2031.3570625782013s cumulative, 0.0523226261138916s individual

F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 2032.986159324646s cumulative, 1.6290967464447021s individual

F
current test FAILED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 2035.0698742866516s cumulative, 2.0837149620056152s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 2035.2492547035217s cumulative, 0.1793804168701172s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 2035.4252552986145s cumulative, 0.17600059509277344s individual

E
current test FAILED -- test_raise_status_in_responder in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 2037.4719822406769s cumulative, 2.046726942062378s individual

E
current test FAILED -- test_raise_status_runs_after_hooks in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 2040.2454872131348s cumulative, 2.7735049724578857s individual

.
current test PASSED/SKIPPED -- test_raise_status_survives_after_hooks in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 2040.4737787246704s cumulative, 0.22829151153564453s individual

E
current test FAILED -- test_raise_status_survives_after_hooks in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 2041.4449498653412s cumulative, 0.9711711406707764s individual

.
current test PASSED/SKIPPED -- test_raise_status_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 2041.4855518341064s cumulative, 0.04060196876525879s individual

E
current test FAILED -- test_raise_status_in_before_hook in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 2042.1851165294647s cumulative, 0.6995646953582764s individual

.
current test PASSED/SKIPPED -- test_raise_status_in_responder in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 2042.2237033843994s cumulative, 0.03858685493469238s individual

.
current test PASSED/SKIPPED -- test_raise_status_in_before_hook in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 2042.255399942398s cumulative, 0.03169655799865723s individual

.
current test PASSED/SKIPPED -- test_raise_status_runs_after_hooks in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 2042.2843871116638s cumulative, 0.02898716926574707s individual

E
current test FAILED -- test_raise_status_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 2043.0393688678741s cumulative, 0.7549817562103271s individual

E
current test FAILED -- test_raise_status_in_process_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 2043.9455416202545s cumulative, 0.9061727523803711s individual

.
current test PASSED/SKIPPED -- test_raise_status_runs_process_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 2044.0161151885986s cumulative, 0.07057356834411621s individual

.
current test PASSED/SKIPPED -- test_raise_status_in_process_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 2044.0730402469635s cumulative, 0.056925058364868164s individual

.
current test PASSED/SKIPPED -- test_raise_status_in_process_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 2044.1393909454346s cumulative, 0.06635069847106934s individual

E
current test FAILED -- test_raise_status_in_process_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 2045.0894613265991s cumulative, 0.9500703811645508s individual

E
current test FAILED -- test_raise_status_runs_process_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 2055.4623334407806s cumulative, 10.372872114181519s individual


tests/test_cookies.py E
current test FAILED -- test_same_site_empty_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 2056.2539196014404s cumulative, 0.79158616065979s individual

E
current test FAILED -- test_unset_cookies in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 2057.2394967079163s cumulative, 0.9855771064758301s individual

.
current test PASSED/SKIPPED -- test_non_ascii_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 2057.274377346039s cumulative, 0.034880638122558594s individual

.
current test PASSED/SKIPPED -- test_response_disable_secure_globally in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 2057.3475177288055s cumulative, 0.07314038276672363s individual

.
current test PASSED/SKIPPED -- test_non_ascii_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 2057.387022972107s cumulative, 0.0395052433013916s individual

.
current test PASSED/SKIPPED -- test_cookie_expires_aware in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 2057.47185921669s cumulative, 0.08483624458312988s individual

E
current test FAILED -- test_response_base_case in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 2058.438846349716s cumulative, 0.966987133026123s individual

.
current test PASSED/SKIPPED -- test_same_site_value_case_insensitive in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 2058.477184534073s cumulative, 0.03833818435668945s individual

.
current test PASSED/SKIPPED -- test_non_ascii_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 2058.5031101703644s cumulative, 0.025925636291503906s individual

.
current test PASSED/SKIPPED -- test_response_unset_cookie in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 2058.5578231811523s cumulative, 0.05471301078796387s individual

E
current test FAILED -- test_response_unset_cookie in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 2059.665517091751s cumulative, 1.1076939105987549s individual

.
current test PASSED/SKIPPED -- test_invalid_same_site_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 2059.7038815021515s cumulative, 0.038364410400390625s individual

.
current test PASSED/SKIPPED -- test_lax_same_site_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 2059.767152070999s cumulative, 0.06327056884765625s individual

.
current test PASSED/SKIPPED -- test_unset_cookies in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 2059.8520200252533s cumulative, 0.08486795425415039s individual

.
current test PASSED/SKIPPED -- test_non_ascii_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 2059.885158777237s cumulative, 0.03313875198364258s individual

.
current test PASSED/SKIPPED -- test_unicode_inside_ascii_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 2059.9166073799133s cumulative, 0.0314486026763916s individual

.
current test PASSED/SKIPPED -- test_response_base_case in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 2059.978362798691s cumulative, 0.06175541877746582s individual

.
current test PASSED/SKIPPED -- test_response_complex_case in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 2060.0173580646515s cumulative, 0.03899526596069336s individual

.
current test PASSED/SKIPPED -- test_same_site_value_case_insensitive in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 2060.0453305244446s cumulative, 0.02797245979309082s individual

.
current test PASSED/SKIPPED -- test_invalid_cookies_are_ignored in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 2060.2164125442505s cumulative, 0.1710820198059082s individual

E
current test FAILED -- test_cookie_expires_aware in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 2063.80104970932s cumulative, 3.58463716506958s individual

.
current test PASSED/SKIPPED -- test_duplicate_cookie in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 2063.882873058319s cumulative, 0.08182334899902344s individual

.
current test PASSED/SKIPPED -- test_request_cookie_parsing in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 2064.004718065262s cumulative, 0.12184500694274902s individual

E
current test FAILED -- test_none_same_site_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 2066.276678085327s cumulative, 2.2719600200653076s individual

E
current test FAILED -- test_cookies_setable in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 2068.654981136322s cumulative, 2.378303050994873s individual

E
current test FAILED -- test_response_disable_secure_globally in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 2071.327926635742s cumulative, 2.672945499420166s individual

.
current test PASSED/SKIPPED -- test_cookie_max_age_float_and_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 2071.3978881835938s cumulative, 0.0699615478515625s individual

.
current test PASSED/SKIPPED -- test_none_same_site_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 2071.452783346176s cumulative, 0.05489516258239746s individual

.
current test PASSED/SKIPPED -- test_non_ascii_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 2071.478244304657s cumulative, 0.02546095848083496s individual

E
current test FAILED -- test_lax_same_site_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 2072.2384762763977s cumulative, 0.7602319717407227s individual

E
current test FAILED -- test_cookie_max_age_float_and_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 2083.0753576755524s cumulative, 10.836881399154663s individual

.
current test PASSED/SKIPPED -- test_cookies_setable in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 2083.090646505356s cumulative, 0.015288829803466797s individual

.
current test PASSED/SKIPPED -- test_invalid_same_site_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 2083.0980026721954s cumulative, 0.007356166839599609s individual

.
current test PASSED/SKIPPED -- test_invalid_same_site_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 2083.1053519248962s cumulative, 0.007349252700805664s individual

E
current test FAILED -- test_response_complex_case in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 2083.8090019226074s cumulative, 0.7036499977111816s individual

.
current test PASSED/SKIPPED -- test_unset_cookies_samesite in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 2083.9020731449127s cumulative, 0.09307122230529785s individual

.
current test PASSED/SKIPPED -- test_same_site_value_case_insensitive in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 2083.9344272613525s cumulative, 0.032354116439819336s individual

E
current test FAILED -- test_cookie_expires_naive in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 2084.852391242981s cumulative, 0.917963981628418s individual

.
current test PASSED/SKIPPED -- test_same_site_value_case_insensitive in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 2084.893119573593s cumulative, 0.04072833061218262s individual

E
current test FAILED -- test_cookie_max_age_float_and_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 2085.829803466797s cumulative, 0.9366838932037354s individual

.
current test PASSED/SKIPPED -- test_non_ascii_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 2085.858658313751s cumulative, 0.028854846954345703s individual

E
current test FAILED -- test_strict_same_site_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 2086.7063801288605s cumulative, 0.8477218151092529s individual

.
current test PASSED/SKIPPED -- test_cookie_timezone in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 2086.7475321292877s cumulative, 0.041152000427246094s individual

.
current test PASSED/SKIPPED -- test_cookie_header_is_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 2086.7722198963165s cumulative, 0.024687767028808594s individual

.
current test PASSED/SKIPPED -- test_same_site_value_case_insensitive in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 2086.803537130356s cumulative, 0.03131723403930664s individual

E
current test FAILED -- test_unset_cookies_samesite in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 2087.8101053237915s cumulative, 1.006568193435669s individual

.
current test PASSED/SKIPPED -- test_strict_same_site_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 2087.932813167572s cumulative, 0.12270784378051758s individual

.
current test PASSED/SKIPPED -- test_same_site_empty_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 2087.996034145355s cumulative, 0.06322097778320312s individual

.
current test PASSED/SKIPPED -- test_cookie_max_age_float_and_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 2088.0550334453583s cumulative, 0.05899930000305176s individual

.
current test PASSED/SKIPPED -- test_same_site_value_case_insensitive in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 2088.0836515426636s cumulative, 0.02861809730529785s individual

.
current test PASSED/SKIPPED -- test_cookie_expires_naive in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 2088.146456003189s cumulative, 0.0628044605255127s individual

E
current test FAILED -- test_cookie_timezone in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 2090.5814909934998s cumulative, 2.435034990310669s individual


tests/test_compiled_router.py .
current test PASSED/SKIPPED -- test_cannot_replace_compiled in /home/kaiyaok2/PythonProjects/falcon/tests/test_compiled_router.py: 2090.7732644081116s cumulative, 0.1917734146118164s individual

.
current test PASSED/SKIPPED -- test_no_compile_kw in /home/kaiyaok2/PythonProjects/falcon/tests/test_compiled_router.py: 2090.7908203601837s cumulative, 0.017555952072143555s individual

.
current test PASSED/SKIPPED -- test_no_compile_kw in /home/kaiyaok2/PythonProjects/falcon/tests/test_compiled_router.py: 2090.8023641109467s cumulative, 0.011543750762939453s individual

.
current test PASSED/SKIPPED -- test_add_route_after_first_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_compiled_router.py: 2090.814616203308s cumulative, 0.012252092361450195s individual

.
current test PASSED/SKIPPED -- test_no_compile_kw in /home/kaiyaok2/PythonProjects/falcon/tests/test_compiled_router.py: 2090.825676679611s cumulative, 0.011060476303100586s individual

.
current test PASSED/SKIPPED -- test_compile in /home/kaiyaok2/PythonProjects/falcon/tests/test_compiled_router.py: 2090.837584733963s cumulative, 0.01190805435180664s individual

.
current test PASSED/SKIPPED -- test_converter_not_subclass in /home/kaiyaok2/PythonProjects/falcon/tests/test_compiled_router.py: 2090.846620082855s cumulative, 0.009035348892211914s individual

.
current test PASSED/SKIPPED -- test_multithread_compile in /home/kaiyaok2/PythonProjects/falcon/tests/test_compiled_router.py: 2090.9827551841736s cumulative, 0.13613510131835938s individual

.
current test PASSED/SKIPPED -- test_find_src in /home/kaiyaok2/PythonProjects/falcon/tests/test_compiled_router.py: 2091.0649676322937s cumulative, 0.08221244812011719s individual

.
current test PASSED/SKIPPED -- test_no_compile_kw in /home/kaiyaok2/PythonProjects/falcon/tests/test_compiled_router.py: 2091.181798696518s cumulative, 0.11683106422424316s individual


tests/asgi/test_lifespan_handlers.py .
current test PASSED/SKIPPED -- test_startup_raises in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_lifespan_handlers.py: 2091.316439628601s cumulative, 0.13464093208312988s individual

.
current test PASSED/SKIPPED -- test_asgi_conductor_raised_error_skips_shutdown in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_lifespan_handlers.py: 2091.42867231369s cumulative, 0.11223268508911133s individual

.
current test PASSED/SKIPPED -- test_shutdown_raises in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_lifespan_handlers.py: 2091.6024560928345s cumulative, 0.1737837791442871s individual

.
current test PASSED/SKIPPED -- test_startup_only in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_lifespan_handlers.py: 2091.7375259399414s cumulative, 0.1350698471069336s individual

.
current test PASSED/SKIPPED -- test_multiple_handlers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_lifespan_handlers.py: 2091.88933134079s cumulative, 0.15180540084838867s individual

.
current test PASSED/SKIPPED -- test_at_least_one_event_method_required in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_lifespan_handlers.py: 2092.002145767212s cumulative, 0.11281442642211914s individual

.
current test PASSED/SKIPPED -- test_shutdown_only in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_lifespan_handlers.py: 2092.1698117256165s cumulative, 0.16766595840454102s individual


tests/test_after_hooks.py F
current test FAILED -- test_wrapped_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 2094.4081280231476s cumulative, 2.238316297531128s individual

F
current test FAILED -- test_resource_with_uri_fields in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 2096.719512939453s cumulative, 2.311384916305542s individual

.
current test PASSED/SKIPPED -- test_resource_with_uri_fields in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 2096.8092892169952s cumulative, 0.08977627754211426s individual

.
current test PASSED/SKIPPED -- test_after_hooks_on_suffixed_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 2096.8431901931763s cumulative, 0.03390097618103027s individual

F
current test FAILED -- test_wrapped_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 2097.1826050281525s cumulative, 0.3394148349761963s individual

.
current test PASSED/SKIPPED -- test_after_hooks_on_suffixed_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 2097.2077572345734s cumulative, 0.025152206420898438s individual

.
current test PASSED/SKIPPED -- test_wrapped_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 2097.2257776260376s cumulative, 0.0180203914642334s individual

.
current test PASSED/SKIPPED -- test_hook_as_callable_class in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 2097.2847514152527s cumulative, 0.05897378921508789s individual

.
current test PASSED/SKIPPED -- test_wrapped_resource_with_hooks_aware_of_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 2097.3186242580414s cumulative, 0.03387284278869629s individual

.
current test PASSED/SKIPPED -- test_output_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 2097.336936235428s cumulative, 0.01831197738647461s individual

.
current test PASSED/SKIPPED -- test_hook_as_callable_class in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 2097.3731367588043s cumulative, 0.036200523376464844s individual

F
current test FAILED -- test_wrapped_resource_with_hooks_aware_of_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 2098.372378587723s cumulative, 0.999241828918457s individual

.
current test PASSED/SKIPPED -- test_serializer in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 2098.461937904358s cumulative, 0.08955931663513184s individual

.
current test PASSED/SKIPPED -- test_resource_with_uri_fields_async in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 2098.551735162735s cumulative, 0.0897972583770752s individual

.
current test PASSED/SKIPPED -- test_serializer in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 2098.706885099411s cumulative, 0.1551499366760254s individual

.
current test PASSED/SKIPPED -- test_resource_with_uri_fields in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 2098.8028905391693s cumulative, 0.09600543975830078s individual

.
current test PASSED/SKIPPED -- test_after_hooks_on_suffixed_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 2098.8916161060333s cumulative, 0.08872556686401367s individual

F
current test FAILED -- test_resource_with_uri_fields in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 2108.4657003879547s cumulative, 9.574084281921387s individual

.
current test PASSED/SKIPPED -- test_output_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 2108.533844947815s cumulative, 0.06814455986022949s individual

.
current test PASSED/SKIPPED -- test_after_hooks_on_suffixed_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 2108.6056287288666s cumulative, 0.07178378105163574s individual

.
current test PASSED/SKIPPED -- test_wrapped_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 2108.6905739307404s cumulative, 0.0849452018737793s individual


tests/test_validators.py .
current test PASSED/SKIPPED -- test_both_schemas_validation_success in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 2108.784887075424s cumulative, 0.09431314468383789s individual

.
current test PASSED/SKIPPED -- test_both_schemas_validation_success in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 2108.8831372261047s cumulative, 0.09825015068054199s individual

.
current test PASSED/SKIPPED -- test_resp_schema_validation_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 2108.9302537441254s cumulative, 0.04711651802062988s individual

.
current test PASSED/SKIPPED -- test_resp_schema_validation_success in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 2108.974708557129s cumulative, 0.04445481300354004s individual

.
current test PASSED/SKIPPED -- test_req_schema_validation_success in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 2109.020128250122s cumulative, 0.04541969299316406s individual

.
current test PASSED/SKIPPED -- test_both_schemas_validation_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 2109.1588032245636s cumulative, 0.13867497444152832s individual

.
current test PASSED/SKIPPED -- test_req_schema_validation_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 2109.2122688293457s cumulative, 0.05346560478210449s individual

.
current test PASSED/SKIPPED -- test_req_schema_validation_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 2109.281103372574s cumulative, 0.06883454322814941s individual

.
current test PASSED/SKIPPED -- test_both_schemas_validation_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 2109.399781227112s cumulative, 0.11867785453796387s individual

.
current test PASSED/SKIPPED -- test_req_schema_validation_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 2109.4604966640472s cumulative, 0.060715436935424805s individual

.
current test PASSED/SKIPPED -- test_req_schema_validation_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 2109.5039060115814s cumulative, 0.04340934753417969s individual

.
current test PASSED/SKIPPED -- test_resp_schema_validation_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 2109.5521886348724s cumulative, 0.048282623291015625s individual

.
current test PASSED/SKIPPED -- test_req_schema_validation_success in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 2109.597462415695s cumulative, 0.045273780822753906s individual

.
current test PASSED/SKIPPED -- test_resp_schema_validation_success in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 2109.6443588733673s cumulative, 0.04689645767211914s individual


tests/asgi/test_request_asgi.py .
current test PASSED/SKIPPED -- test_missing_server_in_scope in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_asgi.py: 2109.675202846527s cumulative, 0.03084397315979004s individual

.
current test PASSED/SKIPPED -- test_log_error_not_supported in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_asgi.py: 2109.7063796520233s cumulative, 0.03117680549621582s individual


tests/test_sinks.py .
current test PASSED/SKIPPED -- test_add_sync_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 2109.772782564163s cumulative, 0.06640291213989258s individual

.
current test PASSED/SKIPPED -- test_add_sync_sink_with_wrapping in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 2109.8335661888123s cumulative, 0.06078362464904785s individual

.
current test PASSED/SKIPPED -- test_add_async_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 2109.87384557724s cumulative, 0.040279388427734375s individual

F
current test FAILED -- test_add_sync_sink_with_wrapping in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 2110.2237589359283s cumulative, 0.3499133586883545s individual

.
current test PASSED/SKIPPED -- test_add_sync_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 2110.2910590171814s cumulative, 0.06730008125305176s individual

.
current test PASSED/SKIPPED -- test_add_async_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 2110.359447479248s cumulative, 0.06838846206665039s individual

.
current test PASSED/SKIPPED -- test_single_simple_pattern in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 2110.421716928482s cumulative, 0.06226944923400879s individual

F
current test FAILED -- test_route_precedence_with_both_id in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 2111.1828360557556s cumulative, 0.7611191272735596s individual

.
current test PASSED/SKIPPED -- test_single_default_pattern in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 2111.229786634445s cumulative, 0.046950578689575195s individual

.
current test PASSED/SKIPPED -- test_single_compiled_pattern in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 2111.2793147563934s cumulative, 0.04952812194824219s individual

F
current test FAILED -- test_with_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 2112.789315700531s cumulative, 1.5100009441375732s individual

.
current test PASSED/SKIPPED -- test_single_compiled_pattern in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 2113.28747010231s cumulative, 0.4981544017791748s individual

.
current test PASSED/SKIPPED -- test_with_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 2113.6694893836975s cumulative, 0.3820192813873291s individual

F
current test FAILED -- test_route_precedence in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 2115.0309586524963s cumulative, 1.3614692687988281s individual

.
current test PASSED/SKIPPED -- test_named_groups in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 2115.2382822036743s cumulative, 0.20732355117797852s individual

.
current test PASSED/SKIPPED -- test_route_precedence_with_id in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 2115.440902233124s cumulative, 0.2026200294494629s individual

.
current test PASSED/SKIPPED -- test_named_groups in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 2115.652146577835s cumulative, 0.2112443447113037s individual

.
current test PASSED/SKIPPED -- test_multiple_patterns in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 2115.8406624794006s cumulative, 0.18851590156555176s individual

.
current test PASSED/SKIPPED -- test_route_precedence in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 2116.053056001663s cumulative, 0.21239352226257324s individual

F
current test FAILED -- test_route_precedence_with_id in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 2118.8872842788696s cumulative, 2.834228277206421s individual

.
current test PASSED/SKIPPED -- test_route_precedence_with_both_id in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 2119.213427066803s cumulative, 0.3261427879333496s individual

.
current test PASSED/SKIPPED -- test_single_default_pattern in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 2119.3244948387146s cumulative, 0.1110677719116211s individual

.
current test PASSED/SKIPPED -- test_multiple_patterns in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 2119.3777713775635s cumulative, 0.05327653884887695s individual

.
current test PASSED/SKIPPED -- test_single_simple_pattern in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 2119.393191099167s cumulative, 0.015419721603393555s individual



==================================== ERRORS ====================================
___________ ERROR at setup of TestHTTPError.test_405_with_body[asgi] ___________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950ec3220>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fd25fe20>, 'CHECK...fe20>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fd25fe20>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd950eda200>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________ ERROR at setup of TestHTTPError.test_410_with_body[asgi] ___________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950eca490>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fd19b400>, 'CHECK...b400>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fd19b400>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd950c77520>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________ ERROR at setup of TestHTTPError.test_unicode_json[asgi] ____________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950ec8580>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517f8ee0>, 'CHECK...8ee0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517f8ee0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd950d34fa0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_title_default_message_if_none[asgi-503 Service Unavailable-bytes] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950ecaa40>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517f8820>, 'CHECK...8820>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517f8820>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd950dab5e0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ ERROR at setup of TestHTTPError.test_414_with_custom_kwargs[asgi] _______

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950ed0510>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517fa8c0>, 'CHECK...a8c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517fa8c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd811913310>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ ERROR at setup of TestHTTPError.test_custom_error_serializer[asgi] ______

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950ed06d0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fd19a0e0>, 'CHECK...a0e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fd19a0e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd7fd1bbee0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ ERROR at setup of TestHTTPError.test_413[asgi] ________________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950ec0740>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fd19a440>, 'CHECK...a440>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fd19a440>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd7fdee9480>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_title_default_message_if_none[asgi-503 Service Unavailable-str] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd7fded8740>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fd199a20>, 'CHECK...9a20>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fd199a20>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd7fd15ee30>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ ERROR at setup of TestHTTPError.test_no_description_xml[asgi] _________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd7fdec22d0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fd19a170>, 'CHECK...a170>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fd19a170>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd9517f2230>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_custom_error_serializer_optional_representation[asgi-GET-/404-404] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950ed14d0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fded69e0>, 'CHECK...69e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fded69e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd950d60160>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ ERROR at setup of TestHTTPError.test_no_description_json[asgi] ________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950ec9af0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fded4160>, 'CHECK...4160>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fded4160>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd950b02ef0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________ ERROR at setup of TestHTTPError.test_404_with_body[asgi] ___________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950ed3220>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fdffe7a0>, 'CHECK...e7a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fdffe7a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd9517f1030>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________ ERROR at setup of TestHTTPError.test_404_without_body[asgi] __________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950ec9bd0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517f9f30>, 'CHECK...9f30>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517f9f30>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd950d20be0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____ ERROR at setup of TestHTTPError.test_503_datetime_retry_after[asgi] ______

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950ec9ee0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fded6710>, 'CHECK...6710>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fded6710>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd8118ab280>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ ERROR at setup of TestHTTPError.test_411[asgi] ________________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd7fde9eea0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fded69e0>, 'CHECK...69e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fded69e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd811911f90>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________ ERROR at setup of TestHTTPError.test_429_datetime[asgi] ____________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950ec2ea0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fd25e950>, 'CHECK...e950>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fd25e950>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd7fd5277c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__ ERROR at setup of TestHTTPError.test_serialize_no_json_media_handler[asgi] __

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950ec9a10>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fdffc5e0>, 'CHECK...c5e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fdffc5e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd950be89d0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_client_does_not_accept_json_or_xml[asgi] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950ec9310>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fd19a680>, 'CHECK...a680>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fd19a680>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd950e62710>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___ ERROR at setup of TestHTTPError.test_epic_fail_xml[asgi-application/xml] ___

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950eca880>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fd19a4d0>, 'CHECK...a4d0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fd19a4d0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd950da8e50>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_temporary_413_integer_retry_after[asgi] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950ed1d90>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517fa050>, 'CHECK...a050>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517fa050>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd950dc4520>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_405_without_body_with_extra_headers[asgi] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950ed1310>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517fb010>, 'CHECK...b010>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517fb010>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd950d35990>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ ERROR at setup of TestHTTPError.test_414[asgi] ________________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950ed2180>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fd19b400>, 'CHECK...b400>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fd19b400>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd950d82680>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_epic_fail_xml[asgi-application/vnd.company.system.project.resource+xml;v=1.1] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950ed2f80>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fded7250>, 'CHECK...7250>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fded7250>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd950e3bee0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______________ ERROR at setup of TestHTTPError.test_misc[asgi] ________________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950ed1690>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517f93f0>, 'CHECK...93f0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517f93f0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd950c326b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_temporary_413_datetime_retry_after[asgi] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950ed2e30>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fd19a680>, 'CHECK...a680>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fd19a680>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd7fd525360>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________ ERROR at setup of TestHTTPError.test_410_without_body[asgi] __________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9517c30d0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fd198280>, 'CHECK...8280>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fd198280>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd950be9240>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__ ERROR at setup of TestHTTPError.test_client_does_not_accept_anything[asgi] __

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950ec9000>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517f8820>, 'CHECK...8820>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517f8820>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd950daa710>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_title_default_message_if_none[asgi-503-HTTPStatus] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950ec8580>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517f8040>, 'CHECK...8040>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517f8040>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd950c338e0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_title_default_message_if_none[asgi-503-bytes] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950ec9380>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fded57e0>, 'CHECK...57e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fded57e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd950eda560>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ ERROR at setup of TestHTTPError.test_unicode_xml[asgi] ____________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950d44040>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fd1984c0>, 'CHECK...84c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fd1984c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd950e60370>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______ ERROR at setup of TestHTTPError.test_414_with_description[asgi] ________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950ec9bd0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517f88b0>, 'CHECK...88b0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517f88b0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd950c747f0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_custom_error_serializer_optional_representation[asgi-BREW-/notfound-400] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950d47d80>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fd199d80>, 'CHECK...9d80>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fd199d80>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd9517f20b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ ERROR at setup of TestHTTPError.test_429[asgi] ________________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950d457e0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517fb1c0>, 'CHECK...b1c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517fb1c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd8119128f0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_forbidden[asgi-application/json-patch+json] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950d475a0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517fbeb0>, 'CHECK...beb0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517fbeb0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd950edb370>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ ERROR at setup of TestHTTPError.test_429_no_retry_after[asgi] _________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950d44890>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517f8ee0>, 'CHECK...8ee0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517f8ee0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd950dabd00>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_title_default_message_if_none[asgi-503-int] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950ed3e60>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517fa4d0>, 'CHECK...a4d0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517fa4d0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd950dc5ea0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_custom_error_serializer_optional_representation[asgi-GET-/notfound-404] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950ec91c0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517f93f0>, 'CHECK...93f0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517f93f0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd950d32c80>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_custom_serializer_no_representation[asgi] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950ed1000>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517fa5f0>, 'CHECK...a5f0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517fa5f0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd950d81330>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________ ERROR at setup of TestHTTPError.test_405_without_body[asgi] __________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950d47a00>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fd199750>, 'CHECK...9750>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fd199750>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd950de0190>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_custom_error_serializer_optional_representation[asgi-REPORT-/404-405] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950d461f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517f9e10>, 'CHECK...9e10>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517f9e10>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd950e86530>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____ ERROR at setup of TestHTTPError.test_forbidden[asgi-application/json] _____

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950ecaf10>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517fa200>, 'CHECK...a200>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517fa200>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd950ef0ca0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_forbidden[asgi-application/vnd.company.system.project.resource+json;v=1.1] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950ed2d50>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517f8f70>, 'CHECK...8f70>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517f8f70>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd950df0f40>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_405_without_body_with_extra_headers_double_check[asgi] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950d44ac0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517faf80>, 'CHECK...af80>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517faf80>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd950d33910>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________ ERROR at setup of TestHTTPError.test_invalid_param[asgi] ___________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950d44eb0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517fa320>, 'CHECK...a320>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517fa320>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd950d20910>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________ ERROR at setup of TestHTTPError.test_missing_header[asgi] ___________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950d45d20>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fd543490>, 'CHECK...3490>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fd543490>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd950ed8a60>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_serialize_error_uses_media_handler[asgi] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950d45690>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fdffe3b0>, 'CHECK...e3b0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fdffe3b0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd950d528c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________ ERROR at setup of TestHTTPError.test_missing_param[asgi] ___________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950d47a00>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517f88b0>, 'CHECK...88b0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517f88b0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd950df4d90>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________ ERROR at setup of TestHTTPError.test_414_with_title[asgi] ___________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950ed21f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517f8e50>, 'CHECK...8e50>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517f8e50>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd950dfb1c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ ERROR at setup of TestHTTPError.test_416[asgi] ________________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950ecb220>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517f8d30>, 'CHECK...8d30>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517f8d30>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd950ef02e0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________ ERROR at setup of TestHTTPError.test_invalid_header[asgi] ___________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950d45bd0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fd543400>, 'CHECK...3400>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fd543400>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd950d18430>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ ERROR at setup of TestHTTPError.test_epic_fail_xml[asgi-text/xml] _______

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950b1b5a0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517f83a0>, 'CHECK...83a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517f83a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd950d2c8b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ ERROR at setup of TestHTTPError.test_401[asgi] ________________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950b18c80>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517faa70>, 'CHECK...aa70>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517faa70>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd950d82950>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ ERROR at setup of TestHTTPError.test_base_class[asgi] _____________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950b19620>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fd5431c0>, 'CHECK...31c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fd5431c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd950db20b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________ ERROR at setup of TestHTTPError.test_epic_fail_json[asgi] ___________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950b1af10>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fd543400>, 'CHECK...3400>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fd543400>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd9517f20b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_title_default_message_if_none[asgi-503-str] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950b1a0a0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517f9090>, 'CHECK...9090>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517f9090>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd950de0d90>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ ERROR at setup of TestHTTPError.test_503_integer_retry_after[asgi] ______

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950b18eb0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517f8310>, 'CHECK...8310>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517f8310>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd950dc6110>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPError.test_epic_fail_xml[asgi-application/atom+xml] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = FaultyResource()
>       app.add_route('/fail', resource)

tests/test_httperror.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950b18b30>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517fa3b0>, 'CHECK...a3b0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517fa3b0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FaultyResource.on_get of <test_httperror.FaultyResource object at 0x7fd950e864a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ ERROR at setup of TestWSGIServer.test_post_multipart_form[uvicorn] ______

server_args = <function _uvicorn_args at 0x7fd8115e44c0>

    @pytest.fixture
    def server_url(server_args):
        if sys.platform.startswith('win'):
            pytest.skip('WSGI server tests are currently unsupported on Windows')
    
        for attempt in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}'.format(_SERVER_HOST, server_port)
    
            args = server_args(_SERVER_HOST, server_port)
            print('Starting {}...'.format(server_args.__doc__))
            print(' '.join(args))
            try:
                server = subprocess.Popen(args, cwd=_HERE)
            except FileNotFoundError:
                pytest.skip('{} executable is not installed'.format(args[0]))
    
            # NOTE(vytas): give the app server some time to start.
            start_time = time.time()
            while time.time() - start_time < _STARTUP_TIMEOUT:
                try:
                    requests.get(base_url + '/hello', timeout=0.2)
                except (requests.exceptions.Timeout, requests.exceptions.ConnectionError):
                    time.sleep(0.2)
                else:
                    break
            else:
                if server.poll() is None:
                    pytest.fail('Server is not responding to requests')
                else:
                    # NOTE(kgriffs): The server did not start up; probably due to
                    #   the port being in use. We could check the output but
                    #   capsys fixture may not have buffered the error output
                    #   yet, so we just retry.
                    continue
    
            yield base_url
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/test_wsgi_servers.py:175: Failed
_ ERROR at setup of TestWSGIServer.test_static_file_byte_range[uvicorn-7--hashlib] _

server_args = <function _uvicorn_args at 0x7fd8115e44c0>

    @pytest.fixture
    def server_url(server_args):
        if sys.platform.startswith('win'):
            pytest.skip('WSGI server tests are currently unsupported on Windows')
    
        for attempt in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}'.format(_SERVER_HOST, server_port)
    
            args = server_args(_SERVER_HOST, server_port)
            print('Starting {}...'.format(server_args.__doc__))
            print(' '.join(args))
            try:
                server = subprocess.Popen(args, cwd=_HERE)
            except FileNotFoundError:
                pytest.skip('{} executable is not installed'.format(args[0]))
    
            # NOTE(vytas): give the app server some time to start.
            start_time = time.time()
            while time.time() - start_time < _STARTUP_TIMEOUT:
                try:
                    requests.get(base_url + '/hello', timeout=0.2)
                except (requests.exceptions.Timeout, requests.exceptions.ConnectionError):
                    time.sleep(0.2)
                else:
                    break
            else:
                if server.poll() is None:
>                   pytest.fail('Server is not responding to requests')
E                   Failed: Server is not responding to requests

tests/test_wsgi_servers.py:163: Failed
_ ERROR at setup of TestWSGIServer.test_static_file_byte_range[uvicorn-32-38-random] _

server_args = <function _uvicorn_args at 0x7fd8115e44c0>

    @pytest.fixture
    def server_url(server_args):
        if sys.platform.startswith('win'):
            pytest.skip('WSGI server tests are currently unsupported on Windows')
    
        for attempt in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}'.format(_SERVER_HOST, server_port)
    
            args = server_args(_SERVER_HOST, server_port)
            print('Starting {}...'.format(server_args.__doc__))
            print(' '.join(args))
            try:
                server = subprocess.Popen(args, cwd=_HERE)
            except FileNotFoundError:
                pytest.skip('{} executable is not installed'.format(args[0]))
    
            # NOTE(vytas): give the app server some time to start.
            start_time = time.time()
            while time.time() - start_time < _STARTUP_TIMEOUT:
                try:
                    requests.get(base_url + '/hello', timeout=0.2)
                except (requests.exceptions.Timeout, requests.exceptions.ConnectionError):
                    time.sleep(0.2)
                else:
                    break
            else:
                if server.poll() is None:
                    pytest.fail('Server is not responding to requests')
                else:
                    # NOTE(kgriffs): The server did not start up; probably due to
                    #   the port being in use. We could check the output but
                    #   capsys fixture may not have buffered the error output
                    #   yet, so we just retry.
                    continue
    
            yield base_url
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/test_wsgi_servers.py:175: Failed
_ ERROR at setup of TestWSGIServer.test_static_file_byte_range[gunicorn-7--hashlib] _

server_args = <function _gunicorn_args at 0x7fd8115e43a0>

    @pytest.fixture
    def server_url(server_args):
        if sys.platform.startswith('win'):
            pytest.skip('WSGI server tests are currently unsupported on Windows')
    
        for attempt in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}'.format(_SERVER_HOST, server_port)
    
            args = server_args(_SERVER_HOST, server_port)
            print('Starting {}...'.format(server_args.__doc__))
            print(' '.join(args))
            try:
                server = subprocess.Popen(args, cwd=_HERE)
            except FileNotFoundError:
                pytest.skip('{} executable is not installed'.format(args[0]))
    
            # NOTE(vytas): give the app server some time to start.
            start_time = time.time()
            while time.time() - start_time < _STARTUP_TIMEOUT:
                try:
                    requests.get(base_url + '/hello', timeout=0.2)
                except (requests.exceptions.Timeout, requests.exceptions.ConnectionError):
                    time.sleep(0.2)
                else:
                    break
            else:
                if server.poll() is None:
>                   pytest.fail('Server is not responding to requests')
E                   Failed: Server is not responding to requests

tests/test_wsgi_servers.py:163: Failed
______________ ERROR at setup of TestWSGIServer.test_get[uvicorn] ______________

server_args = <function _uvicorn_args at 0x7fd8115e44c0>

    @pytest.fixture
    def server_url(server_args):
        if sys.platform.startswith('win'):
            pytest.skip('WSGI server tests are currently unsupported on Windows')
    
        for attempt in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}'.format(_SERVER_HOST, server_port)
    
            args = server_args(_SERVER_HOST, server_port)
            print('Starting {}...'.format(server_args.__doc__))
            print(' '.join(args))
            try:
                server = subprocess.Popen(args, cwd=_HERE)
            except FileNotFoundError:
                pytest.skip('{} executable is not installed'.format(args[0]))
    
            # NOTE(vytas): give the app server some time to start.
            start_time = time.time()
            while time.time() - start_time < _STARTUP_TIMEOUT:
                try:
                    requests.get(base_url + '/hello', timeout=0.2)
                except (requests.exceptions.Timeout, requests.exceptions.ConnectionError):
                    time.sleep(0.2)
                else:
                    break
            else:
                if server.poll() is None:
>                   pytest.fail('Server is not responding to requests')
E                   Failed: Server is not responding to requests

tests/test_wsgi_servers.py:163: Failed
_________ ERROR at setup of TestWSGIServer.test_static_file[gunicorn] __________

server_args = <function _gunicorn_args at 0x7fd8115e43a0>

    @pytest.fixture
    def server_url(server_args):
        if sys.platform.startswith('win'):
            pytest.skip('WSGI server tests are currently unsupported on Windows')
    
        for attempt in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}'.format(_SERVER_HOST, server_port)
    
            args = server_args(_SERVER_HOST, server_port)
            print('Starting {}...'.format(server_args.__doc__))
            print(' '.join(args))
            try:
                server = subprocess.Popen(args, cwd=_HERE)
            except FileNotFoundError:
                pytest.skip('{} executable is not installed'.format(args[0]))
    
            # NOTE(vytas): give the app server some time to start.
            start_time = time.time()
            while time.time() - start_time < _STARTUP_TIMEOUT:
                try:
                    requests.get(base_url + '/hello', timeout=0.2)
                except (requests.exceptions.Timeout, requests.exceptions.ConnectionError):
                    time.sleep(0.2)
                else:
                    break
            else:
                if server.poll() is None:
>                   pytest.fail('Server is not responding to requests')
E                   Failed: Server is not responding to requests

tests/test_wsgi_servers.py:163: Failed
_ ERROR at setup of TestWSGIServer.test_static_file_byte_range[gunicorn--47-The content of this comment is part of a test.\n] _

server_args = <function _gunicorn_args at 0x7fd8115e43a0>

    @pytest.fixture
    def server_url(server_args):
        if sys.platform.startswith('win'):
            pytest.skip('WSGI server tests are currently unsupported on Windows')
    
        for attempt in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}'.format(_SERVER_HOST, server_port)
    
            args = server_args(_SERVER_HOST, server_port)
            print('Starting {}...'.format(server_args.__doc__))
            print(' '.join(args))
            try:
                server = subprocess.Popen(args, cwd=_HERE)
            except FileNotFoundError:
                pytest.skip('{} executable is not installed'.format(args[0]))
    
            # NOTE(vytas): give the app server some time to start.
            start_time = time.time()
            while time.time() - start_time < _STARTUP_TIMEOUT:
                try:
                    requests.get(base_url + '/hello', timeout=0.2)
                except (requests.exceptions.Timeout, requests.exceptions.ConnectionError):
                    time.sleep(0.2)
                else:
                    break
            else:
                if server.poll() is None:
>                   pytest.fail('Server is not responding to requests')
E                   Failed: Server is not responding to requests

tests/test_wsgi_servers.py:163: Failed
________ ERROR at setup of TestWSGIServer.test_get_deprecated[gunicorn] ________

server_args = <function _gunicorn_args at 0x7fd8115e43a0>

    @pytest.fixture
    def server_url(server_args):
        if sys.platform.startswith('win'):
            pytest.skip('WSGI server tests are currently unsupported on Windows')
    
        for attempt in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}'.format(_SERVER_HOST, server_port)
    
            args = server_args(_SERVER_HOST, server_port)
            print('Starting {}...'.format(server_args.__doc__))
            print(' '.join(args))
            try:
                server = subprocess.Popen(args, cwd=_HERE)
            except FileNotFoundError:
                pytest.skip('{} executable is not installed'.format(args[0]))
    
            # NOTE(vytas): give the app server some time to start.
            start_time = time.time()
            while time.time() - start_time < _STARTUP_TIMEOUT:
                try:
                    requests.get(base_url + '/hello', timeout=0.2)
                except (requests.exceptions.Timeout, requests.exceptions.ConnectionError):
                    time.sleep(0.2)
                else:
                    break
            else:
                if server.poll() is None:
>                   pytest.fail('Server is not responding to requests')
E                   Failed: Server is not responding to requests

tests/test_wsgi_servers.py:163: Failed
_ ERROR at setup of TestWSGIServer.test_static_file_byte_range[gunicorn-32-38-random] _

server_args = <function _gunicorn_args at 0x7fd8115e43a0>

    @pytest.fixture
    def server_url(server_args):
        if sys.platform.startswith('win'):
            pytest.skip('WSGI server tests are currently unsupported on Windows')
    
        for attempt in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}'.format(_SERVER_HOST, server_port)
    
            args = server_args(_SERVER_HOST, server_port)
            print('Starting {}...'.format(server_args.__doc__))
            print(' '.join(args))
            try:
                server = subprocess.Popen(args, cwd=_HERE)
            except FileNotFoundError:
                pytest.skip('{} executable is not installed'.format(args[0]))
    
            # NOTE(vytas): give the app server some time to start.
            start_time = time.time()
            while time.time() - start_time < _STARTUP_TIMEOUT:
                try:
                    requests.get(base_url + '/hello', timeout=0.2)
                except (requests.exceptions.Timeout, requests.exceptions.ConnectionError):
                    time.sleep(0.2)
                else:
                    break
            else:
                if server.poll() is None:
>                   pytest.fail('Server is not responding to requests')
E                   Failed: Server is not responding to requests

tests/test_wsgi_servers.py:163: Failed
_ ERROR at setup of TestWSGIServer.test_static_file_byte_range[uvicorn-2-6-port] _

server_args = <function _uvicorn_args at 0x7fd8115e44c0>

    @pytest.fixture
    def server_url(server_args):
        if sys.platform.startswith('win'):
            pytest.skip('WSGI server tests are currently unsupported on Windows')
    
        for attempt in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}'.format(_SERVER_HOST, server_port)
    
            args = server_args(_SERVER_HOST, server_port)
            print('Starting {}...'.format(server_args.__doc__))
            print(' '.join(args))
            try:
                server = subprocess.Popen(args, cwd=_HERE)
            except FileNotFoundError:
                pytest.skip('{} executable is not installed'.format(args[0]))
    
            # NOTE(vytas): give the app server some time to start.
            start_time = time.time()
            while time.time() - start_time < _STARTUP_TIMEOUT:
                try:
                    requests.get(base_url + '/hello', timeout=0.2)
                except (requests.exceptions.Timeout, requests.exceptions.ConnectionError):
                    time.sleep(0.2)
                else:
                    break
            else:
                if server.poll() is None:
                    pytest.fail('Server is not responding to requests')
                else:
                    # NOTE(kgriffs): The server did not start up; probably due to
                    #   the port being in use. We could check the output but
                    #   capsys fixture may not have buffered the error output
                    #   yet, so we just retry.
                    continue
    
            yield base_url
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/test_wsgi_servers.py:175: Failed
_____________ ERROR at setup of TestWSGIServer.test_get[gunicorn] ______________

server_args = <function _gunicorn_args at 0x7fd8115e43a0>

    @pytest.fixture
    def server_url(server_args):
        if sys.platform.startswith('win'):
            pytest.skip('WSGI server tests are currently unsupported on Windows')
    
        for attempt in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}'.format(_SERVER_HOST, server_port)
    
            args = server_args(_SERVER_HOST, server_port)
            print('Starting {}...'.format(server_args.__doc__))
            print(' '.join(args))
            try:
                server = subprocess.Popen(args, cwd=_HERE)
            except FileNotFoundError:
                pytest.skip('{} executable is not installed'.format(args[0]))
    
            # NOTE(vytas): give the app server some time to start.
            start_time = time.time()
            while time.time() - start_time < _STARTUP_TIMEOUT:
                try:
                    requests.get(base_url + '/hello', timeout=0.2)
                except (requests.exceptions.Timeout, requests.exceptions.ConnectionError):
                    time.sleep(0.2)
                else:
                    break
            else:
                if server.poll() is None:
>                   pytest.fail('Server is not responding to requests')
E                   Failed: Server is not responding to requests

tests/test_wsgi_servers.py:163: Failed
________ ERROR at setup of TestWSGIServer.test_get_deprecated[uvicorn] _________

server_args = <function _uvicorn_args at 0x7fd8115e44c0>

    @pytest.fixture
    def server_url(server_args):
        if sys.platform.startswith('win'):
            pytest.skip('WSGI server tests are currently unsupported on Windows')
    
        for attempt in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}'.format(_SERVER_HOST, server_port)
    
            args = server_args(_SERVER_HOST, server_port)
            print('Starting {}...'.format(server_args.__doc__))
            print(' '.join(args))
            try:
                server = subprocess.Popen(args, cwd=_HERE)
            except FileNotFoundError:
                pytest.skip('{} executable is not installed'.format(args[0]))
    
            # NOTE(vytas): give the app server some time to start.
            start_time = time.time()
            while time.time() - start_time < _STARTUP_TIMEOUT:
                try:
                    requests.get(base_url + '/hello', timeout=0.2)
                except (requests.exceptions.Timeout, requests.exceptions.ConnectionError):
                    time.sleep(0.2)
                else:
                    break
            else:
                if server.poll() is None:
                    pytest.fail('Server is not responding to requests')
                else:
                    # NOTE(kgriffs): The server did not start up; probably due to
                    #   the port being in use. We could check the output but
                    #   capsys fixture may not have buffered the error output
                    #   yet, so we just retry.
                    continue
    
            yield base_url
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/test_wsgi_servers.py:175: Failed
__________ ERROR at setup of TestWSGIServer.test_static_file[uvicorn] __________

server_args = <function _uvicorn_args at 0x7fd8115e44c0>

    @pytest.fixture
    def server_url(server_args):
        if sys.platform.startswith('win'):
            pytest.skip('WSGI server tests are currently unsupported on Windows')
    
        for attempt in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}'.format(_SERVER_HOST, server_port)
    
            args = server_args(_SERVER_HOST, server_port)
            print('Starting {}...'.format(server_args.__doc__))
            print(' '.join(args))
            try:
                server = subprocess.Popen(args, cwd=_HERE)
            except FileNotFoundError:
                pytest.skip('{} executable is not installed'.format(args[0]))
    
            # NOTE(vytas): give the app server some time to start.
            start_time = time.time()
            while time.time() - start_time < _STARTUP_TIMEOUT:
                try:
                    requests.get(base_url + '/hello', timeout=0.2)
                except (requests.exceptions.Timeout, requests.exceptions.ConnectionError):
                    time.sleep(0.2)
                else:
                    break
            else:
                if server.poll() is None:
                    pytest.fail('Server is not responding to requests')
                else:
                    # NOTE(kgriffs): The server did not start up; probably due to
                    #   the port being in use. We could check the output but
                    #   capsys fixture may not have buffered the error output
                    #   yet, so we just retry.
                    continue
    
            yield base_url
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/test_wsgi_servers.py:175: Failed
_____ ERROR at setup of TestWSGIServer.test_post_multipart_form[gunicorn] ______

server_args = <function _gunicorn_args at 0x7fd8115e43a0>

    @pytest.fixture
    def server_url(server_args):
        if sys.platform.startswith('win'):
            pytest.skip('WSGI server tests are currently unsupported on Windows')
    
        for attempt in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}'.format(_SERVER_HOST, server_port)
    
            args = server_args(_SERVER_HOST, server_port)
            print('Starting {}...'.format(server_args.__doc__))
            print(' '.join(args))
            try:
                server = subprocess.Popen(args, cwd=_HERE)
            except FileNotFoundError:
                pytest.skip('{} executable is not installed'.format(args[0]))
    
            # NOTE(vytas): give the app server some time to start.
            start_time = time.time()
            while time.time() - start_time < _STARTUP_TIMEOUT:
                try:
                    requests.get(base_url + '/hello', timeout=0.2)
                except (requests.exceptions.Timeout, requests.exceptions.ConnectionError):
                    time.sleep(0.2)
                else:
                    break
            else:
                if server.poll() is None:
                    pytest.fail('Server is not responding to requests')
                else:
                    # NOTE(kgriffs): The server did not start up; probably due to
                    #   the port being in use. We could check the output but
                    #   capsys fixture may not have buffered the error output
                    #   yet, so we just retry.
                    continue
    
            yield base_url
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/test_wsgi_servers.py:175: Failed
_ ERROR at setup of TestWSGIServer.test_static_file_byte_range[gunicorn-2-6-port] _

server_args = <function _gunicorn_args at 0x7fd8115e43a0>

    @pytest.fixture
    def server_url(server_args):
        if sys.platform.startswith('win'):
            pytest.skip('WSGI server tests are currently unsupported on Windows')
    
        for attempt in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}'.format(_SERVER_HOST, server_port)
    
            args = server_args(_SERVER_HOST, server_port)
            print('Starting {}...'.format(server_args.__doc__))
            print(' '.join(args))
            try:
                server = subprocess.Popen(args, cwd=_HERE)
            except FileNotFoundError:
                pytest.skip('{} executable is not installed'.format(args[0]))
    
            # NOTE(vytas): give the app server some time to start.
            start_time = time.time()
            while time.time() - start_time < _STARTUP_TIMEOUT:
                try:
                    requests.get(base_url + '/hello', timeout=0.2)
                except (requests.exceptions.Timeout, requests.exceptions.ConnectionError):
                    time.sleep(0.2)
                else:
                    break
            else:
                if server.poll() is None:
>                   pytest.fail('Server is not responding to requests')
E                   Failed: Server is not responding to requests

tests/test_wsgi_servers.py:163: Failed
_ ERROR at setup of TestWSGIServer.test_static_file_byte_range[uvicorn--47-The content of this comment is part of a test.\n] _

server_args = <function _uvicorn_args at 0x7fd8115e44c0>

    @pytest.fixture
    def server_url(server_args):
        if sys.platform.startswith('win'):
            pytest.skip('WSGI server tests are currently unsupported on Windows')
    
        for attempt in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}'.format(_SERVER_HOST, server_port)
    
            args = server_args(_SERVER_HOST, server_port)
            print('Starting {}...'.format(server_args.__doc__))
            print(' '.join(args))
            try:
                server = subprocess.Popen(args, cwd=_HERE)
            except FileNotFoundError:
                pytest.skip('{} executable is not installed'.format(args[0]))
    
            # NOTE(vytas): give the app server some time to start.
            start_time = time.time()
            while time.time() - start_time < _STARTUP_TIMEOUT:
                try:
                    requests.get(base_url + '/hello', timeout=0.2)
                except (requests.exceptions.Timeout, requests.exceptions.ConnectionError):
                    time.sleep(0.2)
                else:
                    break
            else:
                if server.poll() is None:
                    pytest.fail('Server is not responding to requests')
                else:
                    # NOTE(kgriffs): The server did not start up; probably due to
                    #   the port being in use. We could check the output but
                    #   capsys fixture may not have buffered the error output
                    #   yet, so we just retry.
                    continue
    
            yield base_url
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/test_wsgi_servers.py:175: Failed
_ ERROR at setup of TestErrorHandler.test_uncaught_python_error[asgi-get_headers1-application/json-{"] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', ErroredClassResource())

tests/test_error_handlers.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950579150>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95022b250>, 'CHECK...b250>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95022b250>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ErroredClassResource.on_delete of <test_error_handlers.ErroredClassResource object at 0x7fd84596cac0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestErrorHandler.test_uncaught_python_error[asgi-None-application/json-{"] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', ErroredClassResource())

tests/test_error_handlers.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950881e70>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950229f30>, 'CHECK...9f30>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950229f30>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ErroredClassResource.on_delete of <test_error_handlers.ErroredClassResource object at 0x7fd845c39150>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestErrorHandler.test_uncaught_python_error[asgi-get_headers2-application/xml-<?xml] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', ErroredClassResource())

tests/test_error_handlers.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950882030>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95022a9e0>, 'CHECK...a9e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95022a9e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ErroredClassResource.on_delete of <test_error_handlers.ErroredClassResource object at 0x7fd950b97670>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestErrorHandler.test_invalid_add_exception_handler_input[asgi-exceptions0] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', ErroredClassResource())

tests/test_error_handlers.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd95081f3e0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95022a8c0>, 'CHECK...a8c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95022a8c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ErroredClassResource.on_delete of <test_error_handlers.ErroredClassResource object at 0x7fd950ab2ad0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestErrorHandler.test_invalid_add_exception_handler_input[asgi-Hello, world!] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', ErroredClassResource())

tests/test_error_handlers.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950a322d0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95022bb50>, 'CHECK...bb50>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95022bb50>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ErroredClassResource.on_delete of <test_error_handlers.ErroredClassResource object at 0x7fd9501111b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________ ERROR at setup of TestErrorHandler.test_uncaught_error[asgi] _________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', ErroredClassResource())

tests/test_error_handlers.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950a00350>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95022b910>, 'CHECK...b910>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95022b910>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ErroredClassResource.on_delete of <test_error_handlers.ErroredClassResource object at 0x7fd8117c6650>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestErrorHandler.test_handler_multiple_exception_iterable[asgi-exceptions0] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', ErroredClassResource())

tests/test_error_handlers.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd95057b530>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950229e10>, 'CHECK...9e10>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950229e10>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ErroredClassResource.on_delete of <test_error_handlers.ErroredClassResource object at 0x7fd9501aa260>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestErrorHandler.test_handler_multiple_exception_iterable[asgi-exceptions1] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', ErroredClassResource())

tests/test_error_handlers.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9508e27a0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501fbc70>, 'CHECK...bc70>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501fbc70>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ErroredClassResource.on_delete of <test_error_handlers.ErroredClassResource object at 0x7fd950be1cc0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestErrorHandler.test_invalid_add_exception_handler_input[asgi-exceptions2] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', ErroredClassResource())

tests/test_error_handlers.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9508e2030>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950228160>, 'CHECK...8160>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950228160>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ErroredClassResource.on_delete of <test_error_handlers.ErroredClassResource object at 0x7fd950d30970>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestErrorHandler.test_invalid_add_exception_handler_input[asgi-exceptions3] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', ErroredClassResource())

tests/test_error_handlers.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9508e0270>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501fb760>, 'CHECK...b760>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501fb760>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ErroredClassResource.on_delete of <test_error_handlers.ErroredClassResource object at 0x7fd950df83d0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ ERROR at setup of TestErrorHandler.test_uncaught_error_else[asgi] _______

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', ErroredClassResource())

tests/test_error_handlers.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950840a50>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950228dc0>, 'CHECK...8dc0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950228dc0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ErroredClassResource.on_delete of <test_error_handlers.ErroredClassResource object at 0x7fd95016cb20>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestErrorHandler.test_error_precedence_subclass_order_indifference[asgi] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', ErroredClassResource())

tests/test_error_handlers.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950843d10>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95022ab00>, 'CHECK...ab00>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95022ab00>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ErroredClassResource.on_delete of <test_error_handlers.ErroredClassResource object at 0x7fd950a47610>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______ ERROR at setup of TestErrorHandler.test_handle_not_defined[asgi] _______

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', ErroredClassResource())

tests/test_error_handlers.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9508422d0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950228040>, 'CHECK...8040>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950228040>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ErroredClassResource.on_delete of <test_error_handlers.ErroredClassResource object at 0x7fd950c458a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___ ERROR at setup of TestErrorHandler.test_error_precedence_subclass[asgi] ____

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', ErroredClassResource())

tests/test_error_handlers.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9508e0660>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950229360>, 'CHECK...9360>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950229360>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ErroredClassResource.on_delete of <test_error_handlers.ErroredClassResource object at 0x7fd950d30b50>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ ERROR at setup of TestErrorHandler.test_converted_error[asgi] _________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', ErroredClassResource())

tests/test_error_handlers.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9508e33e0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501f93f0>, 'CHECK...93f0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501f93f0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ErroredClassResource.on_delete of <test_error_handlers.ErroredClassResource object at 0x7fd84591bcd0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestErrorHandler.test_handler_single_exception_iterable[asgi] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', ErroredClassResource())

tests/test_error_handlers.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9508e27a0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95022b490>, 'CHECK...b490>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95022b490>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ErroredClassResource.on_delete of <test_error_handlers.ErroredClassResource object at 0x7fd950ab05b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________ ERROR at setup of TestErrorHandler.test_subclass_error[asgi] _________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', ErroredClassResource())

tests/test_error_handlers.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950579af0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501fb880>, 'CHECK...b880>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501fb880>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ErroredClassResource.on_delete of <test_error_handlers.ErroredClassResource object at 0x7fd845945de0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________ ERROR at setup of TestErrorHandler.test_caught_error[asgi] __________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', ErroredClassResource())

tests/test_error_handlers.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd95057bbc0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501fa320>, 'CHECK...a320>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501fa320>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ErroredClassResource.on_delete of <test_error_handlers.ErroredClassResource object at 0x7fd950dc3370>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___ ERROR at setup of TestErrorHandler.test_error_precedence_duplicate[asgi] ___

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', ErroredClassResource())

tests/test_error_handlers.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950882490>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501fa9e0>, 'CHECK...a9e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501fa9e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ErroredClassResource.on_delete of <test_error_handlers.ErroredClassResource object at 0x7fd8459573d0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ ERROR at setup of TestNoBodyWithStatus.test_data_is_set[asgi] _________

self = <test_error_handlers.TestNoBodyWithStatus object at 0x7fd81210e7a0>
asgi = True

    @pytest.fixture()
    def body_client(self, asgi):
        app = create_app(asgi=asgi)
>       app.add_route('/error', NoBodyResource())

tests/test_error_handlers.py:275: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd95067f990>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501f9d80>, 'CHECK...9d80>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501f9d80>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method NoBodyResource.on_get of <test_error_handlers.NoBodyResource object at 0x7fd8117c5b40>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ ERROR at setup of TestNoBodyWithStatus.test_body_is_set[asgi] _________

self = <test_error_handlers.TestNoBodyWithStatus object at 0x7fd81210ea40>
asgi = True

    @pytest.fixture()
    def body_client(self, asgi):
        app = create_app(asgi=asgi)
>       app.add_route('/error', NoBodyResource())

tests/test_error_handlers.py:275: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9502e53f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95022be20>, 'CHECK...be20>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95022be20>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method NoBodyResource.on_get of <test_error_handlers.NoBodyResource object at 0x7fd9501fdd80>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ ERROR at setup of TestNoBodyWithStatus.test_media_is_set[asgi] ________

self = <test_error_handlers.TestNoBodyWithStatus object at 0x7fd81210e800>
asgi = True

    @pytest.fixture()
    def body_client(self, asgi):
        app = create_app(asgi=asgi)
>       app.add_route('/error', NoBodyResource())

tests/test_error_handlers.py:275: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9502e5e00>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95022ab00>, 'CHECK...ab00>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95022ab00>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method NoBodyResource.on_get of <test_error_handlers.NoBodyResource object at 0x7fd845954550>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________ ERROR at setup of TestCustomError.test_media_is_set[asgi] ___________

self = <test_error_handlers.TestCustomError object at 0x7fd81210eec0>
asgi = True

    @pytest.fixture()
    def body_client(self, asgi):
        app = create_app(asgi=asgi)
>       app.add_route('/error', CustomErrorResource())

tests/test_error_handlers.py:318: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9502e5700>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501f9090>, 'CHECK...9090>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501f9090>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CustomErrorResource.on_get of <test_error_handlers.CustomErrorResource object at 0x7fd84592ff40>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________ ERROR at setup of TestCustomError.test_body_is_set[asgi] ___________

self = <test_error_handlers.TestCustomError object at 0x7fd81210ef80>
asgi = True

    @pytest.fixture()
    def body_client(self, asgi):
        app = create_app(asgi=asgi)
>       app.add_route('/error', CustomErrorResource())

tests/test_error_handlers.py:318: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9502e4740>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501f9fc0>, 'CHECK...9fc0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501f9fc0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CustomErrorResource.on_get of <test_error_handlers.CustomErrorResource object at 0x7fd8459469e0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________ ERROR at setup of TestCustomError.test_data_is_set[asgi] ___________

self = <test_error_handlers.TestCustomError object at 0x7fd81210ef20>
asgi = True

    @pytest.fixture()
    def body_client(self, asgi):
        app = create_app(asgi=asgi)
>       app.add_route('/error', CustomErrorResource())

tests/test_error_handlers.py:318: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9502e6570>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501fb010>, 'CHECK...b010>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501fb010>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CustomErrorResource.on_get of <test_error_handlers.CustomErrorResource object at 0x7fd950cd9120>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__ ERROR at setup of TestRedirects.test_redirect[asgi-POST-302 Found-/found] ___

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = RedirectingResource()
>       app.add_route('/', resource)

tests/test_redirects.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950881e70>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95022bc70>, 'CHECK...bc70>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95022bc70>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method RedirectingResource.on_delete of <test_redirects.RedirectingResource object at 0x7fd950837b80>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestRedirects.test_redirect[asgi-PUT-303 See Other-/see/other] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = RedirectingResource()
>       app.add_route('/', resource)

tests/test_redirects.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9502e6ea0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95022a710>, 'CHECK...a710>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95022a710>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method RedirectingResource.on_delete of <test_redirects.RedirectingResource object at 0x7fd950d2ead0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestRedirects.test_redirect[asgi-GET-301 Moved Permanently-/moved/perm] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = RedirectingResource()
>       app.add_route('/', resource)

tests/test_redirects.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9502e4e40>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95022a5f0>, 'CHECK...a5f0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95022a5f0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method RedirectingResource.on_delete of <test_redirects.RedirectingResource object at 0x7fd950a23130>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestRedirects.test_redirect_with_headers[asgi-GET-301 Moved Permanently-/moved/perm] _

asgi = True

    @pytest.fixture
    def client_exercising_headers(asgi):
        app = create_app(asgi)
    
        resource = RedirectingResourceWithHeaders()
>       app.add_route('/', resource)

tests/test_redirects.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9502e4820>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950228f70>, 'CHECK...8f70>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950228f70>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method RedirectingResourceWithHeaders.on_delete of <test_redirects.RedirectingResourceWithHeaders object at 0x7fd845c39e10>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestRedirects.test_redirect_with_headers[asgi-PUT-303 See Other-/see/other] _

asgi = True

    @pytest.fixture
    def client_exercising_headers(asgi):
        app = create_app(asgi)
    
        resource = RedirectingResourceWithHeaders()
>       app.add_route('/', resource)

tests/test_redirects.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9502e69d0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95022add0>, 'CHECK...add0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95022add0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method RedirectingResourceWithHeaders.on_delete of <test_redirects.RedirectingResourceWithHeaders object at 0x7fd950a3d600>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestRedirects.test_redirect[asgi-HEAD-308 Permanent Redirect-/perm/redirect] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = RedirectingResource()
>       app.add_route('/', resource)

tests/test_redirects.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd95057bd10>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95022be20>, 'CHECK...be20>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95022be20>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method RedirectingResource.on_delete of <test_redirects.RedirectingResource object at 0x7fd845f55e70>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestRedirects.test_redirect_with_headers[asgi-DELETE-307 Temporary Redirect-/tmp/redirect] _

asgi = True

    @pytest.fixture
    def client_exercising_headers(asgi):
        app = create_app(asgi)
    
        resource = RedirectingResourceWithHeaders()
>       app.add_route('/', resource)

tests/test_redirects.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950841a10>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501fb640>, 'CHECK...b640>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501fb640>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method RedirectingResourceWithHeaders.on_delete of <test_redirects.RedirectingResourceWithHeaders object at 0x7fd950be3b80>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestRedirects.test_redirect_with_headers[asgi-HEAD-308 Permanent Redirect-/perm/redirect] _

asgi = True

    @pytest.fixture
    def client_exercising_headers(asgi):
        app = create_app(asgi)
    
        resource = RedirectingResourceWithHeaders()
>       app.add_route('/', resource)

tests/test_redirects.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950842960>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501fb400>, 'CHECK...b400>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501fb400>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method RedirectingResourceWithHeaders.on_delete of <test_redirects.RedirectingResourceWithHeaders object at 0x7fd95018e4d0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestRedirects.test_redirect_with_headers[asgi-POST-302 Found-/found] _

asgi = True

    @pytest.fixture
    def client_exercising_headers(asgi):
        app = create_app(asgi)
    
        resource = RedirectingResourceWithHeaders()
>       app.add_route('/', resource)

tests/test_redirects.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9508e1e70>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501fadd0>, 'CHECK...add0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501fadd0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method RedirectingResourceWithHeaders.on_delete of <test_redirects.RedirectingResourceWithHeaders object at 0x7fd950c448b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestRedirects.test_redirect[asgi-DELETE-307 Temporary Redirect-/tmp/redirect] _

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
    
        resource = RedirectingResource()
>       app.add_route('/', resource)

tests/test_redirects.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9508e0660>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501fba30>, 'CHECK...ba30>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501fba30>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method RedirectingResource.on_delete of <test_redirects.RedirectingResource object at 0x7fd9501c1c90>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestASGIServer.test_post_read_bounded_stream_no_body[_uvicorn_factory] _

request = <SubRequest 'server_base_url' for <Function test_post_read_bounded_stream_no_body[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
>                       pytest.fail('Server is not responding to requests')
E                       Failed: Server is not responding to requests

tests/asgi/test_asgi_servers.py:613: Failed
____ ERROR at setup of TestASGIServer.test_post_multiple[_uvicorn_factory] _____

request = <SubRequest 'server_base_url' for <Function test_post_multiple[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
>                       pytest.fail('Server is not responding to requests')
E                       Failed: Server is not responding to requests

tests/asgi/test_asgi_servers.py:613: Failed
_________ ERROR at setup of TestASGIServer.test_put[_uvicorn_factory] __________

request = <SubRequest 'server_base_url' for <Function test_put[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
>                       pytest.fail('Server is not responding to requests')
E                       Failed: Server is not responding to requests

tests/asgi/test_asgi_servers.py:613: Failed
_ ERROR at setup of TestASGIServer.test_post_invalid_content_length[_uvicorn_factory] _

request = <SubRequest 'server_base_url' for <Function test_post_invalid_content_length[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
>                       pytest.fail('Server is not responding to requests')
E                       Failed: Server is not responding to requests

tests/asgi/test_asgi_servers.py:613: Failed
_ ERROR at setup of TestASGIServer.test_sse_client_disconnects_early[_uvicorn_factory] _

request = <SubRequest 'server_base_url' for <Function test_sse_client_disconnects_early[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
>                       pytest.fail('Server is not responding to requests')
E                       Failed: Server is not responding to requests

tests/asgi/test_asgi_servers.py:613: Failed
_ ERROR at setup of TestASGIServer.test_post_read_bounded_stream_large[_uvicorn_factory] _

request = <SubRequest 'server_base_url' for <Function test_post_read_bounded_stream_large[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
>                       pytest.fail('Server is not responding to requests')
E                       Failed: Server is not responding to requests

tests/asgi/test_asgi_servers.py:613: Failed
_______ ERROR at setup of TestASGIServer.test_head_405[_uvicorn_factory] _______

request = <SubRequest 'server_base_url' for <Function test_head_405[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
>                       pytest.fail('Server is not responding to requests')
E                       Failed: Server is not responding to requests

tests/asgi/test_asgi_servers.py:613: Failed
_ ERROR at setup of TestASGIServer.test_stream_chunked_request[_uvicorn_factory] _

request = <SubRequest 'server_base_url' for <Function test_stream_chunked_request[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
>                       pytest.fail('Server is not responding to requests')
E                       Failed: Server is not responding to requests

tests/asgi/test_asgi_servers.py:613: Failed
_ ERROR at setup of TestASGIServer.test_post_multipart_form[_uvicorn_factory] __

request = <SubRequest 'server_base_url' for <Function test_post_multipart_form[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
>                       pytest.fail('Server is not responding to requests')
E                       Failed: Server is not responding to requests

tests/asgi/test_asgi_servers.py:613: Failed
_ ERROR at setup of TestASGIServer.test_post_read_bounded_stream[_uvicorn_factory] _

request = <SubRequest 'server_base_url' for <Function test_post_read_bounded_stream[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
>                       pytest.fail('Server is not responding to requests')
E                       Failed: Server is not responding to requests

tests/asgi/test_asgi_servers.py:613: Failed
_________ ERROR at setup of TestASGIServer.test_get[_uvicorn_factory] __________

request = <SubRequest 'server_base_url' for <Function test_get[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
>                       pytest.fail('Server is not responding to requests')
E                       Failed: Server is not responding to requests

tests/asgi/test_asgi_servers.py:613: Failed
_________ ERROR at setup of TestASGIServer.test_sse[_uvicorn_factory] __________

request = <SubRequest 'server_base_url' for <Function test_sse[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
>                       pytest.fail('Server is not responding to requests')
E                       Failed: Server is not responding to requests

tests/asgi/test_asgi_servers.py:613: Failed
_ ERROR at setup of TestWebSocket.test_close_code_on_unhandled_http_error[_uvicorn_factory] _

request = <SubRequest 'server_base_url' for <Function test_close_code_on_unhandled_http_error[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
>                       pytest.fail('Server is not responding to requests')
E                       Failed: Server is not responding to requests

tests/asgi/test_asgi_servers.py:613: Failed
__ ERROR at setup of TestWebSocket.test_recv_before_accept[_uvicorn_factory] ___

request = <SubRequest 'server_base_url' for <Function test_recv_before_accept[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
>                       pytest.fail('Server is not responding to requests')
E                       Failed: Server is not responding to requests

tests/asgi/test_asgi_servers.py:613: Failed
__ ERROR at setup of TestWebSocket.test_passing_path_params[_uvicorn_factory] __

request = <SubRequest 'server_base_url' for <Function test_passing_path_params[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
>                       pytest.fail('Server is not responding to requests')
E                       Failed: Server is not responding to requests

tests/asgi/test_asgi_servers.py:613: Failed
__ ERROR at setup of TestWebSocket.test_send_before_accept[_uvicorn_factory] ___

request = <SubRequest 'server_base_url' for <Function test_send_before_accept[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
>                       pytest.fail('Server is not responding to requests')
E                       Failed: Server is not responding to requests

tests/asgi/test_asgi_servers.py:613: Failed
__ ERROR at setup of TestWebSocket.test_rejected[_uvicorn_factory-4040-False] __

request = <SubRequest 'server_base_url' for <Function test_rejected[_uvicorn_factory-4040-False]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
>                       pytest.fail('Server is not responding to requests')
E                       Failed: Server is not responding to requests

tests/asgi/test_asgi_servers.py:613: Failed
__ ERROR at setup of TestWebSocket.test_invalid_close_code[_uvicorn_factory] ___

request = <SubRequest 'server_base_url' for <Function test_invalid_close_code[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
>                       pytest.fail('Server is not responding to requests')
E                       Failed: Server is not responding to requests

tests/asgi/test_asgi_servers.py:613: Failed
_ ERROR at setup of TestWebSocket.test_select_subprotocol_known[_uvicorn_factory-*-amqp] _

request = <SubRequest 'server_base_url' for <Function test_select_subprotocol_known[_uvicorn_factory-*-amqp]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
>                       pytest.fail('Server is not responding to requests')
E                       Failed: Server is not responding to requests

tests/asgi/test_asgi_servers.py:613: Failed
__ ERROR at setup of TestWebSocket.test_rejected[_uvicorn_factory-None-False] __

request = <SubRequest 'server_base_url' for <Function test_rejected[_uvicorn_factory-None-False]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
>                       pytest.fail('Server is not responding to requests')
E                       Failed: Server is not responding to requests

tests/asgi/test_asgi_servers.py:613: Failed
_ ERROR at setup of TestWebSocket.test_type_mismatch[_uvicorn_factory-data-send] _

request = <SubRequest 'server_base_url' for <Function test_type_mismatch[_uvicorn_factory-data-send]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
>                       pytest.fail('Server is not responding to requests')
E                       Failed: Server is not responding to requests

tests/asgi/test_asgi_servers.py:613: Failed
_ ERROR at setup of TestWebSocket.test_type_mismatch[_uvicorn_factory-data-recv] _

request = <SubRequest 'server_base_url' for <Function test_type_mismatch[_uvicorn_factory-data-recv]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
>                       pytest.fail('Server is not responding to requests')
E                       Failed: Server is not responding to requests

tests/asgi/test_asgi_servers.py:613: Failed
__ ERROR at setup of TestWebSocket.test_rejected[_uvicorn_factory-None-True] ___

request = <SubRequest 'server_base_url' for <Function test_rejected[_uvicorn_factory-None-True]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
>                       pytest.fail('Server is not responding to requests')
E                       Failed: Server is not responding to requests

tests/asgi/test_asgi_servers.py:613: Failed
_ ERROR at setup of TestWebSocket.test_disconnecting_client_early[_uvicorn_factory] _

request = <SubRequest 'server_base_url' for <Function test_disconnecting_client_early[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
>                       pytest.fail('Server is not responding to requests')
E                       Failed: Server is not responding to requests

tests/asgi/test_asgi_servers.py:613: Failed
_ ERROR at setup of TestWebSocket.test_type_mismatch[_uvicorn_factory-text-send] _

request = <SubRequest 'server_base_url' for <Function test_type_mismatch[_uvicorn_factory-text-send]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
>                       pytest.fail('Server is not responding to requests')
E                       Failed: Server is not responding to requests

tests/asgi/test_asgi_servers.py:613: Failed
___ ERROR at setup of TestWebSocket.test_missing_responder[_uvicorn_factory] ___

request = <SubRequest 'server_base_url' for <Function test_missing_responder[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
>                       pytest.fail('Server is not responding to requests')
E                       Failed: Server is not responding to requests

tests/asgi/test_asgi_servers.py:613: Failed
___ ERROR at setup of TestWebSocket.test_hello[_uvicorn_factory-4321-False] ____

request = <SubRequest 'server_base_url' for <Function test_hello[_uvicorn_factory-4321-False]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
>                       pytest.fail('Server is not responding to requests')
E                       Failed: Server is not responding to requests

tests/asgi/test_asgi_servers.py:613: Failed
_ ERROR at setup of TestWebSocket.test_type_mismatch[_uvicorn_factory-text-recv] _

request = <SubRequest 'server_base_url' for <Function test_type_mismatch[_uvicorn_factory-text-recv]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
>                       pytest.fail('Server is not responding to requests')
E                       Failed: Server is not responding to requests

tests/asgi/test_asgi_servers.py:613: Failed
____ ERROR at setup of TestWebSocket.test_hello[_uvicorn_factory-4321-True] ____

request = <SubRequest 'server_base_url' for <Function test_hello[_uvicorn_factory-4321-True]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
>                       pytest.fail('Server is not responding to requests')
E                       Failed: Server is not responding to requests

tests/asgi/test_asgi_servers.py:613: Failed
_ ERROR at setup of TestWebSocket.test_select_subprotocol_unknown[_uvicorn_factory] _

request = <SubRequest 'server_base_url' for <Function test_select_subprotocol_unknown[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
>                       pytest.fail('Server is not responding to requests')
E                       Failed: Server is not responding to requests

tests/asgi/test_asgi_servers.py:613: Failed
_ ERROR at setup of TestWebSocket.test_select_subprotocol_known[_uvicorn_factory-wamp-wamp] _

request = <SubRequest 'server_base_url' for <Function test_select_subprotocol_known[_uvicorn_factory-wamp-wamp]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
>                       pytest.fail('Server is not responding to requests')
E                       Failed: Server is not responding to requests

tests/asgi/test_asgi_servers.py:613: Failed
_ ERROR at setup of TestWebSocket.test_close_code_on_unhandled_error[_uvicorn_factory] _

request = <SubRequest 'server_base_url' for <Function test_close_code_on_unhandled_error[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
>                       pytest.fail('Server is not responding to requests')
E                       Failed: Server is not responding to requests

tests/asgi/test_asgi_servers.py:613: Failed
____ ERROR at setup of TestWebSocket.test_hello[_uvicorn_factory-None-True] ____

request = <SubRequest 'server_base_url' for <Function test_hello[_uvicorn_factory-None-True]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
>                       pytest.fail('Server is not responding to requests')
E                       Failed: Server is not responding to requests

tests/asgi/test_asgi_servers.py:613: Failed
__ ERROR at setup of TestWebSocket.test_rejected[_uvicorn_factory-4040-True] ___

request = <SubRequest 'server_base_url' for <Function test_rejected[_uvicorn_factory-4040-True]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
>                       pytest.fail('Server is not responding to requests')
E                       Failed: Server is not responding to requests

tests/asgi/test_asgi_servers.py:613: Failed
___ ERROR at setup of TestWebSocket.test_hello[_uvicorn_factory-None-False] ____

request = <SubRequest 'server_base_url' for <Function test_hello[_uvicorn_factory-None-False]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
>                       pytest.fail('Server is not responding to requests')
E                       Failed: Server is not responding to requests

tests/asgi/test_asgi_servers.py:613: Failed
________ ERROR at setup of TestNoBodyWithStatus.test_data_is_set[asgi] _________

asgi = True

    @pytest.fixture()
    def body_client(asgi):
        app = create_app(asgi=asgi)
>       app.add_route('/status', NoBodyResource())

tests/test_httpstatus.py:210: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9500d1930>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098caf0>, 'CHECK...caf0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098caf0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method NoBodyResource.on_get of <test_httpstatus.NoBodyResource object at 0x7fd950decb50>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ ERROR at setup of TestNoBodyWithStatus.test_media_is_set[asgi] ________

asgi = True

    @pytest.fixture()
    def body_client(asgi):
        app = create_app(asgi=asgi)
>       app.add_route('/status', NoBodyResource())

tests/test_httpstatus.py:210: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950600430>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950604d30>, 'CHECK...4d30>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950604d30>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method NoBodyResource.on_get of <test_httpstatus.NoBodyResource object at 0x7fd950c458d0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ ERROR at setup of TestNoBodyWithStatus.test_body_is_set[asgi] _________

asgi = True

    @pytest.fixture()
    def body_client(asgi):
        app = create_app(asgi=asgi)
>       app.add_route('/status', NoBodyResource())

tests/test_httpstatus.py:210: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9500a9230>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950198550>, 'CHECK...8550>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950198550>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method NoBodyResource.on_get of <test_httpstatus.NoBodyResource object at 0x7fd950a452a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____ ERROR at setup of TestHTTPStatus.test_raise_status_in_responder[True] _____

request = <SubRequest 'client' for <Function test_raise_status_in_responder[True]>>

    @pytest.fixture(params=[True, False])
    def client(request):
        app = create_app(asgi=request.param)
>       app.add_route('/status', TestStatusResource())

tests/test_httpstatus.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9500ad460>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95019b1c0>, 'CHECK...b1c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95019b1c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestStatusResource.on_delete of <test_httpstatus.TestStatusResource object at 0x7fd9500f3880>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__ ERROR at setup of TestHTTPStatus.test_raise_status_runs_after_hooks[True] ___

request = <SubRequest 'client' for <Function test_raise_status_runs_after_hooks[True]>>

    @pytest.fixture(params=[True, False])
    def client(request):
        app = create_app(asgi=request.param)
>       app.add_route('/status', TestStatusResource())

tests/test_httpstatus.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9500af920>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95005f0a0>, 'CHECK...f0a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95005f0a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestStatusResource.on_delete of <test_httpstatus.TestStatusResource object at 0x7fd84591ad40>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPStatus.test_raise_status_survives_after_hooks[True] _

request = <SubRequest 'client' for <Function test_raise_status_survives_after_hooks[True]>>

    @pytest.fixture(params=[True, False])
    def client(request):
        app = create_app(asgi=request.param)
>       app.add_route('/status', TestStatusResource())

tests/test_httpstatus.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9500ba960>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95005f760>, 'CHECK...f760>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95005f760>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestStatusResource.on_delete of <test_httpstatus.TestStatusResource object at 0x7fd9500f5ae0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___ ERROR at setup of TestHTTPStatus.test_raise_status_in_before_hook[True] ____

request = <SubRequest 'client' for <Function test_raise_status_in_before_hook[True]>>

    @pytest.fixture(params=[True, False])
    def client(request):
        app = create_app(asgi=request.param)
>       app.add_route('/status', TestStatusResource())

tests/test_httpstatus.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9500b9310>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95005e3b0>, 'CHECK...e3b0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95005e3b0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestStatusResource.on_delete of <test_httpstatus.TestStatusResource object at 0x7fd95018d660>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____ ERROR at setup of TestHTTPStatus.test_raise_status_empty_body[True] ______

request = <SubRequest 'client' for <Function test_raise_status_empty_body[True]>>

    @pytest.fixture(params=[True, False])
    def client(request):
        app = create_app(asgi=request.param)
>       app.add_route('/status', TestStatusResource())

tests/test_httpstatus.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9500ba9d0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501b5fc0>, 'CHECK...5fc0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501b5fc0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestStatusResource.on_delete of <test_httpstatus.TestStatusResource object at 0x7fd9500b0c70>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPStatusWithMiddleware.test_raise_status_in_process_request[True] _

request = <SubRequest 'hook_test_client' for <Function test_raise_status_in_process_request[True]>>

    @pytest.fixture(params=[True, False])
    def hook_test_client(request):
        app = create_app(asgi=request.param)
>       app.add_route('/status', TestHookResource())

tests/test_httpstatus.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9501017e0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501b5990>, 'CHECK...5990>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501b5990>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestHookResource.on_get of <test_httpstatus.TestHookResource object at 0x7fd9505b59f0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPStatusWithMiddleware.test_raise_status_in_process_resource[True] _

request = <SubRequest 'hook_test_client' for <Function test_raise_status_in_process_resource[True]>>

    @pytest.fixture(params=[True, False])
    def hook_test_client(request):
        app = create_app(asgi=request.param)
>       app.add_route('/status', TestHookResource())

tests/test_httpstatus.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd95009e110>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501b5e10>, 'CHECK...5e10>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501b5e10>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestHookResource.on_get of <test_httpstatus.TestHookResource object at 0x7fd950b94760>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ ERROR at setup of TestHTTPStatusWithMiddleware.test_raise_status_runs_process_response[True] _

request = <SubRequest 'hook_test_client' for <Function test_raise_status_runs_process_response[True]>>

    @pytest.fixture(params=[True, False])
    def hook_test_client(request):
        app = create_app(asgi=request.param)
>       app.add_route('/status', TestHookResource())

tests/test_httpstatus.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd95009d1c0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501b52d0>, 'CHECK...52d0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501b52d0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestHookResource.on_get of <test_httpstatus.TestHookResource object at 0x7fd9500f7a00>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________ ERROR at setup of test_same_site_empty_string[asgi] ______________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', CookieResource())

tests/test_cookies.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9500d3300>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9506070a0>, 'CHECK...70a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9506070a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CookieResource.on_get of <test_cookies.CookieResource object at 0x7fd845d11de0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ ERROR at setup of test_unset_cookies[asgi] __________________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', CookieResource())

tests/test_cookies.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9500ae340>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950606e60>, 'CHECK...6e60>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950606e60>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CookieResource.on_get of <test_cookies.CookieResource object at 0x7fd950051690>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______________ ERROR at setup of test_response_base_case[asgi] ________________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', CookieResource())

tests/test_cookies.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9500add90>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95019b910>, 'CHECK...b910>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95019b910>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CookieResource.on_get of <test_cookies.CookieResource object at 0x7fd845f554b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______________ ERROR at setup of test_response_unset_cookie[asgi] ______________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', CookieResource())

tests/test_cookies.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9500af7d0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95005d750>, 'CHECK...d750>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95005d750>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CookieResource.on_get of <test_cookies.CookieResource object at 0x7fd9500f7ca0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______________ ERROR at setup of test_cookie_expires_aware[asgi] _______________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', CookieResource())

tests/test_cookies.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9500afed0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501b7880>, 'CHECK...7880>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501b7880>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CookieResource.on_get of <test_cookies.CookieResource object at 0x7fd950095990>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______________ ERROR at setup of test_none_same_site_value[asgi] _______________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', CookieResource())

tests/test_cookies.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9500bb060>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95005d990>, 'CHECK...d990>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95005d990>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CookieResource.on_get of <test_cookies.CookieResource object at 0x7fd950d00d30>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________________ ERROR at setup of test_cookies_setable[asgi] _________________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', CookieResource())

tests/test_cookies.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9500b8740>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95005d480>, 'CHECK...d480>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95005d480>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CookieResource.on_get of <test_cookies.CookieResource object at 0x7fd950d2cdc0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ ERROR at setup of test_response_disable_secure_globally[asgi] _________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', CookieResource())

tests/test_cookies.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9500bb610>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95005f400>, 'CHECK...f400>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95005f400>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CookieResource.on_get of <test_cookies.CookieResource object at 0x7fd9501aa320>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______________ ERROR at setup of test_lax_same_site_value[asgi] _______________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', CookieResource())

tests/test_cookies.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9502982e0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501997e0>, 'CHECK...97e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501997e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CookieResource.on_get of <test_cookies.CookieResource object at 0x7fd9505a6050>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____ ERROR at setup of test_cookie_max_age_float_and_string[asgi-foostring] ____

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', CookieResource())

tests/test_cookies.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950299e00>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95005d630>, 'CHECK...d630>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95005d630>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CookieResource.on_get of <test_cookies.CookieResource object at 0x7fd9500952a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______________ ERROR at setup of test_response_complex_case[asgi] ______________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', CookieResource())

tests/test_cookies.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950298120>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95005f520>, 'CHECK...f520>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95005f520>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CookieResource.on_get of <test_cookies.CookieResource object at 0x7fd9500f54b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______________ ERROR at setup of test_cookie_expires_naive[asgi] _______________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', CookieResource())

tests/test_cookies.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd95029b450>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95005d750>, 'CHECK...d750>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95005d750>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CookieResource.on_get of <test_cookies.CookieResource object at 0x7fd95083aad0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____ ERROR at setup of test_cookie_max_age_float_and_string[asgi-foofloat] _____

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', CookieResource())

tests/test_cookies.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd95029be60>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95005e320>, 'CHECK...e320>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95005e320>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CookieResource.on_get of <test_cookies.CookieResource object at 0x7fd9505a7c70>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________ ERROR at setup of test_strict_same_site_value[asgi] ______________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', CookieResource())

tests/test_cookies.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950298660>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95005e5f0>, 'CHECK...e5f0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95005e5f0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CookieResource.on_get of <test_cookies.CookieResource object at 0x7fd950095c30>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________ ERROR at setup of test_unset_cookies_samesite[asgi] ______________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', CookieResource())

tests/test_cookies.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd95029a260>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501b5000>, 'CHECK...5000>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501b5000>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CookieResource.on_get of <test_cookies.CookieResource object at 0x7fd9505bd0c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________________ ERROR at setup of test_cookie_timezone[asgi] _________________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', CookieResource())

tests/test_cookies.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9500b95b0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501b6e60>, 'CHECK...6e60>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501b6e60>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CookieResource.on_get of <test_cookies.CookieResource object at 0x7fd9505e4100>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
=================================== FAILURES ===================================
___________________________ test_jsonchema_validator ___________________________

client = <falcon.testing.client.TestClient object at 0x7fd7fde66680>

    @pytest.mark.skipif(not pyximport, reason='Cython not installed')
    def test_jsonchema_validator(client):
        with disable_asgi_non_coroutine_wrapping():
            if CYTHON_COROUTINE_HINT:
>               client.app.add_route('/', _cythonized.TestResourceWithValidationNoHint())

tests/asgi/test_cythonized_asgi.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9517c3bc0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd81119b640>, 'CHECK...b640>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd81119b640>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestResourceWithValidationNoHint.on_get of <asgi._cythonized.TestResourceWithValidationNoHint object at 0x7fd811541390>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________________________ test_hooks __________________________________

client = <falcon.testing.client.TestClient object at 0x7fd950ecf8b0>

    @pytest.mark.skipif(not pyximport, reason='Cython not installed')
    def test_hooks(client):
        with disable_asgi_non_coroutine_wrapping():
            if CYTHON_COROUTINE_HINT:
>               client.app.add_route('/', _cythonized.TestResourceWithHooksNoHint())

tests/asgi/test_cythonized_asgi.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950ec0e40>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fd25fa30>, 'CHECK...fa30>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fd25fa30>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestResourceWithHooksNoHint.on_get of <asgi._cythonized.TestResourceWithHooksNoHint object at 0x7fd950ecf0a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ TestPostQueryParams.test_http_methods_body_expected[asgi-OPTIONS] _______

self = <test_query_params.TestPostQueryParams object at 0x7fd811a69720>
client = <falcon.testing.client.TestClient object at 0x7fd811e761a0>
resource = <test_query_params.Resource object at 0x7fd811e74940>
http_method = 'OPTIONS'

    @pytest.mark.parametrize(
        'http_method', ('POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS')
    )
    def test_http_methods_body_expected(self, client, resource, http_method):
>       client.app.add_route('/', resource)

tests/test_query_params.py:965: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950ed17e0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd914cd2d40>, 'CHECK...2d40>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd914cd2d40>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd811e74940>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________ TestPostQueryParams.test_empty_body_no_content_length[asgi] __________

self = <test_query_params.TestPostQueryParams object at 0x7fd811a6af80>
client = <falcon.testing.client.TestClient object at 0x7fd950d52dd0>
resource = <test_query_params.Resource object at 0x7fd950d53040>

    def test_empty_body_no_content_length(self, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:1006: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950b20580>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fd409bd0>, 'CHECK...9bd0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fd409bd0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950d53040>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________ TestPostQueryParams.test_explicitly_disable_auto_parse[asgi] _________

self = <test_query_params.TestPostQueryParams object at 0x7fd811a6b1f0>
client = <falcon.testing.client.TestClient object at 0x7fd8119128f0>
resource = <test_query_params.Resource object at 0x7fd811911300>

    def test_explicitly_disable_auto_parse(self, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:1013: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950b20200>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fde628c0>, 'CHECK...28c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fde628c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd811911300>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ TestPostQueryParams.test_http_methods_body_not_expected[asgi-GET] _______

self = <test_query_params.TestPostQueryParams object at 0x7fd811a6aaa0>
client = <falcon.testing.client.TestClient object at 0x7fd950d2ef80>
resource = <test_query_params.Resource object at 0x7fd950d2e770>
http_method = 'GET'

    @pytest.mark.parametrize('http_method', ('GET', 'HEAD'))
    def test_http_methods_body_not_expected(self, client, resource, http_method):
>       client.app.add_route('/', resource)

tests/test_query_params.py:977: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950b20a50>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fdffc3a0>, 'CHECK...c3a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fdffc3a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950d2e770>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______ TestPostQueryParams.test_http_methods_body_expected[asgi-DELETE] _______

self = <test_query_params.TestPostQueryParams object at 0x7fd811a69b40>
client = <falcon.testing.client.TestClient object at 0x7fd950c46530>
resource = <test_query_params.Resource object at 0x7fd950c47ac0>
http_method = 'DELETE'

    @pytest.mark.parametrize(
        'http_method', ('POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS')
    )
    def test_http_methods_body_expected(self, client, resource, http_method):
>       client.app.add_route('/', resource)

tests/test_query_params.py:965: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950ed21f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd914cd2830>, 'CHECK...2830>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd914cd2830>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950c47ac0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ TestPostQueryParams.test_asgi_raises_error __________________

self = <test_query_params.TestPostQueryParams object at 0x7fd811a6b460>
resource = <test_query_params.Resource object at 0x7fd950e86ec0>

    def test_asgi_raises_error(self, resource):
        app = create_app(asgi=True)
>       app.add_route('/', resource)

tests/test_query_params.py:1022: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950b19000>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fdfffd00>, 'CHECK...fd00>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fdfffd00>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950e86ec0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________________ TestPostQueryParams.test_non_ascii[asgi] ___________________

self = <test_query_params.TestPostQueryParams object at 0x7fd811a6ab30>
client = <falcon.testing.client.TestClient object at 0x7fd950dab8b0>
resource = <test_query_params.Resource object at 0x7fd950daa0e0>

    def test_non_ascii(self, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:988: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950b206d0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fded4b80>, 'CHECK...4b80>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fded4b80>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950daa0e0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ TestPostQueryParams.test_empty_body[asgi] ___________________

self = <test_query_params.TestPostQueryParams object at 0x7fd811a6ad10>
client = <falcon.testing.client.TestClient object at 0x7fd950c12d10>
resource = <test_query_params.Resource object at 0x7fd950c11e40>

    def test_empty_body(self, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:999: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950b203c0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fd19a5f0>, 'CHECK...a5f0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fd19a5f0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950c11e40>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ TestPostQueryParams.test_http_methods_body_not_expected[asgi-HEAD] ______

self = <test_query_params.TestPostQueryParams object at 0x7fd811a6aad0>
client = <falcon.testing.client.TestClient object at 0x7fd950de79a0>
resource = <test_query_params.Resource object at 0x7fd950de5d80>
http_method = 'HEAD'

    @pytest.mark.parametrize('http_method', ('GET', 'HEAD'))
    def test_http_methods_body_not_expected(self, client, resource, http_method):
>       client.app.add_route('/', resource)

tests/test_query_params.py:977: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950b213f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fd19a050>, 'CHECK...a050>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fd19a050>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950de5d80>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ TestPostQueryParams.test_http_methods_body_expected[asgi-POST] ________

self = <test_query_params.TestPostQueryParams object at 0x7fd811a6a470>
client = <falcon.testing.client.TestClient object at 0x7fd950dc35e0>
resource = <test_query_params.Resource object at 0x7fd950dc0e20>
http_method = 'POST'

    @pytest.mark.parametrize(
        'http_method', ('POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS')
    )
    def test_http_methods_body_expected(self, client, resource, http_method):
>       client.app.add_route('/', resource)

tests/test_query_params.py:965: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950b1bed0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fd499f30>, 'CHECK...9f30>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fd499f30>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950dc0e20>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______ TestPostQueryParams.test_http_methods_body_expected[asgi-PATCH] ________

self = <test_query_params.TestPostQueryParams object at 0x7fd811a69fc0>
client = <falcon.testing.client.TestClient object at 0x7fd950d23460>
resource = <test_query_params.Resource object at 0x7fd950d20940>
http_method = 'PATCH'

    @pytest.mark.parametrize(
        'http_method', ('POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS')
    )
    def test_http_methods_body_expected(self, client, resource, http_method):
>       client.app.add_route('/', resource)

tests/test_query_params.py:965: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950b1b990>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd914cd2b90>, 'CHECK...2b90>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd914cd2b90>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950d20940>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ TestPostQueryParams.test_http_methods_body_expected[asgi-PUT] _________

self = <test_query_params.TestPostQueryParams object at 0x7fd811a6a5c0>
client = <falcon.testing.client.TestClient object at 0x7fd950be9c00>
resource = <test_query_params.Resource object at 0x7fd950be8fa0>
http_method = 'PUT'

    @pytest.mark.parametrize(
        'http_method', ('POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS')
    )
    def test_http_methods_body_expected(self, client, resource, http_method):
>       client.app.add_route('/', resource)

tests/test_query_params.py:965: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950ec8580>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fdffe950>, 'CHECK...e950>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fdffe950>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950be8fa0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___ TestPostQueryParamsDefaultBehavior.test_dont_auto_parse_by_default[True] ___

self = <test_query_params.TestPostQueryParamsDefaultBehavior object at 0x7fd811a6b700>
asgi = True

    def test_dont_auto_parse_by_default(self, asgi):
        app = create_app(asgi)
        resource = testing.SimpleTestResource()
>       app.add_route('/', resource)

tests/test_query_params.py:1035: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950b22030>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517f9f30>, 'CHECK...9f30>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517f9f30>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fd950da9450>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_boolean_blank[simulate_request_post_query_params-asgi] __

self = <test_query_params.TestQueryParams object at 0x7fd811c18a60>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950db04c0>
resource = <test_query_params.Resource object at 0x7fd950db1e70>

    def test_boolean_blank(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:591: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950b22ff0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517f88b0>, 'CHECK...88b0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517f88b0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950db1e70>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_date_missing_param[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fd811c1a9e0>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950d1a830>
resource = <test_query_params.Resource object at 0x7fd950d1a080>

    def test_get_date_missing_param(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:807: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950b23bc0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517fb910>, 'CHECK...b910>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517fb910>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950d1a080>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_dict_valid[simulate_request_get_query_params-asgi] __

self = <test_query_params.TestQueryParams object at 0x7fd811a689d0>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950c74790>
resource = <test_query_params.Resource object at 0x7fd950c777f0>

    def test_get_dict_valid(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:892: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950ba3ed0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517fb400>, 'CHECK...b400>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517fb400>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950c777f0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_post_query_params-asgi-t=1,,2&t=3,4-False-expected3] _

self = <test_query_params.TestQueryParams object at 0x7fd811bd0fa0>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950b28f40>
resource = <test_query_params.Resource object at 0x7fd950b284c0>
qs = 't=1,,2&t=3,4', keep_blank = False, expected = ['1', '2', '3', '4']

    @pytest.mark.parametrize(
        'qs, keep_blank, expected',
        [
            ('t=1&t=3,4', False, ['1', '3', '4']),
            ('t=1&t=2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', True, ['1', '', '2', '3', '4']),
            ('t=1,2&t=3,4,,5', False, ['1', '2', '3', '4', '5']),
            ('t=1&t=,1,4,,5', False, ['1', '1', '4', '5']),
            ('t=1&t=,1,4,,5', True, ['1', '', '1', '4', '', '5']),
            (
                't=1&t=,1,4,,5&t=a,b,c',
                True,
                ['1', '', '1', '4', '', '5', 'a', 'b', 'c'],
            ),
        ],
    )
    def test_option_auto_parse_qs_csv_multiple_fields_true(
        self,
        simulate_request,
        client,
        resource,
        qs,
        keep_blank,
        expected,
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950ba38b0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fded63b0>, 'CHECK...63b0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fded63b0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950b284c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____ TestQueryParams.test_int_neg[simulate_request_post_query_params-asgi] _____

self = <test_query_params.TestQueryParams object at 0x7fd811bd3ca0>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950c556f0>
resource = <test_query_params.Resource object at 0x7fd950c57760>

    def test_int_neg(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:402: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950ba0040>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fde628c0>, 'CHECK...28c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fde628c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950c57760>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_date_missing_param[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fd811c1afe0>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950db3370>
resource = <test_query_params.Resource object at 0x7fd950db2500>

    def test_get_date_missing_param(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:807: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950ba2dc0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fd5409d0>, 'CHECK...09d0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fd5409d0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950db2500>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_date_store[simulate_request_get_query_params-asgi] __

self = <test_query_params.TestQueryParams object at 0x7fd811c1b130>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950dc2170>
resource = <test_query_params.Resource object at 0x7fd950dc31c0>

    def test_get_date_store(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:825: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950ba1ee0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517fa7a0>, 'CHECK...a7a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517fa7a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950dc31c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__ TestQueryParams.test_allowed_names[simulate_request_get_query_params-asgi] __

self = <test_query_params.TestQueryParams object at 0x7fd811bd1f60>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950d7c4c0>
resource = <test_query_params.Resource object at 0x7fd950d7d990>

    def test_allowed_names(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:301: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950b1b680>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517f97e0>, 'CHECK...97e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517f97e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950d7d990>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_percent_encoded[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fd811b930a0>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950dc5c90>
resource = <test_query_params.Resource object at 0x7fd950dc4880>

    def test_percent_encoded(self, simulate_request, client, resource):
        query_string = 'id=23,42&q=%e8%b1%86+%e7%93%a3'
>       client.app.add_route('/', resource)

tests/test_query_params.py:144: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950b18eb0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517fb130>, 'CHECK...b130>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517fb130>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950dc4880>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ TestQueryParams.test_none[simulate_request_post_query_params-asgi] ______

self = <test_query_params.TestQueryParams object at 0x7fd811b927d0>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950e63100>
resource = <test_query_params.Resource object at 0x7fd950e617e0>

    def test_none(self, simulate_request, client, resource):
        query_string = ''
>       client.app.add_route('/', resource)  # TODO: DRY up this setup logic

tests/test_query_params.py:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950b22880>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fd19a170>, 'CHECK...a170>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fd19a170>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950e617e0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ TestQueryParams.test_uuid[simulate_request_post_query_params-asgi] ______

self = <test_query_params.TestQueryParams object at 0x7fd811e36aa0>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950c6b130>
resource = <test_query_params.Resource object at 0x7fd950c6b370>

    def test_uuid(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:502: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950b1b990>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fdffe950>, 'CHECK...e950>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fdffe950>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950c6b370>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_post_query_params-asgi-t=1,2&t=3,4-False-expected2] _

self = <test_query_params.TestQueryParams object at 0x7fd811bd0f10>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950d8b400>
resource = <test_query_params.Resource object at 0x7fd950d89540>
qs = 't=1,2&t=3,4', keep_blank = False, expected = ['1', '2', '3', '4']

    @pytest.mark.parametrize(
        'qs, keep_blank, expected',
        [
            ('t=1&t=3,4', False, ['1', '3', '4']),
            ('t=1&t=2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', True, ['1', '', '2', '3', '4']),
            ('t=1,2&t=3,4,,5', False, ['1', '2', '3', '4', '5']),
            ('t=1&t=,1,4,,5', False, ['1', '1', '4', '5']),
            ('t=1&t=,1,4,,5', True, ['1', '', '1', '4', '', '5']),
            (
                't=1&t=,1,4,,5&t=a,b,c',
                True,
                ['1', '', '1', '4', '', '5', 'a', 'b', 'c'],
            ),
        ],
    )
    def test_option_auto_parse_qs_csv_multiple_fields_true(
        self,
        simulate_request,
        client,
        resource,
        qs,
        keep_blank,
        expected,
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950ba3760>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fde628c0>, 'CHECK...28c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fde628c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950d89540>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_post_query_params-asgi-t=1,2&t=3,4,,5-False-expected5] _

self = <test_query_params.TestQueryParams object at 0x7fd811bd10c0>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd8118a87f0>
resource = <test_query_params.Resource object at 0x7fd8118abc40>
qs = 't=1,2&t=3,4,,5', keep_blank = False, expected = ['1', '2', '3', '4', '5']

    @pytest.mark.parametrize(
        'qs, keep_blank, expected',
        [
            ('t=1&t=3,4', False, ['1', '3', '4']),
            ('t=1&t=2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', True, ['1', '', '2', '3', '4']),
            ('t=1,2&t=3,4,,5', False, ['1', '2', '3', '4', '5']),
            ('t=1&t=,1,4,,5', False, ['1', '1', '4', '5']),
            ('t=1&t=,1,4,,5', True, ['1', '', '1', '4', '', '5']),
            (
                't=1&t=,1,4,,5&t=a,b,c',
                True,
                ['1', '', '1', '4', '', '5', 'a', 'b', 'c'],
            ),
        ],
    )
    def test_option_auto_parse_qs_csv_multiple_fields_true(
        self,
        simulate_request,
        client,
        resource,
        qs,
        keep_blank,
        expected,
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950ba1070>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517fab90>, 'CHECK...ab90>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517fab90>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd8118abc40>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_date_valid_with_format[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fd811c1b3a0>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950df91b0>
resource = <test_query_params.Resource object at 0x7fd950dfbaf0>

    def test_get_date_valid_with_format(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:814: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950b21460>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517f8310>, 'CHECK...8310>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517f8310>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950dfbaf0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_percent_encoded[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fd811b936d0>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950c5a5c0>
resource = <test_query_params.Resource object at 0x7fd950c5a830>

    def test_percent_encoded(self, simulate_request, client, resource):
        query_string = 'id=23,42&q=%e8%b1%86+%e7%93%a3'
>       client.app.add_route('/', resource)

tests/test_query_params.py:144: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950b236f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517fbf40>, 'CHECK...bf40>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517fbf40>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950c5a830>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_complex_false[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fd811bd0430>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950cd8b50>
resource = <test_query_params.Resource object at 0x7fd950cdaf20>

    def test_option_auto_parse_qs_csv_complex_false(
        self, simulate_request, client, resource
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:245: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950bc6030>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d248b0>, 'CHECK...48b0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d248b0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950cdaf20>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____ TestQueryParams.test_list_type[simulate_request_get_query_params-asgi] ____

self = <test_query_params.TestQueryParams object at 0x7fd811c187f0>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950d31bd0>
resource = <test_query_params.Resource object at 0x7fd950d31c30>

    def test_list_type(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:609: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950bc5150>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d244c0>, 'CHECK...44c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d244c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950d31c30>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ TestQueryParams.test_none[simulate_request_get_query_params-asgi] _______

self = <test_query_params.TestQueryParams object at 0x7fd811b92530>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950dc63e0>
resource = <test_query_params.Resource object at 0x7fd950dc7700>

    def test_none(self, simulate_request, client, resource):
        query_string = ''
>       client.app.add_route('/', resource)  # TODO: DRY up this setup logic

tests/test_query_params.py:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950bc5540>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fd198c10>, 'CHECK...8c10>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fd198c10>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950dc7700>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________ TestQueryParams.test_get_param_as_json_handler_json[asgi] ___________

self = <test_query_params.TestQueryParams object at 0x7fd811a69750>
client = <falcon.testing.client.TestClient object at 0x7fd950c33fa0>
resource = <test_query_params.Resource object at 0x7fd950c323b0>

    def test_get_param_as_json_handler_json(self, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:927: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950bc4a50>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517f9870>, 'CHECK...9870>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517f9870>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950c323b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_post_query_params-asgi-t=1&t=3,4-False-expected0] _

self = <test_query_params.TestQueryParams object at 0x7fd811bd0df0>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950c56410>
resource = <test_query_params.Resource object at 0x7fd950c56f50>
qs = 't=1&t=3,4', keep_blank = False, expected = ['1', '3', '4']

    @pytest.mark.parametrize(
        'qs, keep_blank, expected',
        [
            ('t=1&t=3,4', False, ['1', '3', '4']),
            ('t=1&t=2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', True, ['1', '', '2', '3', '4']),
            ('t=1,2&t=3,4,,5', False, ['1', '2', '3', '4', '5']),
            ('t=1&t=,1,4,,5', False, ['1', '1', '4', '5']),
            ('t=1&t=,1,4,,5', True, ['1', '', '1', '4', '', '5']),
            (
                't=1&t=,1,4,,5&t=a,b,c',
                True,
                ['1', '', '1', '4', '', '5', 'a', 'b', 'c'],
            ),
        ],
    )
    def test_option_auto_parse_qs_csv_multiple_fields_true(
        self,
        simulate_request,
        client,
        resource,
        qs,
        keep_blank,
        expected,
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950bc4510>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517fa050>, 'CHECK...a050>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517fa050>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950c56f50>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_date_store[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fd811c1b760>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950e86b60>
resource = <test_query_params.Resource object at 0x7fd950e84040>

    def test_get_date_store(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:825: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950ba1e00>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517fa9e0>, 'CHECK...a9e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517fa9e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950e84040>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__ TestQueryParams.test_boolean_blank[simulate_request_get_query_params-asgi] __

self = <test_query_params.TestQueryParams object at 0x7fd811c18460>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950d62a70>
resource = <test_query_params.Resource object at 0x7fd950d621a0>

    def test_boolean_blank(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:591: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950b21f50>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d24430>, 'CHECK...4430>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d24430>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950d621a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____ TestQueryParams.test_float_neg[simulate_request_get_query_params-asgi] ____

self = <test_query_params.TestQueryParams object at 0x7fd811bd3a00>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950de77c0>
resource = <test_query_params.Resource object at 0x7fd950de6e90>

    def test_float_neg(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:478: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950b221f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d24d30>, 'CHECK...4d30>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d24d30>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950de6e90>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_multiple_form_keys[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fd811c187c0>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950c59ae0>
resource = <test_query_params.Resource object at 0x7fd950c5a5f0>

    def test_multiple_form_keys(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:751: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950ba0430>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517fb0a0>, 'CHECK...b0a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517fb0a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950c5a5f0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_multiple_form_keys[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fd811c19b40>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950e3a590>
resource = <test_query_params.Resource object at 0x7fd950e3b8b0>

    def test_multiple_form_keys(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:751: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950b218c0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517fa8c0>, 'CHECK...a8c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517fa8c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950e3b8b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_required[simulate_request_post_query_params-asgi-get_param] _

self = <test_query_params.TestQueryParams object at 0x7fd811bd2f80>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950e63610>
resource = <test_query_params.Resource object at 0x7fd950e62ec0>
method_name = 'get_param'

    @pytest.mark.parametrize(
        'method_name',
        [
            'get_param',
            'get_param_as_int',
            'get_param_as_float',
            'get_param_as_uuid',
            'get_param_as_bool',
            'get_param_as_list',
        ],
    )
    def test_required(self, simulate_request, client, resource, method_name):
>       client.app.add_route('/', resource)

tests/test_query_params.py:334: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950bc4120>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d277f0>, 'CHECK...77f0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d277f0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950e62ec0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_date_invalid[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fd811c1b4f0>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950e85f60>
resource = <test_query_params.Resource object at 0x7fd950e86cb0>

    def test_get_date_invalid(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:835: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950bc59a0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d272e0>, 'CHECK...72e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d272e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950e86cb0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_get_query_params-asgi-t=1,2&t=3,4,,5-False-expected5] _

self = <test_query_params.TestQueryParams object at 0x7fd811bd0760>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950d321d0>
resource = <test_query_params.Resource object at 0x7fd950d326e0>
qs = 't=1,2&t=3,4,,5', keep_blank = False, expected = ['1', '2', '3', '4', '5']

    @pytest.mark.parametrize(
        'qs, keep_blank, expected',
        [
            ('t=1&t=3,4', False, ['1', '3', '4']),
            ('t=1&t=2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', True, ['1', '', '2', '3', '4']),
            ('t=1,2&t=3,4,,5', False, ['1', '2', '3', '4', '5']),
            ('t=1&t=,1,4,,5', False, ['1', '1', '4', '5']),
            ('t=1&t=,1,4,,5', True, ['1', '', '1', '4', '', '5']),
            (
                't=1&t=,1,4,,5&t=a,b,c',
                True,
                ['1', '', '1', '4', '', '5', 'a', 'b', 'c'],
            ),
        ],
    )
    def test_option_auto_parse_qs_csv_multiple_fields_true(
        self,
        simulate_request,
        client,
        resource,
        qs,
        keep_blank,
        expected,
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950bcf4c0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d27d90>, 'CHECK...7d90>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d27d90>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950d326e0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_post_query_params-asgi-t=1&t=,1,4,,5-False-expected6] _

self = <test_query_params.TestQueryParams object at 0x7fd811bd1150>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950b2a2c0>
resource = <test_query_params.Resource object at 0x7fd950b28eb0>
qs = 't=1&t=,1,4,,5', keep_blank = False, expected = ['1', '1', '4', '5']

    @pytest.mark.parametrize(
        'qs, keep_blank, expected',
        [
            ('t=1&t=3,4', False, ['1', '3', '4']),
            ('t=1&t=2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', True, ['1', '', '2', '3', '4']),
            ('t=1,2&t=3,4,,5', False, ['1', '2', '3', '4', '5']),
            ('t=1&t=,1,4,,5', False, ['1', '1', '4', '5']),
            ('t=1&t=,1,4,,5', True, ['1', '', '1', '4', '', '5']),
            (
                't=1&t=,1,4,,5&t=a,b,c',
                True,
                ['1', '', '1', '4', '', '5', 'a', 'b', 'c'],
            ),
        ],
    )
    def test_option_auto_parse_qs_csv_multiple_fields_true(
        self,
        simulate_request,
        client,
        resource,
        qs,
        keep_blank,
        expected,
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950bcfc30>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d244c0>, 'CHECK...44c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d244c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950b28eb0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_false[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fd811bd00d0>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950c30ac0>
resource = <test_query_params.Resource object at 0x7fd950c31a50>

    def test_option_auto_parse_qs_csv_multiple_fields_false(
        self, simulate_request, client, resource
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:191: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950bcf530>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517fa050>, 'CHECK...a050>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517fa050>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950c31a50>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___ TestQueryParams.test_has_param[simulate_request_post_query_params-asgi] ____

self = <test_query_params.TestQueryParams object at 0x7fd811a6a260>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950ef2aa0>
resource = <test_query_params.Resource object at 0x7fd950ef3af0>

    def test_has_param(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:947: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950bcd9a0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d27d90>, 'CHECK...7d90>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d27d90>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950ef3af0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ TestQueryParams.test_uuid[simulate_request_get_query_params-asgi] _______

self = <test_query_params.TestQueryParams object at 0x7fd811b6ac80>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950be82e0>
resource = <test_query_params.Resource object at 0x7fd950beb730>

    def test_uuid(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:502: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950bc62d0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d243a0>, 'CHECK...43a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d243a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950beb730>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_date_valid_with_format[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fd811c1ad70>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950be56f0>
resource = <test_query_params.Resource object at 0x7fd950be4670>

    def test_get_date_valid_with_format(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:814: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950ba3ed0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d27eb0>, 'CHECK...7eb0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d27eb0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950be4670>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_list_type_blank[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fd811c191e0>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950d7d210>
resource = <test_query_params.Resource object at 0x7fd950d7f820>

    def test_list_type_blank(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:652: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950b20190>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d27b50>, 'CHECK...7b50>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d27b50>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950d7f820>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_list_type_blank[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fd811c18bb0>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950eceb60>
resource = <test_query_params.Resource object at 0x7fd950ecf760>

    def test_list_type_blank(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:652: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950bcdcb0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d25e10>, 'CHECK...5e10>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d25e10>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950ecf760>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_datetime_store[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fd811a68280>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950d517e0>
resource = <test_query_params.Resource object at 0x7fd950d53d30>

    def test_get_datetime_store(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:871: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950b9e2d0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d253f0>, 'CHECK...53f0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d253f0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950d53d30>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_multiple_keys_as_int[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fd811c19c90>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950d21d80>
resource = <test_query_params.Resource object at 0x7fd950d214b0>

    def test_multiple_keys_as_int(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:772: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950b9c120>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d24160>, 'CHECK...4160>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d24160>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950d214b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_datetime_valid[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fd811c1b8b0>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950d82500>
resource = <test_query_params.Resource object at 0x7fd950d81c60>

    def test_get_datetime_valid(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:845: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950b9c900>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517fa200>, 'CHECK...a200>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9517fa200>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950d81c60>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_list_transformer[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fd811b69b70>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950c305b0>
resource = <test_query_params.Resource object at 0x7fd950c33eb0>

    def test_list_transformer(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:702: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950b9cf90>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d27d90>, 'CHECK...7d90>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d27d90>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950c33eb0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_dict_valid[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fd811a69000>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950d7f820>
resource = <test_query_params.Resource object at 0x7fd950d7db10>

    def test_get_dict_valid(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:892: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950b1b220>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d27760>, 'CHECK...7760>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d27760>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950d7db10>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_datetime_store[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fd811a68880>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950ef3550>
resource = <test_query_params.Resource object at 0x7fd950ef0550>

    def test_get_datetime_store(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:871: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950bc5a10>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d26320>, 'CHECK...6320>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d26320>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950ef0550>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______ TestQueryParams.test_int[simulate_request_get_query_params-asgi] _______

self = <test_query_params.TestQueryParams object at 0x7fd811bd2980>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950df1c90>
resource = <test_query_params.Resource object at 0x7fd950df0370>

    def test_int(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:350: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950bcf060>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d70ee0>, 'CHECK...0ee0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d70ee0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950df0370>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_dict_store[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fd811a69600>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950deee60>
resource = <test_query_params.Resource object at 0x7fd950dee860>

    def test_get_dict_store(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:908: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950bcf6f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d72b90>, 'CHECK...2b90>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d72b90>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950dee860>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ TestQueryParams.test_float[simulate_request_get_query_params-asgi] ______

self = <test_query_params.TestQueryParams object at 0x7fd811bd3a30>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950dc6860>
resource = <test_query_params.Resource object at 0x7fd950df7ee0>

    def test_float(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:426: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950b21d90>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d24ee0>, 'CHECK...4ee0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d24ee0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950df7ee0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_post_query_params-asgi-t=1&t=,1,4,,5-True-expected7] _

self = <test_query_params.TestQueryParams object at 0x7fd811bd11e0>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950c596c0>
resource = <test_query_params.Resource object at 0x7fd950c59de0>
qs = 't=1&t=,1,4,,5', keep_blank = True, expected = ['1', '', '1', '4', '', '5']

    @pytest.mark.parametrize(
        'qs, keep_blank, expected',
        [
            ('t=1&t=3,4', False, ['1', '3', '4']),
            ('t=1&t=2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', True, ['1', '', '2', '3', '4']),
            ('t=1,2&t=3,4,,5', False, ['1', '2', '3', '4', '5']),
            ('t=1&t=,1,4,,5', False, ['1', '1', '4', '5']),
            ('t=1&t=,1,4,,5', True, ['1', '', '1', '4', '', '5']),
            (
                't=1&t=,1,4,,5&t=a,b,c',
                True,
                ['1', '', '1', '4', '', '5', 'a', 'b', 'c'],
            ),
        ],
    )
    def test_option_auto_parse_qs_csv_multiple_fields_true(
        self,
        simulate_request,
        client,
        resource,
        qs,
        keep_blank,
        expected,
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950b9f610>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d24160>, 'CHECK...4160>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d24160>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950c59de0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___ TestQueryParams.test_list_type[simulate_request_post_query_params-asgi] ____

self = <test_query_params.TestQueryParams object at 0x7fd811c18e20>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950db1d50>
resource = <test_query_params.Resource object at 0x7fd950db3340>

    def test_list_type(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:609: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950b9d930>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d71240>, 'CHECK...1240>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d71240>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950db3340>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_simple_true[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fd811b93cd0>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950d36bf0>
resource = <test_query_params.Resource object at 0x7fd950d36980>

    def test_option_auto_parse_qs_csv_simple_true(
        self, simulate_request, client, resource
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:175: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950b9d2a0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d700d0>, 'CHECK...00d0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d700d0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950d36980>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____ TestQueryParams.test_simple[simulate_request_get_query_params-asgi] ______

self = <test_query_params.TestQueryParams object at 0x7fd811b92ce0>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950d182b0>
resource = <test_query_params.Resource object at 0x7fd950d18070>

    def test_simple(self, simulate_request, client, resource):
        query_string = 'marker=deadbeef&limit=25'
>       client.app.add_route('/', resource)

tests/test_query_params.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950bced50>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d713f0>, 'CHECK...13f0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d713f0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950d18070>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_allowed_names[simulate_request_post_query_params-asgi] __

self = <test_query_params.TestQueryParams object at 0x7fd811bd2590>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950dc5f90>
resource = <test_query_params.Resource object at 0x7fd950dc57b0>

    def test_allowed_names(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:301: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950bcc510>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d73250>, 'CHECK...3250>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d73250>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950dc57b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_multiple_keys_as_float[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fd811c1a680>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950d61cf0>
resource = <test_query_params.Resource object at 0x7fd950d63190>

    def test_multiple_keys_as_float(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:779: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950b39690>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d73ac0>, 'CHECK...3ac0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d73ac0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950d63190>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_datetime_valid_with_format[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fd811a684c0>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950df6e60>
resource = <test_query_params.Resource object at 0x7fd950df5030>

    def test_get_datetime_valid_with_format(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:860: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950b3a180>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d24ee0>, 'CHECK...4ee0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d24ee0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950df5030>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_simple_false[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fd811b93a90>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950a5d690>
resource = <test_query_params.Resource object at 0x7fd950a5d9f0>

    def test_option_auto_parse_qs_csv_simple_false(
        self, simulate_request, client, resource
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:160: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950b38820>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d26cb0>, 'CHECK...6cb0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d26cb0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950a5d9f0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_get_query_params-asgi-t=1&t=2&t=3,4-False-expected1] _

self = <test_query_params.TestQueryParams object at 0x7fd811bd0520>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950db12a0>
resource = <test_query_params.Resource object at 0x7fd950db04c0>
qs = 't=1&t=2&t=3,4', keep_blank = False, expected = ['1', '2', '3', '4']

    @pytest.mark.parametrize(
        'qs, keep_blank, expected',
        [
            ('t=1&t=3,4', False, ['1', '3', '4']),
            ('t=1&t=2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', True, ['1', '', '2', '3', '4']),
            ('t=1,2&t=3,4,,5', False, ['1', '2', '3', '4', '5']),
            ('t=1&t=,1,4,,5', False, ['1', '1', '4', '5']),
            ('t=1&t=,1,4,,5', True, ['1', '', '1', '4', '', '5']),
            (
                't=1&t=,1,4,,5&t=a,b,c',
                True,
                ['1', '', '1', '4', '', '5', 'a', 'b', 'c'],
            ),
        ],
    )
    def test_option_auto_parse_qs_csv_multiple_fields_true(
        self,
        simulate_request,
        client,
        resource,
        qs,
        keep_blank,
        expected,
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950b38e40>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d70f70>, 'CHECK...0f70>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d70f70>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950db04c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_required[simulate_request_post_query_params-asgi-get_param_as_bool] _

self = <test_query_params.TestQueryParams object at 0x7fd811bd31c0>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950beef80>
resource = <test_query_params.Resource object at 0x7fd950befa30>
method_name = 'get_param_as_bool'

    @pytest.mark.parametrize(
        'method_name',
        [
            'get_param',
            'get_param_as_int',
            'get_param_as_float',
            'get_param_as_uuid',
            'get_param_as_bool',
            'get_param_as_list',
        ],
    )
    def test_required(self, simulate_request, client, resource, method_name):
>       client.app.add_route('/', resource)

tests/test_query_params.py:334: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950ba3ed0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d715a0>, 'CHECK...15a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d715a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950befa30>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_dict_invalid[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fd811a699c0>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950c132e0>
resource = <test_query_params.Resource object at 0x7fd950c13dc0>

    def test_get_dict_invalid(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:918: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950b9c580>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d735b0>, 'CHECK...35b0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d735b0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950c13dc0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_required[simulate_request_get_query_params-asgi-get_param_as_list] _

self = <test_query_params.TestQueryParams object at 0x7fd811bd2c50>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950dc3c40>
resource = <test_query_params.Resource object at 0x7fd950dc3eb0>
method_name = 'get_param_as_list'

    @pytest.mark.parametrize(
        'method_name',
        [
            'get_param',
            'get_param_as_int',
            'get_param_as_float',
            'get_param_as_uuid',
            'get_param_as_bool',
            'get_param_as_list',
        ],
    )
    def test_required(self, simulate_request, client, resource, method_name):
>       client.app.add_route('/', resource)

tests/test_query_params.py:334: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950b9e9d0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d72950>, 'CHECK...2950>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d72950>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950dc3eb0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_default_auto_parse_csv_behaviour[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fd811bd1870>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950e3b910>
resource = <test_query_params.Resource object at 0x7fd950e39960>

    def test_default_auto_parse_csv_behaviour(self, simulate_request, client, resource):
>       client.app.add_route('/', resource=resource)

tests/test_query_params.py:279: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950bcc820>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d739a0>, 'CHECK...39a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d739a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950e39960>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_false[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fd811b92cb0>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950df6080>
resource = <test_query_params.Resource object at 0x7fd950df50f0>

    def test_option_auto_parse_qs_csv_multiple_fields_false(
        self, simulate_request, client, resource
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:191: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950b9d1c0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d72950>, 'CHECK...2950>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d72950>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950df50f0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_multiple_keys_as_bool[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fd811c198d0>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950a5c5b0>
resource = <test_query_params.Resource object at 0x7fd950a5cf70>

    def test_multiple_keys_as_bool(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:765: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950b39b60>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d70430>, 'CHECK...0430>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d70430>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950a5cf70>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_dict_store[simulate_request_get_query_params-asgi] __

self = <test_query_params.TestQueryParams object at 0x7fd811a685e0>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950a46050>
resource = <test_query_params.Resource object at 0x7fd950a45840>

    def test_get_dict_store(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:908: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950b3b8b0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950b50dc0>, 'CHECK...0dc0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950b50dc0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950a45840>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_datetime_invalid[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fd811a68c40>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950c10880>
resource = <test_query_params.Resource object at 0x7fd950c11c90>

    def test_get_datetime_invalid(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:882: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950b38660>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d72320>, 'CHECK...2320>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d72320>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950c11c90>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_multiple_form_keys_as_list[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fd811c1a7d0>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950cd9480>
resource = <test_query_params.Resource object at 0x7fd950cda590>

    def test_multiple_form_keys_as_list(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:786: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950b9f5a0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d72830>, 'CHECK...2830>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d72830>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950cda590>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_bad_percentage[simulate_request_get_query_params-asgi] __

self = <test_query_params.TestQueryParams object at 0x7fd811bd1c00>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950df7970>
resource = <test_query_params.Resource object at 0x7fd950df7a00>

    def test_bad_percentage(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:290: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950c41310>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950b51cf0>, 'CHECK...1cf0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950b51cf0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950df7a00>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_get_query_params-asgi-t=1,2&t=3,4-False-expected2] _

self = <test_query_params.TestQueryParams object at 0x7fd811bd05b0>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950ef0970>
resource = <test_query_params.Resource object at 0x7fd950e62f50>
qs = 't=1,2&t=3,4', keep_blank = False, expected = ['1', '2', '3', '4']

    @pytest.mark.parametrize(
        'qs, keep_blank, expected',
        [
            ('t=1&t=3,4', False, ['1', '3', '4']),
            ('t=1&t=2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', True, ['1', '', '2', '3', '4']),
            ('t=1,2&t=3,4,,5', False, ['1', '2', '3', '4', '5']),
            ('t=1&t=,1,4,,5', False, ['1', '1', '4', '5']),
            ('t=1&t=,1,4,,5', True, ['1', '', '1', '4', '', '5']),
            (
                't=1&t=,1,4,,5&t=a,b,c',
                True,
                ['1', '', '1', '4', '', '5', 'a', 'b', 'c'],
            ),
        ],
    )
    def test_option_auto_parse_qs_csv_multiple_fields_true(
        self,
        simulate_request,
        client,
        resource,
        qs,
        keep_blank,
        expected,
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950c40c80>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d72170>, 'CHECK...2170>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d72170>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950e62f50>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_multiple_form_keys_as_list[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fd811c1a020>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950a5df30>
resource = <test_query_params.Resource object at 0x7fd950a5d0f0>

    def test_multiple_form_keys_as_list(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:786: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950c42ce0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d739a0>, 'CHECK...39a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d739a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950a5d0f0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_required[simulate_request_get_query_params-asgi-get_param_as_int] _

self = <test_query_params.TestQueryParams object at 0x7fd811bd2a10>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950bbb7c0>
resource = <test_query_params.Resource object at 0x7fd950bb84c0>
method_name = 'get_param_as_int'

    @pytest.mark.parametrize(
        'method_name',
        [
            'get_param',
            'get_param_as_int',
            'get_param_as_float',
            'get_param_as_uuid',
            'get_param_as_bool',
            'get_param_as_list',
        ],
    )
    def test_required(self, simulate_request, client, resource, method_name):
>       client.app.add_route('/', resource)

tests/test_query_params.py:334: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950c42e30>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d73370>, 'CHECK...3370>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d73370>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950bb84c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_dict_missing_param[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fd811a69240>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950d7eb90>
resource = <test_query_params.Resource object at 0x7fd950d7c7c0>

    def test_get_dict_missing_param(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:900: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950c41770>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950b53010>, 'CHECK...3010>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950b53010>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950d7c7c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_default_auto_parse_csv_behaviour[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fd811bd1840>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950be2bf0>
resource = <test_query_params.Resource object at 0x7fd950be0e80>

    def test_default_auto_parse_csv_behaviour(self, simulate_request, client, resource):
>       client.app.add_route('/', resource=resource)

tests/test_query_params.py:279: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950b3b300>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950b53520>, 'CHECK...3520>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950b53520>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950be0e80>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_post_query_params-asgi-t=1&t=2&t=3,4-False-expected1] _

self = <test_query_params.TestQueryParams object at 0x7fd811bd0e80>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950c12320>
resource = <test_query_params.Resource object at 0x7fd950c132b0>
qs = 't=1&t=2&t=3,4', keep_blank = False, expected = ['1', '2', '3', '4']

    @pytest.mark.parametrize(
        'qs, keep_blank, expected',
        [
            ('t=1&t=3,4', False, ['1', '3', '4']),
            ('t=1&t=2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', True, ['1', '', '2', '3', '4']),
            ('t=1,2&t=3,4,,5', False, ['1', '2', '3', '4', '5']),
            ('t=1&t=,1,4,,5', False, ['1', '1', '4', '5']),
            ('t=1&t=,1,4,,5', True, ['1', '', '1', '4', '', '5']),
            (
                't=1&t=,1,4,,5&t=a,b,c',
                True,
                ['1', '', '1', '4', '', '5', 'a', 'b', 'c'],
            ),
        ],
    )
    def test_option_auto_parse_qs_csv_multiple_fields_true(
        self,
        simulate_request,
        client,
        resource,
        qs,
        keep_blank,
        expected,
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950b39620>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950b53b50>, 'CHECK...3b50>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950b53b50>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950c132b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_get_query_params-asgi-t=1&t=,1,4,,5-False-expected6] _

self = <test_query_params.TestQueryParams object at 0x7fd811b92d10>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950d19db0>
resource = <test_query_params.Resource object at 0x7fd950d19990>
qs = 't=1&t=,1,4,,5', keep_blank = False, expected = ['1', '1', '4', '5']

    @pytest.mark.parametrize(
        'qs, keep_blank, expected',
        [
            ('t=1&t=3,4', False, ['1', '3', '4']),
            ('t=1&t=2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', True, ['1', '', '2', '3', '4']),
            ('t=1,2&t=3,4,,5', False, ['1', '2', '3', '4', '5']),
            ('t=1&t=,1,4,,5', False, ['1', '1', '4', '5']),
            ('t=1&t=,1,4,,5', True, ['1', '', '1', '4', '', '5']),
            (
                't=1&t=,1,4,,5&t=a,b,c',
                True,
                ['1', '', '1', '4', '', '5', 'a', 'b', 'c'],
            ),
        ],
    )
    def test_option_auto_parse_qs_csv_multiple_fields_true(
        self,
        simulate_request,
        client,
        resource,
        qs,
        keep_blank,
        expected,
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950b9d5b0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950b50e50>, 'CHECK...0e50>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950b50e50>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950d19990>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_get_query_params-asgi-t=1,,2&t=3,4-True-expected4] _

self = <test_query_params.TestQueryParams object at 0x7fd811bd06d0>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950ece530>
resource = <test_query_params.Resource object at 0x7fd950ece110>
qs = 't=1,,2&t=3,4', keep_blank = True, expected = ['1', '', '2', '3', '4']

    @pytest.mark.parametrize(
        'qs, keep_blank, expected',
        [
            ('t=1&t=3,4', False, ['1', '3', '4']),
            ('t=1&t=2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', True, ['1', '', '2', '3', '4']),
            ('t=1,2&t=3,4,,5', False, ['1', '2', '3', '4', '5']),
            ('t=1&t=,1,4,,5', False, ['1', '1', '4', '5']),
            ('t=1&t=,1,4,,5', True, ['1', '', '1', '4', '', '5']),
            (
                't=1&t=,1,4,,5&t=a,b,c',
                True,
                ['1', '', '1', '4', '', '5', 'a', 'b', 'c'],
            ),
        ],
    )
    def test_option_auto_parse_qs_csv_multiple_fields_true(
        self,
        simulate_request,
        client,
        resource,
        qs,
        keep_blank,
        expected,
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950c7d9a0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950b53880>, 'CHECK...3880>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950b53880>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950ece110>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_get_query_params-asgi-t=1&t=,1,4,,5-True-expected7] _

self = <test_query_params.TestQueryParams object at 0x7fd811bd07c0>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950daa800>
resource = <test_query_params.Resource object at 0x7fd950daaef0>
qs = 't=1&t=,1,4,,5', keep_blank = True, expected = ['1', '', '1', '4', '', '5']

    @pytest.mark.parametrize(
        'qs, keep_blank, expected',
        [
            ('t=1&t=3,4', False, ['1', '3', '4']),
            ('t=1&t=2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', True, ['1', '', '2', '3', '4']),
            ('t=1,2&t=3,4,,5', False, ['1', '2', '3', '4', '5']),
            ('t=1&t=,1,4,,5', False, ['1', '1', '4', '5']),
            ('t=1&t=,1,4,,5', True, ['1', '', '1', '4', '', '5']),
            (
                't=1&t=,1,4,,5&t=a,b,c',
                True,
                ['1', '', '1', '4', '', '5', 'a', 'b', 'c'],
            ),
        ],
    )
    def test_option_auto_parse_qs_csv_multiple_fields_true(
        self,
        simulate_request,
        client,
        resource,
        qs,
        keep_blank,
        expected,
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950c7d150>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d72200>, 'CHECK...2200>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d72200>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950daaef0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____ TestQueryParams.test_boolean[simulate_request_get_query_params-asgi] _____

self = <test_query_params.TestQueryParams object at 0x7fd811c183d0>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950b28820>
resource = <test_query_params.Resource object at 0x7fd950b2a4d0>

    def test_boolean(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:531: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950c7ed50>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d73370>, 'CHECK...3370>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d73370>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950b2a4d0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_complex_false[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fd811bd1ab0>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950be52a0>
resource = <test_query_params.Resource object at 0x7fd950be5930>

    def test_option_auto_parse_qs_csv_complex_false(
        self, simulate_request, client, resource
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:245: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950c7e030>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950b51f30>, 'CHECK...1f30>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950b51f30>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950be5930>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_dict_missing_param[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fd811a68640>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950d188e0>
resource = <test_query_params.Resource object at 0x7fd950d1a050>

    def test_get_dict_missing_param(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:900: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950c40d60>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950b52a70>, 'CHECK...2a70>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950b52a70>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950d1a050>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_datetime_missing_param[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fd811c1b8e0>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950ecdde0>
resource = <test_query_params.Resource object at 0x7fd950ecebc0>

    def test_get_datetime_missing_param(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:853: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950b391c0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950b52b00>, 'CHECK...2b00>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950b52b00>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950ecebc0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_bad_percentage[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fd811bd21d0>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950b02e00>
resource = <test_query_params.Resource object at 0x7fd950b01660>

    def test_bad_percentage(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:290: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950c7cf20>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950b52dd0>, 'CHECK...2dd0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950b52dd0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950b01660>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____ TestQueryParams.test_boolean[simulate_request_post_query_params-asgi] _____

self = <test_query_params.TestQueryParams object at 0x7fd811c186a0>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950e39180>
resource = <test_query_params.Resource object at 0x7fd950e39d80>

    def test_boolean(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:531: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950c43530>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950b51750>, 'CHECK...1750>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950b51750>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950e39d80>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_multiple_keys_as_bool[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fd811c19f00>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950ef2560>
resource = <test_query_params.Resource object at 0x7fd950ef0940>

    def test_multiple_keys_as_bool(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:765: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950c40cf0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950b51f30>, 'CHECK...1f30>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950b51f30>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950ef0940>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_required[simulate_request_post_query_params-asgi-get_param_as_float] _

self = <test_query_params.TestQueryParams object at 0x7fd811bd30a0>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950c6a200>
resource = <test_query_params.Resource object at 0x7fd950c6bd60>
method_name = 'get_param_as_float'

    @pytest.mark.parametrize(
        'method_name',
        [
            'get_param',
            'get_param_as_int',
            'get_param_as_float',
            'get_param_as_uuid',
            'get_param_as_bool',
            'get_param_as_list',
        ],
    )
    def test_required(self, simulate_request, client, resource, method_name):
>       client.app.add_route('/', resource)

tests/test_query_params.py:334: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950bcc430>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950b53eb0>, 'CHECK...3eb0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950b53eb0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950c6bd60>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_required[simulate_request_get_query_params-asgi-get_param] _

self = <test_query_params.TestQueryParams object at 0x7fd811bd2890>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950bb8a30>
resource = <test_query_params.Resource object at 0x7fd950bb9000>
method_name = 'get_param'

    @pytest.mark.parametrize(
        'method_name',
        [
            'get_param',
            'get_param_as_int',
            'get_param_as_float',
            'get_param_as_uuid',
            'get_param_as_bool',
            'get_param_as_list',
        ],
    )
    def test_required(self, simulate_request, client, resource, method_name):
>       client.app.add_route('/', resource)

tests/test_query_params.py:334: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950c7ccf0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950c951b0>, 'CHECK...51b0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950c951b0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950bb9000>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_post_query_params-asgi-t=1&t=,1,4,,5&t=a,b,c-True-expected8] _

self = <test_query_params.TestQueryParams object at 0x7fd811bd1270>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950df61d0>
resource = <test_query_params.Resource object at 0x7fd950df4130>
qs = 't=1&t=,1,4,,5&t=a,b,c', keep_blank = True
expected = ['1', '', '1', '4', '', '5', ...]

    @pytest.mark.parametrize(
        'qs, keep_blank, expected',
        [
            ('t=1&t=3,4', False, ['1', '3', '4']),
            ('t=1&t=2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', True, ['1', '', '2', '3', '4']),
            ('t=1,2&t=3,4,,5', False, ['1', '2', '3', '4', '5']),
            ('t=1&t=,1,4,,5', False, ['1', '1', '4', '5']),
            ('t=1&t=,1,4,,5', True, ['1', '', '1', '4', '', '5']),
            (
                't=1&t=,1,4,,5&t=a,b,c',
                True,
                ['1', '', '1', '4', '', '5', 'a', 'b', 'c'],
            ),
        ],
    )
    def test_option_auto_parse_qs_csv_multiple_fields_true(
        self,
        simulate_request,
        client,
        resource,
        qs,
        keep_blank,
        expected,
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950c7d930>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950c948b0>, 'CHECK...48b0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950c948b0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950df4130>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_required[simulate_request_post_query_params-asgi-get_param_as_int] _

self = <test_query_params.TestQueryParams object at 0x7fd811bd3010>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950dc3430>
resource = <test_query_params.Resource object at 0x7fd950dc39a0>
method_name = 'get_param_as_int'

    @pytest.mark.parametrize(
        'method_name',
        [
            'get_param',
            'get_param_as_int',
            'get_param_as_float',
            'get_param_as_uuid',
            'get_param_as_bool',
            'get_param_as_list',
        ],
    )
    def test_required(self, simulate_request, client, resource, method_name):
>       client.app.add_route('/', resource)

tests/test_query_params.py:334: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950cf46d0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950c95870>, 'CHECK...5870>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950c95870>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950dc39a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ TestQueryParams.test_blank[simulate_request_get_query_params-asgi] ______

self = <test_query_params.TestQueryParams object at 0x7fd811b92920>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950beb280>
resource = <test_query_params.Resource object at 0x7fd950be8670>

    def test_blank(self, simulate_request, client, resource):
        query_string = 'marker='
>       client.app.add_route('/', resource)

tests/test_query_params.py:118: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950cf43c0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950c964d0>, 'CHECK...64d0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950c964d0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950be8670>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ TestQueryParams.test_int[simulate_request_post_query_params-asgi] _______

self = <test_query_params.TestQueryParams object at 0x7fd811bd38e0>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950c57010>
resource = <test_query_params.Resource object at 0x7fd950c56b00>

    def test_int(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:350: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950c40c80>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950c96f80>, 'CHECK...6f80>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950c96f80>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950c56b00>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________ TestQueryParams.test_get_param_as_json_no_handler_json[asgi] _________

self = <test_query_params.TestQueryParams object at 0x7fd811a69b10>
client = <falcon.testing.client.TestClient object at 0x7fd950d7c190>
resource = <test_query_params.Resource object at 0x7fd950d7d420>

    def test_get_param_as_json_no_handler_json(self, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:938: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950c7ccf0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950c94b80>, 'CHECK...4b80>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950c94b80>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950d7d420>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_get_query_params-asgi-t=1&t=3,4-False-expected0] _

self = <test_query_params.TestQueryParams object at 0x7fd811bd0490>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950bb81f0>
resource = <test_query_params.Resource object at 0x7fd950bb9c30>
qs = 't=1&t=3,4', keep_blank = False, expected = ['1', '3', '4']

    @pytest.mark.parametrize(
        'qs, keep_blank, expected',
        [
            ('t=1&t=3,4', False, ['1', '3', '4']),
            ('t=1&t=2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', True, ['1', '', '2', '3', '4']),
            ('t=1,2&t=3,4,,5', False, ['1', '2', '3', '4', '5']),
            ('t=1&t=,1,4,,5', False, ['1', '1', '4', '5']),
            ('t=1&t=,1,4,,5', True, ['1', '', '1', '4', '', '5']),
            (
                't=1&t=,1,4,,5&t=a,b,c',
                True,
                ['1', '', '1', '4', '', '5', 'a', 'b', 'c'],
            ),
        ],
    )
    def test_option_auto_parse_qs_csv_multiple_fields_true(
        self,
        simulate_request,
        client,
        resource,
        qs,
        keep_blank,
        expected,
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950c7f300>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950c94a60>, 'CHECK...4a60>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950c94a60>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950bb9c30>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_required[simulate_request_post_query_params-asgi-get_param_as_uuid] _

self = <test_query_params.TestQueryParams object at 0x7fd811bd3130>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950df5db0>
resource = <test_query_params.Resource object at 0x7fd950df7370>
method_name = 'get_param_as_uuid'

    @pytest.mark.parametrize(
        'method_name',
        [
            'get_param',
            'get_param_as_int',
            'get_param_as_float',
            'get_param_as_uuid',
            'get_param_as_bool',
            'get_param_as_list',
        ],
    )
    def test_required(self, simulate_request, client, resource, method_name):
>       client.app.add_route('/', resource)

tests/test_query_params.py:334: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950cf6f10>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950c970a0>, 'CHECK...70a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950c970a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950df7370>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____ TestQueryParams.test_simple[simulate_request_post_query_params-asgi] _____

self = <test_query_params.TestQueryParams object at 0x7fd811b93310>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950dc09d0>
resource = <test_query_params.Resource object at 0x7fd950dc0e80>

    def test_simple(self, simulate_request, client, resource):
        query_string = 'marker=deadbeef&limit=25'
>       client.app.add_route('/', resource)

tests/test_query_params.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950cf7c30>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950c968c0>, 'CHECK...68c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950c968c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950dc0e80>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_datetime_missing_param[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fd811a68100>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950df93f0>
resource = <test_query_params.Resource object at 0x7fd950dfbbb0>

    def test_get_datetime_missing_param(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:853: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950cf4820>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950c96050>, 'CHECK...6050>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950c96050>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950dfbbb0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_dict_invalid[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fd811a69390>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950a21480>
resource = <test_query_params.Resource object at 0x7fd950a20df0>

    def test_get_dict_invalid(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:918: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950c437d0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950b537f0>, 'CHECK...37f0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950b537f0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950a20df0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_date_invalid[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fd811c1bb20>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950dab400>
resource = <test_query_params.Resource object at 0x7fd950dab940>

    def test_get_date_invalid(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:835: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950cf6d50>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950c948b0>, 'CHECK...48b0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950c948b0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950dab940>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_required[simulate_request_get_query_params-asgi-get_param_as_float] _

self = <test_query_params.TestQueryParams object at 0x7fd811bd2aa0>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950db3a90>
resource = <test_query_params.Resource object at 0x7fd950db3430>
method_name = 'get_param_as_float'

    @pytest.mark.parametrize(
        'method_name',
        [
            'get_param',
            'get_param_as_int',
            'get_param_as_float',
            'get_param_as_uuid',
            'get_param_as_bool',
            'get_param_as_list',
        ],
    )
    def test_required(self, simulate_request, client, resource, method_name):
>       client.app.add_route('/', resource)

tests/test_query_params.py:334: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950cf5310>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950c96170>, 'CHECK...6170>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950c96170>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950db3430>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_datetime_valid[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fd811c1bd00>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950bef3d0>
resource = <test_query_params.Resource object at 0x7fd950bedd50>

    def test_get_datetime_valid(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:845: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950c7ccf0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950c971c0>, 'CHECK...71c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950c971c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950bedd50>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____ TestQueryParams.test_has_param[simulate_request_get_query_params-asgi] ____

self = <test_query_params.TestQueryParams object at 0x7fd811a69d80>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950ab1240>
resource = <test_query_params.Resource object at 0x7fd950ab33a0>

    def test_has_param(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:947: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950c7e030>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950c97760>, 'CHECK...7760>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950c97760>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950ab33a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_date_valid[simulate_request_get_query_params-asgi] __

self = <test_query_params.TestQueryParams object at 0x7fd811c1a9b0>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950c336d0>
resource = <test_query_params.Resource object at 0x7fd950c32950>

    def test_get_date_valid(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:799: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950a60900>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950cd4280>, 'CHECK...4280>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950cd4280>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950c32950>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_post_query_params-asgi-t=1,,2&t=3,4-True-expected4] _

self = <test_query_params.TestQueryParams object at 0x7fd811bd1030>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950c102e0>
resource = <test_query_params.Resource object at 0x7fd950c13bb0>
qs = 't=1,,2&t=3,4', keep_blank = True, expected = ['1', '', '2', '3', '4']

    @pytest.mark.parametrize(
        'qs, keep_blank, expected',
        [
            ('t=1&t=3,4', False, ['1', '3', '4']),
            ('t=1&t=2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', True, ['1', '', '2', '3', '4']),
            ('t=1,2&t=3,4,,5', False, ['1', '2', '3', '4', '5']),
            ('t=1&t=,1,4,,5', False, ['1', '1', '4', '5']),
            ('t=1&t=,1,4,,5', True, ['1', '', '1', '4', '', '5']),
            (
                't=1&t=,1,4,,5&t=a,b,c',
                True,
                ['1', '', '1', '4', '', '5', 'a', 'b', 'c'],
            ),
        ],
    )
    def test_option_auto_parse_qs_csv_multiple_fields_true(
        self,
        simulate_request,
        client,
        resource,
        qs,
        keep_blank,
        expected,
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950a60ba0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950c952d0>, 'CHECK...52d0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950c952d0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950c13bb0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_multiple_keys_as_int[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fd811c1a2c0>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950d63fa0>
resource = <test_query_params.Resource object at 0x7fd950d61810>

    def test_multiple_keys_as_int(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:772: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950a604a0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950c96560>, 'CHECK...6560>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950c96560>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950d61810>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_required[simulate_request_get_query_params-asgi-get_param_as_bool] _

self = <test_query_params.TestQueryParams object at 0x7fd811bd2bc0>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950c6afe0>
resource = <test_query_params.Resource object at 0x7fd950c68490>
method_name = 'get_param_as_bool'

    @pytest.mark.parametrize(
        'method_name',
        [
            'get_param',
            'get_param_as_int',
            'get_param_as_float',
            'get_param_as_uuid',
            'get_param_as_bool',
            'get_param_as_list',
        ],
    )
    def test_required(self, simulate_request, client, resource, method_name):
>       client.app.add_route('/', resource)

tests/test_query_params.py:334: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950a62500>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950cd4d30>, 'CHECK...4d30>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950cd4d30>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950c68490>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_multiple_keys_as_float[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fd811c1a050>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950dc4370>
resource = <test_query_params.Resource object at 0x7fd950dc65f0>

    def test_multiple_keys_as_float(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:779: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950a633e0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950cd5cf0>, 'CHECK...5cf0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950cd5cf0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950dc65f0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_required[simulate_request_get_query_params-asgi-get_param_as_uuid] _

self = <test_query_params.TestQueryParams object at 0x7fd811bd2b30>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950c5b190>
resource = <test_query_params.Resource object at 0x7fd950c593c0>
method_name = 'get_param_as_uuid'

    @pytest.mark.parametrize(
        'method_name',
        [
            'get_param',
            'get_param_as_int',
            'get_param_as_float',
            'get_param_as_uuid',
            'get_param_as_bool',
            'get_param_as_list',
        ],
    )
    def test_required(self, simulate_request, client, resource, method_name):
>       client.app.add_route('/', resource)

tests/test_query_params.py:334: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950c7c6d0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950cd4c10>, 'CHECK...4c10>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950cd4c10>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950c593c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_list_transformer[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fd811c19510>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950be4730>
resource = <test_query_params.Resource object at 0x7fd950be7310>

    def test_list_transformer(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:702: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950cf5150>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950cd71c0>, 'CHECK...71c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950cd71c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950be7310>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____ TestQueryParams.test_blank[simulate_request_post_query_params-asgi] ______

self = <test_query_params.TestQueryParams object at 0x7fd811b92f50>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950cd9960>
resource = <test_query_params.Resource object at 0x7fd950cdb310>

    def test_blank(self, simulate_request, client, resource):
        query_string = 'marker='
>       client.app.add_route('/', resource)

tests/test_query_params.py:118: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950afa110>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950c97640>, 'CHECK...7640>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950c97640>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950cdb310>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_date_valid[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fd811c1ac20>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950c5a1a0>
resource = <test_query_params.Resource object at 0x7fd950c5ae90>

    def test_get_date_valid(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:799: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950af9c40>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950c96b90>, 'CHECK...6b90>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950c96b90>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950c5ae90>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_get_query_params-asgi-t=1,,2&t=3,4-False-expected3] _

self = <test_query_params.TestQueryParams object at 0x7fd811bd0640>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950c31db0>
resource = <test_query_params.Resource object at 0x7fd950c302b0>
qs = 't=1,,2&t=3,4', keep_blank = False, expected = ['1', '2', '3', '4']

    @pytest.mark.parametrize(
        'qs, keep_blank, expected',
        [
            ('t=1&t=3,4', False, ['1', '3', '4']),
            ('t=1&t=2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', True, ['1', '', '2', '3', '4']),
            ('t=1,2&t=3,4,,5', False, ['1', '2', '3', '4', '5']),
            ('t=1&t=,1,4,,5', False, ['1', '1', '4', '5']),
            ('t=1&t=,1,4,,5', True, ['1', '', '1', '4', '', '5']),
            (
                't=1&t=,1,4,,5&t=a,b,c',
                True,
                ['1', '', '1', '4', '', '5', 'a', 'b', 'c'],
            ),
        ],
    )
    def test_option_auto_parse_qs_csv_multiple_fields_true(
        self,
        simulate_request,
        client,
        resource,
        qs,
        keep_blank,
        expected,
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950af93f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950cd5120>, 'CHECK...5120>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950cd5120>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950c302b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____ TestQueryParams.test_default[simulate_request_post_query_params-asgi] _____

self = <test_query_params.TestQueryParams object at 0x7fd811b92b90>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950a8de40>
resource = <test_query_params.Resource object at 0x7fd950a8ca90>

    def test_default(self, simulate_request, client, resource):
        default = 'foobar'
        query_string = ''
>       client.app.add_route('/', resource)  # TODO: DRY up this setup logic

tests/test_query_params.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950af8c80>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950cd7910>, 'CHECK...7910>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950cd7910>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950a8ca90>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____ TestQueryParams.test_int_neg[simulate_request_get_query_params-asgi] _____

self = <test_query_params.TestQueryParams object at 0x7fd811bd3670>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950ecffa0>
resource = <test_query_params.Resource object at 0x7fd950ecdff0>

    def test_int_neg(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:402: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950bcc430>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950cd49d0>, 'CHECK...49d0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950cd49d0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950ecdff0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_simple_false[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fd811b93460>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950de5a50>
resource = <test_query_params.Resource object at 0x7fd950de7cd0>

    def test_option_auto_parse_qs_csv_simple_false(
        self, simulate_request, client, resource
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:160: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950a62f80>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950cd4700>, 'CHECK...4700>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950cd4700>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950de7cd0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____ TestQueryParams.test_default[simulate_request_get_query_params-asgi] _____

self = <test_query_params.TestQueryParams object at 0x7fd811b92560>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950c74580>
resource = <test_query_params.Resource object at 0x7fd950c752a0>

    def test_default(self, simulate_request, client, resource):
        default = 'foobar'
        query_string = ''
>       client.app.add_route('/', resource)  # TODO: DRY up this setup logic

tests/test_query_params.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950a63ca0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950cd76d0>, 'CHECK...76d0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950cd76d0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950c752a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____ TestQueryParams.test_float[simulate_request_post_query_params-asgi] ______

self = <test_query_params.TestQueryParams object at 0x7fd811c180a0>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950cdbac0>
resource = <test_query_params.Resource object at 0x7fd950cdbdf0>

    def test_float(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:426: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950c7fe60>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950cd79a0>, 'CHECK...79a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950cd79a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950cdbdf0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_simple_true[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fd811b93820>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950d19bd0>
resource = <test_query_params.Resource object at 0x7fd950c5a740>

    def test_option_auto_parse_qs_csv_simple_true(
        self, simulate_request, client, resource
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:175: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950afa810>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950c977f0>, 'CHECK...77f0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950c977f0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950c5a740>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_get_query_params-asgi-t=1&t=,1,4,,5&t=a,b,c-True-expected8] _

self = <test_query_params.TestQueryParams object at 0x7fd811bd0850>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950c84c10>
resource = <test_query_params.Resource object at 0x7fd950c85c90>
qs = 't=1&t=,1,4,,5&t=a,b,c', keep_blank = True
expected = ['1', '', '1', '4', '', '5', ...]

    @pytest.mark.parametrize(
        'qs, keep_blank, expected',
        [
            ('t=1&t=3,4', False, ['1', '3', '4']),
            ('t=1&t=2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', True, ['1', '', '2', '3', '4']),
            ('t=1,2&t=3,4,,5', False, ['1', '2', '3', '4', '5']),
            ('t=1&t=,1,4,,5', False, ['1', '1', '4', '5']),
            ('t=1&t=,1,4,,5', True, ['1', '', '1', '4', '', '5']),
            (
                't=1&t=,1,4,,5&t=a,b,c',
                True,
                ['1', '', '1', '4', '', '5', 'a', 'b', 'c'],
            ),
        ],
    )
    def test_option_auto_parse_qs_csv_multiple_fields_true(
        self,
        simulate_request,
        client,
        resource,
        qs,
        keep_blank,
        expected,
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950a630d0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950cd7010>, 'CHECK...7010>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950cd7010>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950c85c90>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___ TestQueryParams.test_float_neg[simulate_request_post_query_params-asgi] ____

self = <test_query_params.TestQueryParams object at 0x7fd811bd26b0>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950d7c1f0>
resource = <test_query_params.Resource object at 0x7fd950d7f3d0>

    def test_float_neg(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:478: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950cf6810>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950cd40d0>, 'CHECK...40d0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950cd40d0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950d7f3d0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_param_property[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fd811c19780>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950d23e50>
resource = <test_query_params.Resource object at 0x7fd950d21a20>

    def test_param_property(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:738: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950af8270>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950cd7910>, 'CHECK...7910>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950cd7910>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950d21a20>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_datetime_invalid[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fd811a68610>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950c461a0>
resource = <test_query_params.Resource object at 0x7fd950c44bb0>

    def test_get_datetime_invalid(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:882: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950af94d0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950cd43a0>, 'CHECK...43a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950cd43a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950c44bb0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_param_property[simulate_request_get_query_params-asgi] __

self = <test_query_params.TestQueryParams object at 0x7fd811c18820>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd9509ac460>
resource = <test_query_params.Resource object at 0x7fd9509ac4c0>

    def test_param_property(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:738: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950af8b30>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950ad8550>, 'CHECK...8550>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950ad8550>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd9509ac4c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_required[simulate_request_post_query_params-asgi-get_param_as_list] _

self = <test_query_params.TestQueryParams object at 0x7fd811bd3250>
simulate_request = <function simulate_request_post_query_params at 0x7fd811ba57e0>
client = <falcon.testing.client.TestClient object at 0x7fd950d34dc0>
resource = <test_query_params.Resource object at 0x7fd950d34ac0>
method_name = 'get_param_as_list'

    @pytest.mark.parametrize(
        'method_name',
        [
            'get_param',
            'get_param_as_int',
            'get_param_as_float',
            'get_param_as_uuid',
            'get_param_as_bool',
            'get_param_as_list',
        ],
    )
    def test_required(self, simulate_request, client, resource, method_name):
>       client.app.add_route('/', resource)

tests/test_query_params.py:334: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950a01cb0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950cd7880>, 'CHECK...7880>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950cd7880>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950d34ac0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_datetime_valid_with_format[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fd811a68250>
simulate_request = <function simulate_request_get_query_params at 0x7fd811ba5750>
client = <falcon.testing.client.TestClient object at 0x7fd950ad6710>
resource = <test_query_params.Resource object at 0x7fd950ad6140>

    def test_get_datetime_valid_with_format(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:860: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950a02dc0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950cd4dc0>, 'CHECK...4dc0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950cd4dc0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fd950ad6140>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________________ TestLoadApp.test_load_app_error[foo] _____________________

self = <test_cmd_inspect_app.TestLoadApp object at 0x7fd81dfcacb0>, name = 'foo'

    @pytest.mark.parametrize(
        'name',
        (
            'foo',  # not exists
            '_MODULE',  # not callable and not app
            'DummyResource',  # callable and not app
        ),
    )
    def test_load_app_error(self, name):
        parser = inspect_app.make_parser()
        args = Namespace(
            app_module='{}:{}'.format(_MODULE, name), route_only=False, verbose=False
        )
        with pytest.raises(SystemExit):
>           inspect_app.load_app(parser, args)

tests/test_cmd_inspect_app.py:134: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7fd955b43400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
_______________________ TestLoadApp.test_load_app[_APP] ________________________

self = <test_cmd_inspect_app.TestLoadApp object at 0x7fd81dfcaa70>
name = '_APP'

    @pytest.mark.parametrize('name', ('_APP', 'make_app'))
    def test_load_app(self, name):
        parser = inspect_app.make_parser()
        args = Namespace(
            app_module='{}:{}'.format(_MODULE, name), route_only=False, verbose=False
        )
>       app = inspect_app.load_app(parser, args)

tests/test_cmd_inspect_app.py:116: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7fd955b43400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
________________ TestLoadApp.test_load_app_error[DummyResource] ________________

self = <test_cmd_inspect_app.TestLoadApp object at 0x7fd81dfcadd0>
name = 'DummyResource'

    @pytest.mark.parametrize(
        'name',
        (
            'foo',  # not exists
            '_MODULE',  # not callable and not app
            'DummyResource',  # callable and not app
        ),
    )
    def test_load_app_error(self, name):
        parser = inspect_app.make_parser()
        args = Namespace(
            app_module='{}:{}'.format(_MODULE, name), route_only=False, verbose=False
        )
        with pytest.raises(SystemExit):
>           inspect_app.load_app(parser, args)

tests/test_cmd_inspect_app.py:134: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7fd955b43400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
___________________ TestLoadApp.test_load_app_error[_MODULE] ___________________

self = <test_cmd_inspect_app.TestLoadApp object at 0x7fd81dfcad40>
name = '_MODULE'

    @pytest.mark.parametrize(
        'name',
        (
            'foo',  # not exists
            '_MODULE',  # not callable and not app
            'DummyResource',  # callable and not app
        ),
    )
    def test_load_app_error(self, name):
        parser = inspect_app.make_parser()
        args = Namespace(
            app_module='{}:{}'.format(_MODULE, name), route_only=False, verbose=False
        )
        with pytest.raises(SystemExit):
>           inspect_app.load_app(parser, args)

tests/test_cmd_inspect_app.py:134: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7fd955b43400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
_____________________ TestLoadApp.test_load_app[make_app] ______________________

self = <test_cmd_inspect_app.TestLoadApp object at 0x7fd81dfcab00>
name = 'make_app'

    @pytest.mark.parametrize('name', ('_APP', 'make_app'))
    def test_load_app(self, name):
        parser = inspect_app.make_parser()
        args = Namespace(
            app_module='{}:{}'.format(_MODULE, name), route_only=False, verbose=False
        )
>       app = inspect_app.load_app(parser, args)

tests/test_cmd_inspect_app.py:116: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7fd955b43400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
_______________ TestMain.test_routes_only[not-internal-verbose] ________________

self = <test_cmd_inspect_app.TestMain object at 0x7fd81dfcb310>, verbose = True
internal = False
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fd950de6d40>

    def test_routes_only(self, verbose, internal, monkeypatch):
        args = ['some-file.py', '{}:{}'.format(_MODULE, '_APP'), '-r']
        if verbose:
            args.append('-v')
        if internal:
            args.append('-i')
        monkeypatch.setattr('sys.argv', args)
        output = io.StringIO()
        with redirected(stdout=output):
>           inspect_app.main()

tests/test_cmd_inspect_app.py:163: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:100: in main
    app = load_app(parser, args)
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7fd955b43400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
_______________ TestMain.test_inspect[not-internal-not-verbose] ________________

self = <test_cmd_inspect_app.TestMain object at 0x7fd81dfcb790>, verbose = False
internal = False
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fd950daa710>

    def test_inspect(self, verbose, internal, monkeypatch):
        args = ['some-file.py', '{}:{}'.format(_MODULE, '_APP')]
        if verbose:
            args.append('-v')
        if internal:
            args.append('-i')
        monkeypatch.setattr('sys.argv', args)
        output = io.StringIO()
        with redirected(stdout=output):
>           inspect_app.main()

tests/test_cmd_inspect_app.py:178: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:100: in main
    app = load_app(parser, args)
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7fd955b43400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
___________________ TestMain.test_inspect[internal-verbose] ____________________

self = <test_cmd_inspect_app.TestMain object at 0x7fd81dfcb5e0>, verbose = True
internal = True
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fd950df22c0>

    def test_inspect(self, verbose, internal, monkeypatch):
        args = ['some-file.py', '{}:{}'.format(_MODULE, '_APP')]
        if verbose:
            args.append('-v')
        if internal:
            args.append('-i')
        monkeypatch.setattr('sys.argv', args)
        output = io.StringIO()
        with redirected(stdout=output):
>           inspect_app.main()

tests/test_cmd_inspect_app.py:178: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:100: in main
    app = load_app(parser, args)
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7fd955b43400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
_______________ TestMain.test_routes_only[internal-not-verbose] ________________

self = <test_cmd_inspect_app.TestMain object at 0x7fd81dfcb280>, verbose = False
internal = True
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fd950de47c0>

    def test_routes_only(self, verbose, internal, monkeypatch):
        args = ['some-file.py', '{}:{}'.format(_MODULE, '_APP'), '-r']
        if verbose:
            args.append('-v')
        if internal:
            args.append('-i')
        monkeypatch.setattr('sys.argv', args)
        output = io.StringIO()
        with redirected(stdout=output):
>           inspect_app.main()

tests/test_cmd_inspect_app.py:163: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:100: in main
    app = load_app(parser, args)
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7fd955b43400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
_________________ TestMain.test_inspect[internal-not-verbose] __________________

self = <test_cmd_inspect_app.TestMain object at 0x7fd81dfcb670>, verbose = False
internal = True
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fd950df72e0>

    def test_inspect(self, verbose, internal, monkeypatch):
        args = ['some-file.py', '{}:{}'.format(_MODULE, '_APP')]
        if verbose:
            args.append('-v')
        if internal:
            args.append('-i')
        monkeypatch.setattr('sys.argv', args)
        output = io.StringIO()
        with redirected(stdout=output):
>           inspect_app.main()

tests/test_cmd_inspect_app.py:178: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:100: in main
    app = load_app(parser, args)
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7fd955b43400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
_________________ TestMain.test_inspect[not-internal-verbose] __________________

self = <test_cmd_inspect_app.TestMain object at 0x7fd81dfcb700>, verbose = True
internal = False
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fd950df1ae0>

    def test_inspect(self, verbose, internal, monkeypatch):
        args = ['some-file.py', '{}:{}'.format(_MODULE, '_APP')]
        if verbose:
            args.append('-v')
        if internal:
            args.append('-i')
        monkeypatch.setattr('sys.argv', args)
        output = io.StringIO()
        with redirected(stdout=output):
>           inspect_app.main()

tests/test_cmd_inspect_app.py:178: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:100: in main
    app = load_app(parser, args)
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7fd955b43400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
_____________ TestMain.test_routes_only[not-internal-not-verbose] ______________

self = <test_cmd_inspect_app.TestMain object at 0x7fd81dfcb3a0>, verbose = False
internal = False
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fd950d8bd30>

    def test_routes_only(self, verbose, internal, monkeypatch):
        args = ['some-file.py', '{}:{}'.format(_MODULE, '_APP'), '-r']
        if verbose:
            args.append('-v')
        if internal:
            args.append('-i')
        monkeypatch.setattr('sys.argv', args)
        output = io.StringIO()
        with redirected(stdout=output):
>           inspect_app.main()

tests/test_cmd_inspect_app.py:163: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:100: in main
    app = load_app(parser, args)
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7fd955b43400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
_________________ TestMain.test_routes_only[internal-verbose] __________________

self = <test_cmd_inspect_app.TestMain object at 0x7fd81dfcb1f0>, verbose = True
internal = True
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fd950df68f0>

    def test_routes_only(self, verbose, internal, monkeypatch):
        args = ['some-file.py', '{}:{}'.format(_MODULE, '_APP'), '-r']
        if verbose:
            args.append('-v')
        if internal:
            args.append('-i')
        monkeypatch.setattr('sys.argv', args)
        output = io.StringIO()
        with redirected(stdout=output):
>           inspect_app.main()

tests/test_cmd_inspect_app.py:163: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:100: in main
    app = load_app(parser, args)
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7fd955b43400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
______________ test_float_converter[asgi-/{id:float(min=1.9)}-2] _______________

client = <falcon.testing.client.TestClient object at 0x7fd950c327d0>
uri_template = '/{id:float(min=1.9)}', id_value = 2

    @pytest.mark.parametrize('id_value', [2, 2.1, 1.9])
    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:float}',
            '/{id:float(1)}',
            '/{id:float(min=1.9)}',
            '/{id:float(min=1.8, max=3)}',
        ],
    )
    def test_float_converter(client, uri_template, id_value):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:230: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9509d4d60>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098d360>, 'CHECK...d360>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098d360>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7fd950d892a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ test_datetime_converter[asgi-/{start_year:int}-to-{timestamp:dt("%Y-%m-%d")}-/1961-to-1969-07-21-dt_expected1] _

client = <falcon.testing.client.TestClient object at 0x7fd950c55990>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7fd950c55d80>
uri_template = '/{start_year:int}-to-{timestamp:dt("%Y-%m-%d")}'
path = '/1961-to-1969-07-21', dt_expected = datetime.datetime(1969, 7, 21, 0, 0)

    @pytest.mark.parametrize(
        'uri_template, path, dt_expected',
        [
            (
                '/{start_year:int}-to-{timestamp:dt}',
                '/1961-to-1969-07-21T02:56:00Z',
                datetime(1969, 7, 21, 2, 56, 0),
            ),
            (
                '/{start_year:int}-to-{timestamp:dt("%Y-%m-%d")}',
                '/1961-to-1969-07-21',
                datetime(1969, 7, 21),
            ),
            (
                '/{start_year:int}/{timestamp:dt("%Y-%m-%d %H:%M")}',
                '/1961/1969-07-21 14:30',
                datetime(1969, 7, 21, 14, 30),
            ),
            ('/{start_year:int}-to-{timestamp:dt("%Y-%m")}', '/1961-to-1969-07-21', None),
        ],
    )
    def test_datetime_converter(client, resource, uri_template, path, dt_expected):
>       client.app.add_route(uri_template, resource)

tests/test_uri_templates.py:301: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9509d4dd0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098ee60>, 'CHECK...ee60>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098ee60>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fd950c55d80>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______________________________ test_no_vars[asgi] ______________________________

client = <falcon.testing.client.TestClient object at 0x7fd950c6abc0>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7fd950c69b70>

    def test_no_vars(client, resource):
>       client.app.add_route('/hello/world', resource)

tests/test_uri_templates.py:149: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9508e47b0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098e8c0>, 'CHECK...e8c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098e8c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fd950c69b70>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________________________ test_single[asgi-id] _____________________________

client = <falcon.testing.client.TestClient object at 0x7fd950ef2410>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7fd950ef2770>
field_name = 'id'

    @pytest.mark.parametrize(
        'field_name',
        [
            'id',
            'id123',
            'widget_id',
        ],
    )
    def test_single(client, resource, field_name):
        template = '/widgets/{{{}}}'.format(field_name)
    
>       client.app.add_route(template, resource)

tests/test_uri_templates.py:182: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9508e4f90>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098c700>, 'CHECK...c700>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098c700>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fd950ef2770>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ test_converter_custom[asgi-/{food:spam}-/something-expected0] _________

client = <falcon.testing.client.TestClient object at 0x7fd950bb9000>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7fd950bba980>
uri_template = '/{food:spam}', path = '/something', expected = {'food': 'spam!'}

    @pytest.mark.parametrize(
        'uri_template, path, expected',
        [
            ('/{food:spam}', '/something', {'food': 'spam!'}),
            (
                '/{food:spam(")")}:{food_too:spam("()")}',
                '/bacon:eggs',
                {'food': 'spam!', 'food_too': 'spam!'},
            ),
            (
                '/({food:spam()}){food_too:spam("()")}',
                '/(bacon)eggs',
                {'food': 'spam!', 'food_too': 'spam!'},
            ),
        ],
    )
    def test_converter_custom(client, resource, uri_template, path, expected):
        class SpamConverter:
            def __init__(self, useless_text=None):
                pass
    
            def convert(self, fragment):
                return 'spam!'
    
        client.app.router_options.converters['spam'] = SpamConverter
>       client.app.add_route(uri_template, resource)

tests/test_uri_templates.py:413: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9508e53f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098db40>, 'CHECK...db40>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098db40>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fd950bba980>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________________ test_float_converter[asgi-/{id:float}-2] ___________________

client = <falcon.testing.client.TestClient object at 0x7fd950d34820>
uri_template = '/{id:float}', id_value = 2

    @pytest.mark.parametrize('id_value', [2, 2.1, 1.9])
    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:float}',
            '/{id:float(1)}',
            '/{id:float(min=1.9)}',
            '/{id:float(min=1.8, max=3)}',
        ],
    )
    def test_float_converter(client, uri_template, id_value):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:230: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9508e7c30>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098f130>, 'CHECK...f130>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098f130>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7fd950d373a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____ test_int_converter_rejections[asgi-/{id:int(num_digits=3, max=100)}] _____

client = <falcon.testing.client.TestClient object at 0x7fd950d01c00>
uri_template = '/{id:int(num_digits=3, max=100)}'

    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:int(2)}',
            '/{id:int(min=124)}',
            '/{id:int(num_digits=3, max=100)}',
        ],
    )
    def test_int_converter_rejections(client, uri_template):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:271: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9508459a0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098c0d0>, 'CHECK...c0d0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098c0d0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7fd950d01ab0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________________________ test_single[asgi-id123] ____________________________

client = <falcon.testing.client.TestClient object at 0x7fd950ef1810>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7fd950d2e080>
field_name = 'id123'

    @pytest.mark.parametrize(
        'field_name',
        [
            'id',
            'id123',
            'widget_id',
        ],
    )
    def test_single(client, resource, field_name):
        template = '/widgets/{{{}}}'.format(field_name)
    
>       client.app.add_route(template, resource)

tests/test_uri_templates.py:182: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950844740>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098c040>, 'CHECK...c040>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098c040>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fd950d2e080>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________________ test_same_level_complex_var[asgi-False] ____________________

client = <falcon.testing.client.TestClient object at 0x7fd950df2ef0>
reverse = False

    @pytest.mark.parametrize('reverse', [True, False])
    def test_same_level_complex_var(client, reverse):
        file_resource = FileResource()
        details_resource = FileDetailsResource()
    
        routes = [
            ('/files/{file_id}', file_resource),
            ('/files/{file_id}.{ext}', details_resource),
        ]
        if reverse:
            routes.reverse()
    
        for uri_template, resource in routes:
>           client.app.add_route(uri_template, resource)

tests/test_uri_templates.py:511: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950844a50>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098e170>, 'CHECK...e170>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098e170>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FileResource.on_get of <test_uri_templates.FileResource object at 0x7fd950df0910>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________ test_float_converter[asgi-/{id:float(min=1.9)}-1.9] ______________

client = <falcon.testing.client.TestClient object at 0x7fd950acb5b0>
uri_template = '/{id:float(min=1.9)}', id_value = 1.9

    @pytest.mark.parametrize('id_value', [2, 2.1, 1.9])
    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:float}',
            '/{id:float(1)}',
            '/{id:float(min=1.9)}',
            '/{id:float(min=1.8, max=3)}',
        ],
    )
    def test_float_converter(client, uri_template, id_value):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:230: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950845d90>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098c310>, 'CHECK...c310>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098c310>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7fd950ac9570>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ test_converter_custom[asgi-/{food:spam(")")}:{food_too:spam("()")}-/bacon:eggs-expected1] _

client = <falcon.testing.client.TestClient object at 0x7fd950b01720>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7fd950b00550>
uri_template = '/{food:spam(")")}:{food_too:spam("()")}', path = '/bacon:eggs'
expected = {'food': 'spam!', 'food_too': 'spam!'}

    @pytest.mark.parametrize(
        'uri_template, path, expected',
        [
            ('/{food:spam}', '/something', {'food': 'spam!'}),
            (
                '/{food:spam(")")}:{food_too:spam("()")}',
                '/bacon:eggs',
                {'food': 'spam!', 'food_too': 'spam!'},
            ),
            (
                '/({food:spam()}){food_too:spam("()")}',
                '/(bacon)eggs',
                {'food': 'spam!', 'food_too': 'spam!'},
            ),
        ],
    )
    def test_converter_custom(client, resource, uri_template, path, expected):
        class SpamConverter:
            def __init__(self, useless_text=None):
                pass
    
            def convert(self, fragment):
                return 'spam!'
    
        client.app.router_options.converters['spam'] = SpamConverter
>       client.app.add_route(uri_template, resource)

tests/test_uri_templates.py:413: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950845fc0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098ff40>, 'CHECK...ff40>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098ff40>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fd950b00550>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______________ test_float_converter_non_finite_allowed[asgi-nan] _______________

value = 'nan'
client = <falcon.testing.client.TestClient object at 0x7fd950d361a0>

    @pytest.mark.parametrize('value', ['nan', '-inf', 'inf'])
    def test_float_converter_non_finite_allowed(value, client):
        resource1 = IDResource()
>       client.app.add_route('/{id:float(finite=False)}', resource1)

tests/test_uri_templates.py:243: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9508e5230>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098d870>, 'CHECK...d870>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098d870>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7fd950d36cb0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______________________ test_int_converter[asgi-/{id:int}] ______________________

client = <falcon.testing.client.TestClient object at 0x7fd950c33040>
uri_template = '/{id:int}'

    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:int}',
            '/{id:int(3)}',
            '/{id:int(min=123)}',
            '/{id:int(min=123, max=123)}',
        ],
    )
    def test_int_converter(client, uri_template):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:208: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9508e7300>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d73d90>, 'CHECK...3d90>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950d73d90>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7fd950c308b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ test_datetime_converter[asgi-/{start_year:int}-to-{timestamp:dt("%Y-%m")}-/1961-to-1969-07-21-None] _

client = <falcon.testing.client.TestClient object at 0x7fd950bef670>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7fd950bef430>
uri_template = '/{start_year:int}-to-{timestamp:dt("%Y-%m")}'
path = '/1961-to-1969-07-21', dt_expected = None

    @pytest.mark.parametrize(
        'uri_template, path, dt_expected',
        [
            (
                '/{start_year:int}-to-{timestamp:dt}',
                '/1961-to-1969-07-21T02:56:00Z',
                datetime(1969, 7, 21, 2, 56, 0),
            ),
            (
                '/{start_year:int}-to-{timestamp:dt("%Y-%m-%d")}',
                '/1961-to-1969-07-21',
                datetime(1969, 7, 21),
            ),
            (
                '/{start_year:int}/{timestamp:dt("%Y-%m-%d %H:%M")}',
                '/1961/1969-07-21 14:30',
                datetime(1969, 7, 21, 14, 30),
            ),
            ('/{start_year:int}-to-{timestamp:dt("%Y-%m")}', '/1961-to-1969-07-21', None),
        ],
    )
    def test_datetime_converter(client, resource, uri_template, path, dt_expected):
>       client.app.add_route(uri_template, resource)

tests/test_uri_templates.py:301: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9508e6490>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098cb80>, 'CHECK...cb80>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098cb80>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fd950bef430>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ test_uuid_converter[asgi-uuid_converter_2] __________________

client = <falcon.testing.client.TestClient object at 0x7fd950d1be20>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7fd950d1b6d0>
uri_template = '/widgets/{widget_id:uuid}/orders'
path = '/widgets/142a1324774549159e5be24d12cfa096/orders'
expected = {'widget_id': UUID('142a1324-7745-4915-9e5b-e24d12cfa096')}

    @pytest.mark.parametrize(
        'uri_template, path, expected',
        as_params(
            (
                '/widgets/{widget_id:uuid}',
                '/widgets/' + _TEST_UUID_STR,
                {'widget_id': _TEST_UUID},
            ),
            (
                '/widgets/{widget_id:uuid}/orders',
                '/widgets/' + _TEST_UUID_STR_SANS_HYPHENS + '/orders',
                {'widget_id': _TEST_UUID},
            ),
            (
                '/versions/diff/{left:uuid()}...{right:uuid()}',
                '/versions/diff/{}...{}'.format(_TEST_UUID_STR, _TEST_UUID_STR_2),
                {
                    'left': _TEST_UUID,
                    'right': _TEST_UUID_2,
                },
            ),
            (
                '/versions/diff/{left:uuid}...{right:uuid()}',
                '/versions/diff/{}...{}'.format(_TEST_UUID_STR, _TEST_UUID_STR_2),
                {
                    'left': _TEST_UUID,
                    'right': _TEST_UUID_2,
                },
            ),
            (
                '/versions/diff/{left:uuid()}...{right:uuid}',
                '/versions/diff/{}...{}'.format(_TEST_UUID_STR, _TEST_UUID_STR_2),
                {
                    'left': _TEST_UUID,
                    'right': _TEST_UUID_2,
                },
            ),
            (
                '/widgets/{widget_id:uuid}/orders',
                '/widgets/' + _TEST_UUID_STR_SANS_HYPHENS[:-1] + '/orders',
                None,
            ),
            prefix='uuid_converter',
        ),
    )
    def test_uuid_converter(client, resource, uri_template, path, expected):
>       client.app.add_route(uri_template, resource)

tests/test_uri_templates.py:361: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950921e00>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098ee60>, 'CHECK...ee60>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098ee60>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fd950d1b6d0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______________ test_int_converter_rejections[asgi-/{id:int(2)}] _______________

client = <falcon.testing.client.TestClient object at 0x7fd950d34940>
uri_template = '/{id:int(2)}'

    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:int(2)}',
            '/{id:int(min=124)}',
            '/{id:int(num_digits=3, max=100)}',
        ],
    )
    def test_int_converter_rejections(client, uri_template):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:271: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950a62500>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098cd30>, 'CHECK...cd30>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098cd30>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7fd950d359c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ test_float_converter[asgi-/{id:float(1)}-1.9] _________________

client = <falcon.testing.client.TestClient object at 0x7fd950cdb310>
uri_template = '/{id:float(1)}', id_value = 1.9

    @pytest.mark.parametrize('id_value', [2, 2.1, 1.9])
    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:float}',
            '/{id:float(1)}',
            '/{id:float(min=1.9)}',
            '/{id:float(min=1.8, max=3)}',
        ],
    )
    def test_float_converter(client, uri_template, id_value):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:230: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950a31c40>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098e0e0>, 'CHECK...e0e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098e0e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7fd950cd88e0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ test_uuid_converter[asgi-uuid_converter_4] __________________

client = <falcon.testing.client.TestClient object at 0x7fd950c13430>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7fd950c13a30>
uri_template = '/versions/diff/{left:uuid}...{right:uuid()}'
path = '/versions/diff/142a1324-7745-4915-9e5b-e24d12cfa096...d3126079-a8da-4672-b6fe-fa68c18738b1'
expected = {'left': UUID('142a1324-7745-4915-9e5b-e24d12cfa096'), 'right': UUID('d3126079-a8da-4672-b6fe-fa68c18738b1')}

    @pytest.mark.parametrize(
        'uri_template, path, expected',
        as_params(
            (
                '/widgets/{widget_id:uuid}',
                '/widgets/' + _TEST_UUID_STR,
                {'widget_id': _TEST_UUID},
            ),
            (
                '/widgets/{widget_id:uuid}/orders',
                '/widgets/' + _TEST_UUID_STR_SANS_HYPHENS + '/orders',
                {'widget_id': _TEST_UUID},
            ),
            (
                '/versions/diff/{left:uuid()}...{right:uuid()}',
                '/versions/diff/{}...{}'.format(_TEST_UUID_STR, _TEST_UUID_STR_2),
                {
                    'left': _TEST_UUID,
                    'right': _TEST_UUID_2,
                },
            ),
            (
                '/versions/diff/{left:uuid}...{right:uuid()}',
                '/versions/diff/{}...{}'.format(_TEST_UUID_STR, _TEST_UUID_STR_2),
                {
                    'left': _TEST_UUID,
                    'right': _TEST_UUID_2,
                },
            ),
            (
                '/versions/diff/{left:uuid()}...{right:uuid}',
                '/versions/diff/{}...{}'.format(_TEST_UUID_STR, _TEST_UUID_STR_2),
                {
                    'left': _TEST_UUID,
                    'right': _TEST_UUID_2,
                },
            ),
            (
                '/widgets/{widget_id:uuid}/orders',
                '/widgets/' + _TEST_UUID_STR_SANS_HYPHENS[:-1] + '/orders',
                None,
            ),
            prefix='uuid_converter',
        ),
    )
    def test_uuid_converter(client, resource, uri_template, path, expected):
>       client.app.add_route(uri_template, resource)

tests/test_uri_templates.py:361: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950a02ce0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950adb010>, 'CHECK...b010>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950adb010>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fd950c13a30>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ test_float_converter[asgi-/{id:float}-1.9] __________________

client = <falcon.testing.client.TestClient object at 0x7fd950a5f550>
uri_template = '/{id:float}', id_value = 1.9

    @pytest.mark.parametrize('id_value', [2, 2.1, 1.9])
    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:float}',
            '/{id:float(1)}',
            '/{id:float(min=1.9)}',
            '/{id:float(min=1.8, max=3)}',
        ],
    )
    def test_float_converter(client, uri_template, id_value):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:230: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950a32570>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098f9a0>, 'CHECK...f9a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098f9a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7fd950a5d6f0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________ test_float_converter[asgi-/{id:float(min=1.8, max=3)}-1.9] __________

client = <falcon.testing.client.TestClient object at 0x7fd950ab2410>
uri_template = '/{id:float(min=1.8, max=3)}', id_value = 1.9

    @pytest.mark.parametrize('id_value', [2, 2.1, 1.9])
    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:float}',
            '/{id:float(1)}',
            '/{id:float(min=1.9)}',
            '/{id:float(min=1.8, max=3)}',
        ],
    )
    def test_float_converter(client, uri_template, id_value):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:230: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9509d7b50>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098f640>, 'CHECK...f640>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098f640>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7fd950ab38e0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______________________ test_single_trailing_slash[asgi] _______________________

client = <falcon.testing.client.TestClient object at 0x7fd950c58310>

    def test_single_trailing_slash(client):
        resource1 = IDResource()
>       client.app.add_route('/1/{id}/', resource1)

tests/test_uri_templates.py:424: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9509d5770>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098cc10>, 'CHECK...cc10>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098cc10>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7fd950c5a620>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ test_datetime_converter[asgi-/{start_year:int}-to-{timestamp:dt}-/1961-to-1969-07-21T02:56:00Z-dt_expected0] _

client = <falcon.testing.client.TestClient object at 0x7fd950bb82b0>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7fd950bbafb0>
uri_template = '/{start_year:int}-to-{timestamp:dt}'
path = '/1961-to-1969-07-21T02:56:00Z'
dt_expected = datetime.datetime(1969, 7, 21, 2, 56)

    @pytest.mark.parametrize(
        'uri_template, path, dt_expected',
        [
            (
                '/{start_year:int}-to-{timestamp:dt}',
                '/1961-to-1969-07-21T02:56:00Z',
                datetime(1969, 7, 21, 2, 56, 0),
            ),
            (
                '/{start_year:int}-to-{timestamp:dt("%Y-%m-%d")}',
                '/1961-to-1969-07-21',
                datetime(1969, 7, 21),
            ),
            (
                '/{start_year:int}/{timestamp:dt("%Y-%m-%d %H:%M")}',
                '/1961/1969-07-21 14:30',
                datetime(1969, 7, 21, 14, 30),
            ),
            ('/{start_year:int}-to-{timestamp:dt("%Y-%m")}', '/1961-to-1969-07-21', None),
        ],
    )
    def test_datetime_converter(client, resource, uri_template, path, dt_expected):
>       client.app.add_route(uri_template, resource)

tests/test_uri_templates.py:301: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950844d60>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098fd90>, 'CHECK...fd90>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098fd90>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fd950bbafb0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ test_float_converter[asgi-/{id:float}-2.1] __________________

client = <falcon.testing.client.TestClient object at 0x7fd950dfad40>
uri_template = '/{id:float}', id_value = 2.1

    @pytest.mark.parametrize('id_value', [2, 2.1, 1.9])
    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:float}',
            '/{id:float(1)}',
            '/{id:float(min=1.9)}',
            '/{id:float(min=1.8, max=3)}',
        ],
    )
    def test_float_converter(client, uri_template, id_value):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:230: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9508459a0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098d240>, 'CHECK...d240>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098d240>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7fd950dfa890>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________ test_float_converter[asgi-/{id:float(min=1.8, max=3)}-2.1] __________

client = <falcon.testing.client.TestClient object at 0x7fd950c55030>
uri_template = '/{id:float(min=1.8, max=3)}', id_value = 2.1

    @pytest.mark.parametrize('id_value', [2, 2.1, 1.9])
    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:float}',
            '/{id:float(1)}',
            '/{id:float(min=1.9)}',
            '/{id:float(min=1.8, max=3)}',
        ],
    )
    def test_float_converter(client, uri_template, id_value):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:230: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9508e5310>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098d750>, 'CHECK...d750>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098d750>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7fd950c55000>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______________ test_with_and_without_trailing_slash[asgi-False] _______________

client = <falcon.testing.client.TestClient object at 0x7fd950a5c6a0>
reverse = False

    @pytest.mark.parametrize('reverse', [True, False])
    def test_with_and_without_trailing_slash(client, reverse):
        routes = [
            ('/kitchen', KitchenSinkResource()),
            ('/kitchen/', KitchenSinkResource()),
            ('/kitchen/{item}', KitchenSinkResource()),
            ('/kitchen/{item}/', KitchenSinkResource()),
            ('/kitchen/sink', KitchenSinkResource()),
            ('/kitchen/sink/', KitchenSinkResource()),
        ]
        if reverse:
            routes.reverse()
    
        for route in routes:
>           client.app.add_route(*route)

tests/test_uri_templates.py:576: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950af8a50>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098dfc0>, 'CHECK...dfc0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098dfc0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method KitchenSinkResource.on_get of <test_uri_templates.KitchenSinkResource object at 0x7fd950a5ca60>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ test_int_converter_rejections[asgi-/{id:int(min=124)}] ____________

client = <falcon.testing.client.TestClient object at 0x7fd950ad4a30>
uri_template = '/{id:int(min=124)}'

    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:int(2)}',
            '/{id:int(min=124)}',
            '/{id:int(num_digits=3, max=100)}',
        ],
    )
    def test_int_converter_rejections(client, uri_template):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:271: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950847d80>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950947b50>, 'CHECK...7b50>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950947b50>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7fd950ad41c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ test_uuid_converter[asgi-uuid_converter_5] __________________

client = <falcon.testing.client.TestClient object at 0x7fd950ed9630>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7fd950eda6e0>
uri_template = '/versions/diff/{left:uuid()}...{right:uuid}'
path = '/versions/diff/142a1324-7745-4915-9e5b-e24d12cfa096...d3126079-a8da-4672-b6fe-fa68c18738b1'
expected = {'left': UUID('142a1324-7745-4915-9e5b-e24d12cfa096'), 'right': UUID('d3126079-a8da-4672-b6fe-fa68c18738b1')}

    @pytest.mark.parametrize(
        'uri_template, path, expected',
        as_params(
            (
                '/widgets/{widget_id:uuid}',
                '/widgets/' + _TEST_UUID_STR,
                {'widget_id': _TEST_UUID},
            ),
            (
                '/widgets/{widget_id:uuid}/orders',
                '/widgets/' + _TEST_UUID_STR_SANS_HYPHENS + '/orders',
                {'widget_id': _TEST_UUID},
            ),
            (
                '/versions/diff/{left:uuid()}...{right:uuid()}',
                '/versions/diff/{}...{}'.format(_TEST_UUID_STR, _TEST_UUID_STR_2),
                {
                    'left': _TEST_UUID,
                    'right': _TEST_UUID_2,
                },
            ),
            (
                '/versions/diff/{left:uuid}...{right:uuid()}',
                '/versions/diff/{}...{}'.format(_TEST_UUID_STR, _TEST_UUID_STR_2),
                {
                    'left': _TEST_UUID,
                    'right': _TEST_UUID_2,
                },
            ),
            (
                '/versions/diff/{left:uuid()}...{right:uuid}',
                '/versions/diff/{}...{}'.format(_TEST_UUID_STR, _TEST_UUID_STR_2),
                {
                    'left': _TEST_UUID,
                    'right': _TEST_UUID_2,
                },
            ),
            (
                '/widgets/{widget_id:uuid}/orders',
                '/widgets/' + _TEST_UUID_STR_SANS_HYPHENS[:-1] + '/orders',
                None,
            ),
            prefix='uuid_converter',
        ),
    )
    def test_uuid_converter(client, resource, uri_template, path, expected):
>       client.app.add_route(uri_template, resource)

tests/test_uri_templates.py:361: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950923f40>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fde62710>, 'CHECK...2710>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd7fde62710>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fd950eda6e0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________________________ test_single[asgi-widget_id] __________________________

client = <falcon.testing.client.TestClient object at 0x7fd950bb8a30>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7fd950bb9930>
field_name = 'widget_id'

    @pytest.mark.parametrize(
        'field_name',
        [
            'id',
            'id123',
            'widget_id',
        ],
    )
    def test_single(client, resource, field_name):
        template = '/widgets/{{{}}}'.format(field_name)
    
>       client.app.add_route(template, resource)

tests/test_uri_templates.py:182: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950a31770>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098d240>, 'CHECK...d240>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098d240>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fd950bb9930>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ test_uuid_converter[asgi-uuid_converter_1] __________________

client = <falcon.testing.client.TestClient object at 0x7fd950a3ca00>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7fd950a3d840>
uri_template = '/widgets/{widget_id:uuid}'
path = '/widgets/142a1324-7745-4915-9e5b-e24d12cfa096'
expected = {'widget_id': UUID('142a1324-7745-4915-9e5b-e24d12cfa096')}

    @pytest.mark.parametrize(
        'uri_template, path, expected',
        as_params(
            (
                '/widgets/{widget_id:uuid}',
                '/widgets/' + _TEST_UUID_STR,
                {'widget_id': _TEST_UUID},
            ),
            (
                '/widgets/{widget_id:uuid}/orders',
                '/widgets/' + _TEST_UUID_STR_SANS_HYPHENS + '/orders',
                {'widget_id': _TEST_UUID},
            ),
            (
                '/versions/diff/{left:uuid()}...{right:uuid()}',
                '/versions/diff/{}...{}'.format(_TEST_UUID_STR, _TEST_UUID_STR_2),
                {
                    'left': _TEST_UUID,
                    'right': _TEST_UUID_2,
                },
            ),
            (
                '/versions/diff/{left:uuid}...{right:uuid()}',
                '/versions/diff/{}...{}'.format(_TEST_UUID_STR, _TEST_UUID_STR_2),
                {
                    'left': _TEST_UUID,
                    'right': _TEST_UUID_2,
                },
            ),
            (
                '/versions/diff/{left:uuid()}...{right:uuid}',
                '/versions/diff/{}...{}'.format(_TEST_UUID_STR, _TEST_UUID_STR_2),
                {
                    'left': _TEST_UUID,
                    'right': _TEST_UUID_2,
                },
            ),
            (
                '/widgets/{widget_id:uuid}/orders',
                '/widgets/' + _TEST_UUID_STR_SANS_HYPHENS[:-1] + '/orders',
                None,
            ),
            prefix='uuid_converter',
        ),
    )
    def test_uuid_converter(client, resource, uri_template, path, expected):
>       client.app.add_route(uri_template, resource)

tests/test_uri_templates.py:361: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950a30200>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098ee60>, 'CHECK...ee60>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098ee60>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fd950a3d840>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________ test_int_converter[asgi-/{id:int(min=123, max=123)}] _____________

client = <falcon.testing.client.TestClient object at 0x7fd950d88520>
uri_template = '/{id:int(min=123, max=123)}'

    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:int}',
            '/{id:int(3)}',
            '/{id:int(min=123)}',
            '/{id:int(min=123, max=123)}',
        ],
    )
    def test_int_converter(client, uri_template):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:208: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9508e70d0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098eb00>, 'CHECK...eb00>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098eb00>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7fd950c695a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______________________ test_adding_suffix_routes[asgi] ________________________

client = <falcon.testing.client.TestClient object at 0x7fd950ab3100>

    def test_adding_suffix_routes(client):
        resource_with_suffix_routes = ResourceWithSuffixRoutes()
>       client.app.add_route(
            '/collections/{collection_id}/items/{item_id}', resource_with_suffix_routes
        )

tests/test_uri_templates.py:531: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950845fc0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098c670>, 'CHECK...c670>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098c670>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ResourceWithSuffixRoutes.on_get of <test_uri_templates.ResourceWithSuffixRoutes object at 0x7fd950ab3190>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ test_datetime_converter[asgi-/{start_year:int}/{timestamp:dt("%Y-%m-%d %H:%M")}-/1961/1969-07-21 14:30-dt_expected2] _

client = <falcon.testing.client.TestClient object at 0x7fd950a22d40>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7fd950a23310>
uri_template = '/{start_year:int}/{timestamp:dt("%Y-%m-%d %H:%M")}'
path = '/1961/1969-07-21 14:30'
dt_expected = datetime.datetime(1969, 7, 21, 14, 30)

    @pytest.mark.parametrize(
        'uri_template, path, dt_expected',
        [
            (
                '/{start_year:int}-to-{timestamp:dt}',
                '/1961-to-1969-07-21T02:56:00Z',
                datetime(1969, 7, 21, 2, 56, 0),
            ),
            (
                '/{start_year:int}-to-{timestamp:dt("%Y-%m-%d")}',
                '/1961-to-1969-07-21',
                datetime(1969, 7, 21),
            ),
            (
                '/{start_year:int}/{timestamp:dt("%Y-%m-%d %H:%M")}',
                '/1961/1969-07-21 14:30',
                datetime(1969, 7, 21, 14, 30),
            ),
            ('/{start_year:int}-to-{timestamp:dt("%Y-%m")}', '/1961-to-1969-07-21', None),
        ],
    )
    def test_datetime_converter(client, resource, uri_template, path, dt_expected):
>       client.app.add_route(uri_template, resource)

tests/test_uri_templates.py:301: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950847a70>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950944f70>, 'CHECK...4f70>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950944f70>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fd950a23310>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________________________ test_root_path[asgi] _____________________________

client = <falcon.testing.client.TestClient object at 0x7fd950dc5540>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7fd950dc4580>

    def test_root_path(client, resource):
>       client.app.add_route('/', resource)

tests/test_uri_templates.py:143: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd95081c430>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950946d40>, 'CHECK...6d40>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950946d40>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fd950dc4580>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________ test_float_converter[asgi-/{id:float(min=1.9)}-2.1] ______________

client = <falcon.testing.client.TestClient object at 0x7fd950d36b30>
uri_template = '/{id:float(min=1.9)}', id_value = 2.1

    @pytest.mark.parametrize('id_value', [2, 2.1, 1.9])
    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:float}',
            '/{id:float(1)}',
            '/{id:float(min=1.9)}',
            '/{id:float(min=1.8, max=3)}',
        ],
    )
    def test_float_converter(client, uri_template, id_value):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:230: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd95081c3c0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950946e60>, 'CHECK...6e60>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950946e60>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7fd950d377c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______________ test_with_and_without_trailing_slash[asgi-True] ________________

client = <falcon.testing.client.TestClient object at 0x7fd950b2ac20>
reverse = True

    @pytest.mark.parametrize('reverse', [True, False])
    def test_with_and_without_trailing_slash(client, reverse):
        routes = [
            ('/kitchen', KitchenSinkResource()),
            ('/kitchen/', KitchenSinkResource()),
            ('/kitchen/{item}', KitchenSinkResource()),
            ('/kitchen/{item}/', KitchenSinkResource()),
            ('/kitchen/sink', KitchenSinkResource()),
            ('/kitchen/sink/', KitchenSinkResource()),
        ]
        if reverse:
            routes.reverse()
    
        for route in routes:
>           client.app.add_route(*route)

tests/test_uri_templates.py:576: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd95081ccf0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950947c70>, 'CHECK...7c70>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950947c70>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method KitchenSinkResource.on_get of <test_uri_templates.KitchenSinkResource object at 0x7fd950b2b2e0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ test_uuid_converter[asgi-uuid_converter_6] __________________

client = <falcon.testing.client.TestClient object at 0x7fd950cdae90>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7fd950cd9570>
uri_template = '/widgets/{widget_id:uuid}/orders'
path = '/widgets/142a1324774549159e5be24d12cfa09/orders', expected = None

    @pytest.mark.parametrize(
        'uri_template, path, expected',
        as_params(
            (
                '/widgets/{widget_id:uuid}',
                '/widgets/' + _TEST_UUID_STR,
                {'widget_id': _TEST_UUID},
            ),
            (
                '/widgets/{widget_id:uuid}/orders',
                '/widgets/' + _TEST_UUID_STR_SANS_HYPHENS + '/orders',
                {'widget_id': _TEST_UUID},
            ),
            (
                '/versions/diff/{left:uuid()}...{right:uuid()}',
                '/versions/diff/{}...{}'.format(_TEST_UUID_STR, _TEST_UUID_STR_2),
                {
                    'left': _TEST_UUID,
                    'right': _TEST_UUID_2,
                },
            ),
            (
                '/versions/diff/{left:uuid}...{right:uuid()}',
                '/versions/diff/{}...{}'.format(_TEST_UUID_STR, _TEST_UUID_STR_2),
                {
                    'left': _TEST_UUID,
                    'right': _TEST_UUID_2,
                },
            ),
            (
                '/versions/diff/{left:uuid()}...{right:uuid}',
                '/versions/diff/{}...{}'.format(_TEST_UUID_STR, _TEST_UUID_STR_2),
                {
                    'left': _TEST_UUID,
                    'right': _TEST_UUID_2,
                },
            ),
            (
                '/widgets/{widget_id:uuid}/orders',
                '/widgets/' + _TEST_UUID_STR_SANS_HYPHENS[:-1] + '/orders',
                None,
            ),
            prefix='uuid_converter',
        ),
    )
    def test_uuid_converter(client, resource, uri_template, path, expected):
>       client.app.add_route(uri_template, resource)

tests/test_uri_templates.py:361: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd95081d7e0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098cd30>, 'CHECK...cd30>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098cd30>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fd950cd9570>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ test_float_converter[asgi-/{id:float(1)}-2.1] _________________

client = <falcon.testing.client.TestClient object at 0x7fd950c32b90>
uri_template = '/{id:float(1)}', id_value = 2.1

    @pytest.mark.parametrize('id_value', [2, 2.1, 1.9])
    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:float}',
            '/{id:float(1)}',
            '/{id:float(min=1.9)}',
            '/{id:float(min=1.8, max=3)}',
        ],
    )
    def test_float_converter(client, uri_template, id_value):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:230: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd95081e730>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098c040>, 'CHECK...c040>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098c040>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7fd950c31780>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ test_converter_custom[asgi-/({food:spam()}){food_too:spam("()")}-/(bacon)eggs-expected2] _

client = <falcon.testing.client.TestClient object at 0x7fd950d63af0>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7fd950d61000>
uri_template = '/({food:spam()}){food_too:spam("()")}', path = '/(bacon)eggs'
expected = {'food': 'spam!', 'food_too': 'spam!'}

    @pytest.mark.parametrize(
        'uri_template, path, expected',
        [
            ('/{food:spam}', '/something', {'food': 'spam!'}),
            (
                '/{food:spam(")")}:{food_too:spam("()")}',
                '/bacon:eggs',
                {'food': 'spam!', 'food_too': 'spam!'},
            ),
            (
                '/({food:spam()}){food_too:spam("()")}',
                '/(bacon)eggs',
                {'food': 'spam!', 'food_too': 'spam!'},
            ),
        ],
    )
    def test_converter_custom(client, resource, uri_template, path, expected):
        class SpamConverter:
            def __init__(self, useless_text=None):
                pass
    
            def convert(self, fragment):
                return 'spam!'
    
        client.app.router_options.converters['spam'] = SpamConverter
>       client.app.add_route(uri_template, resource)

tests/test_uri_templates.py:413: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd95081c430>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098f0a0>, 'CHECK...f0a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098f0a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fd950d61000>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________________________ test_multiple[asgi] ______________________________

client = <falcon.testing.client.TestClient object at 0x7fd950beb040>

    def test_multiple(client):
        resource = NameResource()
>       client.app.add_route('/messages/{id}/names/{name}', resource)

tests/test_uri_templates.py:459: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950a00660>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950947400>, 'CHECK...7400>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950947400>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method NameResource.on_get of <test_uri_templates.NameResource object at 0x7fd950be8f40>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________________ test_single_path_segment[asgi] ________________________

client = <falcon.testing.client.TestClient object at 0x7fd950b2b1f0>

    def test_single_path_segment(client):
        id_resource = IDResource()
    
>       client.app.add_route('/thing-{id}', id_resource)

tests/test_uri_templates.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950846ab0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9509476d0>, 'CHECK...76d0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9509476d0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7fd950b2a1a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________________ test_same_level_complex_var[asgi-True] ____________________

client = <falcon.testing.client.TestClient object at 0x7fd950d37a60>
reverse = True

    @pytest.mark.parametrize('reverse', [True, False])
    def test_same_level_complex_var(client, reverse):
        file_resource = FileResource()
        details_resource = FileDetailsResource()
    
        routes = [
            ('/files/{file_id}', file_resource),
            ('/files/{file_id}.{ext}', details_resource),
        ]
        if reverse:
            routes.reverse()
    
        for uri_template, resource in routes:
>           client.app.add_route(uri_template, resource)

tests/test_uri_templates.py:511: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950a02110>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950945630>, 'CHECK...5630>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950945630>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method FileDetailsResource.on_get of <test_uri_templates.FileDetailsResource object at 0x7fd950d37850>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________________________ test_special_chars[asgi] ___________________________

client = <falcon.testing.client.TestClient object at 0x7fd950c76080>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7fd950c776d0>

    def test_special_chars(client, resource):
>       client.app.add_route('/hello/world.json', resource)

tests/test_uri_templates.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950847a70>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950946560>, 'CHECK...6560>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950946560>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fd950c776d0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______________ test_float_converter_non_finite_disallowed[asgi] _______________

client = <falcon.testing.client.TestClient object at 0x7fd950c86650>

    def test_float_converter_non_finite_disallowed(client):
        resource1 = IDResource()
>       client.app.add_route('/{id:float}', resource1)

tests/test_uri_templates.py:254: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9508e00b0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950947ac0>, 'CHECK...7ac0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950947ac0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7fd950c86920>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______________ test_float_converter_non_finite_allowed[asgi-inf] _______________

value = 'inf'
client = <falcon.testing.client.TestClient object at 0x7fd950ecc640>

    @pytest.mark.parametrize('value', ['nan', '-inf', 'inf'])
    def test_float_converter_non_finite_allowed(value, client):
        resource1 = IDResource()
>       client.app.add_route('/{id:float(finite=False)}', resource1)

tests/test_uri_templates.py:243: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9508e0040>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9508c4280>, 'CHECK...4280>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9508c4280>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7fd950eccf70>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ test_uuid_converter_complex_segment[asgi] ___________________

client = <falcon.testing.client.TestClient object at 0x7fd950ad7c70>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7fd950ad50c0>

    def test_uuid_converter_complex_segment(client, resource):
>       client.app.add_route('/pages/{first:uuid}...{last:uuid}', resource)

tests/test_uri_templates.py:375: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9508e0f20>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950946e60>, 'CHECK...6e60>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950946e60>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fd950ad50c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________________ test_int_converter[asgi-/{id:int(min=123)}] __________________

client = <falcon.testing.client.TestClient object at 0x7fd950dfb460>
uri_template = '/{id:int(min=123)}'

    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:int}',
            '/{id:int(3)}',
            '/{id:int(min=123)}',
            '/{id:int(min=123, max=123)}',
        ],
    )
    def test_int_converter(client, uri_template):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:208: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9508e1230>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098dfc0>, 'CHECK...dfc0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098dfc0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7fd950dfa680>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______________ test_float_converter_non_finite_allowed[asgi--inf] ______________

value = '-inf'
client = <falcon.testing.client.TestClient object at 0x7fd950c12800>

    @pytest.mark.parametrize('value', ['nan', '-inf', 'inf'])
    def test_float_converter_non_finite_allowed(value, client):
        resource1 = IDResource()
>       client.app.add_route('/{id:float(finite=False)}', resource1)

tests/test_uri_templates.py:243: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9508e2ab0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950945cf0>, 'CHECK...5cf0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950945cf0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7fd950c10850>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________ test_float_converter[asgi-/{id:float(min=1.8, max=3)}-2] ___________

client = <falcon.testing.client.TestClient object at 0x7fd950da80d0>
uri_template = '/{id:float(min=1.8, max=3)}', id_value = 2

    @pytest.mark.parametrize('id_value', [2, 2.1, 1.9])
    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:float}',
            '/{id:float(1)}',
            '/{id:float(min=1.9)}',
            '/{id:float(min=1.8, max=3)}',
        ],
    )
    def test_float_converter(client, uri_template, id_value):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:230: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950845b60>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098d870>, 'CHECK...d870>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098d870>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7fd950bef5b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________________ test_int_converter[asgi-/{id:int(3)}] _____________________

client = <falcon.testing.client.TestClient object at 0x7fd950be3790>
uri_template = '/{id:int(3)}'

    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:int}',
            '/{id:int(3)}',
            '/{id:int(min=123)}',
            '/{id:int(min=123, max=123)}',
        ],
    )
    def test_int_converter(client, uri_template):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:208: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9508e1a80>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950945a20>, 'CHECK...5a20>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950945a20>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7fd950be3910>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ test_uuid_converter[asgi-uuid_converter_3] __________________

client = <falcon.testing.client.TestClient object at 0x7fd950ecfb50>
resource = <falcon.testing.resource.SimpleTestResource object at 0x7fd950ece830>
uri_template = '/versions/diff/{left:uuid()}...{right:uuid()}'
path = '/versions/diff/142a1324-7745-4915-9e5b-e24d12cfa096...d3126079-a8da-4672-b6fe-fa68c18738b1'
expected = {'left': UUID('142a1324-7745-4915-9e5b-e24d12cfa096'), 'right': UUID('d3126079-a8da-4672-b6fe-fa68c18738b1')}

    @pytest.mark.parametrize(
        'uri_template, path, expected',
        as_params(
            (
                '/widgets/{widget_id:uuid}',
                '/widgets/' + _TEST_UUID_STR,
                {'widget_id': _TEST_UUID},
            ),
            (
                '/widgets/{widget_id:uuid}/orders',
                '/widgets/' + _TEST_UUID_STR_SANS_HYPHENS + '/orders',
                {'widget_id': _TEST_UUID},
            ),
            (
                '/versions/diff/{left:uuid()}...{right:uuid()}',
                '/versions/diff/{}...{}'.format(_TEST_UUID_STR, _TEST_UUID_STR_2),
                {
                    'left': _TEST_UUID,
                    'right': _TEST_UUID_2,
                },
            ),
            (
                '/versions/diff/{left:uuid}...{right:uuid()}',
                '/versions/diff/{}...{}'.format(_TEST_UUID_STR, _TEST_UUID_STR_2),
                {
                    'left': _TEST_UUID,
                    'right': _TEST_UUID_2,
                },
            ),
            (
                '/versions/diff/{left:uuid()}...{right:uuid}',
                '/versions/diff/{}...{}'.format(_TEST_UUID_STR, _TEST_UUID_STR_2),
                {
                    'left': _TEST_UUID,
                    'right': _TEST_UUID_2,
                },
            ),
            (
                '/widgets/{widget_id:uuid}/orders',
                '/widgets/' + _TEST_UUID_STR_SANS_HYPHENS[:-1] + '/orders',
                None,
            ),
            prefix='uuid_converter',
        ),
    )
    def test_uuid_converter(client, resource, uri_template, path, expected):
>       client.app.add_route(uri_template, resource)

tests/test_uri_templates.py:361: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9508e3e60>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950947eb0>, 'CHECK...7eb0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950947eb0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fd950ece830>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________________ test_float_converter[asgi-/{id:float(1)}-2] __________________

client = <falcon.testing.client.TestClient object at 0x7fd950d023e0>
uri_template = '/{id:float(1)}', id_value = 2

    @pytest.mark.parametrize('id_value', [2, 2.1, 1.9])
    @pytest.mark.parametrize(
        'uri_template,',
        [
            '/{id:float}',
            '/{id:float(1)}',
            '/{id:float(min=1.9)}',
            '/{id:float(min=1.8, max=3)}',
        ],
    )
    def test_float_converter(client, uri_template, id_value):
        resource1 = IDResource()
>       client.app.add_route(uri_template, resource1)

tests/test_uri_templates.py:230: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950a02650>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9509443a0>, 'CHECK...43a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9509443a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method IDResource.on_get of <test_uri_templates.IDResource object at 0x7fd950d02b00>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________________ test_client_simulate_aliases[asgi-HEAD] ____________________

asgi = True, method = 'HEAD'

    @pytest.mark.parametrize(
        'method', ['DELETE', 'GET', 'HEAD', 'LOCK', 'OPTIONS', 'PATCH', 'POST', 'PUT']
    )
    def test_client_simulate_aliases(asgi, method):
        def capture_method(req, resp):
            resp.content_type = falcon.MEDIA_TEXT
            resp.text = req.method
    
        app = create_app(asgi)
>       app.add_sink(capture_method)

tests/test_testing.py:188: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.asgi.app.App object at 0x7fd950c93e80>
sink = <function test_client_simulate_aliases.<locals>.capture_method at 0x7fd950d25c60>
prefix = '/'

    def add_sink(self, sink: Callable, prefix: SinkPrefix = r'/'):
        if not iscoroutinefunction(sink) and is_python_func(sink):
            if _should_wrap_non_coroutines():
                sink = wrap_sync_to_async(sink)
            else:
>               raise CompatibilityError(
                    'The sink method must be an awaitable coroutine function '
                    'in order to be used safely with an ASGI app.'
                )
E               falcon.errors.CompatibilityError: The sink method must be an awaitable coroutine function in order to be used safely with an ASGI app.

falcon/asgi/app.py:740: CompatibilityError
__________________ test_client_simulate_aliases[asgi-OPTIONS] __________________

asgi = True, method = 'OPTIONS'

    @pytest.mark.parametrize(
        'method', ['DELETE', 'GET', 'HEAD', 'LOCK', 'OPTIONS', 'PATCH', 'POST', 'PUT']
    )
    def test_client_simulate_aliases(asgi, method):
        def capture_method(req, resp):
            resp.content_type = falcon.MEDIA_TEXT
            resp.text = req.method
    
        app = create_app(asgi)
>       app.add_sink(capture_method)

tests/test_testing.py:188: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.asgi.app.App object at 0x7fd950c92440>
sink = <function test_client_simulate_aliases.<locals>.capture_method at 0x7fd950d279a0>
prefix = '/'

    def add_sink(self, sink: Callable, prefix: SinkPrefix = r'/'):
        if not iscoroutinefunction(sink) and is_python_func(sink):
            if _should_wrap_non_coroutines():
                sink = wrap_sync_to_async(sink)
            else:
>               raise CompatibilityError(
                    'The sink method must be an awaitable coroutine function '
                    'in order to be used safely with an ASGI app.'
                )
E               falcon.errors.CompatibilityError: The sink method must be an awaitable coroutine function in order to be used safely with an ASGI app.

falcon/asgi/app.py:740: CompatibilityError
____________________ test_client_simulate_aliases[asgi-GET] ____________________

asgi = True, method = 'GET'

    @pytest.mark.parametrize(
        'method', ['DELETE', 'GET', 'HEAD', 'LOCK', 'OPTIONS', 'PATCH', 'POST', 'PUT']
    )
    def test_client_simulate_aliases(asgi, method):
        def capture_method(req, resp):
            resp.content_type = falcon.MEDIA_TEXT
            resp.text = req.method
    
        app = create_app(asgi)
>       app.add_sink(capture_method)

tests/test_testing.py:188: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.asgi.app.App object at 0x7fd950c93880>
sink = <function test_client_simulate_aliases.<locals>.capture_method at 0x7fd950adab90>
prefix = '/'

    def add_sink(self, sink: Callable, prefix: SinkPrefix = r'/'):
        if not iscoroutinefunction(sink) and is_python_func(sink):
            if _should_wrap_non_coroutines():
                sink = wrap_sync_to_async(sink)
            else:
>               raise CompatibilityError(
                    'The sink method must be an awaitable coroutine function '
                    'in order to be used safely with an ASGI app.'
                )
E               falcon.errors.CompatibilityError: The sink method must be an awaitable coroutine function in order to be used safely with an ASGI app.

falcon/asgi/app.py:740: CompatibilityError
___________________ test_client_simulate_aliases[asgi-LOCK] ____________________

asgi = True, method = 'LOCK'

    @pytest.mark.parametrize(
        'method', ['DELETE', 'GET', 'HEAD', 'LOCK', 'OPTIONS', 'PATCH', 'POST', 'PUT']
    )
    def test_client_simulate_aliases(asgi, method):
        def capture_method(req, resp):
            resp.content_type = falcon.MEDIA_TEXT
            resp.text = req.method
    
        app = create_app(asgi)
>       app.add_sink(capture_method)

tests/test_testing.py:188: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.asgi.app.App object at 0x7fd950c92200>
sink = <function test_client_simulate_aliases.<locals>.capture_method at 0x7fd9517f95a0>
prefix = '/'

    def add_sink(self, sink: Callable, prefix: SinkPrefix = r'/'):
        if not iscoroutinefunction(sink) and is_python_func(sink):
            if _should_wrap_non_coroutines():
                sink = wrap_sync_to_async(sink)
            else:
>               raise CompatibilityError(
                    'The sink method must be an awaitable coroutine function '
                    'in order to be used safely with an ASGI app.'
                )
E               falcon.errors.CompatibilityError: The sink method must be an awaitable coroutine function in order to be used safely with an ASGI app.

falcon/asgi/app.py:740: CompatibilityError
___________________ test_client_simulate_aliases[asgi-POST] ____________________

asgi = True, method = 'POST'

    @pytest.mark.parametrize(
        'method', ['DELETE', 'GET', 'HEAD', 'LOCK', 'OPTIONS', 'PATCH', 'POST', 'PUT']
    )
    def test_client_simulate_aliases(asgi, method):
        def capture_method(req, resp):
            resp.content_type = falcon.MEDIA_TEXT
            resp.text = req.method
    
        app = create_app(asgi)
>       app.add_sink(capture_method)

tests/test_testing.py:188: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.asgi.app.App object at 0x7fd950c93e80>
sink = <function test_client_simulate_aliases.<locals>.capture_method at 0x7fd95098c5e0>
prefix = '/'

    def add_sink(self, sink: Callable, prefix: SinkPrefix = r'/'):
        if not iscoroutinefunction(sink) and is_python_func(sink):
            if _should_wrap_non_coroutines():
                sink = wrap_sync_to_async(sink)
            else:
>               raise CompatibilityError(
                    'The sink method must be an awaitable coroutine function '
                    'in order to be used safely with an ASGI app.'
                )
E               falcon.errors.CompatibilityError: The sink method must be an awaitable coroutine function in order to be used safely with an ASGI app.

falcon/asgi/app.py:740: CompatibilityError
___________________ test_client_simulate_aliases[asgi-PATCH] ___________________

asgi = True, method = 'PATCH'

    @pytest.mark.parametrize(
        'method', ['DELETE', 'GET', 'HEAD', 'LOCK', 'OPTIONS', 'PATCH', 'POST', 'PUT']
    )
    def test_client_simulate_aliases(asgi, method):
        def capture_method(req, resp):
            resp.content_type = falcon.MEDIA_TEXT
            resp.text = req.method
    
        app = create_app(asgi)
>       app.add_sink(capture_method)

tests/test_testing.py:188: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.asgi.app.App object at 0x7fd950c92500>
sink = <function test_client_simulate_aliases.<locals>.capture_method at 0x7fd95098e290>
prefix = '/'

    def add_sink(self, sink: Callable, prefix: SinkPrefix = r'/'):
        if not iscoroutinefunction(sink) and is_python_func(sink):
            if _should_wrap_non_coroutines():
                sink = wrap_sync_to_async(sink)
            else:
>               raise CompatibilityError(
                    'The sink method must be an awaitable coroutine function '
                    'in order to be used safely with an ASGI app.'
                )
E               falcon.errors.CompatibilityError: The sink method must be an awaitable coroutine function in order to be used safely with an ASGI app.

falcon/asgi/app.py:740: CompatibilityError
__________________ test_client_simulate_aliases[asgi-DELETE] ___________________

asgi = True, method = 'DELETE'

    @pytest.mark.parametrize(
        'method', ['DELETE', 'GET', 'HEAD', 'LOCK', 'OPTIONS', 'PATCH', 'POST', 'PUT']
    )
    def test_client_simulate_aliases(asgi, method):
        def capture_method(req, resp):
            resp.content_type = falcon.MEDIA_TEXT
            resp.text = req.method
    
        app = create_app(asgi)
>       app.add_sink(capture_method)

tests/test_testing.py:188: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.asgi.app.App object at 0x7fd950c93c40>
sink = <function test_client_simulate_aliases.<locals>.capture_method at 0x7fd95098f6d0>
prefix = '/'

    def add_sink(self, sink: Callable, prefix: SinkPrefix = r'/'):
        if not iscoroutinefunction(sink) and is_python_func(sink):
            if _should_wrap_non_coroutines():
                sink = wrap_sync_to_async(sink)
            else:
>               raise CompatibilityError(
                    'The sink method must be an awaitable coroutine function '
                    'in order to be used safely with an ASGI app.'
                )
E               falcon.errors.CompatibilityError: The sink method must be an awaitable coroutine function in order to be used safely with an ASGI app.

falcon/asgi/app.py:740: CompatibilityError
____________________ test_client_simulate_aliases[asgi-PUT] ____________________

asgi = True, method = 'PUT'

    @pytest.mark.parametrize(
        'method', ['DELETE', 'GET', 'HEAD', 'LOCK', 'OPTIONS', 'PATCH', 'POST', 'PUT']
    )
    def test_client_simulate_aliases(asgi, method):
        def capture_method(req, resp):
            resp.content_type = falcon.MEDIA_TEXT
            resp.text = req.method
    
        app = create_app(asgi)
>       app.add_sink(capture_method)

tests/test_testing.py:188: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.asgi.app.App object at 0x7fd950c937c0>
sink = <function test_client_simulate_aliases.<locals>.capture_method at 0x7fd95098d990>
prefix = '/'

    def add_sink(self, sink: Callable, prefix: SinkPrefix = r'/'):
        if not iscoroutinefunction(sink) and is_python_func(sink):
            if _should_wrap_non_coroutines():
                sink = wrap_sync_to_async(sink)
            else:
>               raise CompatibilityError(
                    'The sink method must be an awaitable coroutine function '
                    'in order to be used safely with an ASGI app.'
                )
E               falcon.errors.CompatibilityError: The sink method must be an awaitable coroutine function in order to be used safely with an ASGI app.

falcon/asgi/app.py:740: CompatibilityError
_________________ TestCythonized.test_imported_from_c_modules __________________

self = <test_cython.TestCythonized object at 0x7fd8121d4df0>

    @pytest.mark.skipif(not has_cython, reason='Cython not installed')
    def test_imported_from_c_modules(self):
>       assert 'falcon/app.py' not in str(falcon.app)
E       assert 'falcon/app.py' not in "<module 'fa...con/app.py'>"
E         'falcon/app.py' is contained here:
E           ts/falcon/falcon/app.py'>

tests/test_cython.py:14: AssertionError
_________________ TestCythonized.test_stream_has_private_read __________________

self = <test_cython.TestCythonized object at 0x7fd8121d4f70>

    def test_stream_has_private_read(self):
        stream = falcon.util.BufferedReader(io.BytesIO().read, 8)
    
        if has_cython and falcon.util.IS_64_BITS:
>           assert not hasattr(stream, '_read')
E           AssertionError: assert not True
E            +  where True = hasattr(<falcon.util.reader.BufferedReader object at 0x7fd7fe344430>, '_read')

tests/test_cython.py:20: AssertionError
________________ TestErrorHandler.test_caught_error_async[asgi] ________________

self = <test_error_handlers.TestErrorHandler object at 0x7fd81210c370>
asgi = True

    def test_caught_error_async(self, asgi):
        if not asgi:
            pytest.skip('Test only applies to ASGI')
    
        app = falcon.asgi.App()
>       app.add_route('/', ErroredClassResource())

tests/test_error_handlers.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950578890>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9502297e0>, 'CHECK...97e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9502297e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ErroredClassResource.on_delete of <test_error_handlers.ErroredClassResource object at 0x7fd845c3be80>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ TestErrorHandler.test_catch_http_no_route_error[asgi] _____________

self = <test_error_handlers.TestErrorHandler object at 0x7fd81210ce20>
asgi = True

    def test_catch_http_no_route_error(self, asgi):
        class Resource:
            def on_get(self, req, resp):
                raise falcon.HTTPNotFound()
    
        def capture_error(req, resp, ex, params):
            resp.set_header('X-name', ex.__class__.__name__)
            raise ex
    
        app = create_app(asgi)
>       app.add_route('/', Resource())

tests/test_error_handlers.py:243: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd95081eab0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501f8940>, 'CHECK...8940>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501f8940>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestErrorHandler.test_catch_http_no_route_error.<locals>.Resource.on_get of <test_error_handlers.TestErrorHandler.test_catch_http_no_route_error.<locals>.Resource object at 0x7fd950be5330>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____ TestEmptySignatureMiddleware.test_dont_need_params_in_signature[asgi] _____

self = <test_middleware.TestEmptySignatureMiddleware object at 0x7fd811b695d0>
asgi = True

    def test_dont_need_params_in_signature(self, asgi):
        """
        Verify that we don't need parameters in the process_* signatures (for
        side-effect-only middlewares, mostly). Makes no difference on py27
        but does affect py36.
    
        https://github.com/falconry/falcon/issues/1254
        """
>       create_app(asgi, middleware=EmptySignatureMiddleware())

tests/test_middleware.py:868: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.EmptySignatureMiddleware object at 0x7fd950ab2080>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method EmptySignatureMiddleware.process_request of <test_middleware.EmptySignatureMiddleware object at 0x7fd950ab2080>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
______ TestErrorHandling.test_http_status_raised_from_error_handler[asgi] ______

self = <test_middleware.TestErrorHandling object at 0x7fd811b69ba0>, asgi = True

    def test_http_status_raised_from_error_handler(self, asgi):
        mw = CaptureResponseMiddleware()
>       app = create_app(asgi, middleware=mw)

tests/test_middleware.py:894: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.CaptureResponseMiddleware object at 0x7fd9501df130>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method CaptureResponseMiddleware.process_response of <test_middleware.CaptureResponseMiddleware object at 0x7fd9501df130>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
__ TestErrorHandling.test_error_composed_before_resp_middleware_called[asgi] ___

self = <test_middleware.TestErrorHandling object at 0x7fd811b69b40>, asgi = True

    def test_error_composed_before_resp_middleware_called(self, asgi):
        mw = CaptureResponseMiddleware()
>       app = create_app(asgi, middleware=mw)

tests/test_middleware.py:874: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.CaptureResponseMiddleware object at 0x7fd950a5cd00>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method CaptureResponseMiddleware.process_response of <test_middleware.CaptureResponseMiddleware object at 0x7fd950a5cd00>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
______ TestResourceMiddleware.test_can_access_resource_params[asgi-False] ______

self = <test_middleware.TestResourceMiddleware object at 0x7fd811b69180>
asgi = True, independent_middleware = False

    @pytest.mark.parametrize('independent_middleware', [True, False])
    def test_can_access_resource_params(self, asgi, independent_middleware):
        """Test that params can be accessed from within process_resource"""
        global context
    
        class Resource:
            def on_get(self, req, resp, **params):
                resp.text = json.dumps(params)
    
>       app = create_app(
            asgi,
            middleware=AccessParamsMiddleware(),
            independent_middleware=independent_middleware,
        )

tests/test_middleware.py:844: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.AccessParamsMiddleware object at 0x7fd9505a6440>]
independent_middleware = False, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method AccessParamsMiddleware.process_resource of <test_middleware.AccessParamsMiddleware object at 0x7fd9505a6440>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
______ TestResourceMiddleware.test_can_access_resource_params[asgi-True] _______

self = <test_middleware.TestResourceMiddleware object at 0x7fd811b69090>
asgi = True, independent_middleware = True

    @pytest.mark.parametrize('independent_middleware', [True, False])
    def test_can_access_resource_params(self, asgi, independent_middleware):
        """Test that params can be accessed from within process_resource"""
        global context
    
        class Resource:
            def on_get(self, req, resp, **params):
                resp.text = json.dumps(params)
    
>       app = create_app(
            asgi,
            middleware=AccessParamsMiddleware(),
            independent_middleware=independent_middleware,
        )

tests/test_middleware.py:844: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.AccessParamsMiddleware object at 0x7fd950036740>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method AccessParamsMiddleware.process_resource of <test_middleware.AccessParamsMiddleware object at 0x7fd950036740>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
____ TestTransactionIdMiddleware.test_generate_trans_id_with_request[asgi] _____

self = <test_middleware.TestTransactionIdMiddleware object at 0x7fd811b3e110>
asgi = True

    def test_generate_trans_id_with_request(self, asgi):
        """Test that TransactionIdmiddleware is executed"""
        global context
    
        middleware = (
            TransactionIdMiddlewareAsync() if asgi else TransactionIdMiddleware()
        )
        app = create_app(asgi, middleware=middleware)
    
>       app.add_route(TEST_ROUTE, MiddlewareClassResource())

tests/test_middleware.py:267: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9500a8430>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9506067a0>, 'CHECK...67a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9506067a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method MiddlewareClassResource.on_get of <test_middleware.MiddlewareClassResource object at 0x7fd950624070>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________ TestRequestTimeMiddleware.test_log_get_request[asgi-True] ___________

self = <test_middleware.TestRequestTimeMiddleware object at 0x7fd811b3dc00>
independent_middleware = True, asgi = True

    @pytest.mark.parametrize('independent_middleware', [True, False])
    def test_log_get_request(self, independent_middleware, asgi):
        """Test that Log middleware is executed"""
        global context
        app = create_app(
            asgi,
            middleware=[RequestTimeMiddleware()],
            independent_middleware=independent_middleware,
        )
    
>       app.add_route(TEST_ROUTE, MiddlewareClassResource())

tests/test_middleware.py:237: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9500a9380>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950604040>, 'CHECK...4040>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950604040>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method MiddlewareClassResource.on_get of <test_middleware.MiddlewareClassResource object at 0x7fd9500f4c10>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________ TestRequestTimeMiddleware.test_log_get_request[asgi-False] __________

self = <test_middleware.TestRequestTimeMiddleware object at 0x7fd811b3dcc0>
independent_middleware = False, asgi = True

    @pytest.mark.parametrize('independent_middleware', [True, False])
    def test_log_get_request(self, independent_middleware, asgi):
        """Test that Log middleware is executed"""
        global context
        app = create_app(
            asgi,
            middleware=[RequestTimeMiddleware()],
            independent_middleware=independent_middleware,
        )
    
>       app.add_route(TEST_ROUTE, MiddlewareClassResource())

tests/test_middleware.py:237: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9500aa730>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950607400>, 'CHECK...7400>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950607400>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method MiddlewareClassResource.on_get of <test_middleware.MiddlewareClassResource object at 0x7fd950626680>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________ TestRequestTimeMiddleware.test_skip_process_resource[asgi] __________

self = <test_middleware.TestRequestTimeMiddleware object at 0x7fd811b3d360>
asgi = True

    def test_skip_process_resource(self, asgi):
        global context
        app = create_app(asgi, middleware=[RequestTimeMiddleware()])
    
>       app.add_route('/', MiddlewareClassResource())

tests/test_middleware.py:183: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9500926c0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950607910>, 'CHECK...7910>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950607910>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method MiddlewareClassResource.on_get of <test_middleware.MiddlewareClassResource object at 0x7fd9500f72b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__ TestRequestTimeMiddleware.test_response_middleware_raises_exception[asgi] ___

self = <test_middleware.TestRequestTimeMiddleware object at 0x7fd811b3d600>
asgi = True

    def test_response_middleware_raises_exception(self, asgi):
        """Test that error in response middleware is propagated up"""
    
        class RaiseErrorMiddleware:
            def process_response(self, req, resp, resource):
                raise Exception('Always fail')
    
>       app = create_app(asgi, middleware=[RaiseErrorMiddleware()])

tests/test_middleware.py:219: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.TestRequestTimeMiddleware.test_response_middleware_raises_exception.<locals>.RaiseErrorMiddleware object at 0x7fd950b968c0>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method TestRequestTimeMiddleware.test_response_middleware_raises_exception.<locals>.RaiseErrorMiddleware.process_response of <test_middleware.TestRequestTimeMiddleware.test_response_middleware_raises_exception.<locals>.RaiseErrorMiddleware object at 0x7fd950b968c0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_ TestCORSMiddlewareWithAnotherMiddleware.test_api_initialization_with_cors_enabled_and_middleware_param[asgi-mw0] _

self = <test_middleware.TestCORSMiddlewareWithAnotherMiddleware object at 0x7fd811b6af20>
mw = <test_middleware.CaptureResponseMiddleware object at 0x7fd811b3c220>
asgi = True

    @pytest.mark.parametrize(
        'mw',
        [
            CaptureResponseMiddleware(),
            [CaptureResponseMiddleware()],
            (CaptureResponseMiddleware(),),
            iter([CaptureResponseMiddleware()]),
        ],
    )
    def test_api_initialization_with_cors_enabled_and_middleware_param(self, mw, asgi):
>       app = create_app(asgi, middleware=mw, cors_enable=True)

tests/test_middleware.py:1006: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.CaptureResponseMiddleware object at 0x7fd811b3c220>, <falcon.middleware.CORSMiddleware object at 0x7fd84591b340>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method CaptureResponseMiddleware.process_response of <test_middleware.CaptureResponseMiddleware object at 0x7fd811b3c220>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_ TestCORSMiddlewareWithAnotherMiddleware.test_api_initialization_with_cors_enabled_and_middleware_param[asgi-mw1] _

self = <test_middleware.TestCORSMiddlewareWithAnotherMiddleware object at 0x7fd811b6b040>
mw = [<test_middleware.CaptureResponseMiddleware object at 0x7fd811b3c460>]
asgi = True

    @pytest.mark.parametrize(
        'mw',
        [
            CaptureResponseMiddleware(),
            [CaptureResponseMiddleware()],
            (CaptureResponseMiddleware(),),
            iter([CaptureResponseMiddleware()]),
        ],
    )
    def test_api_initialization_with_cors_enabled_and_middleware_param(self, mw, asgi):
>       app = create_app(asgi, middleware=mw, cors_enable=True)

tests/test_middleware.py:1006: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.CaptureResponseMiddleware object at 0x7fd811b3c460>, <falcon.middleware.CORSMiddleware object at 0x7fd8122132e0>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method CaptureResponseMiddleware.process_response of <test_middleware.CaptureResponseMiddleware object at 0x7fd811b3c460>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_ TestCORSMiddlewareWithAnotherMiddleware.test_api_initialization_with_cors_enabled_and_middleware_param[asgi-mw2] _

self = <test_middleware.TestCORSMiddlewareWithAnotherMiddleware object at 0x7fd811b6b0d0>
mw = (<test_middleware.CaptureResponseMiddleware object at 0x7fd811b3c580>,)
asgi = True

    @pytest.mark.parametrize(
        'mw',
        [
            CaptureResponseMiddleware(),
            [CaptureResponseMiddleware()],
            (CaptureResponseMiddleware(),),
            iter([CaptureResponseMiddleware()]),
        ],
    )
    def test_api_initialization_with_cors_enabled_and_middleware_param(self, mw, asgi):
>       app = create_app(asgi, middleware=mw, cors_enable=True)

tests/test_middleware.py:1006: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.CaptureResponseMiddleware object at 0x7fd811b3c580>, <falcon.middleware.CORSMiddleware object at 0x7fd950de09d0>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method CaptureResponseMiddleware.process_response of <test_middleware.CaptureResponseMiddleware object at 0x7fd811b3c580>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_ TestCORSMiddlewareWithAnotherMiddleware.test_api_initialization_with_cors_enabled_and_middleware_param[asgi-mw3] _

self = <test_middleware.TestCORSMiddlewareWithAnotherMiddleware object at 0x7fd811b6b160>
mw = <list_iterator object at 0x7fd811b3c730>, asgi = True

    @pytest.mark.parametrize(
        'mw',
        [
            CaptureResponseMiddleware(),
            [CaptureResponseMiddleware()],
            (CaptureResponseMiddleware(),),
            iter([CaptureResponseMiddleware()]),
        ],
    )
    def test_api_initialization_with_cors_enabled_and_middleware_param(self, mw, asgi):
        app = create_app(asgi, middleware=mw, cors_enable=True)
>       app.add_route('/', TestCorsResource())

tests/test_middleware.py:1007: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd95017cb30>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098c5e0>, 'CHECK...c5e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95098c5e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestCorsResource.on_get of <test_middleware.TestCorsResource object at 0x7fd81df8b6a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestRemoveBasePathMiddleware.test_base_path_is_removed_before_routing[asgi] __

self = <test_middleware.TestRemoveBasePathMiddleware object at 0x7fd811b68970>
asgi = True

    def test_base_path_is_removed_before_routing(self, asgi):
        """Test that RemoveBasePathMiddleware is executed before routing"""
>       app = create_app(asgi, middleware=RemoveBasePathMiddleware())

tests/test_middleware.py:821: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.RemoveBasePathMiddleware object at 0x7fd950edb6a0>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method RemoveBasePathMiddleware.process_request of <test_middleware.RemoveBasePathMiddleware object at 0x7fd950edb6a0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
__________ TestSeveralMiddlewares.test_inner_mw_throw_exception[asgi] __________

self = <test_middleware.TestSeveralMiddlewares object at 0x7fd811b3ef50>
asgi = True

    def test_inner_mw_throw_exception(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        class MyException(Exception):
            pass
    
        class RaiseErrorMiddleware:
            def process_request(self, req, resp):
                raise MyException('Always fail')
    
>       app = create_app(
            asgi,
            middleware=[
                TransactionIdMiddleware(),
                RequestTimeMiddleware(),
                RaiseErrorMiddleware(),
            ],
        )

tests/test_middleware.py:439: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.TransactionIdMiddleware object at 0x7fd950be4ac0>, <test_middleware.RequestTimeMiddleware object at ...iddleware.TestSeveralMiddlewares.test_inner_mw_throw_exception.<locals>.RaiseErrorMiddleware object at 0x7fd950be45b0>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method TransactionIdMiddleware.process_request of <test_middleware.TransactionIdMiddleware object at 0x7fd950be4ac0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_ TestSeveralMiddlewares.test_order_independent_mw_executed_when_exception_in_rsrc[asgi] _

self = <test_middleware.TestSeveralMiddlewares object at 0x7fd811b68490>
asgi = True

    def test_order_independent_mw_executed_when_exception_in_rsrc(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        class RaiseErrorMiddleware:
            def process_resource(self, req, resp, resource):
                raise Exception('Always fail')
    
        class RaiseErrorMiddlewareAsync:
            async def process_resource(self, req, resp, resource):
                raise Exception('Always fail')
    
        rem = RaiseErrorMiddlewareAsync() if asgi else RaiseErrorMiddleware()
    
>       app = create_app(
            asgi,
            independent_middleware=True,
            middleware=[ExecutedFirstMiddleware(), rem, ExecutedLastMiddleware()],
        )

tests/test_middleware.py:791: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.ExecutedFirstMiddleware object at 0x7fd950a5eaa0>, <test_middleware.TestSeveralMiddlewares.test_orde...RaiseErrorMiddlewareAsync object at 0x7fd950a5d330>, <test_middleware.ExecutedLastMiddleware object at 0x7fd950a5fa30>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ExecutedFirstMiddleware.process_request of <test_middleware.ExecutedFirstMiddleware object at 0x7fd950a5eaa0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_ TestSeveralMiddlewares.test_order_independent_mw_executed_when_exception_in_resp[asgi] _

self = <test_middleware.TestSeveralMiddlewares object at 0x7fd811b3fb80>
asgi = True

    def test_order_independent_mw_executed_when_exception_in_resp(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        class RaiseErrorMiddleware:
            def process_response(self, req, resp, resource):
                raise Exception('Always fail')
    
>       app = create_app(
            asgi,
            independent_middleware=True,
            middleware=[
                ExecutedFirstMiddleware(),
                RaiseErrorMiddleware(),
                ExecutedLastMiddleware(),
            ],
        )

tests/test_middleware.py:632: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.ExecutedFirstMiddleware object at 0x7fd9501dfdf0>, <test_middleware.TestSeveralMiddlewares.test_orde...als>.RaiseErrorMiddleware object at 0x7fd9501dea40>, <test_middleware.ExecutedLastMiddleware object at 0x7fd9501df370>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ExecutedFirstMiddleware.process_request of <test_middleware.ExecutedFirstMiddleware object at 0x7fd9501dfdf0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
__ TestSeveralMiddlewares.test_order_mw_executed_when_exception_in_resp[asgi] __

self = <test_middleware.TestSeveralMiddlewares object at 0x7fd811b3f910>
asgi = True

    def test_order_mw_executed_when_exception_in_resp(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        class RaiseErrorMiddleware:
            def process_response(self, req, resp, resource):
                raise Exception('Always fail')
    
>       app = create_app(
            asgi,
            middleware=[
                ExecutedFirstMiddleware(),
                RaiseErrorMiddleware(),
                ExecutedLastMiddleware(),
            ],
        )

tests/test_middleware.py:594: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.ExecutedFirstMiddleware object at 0x7fd95024f460>, <test_middleware.TestSeveralMiddlewares.test_orde...als>.RaiseErrorMiddleware object at 0x7fd95024c190>, <test_middleware.ExecutedLastMiddleware object at 0x7fd95024e500>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ExecutedFirstMiddleware.process_request of <test_middleware.ExecutedFirstMiddleware object at 0x7fd95024f460>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
__ TestSeveralMiddlewares.test_inner_mw_with_ex_handler_throw_exception[asgi] __

self = <test_middleware.TestSeveralMiddlewares object at 0x7fd811b3f430>
asgi = True

    def test_inner_mw_with_ex_handler_throw_exception(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        class RaiseErrorMiddleware:
            def process_request(self, req, resp, resource):
                raise Exception('Always fail')
    
>       app = create_app(
            asgi,
            middleware=[
                TransactionIdMiddleware(),
                RequestTimeMiddleware(),
                RaiseErrorMiddleware(),
            ],
        )

tests/test_middleware.py:526: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.TransactionIdMiddleware object at 0x7fd9505a4af0>, <test_middleware.RequestTimeMiddleware object at ...veralMiddlewares.test_inner_mw_with_ex_handler_throw_exception.<locals>.RaiseErrorMiddleware object at 0x7fd9505a7700>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method TransactionIdMiddleware.process_request of <test_middleware.TransactionIdMiddleware object at 0x7fd9505a4af0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_________ TestSeveralMiddlewares.test_middleware_execution_order[asgi] _________

self = <test_middleware.TestSeveralMiddlewares object at 0x7fd811b3ead0>
asgi = True

    def test_middleware_execution_order(self, asgi):
        global context
>       app = create_app(
            asgi,
            independent_middleware=False,
            middleware=[ExecutedFirstMiddleware(), ExecutedLastMiddleware()],
        )

tests/test_middleware.py:337: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.ExecutedFirstMiddleware object at 0x7fd95024d600>, <test_middleware.ExecutedLastMiddleware object at 0x7fd95024f2e0>]
independent_middleware = False, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ExecutedFirstMiddleware.process_request of <test_middleware.ExecutedFirstMiddleware object at 0x7fd95024d600>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
__ TestSeveralMiddlewares.test_outer_mw_with_ex_handler_throw_exception[asgi] __

self = <test_middleware.TestSeveralMiddlewares object at 0x7fd811b3f6a0>
asgi = True

    def test_outer_mw_with_ex_handler_throw_exception(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        class RaiseErrorMiddleware:
            def process_request(self, req, resp):
                raise Exception('Always fail')
    
>       app = create_app(
            asgi,
            middleware=[
                TransactionIdMiddleware(),
                RaiseErrorMiddleware(),
                RequestTimeMiddleware(),
            ],
        )

tests/test_middleware.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.TransactionIdMiddleware object at 0x7fd9500f4af0>, <test_middleware.TestSeveralMiddlewares.test_oute...cals>.RaiseErrorMiddleware object at 0x7fd9500f4d60>, <test_middleware.RequestTimeMiddleware object at 0x7fd9500f5570>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method TransactionIdMiddleware.process_request of <test_middleware.TransactionIdMiddleware object at 0x7fd9500f4af0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_ TestSeveralMiddlewares.test_generate_trans_id_and_time_with_request[asgi-False] _

self = <test_middleware.TestSeveralMiddlewares object at 0x7fd811b3e8f0>
independent_middleware = False, asgi = True

    @pytest.mark.parametrize('independent_middleware', [True, False])
    def test_generate_trans_id_and_time_with_request(
        self, independent_middleware, asgi
    ):
        # NOTE(kgriffs): We test both so that we can cover the code paths
        # where only a single middleware method is implemented by a
        # component.
        creq = CaptureRequestMiddleware()
        cresp = CaptureResponseMiddleware()
    
        global context
>       app = create_app(
            asgi,
            independent_middleware=independent_middleware,
            # NOTE(kgriffs): Pass as a generic iterable to verify that works.
            middleware=iter(
                [
                    TransactionIdMiddleware(),
                    RequestTimeMiddleware(),
                ]
            ),
        )

tests/test_middleware.py:289: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.TransactionIdMiddleware object at 0x7fd84595ea70>, <test_middleware.RequestTimeMiddleware object at 0x7fd84595dde0>]
independent_middleware = False, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method TransactionIdMiddleware.process_request of <test_middleware.TransactionIdMiddleware object at 0x7fd84595ea70>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
__ TestSeveralMiddlewares.test_order_mw_executed_when_exception_in_rsrc[asgi] __

self = <test_middleware.TestSeveralMiddlewares object at 0x7fd811b3fe20>
asgi = True

    def test_order_mw_executed_when_exception_in_rsrc(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        class RaiseErrorMiddleware:
            def process_resource(self, req, resp, resource):
                raise Exception('Always fail')
    
        class RaiseErrorMiddlewareAsync:
            # NOTE(kgriffs): The *_async postfix is not required in this
            #   case, but we include it to make sure it works as expected.
            async def process_resource_async(self, req, resp, resource):
                raise Exception('Always fail')
    
        rem = RaiseErrorMiddlewareAsync() if asgi else RaiseErrorMiddleware()
    
>       app = create_app(
            asgi, middleware=[ExecutedFirstMiddleware(), rem, ExecutedLastMiddleware()]
        )

tests/test_middleware.py:753: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.ExecutedFirstMiddleware object at 0x7fd845c3aec0>, <test_middleware.TestSeveralMiddlewares.test_orde...RaiseErrorMiddlewareAsync object at 0x7fd845c39480>, <test_middleware.ExecutedLastMiddleware object at 0x7fd845c38460>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ExecutedFirstMiddleware.process_request of <test_middleware.ExecutedFirstMiddleware object at 0x7fd845c3aec0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_ TestSeveralMiddlewares.test_legacy_middleware_called_with_correct_args[asgi] _

self = <test_middleware.TestSeveralMiddlewares object at 0x7fd811b3e890>
asgi = True

    def test_legacy_middleware_called_with_correct_args(self, asgi):
        global context
>       app = create_app(asgi, middleware=[ExecutedFirstMiddleware()])

tests/test_middleware.py:326: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.ExecutedFirstMiddleware object at 0x7fd9505bfb80>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ExecutedFirstMiddleware.process_request of <test_middleware.ExecutedFirstMiddleware object at 0x7fd9505bfb80>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_ TestSeveralMiddlewares.test_order_independent_mw_executed_when_exception_in_req[asgi] _

self = <test_middleware.TestSeveralMiddlewares object at 0x7fd811b3fdf0>
asgi = True

    def test_order_independent_mw_executed_when_exception_in_req(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        class RaiseErrorMiddleware:
            def process_request(self, req, resp):
                raise Exception('Always fail')
    
        class RaiseErrorMiddlewareAsync:
            async def process_request(self, req, resp):
                raise Exception('Always fail')
    
        rem = RaiseErrorMiddlewareAsync() if asgi else RaiseErrorMiddleware()
    
>       app = create_app(
            asgi,
            independent_middleware=True,
            middleware=[ExecutedFirstMiddleware(), rem, ExecutedLastMiddleware()],
        )

tests/test_middleware.py:713: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.ExecutedFirstMiddleware object at 0x7fd9502e0df0>, <test_middleware.TestSeveralMiddlewares.test_orde...RaiseErrorMiddlewareAsync object at 0x7fd9502e3310>, <test_middleware.ExecutedLastMiddleware object at 0x7fd9502e15a0>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ExecutedFirstMiddleware.process_request of <test_middleware.ExecutedFirstMiddleware object at 0x7fd9502e0df0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_ TestSeveralMiddlewares.test_inner_mw_throw_exception_while_processing_resp[asgi] _

self = <test_middleware.TestSeveralMiddlewares object at 0x7fd811b3f1c0>
asgi = True

    def test_inner_mw_throw_exception_while_processing_resp(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        class MyException(Exception):
            pass
    
        class RaiseErrorMiddleware:
            def process_response(self, req, resp, resource, req_succeeded):
                raise MyException('Always fail')
    
>       app = create_app(
            asgi,
            middleware=[
                TransactionIdMiddleware(),
                RequestTimeMiddleware(),
                RaiseErrorMiddleware(),
            ],
        )

tests/test_middleware.py:484: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.TransactionIdMiddleware object at 0x7fd95018e620>, <test_middleware.RequestTimeMiddleware object at ...iddlewares.test_inner_mw_throw_exception_while_processing_resp.<locals>.RaiseErrorMiddleware object at 0x7fd95018ffd0>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method TransactionIdMiddleware.process_request of <test_middleware.TransactionIdMiddleware object at 0x7fd95018e620>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_ TestSeveralMiddlewares.test_generate_trans_id_and_time_with_request[asgi-True] _

self = <test_middleware.TestSeveralMiddlewares object at 0x7fd811b3e800>
independent_middleware = True, asgi = True

    @pytest.mark.parametrize('independent_middleware', [True, False])
    def test_generate_trans_id_and_time_with_request(
        self, independent_middleware, asgi
    ):
        # NOTE(kgriffs): We test both so that we can cover the code paths
        # where only a single middleware method is implemented by a
        # component.
        creq = CaptureRequestMiddleware()
        cresp = CaptureResponseMiddleware()
    
        global context
>       app = create_app(
            asgi,
            independent_middleware=independent_middleware,
            # NOTE(kgriffs): Pass as a generic iterable to verify that works.
            middleware=iter(
                [
                    TransactionIdMiddleware(),
                    RequestTimeMiddleware(),
                ]
            ),
        )

tests/test_middleware.py:289: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.TransactionIdMiddleware object at 0x7fd950a44100>, <test_middleware.RequestTimeMiddleware object at 0x7fd950a47790>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method TransactionIdMiddleware.process_request of <test_middleware.TransactionIdMiddleware object at 0x7fd950a44100>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
__ TestSeveralMiddlewares.test_order_mw_executed_when_exception_in_req[asgi] ___

self = <test_middleware.TestSeveralMiddlewares object at 0x7fd811b680a0>
asgi = True

    def test_order_mw_executed_when_exception_in_req(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        class RaiseErrorMiddleware:
            def process_request(self, req, resp):
                raise Exception('Always fail')
    
        class RaiseErrorMiddlewareAsync:
            async def process_request(self, req, resp):
                raise Exception('Always fail')
    
        rem = RaiseErrorMiddlewareAsync() if asgi else RaiseErrorMiddleware()
    
>       app = create_app(
            asgi, middleware=[ExecutedFirstMiddleware(), rem, ExecutedLastMiddleware()]
        )

tests/test_middleware.py:677: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.ExecutedFirstMiddleware object at 0x7fd950d21ed0>, <test_middleware.TestSeveralMiddlewares.test_orde...RaiseErrorMiddlewareAsync object at 0x7fd950d23d00>, <test_middleware.ExecutedLastMiddleware object at 0x7fd950d22200>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ExecutedFirstMiddleware.process_request of <test_middleware.ExecutedFirstMiddleware object at 0x7fd950d21ed0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
___ TestSeveralMiddlewares.test_independent_middleware_execution_order[asgi] ___

self = <test_middleware.TestSeveralMiddlewares object at 0x7fd811b3eaa0>
asgi = True

    def test_independent_middleware_execution_order(self, asgi):
        global context
>       app = create_app(
            asgi,
            independent_middleware=True,
            middleware=[ExecutedFirstMiddleware(), ExecutedLastMiddleware()],
        )

tests/test_middleware.py:363: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.ExecutedFirstMiddleware object at 0x7fd950d03bb0>, <test_middleware.ExecutedLastMiddleware object at 0x7fd950d02350>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ExecutedFirstMiddleware.process_request of <test_middleware.ExecutedFirstMiddleware object at 0x7fd950d03bb0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
____ TestSeveralMiddlewares.test_multiple_response_mw_throw_exception[asgi] ____

self = <test_middleware.TestSeveralMiddlewares object at 0x7fd811b3ece0>
asgi = True

    def test_multiple_response_mw_throw_exception(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        context['req_succeeded'] = []
    
        class RaiseStatusMiddleware:
            def process_response(self, req, resp, resource, req_succeeded):
                raise falcon.HTTPStatus(falcon.HTTP_201)
    
        class RaiseErrorMiddleware:
            def process_response(self, req, resp, resource, req_succeeded):
                raise falcon.HTTPError(falcon.HTTP_748)
    
        class ProcessResponseMiddleware:
            def process_response(self, req, resp, resource, req_succeeded):
                context['executed_methods'].append('process_response')
                context['req_succeeded'].append(req_succeeded)
    
>       app = create_app(
            asgi,
            middleware=[
                ProcessResponseMiddleware(),
                RaiseErrorMiddleware(),
                ProcessResponseMiddleware(),
                RaiseStatusMiddleware(),
                ProcessResponseMiddleware(),
            ],
        )

tests/test_middleware.py:406: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.TestSeveralMiddlewares.test_multiple_response_mw_throw_exception.<locals>.ProcessResponseMiddleware ...eralMiddlewares.test_multiple_response_mw_throw_exception.<locals>.ProcessResponseMiddleware object at 0x7fd950ab3250>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method TestSeveralMiddlewares.test_multiple_response_mw_throw_exception.<locals>.ProcessResponseMiddleware.process_response of <test_middleware.TestSeveralMiddlewares.test_multiple_response_mw_throw_exception.<locals>.ProcessResponseMiddleware object at 0x7fd950ab3430>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_________ TestShortCircuiting.test_process_resource_cached[asgi-True] __________

self = <test_middleware.TestShortCircuiting object at 0x7fd811b6a890>
asgi = True, independent_middleware = True

    @pytest.mark.parametrize('independent_middleware', [True, False])
    def test_process_resource_cached(self, asgi, independent_middleware):
>       response = self._make_client(asgi, independent_middleware).simulate_get(
            '/cached/resource'
        )

tests/test_middleware.py:970: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_middleware.py:927: in _make_client
    app = create_app(
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.RequestTimeMiddleware object at 0x7fd95018d300>, <test_middleware.ResponseCacheMiddlware object at 0x7fd95018ceb0>, <test_middleware.TransactionIdMiddleware object at 0x7fd95018c6a0>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ResponseCacheMiddlware.process_request of <test_middleware.ResponseCacheMiddlware object at 0x7fd95018ceb0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_________ TestShortCircuiting.test_process_request_cached[asgi-False] __________

self = <test_middleware.TestShortCircuiting object at 0x7fd811b6a560>
asgi = True, independent_middleware = False

    @pytest.mark.parametrize('independent_middleware', [True, False])
    def test_process_request_cached(self, asgi, independent_middleware):
>       response = self._make_client(asgi, independent_middleware).simulate_get(
            '/cached'
        )

tests/test_middleware.py:947: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_middleware.py:927: in _make_client
    app = create_app(
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.RequestTimeMiddleware object at 0x7fd9500b5de0>, <test_middleware.ResponseCacheMiddlware object at 0x7fd9500b6ef0>, <test_middleware.TransactionIdMiddleware object at 0x7fd9500b6a70>]
independent_middleware = False, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ResponseCacheMiddlware.process_request of <test_middleware.ResponseCacheMiddlware object at 0x7fd9500b6ef0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
__________ TestShortCircuiting.test_process_request_not_cached[asgi] ___________

self = <test_middleware.TestShortCircuiting object at 0x7fd811b69e70>
asgi = True

    def test_process_request_not_cached(self, asgi):
>       response = self._make_client(asgi).simulate_get('/')

tests/test_middleware.py:937: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_middleware.py:927: in _make_client
    app = create_app(
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.RequestTimeMiddleware object at 0x7fd84595c8e0>, <test_middleware.ResponseCacheMiddlware object at 0x7fd84595fc40>, <test_middleware.TransactionIdMiddleware object at 0x7fd84595e050>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ResponseCacheMiddlware.process_request of <test_middleware.ResponseCacheMiddlware object at 0x7fd84595fc40>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
__________ TestShortCircuiting.test_process_request_cached[asgi-True] __________

self = <test_middleware.TestShortCircuiting object at 0x7fd811b6a4a0>
asgi = True, independent_middleware = True

    @pytest.mark.parametrize('independent_middleware', [True, False])
    def test_process_request_cached(self, asgi, independent_middleware):
>       response = self._make_client(asgi, independent_middleware).simulate_get(
            '/cached'
        )

tests/test_middleware.py:947: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_middleware.py:927: in _make_client
    app = create_app(
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.RequestTimeMiddleware object at 0x7fd950a5d420>, <test_middleware.ResponseCacheMiddlware object at 0x7fd950a5f760>, <test_middleware.TransactionIdMiddleware object at 0x7fd950a5ccd0>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ResponseCacheMiddlware.process_request of <test_middleware.ResponseCacheMiddlware object at 0x7fd950a5f760>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_________ TestShortCircuiting.test_process_resource_cached[asgi-False] _________

self = <test_middleware.TestShortCircuiting object at 0x7fd811b6a8c0>
asgi = True, independent_middleware = False

    @pytest.mark.parametrize('independent_middleware', [True, False])
    def test_process_resource_cached(self, asgi, independent_middleware):
>       response = self._make_client(asgi, independent_middleware).simulate_get(
            '/cached/resource'
        )

tests/test_middleware.py:970: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_middleware.py:927: in _make_client
    app = create_app(
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.RequestTimeMiddleware object at 0x7fd950dc0370>, <test_middleware.ResponseCacheMiddlware object at 0x7fd950dc3790>, <test_middleware.TransactionIdMiddleware object at 0x7fd950dc1120>]
independent_middleware = False, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ResponseCacheMiddlware.process_request of <test_middleware.ResponseCacheMiddlware object at 0x7fd950dc3790>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
__________________ test_non_string_status[asgi-702 Emacs-702] __________________

custom_status_client = <function custom_status_client.<locals>.client at 0x7fd950605750>
status = b'702 Emacs', expected_code = 702

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd95009d0e0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950607520>, 'CHECK...7520>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950607520>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7fd950232f20>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______________ test_non_string_status[asgi-HTTPStatus.OK-2000] ________________

custom_status_client = <function custom_status_client.<locals>.client at 0x7fd950606050>
status = <HTTPStatus.OK: 200>, expected_code = 200

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9500d0040>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950198940>, 'CHECK...8940>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950198940>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7fd9500c6320>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________________ test_non_string_status[asgi-200 OK-200] ____________________

custom_status_client = <function custom_status_client.<locals>.client at 0x7fd95019a8c0>
status = b'200 OK', expected_code = 200

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd95009eb90>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95019b760>, 'CHECK...b760>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95019b760>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7fd9501c0c70>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________________ test_non_string_status[asgi-307-307] _____________________

custom_status_client = <function custom_status_client.<locals>.client at 0x7fd950199b40>
status = 307, expected_code = 307

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd95009d380>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95005d7e0>, 'CHECK...d7e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95005d7e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7fd9506bc880>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______________ test_non_string_status[asgi-HTTPStatus.OK-2001] ________________

custom_status_client = <function custom_status_client.<locals>.client at 0x7fd95005fac0>
status = <HTTPStatus.OK: 200>, expected_code = 200

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9500bbb50>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95005c700>, 'CHECK...c700>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95005c700>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7fd95059fdc0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ test_non_string_status[asgi-HTTPStatus.NOT_FOUND-404] _____________

custom_status_client = <function custom_status_client.<locals>.client at 0x7fd95005ea70>
status = <HTTPStatus.NOT_FOUND: 404>, expected_code = 404

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9500ba0a0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95005feb0>, 'CHECK...feb0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95005feb0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7fd950a8da20>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ test_non_string_status[asgi-HTTPStatus.USE_PROXY-305] _____________

custom_status_client = <function custom_status_client.<locals>.client at 0x7fd95005e5f0>
status = <HTTPStatus.USE_PROXY: 305>, expected_code = 305

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9500ba880>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95005dea0>, 'CHECK...dea0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95005dea0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7fd950c12800>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ test_non_string_status[asgi-HTTPStatus.FORBIDDEN-403] _____________

custom_status_client = <function custom_status_client.<locals>.client at 0x7fd95005f400>
status = <HTTPStatus.FORBIDDEN: 403>, expected_code = 403

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9500bab20>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95005d240>, 'CHECK...d240>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95005d240>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7fd950a5c730>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ test_non_string_status[asgi-HTTPStatus.INTERNAL_SERVER_ERROR-500] _______

custom_status_client = <function custom_status_client.<locals>.client at 0x7fd95005f7f0>
status = <HTTPStatus.INTERNAL_SERVER_ERROR: 500>, expected_code = 500

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9500bb610>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501b5990>, 'CHECK...5990>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501b5990>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7fd9501c0040>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________________ test_non_string_status[asgi-702-702] _____________________

custom_status_client = <function custom_status_client.<locals>.client at 0x7fd95005d990>
status = 702, expected_code = 702

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9500bb060>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501b5630>, 'CHECK...5630>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501b5630>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7fd95007b190>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________________ test_non_string_status[asgi-200-200] _____________________

custom_status_client = <function custom_status_client.<locals>.client at 0x7fd95005e320>
status = 200, expected_code = 200

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9500ac7b0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95005ca60>, 'CHECK...ca60>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95005ca60>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7fd845919150>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________________ test_non_string_status[asgi-500-500] _____________________

custom_status_client = <function custom_status_client.<locals>.client at 0x7fd9506045e0>
status = 500, expected_code = 500

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9500ae650>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950607b50>, 'CHECK...7b50>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950607b50>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7fd950a8f940>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________ test_non_string_status[asgi-HTTPStatus.ACCEPTED-202] _____________

custom_status_client = <function custom_status_client.<locals>.client at 0x7fd95005f7f0>
status = <HTTPStatus.ACCEPTED: 202>, expected_code = 202

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9500af0d0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95005dbd0>, 'CHECK...dbd0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95005dbd0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7fd9501df850>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________ test_non_string_status[asgi-HTTPStatus.NOT_IMPLEMENTED-501] __________

custom_status_client = <function custom_status_client.<locals>.client at 0x7fd9506065f0>
status = <HTTPStatus.NOT_IMPLEMENTED: 501>, expected_code = 501

    @pytest.mark.parametrize(
        'status,expected_code',
        [
            (http.HTTPStatus(200), 200),
            (http.HTTPStatus(202), 202),
            (http.HTTPStatus(403), 403),
            (http.HTTPStatus(500), 500),
            (http.HTTPStatus.OK, 200),
            (http.HTTPStatus.USE_PROXY, 305),
            (http.HTTPStatus.NOT_FOUND, 404),
            (http.HTTPStatus.NOT_IMPLEMENTED, 501),
            (200, 200),
            (307, 307),
            (500, 500),
            (702, 702),
            (b'200 OK', 200),
            (b'702 Emacs', 702),
        ],
    )
    def test_non_string_status(custom_status_client, status, expected_code):
>       client = custom_status_client(status)

tests/test_httpstatus.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_httpstatus.py:244: in client
    app.add_route('/status', Resource())
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9500af4c0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950cd5e10>, 'CHECK...5e10>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950cd5e10>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method custom_status_client.<locals>.client.<locals>.Resource.on_get of <test_httpstatus.custom_status_client.<locals>.client.<locals>.Resource object at 0x7fd9502313f0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________________ test_wrapped_resource[asgi-resource1] _____________________

client = <falcon.testing.client.TestClient object at 0x7fd9505a6aa0>
resource = <test_after_hooks.WrappedClassResourceChild object at 0x7fd81e105480>

    @pytest.mark.parametrize(
        'resource', [WrappedClassResource(), WrappedClassResourceChild()]
    )
    def test_wrapped_resource(client, resource):
>       client.app.add_route('/wrapped', resource)

tests/test_after_hooks.py:293: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9500acf90>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95019b760>, 'CHECK...b760>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd95019b760>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method WrappedClassResource.on_get of <test_after_hooks.WrappedClassResourceChild object at 0x7fd81e105480>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ test_resource_with_uri_fields[asgi-resource0] _________________

client = <falcon.testing.client.TestClient object at 0x7fd84592d720>
resource = <test_after_hooks.ClassResourceWithURIFields object at 0x7fd81e105450>

    @pytest.mark.parametrize(
        'resource', [ClassResourceWithURIFields(), ClassResourceWithURIFieldsChild()]
    )
    def test_resource_with_uri_fields(client, resource):
>       client.app.add_route('/{field1}/{field2}', resource)

tests/test_after_hooks.py:255: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950294f20>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950198e50>, 'CHECK...8e50>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd950198e50>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ClassResourceWithURIFields.on_get of <test_after_hooks.ClassResourceWithURIFields object at 0x7fd81e105450>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________________ test_wrapped_resource[asgi-resource0] _____________________

client = <falcon.testing.client.TestClient object at 0x7fd9500f6f20>
resource = <test_after_hooks.WrappedClassResource object at 0x7fd81e104b80>

    @pytest.mark.parametrize(
        'resource', [WrappedClassResource(), WrappedClassResourceChild()]
    )
    def test_wrapped_resource(client, resource):
>       client.app.add_route('/wrapped', resource)

tests/test_after_hooks.py:293: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950294190>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501b57e0>, 'CHECK...57e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501b57e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method WrappedClassResource.on_get of <test_after_hooks.WrappedClassResource object at 0x7fd81e104b80>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________ test_wrapped_resource_with_hooks_aware_of_resource[asgi] ___________

client = <falcon.testing.client.TestClient object at 0x7fd950096920>
wrapped_resource_aware = <test_after_hooks.ClassResourceWithAwareHooks object at 0x7fd9500956f0>

    def test_wrapped_resource_with_hooks_aware_of_resource(client, wrapped_resource_aware):
>       client.app.add_route('/wrapped_aware', wrapped_resource_aware)

tests/test_after_hooks.py:319: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950294660>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501b5c60>, 'CHECK...5c60>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501b5c60>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ClassResourceWithAwareHooks.on_get of <test_after_hooks.ClassResourceWithAwareHooks object at 0x7fd9500956f0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ test_resource_with_uri_fields[asgi-resource1] _________________

client = <falcon.testing.client.TestClient object at 0x7fd9505b4760>
resource = <test_after_hooks.ClassResourceWithURIFieldsChild object at 0x7fd81e105360>

    @pytest.mark.parametrize(
        'resource', [ClassResourceWithURIFields(), ClassResourceWithURIFieldsChild()]
    )
    def test_resource_with_uri_fields(client, resource):
>       client.app.add_route('/{field1}/{field2}', resource)

tests/test_after_hooks.py:255: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950297b50>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501b4310>, 'CHECK...4310>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501b4310>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ClassResourceWithURIFieldsChild.on_get of <test_after_hooks.ClassResourceWithURIFieldsChild object at 0x7fd81e105360>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ TestSinkMethodCompatibility.test_add_sync_sink_with_wrapping[asgi] ______

self = <test_sinks.TestSinkMethodCompatibility object at 0x7fd811871ae0>
client = <falcon.testing.client.TestClient object at 0x7fd950053be0>
asgi = True

    def test_add_sync_sink_with_wrapping(self, client, asgi):
>       client.app.add_sink(kitchen_sink, '/features')

tests/test_sinks.py:176: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.asgi.app.App object at 0x7fd9508c7940>
sink = <function kitchen_sink at 0x7fd811836c20>, prefix = '/features'

    def add_sink(self, sink: Callable, prefix: SinkPrefix = r'/'):
        if not iscoroutinefunction(sink) and is_python_func(sink):
            if _should_wrap_non_coroutines():
                sink = wrap_sync_to_async(sink)
            else:
>               raise CompatibilityError(
                    'The sink method must be an awaitable coroutine function '
                    'in order to be used safely with an ASGI app.'
                )
E               falcon.errors.CompatibilityError: The sink method must be an awaitable coroutine function in order to be used safely with an ASGI app.

falcon/asgi/app.py:740: CompatibilityError
_________ TestDefaultRouting.test_route_precedence_with_both_id[asgi] __________

self = <test_sinks.TestDefaultRouting object at 0x7fd811871300>
client = <falcon.testing.client.TestClient object at 0x7fd8459644f0>
sink = <test_sinks.SinkAsync object at 0x7fd8459645b0>
resource = <test_sinks.BookCollection object at 0x7fd845966800>

    def test_route_precedence_with_both_id(self, client, sink, resource):
        # NOTE(kgriffs): In case of collision, the route takes precedence.
>       client.app.add_route('/books/{id}', resource)

tests/test_sinks.py:144: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd95029bf40>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501b7d90>, 'CHECK...7d90>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501b7d90>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <test_sinks.BookCollection object at 0x7fd845966800>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________________ TestDefaultRouting.test_with_route[asgi] ___________________

self = <test_sinks.TestDefaultRouting object at 0x7fd8118701f0>
client = <falcon.testing.client.TestClient object at 0x7fd9500f5570>
sink = <test_sinks.SinkAsync object at 0x7fd9500f6470>
resource = <test_sinks.BookCollection object at 0x7fd9500f4340>

    def test_with_route(self, client, sink, resource):
>       client.app.add_route('/books', resource)

tests/test_sinks.py:113: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd950298120>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501b43a0>, 'CHECK...43a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501b43a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <test_sinks.BookCollection object at 0x7fd9500f4340>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ TestDefaultRouting.test_route_precedence[asgi] ________________

self = <test_sinks.TestDefaultRouting object at 0x7fd811870fa0>
client = <falcon.testing.client.TestClient object at 0x7fd84596ef20>
sink = <test_sinks.SinkAsync object at 0x7fd84596f580>
resource = <test_sinks.BookCollection object at 0x7fd84596cf10>

    def test_route_precedence(self, client, sink, resource):
        # NOTE(kgriffs): In case of collision, the route takes precedence.
>       client.app.add_route('/books', resource)

tests/test_sinks.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd95029a180>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501b7be0>, 'CHECK...7be0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501b7be0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <test_sinks.BookCollection object at 0x7fd84596cf10>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ TestDefaultRouting.test_route_precedence_with_id[asgi] ____________

self = <test_sinks.TestDefaultRouting object at 0x7fd811871060>
client = <falcon.testing.client.TestClient object at 0x7fd950de0910>
sink = <test_sinks.SinkAsync object at 0x7fd950de1060>
resource = <test_sinks.BookCollection object at 0x7fd950de1c60>

    def test_route_precedence_with_id(self, client, sink, resource):
        # NOTE(kgriffs): In case of collision, the route takes precedence.
>       client.app.add_route('/books/{id}', resource)

tests/test_sinks.py:135: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fd9502944a0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501b7640>, 'CHECK...7640>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fd9501b7640>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <test_sinks.BookCollection object at 0x7fd950de1c60>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
=============================== warnings summary ===============================
../../.local/lib/python3.10/site-packages/pyximport/pyximport.py:51
  /home/kaiyaok2/.local/lib/python3.10/site-packages/pyximport/pyximport.py:51: DeprecationWarning: the imp module is deprecated in favour of importlib and slated for removal in Python 3.12; see the module's documentation for alternative uses
    import imp

../../.local/lib/python3.10/site-packages/Cython/Distutils/old_build_ext.py:15
../../.local/lib/python3.10/site-packages/Cython/Distutils/old_build_ext.py:15
  /home/kaiyaok2/.local/lib/python3.10/site-packages/Cython/Distutils/old_build_ext.py:15: DeprecationWarning: dep_util is Deprecated. Use functions from setuptools instead.
    from distutils.dep_util import newer, newer_group

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/asgi/test_cythonized_asgi.py::test_jsonchema_validator - TypeErr...
FAILED tests/asgi/test_cythonized_asgi.py::test_hooks - TypeError: The <bound...
FAILED tests/test_query_params.py::TestPostQueryParams::test_http_methods_body_expected[asgi-OPTIONS]
FAILED tests/test_query_params.py::TestPostQueryParams::test_empty_body_no_content_length[asgi]
FAILED tests/test_query_params.py::TestPostQueryParams::test_explicitly_disable_auto_parse[asgi]
FAILED tests/test_query_params.py::TestPostQueryParams::test_http_methods_body_not_expected[asgi-GET]
FAILED tests/test_query_params.py::TestPostQueryParams::test_http_methods_body_expected[asgi-DELETE]
FAILED tests/test_query_params.py::TestPostQueryParams::test_asgi_raises_error
FAILED tests/test_query_params.py::TestPostQueryParams::test_non_ascii[asgi]
FAILED tests/test_query_params.py::TestPostQueryParams::test_empty_body[asgi]
FAILED tests/test_query_params.py::TestPostQueryParams::test_http_methods_body_not_expected[asgi-HEAD]
FAILED tests/test_query_params.py::TestPostQueryParams::test_http_methods_body_expected[asgi-POST]
FAILED tests/test_query_params.py::TestPostQueryParams::test_http_methods_body_expected[asgi-PATCH]
FAILED tests/test_query_params.py::TestPostQueryParams::test_http_methods_body_expected[asgi-PUT]
FAILED tests/test_query_params.py::TestPostQueryParamsDefaultBehavior::test_dont_auto_parse_by_default[True]
FAILED tests/test_query_params.py::TestQueryParams::test_boolean_blank[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_date_missing_param[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_dict_valid[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_post_query_params-asgi-t=1,,2&t=3,4-False-expected3]
FAILED tests/test_query_params.py::TestQueryParams::test_int_neg[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_date_missing_param[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_date_store[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_allowed_names[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_percent_encoded[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_none[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_uuid[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_post_query_params-asgi-t=1,2&t=3,4-False-expected2]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_post_query_params-asgi-t=1,2&t=3,4,,5-False-expected5]
FAILED tests/test_query_params.py::TestQueryParams::test_get_date_valid_with_format[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_percent_encoded[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_complex_false[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_list_type[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_none[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_param_as_json_handler_json[asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_post_query_params-asgi-t=1&t=3,4-False-expected0]
FAILED tests/test_query_params.py::TestQueryParams::test_get_date_store[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_boolean_blank[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_float_neg[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_multiple_form_keys[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_multiple_form_keys[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_required[simulate_request_post_query_params-asgi-get_param]
FAILED tests/test_query_params.py::TestQueryParams::test_get_date_invalid[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_get_query_params-asgi-t=1,2&t=3,4,,5-False-expected5]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_post_query_params-asgi-t=1&t=,1,4,,5-False-expected6]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_false[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_has_param[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_uuid[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_date_valid_with_format[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_list_type_blank[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_list_type_blank[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_datetime_store[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_multiple_keys_as_int[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_datetime_valid[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_list_transformer[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_dict_valid[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_datetime_store[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_int[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_dict_store[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_float[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_post_query_params-asgi-t=1&t=,1,4,,5-True-expected7]
FAILED tests/test_query_params.py::TestQueryParams::test_list_type[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_simple_true[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_simple[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_allowed_names[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_multiple_keys_as_float[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_datetime_valid_with_format[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_simple_false[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_get_query_params-asgi-t=1&t=2&t=3,4-False-expected1]
FAILED tests/test_query_params.py::TestQueryParams::test_required[simulate_request_post_query_params-asgi-get_param_as_bool]
FAILED tests/test_query_params.py::TestQueryParams::test_get_dict_invalid[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_required[simulate_request_get_query_params-asgi-get_param_as_list]
FAILED tests/test_query_params.py::TestQueryParams::test_default_auto_parse_csv_behaviour[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_false[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_multiple_keys_as_bool[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_dict_store[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_datetime_invalid[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_multiple_form_keys_as_list[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_bad_percentage[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_get_query_params-asgi-t=1,2&t=3,4-False-expected2]
FAILED tests/test_query_params.py::TestQueryParams::test_multiple_form_keys_as_list[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_required[simulate_request_get_query_params-asgi-get_param_as_int]
FAILED tests/test_query_params.py::TestQueryParams::test_get_dict_missing_param[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_default_auto_parse_csv_behaviour[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_post_query_params-asgi-t=1&t=2&t=3,4-False-expected1]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_get_query_params-asgi-t=1&t=,1,4,,5-False-expected6]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_get_query_params-asgi-t=1,,2&t=3,4-True-expected4]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_get_query_params-asgi-t=1&t=,1,4,,5-True-expected7]
FAILED tests/test_query_params.py::TestQueryParams::test_boolean[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_complex_false[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_dict_missing_param[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_datetime_missing_param[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_bad_percentage[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_boolean[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_multiple_keys_as_bool[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_required[simulate_request_post_query_params-asgi-get_param_as_float]
FAILED tests/test_query_params.py::TestQueryParams::test_required[simulate_request_get_query_params-asgi-get_param]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_post_query_params-asgi-t=1&t=,1,4,,5&t=a,b,c-True-expected8]
FAILED tests/test_query_params.py::TestQueryParams::test_required[simulate_request_post_query_params-asgi-get_param_as_int]
FAILED tests/test_query_params.py::TestQueryParams::test_blank[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_int[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_param_as_json_no_handler_json[asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_get_query_params-asgi-t=1&t=3,4-False-expected0]
FAILED tests/test_query_params.py::TestQueryParams::test_required[simulate_request_post_query_params-asgi-get_param_as_uuid]
FAILED tests/test_query_params.py::TestQueryParams::test_simple[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_datetime_missing_param[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_dict_invalid[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_date_invalid[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_required[simulate_request_get_query_params-asgi-get_param_as_float]
FAILED tests/test_query_params.py::TestQueryParams::test_get_datetime_valid[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_has_param[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_date_valid[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_post_query_params-asgi-t=1,,2&t=3,4-True-expected4]
FAILED tests/test_query_params.py::TestQueryParams::test_multiple_keys_as_int[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_required[simulate_request_get_query_params-asgi-get_param_as_bool]
FAILED tests/test_query_params.py::TestQueryParams::test_multiple_keys_as_float[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_required[simulate_request_get_query_params-asgi-get_param_as_uuid]
FAILED tests/test_query_params.py::TestQueryParams::test_list_transformer[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_blank[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_date_valid[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_get_query_params-asgi-t=1,,2&t=3,4-False-expected3]
FAILED tests/test_query_params.py::TestQueryParams::test_default[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_int_neg[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_simple_false[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_default[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_float[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_simple_true[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_get_query_params-asgi-t=1&t=,1,4,,5&t=a,b,c-True-expected8]
FAILED tests/test_query_params.py::TestQueryParams::test_float_neg[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_param_property[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_datetime_invalid[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_param_property[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_required[simulate_request_post_query_params-asgi-get_param_as_list]
FAILED tests/test_query_params.py::TestQueryParams::test_get_datetime_valid_with_format[simulate_request_get_query_params-asgi]
FAILED tests/test_cmd_inspect_app.py::TestLoadApp::test_load_app_error[foo]
FAILED tests/test_cmd_inspect_app.py::TestLoadApp::test_load_app[_APP] - Modu...
FAILED tests/test_cmd_inspect_app.py::TestLoadApp::test_load_app_error[DummyResource]
FAILED tests/test_cmd_inspect_app.py::TestLoadApp::test_load_app_error[_MODULE]
FAILED tests/test_cmd_inspect_app.py::TestLoadApp::test_load_app[make_app] - ...
FAILED tests/test_cmd_inspect_app.py::TestMain::test_routes_only[not-internal-verbose]
FAILED tests/test_cmd_inspect_app.py::TestMain::test_inspect[not-internal-not-verbose]
FAILED tests/test_cmd_inspect_app.py::TestMain::test_inspect[internal-verbose]
FAILED tests/test_cmd_inspect_app.py::TestMain::test_routes_only[internal-not-verbose]
FAILED tests/test_cmd_inspect_app.py::TestMain::test_inspect[internal-not-verbose]
FAILED tests/test_cmd_inspect_app.py::TestMain::test_inspect[not-internal-verbose]
FAILED tests/test_cmd_inspect_app.py::TestMain::test_routes_only[not-internal-not-verbose]
FAILED tests/test_cmd_inspect_app.py::TestMain::test_routes_only[internal-verbose]
FAILED tests/test_uri_templates.py::test_float_converter[asgi-/{id:float(min=1.9)}-2]
FAILED tests/test_uri_templates.py::test_datetime_converter[asgi-/{start_year:int}-to-{timestamp:dt("%Y-%m-%d")}-/1961-to-1969-07-21-dt_expected1]
FAILED tests/test_uri_templates.py::test_no_vars[asgi] - TypeError: The <boun...
FAILED tests/test_uri_templates.py::test_single[asgi-id] - TypeError: The <bo...
FAILED tests/test_uri_templates.py::test_converter_custom[asgi-/{food:spam}-/something-expected0]
FAILED tests/test_uri_templates.py::test_float_converter[asgi-/{id:float}-2]
FAILED tests/test_uri_templates.py::test_int_converter_rejections[asgi-/{id:int(num_digits=3, max=100)}]
FAILED tests/test_uri_templates.py::test_single[asgi-id123] - TypeError: The ...
FAILED tests/test_uri_templates.py::test_same_level_complex_var[asgi-False]
FAILED tests/test_uri_templates.py::test_float_converter[asgi-/{id:float(min=1.9)}-1.9]
FAILED tests/test_uri_templates.py::test_converter_custom[asgi-/{food:spam(")")}:{food_too:spam("()")}-/bacon:eggs-expected1]
FAILED tests/test_uri_templates.py::test_float_converter_non_finite_allowed[asgi-nan]
FAILED tests/test_uri_templates.py::test_int_converter[asgi-/{id:int}] - Type...
FAILED tests/test_uri_templates.py::test_datetime_converter[asgi-/{start_year:int}-to-{timestamp:dt("%Y-%m")}-/1961-to-1969-07-21-None]
FAILED tests/test_uri_templates.py::test_uuid_converter[asgi-uuid_converter_2]
FAILED tests/test_uri_templates.py::test_int_converter_rejections[asgi-/{id:int(2)}]
FAILED tests/test_uri_templates.py::test_float_converter[asgi-/{id:float(1)}-1.9]
FAILED tests/test_uri_templates.py::test_uuid_converter[asgi-uuid_converter_4]
FAILED tests/test_uri_templates.py::test_float_converter[asgi-/{id:float}-1.9]
FAILED tests/test_uri_templates.py::test_float_converter[asgi-/{id:float(min=1.8, max=3)}-1.9]
FAILED tests/test_uri_templates.py::test_single_trailing_slash[asgi] - TypeEr...
FAILED tests/test_uri_templates.py::test_datetime_converter[asgi-/{start_year:int}-to-{timestamp:dt}-/1961-to-1969-07-21T02:56:00Z-dt_expected0]
FAILED tests/test_uri_templates.py::test_float_converter[asgi-/{id:float}-2.1]
FAILED tests/test_uri_templates.py::test_float_converter[asgi-/{id:float(min=1.8, max=3)}-2.1]
FAILED tests/test_uri_templates.py::test_with_and_without_trailing_slash[asgi-False]
FAILED tests/test_uri_templates.py::test_int_converter_rejections[asgi-/{id:int(min=124)}]
FAILED tests/test_uri_templates.py::test_uuid_converter[asgi-uuid_converter_5]
FAILED tests/test_uri_templates.py::test_single[asgi-widget_id] - TypeError: ...
FAILED tests/test_uri_templates.py::test_uuid_converter[asgi-uuid_converter_1]
FAILED tests/test_uri_templates.py::test_int_converter[asgi-/{id:int(min=123, max=123)}]
FAILED tests/test_uri_templates.py::test_adding_suffix_routes[asgi] - TypeErr...
FAILED tests/test_uri_templates.py::test_datetime_converter[asgi-/{start_year:int}/{timestamp:dt("%Y-%m-%d %H:%M")}-/1961/1969-07-21 14:30-dt_expected2]
FAILED tests/test_uri_templates.py::test_root_path[asgi] - TypeError: The <bo...
FAILED tests/test_uri_templates.py::test_float_converter[asgi-/{id:float(min=1.9)}-2.1]
FAILED tests/test_uri_templates.py::test_with_and_without_trailing_slash[asgi-True]
FAILED tests/test_uri_templates.py::test_uuid_converter[asgi-uuid_converter_6]
FAILED tests/test_uri_templates.py::test_float_converter[asgi-/{id:float(1)}-2.1]
FAILED tests/test_uri_templates.py::test_converter_custom[asgi-/({food:spam()}){food_too:spam("()")}-/(bacon)eggs-expected2]
FAILED tests/test_uri_templates.py::test_multiple[asgi] - TypeError: The <bou...
FAILED tests/test_uri_templates.py::test_single_path_segment[asgi] - TypeErro...
FAILED tests/test_uri_templates.py::test_same_level_complex_var[asgi-True] - ...
FAILED tests/test_uri_templates.py::test_special_chars[asgi] - TypeError: The...
FAILED tests/test_uri_templates.py::test_float_converter_non_finite_disallowed[asgi]
FAILED tests/test_uri_templates.py::test_float_converter_non_finite_allowed[asgi-inf]
FAILED tests/test_uri_templates.py::test_uuid_converter_complex_segment[asgi]
FAILED tests/test_uri_templates.py::test_int_converter[asgi-/{id:int(min=123)}]
FAILED tests/test_uri_templates.py::test_float_converter_non_finite_allowed[asgi--inf]
FAILED tests/test_uri_templates.py::test_float_converter[asgi-/{id:float(min=1.8, max=3)}-2]
FAILED tests/test_uri_templates.py::test_int_converter[asgi-/{id:int(3)}] - T...
FAILED tests/test_uri_templates.py::test_uuid_converter[asgi-uuid_converter_3]
FAILED tests/test_uri_templates.py::test_float_converter[asgi-/{id:float(1)}-2]
FAILED tests/test_testing.py::test_client_simulate_aliases[asgi-HEAD] - falco...
FAILED tests/test_testing.py::test_client_simulate_aliases[asgi-OPTIONS] - fa...
FAILED tests/test_testing.py::test_client_simulate_aliases[asgi-GET] - falcon...
FAILED tests/test_testing.py::test_client_simulate_aliases[asgi-LOCK] - falco...
FAILED tests/test_testing.py::test_client_simulate_aliases[asgi-POST] - falco...
FAILED tests/test_testing.py::test_client_simulate_aliases[asgi-PATCH] - falc...
FAILED tests/test_testing.py::test_client_simulate_aliases[asgi-DELETE] - fal...
FAILED tests/test_testing.py::test_client_simulate_aliases[asgi-PUT] - falcon...
FAILED tests/test_cython.py::TestCythonized::test_imported_from_c_modules - a...
FAILED tests/test_cython.py::TestCythonized::test_stream_has_private_read - A...
FAILED tests/test_error_handlers.py::TestErrorHandler::test_caught_error_async[asgi]
FAILED tests/test_error_handlers.py::TestErrorHandler::test_catch_http_no_route_error[asgi]
FAILED tests/test_middleware.py::TestEmptySignatureMiddleware::test_dont_need_params_in_signature[asgi]
FAILED tests/test_middleware.py::TestErrorHandling::test_http_status_raised_from_error_handler[asgi]
FAILED tests/test_middleware.py::TestErrorHandling::test_error_composed_before_resp_middleware_called[asgi]
FAILED tests/test_middleware.py::TestResourceMiddleware::test_can_access_resource_params[asgi-False]
FAILED tests/test_middleware.py::TestResourceMiddleware::test_can_access_resource_params[asgi-True]
FAILED tests/test_middleware.py::TestTransactionIdMiddleware::test_generate_trans_id_with_request[asgi]
FAILED tests/test_middleware.py::TestRequestTimeMiddleware::test_log_get_request[asgi-True]
FAILED tests/test_middleware.py::TestRequestTimeMiddleware::test_log_get_request[asgi-False]
FAILED tests/test_middleware.py::TestRequestTimeMiddleware::test_skip_process_resource[asgi]
FAILED tests/test_middleware.py::TestRequestTimeMiddleware::test_response_middleware_raises_exception[asgi]
FAILED tests/test_middleware.py::TestCORSMiddlewareWithAnotherMiddleware::test_api_initialization_with_cors_enabled_and_middleware_param[asgi-mw0]
FAILED tests/test_middleware.py::TestCORSMiddlewareWithAnotherMiddleware::test_api_initialization_with_cors_enabled_and_middleware_param[asgi-mw1]
FAILED tests/test_middleware.py::TestCORSMiddlewareWithAnotherMiddleware::test_api_initialization_with_cors_enabled_and_middleware_param[asgi-mw2]
FAILED tests/test_middleware.py::TestCORSMiddlewareWithAnotherMiddleware::test_api_initialization_with_cors_enabled_and_middleware_param[asgi-mw3]
FAILED tests/test_middleware.py::TestRemoveBasePathMiddleware::test_base_path_is_removed_before_routing[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_inner_mw_throw_exception[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_order_independent_mw_executed_when_exception_in_rsrc[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_order_independent_mw_executed_when_exception_in_resp[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_order_mw_executed_when_exception_in_resp[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_inner_mw_with_ex_handler_throw_exception[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_middleware_execution_order[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_outer_mw_with_ex_handler_throw_exception[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_generate_trans_id_and_time_with_request[asgi-False]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_order_mw_executed_when_exception_in_rsrc[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_legacy_middleware_called_with_correct_args[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_order_independent_mw_executed_when_exception_in_req[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_inner_mw_throw_exception_while_processing_resp[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_generate_trans_id_and_time_with_request[asgi-True]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_order_mw_executed_when_exception_in_req[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_independent_middleware_execution_order[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_multiple_response_mw_throw_exception[asgi]
FAILED tests/test_middleware.py::TestShortCircuiting::test_process_resource_cached[asgi-True]
FAILED tests/test_middleware.py::TestShortCircuiting::test_process_request_cached[asgi-False]
FAILED tests/test_middleware.py::TestShortCircuiting::test_process_request_not_cached[asgi]
FAILED tests/test_middleware.py::TestShortCircuiting::test_process_request_cached[asgi-True]
FAILED tests/test_middleware.py::TestShortCircuiting::test_process_resource_cached[asgi-False]
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-702 Emacs-702]
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-HTTPStatus.OK-2000]
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-200 OK-200] - Ty...
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-307-307] - TypeE...
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-HTTPStatus.OK-2001]
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-HTTPStatus.NOT_FOUND-404]
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-HTTPStatus.USE_PROXY-305]
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-HTTPStatus.FORBIDDEN-403]
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-HTTPStatus.INTERNAL_SERVER_ERROR-500]
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-702-702] - TypeE...
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-200-200] - TypeE...
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-500-500] - TypeE...
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-HTTPStatus.ACCEPTED-202]
FAILED tests/test_httpstatus.py::test_non_string_status[asgi-HTTPStatus.NOT_IMPLEMENTED-501]
FAILED tests/test_after_hooks.py::test_wrapped_resource[asgi-resource1] - Typ...
FAILED tests/test_after_hooks.py::test_resource_with_uri_fields[asgi-resource0]
FAILED tests/test_after_hooks.py::test_wrapped_resource[asgi-resource0] - Typ...
FAILED tests/test_after_hooks.py::test_wrapped_resource_with_hooks_aware_of_resource[asgi]
FAILED tests/test_after_hooks.py::test_resource_with_uri_fields[asgi-resource1]
FAILED tests/test_sinks.py::TestSinkMethodCompatibility::test_add_sync_sink_with_wrapping[asgi]
FAILED tests/test_sinks.py::TestDefaultRouting::test_route_precedence_with_both_id[asgi]
FAILED tests/test_sinks.py::TestDefaultRouting::test_with_route[asgi] - TypeE...
FAILED tests/test_sinks.py::TestDefaultRouting::test_route_precedence[asgi]
FAILED tests/test_sinks.py::TestDefaultRouting::test_route_precedence_with_id[asgi]
ERROR tests/test_httperror.py::TestHTTPError::test_405_with_body[asgi] - Type...
ERROR tests/test_httperror.py::TestHTTPError::test_410_with_body[asgi] - Type...
ERROR tests/test_httperror.py::TestHTTPError::test_unicode_json[asgi] - TypeE...
ERROR tests/test_httperror.py::TestHTTPError::test_title_default_message_if_none[asgi-503 Service Unavailable-bytes]
ERROR tests/test_httperror.py::TestHTTPError::test_414_with_custom_kwargs[asgi]
ERROR tests/test_httperror.py::TestHTTPError::test_custom_error_serializer[asgi]
ERROR tests/test_httperror.py::TestHTTPError::test_413[asgi] - TypeError: The...
ERROR tests/test_httperror.py::TestHTTPError::test_title_default_message_if_none[asgi-503 Service Unavailable-str]
ERROR tests/test_httperror.py::TestHTTPError::test_no_description_xml[asgi]
ERROR tests/test_httperror.py::TestHTTPError::test_custom_error_serializer_optional_representation[asgi-GET-/404-404]
ERROR tests/test_httperror.py::TestHTTPError::test_no_description_json[asgi]
ERROR tests/test_httperror.py::TestHTTPError::test_404_with_body[asgi] - Type...
ERROR tests/test_httperror.py::TestHTTPError::test_404_without_body[asgi] - T...
ERROR tests/test_httperror.py::TestHTTPError::test_503_datetime_retry_after[asgi]
ERROR tests/test_httperror.py::TestHTTPError::test_411[asgi] - TypeError: The...
ERROR tests/test_httperror.py::TestHTTPError::test_429_datetime[asgi] - TypeE...
ERROR tests/test_httperror.py::TestHTTPError::test_serialize_no_json_media_handler[asgi]
ERROR tests/test_httperror.py::TestHTTPError::test_client_does_not_accept_json_or_xml[asgi]
ERROR tests/test_httperror.py::TestHTTPError::test_epic_fail_xml[asgi-application/xml]
ERROR tests/test_httperror.py::TestHTTPError::test_temporary_413_integer_retry_after[asgi]
ERROR tests/test_httperror.py::TestHTTPError::test_405_without_body_with_extra_headers[asgi]
ERROR tests/test_httperror.py::TestHTTPError::test_414[asgi] - TypeError: The...
ERROR tests/test_httperror.py::TestHTTPError::test_epic_fail_xml[asgi-application/vnd.company.system.project.resource+xml;v=1.1]
ERROR tests/test_httperror.py::TestHTTPError::test_misc[asgi] - TypeError: Th...
ERROR tests/test_httperror.py::TestHTTPError::test_temporary_413_datetime_retry_after[asgi]
ERROR tests/test_httperror.py::TestHTTPError::test_410_without_body[asgi] - T...
ERROR tests/test_httperror.py::TestHTTPError::test_client_does_not_accept_anything[asgi]
ERROR tests/test_httperror.py::TestHTTPError::test_title_default_message_if_none[asgi-503-HTTPStatus]
ERROR tests/test_httperror.py::TestHTTPError::test_title_default_message_if_none[asgi-503-bytes]
ERROR tests/test_httperror.py::TestHTTPError::test_unicode_xml[asgi] - TypeEr...
ERROR tests/test_httperror.py::TestHTTPError::test_414_with_description[asgi]
ERROR tests/test_httperror.py::TestHTTPError::test_custom_error_serializer_optional_representation[asgi-BREW-/notfound-400]
ERROR tests/test_httperror.py::TestHTTPError::test_429[asgi] - TypeError: The...
ERROR tests/test_httperror.py::TestHTTPError::test_forbidden[asgi-application/json-patch+json]
ERROR tests/test_httperror.py::TestHTTPError::test_429_no_retry_after[asgi]
ERROR tests/test_httperror.py::TestHTTPError::test_title_default_message_if_none[asgi-503-int]
ERROR tests/test_httperror.py::TestHTTPError::test_custom_error_serializer_optional_representation[asgi-GET-/notfound-404]
ERROR tests/test_httperror.py::TestHTTPError::test_custom_serializer_no_representation[asgi]
ERROR tests/test_httperror.py::TestHTTPError::test_405_without_body[asgi] - T...
ERROR tests/test_httperror.py::TestHTTPError::test_custom_error_serializer_optional_representation[asgi-REPORT-/404-405]
ERROR tests/test_httperror.py::TestHTTPError::test_forbidden[asgi-application/json]
ERROR tests/test_httperror.py::TestHTTPError::test_forbidden[asgi-application/vnd.company.system.project.resource+json;v=1.1]
ERROR tests/test_httperror.py::TestHTTPError::test_405_without_body_with_extra_headers_double_check[asgi]
ERROR tests/test_httperror.py::TestHTTPError::test_invalid_param[asgi] - Type...
ERROR tests/test_httperror.py::TestHTTPError::test_missing_header[asgi] - Typ...
ERROR tests/test_httperror.py::TestHTTPError::test_serialize_error_uses_media_handler[asgi]
ERROR tests/test_httperror.py::TestHTTPError::test_missing_param[asgi] - Type...
ERROR tests/test_httperror.py::TestHTTPError::test_414_with_title[asgi] - Typ...
ERROR tests/test_httperror.py::TestHTTPError::test_416[asgi] - TypeError: The...
ERROR tests/test_httperror.py::TestHTTPError::test_invalid_header[asgi] - Typ...
ERROR tests/test_httperror.py::TestHTTPError::test_epic_fail_xml[asgi-text/xml]
ERROR tests/test_httperror.py::TestHTTPError::test_401[asgi] - TypeError: The...
ERROR tests/test_httperror.py::TestHTTPError::test_base_class[asgi] - TypeErr...
ERROR tests/test_httperror.py::TestHTTPError::test_epic_fail_json[asgi] - Typ...
ERROR tests/test_httperror.py::TestHTTPError::test_title_default_message_if_none[asgi-503-str]
ERROR tests/test_httperror.py::TestHTTPError::test_503_integer_retry_after[asgi]
ERROR tests/test_httperror.py::TestHTTPError::test_epic_fail_xml[asgi-application/atom+xml]
ERROR tests/test_wsgi_servers.py::TestWSGIServer::test_post_multipart_form[uvicorn]
ERROR tests/test_wsgi_servers.py::TestWSGIServer::test_static_file_byte_range[uvicorn-7--hashlib]
ERROR tests/test_wsgi_servers.py::TestWSGIServer::test_static_file_byte_range[uvicorn-32-38-random]
ERROR tests/test_wsgi_servers.py::TestWSGIServer::test_static_file_byte_range[gunicorn-7--hashlib]
ERROR tests/test_wsgi_servers.py::TestWSGIServer::test_get[uvicorn] - Failed:...
ERROR tests/test_wsgi_servers.py::TestWSGIServer::test_static_file[gunicorn]
ERROR tests/test_wsgi_servers.py::TestWSGIServer::test_static_file_byte_range[gunicorn--47-The content of this comment is part of a test.\n]
ERROR tests/test_wsgi_servers.py::TestWSGIServer::test_get_deprecated[gunicorn]
ERROR tests/test_wsgi_servers.py::TestWSGIServer::test_static_file_byte_range[gunicorn-32-38-random]
ERROR tests/test_wsgi_servers.py::TestWSGIServer::test_static_file_byte_range[uvicorn-2-6-port]
ERROR tests/test_wsgi_servers.py::TestWSGIServer::test_get[gunicorn] - Failed...
ERROR tests/test_wsgi_servers.py::TestWSGIServer::test_get_deprecated[uvicorn]
ERROR tests/test_wsgi_servers.py::TestWSGIServer::test_static_file[uvicorn]
ERROR tests/test_wsgi_servers.py::TestWSGIServer::test_post_multipart_form[gunicorn]
ERROR tests/test_wsgi_servers.py::TestWSGIServer::test_static_file_byte_range[gunicorn-2-6-port]
ERROR tests/test_wsgi_servers.py::TestWSGIServer::test_static_file_byte_range[uvicorn--47-The content of this comment is part of a test.\n]
ERROR tests/test_error_handlers.py::TestErrorHandler::test_uncaught_python_error[asgi-get_headers1-application/json-{"]
ERROR tests/test_error_handlers.py::TestErrorHandler::test_uncaught_python_error[asgi-None-application/json-{"]
ERROR tests/test_error_handlers.py::TestErrorHandler::test_uncaught_python_error[asgi-get_headers2-application/xml-<?xml]
ERROR tests/test_error_handlers.py::TestErrorHandler::test_invalid_add_exception_handler_input[asgi-exceptions0]
ERROR tests/test_error_handlers.py::TestErrorHandler::test_invalid_add_exception_handler_input[asgi-Hello, world!]
ERROR tests/test_error_handlers.py::TestErrorHandler::test_uncaught_error[asgi]
ERROR tests/test_error_handlers.py::TestErrorHandler::test_handler_multiple_exception_iterable[asgi-exceptions0]
ERROR tests/test_error_handlers.py::TestErrorHandler::test_handler_multiple_exception_iterable[asgi-exceptions1]
ERROR tests/test_error_handlers.py::TestErrorHandler::test_invalid_add_exception_handler_input[asgi-exceptions2]
ERROR tests/test_error_handlers.py::TestErrorHandler::test_invalid_add_exception_handler_input[asgi-exceptions3]
ERROR tests/test_error_handlers.py::TestErrorHandler::test_uncaught_error_else[asgi]
ERROR tests/test_error_handlers.py::TestErrorHandler::test_error_precedence_subclass_order_indifference[asgi]
ERROR tests/test_error_handlers.py::TestErrorHandler::test_handle_not_defined[asgi]
ERROR tests/test_error_handlers.py::TestErrorHandler::test_error_precedence_subclass[asgi]
ERROR tests/test_error_handlers.py::TestErrorHandler::test_converted_error[asgi]
ERROR tests/test_error_handlers.py::TestErrorHandler::test_handler_single_exception_iterable[asgi]
ERROR tests/test_error_handlers.py::TestErrorHandler::test_subclass_error[asgi]
ERROR tests/test_error_handlers.py::TestErrorHandler::test_caught_error[asgi]
ERROR tests/test_error_handlers.py::TestErrorHandler::test_error_precedence_duplicate[asgi]
ERROR tests/test_error_handlers.py::TestNoBodyWithStatus::test_data_is_set[asgi]
ERROR tests/test_error_handlers.py::TestNoBodyWithStatus::test_body_is_set[asgi]
ERROR tests/test_error_handlers.py::TestNoBodyWithStatus::test_media_is_set[asgi]
ERROR tests/test_error_handlers.py::TestCustomError::test_media_is_set[asgi]
ERROR tests/test_error_handlers.py::TestCustomError::test_body_is_set[asgi]
ERROR tests/test_error_handlers.py::TestCustomError::test_data_is_set[asgi]
ERROR tests/test_redirects.py::TestRedirects::test_redirect[asgi-POST-302 Found-/found]
ERROR tests/test_redirects.py::TestRedirects::test_redirect[asgi-PUT-303 See Other-/see/other]
ERROR tests/test_redirects.py::TestRedirects::test_redirect[asgi-GET-301 Moved Permanently-/moved/perm]
ERROR tests/test_redirects.py::TestRedirects::test_redirect_with_headers[asgi-GET-301 Moved Permanently-/moved/perm]
ERROR tests/test_redirects.py::TestRedirects::test_redirect_with_headers[asgi-PUT-303 See Other-/see/other]
ERROR tests/test_redirects.py::TestRedirects::test_redirect[asgi-HEAD-308 Permanent Redirect-/perm/redirect]
ERROR tests/test_redirects.py::TestRedirects::test_redirect_with_headers[asgi-DELETE-307 Temporary Redirect-/tmp/redirect]
ERROR tests/test_redirects.py::TestRedirects::test_redirect_with_headers[asgi-HEAD-308 Permanent Redirect-/perm/redirect]
ERROR tests/test_redirects.py::TestRedirects::test_redirect_with_headers[asgi-POST-302 Found-/found]
ERROR tests/test_redirects.py::TestRedirects::test_redirect[asgi-DELETE-307 Temporary Redirect-/tmp/redirect]
ERROR tests/asgi/test_asgi_servers.py::TestASGIServer::test_post_read_bounded_stream_no_body[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestASGIServer::test_post_multiple[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestASGIServer::test_put[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestASGIServer::test_post_invalid_content_length[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestASGIServer::test_sse_client_disconnects_early[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestASGIServer::test_post_read_bounded_stream_large[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestASGIServer::test_head_405[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestASGIServer::test_stream_chunked_request[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestASGIServer::test_post_multipart_form[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestASGIServer::test_post_read_bounded_stream[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestASGIServer::test_get[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestASGIServer::test_sse[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_close_code_on_unhandled_http_error[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_recv_before_accept[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_passing_path_params[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_send_before_accept[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_rejected[_uvicorn_factory-4040-False]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_invalid_close_code[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_select_subprotocol_known[_uvicorn_factory-*-amqp]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_rejected[_uvicorn_factory-None-False]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_type_mismatch[_uvicorn_factory-data-send]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_type_mismatch[_uvicorn_factory-data-recv]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_rejected[_uvicorn_factory-None-True]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_disconnecting_client_early[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_type_mismatch[_uvicorn_factory-text-send]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_missing_responder[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_hello[_uvicorn_factory-4321-False]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_type_mismatch[_uvicorn_factory-text-recv]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_hello[_uvicorn_factory-4321-True]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_select_subprotocol_unknown[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_select_subprotocol_known[_uvicorn_factory-wamp-wamp]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_close_code_on_unhandled_error[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_hello[_uvicorn_factory-None-True]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_rejected[_uvicorn_factory-4040-True]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_hello[_uvicorn_factory-None-False]
ERROR tests/test_httpstatus.py::TestNoBodyWithStatus::test_data_is_set[asgi]
ERROR tests/test_httpstatus.py::TestNoBodyWithStatus::test_media_is_set[asgi]
ERROR tests/test_httpstatus.py::TestNoBodyWithStatus::test_body_is_set[asgi]
ERROR tests/test_httpstatus.py::TestHTTPStatus::test_raise_status_in_responder[True]
ERROR tests/test_httpstatus.py::TestHTTPStatus::test_raise_status_runs_after_hooks[True]
ERROR tests/test_httpstatus.py::TestHTTPStatus::test_raise_status_survives_after_hooks[True]
ERROR tests/test_httpstatus.py::TestHTTPStatus::test_raise_status_in_before_hook[True]
ERROR tests/test_httpstatus.py::TestHTTPStatus::test_raise_status_empty_body[True]
ERROR tests/test_httpstatus.py::TestHTTPStatusWithMiddleware::test_raise_status_in_process_request[True]
ERROR tests/test_httpstatus.py::TestHTTPStatusWithMiddleware::test_raise_status_in_process_resource[True]
ERROR tests/test_httpstatus.py::TestHTTPStatusWithMiddleware::test_raise_status_runs_process_response[True]
ERROR tests/test_cookies.py::test_same_site_empty_string[asgi] - TypeError: T...
ERROR tests/test_cookies.py::test_unset_cookies[asgi] - TypeError: The <bound...
ERROR tests/test_cookies.py::test_response_base_case[asgi] - TypeError: The <...
ERROR tests/test_cookies.py::test_response_unset_cookie[asgi] - TypeError: Th...
ERROR tests/test_cookies.py::test_cookie_expires_aware[asgi] - TypeError: The...
ERROR tests/test_cookies.py::test_none_same_site_value[asgi] - TypeError: The...
ERROR tests/test_cookies.py::test_cookies_setable[asgi] - TypeError: The <bou...
ERROR tests/test_cookies.py::test_response_disable_secure_globally[asgi] - Ty...
ERROR tests/test_cookies.py::test_lax_same_site_value[asgi] - TypeError: The ...
ERROR tests/test_cookies.py::test_cookie_max_age_float_and_string[asgi-foostring]
ERROR tests/test_cookies.py::test_response_complex_case[asgi] - TypeError: Th...
ERROR tests/test_cookies.py::test_cookie_expires_naive[asgi] - TypeError: The...
ERROR tests/test_cookies.py::test_cookie_max_age_float_and_string[asgi-foofloat]
ERROR tests/test_cookies.py::test_strict_same_site_value[asgi] - TypeError: T...
ERROR tests/test_cookies.py::test_unset_cookies_samesite[asgi] - TypeError: T...
ERROR tests/test_cookies.py::test_cookie_timezone[asgi] - TypeError: The <bou...
= 269 failed, 3112 passed, 111 skipped, 3 warnings, 170 errors in 2470.85s (0:41:10) =
