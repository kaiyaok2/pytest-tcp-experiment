============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.2.2, pluggy-1.3.0
Using --randomly-seed=1705887782
PyQt5 5.15.10 -- Qt runtime 5.15.2 -- Qt compiled 5.15.2
rootdir: /home/kaiyaok2/PythonProjects/falcon, configfile: pyproject.toml, testpaths: tests
plugins: hypothesis-6.81.1, cov-4.1.0, randomly-3.1.0, typeguard-4.1.5, timeout-1.4.2, qt-4.3.1, nbval-0.10.0, mock-3.12.0, tcp-0.1.1, textual-snapshot-0.4.0, asyncio-0.21.1, xdist-3.2.1, cookies-0.7.0, instafail-0.5.0, syrupy-4.6.0, anyio-3.7.1
asyncio: mode=strict
collected 3662 items
Using TCP weights 0-1
Collect TCP features took 0.34047794342041016s.
Compute TCP order took 0.08409523963928223s.

tests/test_wsgiref_inputwrapper_with_size.py .
current test PASSED/SKIPPED -- test_resources_can_read_request_stream_during_tests in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgiref_inputwrapper_with_size.py: 0.02052617073059082s cumulative, 0.02052617073059082s individual


tests/test_wsgi_servers.py s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 0.04944133758544922s cumulative, 0.0289151668548584s individual

Starting uWSGI...
uwsgi --http 127.0.0.1:48933 --wsgi-file _wsgi_test_app.py
s
current test PASSED/SKIPPED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 0.0807950496673584s cumulative, 0.03135371208190918s individual

Starting uWSGI...
uwsgi --http 127.0.0.1:33953 --wsgi-file _wsgi_test_app.py
s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 0.10325288772583008s cumulative, 0.02245783805847168s individual

s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 0.12118744850158691s cumulative, 0.017934560775756836s individual

Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 46505 --interface wsgi _wsgi_test_app:app
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 40199 --interface wsgi _wsgi_test_app:app
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 35193 --interface wsgi _wsgi_test_app:app
E
current test FAILED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 30.422759532928467s cumulative, 30.30157208442688s individual

Starting uWSGI...
uwsgi --http 127.0.0.1:51237 --wsgi-file _wsgi_test_app.py
s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 30.44277548789978s cumulative, 0.020015954971313477s individual

s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 30.464487552642822s cumulative, 0.021712064743041992s individual

Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 49047 --interface wsgi _wsgi_test_app:app
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 49127 --interface wsgi _wsgi_test_app:app
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 55329 --interface wsgi _wsgi_test_app:app
E
current test FAILED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 60.822630167007446s cumulative, 30.358142614364624s individual

s
current test PASSED/SKIPPED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 60.864280700683594s cumulative, 0.04165053367614746s individual

Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 41027 --interface wsgi _wsgi_test_app:app
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 51211 --interface wsgi _wsgi_test_app:app
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 40133 --interface wsgi _wsgi_test_app:app
E
current test FAILED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 91.53032898902893s cumulative, 30.666048288345337s individual

Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 36675 --interface wsgi _wsgi_test_app:app
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 43099 --interface wsgi _wsgi_test_app:app
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 60303 --interface wsgi _wsgi_test_app:app
E
current test FAILED -- test_post_multipart_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 122.16576910018921s cumulative, 30.63544011116028s individual

s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 122.18098831176758s cumulative, 0.01521921157836914s individual

Starting uWSGI...
uwsgi --http 127.0.0.1:55457 --wsgi-file _wsgi_test_app.py
s
current test PASSED/SKIPPED -- test_get_deprecated in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 122.1971845626831s cumulative, 0.016196250915527344s individual

s
current test PASSED/SKIPPED -- test_static_file in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 122.20508408546448s cumulative, 0.00789952278137207s individual

s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 122.21494722366333s cumulative, 0.009863138198852539s individual

Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 38057 --interface wsgi _wsgi_test_app:app
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 52063 --interface wsgi _wsgi_test_app:app
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 57921 --interface wsgi _wsgi_test_app:app
E
current test FAILED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 152.7639491558075s cumulative, 30.549001932144165s individual

s
current test PASSED/SKIPPED -- test_post_multipart_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 152.7812831401825s cumulative, 0.017333984375s individual

Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 41775 --interface wsgi _wsgi_test_app:app
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 40163 --interface wsgi _wsgi_test_app:app
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 43067 --interface wsgi _wsgi_test_app:app
E
current test FAILED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 183.02777314186096s cumulative, 30.246490001678467s individual

Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:38533 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:48859 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:52537 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
E
current test FAILED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 213.4567518234253s cumulative, 30.42897868156433s individual

s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 213.46660447120667s cumulative, 0.00985264778137207s individual

s
current test PASSED/SKIPPED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 213.47246384620667s cumulative, 0.005859375s individual

s
current test PASSED/SKIPPED -- test_post_multipart_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 213.47860407829285s cumulative, 0.006140232086181641s individual

s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 213.4854085445404s cumulative, 0.006804466247558594s individual

Starting uWSGI...
uwsgi --http 127.0.0.1:54795 --wsgi-file _wsgi_test_app.py
s
current test PASSED/SKIPPED -- test_post_multipart_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 213.49637246131897s cumulative, 0.010963916778564453s individual

Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:57011 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:50229 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:38897 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
E
current test FAILED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 243.87070202827454s cumulative, 30.374329566955566s individual

s
current test PASSED/SKIPPED -- test_get_deprecated in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 243.8832082748413s cumulative, 0.012506246566772461s individual

Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:53537 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:55947 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:50315 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
E
current test FAILED -- test_static_file in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 274.4226884841919s cumulative, 30.539480209350586s individual

Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:56071 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:59481 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:38133 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
E
current test FAILED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 304.78568744659424s cumulative, 30.362998962402344s individual

Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:42505 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:57409 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:40407 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
E
current test FAILED -- test_get_deprecated in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 335.1472690105438s cumulative, 30.361581563949585s individual

Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 50385 --interface wsgi _wsgi_test_app:app
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 50765 --interface wsgi _wsgi_test_app:app
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 35627 --interface wsgi _wsgi_test_app:app
E
current test FAILED -- test_static_file in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 365.6099054813385s cumulative, 30.462636470794678s individual

s
current test PASSED/SKIPPED -- test_get_deprecated in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 365.6215000152588s cumulative, 0.011594533920288086s individual

Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:57291 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:33647 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:47467 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
E
current test FAILED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 396.0811679363251s cumulative, 30.459667921066284s individual

s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 396.0908832550049s cumulative, 0.00971531867980957s individual

Starting uWSGI...
uwsgi --http 127.0.0.1:48949 --wsgi-file _wsgi_test_app.py
s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 396.10030484199524s cumulative, 0.009421586990356445s individual

Starting uWSGI...
uwsgi --http 127.0.0.1:51083 --wsgi-file _wsgi_test_app.py
s
current test PASSED/SKIPPED -- test_static_file in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 396.10803031921387s cumulative, 0.00772547721862793s individual

Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:43801 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:59841 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:51875 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
E
current test FAILED -- test_post_multipart_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 426.48182916641235s cumulative, 30.373798847198486s individual

Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 40059 --interface wsgi _wsgi_test_app:app
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 51197 --interface wsgi _wsgi_test_app:app
Starting Uvicorn (WSGI interface)...
/usr/bin/python3 -m uvicorn --host 127.0.0.1 --port 55891 --interface wsgi _wsgi_test_app:app
E
current test FAILED -- test_get_deprecated in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 456.6986970901489s cumulative, 30.216867923736572s individual

s
current test PASSED/SKIPPED -- test_static_file in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 456.70764565467834s cumulative, 0.008948564529418945s individual

Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:46793 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:47711 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
Starting Gunicorn...
/usr/bin/python3 -m gunicorn --access-logfile - --bind 127.0.0.1:42305 --graceful-timeout 10 --timeout 10 _wsgi_test_app:app
E
current test FAILED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 486.9456305503845s cumulative, 30.237984895706177s individual

Starting uWSGI...
uwsgi --http 127.0.0.1:58563 --wsgi-file _wsgi_test_app.py
s
current test PASSED/SKIPPED -- test_static_file_byte_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_servers.py: 486.9601731300354s cumulative, 0.014542579650878906s individual


tests/test_wsgi.py .
current test PASSED/SKIPPED -- test_put in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi.py: 487.03157567977905s cumulative, 0.07140254974365234s individual

.
current test PASSED/SKIPPED -- test_post_read_bounded_stream_no_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi.py: 487.0689973831177s cumulative, 0.03742170333862305s individual

.
current test PASSED/SKIPPED -- test_head_405 in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi.py: 487.09859704971313s cumulative, 0.029599666595458984s individual

.
current test PASSED/SKIPPED -- test_post in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi.py: 487.1318106651306s cumulative, 0.03321361541748047s individual

.
current test PASSED/SKIPPED -- test_post_read_bounded_stream in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi.py: 487.1602153778076s cumulative, 0.028404712677001953s individual

.
current test PASSED/SKIPPED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi.py: 487.19627594947815s cumulative, 0.03606057167053223s individual

.
current test PASSED/SKIPPED -- test_post_invalid_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi.py: 487.22973346710205s cumulative, 0.03345751762390137s individual


tests/test_custom_router.py .
current test PASSED/SKIPPED -- test_custom_router_add_route_should_be_used in /home/kaiyaok2/PythonProjects/falcon/tests/test_custom_router.py: 487.2432026863098s cumulative, 0.013469219207763672s individual

.
current test PASSED/SKIPPED -- test_custom_router_takes_req_keyword_argument in /home/kaiyaok2/PythonProjects/falcon/tests/test_custom_router.py: 487.26158905029297s cumulative, 0.018386363983154297s individual

.
current test PASSED/SKIPPED -- test_custom_router_takes_req_positional_argument in /home/kaiyaok2/PythonProjects/falcon/tests/test_custom_router.py: 487.271719455719s cumulative, 0.01013040542602539s individual

.
current test PASSED/SKIPPED -- test_custom_router_add_route_should_be_used in /home/kaiyaok2/PythonProjects/falcon/tests/test_custom_router.py: 487.27875447273254s cumulative, 0.007035017013549805s individual

.
current test PASSED/SKIPPED -- test_custom_router_takes_req_keyword_argument in /home/kaiyaok2/PythonProjects/falcon/tests/test_custom_router.py: 487.288419008255s cumulative, 0.009664535522460938s individual

.
current test PASSED/SKIPPED -- test_custom_router_takes_req_positional_argument in /home/kaiyaok2/PythonProjects/falcon/tests/test_custom_router.py: 487.29907059669495s cumulative, 0.010651588439941406s individual

.
current test PASSED/SKIPPED -- test_custom_router_find_should_be_used in /home/kaiyaok2/PythonProjects/falcon/tests/test_custom_router.py: 487.31386160850525s cumulative, 0.014791011810302734s individual

.
current test PASSED/SKIPPED -- test_custom_router_find_should_be_used in /home/kaiyaok2/PythonProjects/falcon/tests/test_custom_router.py: 487.3227436542511s cumulative, 0.00888204574584961s individual

.
current test PASSED/SKIPPED -- test_can_pass_additional_params_to_add_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_custom_router.py: 487.3293824195862s cumulative, 0.006638765335083008s individual

.
current test PASSED/SKIPPED -- test_can_pass_additional_params_to_add_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_custom_router.py: 487.3340742588043s cumulative, 0.0046918392181396484s individual


tests/asgi/test_response_media_asgi.py .
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 487.34598755836487s cumulative, 0.011913299560546875s individual

.
current test PASSED/SKIPPED -- test_media in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 487.35529041290283s cumulative, 0.009302854537963867s individual

.
current test PASSED/SKIPPED -- test_unknown_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 487.366738319397s cumulative, 0.011447906494140625s individual

.
current test PASSED/SKIPPED -- test_mimeparse_edgecases in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 487.3775863647461s cumulative, 0.010848045349121094s individual

.
current test PASSED/SKIPPED -- test_data_masquerading_as_text in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 487.38418650627136s cumulative, 0.006600141525268555s individual

.
current test PASSED/SKIPPED -- test_default_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 487.3938105106354s cumulative, 0.009624004364013672s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 487.4021337032318s cumulative, 0.008323192596435547s individual

.
current test PASSED/SKIPPED -- test_custom_render_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 487.40840458869934s cumulative, 0.006270885467529297s individual

.
current test PASSED/SKIPPED -- test_non_ascii_json_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 487.41785049438477s cumulative, 0.009445905685424805s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 487.43064308166504s cumulative, 0.012792587280273438s individual

.
current test PASSED/SKIPPED -- test_non_ascii_json_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 487.44015169143677s cumulative, 0.009508609771728516s individual

.
current test PASSED/SKIPPED -- test_non_ascii_json_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 487.4485375881195s cumulative, 0.008385896682739258s individual

.
current test PASSED/SKIPPED -- test_text in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 487.45546555519104s cumulative, 0.006927967071533203s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 487.4623386859894s cumulative, 0.006873130798339844s individual

.
current test PASSED/SKIPPED -- test_media_rendered_cached in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 487.47195267677307s cumulative, 0.009613990783691406s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 487.48039531707764s cumulative, 0.00844264030456543s individual

.
current test PASSED/SKIPPED -- test_custom_media_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 487.49476051330566s cumulative, 0.014365196228027344s individual

.
current test PASSED/SKIPPED -- test_non_ascii_json_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 487.5031406879425s cumulative, 0.00838017463684082s individual

.
current test PASSED/SKIPPED -- test_non_ascii_json_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 487.51043581962585s cumulative, 0.007295131683349609s individual

.
current test PASSED/SKIPPED -- test_mimeparse_edgecases in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 487.52614307403564s cumulative, 0.01570725440979004s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 487.5383107662201s cumulative, 0.012167692184448242s individual

.
current test PASSED/SKIPPED -- test_data in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_response_media_asgi.py: 487.5475745201111s cumulative, 0.009263753890991211s individual


tests/asgi/test_request_context_asgi.py .
current test PASSED/SKIPPED -- test_custom_request_context in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_context_asgi.py: 487.551194190979s cumulative, 0.003619670867919922s individual

.
current test PASSED/SKIPPED -- test_default_request_context in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_context_asgi.py: 487.5548770427704s cumulative, 0.003682851791381836s individual

.
current test PASSED/SKIPPED -- test_custom_request_context_failure in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_context_asgi.py: 487.5586290359497s cumulative, 0.003751993179321289s individual

.
current test PASSED/SKIPPED -- test_custom_request_context_request_access in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_context_asgi.py: 487.56248903274536s cumulative, 0.003859996795654297s individual


tests/test_request_context.py .
current test PASSED/SKIPPED -- test_custom_request_context_request_access in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_context.py: 487.5666813850403s cumulative, 0.004192352294921875s individual

.
current test PASSED/SKIPPED -- test_custom_request_context in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_context.py: 487.5700912475586s cumulative, 0.003409862518310547s individual

.
current test PASSED/SKIPPED -- test_default_request_context in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_context.py: 487.5744230747223s cumulative, 0.004331827163696289s individual

.
current test PASSED/SKIPPED -- test_custom_request_context_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_context.py: 487.5776264667511s cumulative, 0.0032033920288085938s individual


tests/test_default_router.py .
current test PASSED/SKIPPED -- test_converters in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 487.62061977386475s cumulative, 0.04299330711364746s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 487.63638043403625s cumulative, 0.01576066017150879s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 487.64739537239075s cumulative, 0.011014938354492188s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 487.6547179222107s cumulative, 0.007322549819946289s individual

.
current test PASSED/SKIPPED -- test_converters_with_invalid_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 487.6754434108734s cumulative, 0.020725488662719727s individual

.
current test PASSED/SKIPPED -- test_options_converters_invalid_name_on_update in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 487.6939208507538s cumulative, 0.018477439880371094s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 487.70471572875977s cumulative, 0.010794878005981445s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 487.7161428928375s cumulative, 0.011427164077758789s individual

.
current test PASSED/SKIPPED -- test_user_regression_versioned_url in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 487.7208824157715s cumulative, 0.004739522933959961s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 487.733758687973s cumulative, 0.012876272201538086s individual

.
current test PASSED/SKIPPED -- test_params_in_non_taken_branches in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 487.7444658279419s cumulative, 0.01070713996887207s individual

.
current test PASSED/SKIPPED -- test_options_converters_invalid_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 487.75532579421997s cumulative, 0.010859966278076172s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 487.7858772277832s cumulative, 0.030551433563232422s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 487.79784870147705s cumulative, 0.011971473693847656s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 487.80845046043396s cumulative, 0.01060175895690918s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 487.8145561218262s cumulative, 0.006105661392211914s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 487.8204472064972s cumulative, 0.005891084671020508s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 487.8265132904053s cumulative, 0.006066083908081055s individual

.
current test PASSED/SKIPPED -- test_options_converters_invalid_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 487.8411900997162s cumulative, 0.014676809310913086s individual

.
current test PASSED/SKIPPED -- test_non_conflict in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 487.8545732498169s cumulative, 0.013383150100708008s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 487.8802227973938s cumulative, 0.025649547576904297s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 487.89817929267883s cumulative, 0.01795649528503418s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 487.90426445007324s cumulative, 0.00608515739440918s individual

.
current test PASSED/SKIPPED -- test_converters_malformed_specification in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 487.918555021286s cumulative, 0.014290571212768555s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 487.9285352230072s cumulative, 0.009980201721191406s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 487.9478895664215s cumulative, 0.01935434341430664s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 487.95409774780273s cumulative, 0.006208181381225586s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 487.9734902381897s cumulative, 0.01939249038696289s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 487.98574686050415s cumulative, 0.012256622314453125s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 487.99425506591797s cumulative, 0.00850820541381836s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 488.00146532058716s cumulative, 0.007210254669189453s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 488.01188015937805s cumulative, 0.010414838790893555s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 488.03313422203064s cumulative, 0.02125406265258789s individual

.
current test PASSED/SKIPPED -- test_match_entire_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 488.04103231430054s cumulative, 0.007898092269897461s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 488.0504095554352s cumulative, 0.009377241134643555s individual

.
current test PASSED/SKIPPED -- test_not_str in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 488.0569303035736s cumulative, 0.006520748138427734s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 488.07106733322144s cumulative, 0.014137029647827148s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 488.0931119918823s cumulative, 0.022044658660888672s individual

.
current test PASSED/SKIPPED -- test_converters_with_invalid_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 488.10535049438477s cumulative, 0.012238502502441406s individual

.
current test PASSED/SKIPPED -- test_subsegment_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 488.1245741844177s cumulative, 0.019223690032958984s individual

.
current test PASSED/SKIPPED -- test_literal_segment in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 488.1409215927124s cumulative, 0.016347408294677734s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 488.1534204483032s cumulative, 0.012498855590820312s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 488.1592597961426s cumulative, 0.005839347839355469s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 488.1768226623535s cumulative, 0.0175628662109375s individual

.
current test PASSED/SKIPPED -- test_converters in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 488.1980550289154s cumulative, 0.02123236656188965s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 488.20625138282776s cumulative, 0.008196353912353516s individual

.
current test PASSED/SKIPPED -- test_single_character_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 488.23164224624634s cumulative, 0.0253908634185791s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 488.2505705356598s cumulative, 0.01892828941345215s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 488.25931572914124s cumulative, 0.008745193481445312s individual

.
current test PASSED/SKIPPED -- test_params_in_non_taken_branches in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 488.2704689502716s cumulative, 0.011153221130371094s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 488.29074811935425s cumulative, 0.0202791690826416s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 488.3023908138275s cumulative, 0.011642694473266602s individual

.
current test PASSED/SKIPPED -- test_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 488.3204460144043s cumulative, 0.018055200576782227s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 488.3271367549896s cumulative, 0.0066907405853271484s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 488.34704542160034s cumulative, 0.019908666610717773s individual



def find(path, return_values, patterns, converters, params):
    path_len = len(path)
    if path_len > 0:
        if path[0] == 'repos':
            if path_len > 1:
                if path_len > 2:
                    if path_len > 3:
                        if path[3] == 'commits':
                            if path_len == 4:
                                params['org'] = path[1]
                                params['repo'] = path[2]
                                return return_values[3]
                            return None
                        if path[3] == 'compare':
                            if path_len > 4:
                                if path[4] == 'all':
                                    if path_len == 5:
                                        params['org'] = path[1]
                                        params['repo'] = path[2]
                                        return return_values[4]
                                match = patterns[0].match(path[4])  # ^(?P<usr0>.+):(?P<branch0>.+)\.\.\.(?P<usr1>.+):(?P<branch1>.+)$
                                if match is not None:
                                    dict_match_3 = match.groupdict()
                                    if path_len > 5:
                                        if path[5] == 'full':
                                            if path_len == 6:
                                                params['org'] = path[1]
                                                params['repo'] = path[2]
                                                params.update(dict_match_3)
                                                return return_values[6]
                                        if path[5] == 'part':
                                            if path_len == 6:
                                                params['org'] = path[1]
                                                params['repo'] = path[2]
                                                params.update(dict_match_3)
                                                return return_values[7]
                                    if path_len == 5:
                                        params['org'] = path[1]
                                        params['repo'] = path[2]
                                        params.update(dict_match_3)
                                        return return_values[5]
                                match = patterns[1].match(path[4])  # ^(?P<usr0>.+):(?P<branch0>.+)$
                                if match is not None:
                                    dict_match_3 = match.groupdict()
                                    if path_len > 5:
                                        if path[5] == 'full':
                                            if path_len == 6:
                                                params['org'] = path[1]
                                                params['repo'] = path[2]
                                                params.update(dict_match_3)
                                                return return_values[9]
                                    if path_len == 5:
                                        params['org'] = path[1]
                                        params['repo'] = path[2]
                                        params.update(dict_match_3)
                                        return return_values[8]
                            return None
                        return None
                    if path_len == 3:
                        params['org'] = path[1]
                        params['repo'] = path[2]
                        return return_values[2]
                    return None
                if path_len == 2:
                    params['org'] = path[1]
                    return return_values[1]
                return None
            if path_len == 1:
                return return_values[0]
            return None
        if path[0] == 'teams':
            if path_len > 1:
                if path[1] == 'default':
                    if path_len > 2:
                        if path[2] == 'members':
                            if path_len > 3:
                                if path[3] == 'thing':
                                    if path_len == 4:
                                        return return_values[11]
                    if path_len == 2:
                        return return_values[10]
                if path_len > 2:
                    if path[2] == 'members':
                        if path_len == 3:
                            params['id'] = path[1]
                            return return_values[13]
                if path_len == 2:
                    params['id'] = path[1]
                    return return_values[12]
            return None
        if path[0] == 'user':
            if path_len > 1:
                if path[1] == 'memberships':
                    if path_len == 2:
                        return return_values[14]
                    return None
                return None
            return None
        if path[0] == 'emojis':
            if path_len > 1:
                if path[1] == 'signs':
                    if path_len > 2:
                        if path[2] == '0':
                            if path_len == 3:
                                return return_values[16]
                        if path[2] == '42':
                            if path_len > 3:
                                if path[3] == 'small.jpg':
                                    if path_len == 4:
                                        return return_values[18]
                            if path_len == 3:
                                return return_values[17]
                        if path[2] == '78':
                            if path_len > 3:
                                if path[3] == 'small.png':
                                    if path_len == 4:
                                        return return_values[19]
                                if path[3] == 'small(png)':
                                    if path_len == 4:
                                        return return_values[20]
                                if path[3] == 'small_png':
                                    if path_len == 4:
                                        return return_values[21]
                        if path_len == 3:
                            params['id'] = path[2]
                            return return_values[22]
                    return None
                return None
            if path_len == 1:
                return return_values[15]
            return None
        if path[0] == 'images':
            if path_len > 1:
                match = patterns[2].match(path[1])  # ^(?P<id>.+)\.gif$
                if match is not None:
                    dict_match_1 = match.groupdict()
                    if path_len == 2:
                        params.update(dict_match_1)
                        return return_values[23]
                    return None
                return None
            return None
        if path[0] == 'gists':
            if path_len > 1:
                if path[1] == 'first':
                    if path_len == 2:
                        return return_values[24]
                if path_len > 2:
                    if path[2] == 'raw':
                        if path_len == 3:
                            params['id'] = path[1]
                            return return_values[25]
                    if path_len == 3:
                        params['id'] = path[1]
                        params['representation'] = path[2]
                        return return_values[26]
            return None
        if path[0] == 'item':
            if path_len > 1:
                if path_len == 2:
                    params['q'] = path[1]
                    return return_values[27]
                return None
            return None
        if path[0] == 'cvt':
            if path_len > 1:
                if path[1] == 'teams':
                    if path_len > 2:
                        if path[2] == 'default':
                            if path_len > 3:
                                if path[3] == 'members':
                                    if path_len > 4:
                                        match = patterns[3].match(path[4])  # ^(?P<id>.+)-(?P<tenure>.+)$
                                        if match is not None:
                                            groups = match.groupdict()
                                            fragment = groups.pop('id')
                                            field_value_1 = converters[0].convert(fragment)
                                            if field_value_1 is not None:
                                                fragment = groups.pop('tenure')
                                                field_value_2 = converters[1].convert(fragment)
                                                if field_value_2 is not None:
                                                    if path_len == 5:
                                                        params['id'] = field_value_1
                                                        params['tenure'] = field_value_2
                                                        return return_values[29]
                            if path_len == 3:
                                return return_values[28]
                        fragment = path[2]
                        field_value_1 = converters[2].convert(fragment)
                        if field_value_1 is not None:
                            if path_len > 3:
                                if path[3] == 'members':
                                    if path_len == 4:
                                        params['id'] = field_value_1
                                        return return_values[31]
                            if path_len == 3:
                                params['id'] = field_value_1
                                return return_values[30]
                    return None
                if path[1] == 'repos':
                    if path_len > 2:
                        if path_len > 3:
                            if path_len > 4:
                                if path[4] == 'compare':
                                    if path_len > 5:
                                        match = patterns[4].match(path[5])  # ^(?P<usr0>.+):(?P<branch0>.+)\.\.\.(?P<usr1>.+):(?P<branch1>.+)$
                                        if match is not None:
                                            groups = match.groupdict()
                                            fragment = groups.pop('branch0')
                                            field_value_3 = converters[3].convert(fragment)
                                            if field_value_3 is not None:
                                                fragment = groups.pop('branch1')
                                                field_value_4 = converters[4].convert(fragment)
                                                if field_value_4 is not None:
                                                    dict_groups_5 = groups
                                                    if path_len > 6:
                                                        if path[6] == 'part':
                                                            if path_len == 7:
                                                                params['org'] = path[2]
                                                                params['repo'] = path[3]
                                                                params['branch0'] = field_value_3
                                                                params['branch1'] = field_value_4
                                                                params.update(dict_groups_5)
                                                                return return_values[32]
                                        match = patterns[5].match(path[5])  # ^(?P<usr0>.+):(?P<branch0>.+)$
                                        if match is not None:
                                            groups = match.groupdict()
                                            fragment = groups.pop('branch0')
                                            field_value_3 = converters[5].convert(fragment)
                                            if field_value_3 is not None:
                                                dict_groups_4 = groups
                                                if path_len > 6:
                                                    if path[6] == 'full':
                                                        if path_len == 7:
                                                            params['org'] = path[2]
                                                            params['repo'] = path[3]
                                                            params['branch0'] = field_value_3
                                                            params.update(dict_groups_4)
                                                            return return_values[34]
                                                if path_len == 6:
                                                    params['org'] = path[2]
                                                    params['repo'] = path[3]
                                                    params['branch0'] = field_value_3
                                                    params.update(dict_groups_4)
                                                    return return_values[33]
                                    return None
                                return None
                            return None
                        return None
                    return None
                return None
            return None
        return None
    return None

.
current test PASSED/SKIPPED -- test_print_src in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 488.3676474094391s cumulative, 0.020601987838745117s individual

.
current test PASSED/SKIPPED -- test_params_in_non_taken_branches in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 488.38018584251404s cumulative, 0.012538433074951172s individual

.
current test PASSED/SKIPPED -- test_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 488.4077892303467s cumulative, 0.0276033878326416s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 488.42731618881226s cumulative, 0.019526958465576172s individual

.
current test PASSED/SKIPPED -- test_not_str in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 488.4499411582947s cumulative, 0.022624969482421875s individual

.
current test PASSED/SKIPPED -- test_options_converters_invalid_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 488.47885298728943s cumulative, 0.028911828994750977s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 488.4973089694977s cumulative, 0.018455982208251953s individual

.
current test PASSED/SKIPPED -- test_duplicate_field_names in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 488.5035934448242s cumulative, 0.006284475326538086s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 488.54672622680664s cumulative, 0.043132781982421875s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 488.55468940734863s cumulative, 0.007963180541992188s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 488.59329199790955s cumulative, 0.038602590560913086s individual

.
current test PASSED/SKIPPED -- test_match_entire_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 488.60140013694763s cumulative, 0.008108139038085938s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 488.6166822910309s cumulative, 0.015282154083251953s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 488.6504454612732s cumulative, 0.03376317024230957s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 488.6939148902893s cumulative, 0.04346942901611328s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 488.7495024204254s cumulative, 0.0555875301361084s individual

.
current test PASSED/SKIPPED -- test_duplicate_field_names in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 488.76146936416626s cumulative, 0.011966943740844727s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 488.7841193675995s cumulative, 0.02265000343322754s individual

.
current test PASSED/SKIPPED -- test_multivar in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 488.84069538116455s cumulative, 0.05657601356506348s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 488.8601038455963s cumulative, 0.019408464431762695s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 488.8806321620941s cumulative, 0.020528316497802734s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 488.9302637577057s cumulative, 0.049631595611572266s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 488.9647958278656s cumulative, 0.03453207015991211s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 488.9937438964844s cumulative, 0.028948068618774414s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.00690245628357s cumulative, 0.013158559799194336s individual

.
current test PASSED/SKIPPED -- test_options_converters_invalid_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.01915407180786s cumulative, 0.012251615524291992s individual

.
current test PASSED/SKIPPED -- test_converters_with_invalid_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.0353467464447s cumulative, 0.01619267463684082s individual

.
current test PASSED/SKIPPED -- test_conflict in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.04860949516296s cumulative, 0.013262748718261719s individual

.
current test PASSED/SKIPPED -- test_options_converters_invalid_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.06329321861267s cumulative, 0.014683723449707031s individual

.
current test PASSED/SKIPPED -- test_options_converters_invalid_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.0736303329468s cumulative, 0.010337114334106445s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.095144033432s cumulative, 0.021513700485229492s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.10435366630554s cumulative, 0.009209632873535156s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.1253581047058s cumulative, 0.021004438400268555s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.13715505599976s cumulative, 0.011796951293945312s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.14442706108093s cumulative, 0.007272005081176758s individual

.
current test PASSED/SKIPPED -- test_conflict in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.1583249568939s cumulative, 0.013897895812988281s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.1651613712311s cumulative, 0.006836414337158203s individual

.
current test PASSED/SKIPPED -- test_conflict in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.1762754917145s cumulative, 0.011114120483398438s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.197790145874s cumulative, 0.0215146541595459s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.2101695537567s cumulative, 0.01237940788269043s individual

.
current test PASSED/SKIPPED -- test_dead_segment in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.2308189868927s cumulative, 0.020649433135986328s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.2479557991028s cumulative, 0.017136812210083008s individual

.
current test PASSED/SKIPPED -- test_conflict in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.25935196876526s cumulative, 0.011396169662475586s individual

.
current test PASSED/SKIPPED -- test_capture_path_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.2641842365265s cumulative, 0.004832267761230469s individual

.
current test PASSED/SKIPPED -- test_params_in_non_taken_branches in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.2728593349457s cumulative, 0.008675098419189453s individual

.
current test PASSED/SKIPPED -- test_capture_path_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.276597738266s cumulative, 0.0037384033203125s individual

.
current test PASSED/SKIPPED -- test_converters in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.29737401008606s cumulative, 0.02077627182006836s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.309059381485s cumulative, 0.011685371398925781s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.3160297870636s cumulative, 0.006970405578613281s individual

.
current test PASSED/SKIPPED -- test_duplicate_field_names in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.31944370269775s cumulative, 0.0034139156341552734s individual

.
current test PASSED/SKIPPED -- test_capture_path_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.3235516548157s cumulative, 0.004107952117919922s individual

.
current test PASSED/SKIPPED -- test_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.34552025794983s cumulative, 0.021968603134155273s individual

.
current test PASSED/SKIPPED -- test_malformed_pattern in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.37071347236633s cumulative, 0.025193214416503906s individual

.
current test PASSED/SKIPPED -- test_duplicate_field_names in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.3746747970581s cumulative, 0.003961324691772461s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.3801577091217s cumulative, 0.005482912063598633s individual

.
current test PASSED/SKIPPED -- test_options_converters_update in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.40153527259827s cumulative, 0.0213775634765625s individual

.
current test PASSED/SKIPPED -- test_complex_alt in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.4310908317566s cumulative, 0.029555559158325195s individual

.
current test PASSED/SKIPPED -- test_capture_path_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.4392523765564s cumulative, 0.008161544799804688s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.449990272522s cumulative, 0.010737895965576172s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.4850380420685s cumulative, 0.03504776954650879s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.5162546634674s cumulative, 0.03121662139892578s individual

.
current test PASSED/SKIPPED -- test_complex_alt in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.5444896221161s cumulative, 0.02823495864868164s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.56597566604614s cumulative, 0.02148604393005371s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.5813076496124s cumulative, 0.01533198356628418s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.60578989982605s cumulative, 0.024482250213623047s individual

.
current test PASSED/SKIPPED -- test_non_conflict in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.6203591823578s cumulative, 0.014569282531738281s individual

.
current test PASSED/SKIPPED -- test_literal_vs_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.64076375961304s cumulative, 0.020404577255249023s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.65942096710205s cumulative, 0.018657207489013672s individual

.
current test PASSED/SKIPPED -- test_converters in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.68498253822327s cumulative, 0.02556157112121582s individual

.
current test PASSED/SKIPPED -- test_params_in_non_taken_branches in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.6948754787445s cumulative, 0.009892940521240234s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.7126486301422s cumulative, 0.017773151397705078s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.7238130569458s cumulative, 0.011164426803588867s individual

.
current test PASSED/SKIPPED -- test_root_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.728830575943s cumulative, 0.005017518997192383s individual

.
current test PASSED/SKIPPED -- test_match_entire_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.7335777282715s cumulative, 0.004747152328491211s individual

.
current test PASSED/SKIPPED -- test_dead_segment in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.75073885917664s cumulative, 0.017161130905151367s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.76167583465576s cumulative, 0.010936975479125977s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.7665150165558s cumulative, 0.004839181900024414s individual

.
current test PASSED/SKIPPED -- test_options_converters_update in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.7842080593109s cumulative, 0.017693042755126953s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.79918360710144s cumulative, 0.014975547790527344s individual

.
current test PASSED/SKIPPED -- test_malformed_pattern in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.8178255558014s cumulative, 0.018641948699951172s individual

.
current test PASSED/SKIPPED -- test_match_entire_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.82346653938293s cumulative, 0.005640983581542969s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.8448827266693s cumulative, 0.021416187286376953s individual

.
current test PASSED/SKIPPED -- test_variable in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.89881682395935s cumulative, 0.05393409729003906s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.9156401157379s cumulative, 0.016823291778564453s individual

.
current test PASSED/SKIPPED -- test_override in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.9609565734863s cumulative, 0.045316457748413086s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.983660697937s cumulative, 0.022704124450683594s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 489.99715971946716s cumulative, 0.013499021530151367s individual

.
current test PASSED/SKIPPED -- test_options_converters_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 490.0312125682831s cumulative, 0.03405284881591797s individual

.
current test PASSED/SKIPPED -- test_not_str in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 490.0397596359253s cumulative, 0.008547067642211914s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 490.0508224964142s cumulative, 0.011062860488891602s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 490.068452835083s cumulative, 0.017630338668823242s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 490.09193420410156s cumulative, 0.023481369018554688s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 490.1389501094818s cumulative, 0.04701590538024902s individual

.
current test PASSED/SKIPPED -- test_invalid_field_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 490.1666452884674s cumulative, 0.027695178985595703s individual

.
current test PASSED/SKIPPED -- test_not_str in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 490.1811742782593s cumulative, 0.014528989791870117s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 490.22278356552124s cumulative, 0.04160928726196289s individual

.
current test PASSED/SKIPPED -- test_user_regression_recipes in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 490.23291993141174s cumulative, 0.01013636589050293s individual

.
current test PASSED/SKIPPED -- test_dead_segment in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 490.2744312286377s cumulative, 0.04151129722595215s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 490.3191556930542s cumulative, 0.044724464416503906s individual

.
current test PASSED/SKIPPED -- test_converters_malformed_specification in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 490.34083342552185s cumulative, 0.021677732467651367s individual

.
current test PASSED/SKIPPED -- test_options_converters_invalid_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 490.3565847873688s cumulative, 0.015751361846923828s individual

.
current test PASSED/SKIPPED -- test_not_str in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 490.36405205726624s cumulative, 0.0074672698974609375s individual

.
current test PASSED/SKIPPED -- test_capture_path_no_children in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 490.37234711647034s cumulative, 0.008295059204101562s individual

.
current test PASSED/SKIPPED -- test_converters in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 490.40654969215393s cumulative, 0.03420257568359375s individual

.
current test PASSED/SKIPPED -- test_literal in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 490.4386954307556s cumulative, 0.03214573860168457s individual

.
current test PASSED/SKIPPED -- test_capture_path_no_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 490.4462339878082s cumulative, 0.007538557052612305s individual

.
current test PASSED/SKIPPED -- test_dead_segment in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 490.4789001941681s cumulative, 0.03266620635986328s individual

.
current test PASSED/SKIPPED -- test_converters_with_invalid_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 490.49398612976074s cumulative, 0.015085935592651367s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 490.50038862228394s cumulative, 0.006402492523193359s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 490.5250012874603s cumulative, 0.0246126651763916s individual

.
current test PASSED/SKIPPED -- test_not_str in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 490.53331208229065s cumulative, 0.008310794830322266s individual

.
current test PASSED/SKIPPED -- test_converters in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 490.5761065483093s cumulative, 0.04279446601867676s individual

.
current test PASSED/SKIPPED -- test_user_regression_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 490.5840210914612s cumulative, 0.007914543151855469s individual

.
current test PASSED/SKIPPED -- test_non_conflict in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 490.60325622558594s cumulative, 0.01923513412475586s individual

.
current test PASSED/SKIPPED -- test_capture_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 490.6188395023346s cumulative, 0.015583276748657227s individual

.
current test PASSED/SKIPPED -- test_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_default_router.py: 490.6471371650696s cumulative, 0.02829766273498535s individual


tests/test_error.py .
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 490.65980887413025s cumulative, 0.012671709060668945s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 490.6675760746002s cumulative, 0.007767200469970703s individual

.
current test PASSED/SKIPPED -- test_override_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 490.6808669567108s cumulative, 0.013290882110595703s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 490.695524930954s cumulative, 0.014657974243164062s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 490.70626425743103s cumulative, 0.010739326477050781s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 490.7161056995392s cumulative, 0.009841442108154297s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 490.72740864753723s cumulative, 0.011302947998046875s individual

.
current test PASSED/SKIPPED -- test_no_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 490.7396078109741s cumulative, 0.012199163436889648s individual

.
current test PASSED/SKIPPED -- test_other_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 490.7495586872101s cumulative, 0.009950876235961914s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 490.75733637809753s cumulative, 0.007777690887451172s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 490.7648916244507s cumulative, 0.007555246353149414s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 490.77537298202515s cumulative, 0.01048135757446289s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 490.78339672088623s cumulative, 0.008023738861083984s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 490.78919291496277s cumulative, 0.005796194076538086s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 490.79580783843994s cumulative, 0.0066149234771728516s individual

.
current test PASSED/SKIPPED -- test_with_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 490.80237889289856s cumulative, 0.006571054458618164s individual

.
current test PASSED/SKIPPED -- test_override_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 490.81054282188416s cumulative, 0.008163928985595703s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 490.8174886703491s cumulative, 0.00694584846496582s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 490.82250237464905s cumulative, 0.005013704299926758s individual

.
current test PASSED/SKIPPED -- test_override_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 490.82915568351746s cumulative, 0.006653308868408203s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 490.83353877067566s cumulative, 0.004383087158203125s individual

.
current test PASSED/SKIPPED -- test_other_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 490.8391673564911s cumulative, 0.0056285858154296875s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 490.84561491012573s cumulative, 0.006447553634643555s individual

.
current test PASSED/SKIPPED -- test_custom_400 in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 490.8532552719116s cumulative, 0.007640361785888672s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 490.8597905635834s cumulative, 0.00653529167175293s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 490.86684560775757s cumulative, 0.007055044174194336s individual

.
current test PASSED/SKIPPED -- test_with_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 490.8739364147186s cumulative, 0.00709080696105957s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 490.87931299209595s cumulative, 0.005376577377319336s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 490.88356947898865s cumulative, 0.004256486892700195s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 490.88728761672974s cumulative, 0.003718137741088867s individual

.
current test PASSED/SKIPPED -- test_no_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 490.8924582004547s cumulative, 0.005170583724975586s individual

.
current test PASSED/SKIPPED -- test_override_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 490.8978543281555s cumulative, 0.005396127700805664s individual

.
current test PASSED/SKIPPED -- test_with_retry_after_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 490.9031569957733s cumulative, 0.0053026676177978516s individual

.
current test PASSED/SKIPPED -- test_other_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 490.9107849597931s cumulative, 0.007627964019775391s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 490.9148027896881s cumulative, 0.004017829895019531s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 490.9186146259308s cumulative, 0.0038118362426757812s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 490.9227035045624s cumulative, 0.004088878631591797s individual

.
current test PASSED/SKIPPED -- test_other_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 490.9276146888733s cumulative, 0.004911184310913086s individual

.
current test PASSED/SKIPPED -- test_other_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 490.9319851398468s cumulative, 0.004370450973510742s individual

.
current test PASSED/SKIPPED -- test_other_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 490.9362862110138s cumulative, 0.0043010711669921875s individual

.
current test PASSED/SKIPPED -- test_no_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 490.940603017807s cumulative, 0.004316806793212891s individual

.
current test PASSED/SKIPPED -- test_custom_400 in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 490.9450900554657s cumulative, 0.004487037658691406s individual

.
current test PASSED/SKIPPED -- test_no_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 490.9497215747833s cumulative, 0.004631519317626953s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 490.9537835121155s cumulative, 0.00406193733215332s individual

.
current test PASSED/SKIPPED -- test_http_error_repr in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 490.9613506793976s cumulative, 0.007567167282104492s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 490.965140581131s cumulative, 0.0037899017333984375s individual

.
current test PASSED/SKIPPED -- test_other_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 490.9698340892792s cumulative, 0.004693508148193359s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 490.9737026691437s cumulative, 0.003868579864501953s individual

.
current test PASSED/SKIPPED -- test_no_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 490.97751116752625s cumulative, 0.0038084983825683594s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 490.98233127593994s cumulative, 0.004820108413696289s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 490.9869372844696s cumulative, 0.004606008529663086s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 490.99190497398376s cumulative, 0.004967689514160156s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 490.9962649345398s cumulative, 0.0043599605560302734s individual

.
current test PASSED/SKIPPED -- test_other_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.00083804130554s cumulative, 0.00457310676574707s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.00395917892456s cumulative, 0.0031211376190185547s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.00754833221436s cumulative, 0.003589153289794922s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.01057028770447s cumulative, 0.0030219554901123047s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.0145547389984s cumulative, 0.0039844512939453125s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.01972341537476s cumulative, 0.0051686763763427734s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.02404260635376s cumulative, 0.004319190979003906s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.0288739204407s cumulative, 0.0048313140869140625s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.0325584411621s cumulative, 0.003684520721435547s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.03637528419495s cumulative, 0.003816843032836914s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.0407450199127s cumulative, 0.0043697357177734375s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.0490674972534s cumulative, 0.008322477340698242s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.05855202674866s cumulative, 0.009484529495239258s individual

.
current test PASSED/SKIPPED -- test_no_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.06854486465454s cumulative, 0.009992837905883789s individual

.
current test PASSED/SKIPPED -- test_other_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.07774925231934s cumulative, 0.009204387664794922s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.0858488082886s cumulative, 0.008099555969238281s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.0945556163788s cumulative, 0.008706808090209961s individual

.
current test PASSED/SKIPPED -- test_override_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.1021203994751s cumulative, 0.0075647830963134766s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.10844326019287s cumulative, 0.0063228607177734375s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.1150324344635s cumulative, 0.006589174270629883s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.1383173465729s cumulative, 0.023284912109375s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.14678287506104s cumulative, 0.00846552848815918s individual

.
current test PASSED/SKIPPED -- test_args_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.15614652633667s cumulative, 0.009363651275634766s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.1625463962555s cumulative, 0.006399869918823242s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.1703598499298s cumulative, 0.007813453674316406s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.1792275905609s cumulative, 0.008867740631103516s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.1870262622833s cumulative, 0.007798671722412109s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.19300389289856s cumulative, 0.005977630615234375s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.1994090080261s cumulative, 0.0064051151275634766s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.20619773864746s cumulative, 0.006788730621337891s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.2139711380005s cumulative, 0.007773399353027344s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.2204189300537s cumulative, 0.006447792053222656s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.2263069152832s cumulative, 0.0058879852294921875s individual

.
current test PASSED/SKIPPED -- test_other_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.2339458465576s cumulative, 0.0076389312744140625s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.24070286750793s cumulative, 0.006757020950317383s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.2479109764099s cumulative, 0.007208108901977539s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.2540080547333s cumulative, 0.006097078323364258s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.2612371444702s cumulative, 0.0072290897369384766s individual

.
current test PASSED/SKIPPED -- test_override_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.26851415634155s cumulative, 0.007277011871337891s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.2739362716675s cumulative, 0.005422115325927734s individual

.
current test PASSED/SKIPPED -- test_args_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.28254103660583s cumulative, 0.008604764938354492s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.288996219635s cumulative, 0.006455183029174805s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.2958633899689s cumulative, 0.006867170333862305s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.3050332069397s cumulative, 0.009169816970825195s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.31414818763733s cumulative, 0.009114980697631836s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.32208347320557s cumulative, 0.007935285568237305s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.330203294754s cumulative, 0.008119821548461914s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.3492865562439s cumulative, 0.019083261489868164s individual

.
current test PASSED/SKIPPED -- test_override_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.3670873641968s cumulative, 0.01780080795288086s individual

.
current test PASSED/SKIPPED -- test_custom_400 in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.3787531852722s cumulative, 0.011665821075439453s individual

.
current test PASSED/SKIPPED -- test_override_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.3883731365204s cumulative, 0.009619951248168945s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.3949077129364s cumulative, 0.006534576416015625s individual

.
current test PASSED/SKIPPED -- test_override_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.40461802482605s cumulative, 0.009710311889648438s individual

.
current test PASSED/SKIPPED -- test_other_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.4128839969635s cumulative, 0.008265972137451172s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.42076230049133s cumulative, 0.007878303527832031s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.42888951301575s cumulative, 0.008127212524414062s individual

.
current test PASSED/SKIPPED -- test_args_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.43674755096436s cumulative, 0.007858037948608398s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.44384574890137s cumulative, 0.007098197937011719s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.4513418674469s cumulative, 0.0074961185455322266s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.4611539840698s cumulative, 0.009812116622924805s individual

.
current test PASSED/SKIPPED -- test_other_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.4722225666046s cumulative, 0.011068582534790039s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.4800498485565s cumulative, 0.007827281951904297s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.48761439323425s cumulative, 0.007564544677734375s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.4974732398987s cumulative, 0.009858846664428711s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.50787258148193s cumulative, 0.010399341583251953s individual

.
current test PASSED/SKIPPED -- test_args_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.5167660713196s cumulative, 0.008893489837646484s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.5250539779663s cumulative, 0.008287906646728516s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.53742480278015s cumulative, 0.012370824813842773s individual

.
current test PASSED/SKIPPED -- test_with_retry_after_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.55148339271545s cumulative, 0.014058589935302734s individual

.
current test PASSED/SKIPPED -- test_override_header_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.5665645599365s cumulative, 0.015081167221069336s individual

.
current test PASSED/SKIPPED -- test_with_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.57654333114624s cumulative, 0.009978771209716797s individual

.
current test PASSED/SKIPPED -- test_custom_400 in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.5857696533203s cumulative, 0.009226322174072266s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.5943088531494s cumulative, 0.008539199829101562s individual

.
current test PASSED/SKIPPED -- test_args_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.6045525074005s cumulative, 0.010243654251098633s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.61261463165283s cumulative, 0.008062124252319336s individual

.
current test PASSED/SKIPPED -- test_with_retry_after_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.62043166160583s cumulative, 0.00781702995300293s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.6274971961975s cumulative, 0.007065534591674805s individual

.
current test PASSED/SKIPPED -- test_args_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.63366198539734s cumulative, 0.0061647891998291016s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.64408922195435s cumulative, 0.010427236557006836s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.6561849117279s cumulative, 0.01209568977355957s individual

.
current test PASSED/SKIPPED -- test_override_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.6659302711487s cumulative, 0.009745359420776367s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.6735692024231s cumulative, 0.0076389312744140625s individual

.
current test PASSED/SKIPPED -- test_with_title_desc_and_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.6797704696655s cumulative, 0.006201267242431641s individual

.
current test PASSED/SKIPPED -- test_override_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.68742847442627s cumulative, 0.0076580047607421875s individual

.
current test PASSED/SKIPPED -- test_with_default_title_and_desc in /home/kaiyaok2/PythonProjects/falcon/tests/test_error.py: 491.6941967010498s cumulative, 0.006768226623535156s individual


tests/test_after_hooks.py .
current test PASSED/SKIPPED -- test_after_hooks_on_suffixed_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 491.730101108551s cumulative, 0.0359044075012207s individual

.
current test PASSED/SKIPPED -- test_resource_with_uri_fields_async in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 491.7653851509094s cumulative, 0.03528404235839844s individual

.
current test PASSED/SKIPPED -- test_after_hooks_on_suffixed_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 491.8058922290802s cumulative, 0.04050707817077637s individual

.
current test PASSED/SKIPPED -- test_wrapped_resource_with_hooks_aware_of_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 491.83088541030884s cumulative, 0.024993181228637695s individual

.
current test PASSED/SKIPPED -- test_after_hooks_on_suffixed_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 491.8490147590637s cumulative, 0.018129348754882812s individual

.
current test PASSED/SKIPPED -- test_hook_as_callable_class in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 491.8592965602875s cumulative, 0.010281801223754883s individual

.
current test PASSED/SKIPPED -- test_serializer in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 491.87057995796204s cumulative, 0.011283397674560547s individual

.
current test PASSED/SKIPPED -- test_output_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 491.88907527923584s cumulative, 0.01849532127380371s individual

.
current test PASSED/SKIPPED -- test_wrapped_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 491.90995264053345s cumulative, 0.020877361297607422s individual

.
current test PASSED/SKIPPED -- test_hook_as_callable_class in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 491.9218747615814s cumulative, 0.011922121047973633s individual

.
current test PASSED/SKIPPED -- test_serializer in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 491.9336051940918s cumulative, 0.011730432510375977s individual

.
current test PASSED/SKIPPED -- test_output_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 491.94567942619324s cumulative, 0.01207423210144043s individual

.
current test PASSED/SKIPPED -- test_resource_with_uri_fields in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 491.9559648036957s cumulative, 0.010285377502441406s individual

.
current test PASSED/SKIPPED -- test_after_hooks_on_suffixed_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 491.96830916404724s cumulative, 0.0123443603515625s individual

.
current test PASSED/SKIPPED -- test_resource_with_uri_fields in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 491.9816792011261s cumulative, 0.013370037078857422s individual

.
current test PASSED/SKIPPED -- test_wrapped_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 492.0030860900879s cumulative, 0.021406888961791992s individual


tests/asgi/test_boundedstream_asgi.py s
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 492.00920391082764s cumulative, 0.006117820739746094s individual

s
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 492.0129933357239s cumulative, 0.0037894248962402344s individual

s
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 492.01806688308716s cumulative, 0.00507354736328125s individual

s
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 492.02210235595703s cumulative, 0.004035472869873047s individual

s
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 492.02643728256226s cumulative, 0.004334926605224609s individual

s
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 492.03126788139343s cumulative, 0.004830598831176758s individual

s
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 492.03481912612915s cumulative, 0.0035512447357177734s individual


tests/test_testing.py .
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 492.0396695137024s cumulative, 0.0048503875732421875s individual

.
current test PASSED/SKIPPED -- test_missing_header_is_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 492.0426127910614s cumulative, 0.002943277359008789s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 492.05014157295227s cumulative, 0.007528781890869141s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 492.0551896095276s cumulative, 0.005048036575317383s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 492.06278347969055s cumulative, 0.007593870162963867s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 492.06849241256714s cumulative, 0.005708932876586914s individual

.
current test PASSED/SKIPPED -- test_closed_wsgi_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 492.07179856300354s cumulative, 0.003306150436401367s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 492.07632970809937s cumulative, 0.004531145095825195s individual

.
current test PASSED/SKIPPED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 492.08204436302185s cumulative, 0.0057146549224853516s individual

.
current test PASSED/SKIPPED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 492.0864362716675s cumulative, 0.004391908645629883s individual

.
current test PASSED/SKIPPED -- test_closed_wsgi_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 492.0891623497009s cumulative, 0.0027260780334472656s individual

.
current test PASSED/SKIPPED -- test_simulate_request_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 492.09668827056885s cumulative, 0.007525920867919922s individual

.
current test PASSED/SKIPPED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 492.10137820243835s cumulative, 0.004689931869506836s individual

.
current test PASSED/SKIPPED -- test_testing_client_handles_wsgi_generator_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 492.10451221466064s cumulative, 0.003134012222290039s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 492.1110053062439s cumulative, 0.006493091583251953s individual

.
current test PASSED/SKIPPED -- test_closed_wsgi_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 492.1157937049866s cumulative, 0.004788398742675781s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 492.12290024757385s cumulative, 0.0071065425872802734s individual

.
current test PASSED/SKIPPED -- test_cookies_jar in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 492.13508462905884s cumulative, 0.012184381484985352s individual

.
current test PASSED/SKIPPED -- test_create_environ_default_ua_override in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 492.1400430202484s cumulative, 0.004958391189575195s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 492.149799823761s cumulative, 0.009756803512573242s individual

.
current test PASSED/SKIPPED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 492.1589777469635s cumulative, 0.009177923202514648s individual

.
current test PASSED/SKIPPED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 492.1687195301056s cumulative, 0.009741783142089844s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 492.1749732494354s cumulative, 0.006253719329833984s individual

.
current test PASSED/SKIPPED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 492.1869170665741s cumulative, 0.011943817138671875s individual

.
current test PASSED/SKIPPED -- test_create_environ_cookies in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 492.1908030509949s cumulative, 0.003885984420776367s individual

.
current test PASSED/SKIPPED -- test_create_environ_preserve_raw_uri in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 492.19383096694946s cumulative, 0.0030279159545898438s individual

.
current test PASSED/SKIPPED -- test_create_environ_cookies_options_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 492.1966199874878s cumulative, 0.002789020538330078s individual

.
current test PASSED/SKIPPED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 492.20155930519104s cumulative, 0.00493931770324707s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 492.2058210372925s cumulative, 0.00426173210144043s individual

.
current test PASSED/SKIPPED -- test_create_environ_default_ua in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 492.2089157104492s cumulative, 0.0030946731567382812s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 492.21319818496704s cumulative, 0.004282474517822266s individual

.
current test PASSED/SKIPPED -- test_simulate_request_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 492.2179186344147s cumulative, 0.004720449447631836s individual

.
current test PASSED/SKIPPED -- test_create_environ_cookies in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 492.22099804878235s cumulative, 0.0030794143676757812s individual

.
current test PASSED/SKIPPED -- test_closed_wsgi_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 492.22386026382446s cumulative, 0.002862215042114258s individual

.
current test PASSED/SKIPPED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 492.235187292099s cumulative, 0.011327028274536133s individual


tests/asgi/test_hello_asgi.py .
current test PASSED/SKIPPED -- test_genfunc_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 492.24608302116394s cumulative, 0.010895729064941406s individual

.
current test PASSED/SKIPPED -- test_closing_stream in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 492.2584056854248s cumulative, 0.012322664260864258s individual

.
current test PASSED/SKIPPED -- test_stream_chunked in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 492.2724709510803s cumulative, 0.014065265655517578s individual

.
current test PASSED/SKIPPED -- test_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 492.28770446777344s cumulative, 0.015233516693115234s individual

.
current test PASSED/SKIPPED -- test_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 492.3272132873535s cumulative, 0.039508819580078125s individual

.
current test PASSED/SKIPPED -- test_filelike_using_helper in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 492.3399169445038s cumulative, 0.012703657150268555s individual

.
current test PASSED/SKIPPED -- test_filelike in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 492.35473561286926s cumulative, 0.014818668365478516s individual

.
current test PASSED/SKIPPED -- test_filelike_closing in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 492.3729968070984s cumulative, 0.018261194229125977s individual

.
current test PASSED/SKIPPED -- test_stream_known_len in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 492.3862581253052s cumulative, 0.01326131820678711s individual

.
current test PASSED/SKIPPED -- test_status_not_set in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 492.39814829826355s cumulative, 0.011890172958374023s individual

.
current test PASSED/SKIPPED -- test_no_body_on_head in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 492.41106963157654s cumulative, 0.012921333312988281s individual

.
current test PASSED/SKIPPED -- test_filelike_closing in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 492.42335534095764s cumulative, 0.012285709381103516s individual

.
current test PASSED/SKIPPED -- test_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 492.4330644607544s cumulative, 0.00970911979675293s individual

.
current test PASSED/SKIPPED -- test_nongenfunc_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 492.4448673725128s cumulative, 0.011802911758422852s individual

.
current test PASSED/SKIPPED -- test_no_route in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 492.4568729400635s cumulative, 0.01200556755065918s individual

.
current test PASSED/SKIPPED -- test_noncoroutine_required in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 492.4668846130371s cumulative, 0.010011672973632812s individual

.
current test PASSED/SKIPPED -- test_coroutine_required in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 492.47630047798157s cumulative, 0.009415864944458008s individual

.
current test PASSED/SKIPPED -- test_closing_stream in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 492.4942705631256s cumulative, 0.01797008514404297s individual

.
current test PASSED/SKIPPED -- test_closing_stream in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 492.5081443786621s cumulative, 0.013873815536499023s individual

.
current test PASSED/SKIPPED -- test_filelike_closing_aiofiles in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 492.5587456226349s cumulative, 0.05060124397277832s individual

.
current test PASSED/SKIPPED -- test_root_route in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 492.5693361759186s cumulative, 0.010590553283691406s individual

.
current test PASSED/SKIPPED -- test_closing_stream in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 492.58287596702576s cumulative, 0.013539791107177734s individual

.
current test PASSED/SKIPPED -- test_env_headers_list_of_tuples in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_hello_asgi.py: 492.58770418167114s cumulative, 0.004828214645385742s individual


tests/test_httpstatus.py .
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 492.6060631275177s cumulative, 0.018358945846557617s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 492.61840200424194s cumulative, 0.012338876724243164s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 492.632119178772s cumulative, 0.013717174530029297s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 492.6427307128906s cumulative, 0.010611534118652344s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 492.6549849510193s cumulative, 0.01225423812866211s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 492.669846534729s cumulative, 0.014861583709716797s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 492.68401408195496s cumulative, 0.014167547225952148s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 492.6951675415039s cumulative, 0.011153459548950195s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 492.70547747612s cumulative, 0.010309934616088867s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 492.71771907806396s cumulative, 0.012241601943969727s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 492.7304639816284s cumulative, 0.012744903564453125s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 492.7423679828644s cumulative, 0.011904001235961914s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 492.7551131248474s cumulative, 0.012745141983032227s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 492.7666244506836s cumulative, 0.01151132583618164s individual


tests/test_before_hooks.py .
current test PASSED/SKIPPED -- test_multiple_resource_hooks in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 492.7770791053772s cumulative, 0.010454654693603516s individual

.
current test PASSED/SKIPPED -- test_parser_sync in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 492.7868812084198s cumulative, 0.009802103042602539s individual

.
current test PASSED/SKIPPED -- test_parser_async in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 492.79655408859253s cumulative, 0.009672880172729492s individual

.
current test PASSED/SKIPPED -- test_piggybacking_resource_post_item in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 492.8054287433624s cumulative, 0.008874654769897461s individual

.
current test PASSED/SKIPPED -- test_multiple_resource_hooks in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 492.81314396858215s cumulative, 0.0077152252197265625s individual

.
current test PASSED/SKIPPED -- test_field_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 492.82180190086365s cumulative, 0.00865793228149414s individual

.
current test PASSED/SKIPPED -- test_field_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 492.8294858932495s cumulative, 0.007683992385864258s individual

.
current test PASSED/SKIPPED -- test_multiple_resource_hooks in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 492.83593916893005s cumulative, 0.006453275680541992s individual

.
current test PASSED/SKIPPED -- test_wrapped_resource_with_hooks_aware_of_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 492.8519968986511s cumulative, 0.016057729721069336s individual

.
current test PASSED/SKIPPED -- test_param_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 492.85924458503723s cumulative, 0.0072476863861083984s individual

.
current test PASSED/SKIPPED -- test_wrapped_resource_with_hooks_aware_of_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 492.86726236343384s cumulative, 0.008017778396606445s individual

.
current test PASSED/SKIPPED -- test_input_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 492.8745594024658s cumulative, 0.007297039031982422s individual

.
current test PASSED/SKIPPED -- test_parser_sync in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 492.8813383579254s cumulative, 0.0067789554595947266s individual

.
current test PASSED/SKIPPED -- test_field_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 494.8164076805115s cumulative, 1.9350693225860596s individual

.
current test PASSED/SKIPPED -- test_decorable_name_pattern in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 494.8201153278351s cumulative, 0.0037076473236083984s individual

.
current test PASSED/SKIPPED -- test_field_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 494.8338394165039s cumulative, 0.013724088668823242s individual

.
current test PASSED/SKIPPED -- test_piggybacking_resource_post_item in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 494.846152305603s cumulative, 0.012312889099121094s individual

.
current test PASSED/SKIPPED -- test_parser_async in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 494.85743474960327s cumulative, 0.01128244400024414s individual

.
current test PASSED/SKIPPED -- test_field_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 494.8686897754669s cumulative, 0.011255025863647461s individual

.
current test PASSED/SKIPPED -- test_piggybacking_resource_post_and_delete in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 494.8961420059204s cumulative, 0.02745223045349121s individual

.
current test PASSED/SKIPPED -- test_input_validator_inherited in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 494.90620470046997s cumulative, 0.010062694549560547s individual

.
current test PASSED/SKIPPED -- test_parser_async in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 494.9143204689026s cumulative, 0.008115768432617188s individual

.
current test PASSED/SKIPPED -- test_parser_sync in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 494.92050647735596s cumulative, 0.006186008453369141s individual

.
current test PASSED/SKIPPED -- test_parser_async in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 494.9297676086426s cumulative, 0.009261131286621094s individual

.
current test PASSED/SKIPPED -- test_param_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 494.9382266998291s cumulative, 0.008459091186523438s individual

.
current test PASSED/SKIPPED -- test_input_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 494.94535279273987s cumulative, 0.0071260929107666016s individual

.
current test PASSED/SKIPPED -- test_wrapped_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 494.95605063438416s cumulative, 0.01069784164428711s individual

.
current test PASSED/SKIPPED -- test_wrapped_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 494.96917724609375s cumulative, 0.013126611709594727s individual

.
current test PASSED/SKIPPED -- test_input_validator_inherited in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 494.97881722450256s cumulative, 0.009639978408813477s individual

.
current test PASSED/SKIPPED -- test_multiple_resource_hooks in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 494.98825550079346s cumulative, 0.009438276290893555s individual

.
current test PASSED/SKIPPED -- test_parser_sync in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 494.99682664871216s cumulative, 0.008571147918701172s individual

.
current test PASSED/SKIPPED -- test_piggybacking_resource_post_and_delete in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 495.01251769065857s cumulative, 0.015691041946411133s individual

.
current test PASSED/SKIPPED -- test_field_validator in /home/kaiyaok2/PythonProjects/falcon/tests/test_before_hooks.py: 495.02123522758484s cumulative, 0.008717536926269531s individual


tests/test_media_urlencoded.py .
current test PASSED/SKIPPED -- test_urlencoded_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 495.0320506095886s cumulative, 0.01081538200378418s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 495.0384964942932s cumulative, 0.006445884704589844s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 495.0480046272278s cumulative, 0.009508132934570312s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 495.05580282211304s cumulative, 0.007798194885253906s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form_handler_serialize in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 495.05925130844116s cumulative, 0.003448486328125s individual

.
current test PASSED/SKIPPED -- test_empty_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 495.06637692451477s cumulative, 0.0071256160736083984s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 495.07415652275085s cumulative, 0.007779598236083984s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 495.0804765224457s cumulative, 0.006319999694824219s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 495.0877015590668s cumulative, 0.00722503662109375s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 495.10177659988403s cumulative, 0.014075040817260742s individual

.
current test PASSED/SKIPPED -- test_deserialize_empty_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 495.1060702800751s cumulative, 0.004293680191040039s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form_handler_serialize in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 495.1098532676697s cumulative, 0.003782987594604492s individual

.
current test PASSED/SKIPPED -- test_deserialize_invalid_unicode in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 495.11444425582886s cumulative, 0.0045909881591796875s individual

.
current test PASSED/SKIPPED -- test_empty_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 495.121515750885s cumulative, 0.007071495056152344s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 495.1371600627899s cumulative, 0.015644311904907227s individual

.
current test PASSED/SKIPPED -- test_urlencoded_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_urlencoded.py: 495.1535174846649s cumulative, 0.016357421875s individual


tests/asgi/test_request_body_asgi.py .
current test PASSED/SKIPPED -- test_content_length_smaller_than_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 495.1661787033081s cumulative, 0.012661218643188477s individual

.
current test PASSED/SKIPPED -- test_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 495.18335247039795s cumulative, 0.01717376708984375s individual

.
current test PASSED/SKIPPED -- test_content_length_smaller_than_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 495.1884889602661s cumulative, 0.0051364898681640625s individual

.
current test PASSED/SKIPPED -- test_content_length_smaller_than_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 495.193021774292s cumulative, 0.004532814025878906s individual

.
current test PASSED/SKIPPED -- test_request_repr in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 495.1989939212799s cumulative, 0.005972146987915039s individual

.
current test PASSED/SKIPPED -- test_content_length_smaller_than_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 495.2027428150177s cumulative, 0.0037488937377929688s individual

.
current test PASSED/SKIPPED -- test_bounded_stream_alias in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 495.20675253868103s cumulative, 0.004009723663330078s individual

.
current test PASSED/SKIPPED -- test_tiny_body_overflow in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 495.220041513443s cumulative, 0.01328897476196289s individual

.
current test PASSED/SKIPPED -- test_tiny_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 495.2301118373871s cumulative, 0.010070323944091797s individual

.
current test PASSED/SKIPPED -- test_content_length_smaller_than_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 495.2396743297577s cumulative, 0.009562492370605469s individual

.
current test PASSED/SKIPPED -- test_read_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 495.2524745464325s cumulative, 0.012800216674804688s individual

.
current test PASSED/SKIPPED -- test_content_length_smaller_than_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_body_asgi.py: 495.25722193717957s cumulative, 0.0047473907470703125s individual


tests/test_static.py .
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.27251720428467s cumulative, 0.015295267105102539s individual

.
current test PASSED/SKIPPED -- test_file_closed in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.28521609306335s cumulative, 0.012698888778686523s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.2951965332031s cumulative, 0.009980440139770508s individual

.
current test PASSED/SKIPPED -- test_invalid_args_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.3044788837433s cumulative, 0.009282350540161133s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.3110990524292s cumulative, 0.006620168685913086s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.31590962409973s cumulative, 0.0048105716705322266s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.32450318336487s cumulative, 0.008593559265136719s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.3318111896515s cumulative, 0.007308006286621094s individual

.
current test PASSED/SKIPPED -- test_invalid_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.33954071998596s cumulative, 0.007729530334472656s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.3477373123169s cumulative, 0.008196592330932617s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.3586366176605s cumulative, 0.01089930534362793s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.3646237850189s cumulative, 0.0059871673583984375s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.37464118003845s cumulative, 0.01001739501953125s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.3853950500488s cumulative, 0.010753870010375977s individual

.
current test PASSED/SKIPPED -- test_lifo_negative in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.4217517375946s cumulative, 0.03635668754577637s individual

.
current test PASSED/SKIPPED -- test_lifo in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.44458508491516s cumulative, 0.02283334732055664s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.4583158493042s cumulative, 0.013730764389038086s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.4696464538574s cumulative, 0.011330604553222656s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.4806523323059s cumulative, 0.011005878448486328s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.4931972026825s cumulative, 0.012544870376586914s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.50303840637207s cumulative, 0.009841203689575195s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.5147867202759s cumulative, 0.011748313903808594s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.5344820022583s cumulative, 0.019695281982421875s individual

.
current test PASSED/SKIPPED -- test_invalid_args_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.5501284599304s cumulative, 0.01564645767211914s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.57576060295105s cumulative, 0.025632143020629883s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.5887496471405s cumulative, 0.012989044189453125s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.59890365600586s cumulative, 0.010154008865356445s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.6082148551941s cumulative, 0.009311199188232422s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.62423515319824s cumulative, 0.01602029800415039s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.6342103481293s cumulative, 0.009975194931030273s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.65141224861145s cumulative, 0.017201900482177734s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.66159892082214s cumulative, 0.01018667221069336s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.67725563049316s cumulative, 0.015656709671020508s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.68448424339294s cumulative, 0.0072286128997802734s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.69244837760925s cumulative, 0.007964134216308594s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.69649863243103s cumulative, 0.004050254821777344s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.70108222961426s cumulative, 0.004583597183227539s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.70624566078186s cumulative, 0.005163431167602539s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.71089577674866s cumulative, 0.004650115966796875s individual

.
current test PASSED/SKIPPED -- test_downloadable_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.71569442749023s cumulative, 0.0047986507415771484s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.72510409355164s cumulative, 0.009409666061401367s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.73661851882935s cumulative, 0.011514425277709961s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.74882912635803s cumulative, 0.012210607528686523s individual

.
current test PASSED/SKIPPED -- test_invalid_args_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.7564857006073s cumulative, 0.007656574249267578s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.7612648010254s cumulative, 0.00477910041809082s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.772901058197s cumulative, 0.01163625717163086s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.7843587398529s cumulative, 0.011457681655883789s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.7956645488739s cumulative, 0.011305809020996094s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.80347442626953s cumulative, 0.007809877395629883s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.8267660140991s cumulative, 0.023291587829589844s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.83504939079285s cumulative, 0.008283376693725586s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.85028767585754s cumulative, 0.015238285064697266s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.8550877571106s cumulative, 0.004800081253051758s individual

.
current test PASSED/SKIPPED -- test_invalid_args_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.8597466945648s cumulative, 0.004658937454223633s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.8637709617615s cumulative, 0.0040242671966552734s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.8685247898102s cumulative, 0.004753828048706055s individual

.
current test PASSED/SKIPPED -- test_lifo_negative in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.8762493133545s cumulative, 0.0077245235443115234s individual

.
current test PASSED/SKIPPED -- test_invalid_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.8804793357849s cumulative, 0.004230022430419922s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.88649821281433s cumulative, 0.006018877029418945s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.89196848869324s cumulative, 0.00547027587890625s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.8960576057434s cumulative, 0.0040891170501708984s individual

.
current test PASSED/SKIPPED -- test_pathlib_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.9001655578613s cumulative, 0.004107952117919922s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.90825510025024s cumulative, 0.008089542388916016s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.9117088317871s cumulative, 0.0034537315368652344s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.91980504989624s cumulative, 0.00809621810913086s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.92397713661194s cumulative, 0.004172086715698242s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.9277844429016s cumulative, 0.0038073062896728516s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.9314525127411s cumulative, 0.003668069839477539s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.93938398361206s cumulative, 0.00793147087097168s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.9435555934906s cumulative, 0.004171609878540039s individual

.
current test PASSED/SKIPPED -- test_file_closed in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.949346780777s cumulative, 0.005791187286376953s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.954496383667s cumulative, 0.0051496028900146484s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.95990920066833s cumulative, 0.0054128170013427734s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.9647283554077s cumulative, 0.004819154739379883s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.9703178405762s cumulative, 0.005589485168457031s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.97493600845337s cumulative, 0.004618167877197266s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.9783191680908s cumulative, 0.003383159637451172s individual

.
current test PASSED/SKIPPED -- test_downloadable in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.9889543056488s cumulative, 0.010635137557983398s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.99307465553284s cumulative, 0.004120349884033203s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 495.99892377853394s cumulative, 0.005849123001098633s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.0029056072235s cumulative, 0.003981828689575195s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.0085904598236s cumulative, 0.005684852600097656s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.01266741752625s cumulative, 0.004076957702636719s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.01918292045593s cumulative, 0.0065155029296875s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.03191661834717s cumulative, 0.012733697891235352s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.0386092662811s cumulative, 0.006692647933959961s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.0474889278412s cumulative, 0.008879661560058594s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.05298805236816s cumulative, 0.005499124526977539s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.0591824054718s cumulative, 0.006194353103637695s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.0638723373413s cumulative, 0.004689931869506836s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.06878447532654s cumulative, 0.004912137985229492s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.0725073814392s cumulative, 0.0037229061126708984s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.077271938324s cumulative, 0.004764556884765625s individual

.
current test PASSED/SKIPPED -- test_filesystem_traversal_fuse in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.0827293395996s cumulative, 0.005457401275634766s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.086416721344s cumulative, 0.0036873817443847656s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.09181213378906s cumulative, 0.005395412445068359s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.09579968452454s cumulative, 0.003987550735473633s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.10126185417175s cumulative, 0.005462169647216797s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.1074357032776s cumulative, 0.006173849105834961s individual

.
current test PASSED/SKIPPED -- test_filesystem_traversal_fuse in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.112708568573s cumulative, 0.005272865295410156s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.1179234981537s cumulative, 0.0052149295806884766s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.12543630599976s cumulative, 0.007512807846069336s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.129629611969s cumulative, 0.004193305969238281s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.1373989582062s cumulative, 0.007769346237182617s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.1411609649658s cumulative, 0.0037620067596435547s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.14790987968445s cumulative, 0.00674891471862793s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.1524124145508s cumulative, 0.004502534866333008s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.1578059196472s cumulative, 0.005393505096435547s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.163024187088s cumulative, 0.0052182674407958984s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.17040944099426s cumulative, 0.00738525390625s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.17383575439453s cumulative, 0.0034263134002685547s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.1789801120758s cumulative, 0.005144357681274414s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.18252778053284s cumulative, 0.00354766845703125s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.1861824989319s cumulative, 0.0036547183990478516s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.1921696662903s cumulative, 0.0059871673583984375s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.19592452049255s cumulative, 0.003754854202270508s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.20331597328186s cumulative, 0.007391452789306641s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.2070589065552s cumulative, 0.0037429332733154297s individual

.
current test PASSED/SKIPPED -- test_downloadable in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.21320390701294s cumulative, 0.006145000457763672s individual

.
current test PASSED/SKIPPED -- test_bounded_file_wrapper in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.21602058410645s cumulative, 0.0028166770935058594s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.22131538391113s cumulative, 0.0052947998046875s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.22760105133057s cumulative, 0.006285667419433594s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.23117423057556s cumulative, 0.003573179244995117s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.23488187789917s cumulative, 0.0037076473236083984s individual

.
current test PASSED/SKIPPED -- test_pathlib_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.2400007247925s cumulative, 0.005118846893310547s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.2455167770386s cumulative, 0.00551605224609375s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.2493898868561s cumulative, 0.003873109817504883s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.255765914917s cumulative, 0.006376028060913086s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.2623770236969s cumulative, 0.0066111087799072266s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.26706075668335s cumulative, 0.004683732986450195s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.2740092277527s cumulative, 0.0069484710693359375s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.2785656452179s cumulative, 0.004556417465209961s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.28558921813965s cumulative, 0.00702357292175293s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.2912585735321s cumulative, 0.005669355392456055s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.29748463630676s cumulative, 0.006226062774658203s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.3012502193451s cumulative, 0.003765583038330078s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.305002450943s cumulative, 0.0037522315979003906s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.3100199699402s cumulative, 0.005017518997192383s individual

.
current test PASSED/SKIPPED -- test_invalid_args_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.3156099319458s cumulative, 0.005589962005615234s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.32346653938293s cumulative, 0.007856607437133789s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.32850766181946s cumulative, 0.0050411224365234375s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.3341248035431s cumulative, 0.0056171417236328125s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.33844542503357s cumulative, 0.004320621490478516s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.34304189682007s cumulative, 0.0045964717864990234s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.3510720729828s cumulative, 0.008030176162719727s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.3649170398712s cumulative, 0.013844966888427734s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.37511706352234s cumulative, 0.010200023651123047s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.38211965560913s cumulative, 0.007002592086791992s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.38590455055237s cumulative, 0.0037848949432373047s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.3897385597229s cumulative, 0.0038340091705322266s individual

.
current test PASSED/SKIPPED -- test_invalid_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.3943521976471s cumulative, 0.004613637924194336s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.4001479148865s cumulative, 0.005795717239379883s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.40894174575806s cumulative, 0.008793830871582031s individual

.
current test PASSED/SKIPPED -- test_invalid_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.41348123550415s cumulative, 0.00453948974609375s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.4193422794342s cumulative, 0.005861043930053711s individual

.
current test PASSED/SKIPPED -- test_invalid_args_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.426335811615s cumulative, 0.006993532180786133s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.4345192909241s cumulative, 0.008183479309082031s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.4455461502075s cumulative, 0.011026859283447266s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.4501452445984s cumulative, 0.004599094390869141s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.4538321495056s cumulative, 0.0036869049072265625s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.4607102870941s cumulative, 0.0068781375885009766s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.4663977622986s cumulative, 0.0056874752044677734s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.4754550457001s cumulative, 0.009057283401489258s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.4825782775879s cumulative, 0.007123231887817383s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.49282217025757s cumulative, 0.010243892669677734s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.4987897872925s cumulative, 0.005967617034912109s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.5116684436798s cumulative, 0.012878656387329102s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.5231878757477s cumulative, 0.011519432067871094s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.53542852401733s cumulative, 0.01224064826965332s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.5465655326843s cumulative, 0.011137008666992188s individual

.
current test PASSED/SKIPPED -- test_invalid_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.55137491226196s cumulative, 0.004809379577636719s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.5569746494293s cumulative, 0.0055997371673583984s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.56439185142517s cumulative, 0.007417201995849609s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.5716052055359s cumulative, 0.0072133541107177734s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.5766441822052s cumulative, 0.0050389766693115234s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.585857629776s cumulative, 0.009213447570800781s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.58998465538025s cumulative, 0.004127025604248047s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.5966172218323s cumulative, 0.006632566452026367s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.60401701927185s cumulative, 0.007399797439575195s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.6099531650543s cumulative, 0.005936145782470703s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.61518597602844s cumulative, 0.005232810974121094s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.6213939189911s cumulative, 0.006207942962646484s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.62521600723267s cumulative, 0.0038220882415771484s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.6353521347046s cumulative, 0.010136127471923828s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.6411964893341s cumulative, 0.0058443546295166016s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.6481354236603s cumulative, 0.006938934326171875s individual

.
current test PASSED/SKIPPED -- test_lifo in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.6555588245392s cumulative, 0.00742340087890625s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.66465163230896s cumulative, 0.00909280776977539s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.6696689128876s cumulative, 0.005017280578613281s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.6746129989624s cumulative, 0.0049440860748291016s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.68717074394226s cumulative, 0.012557744979858398s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.69681000709534s cumulative, 0.009639263153076172s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.70166277885437s cumulative, 0.004852771759033203s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.7065997123718s cumulative, 0.004936933517456055s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.7153973579407s cumulative, 0.008797645568847656s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.72511863708496s cumulative, 0.00972127914428711s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.7293703556061s cumulative, 0.004251718521118164s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.73723816871643s cumulative, 0.007867813110351562s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.74878454208374s cumulative, 0.01154637336730957s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.7532043457031s cumulative, 0.004419803619384766s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.7627696990967s cumulative, 0.009565353393554688s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.7694184780121s cumulative, 0.0066487789154052734s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.773312330246s cumulative, 0.0038938522338867188s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.7792751789093s cumulative, 0.005962848663330078s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.7925798892975s cumulative, 0.013304710388183594s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.797780752182s cumulative, 0.005200862884521484s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.8072636127472s cumulative, 0.009482860565185547s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.8140068054199s cumulative, 0.006743192672729492s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.8180236816406s cumulative, 0.004016876220703125s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.82296323776245s cumulative, 0.004939556121826172s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.8283791542053s cumulative, 0.005415916442871094s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.83855676651s cumulative, 0.0101776123046875s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.85327911376953s cumulative, 0.014722347259521484s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.863121509552s cumulative, 0.009842395782470703s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.8683533668518s cumulative, 0.0052318572998046875s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.87716579437256s cumulative, 0.008812427520751953s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.88430523872375s cumulative, 0.007139444351196289s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.8883352279663s cumulative, 0.004029989242553711s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.89575815200806s cumulative, 0.007422924041748047s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.9074823856354s cumulative, 0.011724233627319336s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.9133234024048s cumulative, 0.00584101676940918s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.9198260307312s cumulative, 0.006502628326416016s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.9426727294922s cumulative, 0.022846698760986328s individual

.
current test PASSED/SKIPPED -- test_downloadable_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.9527895450592s cumulative, 0.010116815567016602s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.96023774147034s cumulative, 0.0074481964111328125s individual

.
current test PASSED/SKIPPED -- test_invalid_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.96524834632874s cumulative, 0.0050106048583984375s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.9714951515198s cumulative, 0.006246805191040039s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.9758810997009s cumulative, 0.004385948181152344s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.9838013648987s cumulative, 0.007920265197753906s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.9913241863251s cumulative, 0.0075228214263916016s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 496.99628376960754s cumulative, 0.004959583282470703s individual

.
current test PASSED/SKIPPED -- test_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 497.00294256210327s cumulative, 0.006658792495727539s individual

.
current test PASSED/SKIPPED -- test_e2e_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 497.0161690711975s cumulative, 0.013226509094238281s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 497.0219383239746s cumulative, 0.005769252777099609s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 497.0331633090973s cumulative, 0.011224985122680664s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 497.03871273994446s cumulative, 0.005549430847167969s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 497.0458822250366s cumulative, 0.007169485092163086s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 497.05282950401306s cumulative, 0.00694727897644043s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 497.05946016311646s cumulative, 0.006630659103393555s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 497.06936621665955s cumulative, 0.00990605354309082s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 497.07594895362854s cumulative, 0.006582736968994141s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 497.09525847435s cumulative, 0.019309520721435547s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 497.1025149822235s cumulative, 0.007256507873535156s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 497.1078381538391s cumulative, 0.005323171615600586s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 497.11321806907654s cumulative, 0.005379915237426758s individual

.
current test PASSED/SKIPPED -- test_match in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 497.11740708351135s cumulative, 0.004189014434814453s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 497.12354135513306s cumulative, 0.0061342716217041016s individual

.
current test PASSED/SKIPPED -- test_invalid_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 497.1300368309021s cumulative, 0.006495475769042969s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 497.1412019729614s cumulative, 0.011165142059326172s individual

.
current test PASSED/SKIPPED -- test_fallback_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 497.15723180770874s cumulative, 0.016029834747314453s individual

.
current test PASSED/SKIPPED -- test_good_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 497.1728048324585s cumulative, 0.01557302474975586s individual

.
current test PASSED/SKIPPED -- test_range_request_zero_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 497.19949769973755s cumulative, 0.026692867279052734s individual

.
current test PASSED/SKIPPED -- test_invalid_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 497.2134244441986s cumulative, 0.01392674446105957s individual

.
current test PASSED/SKIPPED -- test_bad_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 497.22805619239807s cumulative, 0.01463174819946289s individual

.
current test PASSED/SKIPPED -- test_bad_range_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_static.py: 497.25064730644226s cumulative, 0.022591114044189453s individual


tests/test_deprecations.py .
current test PASSED/SKIPPED -- test_bounded_stream in /home/kaiyaok2/PythonProjects/falcon/tests/test_deprecations.py: 497.2602791786194s cumulative, 0.009631872177124023s individual


tests/test_uri_converters.py .
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.26851534843445s cumulative, 0.008236169815063477s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.2779932022095s cumulative, 0.009477853775024414s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.29027009010315s cumulative, 0.012276887893676758s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.29838037490845s cumulative, 0.008110284805297852s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.30548119544983s cumulative, 0.007100820541381836s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.3125386238098s cumulative, 0.0070574283599853516s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.31618213653564s cumulative, 0.003643512725830078s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.3196086883545s cumulative, 0.0034265518188476562s individual

.
current test PASSED/SKIPPED -- test_int_converter_invalid_config in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.3244876861572s cumulative, 0.004878997802734375s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.3287477493286s cumulative, 0.004260063171386719s individual

.
current test PASSED/SKIPPED -- test_datetime_converter_default_format in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.3382828235626s cumulative, 0.009535074234008789s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.34224033355713s cumulative, 0.003957509994506836s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.3457646369934s cumulative, 0.003524303436279297s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.35018968582153s cumulative, 0.004425048828125s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.3533959388733s cumulative, 0.0032062530517578125s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.35726976394653s cumulative, 0.0038738250732421875s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.3607234954834s cumulative, 0.0034537315368652344s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.36582040786743s cumulative, 0.005096912384033203s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.3688383102417s cumulative, 0.003017902374267578s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.3725309371948s cumulative, 0.003692626953125s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.37563371658325s cumulative, 0.0031027793884277344s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.3787143230438s cumulative, 0.003080606460571289s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.3820323944092s cumulative, 0.0033180713653564453s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.3855211734772s cumulative, 0.003488779067993164s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.38845133781433s cumulative, 0.002930164337158203s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.39167499542236s cumulative, 0.0032236576080322266s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.39723777770996s cumulative, 0.005562782287597656s individual

.
current test PASSED/SKIPPED -- test_int_converter_invalid_config in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.4006676673889s cumulative, 0.003429889678955078s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.4041600227356s cumulative, 0.0034923553466796875s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.4070589542389s cumulative, 0.0028989315032958984s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.4129726886749s cumulative, 0.005913734436035156s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.41604924201965s cumulative, 0.0030765533447265625s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.41946053504944s cumulative, 0.0034112930297851562s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.4224262237549s cumulative, 0.002965688705444336s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.42593026161194s cumulative, 0.003504037857055664s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.4294898509979s cumulative, 0.003559589385986328s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.43250370025635s cumulative, 0.0030138492584228516s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.43538641929626s cumulative, 0.002882719039916992s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.43971943855286s cumulative, 0.004333019256591797s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.44293332099915s cumulative, 0.0032138824462890625s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.4465301036835s cumulative, 0.003596782684326172s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.4502704143524s cumulative, 0.0037403106689453125s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.45387172698975s cumulative, 0.0036013126373291016s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.457049369812s cumulative, 0.003177642822265625s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.46056056022644s cumulative, 0.003511190414428711s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.463650226593s cumulative, 0.0030896663665771484s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.46758103370667s cumulative, 0.003930807113647461s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.471314907074s cumulative, 0.0037338733673095703s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.4742603302002s cumulative, 0.002945423126220703s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.47734665870667s cumulative, 0.0030863285064697266s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.48044753074646s cumulative, 0.003100872039794922s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.485253572464s cumulative, 0.004806041717529297s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.48821663856506s cumulative, 0.0029630661010742188s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.49144434928894s cumulative, 0.003227710723876953s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.4952528476715s cumulative, 0.0038084983825683594s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.4986367225647s cumulative, 0.0033838748931884766s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.5022234916687s cumulative, 0.0035867691040039062s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.50585079193115s cumulative, 0.003627300262451172s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.5087773799896s cumulative, 0.0029265880584716797s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.5120921134949s cumulative, 0.0033147335052490234s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.51488184928894s cumulative, 0.002789735794067383s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.51837491989136s cumulative, 0.003493070602416992s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.5218663215637s cumulative, 0.0034914016723632812s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.5249888896942s cumulative, 0.003122568130493164s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.52863121032715s cumulative, 0.0036423206329345703s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.5321350097656s cumulative, 0.0035037994384765625s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.53528594970703s cumulative, 0.00315093994140625s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.53877544403076s cumulative, 0.0034894943237304688s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.5419862270355s cumulative, 0.003210783004760742s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.545503616333s cumulative, 0.0035173892974853516s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.5487229824066s cumulative, 0.0032193660736083984s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.5520043373108s cumulative, 0.0032813549041748047s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.5552513599396s cumulative, 0.0032470226287841797s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.5588719844818s cumulative, 0.003620624542236328s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.5619304180145s cumulative, 0.0030584335327148438s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.56496000289917s cumulative, 0.0030295848846435547s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.5680482387543s cumulative, 0.003088235855102539s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.5710744857788s cumulative, 0.003026247024536133s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.574334859848s cumulative, 0.003260374069213867s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.57779264450073s cumulative, 0.003457784652709961s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.5816035270691s cumulative, 0.003810882568359375s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.58497738838196s cumulative, 0.003373861312866211s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.58821654319763s cumulative, 0.003239154815673828s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.5918297767639s cumulative, 0.0036132335662841797s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.59498143196106s cumulative, 0.0031516551971435547s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.5985300540924s cumulative, 0.0035486221313476562s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.60155844688416s cumulative, 0.003028392791748047s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.6051163673401s cumulative, 0.003557920455932617s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.60873913764954s cumulative, 0.003622770309448242s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.61209869384766s cumulative, 0.003359556198120117s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.6155664920807s cumulative, 0.0034677982330322266s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.6192991733551s cumulative, 0.0037326812744140625s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.62230801582336s cumulative, 0.0030088424682617188s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.625292301178s cumulative, 0.002984285354614258s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.6284863948822s cumulative, 0.003194093704223633s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.6315140724182s cumulative, 0.003027677536010742s individual

.
current test PASSED/SKIPPED -- test_int_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.63476037979126s cumulative, 0.003246307373046875s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.63817596435547s cumulative, 0.0034155845642089844s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.64143323898315s cumulative, 0.003257274627685547s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.64437532424927s cumulative, 0.0029420852661132812s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.6482021808624s cumulative, 0.0038268566131591797s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.6514563560486s cumulative, 0.0032541751861572266s individual

.
current test PASSED/SKIPPED -- test_float_converter_malformed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.6545042991638s cumulative, 0.003047943115234375s individual

.
current test PASSED/SKIPPED -- test_int_converter_invalid_config in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.6576237678528s cumulative, 0.0031194686889648438s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.6611428260803s cumulative, 0.0035190582275390625s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.6648166179657s cumulative, 0.0036737918853759766s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.6684401035309s cumulative, 0.003623485565185547s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.6724193096161s cumulative, 0.003979206085205078s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.67587637901306s cumulative, 0.0034570693969726562s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.67919063568115s cumulative, 0.0033142566680908203s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.6842017173767s cumulative, 0.005011081695556641s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_converters.py: 497.68792390823364s cumulative, 0.0037221908569335938s individual


tests/test_media_handlers.py .
current test PASSED/SKIPPED -- test_deserialization_raises in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 497.69866490364075s cumulative, 0.010740995407104492s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 497.7043192386627s cumulative, 0.005654335021972656s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 497.7136752605438s cumulative, 0.009356021881103516s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 497.74056816101074s cumulative, 0.026892900466918945s individual

.
current test PASSED/SKIPPED -- test_deserialization_raises in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 497.75021982192993s cumulative, 0.009651660919189453s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 497.75672364234924s cumulative, 0.0065038204193115234s individual

.
current test PASSED/SKIPPED -- test_deserialization_raises in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 497.7707839012146s cumulative, 0.014060258865356445s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 497.77468633651733s cumulative, 0.003902435302734375s individual

.
current test PASSED/SKIPPED -- test_sync_methods_not_overridden in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 497.79051756858826s cumulative, 0.01583123207092285s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 497.798410654068s cumulative, 0.007893085479736328s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 497.8023581504822s cumulative, 0.00394749641418457s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 497.80701088905334s cumulative, 0.004652738571166992s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 497.81086564064026s cumulative, 0.0038547515869140625s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 497.82684087753296s cumulative, 0.015975236892700195s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 497.8349099159241s cumulative, 0.008069038391113281s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 497.8570156097412s cumulative, 0.022105693817138672s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 497.8614435195923s cumulative, 0.004427909851074219s individual

.
current test PASSED/SKIPPED -- test_json_err_no_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 497.8696970939636s cumulative, 0.00825357437133789s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 497.87331366539s cumulative, 0.0036165714263916016s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 497.887708902359s cumulative, 0.01439523696899414s individual

.
current test PASSED/SKIPPED -- test_json_err_no_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 497.89488077163696s cumulative, 0.0071718692779541016s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 497.8986587524414s cumulative, 0.0037779808044433594s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 497.90283131599426s cumulative, 0.004172563552856445s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 497.91520595550537s cumulative, 0.012374639511108398s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 497.91870498657227s cumulative, 0.0034990310668945312s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 497.9223561286926s cumulative, 0.003651142120361328s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 497.92592692375183s cumulative, 0.0035707950592041016s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 497.9374008178711s cumulative, 0.011473894119262695s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 497.94149923324585s cumulative, 0.004098415374755859s individual

.
current test PASSED/SKIPPED -- test_deserialization_raises in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 497.95265102386475s cumulative, 0.011151790618896484s individual

.
current test PASSED/SKIPPED -- test_deserialization_raises in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 497.9598071575165s cumulative, 0.0071561336517333984s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 497.9666578769684s cumulative, 0.006850719451904297s individual

.
current test PASSED/SKIPPED -- test_deserialization_raises in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 497.973269701004s cumulative, 0.006611824035644531s individual

.
current test PASSED/SKIPPED -- test_async_methods_not_overridden in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 497.98050117492676s cumulative, 0.007231473922729492s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 497.9877235889435s cumulative, 0.007222414016723633s individual

.
current test PASSED/SKIPPED -- test_async_handler_returning_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 497.9941279888153s cumulative, 0.006404399871826172s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 498.00032782554626s cumulative, 0.006199836730957031s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 498.0063498020172s cumulative, 0.006021976470947266s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 498.0131392478943s cumulative, 0.006789445877075195s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 498.0190303325653s cumulative, 0.005891084671020508s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 498.0271050930023s cumulative, 0.008074760437011719s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 498.0340025424957s cumulative, 0.006897449493408203s individual

.
current test PASSED/SKIPPED -- test_deserialization_raises in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 498.04206919670105s cumulative, 0.008066654205322266s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 498.0510902404785s cumulative, 0.00902104377746582s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 498.05523109436035s cumulative, 0.0041408538818359375s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 498.0597403049469s cumulative, 0.0045092105865478516s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 498.0655937194824s cumulative, 0.005853414535522461s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 498.069189786911s cumulative, 0.003596067428588867s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 498.0756072998047s cumulative, 0.006417512893676758s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 498.07952761650085s cumulative, 0.003920316696166992s individual

.
current test PASSED/SKIPPED -- test_defaultError in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 498.0824863910675s cumulative, 0.0029587745666503906s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 498.0865535736084s cumulative, 0.004067182540893555s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 498.0950176715851s cumulative, 0.00846409797668457s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 498.0988018512726s cumulative, 0.0037841796875s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 498.1022951602936s cumulative, 0.0034933090209960938s individual

.
current test PASSED/SKIPPED -- test_deserialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 498.1076726913452s cumulative, 0.005377531051635742s individual

.
current test PASSED/SKIPPED -- test_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 498.12395572662354s cumulative, 0.016283035278320312s individual

.
current test PASSED/SKIPPED -- test_deserialization_raises in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 498.13448309898376s cumulative, 0.010527372360229492s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 498.1429467201233s cumulative, 0.008463621139526367s individual

.
current test PASSED/SKIPPED -- test_full_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 498.15611815452576s cumulative, 0.01317143440246582s individual

.
current test PASSED/SKIPPED -- test_sync_methods_not_overridden in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 498.1700613498688s cumulative, 0.013943195343017578s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 498.174521446228s cumulative, 0.00446009635925293s individual


tests/test_uri_templates.py .
current test PASSED/SKIPPED -- test_int_converter_rejections in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.1836702823639s cumulative, 0.009148836135864258s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.19276762008667s cumulative, 0.00909733772277832s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.1999933719635s cumulative, 0.007225751876831055s individual

.
current test PASSED/SKIPPED -- test_converter_custom in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.21023082733154s cumulative, 0.010237455368041992s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.2194890975952s cumulative, 0.009258270263671875s individual

.
current test PASSED/SKIPPED -- test_root_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.225919008255s cumulative, 0.006429910659790039s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.2321557998657s cumulative, 0.0062367916107177734s individual

.
current test PASSED/SKIPPED -- test_with_and_without_trailing_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.24486565589905s cumulative, 0.012709856033325195s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.2517330646515s cumulative, 0.006867408752441406s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.2600328922272s cumulative, 0.008299827575683594s individual

.
current test PASSED/SKIPPED -- test_uuid_converter_complex_segment in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.2693474292755s cumulative, 0.009314537048339844s individual

.
current test PASSED/SKIPPED -- test_single in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.27579402923584s cumulative, 0.0064465999603271484s individual

.
current test PASSED/SKIPPED -- test_no_vars in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.28180861473083s cumulative, 0.006014585494995117s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.29146027565s cumulative, 0.009651660919189453s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.3012673854828s cumulative, 0.009807109832763672s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.3090879917145s cumulative, 0.007820606231689453s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.31603598594666s cumulative, 0.006947994232177734s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.32430148124695s cumulative, 0.008265495300292969s individual

.
current test PASSED/SKIPPED -- test_converter_custom in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.33198833465576s cumulative, 0.0076868534088134766s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.3395080566406s cumulative, 0.007519721984863281s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.3473505973816s cumulative, 0.007842540740966797s individual

.
current test PASSED/SKIPPED -- test_single in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.3533835411072s cumulative, 0.0060329437255859375s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.359251499176s cumulative, 0.005867958068847656s individual

.
current test PASSED/SKIPPED -- test_single_path_segment in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.3651444911957s cumulative, 0.00589299201965332s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.37060618400574s cumulative, 0.005461692810058594s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.3761696815491s cumulative, 0.005563497543334961s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.382390499115s cumulative, 0.006220817565917969s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.38834500312805s cumulative, 0.0059545040130615234s individual

.
current test PASSED/SKIPPED -- test_int_converter_rejections in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.39403796195984s cumulative, 0.005692958831787109s individual

.
current test PASSED/SKIPPED -- test_int_converter_rejections in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.40055418014526s cumulative, 0.006516218185424805s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.4089946746826s cumulative, 0.008440494537353516s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.4145028591156s cumulative, 0.0055081844329833984s individual

.
current test PASSED/SKIPPED -- test_same_level_complex_var in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.4243013858795s cumulative, 0.009798526763916016s individual

.
current test PASSED/SKIPPED -- test_multiple in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.4312515258789s cumulative, 0.0069501399993896484s individual

.
current test PASSED/SKIPPED -- test_single_trailing_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.445387840271s cumulative, 0.014136314392089844s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.45191645622253s cumulative, 0.006528615951538086s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.4570062160492s cumulative, 0.005089759826660156s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.4651908874512s cumulative, 0.008184671401977539s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.47149419784546s cumulative, 0.006303310394287109s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.47877168655396s cumulative, 0.007277488708496094s individual

.
current test PASSED/SKIPPED -- test_single in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.48591327667236s cumulative, 0.007141590118408203s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.4957871437073s cumulative, 0.00987386703491211s individual

.
current test PASSED/SKIPPED -- test_adding_suffix_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.5065002441406s cumulative, 0.01071310043334961s individual

.
current test PASSED/SKIPPED -- test_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.51478028297424s cumulative, 0.008280038833618164s individual

.
current test PASSED/SKIPPED -- test_converter_custom in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.5214698314667s cumulative, 0.006689548492431641s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.5280501842499s cumulative, 0.006580352783203125s individual

.
current test PASSED/SKIPPED -- test_same_level_complex_var in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.53504753112793s cumulative, 0.006997346878051758s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.5444383621216s cumulative, 0.009390830993652344s individual

.
current test PASSED/SKIPPED -- test_with_and_without_trailing_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.5577127933502s cumulative, 0.013274431228637695s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.57144141197205s cumulative, 0.013728618621826172s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.58021068573s cumulative, 0.00876927375793457s individual


tests/test_things_example.py .
current test PASSED/SKIPPED -- test_things_resource_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_things_example.py: 498.5857229232788s cumulative, 0.005512237548828125s individual


tests/test_uri_templates.py .
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.59246850013733s cumulative, 0.006745576858520508s individual

.
current test PASSED/SKIPPED -- test_empty_path_component in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.5968747138977s cumulative, 0.0044062137603759766s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.603143453598s cumulative, 0.006268739700317383s individual

.
current test PASSED/SKIPPED -- test_multiple in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.61026215553284s cumulative, 0.007118701934814453s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.6204881668091s cumulative, 0.010226011276245117s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.6300940513611s cumulative, 0.009605884552001953s individual

.
current test PASSED/SKIPPED -- test_root_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.63914680480957s cumulative, 0.009052753448486328s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.6500041484833s cumulative, 0.010857343673706055s individual

.
current test PASSED/SKIPPED -- test_empty_path_component in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.65736198425293s cumulative, 0.00735783576965332s individual

.
current test PASSED/SKIPPED -- test_adding_suffix_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.67878460884094s cumulative, 0.021422624588012695s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.68599009513855s cumulative, 0.007205486297607422s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.69175839424133s cumulative, 0.005768299102783203s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.69818234443665s cumulative, 0.0064239501953125s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.7042021751404s cumulative, 0.0060198307037353516s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.71354627609253s cumulative, 0.009344100952148438s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.72042536735535s cumulative, 0.006879091262817383s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.7277204990387s cumulative, 0.007295131683349609s individual

.
current test PASSED/SKIPPED -- test_converter_custom in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.7363328933716s cumulative, 0.008612394332885742s individual

.
current test PASSED/SKIPPED -- test_single_path_segment in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.74226331710815s cumulative, 0.005930423736572266s individual

.
current test PASSED/SKIPPED -- test_no_vars in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.75198793411255s cumulative, 0.009724617004394531s individual

.
current test PASSED/SKIPPED -- test_single_trailing_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.7686414718628s cumulative, 0.01665353775024414s individual

.
current test PASSED/SKIPPED -- test_converter_custom in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.78456711769104s cumulative, 0.01592564582824707s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.79351806640625s cumulative, 0.008950948715209961s individual

.
current test PASSED/SKIPPED -- test_same_level_complex_var in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.80217695236206s cumulative, 0.008658885955810547s individual

.
current test PASSED/SKIPPED -- test_uuid_converter_complex_segment in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.80987906455994s cumulative, 0.0077021121978759766s individual

.
current test PASSED/SKIPPED -- test_single in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.8171648979187s cumulative, 0.0072858333587646484s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.82365894317627s cumulative, 0.006494045257568359s individual

.
current test PASSED/SKIPPED -- test_relative_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.82803606987s cumulative, 0.004377126693725586s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.83406162261963s cumulative, 0.006025552749633789s individual

.
current test PASSED/SKIPPED -- test_empty_path_component in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.8385627269745s cumulative, 0.0045011043548583984s individual

.
current test PASSED/SKIPPED -- test_with_and_without_trailing_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.8495879173279s cumulative, 0.011025190353393555s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.85733819007874s cumulative, 0.007750272750854492s individual

.
current test PASSED/SKIPPED -- test_single in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.86402463912964s cumulative, 0.00668644905090332s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.8726909160614s cumulative, 0.008666276931762695s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.88072085380554s cumulative, 0.008029937744140625s individual

.
current test PASSED/SKIPPED -- test_relative_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.88810181617737s cumulative, 0.007380962371826172s individual

.
current test PASSED/SKIPPED -- test_custom_error_on_suffix_route_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.89305305480957s cumulative, 0.0049512386322021484s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.9027490615845s cumulative, 0.009696006774902344s individual

.
current test PASSED/SKIPPED -- test_relative_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.9074454307556s cumulative, 0.004696369171142578s individual

.
current test PASSED/SKIPPED -- test_empty_path_component in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.9142153263092s cumulative, 0.006769895553588867s individual

.
current test PASSED/SKIPPED -- test_same_level_complex_var in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.92646646499634s cumulative, 0.012251138687133789s individual

.
current test PASSED/SKIPPED -- test_converter_custom in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.93378233909607s cumulative, 0.007315874099731445s individual

.
current test PASSED/SKIPPED -- test_empty_path_component in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.9396901130676s cumulative, 0.005907773971557617s individual

.
current test PASSED/SKIPPED -- test_single in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.9497938156128s cumulative, 0.010103702545166016s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.9647789001465s cumulative, 0.014985084533691406s individual

.
current test PASSED/SKIPPED -- test_with_and_without_trailing_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.98255705833435s cumulative, 0.01777815818786621s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 498.9936683177948s cumulative, 0.011111259460449219s individual

.
current test PASSED/SKIPPED -- test_float_converter_non_finite_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 499.00441694259644s cumulative, 0.010748624801635742s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 499.0148365497589s cumulative, 0.010419607162475586s individual

.
current test PASSED/SKIPPED -- test_int_converter_rejections in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 499.0234396457672s cumulative, 0.008603096008300781s individual

.
current test PASSED/SKIPPED -- test_empty_path_component in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 499.0300359725952s cumulative, 0.00659632682800293s individual

.
current test PASSED/SKIPPED -- test_datetime_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 499.0749235153198s cumulative, 0.044887542724609375s individual

.
current test PASSED/SKIPPED -- test_relative_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 499.08562421798706s cumulative, 0.010700702667236328s individual

.
current test PASSED/SKIPPED -- test_relative_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 499.0956115722656s cumulative, 0.009987354278564453s individual

.
current test PASSED/SKIPPED -- test_int_converter_rejections in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 499.11137986183167s cumulative, 0.01576828956604004s individual

.
current test PASSED/SKIPPED -- test_relative_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 499.12148213386536s cumulative, 0.010102272033691406s individual

.
current test PASSED/SKIPPED -- test_custom_error_on_suffix_route_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 499.12959575653076s cumulative, 0.008113622665405273s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 499.1455702781677s cumulative, 0.01597452163696289s individual

.
current test PASSED/SKIPPED -- test_empty_path_component in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 499.1522009372711s cumulative, 0.006630659103393555s individual

.
current test PASSED/SKIPPED -- test_empty_path_component in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 499.16068267822266s cumulative, 0.008481740951538086s individual

.
current test PASSED/SKIPPED -- test_int_converter_rejections in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 499.17800068855286s cumulative, 0.017318010330200195s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 499.19231247901917s cumulative, 0.014311790466308594s individual

.
current test PASSED/SKIPPED -- test_int_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 499.2046399116516s cumulative, 0.012327432632446289s individual

.
current test PASSED/SKIPPED -- test_float_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 499.2154417037964s cumulative, 0.01080179214477539s individual

.
current test PASSED/SKIPPED -- test_special_chars in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 499.24197816848755s cumulative, 0.02653646469116211s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 499.2579770088196s cumulative, 0.01599884033203125s individual

.
current test PASSED/SKIPPED -- test_uuid_converter in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates.py: 499.2676751613617s cumulative, 0.009698152542114258s individual


tests/asgi/test_cythonized_asgi.py .
current test PASSED/SKIPPED -- test_is_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 499.274121761322s cumulative, 0.0064465999603271484s individual

.
current test PASSED/SKIPPED -- test_is_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 499.2790632247925s cumulative, 0.004941463470458984s individual

.
current test PASSED/SKIPPED -- test_not_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 499.28320837020874s cumulative, 0.004145145416259766s individual

.
current test PASSED/SKIPPED -- test_not_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 499.2873742580414s cumulative, 0.0041658878326416016s individual

.
current test PASSED/SKIPPED -- test_is_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 499.2928397655487s cumulative, 0.005465507507324219s individual

.
current test PASSED/SKIPPED -- test_not_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 499.29785561561584s cumulative, 0.005015850067138672s individual

.
current test PASSED/SKIPPED -- test_is_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 499.30234265327454s cumulative, 0.004487037658691406s individual

.
current test PASSED/SKIPPED -- test_is_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 499.30675435066223s cumulative, 0.0044116973876953125s individual

.
current test PASSED/SKIPPED -- test_scheduled_jobs in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 499.83542823791504s cumulative, 0.5286738872528076s individual

.
current test PASSED/SKIPPED -- test_is_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 499.8427143096924s cumulative, 0.00728607177734375s individual

.
current test PASSED/SKIPPED -- test_not_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 499.85004115104675s cumulative, 0.007326841354370117s individual

.
current test PASSED/SKIPPED -- test_not_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 499.85637283325195s cumulative, 0.006331682205200195s individual

.
current test PASSED/SKIPPED -- test_scheduled_jobs_type_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 499.88042640686035s cumulative, 0.024053573608398438s individual

.
current test PASSED/SKIPPED -- test_not_cython_func in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 499.88601899147034s cumulative, 0.0055925846099853516s individual


tests/test_hello.py .
current test PASSED/SKIPPED -- test_filelike in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 499.90161752700806s cumulative, 0.015598535537719727s individual

.
current test PASSED/SKIPPED -- test_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 499.9177532196045s cumulative, 0.016135692596435547s individual

.
current test PASSED/SKIPPED -- test_stream_known_len in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 499.9293723106384s cumulative, 0.011619091033935547s individual

.
current test PASSED/SKIPPED -- test_filelike_closing in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 499.9420790672302s cumulative, 0.012706756591796875s individual

.
current test PASSED/SKIPPED -- test_status_not_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 499.95766615867615s cumulative, 0.015587091445922852s individual

.
current test PASSED/SKIPPED -- test_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 499.9708299636841s cumulative, 0.01316380500793457s individual

.
current test PASSED/SKIPPED -- test_no_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 499.9848487377167s cumulative, 0.014018774032592773s individual

.
current test PASSED/SKIPPED -- test_env_headers_list_of_tuples in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 499.9914162158966s cumulative, 0.006567478179931641s individual

.
current test PASSED/SKIPPED -- test_root_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 500.0076925754547s cumulative, 0.01627635955810547s individual

.
current test PASSED/SKIPPED -- test_filelike_using_helper in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 500.02153396606445s cumulative, 0.013841390609741211s individual

.
current test PASSED/SKIPPED -- test_filelike_closing in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 500.0417881011963s cumulative, 0.020254135131835938s individual

.
current test PASSED/SKIPPED -- test_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 500.0592031478882s cumulative, 0.01741504669189453s individual

.
current test PASSED/SKIPPED -- test_no_body_on_head in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 500.082426071167s cumulative, 0.023222923278808594s individual

.
current test PASSED/SKIPPED -- test_stream_chunked in /home/kaiyaok2/PythonProjects/falcon/tests/test_hello.py: 500.0964126586914s cumulative, 0.013986587524414062s individual


tests/test_inspect.py .
current test PASSED/SKIPPED -- test_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 500.12178111076355s cumulative, 0.025368452072143555s individual

.
current test PASSED/SKIPPED -- test_middleware_tree in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 500.16996932029724s cumulative, 0.048188209533691406s individual

.
current test PASSED/SKIPPED -- test_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 500.2166049480438s cumulative, 0.04663562774658203s individual

.
current test PASSED/SKIPPED -- test_static_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 500.2293071746826s cumulative, 0.012702226638793945s individual

.
current test PASSED/SKIPPED -- test_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 500.3158526420593s cumulative, 0.08654546737670898s individual

.
current test PASSED/SKIPPED -- test_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 500.3301875591278s cumulative, 0.014334917068481445s individual

.
current test PASSED/SKIPPED -- test_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 500.3563280105591s cumulative, 0.026140451431274414s individual


tests/asgi/test_buffered_reader.py .
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 500.3643937110901s cumulative, 0.00806570053100586s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 500.37050318717957s cumulative, 0.006109476089477539s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 500.3757064342499s cumulative, 0.0052032470703125s individual

.
current test PASSED/SKIPPED -- test_small_reads_with_delimiter in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 501.72648763656616s cumulative, 1.3507812023162842s individual

.
current test PASSED/SKIPPED -- test_irregular_large_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 507.1952130794525s cumulative, 5.4687254428863525s individual

.
current test PASSED/SKIPPED -- test_varying_read_size in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 512.8391523361206s cumulative, 5.643939256668091s individual

.
current test PASSED/SKIPPED -- test_small_reads in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 515.954644203186s cumulative, 3.1154918670654297s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 516.1334226131439s cumulative, 0.17877840995788574s individual

.
current test PASSED/SKIPPED -- test_peek in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 516.1475281715393s cumulative, 0.014105558395385742s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 516.1649837493896s cumulative, 0.017455577850341797s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 516.1750347614288s cumulative, 0.01005101203918457s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 516.1891596317291s cumulative, 0.014124870300292969s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 516.201621055603s cumulative, 0.012461423873901367s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 516.2164552211761s cumulative, 0.014834165573120117s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 516.2251074314117s cumulative, 0.008652210235595703s individual

.
current test PASSED/SKIPPED -- test_pipe in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 516.2339468002319s cumulative, 0.00883936882019043s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 516.2445337772369s cumulative, 0.010586977005004883s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 516.2591729164124s cumulative, 0.014639139175415039s individual

.
current test PASSED/SKIPPED -- test_readall in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 516.2679097652435s cumulative, 0.008736848831176758s individual

.
current test PASSED/SKIPPED -- test_delimit in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 516.273533821106s cumulative, 0.005624055862426758s individual

.
current test PASSED/SKIPPED -- test_irregular_large_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 521.6418209075928s cumulative, 5.368287086486816s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 521.6534149646759s cumulative, 0.011594057083129883s individual

.
current test PASSED/SKIPPED -- test_delimit in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 521.6670968532562s cumulative, 0.013681888580322266s individual

.
current test PASSED/SKIPPED -- test_peek in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 521.6750206947327s cumulative, 0.00792384147644043s individual

.
current test PASSED/SKIPPED -- test_exhaust in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 521.6839175224304s cumulative, 0.008896827697753906s individual

.
current test PASSED/SKIPPED -- test_delimit in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 521.6941723823547s cumulative, 0.010254859924316406s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 521.7107121944427s cumulative, 0.016539812088012695s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 521.7224056720734s cumulative, 0.011693477630615234s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 521.7350943088531s cumulative, 0.012688636779785156s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 521.7474682331085s cumulative, 0.012373924255371094s individual

.
current test PASSED/SKIPPED -- test_peek_at_eof in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 521.7557911872864s cumulative, 0.008322954177856445s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 521.7754330635071s cumulative, 0.019641876220703125s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 521.7914769649506s cumulative, 0.016043901443481445s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 521.8015837669373s cumulative, 0.010106801986694336s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 521.8174517154694s cumulative, 0.015867948532104492s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 521.8322393894196s cumulative, 0.014787673950195312s individual

.
current test PASSED/SKIPPED -- test_pipe_until_delimiter_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 521.8424913883209s cumulative, 0.010251998901367188s individual

.
current test PASSED/SKIPPED -- test_delimit in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 521.8525183200836s cumulative, 0.010026931762695312s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 521.8636839389801s cumulative, 0.011165618896484375s individual

.
current test PASSED/SKIPPED -- test_iteration_started in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 521.8753387928009s cumulative, 0.011654853820800781s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 521.8891429901123s cumulative, 0.013804197311401367s individual

.
current test PASSED/SKIPPED -- test_aiter_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 521.8960449695587s cumulative, 0.006901979446411133s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 521.9028346538544s cumulative, 0.006789684295654297s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 521.9166820049286s cumulative, 0.01384735107421875s individual

.
current test PASSED/SKIPPED -- test_read in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 521.9394752979279s cumulative, 0.022793292999267578s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 522.0004930496216s cumulative, 0.061017751693725586s individual

.
current test PASSED/SKIPPED -- test_peek in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 522.0250911712646s cumulative, 0.024598121643066406s individual

.
current test PASSED/SKIPPED -- test_readall in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 522.0325722694397s cumulative, 0.007481098175048828s individual

.
current test PASSED/SKIPPED -- test_placeholder_methods in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 522.0415947437286s cumulative, 0.00902247428894043s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 522.0575079917908s cumulative, 0.01591324806213379s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 522.0657007694244s cumulative, 0.008192777633666992s individual

.
current test PASSED/SKIPPED -- test_peek in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 522.0712668895721s cumulative, 0.005566120147705078s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 522.0781750679016s cumulative, 0.0069081783294677734s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 522.0846450328827s cumulative, 0.0064699649810791016s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 522.0928688049316s cumulative, 0.008223772048950195s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 522.0991246700287s cumulative, 0.0062558650970458984s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 522.107364654541s cumulative, 0.008239984512329102s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 522.1120631694794s cumulative, 0.004698514938354492s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 522.1202335357666s cumulative, 0.008170366287231445s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 522.1308183670044s cumulative, 0.010584831237792969s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 522.139720916748s cumulative, 0.008902549743652344s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 522.151759147644s cumulative, 0.012038230895996094s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 522.1639354228973s cumulative, 0.012176275253295898s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 522.1805741786957s cumulative, 0.016638755798339844s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 522.1918909549713s cumulative, 0.011316776275634766s individual

.
current test PASSED/SKIPPED -- test_read in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 522.2058749198914s cumulative, 0.013983964920043945s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 522.2245156764984s cumulative, 0.018640756607055664s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 522.2407846450806s cumulative, 0.01626896858215332s individual

.
current test PASSED/SKIPPED -- test_varying_read_size in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 530.6701490879059s cumulative, 8.429364442825317s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 530.6790134906769s cumulative, 0.008864402770996094s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 530.6924669742584s cumulative, 0.013453483581542969s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 530.7018446922302s cumulative, 0.009377717971801758s individual

.
current test PASSED/SKIPPED -- test_delimit in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 530.711811542511s cumulative, 0.009966850280761719s individual

.
current test PASSED/SKIPPED -- test_basic_aiter in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 530.7218298912048s cumulative, 0.010018348693847656s individual

.
current test PASSED/SKIPPED -- test_readall in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 530.7317123413086s cumulative, 0.009882450103759766s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 530.7448287010193s cumulative, 0.01311635971069336s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 530.7592353820801s cumulative, 0.014406681060791016s individual

.
current test PASSED/SKIPPED -- test_read_until_with_buffer_edge_case in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 530.7695453166962s cumulative, 0.010309934616088867s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 530.7830271720886s cumulative, 0.013481855392456055s individual

.
current test PASSED/SKIPPED -- test_read in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 530.7941310405731s cumulative, 0.01110386848449707s individual

.
current test PASSED/SKIPPED -- test_peek in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 530.8039288520813s cumulative, 0.009797811508178711s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 530.8121483325958s cumulative, 0.008219480514526367s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 530.8193907737732s cumulative, 0.007242441177368164s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 530.8305888175964s cumulative, 0.011198043823242188s individual

.
current test PASSED/SKIPPED -- test_invalid_delimiter_length in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 530.8443248271942s cumulative, 0.01373600959777832s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 530.8583288192749s cumulative, 0.014003992080688477s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 530.8753452301025s cumulative, 0.01701641082763672s individual

.
current test PASSED/SKIPPED -- test_read in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 530.887814283371s cumulative, 0.012469053268432617s individual

.
current test PASSED/SKIPPED -- test_peek in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_buffered_reader.py: 530.9104566574097s cumulative, 0.02264237403869629s individual


tests/test_http_custom_method_routing.py ssssss
tests/asgi/test_request_asgi.py .
current test PASSED/SKIPPED -- test_log_error_not_supported in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_asgi.py: 530.9316267967224s cumulative, 0.02117013931274414s individual

.
current test PASSED/SKIPPED -- test_missing_server_in_scope in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_request_asgi.py: 530.9505956172943s cumulative, 0.018968820571899414s individual


tests/test_cors_middleware.py .
current test PASSED/SKIPPED -- test_enabled_cors_should_accept_all_origins_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 530.9929766654968s cumulative, 0.04238104820251465s individual

.
current test PASSED/SKIPPED -- test_disabled_cors_should_not_add_any_extra_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 531.039174079895s cumulative, 0.04619741439819336s individual

.
current test PASSED/SKIPPED -- test_enabled_cors_handles_preflighting in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 531.0766880512238s cumulative, 0.03751397132873535s individual

.
current test PASSED/SKIPPED -- test_enabled_cors_no_origin in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 531.1058533191681s cumulative, 0.029165267944335938s individual

.
current test PASSED/SKIPPED -- test_enabled_cors_handles_preflighting_no_headers_in_req in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 531.1346967220306s cumulative, 0.028843402862548828s individual

.
current test PASSED/SKIPPED -- test_enabled_cors_should_add_extra_headers_on_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 531.1568641662598s cumulative, 0.022167444229125977s individual

.
current test PASSED/SKIPPED -- test_allow_origin in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 531.1881048679352s cumulative, 0.03124070167541504s individual

.
current test PASSED/SKIPPED -- test_raises in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 531.2009167671204s cumulative, 0.012811899185180664s individual

.
current test PASSED/SKIPPED -- test_allow_origin in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 531.2375237941742s cumulative, 0.03660702705383301s individual

.
current test PASSED/SKIPPED -- test_expose_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 531.2618072032928s cumulative, 0.024283409118652344s individual

.
current test PASSED/SKIPPED -- test_expose_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 531.2886259555817s cumulative, 0.02681875228881836s individual

.
current test PASSED/SKIPPED -- test_allow_origin in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 531.3294816017151s cumulative, 0.04085564613342285s individual

.
current test PASSED/SKIPPED -- test_expose_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 531.3527090549469s cumulative, 0.023227453231811523s individual

.
current test PASSED/SKIPPED -- test_allow_credential_wildcard in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 531.369642496109s cumulative, 0.016933441162109375s individual

.
current test PASSED/SKIPPED -- test_allow_credential_list_or_str in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 531.4108285903931s cumulative, 0.04118609428405762s individual

.
current test PASSED/SKIPPED -- test_allow_credential_list_or_str in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 531.44908618927s cumulative, 0.038257598876953125s individual

.
current test PASSED/SKIPPED -- test_allow_credential_existing_origin in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 531.4807410240173s cumulative, 0.03165483474731445s individual

.
current test PASSED/SKIPPED -- test_allow_origin_allow_credential in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 531.5166103839874s cumulative, 0.03586935997009277s individual


tests/asgi/test_scheduled_callbacks.py .
current test PASSED/SKIPPED -- test_callback in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scheduled_callbacks.py: 531.5609765052795s cumulative, 0.04436612129211426s individual

.
current test PASSED/SKIPPED -- test_callback in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scheduled_callbacks.py: 531.6011478900909s cumulative, 0.04017138481140137s individual

.
current test PASSED/SKIPPED -- test_multiple in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scheduled_callbacks.py: 532.1667516231537s cumulative, 0.5656037330627441s individual

.
current test PASSED/SKIPPED -- test_callback in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scheduled_callbacks.py: 532.1955718994141s cumulative, 0.028820276260375977s individual

.
current test PASSED/SKIPPED -- test_callback in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scheduled_callbacks.py: 532.2115695476532s cumulative, 0.015997648239135742s individual


tests/test_app_initializers.py .
current test PASSED/SKIPPED -- test_api_media_type_overriding in /home/kaiyaok2/PythonProjects/falcon/tests/test_app_initializers.py: 532.2235112190247s cumulative, 0.011941671371459961s individual

.
current test PASSED/SKIPPED -- test_api_media_type_overriding in /home/kaiyaok2/PythonProjects/falcon/tests/test_app_initializers.py: 532.271986246109s cumulative, 0.048475027084350586s individual


tests/test_media_handlers.py .
current test PASSED/SKIPPED -- test_json_err_no_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 532.290308713913s cumulative, 0.018322467803955078s individual

.
current test PASSED/SKIPPED -- test_json_err_no_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_handlers.py: 532.3026347160339s cumulative, 0.01232600212097168s individual


tests/test_boundedstream.py .
current test PASSED/SKIPPED -- test_not_writable in /home/kaiyaok2/PythonProjects/falcon/tests/test_boundedstream.py: 532.3068301677704s cumulative, 0.004195451736450195s individual


tests/asgi/test_middleware_asgi.py .
current test PASSED/SKIPPED -- test_raise_on_incompatible in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_middleware_asgi.py: 532.3138055801392s cumulative, 0.006975412368774414s individual

.
current test PASSED/SKIPPED -- test_raise_on_incompatible in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_middleware_asgi.py: 532.3195841312408s cumulative, 0.00577855110168457s individual

.
current test PASSED/SKIPPED -- test_raise_on_incompatible in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_middleware_asgi.py: 532.3280289173126s cumulative, 0.008444786071777344s individual

.
current test PASSED/SKIPPED -- test_raise_on_incompatible in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_middleware_asgi.py: 532.3417549133301s cumulative, 0.013725996017456055s individual


tests/test_response_body.py .
current test PASSED/SKIPPED -- test_unsupported_response_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 532.355447769165s cumulative, 0.013692855834960938s individual

.
current test PASSED/SKIPPED -- test_content_length_set_on_head_with_no_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 532.3652424812317s cumulative, 0.00979471206665039s individual

.
current test PASSED/SKIPPED -- test_response_body_rendition_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 532.3787059783936s cumulative, 0.013463497161865234s individual


tests/test_error_handlers.py s
current test PASSED/SKIPPED -- test_caught_error_async in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 532.38330245018s cumulative, 0.0045964717864990234s individual

.
current test PASSED/SKIPPED -- test_catch_http_no_route_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 532.398669719696s cumulative, 0.015367269515991211s individual

.
current test PASSED/SKIPPED -- test_caught_error_async in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 532.4114401340485s cumulative, 0.012770414352416992s individual


tests/asgi/test_lifespan_handlers.py .
current test PASSED/SKIPPED -- test_asgi_conductor_raised_error_skips_shutdown in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_lifespan_handlers.py: 532.4198017120361s cumulative, 0.008361577987670898s individual

.
current test PASSED/SKIPPED -- test_startup_only in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_lifespan_handlers.py: 532.4281139373779s cumulative, 0.008312225341796875s individual

.
current test PASSED/SKIPPED -- test_multiple_handlers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_lifespan_handlers.py: 532.4370489120483s cumulative, 0.008934974670410156s individual

.
current test PASSED/SKIPPED -- test_startup_raises in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_lifespan_handlers.py: 532.4492936134338s cumulative, 0.012244701385498047s individual

.
current test PASSED/SKIPPED -- test_at_least_one_event_method_required in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_lifespan_handlers.py: 532.4554951190948s cumulative, 0.006201505661010742s individual

.
current test PASSED/SKIPPED -- test_shutdown_raises in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_lifespan_handlers.py: 532.4631958007812s cumulative, 0.007700681686401367s individual

.
current test PASSED/SKIPPED -- test_shutdown_only in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_lifespan_handlers.py: 532.4710726737976s cumulative, 0.007876873016357422s individual


tests/asgi/test_sync.py .
current test PASSED/SKIPPED -- test_sync_helpers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_sync.py: 537.9060163497925s cumulative, 5.434943675994873s individual


tests/test_http_custom_method_routing.py .
current test PASSED/SKIPPED -- test_foo in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_custom_method_routing.py: 537.9338321685791s cumulative, 0.027815818786621094s individual

.
current test PASSED/SKIPPED -- test_bar in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_custom_method_routing.py: 537.9508006572723s cumulative, 0.016968488693237305s individual

.
current test PASSED/SKIPPED -- test_bar in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_custom_method_routing.py: 537.9731142520905s cumulative, 0.022313594818115234s individual

.
current test PASSED/SKIPPED -- test_foo in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_custom_method_routing.py: 537.9942507743835s cumulative, 0.02113652229309082s individual

.
current test PASSED/SKIPPED -- test_map_http_methods in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_custom_method_routing.py: 538.0013618469238s cumulative, 0.007111072540283203s individual

.
current test PASSED/SKIPPED -- test_map_http_methods in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_custom_method_routing.py: 538.0078558921814s cumulative, 0.006494045257568359s individual


tests/asgi/test_testing_asgi.py .
current test PASSED/SKIPPED -- test_create_scope_default_ua_override in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_testing_asgi.py: 538.0114583969116s cumulative, 0.0036025047302246094s individual

.
current test PASSED/SKIPPED -- test_ignore_extra_asgi_events in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_testing_asgi.py: 538.019523859024s cumulative, 0.008065462112426758s individual

.
current test PASSED/SKIPPED -- test_create_scope_default_ua in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_testing_asgi.py: 538.0256388187408s cumulative, 0.006114959716796875s individual

.
current test PASSED/SKIPPED -- test_immediate_disconnect in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_testing_asgi.py: 538.0322291851044s cumulative, 0.006590366363525391s individual

.
current test PASSED/SKIPPED -- test_missing_header_is_none in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_testing_asgi.py: 538.0363285541534s cumulative, 0.004099369049072266s individual

.
current test PASSED/SKIPPED -- test_invalid_asgi_events in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_testing_asgi.py: 538.0421159267426s cumulative, 0.005787372589111328s individual

.
current test PASSED/SKIPPED -- test_is_asgi_app_cls in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_testing_asgi.py: 538.0497171878815s cumulative, 0.007601261138916016s individual

.
current test PASSED/SKIPPED -- test_create_scope_default_ua_modify_global in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_testing_asgi.py: 538.0540306568146s cumulative, 0.004313468933105469s individual

.
current test PASSED/SKIPPED -- test_asgi_request_event_emitter_hang in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_testing_asgi.py: 539.0687415599823s cumulative, 1.0147109031677246s individual

.
current test PASSED/SKIPPED -- test_cookies_jar in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_testing_asgi.py: 539.092939376831s cumulative, 0.024197816848754883s individual


tests/test_deps.py .
current test PASSED/SKIPPED -- test_deps_mimeparse_correct_package in /home/kaiyaok2/PythonProjects/falcon/tests/test_deps.py: 539.1011910438538s cumulative, 0.008251667022705078s individual


tests/test_sinks.py .
current test PASSED/SKIPPED -- test_add_sync_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 539.1274638175964s cumulative, 0.02627277374267578s individual

.
current test PASSED/SKIPPED -- test_add_sync_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 539.1409163475037s cumulative, 0.013452529907226562s individual

.
current test PASSED/SKIPPED -- test_add_async_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 539.1602697372437s cumulative, 0.019353389739990234s individual

.
current test PASSED/SKIPPED -- test_add_sync_sink_with_wrapping in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 539.1791424751282s cumulative, 0.018872737884521484s individual

.
current test PASSED/SKIPPED -- test_add_async_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 539.1978602409363s cumulative, 0.01871776580810547s individual

.
current test PASSED/SKIPPED -- test_single_simple_pattern in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 539.2165133953094s cumulative, 0.018653154373168945s individual

.
current test PASSED/SKIPPED -- test_multiple_patterns in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 539.2385673522949s cumulative, 0.022053956985473633s individual

.
current test PASSED/SKIPPED -- test_single_compiled_pattern in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 539.2588331699371s cumulative, 0.020265817642211914s individual

.
current test PASSED/SKIPPED -- test_with_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 539.291633605957s cumulative, 0.03280043601989746s individual

.
current test PASSED/SKIPPED -- test_single_compiled_pattern in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 539.3109352588654s cumulative, 0.019301652908325195s individual

.
current test PASSED/SKIPPED -- test_single_default_pattern in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 539.3287031650543s cumulative, 0.017767906188964844s individual

.
current test PASSED/SKIPPED -- test_single_default_pattern in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 539.3456032276154s cumulative, 0.016900062561035156s individual

.
current test PASSED/SKIPPED -- test_named_groups in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 539.3677053451538s cumulative, 0.02210211753845215s individual

.
current test PASSED/SKIPPED -- test_single_simple_pattern in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 539.3850417137146s cumulative, 0.017336368560791016s individual

.
current test PASSED/SKIPPED -- test_route_precedence in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 539.4090943336487s cumulative, 0.02405261993408203s individual

.
current test PASSED/SKIPPED -- test_named_groups in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 539.4262840747833s cumulative, 0.017189741134643555s individual

.
current test PASSED/SKIPPED -- test_route_precedence_with_both_id in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 539.4427394866943s cumulative, 0.016455411911010742s individual

.
current test PASSED/SKIPPED -- test_multiple_patterns in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 539.4593224525452s cumulative, 0.016582965850830078s individual

.
current test PASSED/SKIPPED -- test_route_precedence_with_id in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 539.4775021076202s cumulative, 0.018179655075073242s individual

.
current test PASSED/SKIPPED -- test_with_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 539.5054314136505s cumulative, 0.027929306030273438s individual

.
current test PASSED/SKIPPED -- test_route_precedence in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 539.5252964496613s cumulative, 0.019865036010742188s individual

.
current test PASSED/SKIPPED -- test_route_precedence_with_both_id in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 539.5559959411621s cumulative, 0.030699491500854492s individual

.
current test PASSED/SKIPPED -- test_route_precedence_with_id in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 539.585825920105s cumulative, 0.029829978942871094s individual

.
current test PASSED/SKIPPED -- test_add_sync_sink_with_wrapping in /home/kaiyaok2/PythonProjects/falcon/tests/test_sinks.py: 539.615475654602s cumulative, 0.029649734497070312s individual


tests/test_testing.py .
current test PASSED/SKIPPED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 539.646993637085s cumulative, 0.031517982482910156s individual

.
current test PASSED/SKIPPED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 539.6765034198761s cumulative, 0.029509782791137695s individual

.
current test PASSED/SKIPPED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 539.707944393158s cumulative, 0.03144097328186035s individual

.
current test PASSED/SKIPPED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 539.7389752864838s cumulative, 0.031030893325805664s individual

.
current test PASSED/SKIPPED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 539.7614047527313s cumulative, 0.022429466247558594s individual

.
current test PASSED/SKIPPED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 539.7875597476959s cumulative, 0.02615499496459961s individual

.
current test PASSED/SKIPPED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 539.8115527629852s cumulative, 0.02399301528930664s individual

.
current test PASSED/SKIPPED -- test_client_simulate_aliases in /home/kaiyaok2/PythonProjects/falcon/tests/test_testing.py: 539.8380756378174s cumulative, 0.02652287483215332s individual


tests/test_response.py .
current test PASSED/SKIPPED -- test_response_removed_stream_len in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 539.8524911403656s cumulative, 0.014415502548217773s individual

.
current test PASSED/SKIPPED -- test_response_option_mimetype_init in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 539.8780632019043s cumulative, 0.02557206153869629s individual

.
current test PASSED/SKIPPED -- test_response_get_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 539.8913531303406s cumulative, 0.013289928436279297s individual

.
current test PASSED/SKIPPED -- test_response_get_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 539.8995730876923s cumulative, 0.00821995735168457s individual

.
current test PASSED/SKIPPED -- test_response_set_content_type_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 539.905473947525s cumulative, 0.005900859832763672s individual

.
current test PASSED/SKIPPED -- test_response_removed_stream_len in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 539.9112093448639s cumulative, 0.0057353973388671875s individual

.
current test PASSED/SKIPPED -- test_response_set_content_type_not_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 539.9159159660339s cumulative, 0.004706621170043945s individual

.
current test PASSED/SKIPPED -- test_response_set_content_type_not_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 539.9208779335022s cumulative, 0.004961967468261719s individual

.
current test PASSED/SKIPPED -- test_response_set_content_type_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 539.9263248443604s cumulative, 0.005446910858154297s individual

.
current test PASSED/SKIPPED -- test_response_attempt_to_set_read_only_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 539.9315280914307s cumulative, 0.0052032470703125s individual

.
current test PASSED/SKIPPED -- test_response_attempt_to_set_read_only_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_response.py: 539.9359874725342s cumulative, 0.004459381103515625s individual


tests/asgi/test_asgi_servers.py s
current test PASSED/SKIPPED -- test_put in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 539.9481539726257s cumulative, 0.012166500091552734s individual

s
current test PASSED/SKIPPED -- test_post_read_bounded_stream_large in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 539.9553287029266s cumulative, 0.00717473030090332s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]
E
current test FAILED -- test_post_multipart_form in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 555.5590600967407s cumulative, 15.603731393814087s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]
E
current test FAILED -- test_post_multiple in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 571.0293128490448s cumulative, 15.470252752304077s individual

s
current test PASSED/SKIPPED -- test_post_invalid_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 571.0556728839874s cumulative, 0.026360034942626953s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]
E
current test FAILED -- test_post_read_bounded_stream in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 586.5009586811066s cumulative, 15.44528579711914s individual

s
current test PASSED/SKIPPED -- test_sse_client_disconnects_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 586.5410549640656s cumulative, 0.040096282958984375s individual

s
current test PASSED/SKIPPED -- test_post_read_bounded_stream_no_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 586.5658476352692s cumulative, 0.02479267120361328s individual

s
current test PASSED/SKIPPED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 586.6011407375336s cumulative, 0.0352931022644043s individual

s
current test PASSED/SKIPPED -- test_post_multiple in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 586.646844625473s cumulative, 0.045703887939453125s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]
E
current test FAILED -- test_head_405 in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 602.0232720375061s cumulative, 15.376427412033081s individual

s
current test PASSED/SKIPPED -- test_post_multipart_form in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 602.0345613956451s cumulative, 0.011289358139038086s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]
E
current test FAILED -- test_post_read_bounded_stream_no_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 617.3948566913605s cumulative, 15.360295295715332s individual

s
current test PASSED/SKIPPED -- test_post_invalid_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 617.4090602397919s cumulative, 0.014203548431396484s individual

s
current test PASSED/SKIPPED -- test_post_multipart_form in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 617.4172475337982s cumulative, 0.008187294006347656s individual

s
current test PASSED/SKIPPED -- test_post_read_bounded_stream_no_body in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 617.4269013404846s cumulative, 0.009653806686401367s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]
E
current test FAILED -- test_post_invalid_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 632.7774684429169s cumulative, 15.350567102432251s individual

s
current test PASSED/SKIPPED -- test_stream_chunked_request in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 632.7870125770569s cumulative, 0.009544134140014648s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]
E
current test FAILED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 648.2447798252106s cumulative, 15.457767248153687s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]
E
current test FAILED -- test_post_read_bounded_stream_large in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 663.5242993831635s cumulative, 15.27951955795288s individual

s
current test PASSED/SKIPPED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 663.5310599803925s cumulative, 0.006760597229003906s individual

s
current test PASSED/SKIPPED -- test_head_405 in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 663.5364019870758s cumulative, 0.005342006683349609s individual

s
current test PASSED/SKIPPED -- test_post_read_bounded_stream in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 663.5401518344879s cumulative, 0.003749847412109375s individual

s
current test PASSED/SKIPPED -- test_post_multiple in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 663.5456459522247s cumulative, 0.005494117736816406s individual

s
current test PASSED/SKIPPED -- test_post_read_bounded_stream_large in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 663.5502014160156s cumulative, 0.004555463790893555s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]
E
current test FAILED -- test_put in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 678.8595149517059s cumulative, 15.309313535690308s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]
E
current test FAILED -- test_stream_chunked_request in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 694.2368960380554s cumulative, 15.377381086349487s individual

s
current test PASSED/SKIPPED -- test_sse_client_disconnects_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 694.2453117370605s cumulative, 0.008415699005126953s individual

s
current test PASSED/SKIPPED -- test_sse in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 694.249664068222s cumulative, 0.0043523311614990234s individual

s
current test PASSED/SKIPPED -- test_sse in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 694.2556364536285s cumulative, 0.005972385406494141s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]
E
current test FAILED -- test_sse_client_disconnects_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 709.7601320743561s cumulative, 15.504495620727539s individual

s
current test PASSED/SKIPPED -- test_put in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 709.7807211875916s cumulative, 0.020589113235473633s individual

s
current test PASSED/SKIPPED -- test_post_read_bounded_stream in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 709.7994706630707s cumulative, 0.018749475479125977s individual

s
current test PASSED/SKIPPED -- test_head_405 in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 709.8146023750305s cumulative, 0.015131711959838867s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]
E
current test FAILED -- test_sse in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 725.2474479675293s cumulative, 15.43284559249878s individual

s
current test PASSED/SKIPPED -- test_stream_chunked_request in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 725.2605018615723s cumulative, 0.01305389404296875s individual

s
current test PASSED/SKIPPED -- test_send_before_accept in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 725.2731537818909s cumulative, 0.012651920318603516s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]
E
current test FAILED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 740.6503300666809s cumulative, 15.377176284790039s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]
E
current test FAILED -- test_close_code_on_unhandled_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 756.2392663955688s cumulative, 15.58893632888794s individual

s
current test PASSED/SKIPPED -- test_recv_before_accept in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 756.2639601230621s cumulative, 0.024693727493286133s individual

s
current test PASSED/SKIPPED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 756.2838747501373s cumulative, 0.019914627075195312s individual

s
current test PASSED/SKIPPED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 756.2994115352631s cumulative, 0.015536785125732422s individual

s
current test PASSED/SKIPPED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 756.314688205719s cumulative, 0.015276670455932617s individual

s
current test PASSED/SKIPPED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 756.3351409435272s cumulative, 0.02045273780822754s individual

s
current test PASSED/SKIPPED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 756.3535296916962s cumulative, 0.018388748168945312s individual

s
current test PASSED/SKIPPED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 756.370477437973s cumulative, 0.01694774627685547s individual

s
current test PASSED/SKIPPED -- test_select_subprotocol_unknown in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 756.3871595859528s cumulative, 0.016682147979736328s individual

s
current test PASSED/SKIPPED -- test_select_subprotocol_unknown in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 756.4044895172119s cumulative, 0.017329931259155273s individual

s
current test PASSED/SKIPPED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 756.4236509799957s cumulative, 0.019161462783813477s individual

s
current test PASSED/SKIPPED -- test_close_code_on_unhandled_http_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 756.4415590763092s cumulative, 0.017908096313476562s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]
E
current test FAILED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 771.69739985466s cumulative, 15.25584077835083s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]
E
current test FAILED -- test_recv_before_accept in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 787.044056892395s cumulative, 15.346657037734985s individual

s
current test PASSED/SKIPPED -- test_close_code_on_unhandled_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 787.0549373626709s cumulative, 0.010880470275878906s individual

s
current test PASSED/SKIPPED -- test_recv_before_accept in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 787.0616266727448s cumulative, 0.006689310073852539s individual

s
current test PASSED/SKIPPED -- test_missing_responder in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 787.068717956543s cumulative, 0.0070912837982177734s individual

s
current test PASSED/SKIPPED -- test_select_subprotocol_known in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 787.0747542381287s cumulative, 0.006036281585693359s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]
E
current test FAILED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 802.4349355697632s cumulative, 15.360181331634521s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]
E
current test FAILED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 817.9527716636658s cumulative, 15.517836093902588s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]
E
current test FAILED -- test_disconnecting_client_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 833.4650571346283s cumulative, 15.512285470962524s individual

s
current test PASSED/SKIPPED -- test_invalid_close_code in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 833.4828460216522s cumulative, 0.01778888702392578s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]
E
current test FAILED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 848.8123345375061s cumulative, 15.329488515853882s individual

s
current test PASSED/SKIPPED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 848.8369889259338s cumulative, 0.024654388427734375s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]
E
current test FAILED -- test_select_subprotocol_unknown in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 864.1539130210876s cumulative, 15.316924095153809s individual

s
current test PASSED/SKIPPED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 864.1610312461853s cumulative, 0.00711822509765625s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]
E
current test FAILED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 879.642550945282s cumulative, 15.48151969909668s individual

s
current test PASSED/SKIPPED -- test_disconnecting_client_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 879.6577293872833s cumulative, 0.015178442001342773s individual

s
current test PASSED/SKIPPED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 879.6727557182312s cumulative, 0.015026330947875977s individual

s
current test PASSED/SKIPPED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 879.6912422180176s cumulative, 0.018486499786376953s individual

s
current test PASSED/SKIPPED -- test_disconnecting_client_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 879.702826499939s cumulative, 0.011584281921386719s individual

s
current test PASSED/SKIPPED -- test_close_code_on_unhandled_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 879.7160613536835s cumulative, 0.013234853744506836s individual

s
current test PASSED/SKIPPED -- test_select_subprotocol_known in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 879.7272653579712s cumulative, 0.011204004287719727s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]
E
current test FAILED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 895.1786026954651s cumulative, 15.451337337493896s individual

s
current test PASSED/SKIPPED -- test_select_subprotocol_known in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 895.1890015602112s cumulative, 0.01039886474609375s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]
E
current test FAILED -- test_send_before_accept in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 910.6049551963806s cumulative, 15.415953636169434s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]
E
current test FAILED -- test_select_subprotocol_known in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 925.8861825466156s cumulative, 15.281227350234985s individual

s
current test PASSED/SKIPPED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 925.9014117717743s cumulative, 0.015229225158691406s individual

s
current test PASSED/SKIPPED -- test_missing_responder in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 925.9127674102783s cumulative, 0.01135563850402832s individual

s
current test PASSED/SKIPPED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 925.919762134552s cumulative, 0.006994724273681641s individual

s
current test PASSED/SKIPPED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 925.9296209812164s cumulative, 0.009858846664428711s individual

s
current test PASSED/SKIPPED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 925.9365770816803s cumulative, 0.0069561004638671875s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]
E
current test FAILED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 941.2978010177612s cumulative, 15.361223936080933s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]
E
current test FAILED -- test_passing_path_params in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 956.6490013599396s cumulative, 15.351200342178345s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]
E
current test FAILED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 971.9011380672455s cumulative, 15.252136707305908s individual

s
current test PASSED/SKIPPED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 971.9101529121399s cumulative, 0.00901484489440918s individual

s
current test PASSED/SKIPPED -- test_passing_path_params in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 971.9231314659119s cumulative, 0.012978553771972656s individual

s
current test PASSED/SKIPPED -- test_close_code_on_unhandled_http_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 971.9304721355438s cumulative, 0.007340669631958008s individual

s
current test PASSED/SKIPPED -- test_invalid_close_code in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 971.937658071518s cumulative, 0.007185935974121094s individual

s
current test PASSED/SKIPPED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 971.9460372924805s cumulative, 0.008379220962524414s individual

s
current test PASSED/SKIPPED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 971.9530498981476s cumulative, 0.007012605667114258s individual

s
current test PASSED/SKIPPED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 971.9598410129547s cumulative, 0.006791114807128906s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]
E
current test FAILED -- test_close_code_on_unhandled_http_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 987.2825872898102s cumulative, 15.322746276855469s individual

s
current test PASSED/SKIPPED -- test_select_subprotocol_known in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 987.2930810451508s cumulative, 0.010493755340576172s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]
E
current test FAILED -- test_select_subprotocol_known in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1002.7682960033417s cumulative, 15.475214958190918s individual

s
current test PASSED/SKIPPED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1002.7767848968506s cumulative, 0.008488893508911133s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]
E
current test FAILED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1018.3353412151337s cumulative, 15.558556318283081s individual

s
current test PASSED/SKIPPED -- test_send_before_accept in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1018.3501219749451s cumulative, 0.014780759811401367s individual

s
current test PASSED/SKIPPED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1018.3598711490631s cumulative, 0.009749174118041992s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]
E
current test FAILED -- test_invalid_close_code in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1033.909110069275s cumulative, 15.549238920211792s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]
E
current test FAILED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1049.28742146492s cumulative, 15.378311395645142s individual

s
current test PASSED/SKIPPED -- test_type_mismatch in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1049.308479309082s cumulative, 0.021057844161987305s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]
E
current test FAILED -- test_hello in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1064.6158480644226s cumulative, 15.307368755340576s individual


[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]

[Starting server process...]

[Sending SIGTERM to server process...]
E
current test FAILED -- test_missing_responder in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1079.8334584236145s cumulative, 15.217610359191895s individual

s
current test PASSED/SKIPPED -- test_passing_path_params in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1079.8392958641052s cumulative, 0.005837440490722656s individual

s
current test PASSED/SKIPPED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1079.844383239746s cumulative, 0.005087375640869141s individual

s
current test PASSED/SKIPPED -- test_rejected in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_servers.py: 1079.8504066467285s cumulative, 0.006023406982421875s individual


tests/test_request_access_route.py .
current test PASSED/SKIPPED -- test_x_real_ip in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 1079.864769935608s cumulative, 0.014363288879394531s individual

.
current test PASSED/SKIPPED -- test_remote_addr_non_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 1079.868378162384s cumulative, 0.003608226776123047s individual

.
current test PASSED/SKIPPED -- test_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 1079.872269153595s cumulative, 0.0038909912109375s individual

.
current test PASSED/SKIPPED -- test_remote_addr_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 1079.8858535289764s cumulative, 0.013584375381469727s individual

.
current test PASSED/SKIPPED -- test_malformed_rfc_forwarded in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 1079.902468919754s cumulative, 0.01661539077758789s individual

.
current test PASSED/SKIPPED -- test_x_forwarded_for in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 1079.9068820476532s cumulative, 0.004413127899169922s individual

.
current test PASSED/SKIPPED -- test_x_forwarded_for in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 1079.9121401309967s cumulative, 0.005258083343505859s individual

.
current test PASSED/SKIPPED -- test_malformed_rfc_forwarded in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 1079.9157679080963s cumulative, 0.003627777099609375s individual

.
current test PASSED/SKIPPED -- test_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 1079.9290626049042s cumulative, 0.013294696807861328s individual

.
current test PASSED/SKIPPED -- test_remote_addr_non_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 1079.9321596622467s cumulative, 0.003097057342529297s individual

.
current test PASSED/SKIPPED -- test_x_forwarded_for in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 1079.935777425766s cumulative, 0.0036177635192871094s individual

.
current test PASSED/SKIPPED -- test_rfc_forwarded in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 1079.9387447834015s cumulative, 0.002967357635498047s individual

.
current test PASSED/SKIPPED -- test_remote_addr_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 1079.9431691169739s cumulative, 0.004424333572387695s individual

.
current test PASSED/SKIPPED -- test_x_real_ip in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 1079.9584205150604s cumulative, 0.015251398086547852s individual

.
current test PASSED/SKIPPED -- test_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 1079.9780688285828s cumulative, 0.019648313522338867s individual

.
current test PASSED/SKIPPED -- test_x_forwarded_for in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 1079.9812817573547s cumulative, 0.0032129287719726562s individual

.
current test PASSED/SKIPPED -- test_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 1079.9843912124634s cumulative, 0.003109455108642578s individual

.
current test PASSED/SKIPPED -- test_remote_addr_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 1079.9980373382568s cumulative, 0.013646125793457031s individual

.
current test PASSED/SKIPPED -- test_rfc_forwarded in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 1080.0019299983978s cumulative, 0.003892660140991211s individual

.
current test PASSED/SKIPPED -- test_remote_addr_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 1080.02068400383s cumulative, 0.018754005432128906s individual

.
current test PASSED/SKIPPED -- test_remote_addr_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_access_route.py: 1080.041737318039s cumulative, 0.021053314208984375s individual


tests/test_httpstatus.py .
current test PASSED/SKIPPED -- test_raise_status_in_process_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 1080.0615983009338s cumulative, 0.01986098289489746s individual

.
current test PASSED/SKIPPED -- test_raise_status_in_process_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 1080.082420349121s cumulative, 0.02082204818725586s individual

.
current test PASSED/SKIPPED -- test_raise_status_in_process_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 1080.1220242977142s cumulative, 0.03960394859313965s individual

.
current test PASSED/SKIPPED -- test_raise_status_runs_process_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 1080.144945383072s cumulative, 0.022921085357666016s individual

.
current test PASSED/SKIPPED -- test_raise_status_in_process_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 1080.156255722046s cumulative, 0.011310338973999023s individual

.
current test PASSED/SKIPPED -- test_raise_status_runs_process_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 1080.1646075248718s cumulative, 0.008351802825927734s individual

.
current test PASSED/SKIPPED -- test_body_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 1080.1702632904053s cumulative, 0.005655765533447266s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 1080.1807458400726s cumulative, 0.010482549667358398s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 1080.187198638916s cumulative, 0.006452798843383789s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 1080.195827960968s cumulative, 0.008629322052001953s individual

.
current test PASSED/SKIPPED -- test_media_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 1080.2029163837433s cumulative, 0.007088422775268555s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 1080.2100195884705s cumulative, 0.0071032047271728516s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 1080.2192311286926s cumulative, 0.009211540222167969s individual

.
current test PASSED/SKIPPED -- test_data_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 1080.2303993701935s cumulative, 0.011168241500854492s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 1080.2395684719086s cumulative, 0.00916910171508789s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 1080.2490844726562s cumulative, 0.009516000747680664s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 1080.256718635559s cumulative, 0.007634162902832031s individual

.
current test PASSED/SKIPPED -- test_media_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 1080.2652418613434s cumulative, 0.008523225784301758s individual

.
current test PASSED/SKIPPED -- test_deprecated_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 1080.2683889865875s cumulative, 0.003147125244140625s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 1080.2755362987518s cumulative, 0.007147312164306641s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 1080.2844967842102s cumulative, 0.008960485458374023s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 1080.2917182445526s cumulative, 0.0072214603424072266s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 1080.2980408668518s cumulative, 0.006322622299194336s individual

.
current test PASSED/SKIPPED -- test_body_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 1080.3045830726624s cumulative, 0.006542205810546875s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 1080.3103852272034s cumulative, 0.005802154541015625s individual

.
current test PASSED/SKIPPED -- test_data_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 1080.3173723220825s cumulative, 0.006987094879150391s individual

.
current test PASSED/SKIPPED -- test_non_string_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 1080.3301112651825s cumulative, 0.012738943099975586s individual

.
current test PASSED/SKIPPED -- test_raise_status_in_responder in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 1080.3383874893188s cumulative, 0.008276224136352539s individual

.
current test PASSED/SKIPPED -- test_raise_status_in_before_hook in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 1080.3489549160004s cumulative, 0.010567426681518555s individual

.
current test PASSED/SKIPPED -- test_raise_status_runs_after_hooks in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 1080.3605031967163s cumulative, 0.011548280715942383s individual

.
current test PASSED/SKIPPED -- test_raise_status_in_before_hook in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 1080.3713102340698s cumulative, 0.010807037353515625s individual

.
current test PASSED/SKIPPED -- test_raise_status_survives_after_hooks in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 1080.380393743515s cumulative, 0.00908350944519043s individual

.
current test PASSED/SKIPPED -- test_raise_status_in_responder in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 1080.3908956050873s cumulative, 0.010501861572265625s individual

.
current test PASSED/SKIPPED -- test_raise_status_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 1080.4021880626678s cumulative, 0.011292457580566406s individual

.
current test PASSED/SKIPPED -- test_raise_status_runs_after_hooks in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 1080.415278673172s cumulative, 0.01309061050415039s individual

.
current test PASSED/SKIPPED -- test_raise_status_survives_after_hooks in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 1080.4321191310883s cumulative, 0.016840457916259766s individual

.
current test PASSED/SKIPPED -- test_raise_status_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httpstatus.py: 1080.4437487125397s cumulative, 0.011629581451416016s individual


tests/test_options.py .
current test PASSED/SKIPPED -- test_options_toggle in /home/kaiyaok2/PythonProjects/falcon/tests/test_options.py: 1080.4492933750153s cumulative, 0.0055446624755859375s individual

.
current test PASSED/SKIPPED -- test_option_defaults in /home/kaiyaok2/PythonProjects/falcon/tests/test_options.py: 1080.454857826233s cumulative, 0.005564451217651367s individual

.
current test PASSED/SKIPPED -- test_incorrect_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_options.py: 1080.4601562023163s cumulative, 0.0052983760833740234s individual

.
current test PASSED/SKIPPED -- test_options_toggle in /home/kaiyaok2/PythonProjects/falcon/tests/test_options.py: 1080.465532541275s cumulative, 0.005376338958740234s individual

.
current test PASSED/SKIPPED -- test_options_toggle in /home/kaiyaok2/PythonProjects/falcon/tests/test_options.py: 1080.4721546173096s cumulative, 0.0066220760345458984s individual

.
current test PASSED/SKIPPED -- test_options_toggle in /home/kaiyaok2/PythonProjects/falcon/tests/test_options.py: 1080.4767427444458s cumulative, 0.004588127136230469s individual


tests/test_uri_templates_legacy.py .
current test PASSED/SKIPPED -- test_no_fields in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1080.4851105213165s cumulative, 0.008367776870727539s individual

.
current test PASSED/SKIPPED -- test_three_fields in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1080.4922459125519s cumulative, 0.0071353912353515625s individual

.
current test PASSED/SKIPPED -- test_template_may_not_contain_double_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1080.4979741573334s cumulative, 0.005728244781494141s individual

.
current test PASSED/SKIPPED -- test_template_may_not_contain_double_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1080.5226473808289s cumulative, 0.0246732234954834s individual

.
current test PASSED/SKIPPED -- test_template_may_not_contain_double_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1080.5363583564758s cumulative, 0.013710975646972656s individual

.
current test PASSED/SKIPPED -- test_no_fields in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1080.5488955974579s cumulative, 0.012537240982055664s individual

.
current test PASSED/SKIPPED -- test_no_fields in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1080.5536665916443s cumulative, 0.004770994186401367s individual

.
current test PASSED/SKIPPED -- test_two_fields in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1080.5782792568207s cumulative, 0.0246126651763916s individual

.
current test PASSED/SKIPPED -- test_two_fields in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1080.5812587738037s cumulative, 0.0029795169830322266s individual

.
current test PASSED/SKIPPED -- test_one_field in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1080.59650182724s cumulative, 0.015243053436279297s individual

.
current test PASSED/SKIPPED -- test_template_may_not_contain_double_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1080.599980354309s cumulative, 0.003478527069091797s individual

.
current test PASSED/SKIPPED -- test_malformed_field in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1080.6057546138763s cumulative, 0.005774259567260742s individual

.
current test PASSED/SKIPPED -- test_deprecated_warning in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1080.609970331192s cumulative, 0.004215717315673828s individual

.
current test PASSED/SKIPPED -- test_string_type_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1080.6165845394135s cumulative, 0.006614208221435547s individual

.
current test PASSED/SKIPPED -- test_template_must_start_with_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1080.6196720600128s cumulative, 0.0030875205993652344s individual

.
current test PASSED/SKIPPED -- test_string_type_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1080.6236600875854s cumulative, 0.003988027572631836s individual

.
current test PASSED/SKIPPED -- test_template_must_start_with_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1080.62939119339s cumulative, 0.005731105804443359s individual

.
current test PASSED/SKIPPED -- test_template_may_not_contain_double_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1080.6335489749908s cumulative, 0.0041577816009521484s individual

.
current test PASSED/SKIPPED -- test_template_may_not_contain_double_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1080.6365547180176s cumulative, 0.0030057430267333984s individual

.
current test PASSED/SKIPPED -- test_root in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1080.6401505470276s cumulative, 0.0035958290100097656s individual

.
current test PASSED/SKIPPED -- test_one_field_with_prefixed_digits in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1080.6438837051392s cumulative, 0.0037331581115722656s individual

.
current test PASSED/SKIPPED -- test_one_field_with_digits in /home/kaiyaok2/PythonProjects/falcon/tests/test_uri_templates_legacy.py: 1080.6481771469116s cumulative, 0.0042934417724609375s individual


tests/test_validators.py .
current test PASSED/SKIPPED -- test_both_schemas_validation_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 1080.6701695919037s cumulative, 0.02199244499206543s individual

.
current test PASSED/SKIPPED -- test_both_schemas_validation_success in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 1080.691519021988s cumulative, 0.021349430084228516s individual

.
current test PASSED/SKIPPED -- test_req_schema_validation_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 1080.6982779502869s cumulative, 0.006758928298950195s individual

.
current test PASSED/SKIPPED -- test_req_schema_validation_success in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 1080.7097115516663s cumulative, 0.011433601379394531s individual

.
current test PASSED/SKIPPED -- test_resp_schema_validation_success in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 1080.7201623916626s cumulative, 0.01045083999633789s individual

.
current test PASSED/SKIPPED -- test_both_schemas_validation_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 1080.7478802204132s cumulative, 0.02771782875061035s individual

.
current test PASSED/SKIPPED -- test_resp_schema_validation_success in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 1080.7590279579163s cumulative, 0.011147737503051758s individual

.
current test PASSED/SKIPPED -- test_req_schema_validation_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 1080.7695002555847s cumulative, 0.010472297668457031s individual

.
current test PASSED/SKIPPED -- test_req_schema_validation_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 1080.7812852859497s cumulative, 0.011785030364990234s individual

.
current test PASSED/SKIPPED -- test_resp_schema_validation_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 1080.7962818145752s cumulative, 0.014996528625488281s individual

.
current test PASSED/SKIPPED -- test_req_schema_validation_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 1080.8231494426727s cumulative, 0.02686762809753418s individual

.
current test PASSED/SKIPPED -- test_req_schema_validation_success in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 1080.8394396305084s cumulative, 0.01629018783569336s individual

.
current test PASSED/SKIPPED -- test_both_schemas_validation_success in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 1080.8808982372284s cumulative, 0.0414586067199707s individual

.
current test PASSED/SKIPPED -- test_resp_schema_validation_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_validators.py: 1080.8980784416199s cumulative, 0.017180204391479492s individual


tests/test_error_handlers.py .
current test PASSED/SKIPPED -- test_data_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1080.9184188842773s cumulative, 0.020340442657470703s individual

.
current test PASSED/SKIPPED -- test_data_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1080.9370188713074s cumulative, 0.018599987030029297s individual

.
current test PASSED/SKIPPED -- test_media_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1080.9572167396545s cumulative, 0.02019786834716797s individual

.
current test PASSED/SKIPPED -- test_body_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1080.9870727062225s cumulative, 0.029855966567993164s individual

.
current test PASSED/SKIPPED -- test_media_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1081.010864019394s cumulative, 0.02379131317138672s individual

.
current test PASSED/SKIPPED -- test_body_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1081.041239976883s cumulative, 0.030375957489013672s individual

.
current test PASSED/SKIPPED -- test_caught_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1081.0697939395905s cumulative, 0.02855396270751953s individual

.
current test PASSED/SKIPPED -- test_invalid_add_exception_handler_input in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1081.0832769870758s cumulative, 0.013483047485351562s individual

.
current test PASSED/SKIPPED -- test_handler_single_exception_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1081.108899116516s cumulative, 0.025622129440307617s individual

.
current test PASSED/SKIPPED -- test_error_precedence_duplicate in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1081.1299991607666s cumulative, 0.02110004425048828s individual

.
current test PASSED/SKIPPED -- test_invalid_add_exception_handler_input in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1081.1436009407043s cumulative, 0.01360177993774414s individual

.
current test PASSED/SKIPPED -- test_invalid_add_exception_handler_input in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1081.155620098114s cumulative, 0.012019157409667969s individual

.
current test PASSED/SKIPPED -- test_uncaught_python_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1081.180951833725s cumulative, 0.025331735610961914s individual

.
current test PASSED/SKIPPED -- test_handler_multiple_exception_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1081.21337723732s cumulative, 0.0324254035949707s individual

.
current test PASSED/SKIPPED -- test_converted_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1081.2579774856567s cumulative, 0.04460024833679199s individual

.
current test PASSED/SKIPPED -- test_caught_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1081.2959854602814s cumulative, 0.03800797462463379s individual

.
current test PASSED/SKIPPED -- test_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1081.315052986145s cumulative, 0.01906752586364746s individual

.
current test PASSED/SKIPPED -- test_handler_multiple_exception_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1081.3634989261627s cumulative, 0.048445940017700195s individual

.
current test PASSED/SKIPPED -- test_uncaught_python_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1081.402313709259s cumulative, 0.03881478309631348s individual

.
current test PASSED/SKIPPED -- test_catch_http_no_route_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1081.4303061962128s cumulative, 0.02799248695373535s individual

.
current test PASSED/SKIPPED -- test_handle_not_defined in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1081.4454417228699s cumulative, 0.015135526657104492s individual

.
current test PASSED/SKIPPED -- test_uncaught_error_else in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1081.4628236293793s cumulative, 0.017381906509399414s individual

.
current test PASSED/SKIPPED -- test_error_precedence_duplicate in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1081.4895296096802s cumulative, 0.02670598030090332s individual

.
current test PASSED/SKIPPED -- test_error_precedence_subclass_order_indifference in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1081.5096883773804s cumulative, 0.020158767700195312s individual

.
current test PASSED/SKIPPED -- test_uncaught_python_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1081.5268957614899s cumulative, 0.01720738410949707s individual

.
current test PASSED/SKIPPED -- test_invalid_add_exception_handler_input in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1081.535073518753s cumulative, 0.008177757263183594s individual

.
current test PASSED/SKIPPED -- test_handler_signature_shim in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1081.544837474823s cumulative, 0.009763956069946289s individual

.
current test PASSED/SKIPPED -- test_handler_single_exception_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1081.5600669384003s cumulative, 0.015229463577270508s individual

.
current test PASSED/SKIPPED -- test_handler_must_be_coroutine_for_asgi in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1081.566205739975s cumulative, 0.006138801574707031s individual

.
current test PASSED/SKIPPED -- test_converted_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1081.5761086940765s cumulative, 0.0099029541015625s individual

.
current test PASSED/SKIPPED -- test_invalid_add_exception_handler_input in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1081.585324048996s cumulative, 0.009215354919433594s individual

.
current test PASSED/SKIPPED -- test_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1081.597936630249s cumulative, 0.012612581253051758s individual

.
current test PASSED/SKIPPED -- test_invalid_add_exception_handler_input in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1081.608993768692s cumulative, 0.011057138442993164s individual

.
current test PASSED/SKIPPED -- test_subclass_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1081.6196534633636s cumulative, 0.01065969467163086s individual

.
current test PASSED/SKIPPED -- test_invalid_add_exception_handler_input in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1081.6258425712585s cumulative, 0.006189107894897461s individual

.
current test PASSED/SKIPPED -- test_handler_multiple_exception_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1081.637454509735s cumulative, 0.0116119384765625s individual

.
current test PASSED/SKIPPED -- test_uncaught_python_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1081.6564803123474s cumulative, 0.019025802612304688s individual

.
current test PASSED/SKIPPED -- test_error_precedence_subclass_order_indifference in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1081.6678488254547s cumulative, 0.011368513107299805s individual

.
current test PASSED/SKIPPED -- test_uncaught_error_else in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1081.6811413764954s cumulative, 0.013292551040649414s individual

.
current test PASSED/SKIPPED -- test_error_precedence_subclass in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1081.6931176185608s cumulative, 0.011976242065429688s individual

.
current test PASSED/SKIPPED -- test_invalid_add_exception_handler_input in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1081.7065525054932s cumulative, 0.013434886932373047s individual

.
current test PASSED/SKIPPED -- test_uncaught_python_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1081.722415447235s cumulative, 0.01586294174194336s individual

.
current test PASSED/SKIPPED -- test_uncaught_python_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1081.7368755340576s cumulative, 0.014460086822509766s individual

.
current test PASSED/SKIPPED -- test_error_precedence_subclass in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1081.751308441162s cumulative, 0.014432907104492188s individual

.
current test PASSED/SKIPPED -- test_subclass_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1081.763634443283s cumulative, 0.01232600212097168s individual

.
current test PASSED/SKIPPED -- test_handler_multiple_exception_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1081.7756056785583s cumulative, 0.011971235275268555s individual

.
current test PASSED/SKIPPED -- test_handle_not_defined in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1081.7833416461945s cumulative, 0.0077359676361083984s individual

.
current test PASSED/SKIPPED -- test_body_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1081.7945358753204s cumulative, 0.011194229125976562s individual

.
current test PASSED/SKIPPED -- test_media_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1081.8081057071686s cumulative, 0.013569831848144531s individual

.
current test PASSED/SKIPPED -- test_data_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1081.818702697754s cumulative, 0.010596990585327148s individual

.
current test PASSED/SKIPPED -- test_data_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1081.8297407627106s cumulative, 0.011038064956665039s individual

.
current test PASSED/SKIPPED -- test_body_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1081.8383331298828s cumulative, 0.008592367172241211s individual

.
current test PASSED/SKIPPED -- test_media_is_set in /home/kaiyaok2/PythonProjects/falcon/tests/test_error_handlers.py: 1081.8501703739166s cumulative, 0.011837244033813477s individual


tests/test_inspect.py .
current test PASSED/SKIPPED -- test_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1081.8886201381683s cumulative, 0.038449764251708984s individual

.
current test PASSED/SKIPPED -- test_routes_empty_paths in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1081.8985121250153s cumulative, 0.009891986846923828s individual

.
current test PASSED/SKIPPED -- test_routes_empty_paths in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1081.913540840149s cumulative, 0.015028715133666992s individual

.
current test PASSED/SKIPPED -- test_dependent_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1081.9210379123688s cumulative, 0.007497072219848633s individual

.
current test PASSED/SKIPPED -- test_dependent_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1081.9267706871033s cumulative, 0.00573277473449707s individual

.
current test PASSED/SKIPPED -- test_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1081.9447746276855s cumulative, 0.01800394058227539s individual

.
current test PASSED/SKIPPED -- test_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1082.0291256904602s cumulative, 0.0843510627746582s individual

.
current test PASSED/SKIPPED -- test_empty_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1082.0444176197052s cumulative, 0.015291929244995117s individual

.
current test PASSED/SKIPPED -- test_static_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1082.0555765628815s cumulative, 0.011158943176269531s individual

.
current test PASSED/SKIPPED -- test_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1082.0883231163025s cumulative, 0.03274655342102051s individual

.
current test PASSED/SKIPPED -- test_empty_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1082.0962147712708s cumulative, 0.007891654968261719s individual

.
current test PASSED/SKIPPED -- test_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1082.103031873703s cumulative, 0.0068171024322509766s individual

.
current test PASSED/SKIPPED -- test_middleware_tree in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1082.133020401001s cumulative, 0.029988527297973633s individual

.
current test PASSED/SKIPPED -- test_app_no_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1082.1711750030518s cumulative, 0.03815460205078125s individual

.
current test PASSED/SKIPPED -- test_middleware_tree_item in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1082.195506811142s cumulative, 0.02433180809020996s individual

.
current test PASSED/SKIPPED -- test_middleware_class in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1082.2259438037872s cumulative, 0.030436992645263672s individual

.
current test PASSED/SKIPPED -- test_middleware_tree in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1082.2589962482452s cumulative, 0.03305244445800781s individual

.
current test PASSED/SKIPPED -- test_route_no_methods in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1082.2786302566528s cumulative, 0.019634008407592773s individual

.
current test PASSED/SKIPPED -- test_app_no_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1082.3126542568207s cumulative, 0.03402400016784668s individual

.
current test PASSED/SKIPPED -- test_info_class_repr_to_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1082.3542973995209s cumulative, 0.04164314270019531s individual

.
current test PASSED/SKIPPED -- test_middleware_method_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1082.3851308822632s cumulative, 0.03083348274230957s individual

.
current test PASSED/SKIPPED -- test_app_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1082.4281980991364s cumulative, 0.043067216873168945s individual

.
current test PASSED/SKIPPED -- test_route_no_methods in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1082.4483251571655s cumulative, 0.020127058029174805s individual

.
current test PASSED/SKIPPED -- test_middleware_tree_response_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1082.4779090881348s cumulative, 0.02958393096923828s individual

.
current test PASSED/SKIPPED -- test_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1082.566354751587s cumulative, 0.08844566345214844s individual

.
current test PASSED/SKIPPED -- test_middleware_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1082.608410835266s cumulative, 0.04205608367919922s individual

.
current test PASSED/SKIPPED -- test_sink_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1082.6215567588806s cumulative, 0.013145923614501953s individual

.
current test PASSED/SKIPPED -- test_middleware_tree_item in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1082.660383939743s cumulative, 0.03882718086242676s individual

.
current test PASSED/SKIPPED -- test_app_no_errors in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1082.7082116603851s cumulative, 0.047827720642089844s individual

.
current test PASSED/SKIPPED -- test_route_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1082.734100818634s cumulative, 0.025889158248901367s individual

.
current test PASSED/SKIPPED -- test_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1082.769047498703s cumulative, 0.03494668006896973s individual

.
current test PASSED/SKIPPED -- test_app_no_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1082.8181960582733s cumulative, 0.0491485595703125s individual

.
current test PASSED/SKIPPED -- test_static_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1082.830691576004s cumulative, 0.01249551773071289s individual

.
current test PASSED/SKIPPED -- test_middleware_class_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1082.8595016002655s cumulative, 0.02881002426147461s individual

.
current test PASSED/SKIPPED -- test_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1082.8831992149353s cumulative, 0.023697614669799805s individual

.
current test PASSED/SKIPPED -- test_app_no_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1082.9380118846893s cumulative, 0.05481266975402832s individual

.
current test PASSED/SKIPPED -- test_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1082.9484536647797s cumulative, 0.010441780090332031s individual

.
current test PASSED/SKIPPED -- test_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1082.969631433487s cumulative, 0.02117776870727539s individual

.
current test PASSED/SKIPPED -- test_route_method_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1082.9914727210999s cumulative, 0.02184128761291504s individual

.
current test PASSED/SKIPPED -- test_middleware_tree_no_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1083.0201165676117s cumulative, 0.02864384651184082s individual

.
current test PASSED/SKIPPED -- test_error_handler_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1083.0266697406769s cumulative, 0.006553173065185547s individual

.
current test PASSED/SKIPPED -- test_middleware_class_no_methods in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1083.0551438331604s cumulative, 0.028474092483520508s individual

.
current test PASSED/SKIPPED -- test_app_no_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1083.1103868484497s cumulative, 0.05524301528930664s individual

.
current test PASSED/SKIPPED -- test_app_static_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1083.1566314697266s cumulative, 0.04624462127685547s individual

.
current test PASSED/SKIPPED -- test_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1083.1678338050842s cumulative, 0.011202335357666016s individual

.
current test PASSED/SKIPPED -- test_app_no_errors in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1083.2221393585205s cumulative, 0.0543055534362793s individual

.
current test PASSED/SKIPPED -- test_route_method_info_suffix in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1083.227944612503s cumulative, 0.005805253982543945s individual

.
current test PASSED/SKIPPED -- test_string_visitor_class in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1083.2331430912018s cumulative, 0.005198478698730469s individual

.
current test PASSED/SKIPPED -- test_app_static_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1083.298346042633s cumulative, 0.06520295143127441s individual

.
current test PASSED/SKIPPED -- test_middleware_class_no_methods in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1083.3446502685547s cumulative, 0.04630422592163086s individual

.
current test PASSED/SKIPPED -- test_app_no_errors in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1083.4233644008636s cumulative, 0.07871413230895996s individual

.
current test PASSED/SKIPPED -- test_middleware_tree_no_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1083.4661889076233s cumulative, 0.042824506759643555s individual

.
current test PASSED/SKIPPED -- test_app_no_errors in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1083.5216553211212s cumulative, 0.055466413497924805s individual

.
current test PASSED/SKIPPED -- test_is_internal in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1083.5274679660797s cumulative, 0.005812644958496094s individual

.
current test PASSED/SKIPPED -- test_static_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1083.5386259555817s cumulative, 0.011157989501953125s individual

.
current test PASSED/SKIPPED -- test_app_no_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1083.6206035614014s cumulative, 0.08197760581970215s individual

.
current test PASSED/SKIPPED -- test_app_static_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1083.6786510944366s cumulative, 0.05804753303527832s individual

.
current test PASSED/SKIPPED -- test_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1083.7314512729645s cumulative, 0.05280017852783203s individual

.
current test PASSED/SKIPPED -- test_middleware_tree_response_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1083.761931180954s cumulative, 0.030479907989501953s individual

.
current test PASSED/SKIPPED -- test_middleware_tree_item in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1083.7938816547394s cumulative, 0.03195047378540039s individual

.
current test PASSED/SKIPPED -- test_app_static_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1083.8421108722687s cumulative, 0.048229217529296875s individual

.
current test PASSED/SKIPPED -- test_middleware_tree in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1083.8737659454346s cumulative, 0.031655073165893555s individual

.
current test PASSED/SKIPPED -- test_middleware_tree_no_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1083.9017210006714s cumulative, 0.027955055236816406s individual

.
current test PASSED/SKIPPED -- test_app_no_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1083.9564373493195s cumulative, 0.05471634864807129s individual

.
current test PASSED/SKIPPED -- test_app_no_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1084.0174491405487s cumulative, 0.06101179122924805s individual

.
current test PASSED/SKIPPED -- test_middleware_tree in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1084.0569715499878s cumulative, 0.039522409439086914s individual

.
current test PASSED/SKIPPED -- test_app_no_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1084.0926752090454s cumulative, 0.03570365905761719s individual

.
current test PASSED/SKIPPED -- test_middleware_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1084.122759103775s cumulative, 0.030083894729614258s individual

.
current test PASSED/SKIPPED -- test_route_method_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1084.1506180763245s cumulative, 0.027858972549438477s individual

.
current test PASSED/SKIPPED -- test_middleware_method_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1084.1816747188568s cumulative, 0.031056642532348633s individual

.
current test PASSED/SKIPPED -- test_middleware_tree in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1084.2154150009155s cumulative, 0.03374028205871582s individual

.
current test PASSED/SKIPPED -- test_middleware_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1084.2376792430878s cumulative, 0.02226424217224121s individual

.
current test PASSED/SKIPPED -- test_app_no_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1084.270793914795s cumulative, 0.03311467170715332s individual

.
current test PASSED/SKIPPED -- test_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1084.3080258369446s cumulative, 0.0372319221496582s individual

.
current test PASSED/SKIPPED -- test_middleware_tree_item in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1084.3352751731873s cumulative, 0.02724933624267578s individual

.
current test PASSED/SKIPPED -- test_middleware_class in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1084.3634300231934s cumulative, 0.028154850006103516s individual

.
current test PASSED/SKIPPED -- test_middleware_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1084.388634443283s cumulative, 0.02520442008972168s individual

.
current test PASSED/SKIPPED -- test_static_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1084.3978805541992s cumulative, 0.009246110916137695s individual

.
current test PASSED/SKIPPED -- test_static_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1084.4055190086365s cumulative, 0.007638454437255859s individual

.
current test PASSED/SKIPPED -- test_middleware_tree_no_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1084.4257159233093s cumulative, 0.020196914672851562s individual

.
current test PASSED/SKIPPED -- test_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1084.4430072307587s cumulative, 0.01729130744934082s individual

.
current test PASSED/SKIPPED -- test_app_no_routes in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1084.4707787036896s cumulative, 0.027771472930908203s individual

.
current test PASSED/SKIPPED -- test_middleware_class_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1084.4887704849243s cumulative, 0.01799178123474121s individual

.
current test PASSED/SKIPPED -- test_app_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1084.518712759018s cumulative, 0.02994227409362793s individual

.
current test PASSED/SKIPPED -- test_route_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1084.5381729602814s cumulative, 0.019460201263427734s individual

.
current test PASSED/SKIPPED -- test_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1084.5573942661285s cumulative, 0.01922130584716797s individual

.
current test PASSED/SKIPPED -- test_route_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1084.5857889652252s cumulative, 0.028394699096679688s individual

.
current test PASSED/SKIPPED -- test_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1084.6196160316467s cumulative, 0.03382706642150879s individual

.
current test PASSED/SKIPPED -- test_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1084.6280009746552s cumulative, 0.008384943008422852s individual

.
current test PASSED/SKIPPED -- test_app_no_sink in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1084.6595952510834s cumulative, 0.031594276428222656s individual

.
current test PASSED/SKIPPED -- test_route_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1084.673727273941s cumulative, 0.014132022857666016s individual

.
current test PASSED/SKIPPED -- test_sink_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1084.6816856861115s cumulative, 0.007958412170410156s individual

.
current test PASSED/SKIPPED -- test_error_handler_verbose in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1084.6871650218964s cumulative, 0.005479335784912109s individual

.
current test PASSED/SKIPPED -- test_inspect_visitor in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1084.6915447711945s cumulative, 0.004379749298095703s individual

.
current test PASSED/SKIPPED -- test_process in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1084.6942331790924s cumulative, 0.0026884078979492188s individual

.
current test PASSED/SKIPPED -- test_register_other_router in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1084.698989391327s cumulative, 0.00475621223449707s individual

.
current test PASSED/SKIPPED -- test_compiled_no_method_map in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1084.706312417984s cumulative, 0.007323026657104492s individual

.
current test PASSED/SKIPPED -- test_register_router_multiple_time in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1084.7100567817688s cumulative, 0.003744363784790039s individual

.
current test PASSED/SKIPPED -- test_register_router_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1084.7148201465607s cumulative, 0.004763364791870117s individual

.
current test PASSED/SKIPPED -- test_compiled_partial in /home/kaiyaok2/PythonProjects/falcon/tests/test_inspect.py: 1084.721212387085s cumulative, 0.006392240524291992s individual


tests/test_response_context.py .
current test PASSED/SKIPPED -- test_custom_response_context_factory in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_context.py: 1084.7248194217682s cumulative, 0.003607034683227539s individual

.
current test PASSED/SKIPPED -- test_default_response_context in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_context.py: 1084.7282593250275s cumulative, 0.0034399032592773438s individual

.
current test PASSED/SKIPPED -- test_custom_response_context_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_context.py: 1084.7319645881653s cumulative, 0.003705263137817383s individual

.
current test PASSED/SKIPPED -- test_custom_response_context in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_context.py: 1084.7354519367218s cumulative, 0.0034873485565185547s individual

.
current test PASSED/SKIPPED -- test_custom_response_context_failure in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_context.py: 1084.7387659549713s cumulative, 0.0033140182495117188s individual

.
current test PASSED/SKIPPED -- test_default_response_context in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_context.py: 1084.742463350296s cumulative, 0.0036973953247070312s individual

.
current test PASSED/SKIPPED -- test_custom_response_context in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_context.py: 1084.746083021164s cumulative, 0.003619670867919922s individual

.
current test PASSED/SKIPPED -- test_custom_response_context_factory in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_context.py: 1084.749463558197s cumulative, 0.0033805370330810547s individual


tests/asgi/test_misc.py .
current test PASSED/SKIPPED -- test_python_error_not_impl in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_misc.py: 1084.7586779594421s cumulative, 0.009214401245117188s individual

.
current test PASSED/SKIPPED -- test_http_status_not_impl in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_misc.py: 1084.763807296753s cumulative, 0.005129337310791016s individual

.
current test PASSED/SKIPPED -- test_http_error_not_impl in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_misc.py: 1084.7692790031433s cumulative, 0.005471706390380859s individual


tests/test_cmd_inspect_app.py F
current test FAILED -- test_routes_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 1085.0496921539307s cumulative, 0.2804131507873535s individual

F
current test FAILED -- test_inspect in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 1085.2726602554321s cumulative, 0.22296810150146484s individual

F
current test FAILED -- test_inspect in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 1085.487805366516s cumulative, 0.21514511108398438s individual

F
current test FAILED -- test_inspect in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 1085.6155111789703s cumulative, 0.12770581245422363s individual

F
current test FAILED -- test_inspect in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 1085.7238392829895s cumulative, 0.10832810401916504s individual

F
current test FAILED -- test_routes_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 1085.8339688777924s cumulative, 0.11012959480285645s individual

F
current test FAILED -- test_routes_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 1085.9447026252747s cumulative, 0.1107337474822998s individual

F
current test FAILED -- test_routes_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 1086.029695034027s cumulative, 0.0849924087524414s individual

F
current test FAILED -- test_load_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 1086.1264505386353s cumulative, 0.0967555046081543s individual

F
current test FAILED -- test_load_app_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 1086.2347033023834s cumulative, 0.10825276374816895s individual

F
current test FAILED -- test_load_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 1086.3362214565277s cumulative, 0.10151815414428711s individual

F
current test FAILED -- test_load_app_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 1086.4468655586243s cumulative, 0.11064410209655762s individual

F
current test FAILED -- test_load_app_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 1086.584926366806s cumulative, 0.1380608081817627s individual


tests/test_response_body.py .
current test PASSED/SKIPPED -- test_response_body_rendition_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 1086.5981273651123s cumulative, 0.013200998306274414s individual

.
current test PASSED/SKIPPED -- test_append_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 1086.6034243106842s cumulative, 0.005296945571899414s individual

.
current test PASSED/SKIPPED -- test_append_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 1086.6109273433685s cumulative, 0.007503032684326172s individual

.
current test PASSED/SKIPPED -- test_response_repr in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 1086.6149842739105s cumulative, 0.0040569305419921875s individual

.
current test PASSED/SKIPPED -- test_content_length_not_set_when_streaming_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 1086.6289064884186s cumulative, 0.01392221450805664s individual

.
current test PASSED/SKIPPED -- test_content_length_not_set_when_streaming_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 1086.6374342441559s cumulative, 0.008527755737304688s individual

.
current test PASSED/SKIPPED -- test_unsupported_response_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 1086.6482734680176s cumulative, 0.010839223861694336s individual

.
current test PASSED/SKIPPED -- test_content_length_not_set_when_streaming_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 1086.6539297103882s cumulative, 0.005656242370605469s individual

.
current test PASSED/SKIPPED -- test_content_length_not_set_when_streaming_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 1086.6598782539368s cumulative, 0.005948543548583984s individual

.
current test PASSED/SKIPPED -- test_response_repr in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 1086.6632964611053s cumulative, 0.0034182071685791016s individual

.
current test PASSED/SKIPPED -- test_content_length_set_on_head_with_no_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_body.py: 1086.6698904037476s cumulative, 0.006593942642211914s individual


tests/asgi/test_asgi_conductor.py .
current test PASSED/SKIPPED -- test_generic_request in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 1086.677083492279s cumulative, 0.007193088531494141s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 1086.6844091415405s cumulative, 0.007325649261474609s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 1086.692275762558s cumulative, 0.007866621017456055s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 1086.6998794078827s cumulative, 0.007603645324707031s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 1086.706957578659s cumulative, 0.0070781707763671875s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 1086.7140197753906s cumulative, 0.007062196731567383s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 1086.7259030342102s cumulative, 0.011883258819580078s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 1086.7326242923737s cumulative, 0.0067212581634521484s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 1086.7387640476227s cumulative, 0.0061397552490234375s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 1086.7450757026672s cumulative, 0.006311655044555664s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 1086.7501320838928s cumulative, 0.0050563812255859375s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 1086.7554728984833s cumulative, 0.0053408145904541016s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 1086.7606954574585s cumulative, 0.0052225589752197266s individual

.
current test PASSED/SKIPPED -- test_wsgi_not_supported in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 1086.7694787979126s cumulative, 0.008783340454101562s individual

.
current test PASSED/SKIPPED -- test_generic_request in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 1086.7756283283234s cumulative, 0.0061495304107666016s individual

.
current test PASSED/SKIPPED -- test_default_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 1086.7809064388275s cumulative, 0.005278110504150391s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 1086.7873363494873s cumulative, 0.006429910659790039s individual

.
current test PASSED/SKIPPED -- test_responders in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_conductor.py: 1086.7952976226807s cumulative, 0.007961273193359375s individual


tests/test_utils.py .
current test PASSED/SKIPPED -- test_default_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1086.8120691776276s cumulative, 0.016771554946899414s individual

.
current test PASSED/SKIPPED -- test_simulate_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1086.8215034008026s cumulative, 0.009434223175048828s individual

.
current test PASSED/SKIPPED -- test_simulate_hostname in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1086.830351114273s cumulative, 0.008847713470458984s individual

.
current test PASSED/SKIPPED -- test_simulate_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1086.8426277637482s cumulative, 0.012276649475097656s individual

.
current test PASSED/SKIPPED -- test_cached_text_in_result in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1086.850284576416s cumulative, 0.00765681266784668s individual

.
current test PASSED/SKIPPED -- test_simulate_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1086.858677148819s cumulative, 0.008392572402954102s individual

.
current test PASSED/SKIPPED -- test_query_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1086.8695950508118s cumulative, 0.010917901992797852s individual

.
current test PASSED/SKIPPED -- test_path_must_start_with_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1086.8752439022064s cumulative, 0.00564885139465332s individual

.
current test PASSED/SKIPPED -- test_simulate_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1086.8821334838867s cumulative, 0.0068895816802978516s individual

.
current test PASSED/SKIPPED -- test_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1086.887681722641s cumulative, 0.005548238754272461s individual

.
current test PASSED/SKIPPED -- test_simulate_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1086.8992941379547s cumulative, 0.011612415313720703s individual

.
current test PASSED/SKIPPED -- test_query_string_in_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1086.9137079715729s cumulative, 0.014413833618164062s individual

.
current test PASSED/SKIPPED -- test_query_string_no_question in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1086.9191131591797s cumulative, 0.0054051876068115234s individual

.
current test PASSED/SKIPPED -- test_override_method_with_extras in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1086.9291410446167s cumulative, 0.010027885437011719s individual

.
current test PASSED/SKIPPED -- test_default_headers_with_override in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1086.939278125763s cumulative, 0.010137081146240234s individual


tests/test_response_media.py .
current test PASSED/SKIPPED -- test_non_ascii_json_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 1086.9487917423248s cumulative, 0.009513616561889648s individual

.
current test PASSED/SKIPPED -- test_media_rendered_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 1086.957100868225s cumulative, 0.008309125900268555s individual

.
current test PASSED/SKIPPED -- test_unknown_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 1086.9660120010376s cumulative, 0.0089111328125s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 1086.9766504764557s cumulative, 0.01063847541809082s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 1086.993747472763s cumulative, 0.017096996307373047s individual

.
current test PASSED/SKIPPED -- test_text in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 1087.0161790847778s cumulative, 0.022431612014770508s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 1087.0370213985443s cumulative, 0.020842313766479492s individual

.
current test PASSED/SKIPPED -- test_non_ascii_json_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 1087.0593707561493s cumulative, 0.02234935760498047s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 1087.0803215503693s cumulative, 0.020950794219970703s individual

.
current test PASSED/SKIPPED -- test_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 1087.1044454574585s cumulative, 0.0241239070892334s individual

.
current test PASSED/SKIPPED -- test_mimeparse_edgecases in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 1087.1253077983856s cumulative, 0.020862340927124023s individual

.
current test PASSED/SKIPPED -- test_non_ascii_json_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 1087.1477389335632s cumulative, 0.022431135177612305s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 1087.1744105815887s cumulative, 0.026671648025512695s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 1087.1914496421814s cumulative, 0.017039060592651367s individual

.
current test PASSED/SKIPPED -- test_non_ascii_json_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 1087.206164598465s cumulative, 0.014714956283569336s individual

.
current test PASSED/SKIPPED -- test_data in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 1087.2182230949402s cumulative, 0.012058496475219727s individual

.
current test PASSED/SKIPPED -- test_default_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 1087.2334620952606s cumulative, 0.01523900032043457s individual

.
current test PASSED/SKIPPED -- test_use_cached_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 1087.2467300891876s cumulative, 0.013267993927001953s individual

.
current test PASSED/SKIPPED -- test_non_ascii_json_serialization in /home/kaiyaok2/PythonProjects/falcon/tests/test_response_media.py: 1087.257702589035s cumulative, 0.01097249984741211s individual


tests/test_request_attrs.py .
current test PASSED/SKIPPED -- test_client_accepts in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.2712740898132s cumulative, 0.013571500778198242s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.2777910232544s cumulative, 0.006516933441162109s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.2835445404053s cumulative, 0.005753517150878906s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.2917931079865s cumulative, 0.008248567581176758s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.2980003356934s cumulative, 0.00620722770690918s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.308594942093s cumulative, 0.010594606399536133s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.315889120102s cumulative, 0.007294178009033203s individual

.
current test PASSED/SKIPPED -- test_nonlatin_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.3238003253937s cumulative, 0.007911205291748047s individual

.
current test PASSED/SKIPPED -- test_netloc_from_env in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.3297593593597s cumulative, 0.005959033966064453s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.3355588912964s cumulative, 0.005799531936645508s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.3410305976868s cumulative, 0.005471706390380859s individual

.
current test PASSED/SKIPPED -- test_range_unit in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.3477606773376s cumulative, 0.006730079650878906s individual

.
current test PASSED/SKIPPED -- test_date_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.3599243164062s cumulative, 0.012163639068603516s individual

.
current test PASSED/SKIPPED -- test_etag_parsing_helper in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.3661732673645s cumulative, 0.006248950958251953s individual

.
current test PASSED/SKIPPED -- test_port_explicit in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.3705949783325s cumulative, 0.004421710968017578s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.3770451545715s cumulative, 0.006450176239013672s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.38254570961s cumulative, 0.0055005550384521484s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.3874487876892s cumulative, 0.004903078079223633s individual

.
current test PASSED/SKIPPED -- test_empty_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.39413022995s cumulative, 0.0066814422607421875s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.40492105484s cumulative, 0.010790824890136719s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.4142408370972s cumulative, 0.009319782257080078s individual

.
current test PASSED/SKIPPED -- test_host in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.420872926712s cumulative, 0.006632089614868164s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.427793264389s cumulative, 0.006920337677001953s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.4333727359772s cumulative, 0.005579471588134766s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.4412052631378s cumulative, 0.007832527160644531s individual

.
current test PASSED/SKIPPED -- test_date in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.4471929073334s cumulative, 0.005987644195556641s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.4526443481445s cumulative, 0.0054514408111572266s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.4569909572601s cumulative, 0.004346609115600586s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.464549779892s cumulative, 0.0075588226318359375s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.4695415496826s cumulative, 0.004991769790649414s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.4753687381744s cumulative, 0.005827188491821289s individual

.
current test PASSED/SKIPPED -- test_scheme_https in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.4806597232819s cumulative, 0.005290985107421875s individual

.
current test PASSED/SKIPPED -- test_date in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.4865918159485s cumulative, 0.0059320926666259766s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.4912621974945s cumulative, 0.004670381546020508s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.4966235160828s cumulative, 0.005361318588256836s individual

.
current test PASSED/SKIPPED -- test_netloc_from_env in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.5006535053253s cumulative, 0.004029989242553711s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.505714416504s cumulative, 0.005060911178588867s individual

.
current test PASSED/SKIPPED -- test_app_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.5099775791168s cumulative, 0.004263162612915039s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.520563364029s cumulative, 0.010585784912109375s individual

.
current test PASSED/SKIPPED -- test_scheme_https in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.5276038646698s cumulative, 0.007040500640869141s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.536554813385s cumulative, 0.008950948715209961s individual

.
current test PASSED/SKIPPED -- test_subdomain in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.5467128753662s cumulative, 0.010158061981201172s individual

.
current test PASSED/SKIPPED -- test_client_accepts_props in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.5543897151947s cumulative, 0.007676839828491211s individual

.
current test PASSED/SKIPPED -- test_etag_parsing_helper in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.560129404068s cumulative, 0.005739688873291016s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.5671310424805s cumulative, 0.007001638412475586s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.5754511356354s cumulative, 0.008320093154907227s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.585952281952s cumulative, 0.01050114631652832s individual

.
current test PASSED/SKIPPED -- test_subdomain in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.5936880111694s cumulative, 0.007735729217529297s individual

.
current test PASSED/SKIPPED -- test_content_length_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.6007099151611s cumulative, 0.007021903991699219s individual

.
current test PASSED/SKIPPED -- test_etag_is_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.6146776676178s cumulative, 0.013967752456665039s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.6238734722137s cumulative, 0.009195804595947266s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.6341474056244s cumulative, 0.010273933410644531s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.6438117027283s cumulative, 0.009664297103881836s individual

.
current test PASSED/SKIPPED -- test_date_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.6583607196808s cumulative, 0.014549016952514648s individual

.
current test PASSED/SKIPPED -- test_port_explicit in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.6675610542297s cumulative, 0.009200334548950195s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.6744492053986s cumulative, 0.006888151168823242s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.6821355819702s cumulative, 0.0076863765716552734s individual

.
current test PASSED/SKIPPED -- test_uri in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.6916387081146s cumulative, 0.00950312614440918s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.6974387168884s cumulative, 0.005800008773803711s individual

.
current test PASSED/SKIPPED -- test_client_accepts in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.705200433731s cumulative, 0.007761716842651367s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.7108044624329s cumulative, 0.0056040287017822266s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.7158303260803s cumulative, 0.0050258636474609375s individual

.
current test PASSED/SKIPPED -- test_etag_parsing_helper in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.7201619148254s cumulative, 0.0043315887451171875s individual

.
current test PASSED/SKIPPED -- test_netloc_nondefault_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.7244346141815s cumulative, 0.0042726993560791016s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.7293500900269s cumulative, 0.004915475845336914s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.7337503433228s cumulative, 0.0044002532958984375s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.738216638565s cumulative, 0.00446629524230957s individual

.
current test PASSED/SKIPPED -- test_netloc_nondefault_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.742220878601s cumulative, 0.004004240036010742s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.7470288276672s cumulative, 0.004807949066162109s individual

.
current test PASSED/SKIPPED -- test_netloc_default_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.7512419223785s cumulative, 0.004213094711303711s individual

.
current test PASSED/SKIPPED -- test_date_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.756442308426s cumulative, 0.005200386047363281s individual

.
current test PASSED/SKIPPED -- test_date_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.7626485824585s cumulative, 0.0062062740325927734s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.7684969902039s cumulative, 0.005848407745361328s individual

.
current test PASSED/SKIPPED -- test_netloc_default_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.7733550071716s cumulative, 0.0048580169677734375s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.7773804664612s cumulative, 0.004025459289550781s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.7820925712585s cumulative, 0.004712104797363281s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.787094116211s cumulative, 0.005001544952392578s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.7913978099823s cumulative, 0.004303693771362305s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.7961411476135s cumulative, 0.004743337631225586s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.8008046150208s cumulative, 0.0046634674072265625s individual

.
current test PASSED/SKIPPED -- test_netloc_nondefault_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.8049292564392s cumulative, 0.004124641418457031s individual

.
current test PASSED/SKIPPED -- test_netloc_default_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.809128522873s cumulative, 0.00419926643371582s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.81369638443s cumulative, 0.004567861557006836s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.8183045387268s cumulative, 0.004608154296875s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.8241448402405s cumulative, 0.005840301513671875s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.8298466205597s cumulative, 0.005701780319213867s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.8364160060883s cumulative, 0.006569385528564453s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.841656446457s cumulative, 0.005240440368652344s individual

.
current test PASSED/SKIPPED -- test_port_explicit in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.846180677414s cumulative, 0.00452423095703125s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.8514151573181s cumulative, 0.005234479904174805s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.8561878204346s cumulative, 0.004772663116455078s individual

.
current test PASSED/SKIPPED -- test_range_unit in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.8614563941956s cumulative, 0.005268573760986328s individual

.
current test PASSED/SKIPPED -- test_empty in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.8652324676514s cumulative, 0.003776073455810547s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.8703603744507s cumulative, 0.005127906799316406s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.8751277923584s cumulative, 0.004767417907714844s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.8800294399261s cumulative, 0.0049016475677490234s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.8848974704742s cumulative, 0.004868030548095703s individual

.
current test PASSED/SKIPPED -- test_etag_parsing_helper in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.8891294002533s cumulative, 0.004231929779052734s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.894062280655s cumulative, 0.004932880401611328s individual

.
current test PASSED/SKIPPED -- test_netloc_default_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.898295879364s cumulative, 0.004233598709106445s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.908744096756s cumulative, 0.010448217391967773s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.912701845169s cumulative, 0.0039577484130859375s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.9172065258026s cumulative, 0.004504680633544922s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.921379327774s cumulative, 0.004172801971435547s individual

.
current test PASSED/SKIPPED -- test_app_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.9243099689484s cumulative, 0.0029306411743164062s individual

.
current test PASSED/SKIPPED -- test_app_present in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.9281618595123s cumulative, 0.0038518905639648438s individual

.
current test PASSED/SKIPPED -- test_uri_https in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.9323194026947s cumulative, 0.004157543182373047s individual

.
current test PASSED/SKIPPED -- test_netloc_nondefault_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.9362306594849s cumulative, 0.003911256790161133s individual

.
current test PASSED/SKIPPED -- test_nonlatin_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.9402718544006s cumulative, 0.004041194915771484s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.944700717926s cumulative, 0.004428863525390625s individual

.
current test PASSED/SKIPPED -- test_uri_https in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.9488382339478s cumulative, 0.004137516021728516s individual

.
current test PASSED/SKIPPED -- test_netloc_nondefault_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.952893257141s cumulative, 0.004055023193359375s individual

.
current test PASSED/SKIPPED -- test_relative_uri in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.9568243026733s cumulative, 0.0039310455322265625s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.9608929157257s cumulative, 0.004068613052368164s individual

.
current test PASSED/SKIPPED -- test_netloc_from_env in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.9645800590515s cumulative, 0.003687143325805664s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.969413280487s cumulative, 0.004833221435546875s individual

.
current test PASSED/SKIPPED -- test_range_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.9769098758698s cumulative, 0.00749659538269043s individual

.
current test PASSED/SKIPPED -- test_bogus_content_length_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.9805028438568s cumulative, 0.003592967987060547s individual

.
current test PASSED/SKIPPED -- test_scheme_https in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.9841756820679s cumulative, 0.0036728382110595703s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.9880106449127s cumulative, 0.003834962844848633s individual

.
current test PASSED/SKIPPED -- test_uri in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.9912021160126s cumulative, 0.0031914710998535156s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.9950275421143s cumulative, 0.0038254261016845703s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1087.9987182617188s cumulative, 0.0036907196044921875s individual

.
current test PASSED/SKIPPED -- test_uri_http_1_0 in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.0026109218597s cumulative, 0.003892660140991211s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.006850719452s cumulative, 0.004239797592163086s individual

.
current test PASSED/SKIPPED -- test_date_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.0114800930023s cumulative, 0.004629373550415039s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.015302181244s cumulative, 0.0038220882415771484s individual

.
current test PASSED/SKIPPED -- test_content_type_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.018466949463s cumulative, 0.0031647682189941406s individual

.
current test PASSED/SKIPPED -- test_bogus_content_length_nan in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.0220830440521s cumulative, 0.0036160945892333984s individual

.
current test PASSED/SKIPPED -- test_netloc_default_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.0254516601562s cumulative, 0.0033686161041259766s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.0294647216797s cumulative, 0.0040130615234375s individual

.
current test PASSED/SKIPPED -- test_missing_attribute_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.0330591201782s cumulative, 0.0035943984985351562s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.0374376773834s cumulative, 0.004378557205200195s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.041831254959s cumulative, 0.004393577575683594s individual

.
current test PASSED/SKIPPED -- test_app_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.0450587272644s cumulative, 0.0032274723052978516s individual

.
current test PASSED/SKIPPED -- test_client_accepts_bogus in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.0484902858734s cumulative, 0.003431558609008789s individual

.
current test PASSED/SKIPPED -- test_client_accepts_bogus in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.0529205799103s cumulative, 0.004430294036865234s individual

.
current test PASSED/SKIPPED -- test_content_type_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.0561926364899s cumulative, 0.0032720565795898438s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.0603477954865s cumulative, 0.004155158996582031s individual

.
current test PASSED/SKIPPED -- test_netloc_default_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.0640006065369s cumulative, 0.003652811050415039s individual

.
current test PASSED/SKIPPED -- test_relative_uri in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.068202495575s cumulative, 0.0042018890380859375s individual

.
current test PASSED/SKIPPED -- test_missing_qs in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.0710711479187s cumulative, 0.00286865234375s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.0755178928375s cumulative, 0.004446744918823242s individual

.
current test PASSED/SKIPPED -- test_date_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.0795896053314s cumulative, 0.004071712493896484s individual

.
current test PASSED/SKIPPED -- test_empty_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.0829610824585s cumulative, 0.0033714771270751953s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.0873427391052s cumulative, 0.004381656646728516s individual

.
current test PASSED/SKIPPED -- test_port_explicit in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.091162443161s cumulative, 0.003819704055786133s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.095240354538s cumulative, 0.004077911376953125s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.099196434021s cumulative, 0.0039560794830322266s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.103019952774s cumulative, 0.003823518753051758s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.1068069934845s cumulative, 0.0037870407104492188s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.110850572586s cumulative, 0.0040435791015625s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.1147882938385s cumulative, 0.003937721252441406s individual

.
current test PASSED/SKIPPED -- test_netloc_from_env in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.1184339523315s cumulative, 0.003645658493041992s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.1226224899292s cumulative, 0.00418853759765625s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.1268696784973s cumulative, 0.004247188568115234s individual

.
current test PASSED/SKIPPED -- test_client_accepts_props in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.1313707828522s cumulative, 0.0045011043548583984s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.1360669136047s cumulative, 0.0046961307525634766s individual

.
current test PASSED/SKIPPED -- test_port_explicit in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.139609336853s cumulative, 0.0035424232482910156s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.1435663700104s cumulative, 0.003957033157348633s individual

.
current test PASSED/SKIPPED -- test_etag_parsing_helper in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.1472256183624s cumulative, 0.0036592483520507812s individual

.
current test PASSED/SKIPPED -- test_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.151041984558s cumulative, 0.003816366195678711s individual

.
current test PASSED/SKIPPED -- test_port_explicit in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.1584737300873s cumulative, 0.007431745529174805s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.1625986099243s cumulative, 0.004124879837036133s individual

.
current test PASSED/SKIPPED -- test_empty in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.1663835048676s cumulative, 0.0037848949432373047s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.1710472106934s cumulative, 0.004663705825805664s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.1755509376526s cumulative, 0.004503726959228516s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.1794884204865s cumulative, 0.003937482833862305s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.183393239975s cumulative, 0.0039048194885253906s individual

.
current test PASSED/SKIPPED -- test_date_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.1875865459442s cumulative, 0.004193305969238281s individual

.
current test PASSED/SKIPPED -- test_bogus_content_length_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.1911752223969s cumulative, 0.0035886764526367188s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.195713043213s cumulative, 0.004537820816040039s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.2007925510406s cumulative, 0.005079507827758789s individual

.
current test PASSED/SKIPPED -- test_netloc_from_env in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.2048964500427s cumulative, 0.004103899002075195s individual

.
current test PASSED/SKIPPED -- test_uri_http_1_0 in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.209384918213s cumulative, 0.004488468170166016s individual

.
current test PASSED/SKIPPED -- test_date in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.2148835659027s cumulative, 0.005498647689819336s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.2190656661987s cumulative, 0.004182100296020508s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.2234489917755s cumulative, 0.0043833255767822266s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.2276470661163s cumulative, 0.0041980743408203125s individual

.
current test PASSED/SKIPPED -- test_bogus_content_length_nan in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.2312648296356s cumulative, 0.0036177635192871094s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.2353553771973s cumulative, 0.004090547561645508s individual

.
current test PASSED/SKIPPED -- test_scheme_https in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.2390801906586s cumulative, 0.003724813461303711s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.2435419559479s cumulative, 0.004461765289306641s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.247320175171s cumulative, 0.003778219223022461s individual

.
current test PASSED/SKIPPED -- test_reconstruct_url in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.2513971328735s cumulative, 0.004076957702636719s individual

.
current test PASSED/SKIPPED -- test_netloc_nondefault_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.2553288936615s cumulative, 0.003931760787963867s individual

.
current test PASSED/SKIPPED -- test_nonlatin_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.2598881721497s cumulative, 0.00455927848815918s individual

.
current test PASSED/SKIPPED -- test_nonlatin_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.2646048069s cumulative, 0.004716634750366211s individual

.
current test PASSED/SKIPPED -- test_nonlatin_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.268805027008s cumulative, 0.0042002201080322266s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.2745566368103s cumulative, 0.005751609802246094s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.2784941196442s cumulative, 0.003937482833862305s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.2831225395203s cumulative, 0.004628419876098633s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.2873525619507s cumulative, 0.004230022430419922s individual

.
current test PASSED/SKIPPED -- test_date_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.2915222644806s cumulative, 0.0041697025299072266s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.2956743240356s cumulative, 0.004152059555053711s individual

.
current test PASSED/SKIPPED -- test_scheme_https in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.299461364746s cumulative, 0.0037870407104492188s individual

.
current test PASSED/SKIPPED -- test_etag_is_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.3026819229126s cumulative, 0.0032205581665039062s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.3070611953735s cumulative, 0.0043792724609375s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.3114652633667s cumulative, 0.0044040679931640625s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.3160619735718s cumulative, 0.004596710205078125s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.3209280967712s cumulative, 0.004866123199462891s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.3254606723785s cumulative, 0.004532575607299805s individual

.
current test PASSED/SKIPPED -- test_missing_attribute_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.3299305438995s cumulative, 0.004469871520996094s individual

.
current test PASSED/SKIPPED -- test_app_present in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.3338289260864s cumulative, 0.0038983821868896484s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.3383829593658s cumulative, 0.004554033279418945s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.3427498340607s cumulative, 0.004366874694824219s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.3471348285675s cumulative, 0.0043849945068359375s individual

.
current test PASSED/SKIPPED -- test_host in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.350777387619s cumulative, 0.003642559051513672s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.3548049926758s cumulative, 0.004027605056762695s individual

.
current test PASSED/SKIPPED -- test_nonlatin_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.3583862781525s cumulative, 0.0035812854766845703s individual

.
current test PASSED/SKIPPED -- test_date_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.3625872135162s cumulative, 0.004200935363769531s individual

.
current test PASSED/SKIPPED -- test_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.3668382167816s cumulative, 0.004251003265380859s individual

.
current test PASSED/SKIPPED -- test_date in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.3709800243378s cumulative, 0.004141807556152344s individual

.
current test PASSED/SKIPPED -- test_netloc_from_env in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.3751590251923s cumulative, 0.0041790008544921875s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.379681110382s cumulative, 0.004522085189819336s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.3841836452484s cumulative, 0.004502534866333008s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.3881108760834s cumulative, 0.0039272308349609375s individual

.
current test PASSED/SKIPPED -- test_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.3916544914246s cumulative, 0.0035436153411865234s individual

.
current test PASSED/SKIPPED -- test_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.3960795402527s cumulative, 0.004425048828125s individual

.
current test PASSED/SKIPPED -- test_scheme_https in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.400265455246s cumulative, 0.004185914993286133s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.4044361114502s cumulative, 0.004170656204223633s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.4083414077759s cumulative, 0.0039052963256835938s individual

.
current test PASSED/SKIPPED -- test_date_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.411725282669s cumulative, 0.0033838748931884766s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.416094303131s cumulative, 0.004369020462036133s individual

.
current test PASSED/SKIPPED -- test_date in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.4209825992584s cumulative, 0.004888296127319336s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.4284341335297s cumulative, 0.007451534271240234s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.4332094192505s cumulative, 0.004775285720825195s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.4376509189606s cumulative, 0.004441499710083008s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.4417397975922s cumulative, 0.004088878631591797s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.4463884830475s cumulative, 0.004648685455322266s individual

.
current test PASSED/SKIPPED -- test_etag_parsing_helper in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.4501428604126s cumulative, 0.0037543773651123047s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.45410323143s cumulative, 0.003960371017456055s individual

.
current test PASSED/SKIPPED -- test_date in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.457983493805s cumulative, 0.0038802623748779297s individual

.
current test PASSED/SKIPPED -- test_date_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.4617252349854s cumulative, 0.003741741180419922s individual

.
current test PASSED/SKIPPED -- test_scheme_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.4659299850464s cumulative, 0.004204750061035156s individual

.
current test PASSED/SKIPPED -- test_reconstruct_url in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.4695150852203s cumulative, 0.0035851001739501953s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.4741282463074s cumulative, 0.004613161087036133s individual

.
current test PASSED/SKIPPED -- test_date_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.4786276817322s cumulative, 0.0044994354248046875s individual

.
current test PASSED/SKIPPED -- test_client_prefers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.4850738048553s cumulative, 0.006446123123168945s individual

.
current test PASSED/SKIPPED -- test_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.4891624450684s cumulative, 0.004088640213012695s individual

.
current test PASSED/SKIPPED -- test_attribute_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.4937572479248s cumulative, 0.0045948028564453125s individual

.
current test PASSED/SKIPPED -- test_content_length_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.4975326061249s cumulative, 0.003775358200073242s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.5025894641876s cumulative, 0.005056858062744141s individual

.
current test PASSED/SKIPPED -- test_range_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.5127971172333s cumulative, 0.010207653045654297s individual

.
current test PASSED/SKIPPED -- test_client_prefers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.5169875621796s cumulative, 0.0041904449462890625s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.5217695236206s cumulative, 0.004781961441040039s individual

.
current test PASSED/SKIPPED -- test_etag in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.5266678333282s cumulative, 0.0048983097076416016s individual

.
current test PASSED/SKIPPED -- test_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_attrs.py: 1088.5342712402344s cumulative, 0.00760340690612793s individual


tests/asgi/test_asgi_helpers.py .
current test PASSED/SKIPPED -- test_intricate_app in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_asgi_helpers.py: 1088.5400052070618s cumulative, 0.005733966827392578s individual


tests/asgi/test_sse.py .
current test PASSED/SKIPPED -- test_use_media_handler_dumps in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_sse.py: 1088.5534398555756s cumulative, 0.013434648513793945s individual

.
current test PASSED/SKIPPED -- test_single_event in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_sse.py: 1088.5652990341187s cumulative, 0.01185917854309082s individual

.
current test PASSED/SKIPPED -- test_invalid_event_values in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_sse.py: 1088.5690956115723s cumulative, 0.0037965774536132812s individual

.
current test PASSED/SKIPPED -- test_no_events in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_sse.py: 1088.575203180313s cumulative, 0.0061075687408447266s individual

.
current test PASSED/SKIPPED -- test_multiple_events in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_sse.py: 1088.5933320522308s cumulative, 0.01812887191772461s individual

.
current test PASSED/SKIPPED -- test_non_iterable in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_sse.py: 1088.6012053489685s cumulative, 0.007873296737670898s individual

.
current test PASSED/SKIPPED -- test_no_json_media_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_sse.py: 1088.6094694137573s cumulative, 0.00826406478881836s individual

.
current test PASSED/SKIPPED -- test_multiple_events_early_disconnect in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_sse.py: 1088.7043917179108s cumulative, 0.09492230415344238s individual


tests/test_buffered_reader.py .
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1088.7084040641785s cumulative, 0.004012346267700195s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1088.7116303443909s cumulative, 0.0032262802124023438s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1088.7157657146454s cumulative, 0.0041353702545166016s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1088.7190976142883s cumulative, 0.003331899642944336s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1088.7226765155792s cumulative, 0.0035789012908935547s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1088.7258665561676s cumulative, 0.0031900405883789062s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1088.7290647029877s cumulative, 0.0031981468200683594s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1088.7327427864075s cumulative, 0.0036780834197998047s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1088.737053155899s cumulative, 0.0043103694915771484s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1088.741399049759s cumulative, 0.004345893859863281s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1088.745189189911s cumulative, 0.003790140151977539s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1088.748883008957s cumulative, 0.003693819046020508s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1088.7529246807098s cumulative, 0.0040416717529296875s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1088.757157087326s cumulative, 0.0042324066162109375s individual

.
current test PASSED/SKIPPED -- test_readlines_hint in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1088.7639937400818s cumulative, 0.006836652755737305s individual

.
current test PASSED/SKIPPED -- test_fragmented_reads in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1091.834231853485s cumulative, 3.0702381134033203s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1091.8407080173492s cumulative, 0.006476163864135742s individual

.
current test PASSED/SKIPPED -- test_pipe_until in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.2075731754303s cumulative, 1.3668651580810547s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.2164571285248s cumulative, 0.008883953094482422s individual

.
current test PASSED/SKIPPED -- test_read_until_missing_delimiter in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.2237668037415s cumulative, 0.007309675216674805s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.2284970283508s cumulative, 0.004730224609375s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.2324073314667s cumulative, 0.0039103031158447266s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.2357063293457s cumulative, 0.0032989978790283203s individual

.
current test PASSED/SKIPPED -- test_readline_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.2394437789917s cumulative, 0.0037374496459960938s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.2433063983917s cumulative, 0.003862619400024414s individual

.
current test PASSED/SKIPPED -- test_bounded_read in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.2464559078217s cumulative, 0.0031495094299316406s individual

.
current test PASSED/SKIPPED -- test_readlines_hint in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.251014471054s cumulative, 0.004558563232421875s individual

.
current test PASSED/SKIPPED -- test_peek in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.2543668746948s cumulative, 0.0033524036407470703s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.2584927082062s cumulative, 0.004125833511352539s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.2681708335876s cumulative, 0.009678125381469727s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.2734372615814s cumulative, 0.005266427993774414s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.2790427207947s cumulative, 0.005605459213256836s individual

.
current test PASSED/SKIPPED -- test_readlines_hint in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.2858140468597s cumulative, 0.0067713260650634766s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.2902302742004s cumulative, 0.004416227340698242s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.2940771579742s cumulative, 0.003846883773803711s individual

.
current test PASSED/SKIPPED -- test_exhaust in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.297357082367s cumulative, 0.0032799243927001953s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.3010611534119s cumulative, 0.003704071044921875s individual

.
current test PASSED/SKIPPED -- test_duck_compatibility_with_io_base in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.3043186664581s cumulative, 0.0032575130462646484s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.3079676628113s cumulative, 0.003648996353149414s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.3112607002258s cumulative, 0.0032930374145507812s individual

.
current test PASSED/SKIPPED -- test_readline in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.3145291805267s cumulative, 0.0032684803009033203s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.3178055286407s cumulative, 0.003276348114013672s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.3218989372253s cumulative, 0.0040934085845947266s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.3252885341644s cumulative, 0.003389596939086914s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.3288388252258s cumulative, 0.003550291061401367s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.3325409889221s cumulative, 0.0037021636962890625s individual

.
current test PASSED/SKIPPED -- test_pipe in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.3356285095215s cumulative, 0.0030875205993652344s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.3395323753357s cumulative, 0.0039038658142089844s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.3427209854126s cumulative, 0.003188610076904297s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.346496105194s cumulative, 0.0037751197814941406s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.3498532772064s cumulative, 0.0033571720123291016s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.3533356189728s cumulative, 0.003482341766357422s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.3565957546234s cumulative, 0.0032601356506347656s individual

.
current test PASSED/SKIPPED -- test_readlines_hint in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.360868692398s cumulative, 0.004272937774658203s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.364219903946s cumulative, 0.0033512115478515625s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.3677566051483s cumulative, 0.003536701202392578s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.3717777729034s cumulative, 0.004021167755126953s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.3747780323029s cumulative, 0.0030002593994140625s individual

.
current test PASSED/SKIPPED -- test_readlines_hint in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.3787562847137s cumulative, 0.003978252410888672s individual

.
current test PASSED/SKIPPED -- test_peek_eof in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.3817558288574s cumulative, 0.002999544143676758s individual

.
current test PASSED/SKIPPED -- test_consume_delimiter in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.3849329948425s cumulative, 0.003177165985107422s individual

.
current test PASSED/SKIPPED -- test_pipe_until_without_destination in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.8513379096985s cumulative, 0.46640491485595703s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.857542514801s cumulative, 0.0062046051025390625s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.861914396286s cumulative, 0.0043718814849853516s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.8655009269714s cumulative, 0.0035865306854248047s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.8688423633575s cumulative, 0.0033414363861083984s individual

.
current test PASSED/SKIPPED -- test_read_until_delimiter_size_check in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.8727746009827s cumulative, 0.00393223762512207s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.8765234947205s cumulative, 0.0037488937377929688s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.8800177574158s cumulative, 0.0034942626953125s individual

.
current test PASSED/SKIPPED -- test_read_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.8834869861603s cumulative, 0.003469228744506836s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.8867509365082s cumulative, 0.0032639503479003906s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1093.8899199962616s cumulative, 0.0031690597534179688s individual

.
current test PASSED/SKIPPED -- test_irregular_large_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1098.7263436317444s cumulative, 4.836423635482788s individual

.
current test PASSED/SKIPPED -- test_irregular_large_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1102.9080696105957s cumulative, 4.181725978851318s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1102.9133746623993s cumulative, 0.005305051803588867s individual

.
current test PASSED/SKIPPED -- test_readlines in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1102.9180445671082s cumulative, 0.004669904708862305s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1102.9220323562622s cumulative, 0.003987789154052734s individual

.
current test PASSED/SKIPPED -- test_read_until in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1105.6214880943298s cumulative, 2.699455738067627s individual

.
current test PASSED/SKIPPED -- test_read_until_shared_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1105.6258795261383s cumulative, 0.00439143180847168s individual

.
current test PASSED/SKIPPED -- test_read_until_with_size in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1105.6289429664612s cumulative, 0.0030634403228759766s individual

.
current test PASSED/SKIPPED -- test_read_until_from_buffer in /home/kaiyaok2/PythonProjects/falcon/tests/test_buffered_reader.py: 1105.632483959198s cumulative, 0.0035409927368164062s individual


tests/test_httperror.py .
current test PASSED/SKIPPED -- test_custom_error_serializer_optional_representation in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1105.650277376175s cumulative, 0.01779341697692871s individual

.
current test PASSED/SKIPPED -- test_forbidden in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1105.657152414322s cumulative, 0.006875038146972656s individual

.
current test PASSED/SKIPPED -- test_temporary_413_integer_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1105.6644704341888s cumulative, 0.007318019866943359s individual

.
current test PASSED/SKIPPED -- test_503_integer_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1105.672364473343s cumulative, 0.007894039154052734s individual

.
current test PASSED/SKIPPED -- test_custom_error_serializer_optional_representation in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1105.6800606250763s cumulative, 0.0076961517333984375s individual

.
current test PASSED/SKIPPED -- test_unicode_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1105.6875076293945s cumulative, 0.007447004318237305s individual

.
current test PASSED/SKIPPED -- test_414_with_title in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1105.6932618618011s cumulative, 0.005754232406616211s individual

.
current test PASSED/SKIPPED -- test_client_does_not_accept_json_or_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1105.700217962265s cumulative, 0.0069561004638671875s individual

.
current test PASSED/SKIPPED -- test_forbidden in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1105.7065501213074s cumulative, 0.0063321590423583984s individual

.
current test PASSED/SKIPPED -- test_429_no_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1105.711654663086s cumulative, 0.005104541778564453s individual

.
current test PASSED/SKIPPED -- test_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1105.7196283340454s cumulative, 0.007973670959472656s individual

.
current test PASSED/SKIPPED -- test_serialize_error_uses_media_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1105.7366275787354s cumulative, 0.016999244689941406s individual

.
current test PASSED/SKIPPED -- test_base_class in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1105.7439858913422s cumulative, 0.0073583126068115234s individual

.
current test PASSED/SKIPPED -- test_404_with_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1105.7492582798004s cumulative, 0.005272388458251953s individual

.
current test PASSED/SKIPPED -- test_no_description_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1105.7574682235718s cumulative, 0.008209943771362305s individual

.
current test PASSED/SKIPPED -- test_404_without_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1105.7659373283386s cumulative, 0.008469104766845703s individual

.
current test PASSED/SKIPPED -- test_405_without_body_with_extra_headers_double_check in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1105.7720766067505s cumulative, 0.006139278411865234s individual

.
current test PASSED/SKIPPED -- test_416 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1105.7777569293976s cumulative, 0.0056803226470947266s individual

.
current test PASSED/SKIPPED -- test_epic_fail_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1105.7865040302277s cumulative, 0.008747100830078125s individual

.
current test PASSED/SKIPPED -- test_404_with_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1105.7932357788086s cumulative, 0.006731748580932617s individual

.
current test PASSED/SKIPPED -- test_unicode_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1105.80015707016s cumulative, 0.006921291351318359s individual

.
current test PASSED/SKIPPED -- test_410_without_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1105.8071110248566s cumulative, 0.0069539546966552734s individual

.
current test PASSED/SKIPPED -- test_misc in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1105.8222188949585s cumulative, 0.015107870101928711s individual

.
current test PASSED/SKIPPED -- test_epic_fail_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1105.828280210495s cumulative, 0.0060613155364990234s individual

.
current test PASSED/SKIPPED -- test_invalid_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1105.8343405723572s cumulative, 0.006060361862182617s individual

.
current test PASSED/SKIPPED -- test_epic_fail_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1105.8480763435364s cumulative, 0.013735771179199219s individual

.
current test PASSED/SKIPPED -- test_invalid_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1105.8603286743164s cumulative, 0.012252330780029297s individual

.
current test PASSED/SKIPPED -- test_MediaMalformedError in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1105.8648228645325s cumulative, 0.004494190216064453s individual

.
current test PASSED/SKIPPED -- test_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1105.8727207183838s cumulative, 0.00789785385131836s individual

.
current test PASSED/SKIPPED -- test_client_does_not_accept_json_or_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1105.8804461956024s cumulative, 0.00772547721862793s individual

.
current test PASSED/SKIPPED -- test_405_without_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1105.8880546092987s cumulative, 0.0076084136962890625s individual

.
current test PASSED/SKIPPED -- test_411 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1105.8957779407501s cumulative, 0.007723331451416016s individual

.
current test PASSED/SKIPPED -- test_404_without_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1105.9054808616638s cumulative, 0.009702920913696289s individual

.
current test PASSED/SKIPPED -- test_410_without_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1105.9176659584045s cumulative, 0.012185096740722656s individual

.
current test PASSED/SKIPPED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1105.9270963668823s cumulative, 0.009430408477783203s individual

.
current test PASSED/SKIPPED -- test_client_does_not_accept_anything in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1105.9367566108704s cumulative, 0.00966024398803711s individual

.
current test PASSED/SKIPPED -- test_no_description_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1105.9434473514557s cumulative, 0.0066907405853271484s individual

.
current test PASSED/SKIPPED -- test_temporary_413_datetime_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1105.950311422348s cumulative, 0.006864070892333984s individual

.
current test PASSED/SKIPPED -- test_epic_fail_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1105.9595160484314s cumulative, 0.009204626083374023s individual

.
current test PASSED/SKIPPED -- test_410_with_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1105.9668481349945s cumulative, 0.0073320865631103516s individual

.
current test PASSED/SKIPPED -- test_client_does_not_accept_anything in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1105.972110748291s cumulative, 0.005262613296508789s individual

.
current test PASSED/SKIPPED -- test_kw_only in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1105.9753713607788s cumulative, 0.0032606124877929688s individual

.
current test PASSED/SKIPPED -- test_414_with_description in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1105.9814665317535s cumulative, 0.006095170974731445s individual

.
current test PASSED/SKIPPED -- test_epic_fail_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1105.9936983585358s cumulative, 0.012231826782226562s individual

.
current test PASSED/SKIPPED -- test_405_without_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.0018277168274s cumulative, 0.008129358291625977s individual

.
current test PASSED/SKIPPED -- test_custom_error_serializer in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.0172216892242s cumulative, 0.015393972396850586s individual

.
current test PASSED/SKIPPED -- test_missing_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.0286045074463s cumulative, 0.011382818222045898s individual

.
current test PASSED/SKIPPED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.0362434387207s cumulative, 0.0076389312744140625s individual

.
current test PASSED/SKIPPED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.044439792633s cumulative, 0.008196353912353516s individual

.
current test PASSED/SKIPPED -- test_custom_error_serializer in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.0544362068176s cumulative, 0.009996414184570312s individual

.
current test PASSED/SKIPPED -- test_429 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.0607614517212s cumulative, 0.006325244903564453s individual

.
current test PASSED/SKIPPED -- test_429 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.072493314743s cumulative, 0.011731863021850586s individual

.
current test PASSED/SKIPPED -- test_no_description_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.0801537036896s cumulative, 0.007660388946533203s individual

.
current test PASSED/SKIPPED -- test_base_class in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.0927512645721s cumulative, 0.01259756088256836s individual

.
current test PASSED/SKIPPED -- test_414_with_description in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.102345943451s cumulative, 0.00959467887878418s individual

.
current test PASSED/SKIPPED -- test_epic_fail_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.1099526882172s cumulative, 0.0076067447662353516s individual

.
current test PASSED/SKIPPED -- test_no_description_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.1196777820587s cumulative, 0.009725093841552734s individual

.
current test PASSED/SKIPPED -- test_missing_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.126531124115s cumulative, 0.006853342056274414s individual

.
current test PASSED/SKIPPED -- test_forbidden in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.1368060112s cumulative, 0.010274887084960938s individual

.
current test PASSED/SKIPPED -- test_401 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.1468460559845s cumulative, 0.010040044784545898s individual

.
current test PASSED/SKIPPED -- test_411 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.1631019115448s cumulative, 0.016255855560302734s individual

.
current test PASSED/SKIPPED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.1715219020844s cumulative, 0.008419990539550781s individual

.
current test PASSED/SKIPPED -- test_forbidden in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.1820952892303s cumulative, 0.010573387145996094s individual

.
current test PASSED/SKIPPED -- test_429_datetime in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.191524028778s cumulative, 0.009428739547729492s individual

.
current test PASSED/SKIPPED -- test_invalid_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.2015283107758s cumulative, 0.010004281997680664s individual

.
current test PASSED/SKIPPED -- test_414 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.2087216377258s cumulative, 0.007193326950073242s individual

.
current test PASSED/SKIPPED -- test_414_with_title in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.2166738510132s cumulative, 0.007952213287353516s individual

.
current test PASSED/SKIPPED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.228095293045s cumulative, 0.011421442031860352s individual

.
current test PASSED/SKIPPED -- test_410_with_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.2436323165894s cumulative, 0.015537023544311523s individual

.
current test PASSED/SKIPPED -- test_epic_fail_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.2591304779053s cumulative, 0.015498161315917969s individual

.
current test PASSED/SKIPPED -- test_414_with_custom_kwargs in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.2708232402802s cumulative, 0.01169276237487793s individual

.
current test PASSED/SKIPPED -- test_405_with_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.2814502716064s cumulative, 0.010627031326293945s individual

.
current test PASSED/SKIPPED -- test_serialize_no_json_media_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.2920911312103s cumulative, 0.010640859603881836s individual

.
current test PASSED/SKIPPED -- test_503_datetime_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.3006896972656s cumulative, 0.008598566055297852s individual

.
current test PASSED/SKIPPED -- test_epic_fail_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.309115409851s cumulative, 0.008425712585449219s individual

.
current test PASSED/SKIPPED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.3150897026062s cumulative, 0.005974292755126953s individual

.
current test PASSED/SKIPPED -- test_custom_error_serializer_optional_representation in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.3238351345062s cumulative, 0.008745431900024414s individual

.
current test PASSED/SKIPPED -- test_413 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.3314304351807s cumulative, 0.0075953006744384766s individual

.
current test PASSED/SKIPPED -- test_custom_serializer_no_representation in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.337229013443s cumulative, 0.0057985782623291016s individual

.
current test PASSED/SKIPPED -- test_414_with_custom_kwargs in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.3463373184204s cumulative, 0.009108304977416992s individual

.
current test PASSED/SKIPPED -- test_405_without_body_with_extra_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.3587453365326s cumulative, 0.012408018112182617s individual

.
current test PASSED/SKIPPED -- test_429_datetime in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.3687179088593s cumulative, 0.009972572326660156s individual

.
current test PASSED/SKIPPED -- test_429_no_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.378362417221s cumulative, 0.009644508361816406s individual

.
current test PASSED/SKIPPED -- test_temporary_413_integer_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.3935186862946s cumulative, 0.015156269073486328s individual

.
current test PASSED/SKIPPED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.4021878242493s cumulative, 0.008669137954711914s individual

.
current test PASSED/SKIPPED -- test_custom_error_serializer_optional_representation in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.4094512462616s cumulative, 0.0072634220123291016s individual

.
current test PASSED/SKIPPED -- test_custom_error_serializer_optional_representation in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.4201321601868s cumulative, 0.010680913925170898s individual

.
current test PASSED/SKIPPED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.4316051006317s cumulative, 0.011472940444946289s individual

.
current test PASSED/SKIPPED -- test_serialize_no_json_media_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.4410734176636s cumulative, 0.009468317031860352s individual

.
current test PASSED/SKIPPED -- test_epic_fail_xml in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.4528653621674s cumulative, 0.01179194450378418s individual

.
current test PASSED/SKIPPED -- test_custom_error_serializer_optional_representation in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.4642343521118s cumulative, 0.011368989944458008s individual

.
current test PASSED/SKIPPED -- test_forbidden in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.4756863117218s cumulative, 0.011451959609985352s individual

.
current test PASSED/SKIPPED -- test_invalid_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.4859039783478s cumulative, 0.010217666625976562s individual

.
current test PASSED/SKIPPED -- test_misc in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.5406305789948s cumulative, 0.054726600646972656s individual

.
current test PASSED/SKIPPED -- test_temporary_413_datetime_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.5609667301178s cumulative, 0.020336151123046875s individual

.
current test PASSED/SKIPPED -- test_405_without_body_with_extra_headers_double_check in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.5719573497772s cumulative, 0.010990619659423828s individual

.
current test PASSED/SKIPPED -- test_serialize_error_uses_media_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.5822994709015s cumulative, 0.010342121124267578s individual

.
current test PASSED/SKIPPED -- test_unicode_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.596911907196s cumulative, 0.014612436294555664s individual

.
current test PASSED/SKIPPED -- test_unicode_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.6078517436981s cumulative, 0.010939836502075195s individual

.
current test PASSED/SKIPPED -- test_414 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.6156096458435s cumulative, 0.007757902145385742s individual

.
current test PASSED/SKIPPED -- test_custom_serializer_no_representation in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.6293923854828s cumulative, 0.013782739639282227s individual

.
current test PASSED/SKIPPED -- test_503_integer_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.6399700641632s cumulative, 0.010577678680419922s individual

.
current test PASSED/SKIPPED -- test_503_datetime_retry_after in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.6503465175629s cumulative, 0.010376453399658203s individual

.
current test PASSED/SKIPPED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.659415960312s cumulative, 0.009069442749023438s individual

.
current test PASSED/SKIPPED -- test_custom_error_serializer_optional_representation in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.667004108429s cumulative, 0.00758814811706543s individual

.
current test PASSED/SKIPPED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.6782848834991s cumulative, 0.01128077507019043s individual

.
current test PASSED/SKIPPED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.6849286556244s cumulative, 0.006643772125244141s individual

.
current test PASSED/SKIPPED -- test_title_default_message_if_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.6941003799438s cumulative, 0.009171724319458008s individual

.
current test PASSED/SKIPPED -- test_405_with_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.7032141685486s cumulative, 0.009113788604736328s individual

.
current test PASSED/SKIPPED -- test_forbidden in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.7131276130676s cumulative, 0.009913444519042969s individual

.
current test PASSED/SKIPPED -- test_413 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.7224235534668s cumulative, 0.009295940399169922s individual

.
current test PASSED/SKIPPED -- test_epic_fail_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.7300617694855s cumulative, 0.007638216018676758s individual

.
current test PASSED/SKIPPED -- test_405_without_body_with_extra_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.7391884326935s cumulative, 0.009126663208007812s individual

.
current test PASSED/SKIPPED -- test_to_json_dumps in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.7420642375946s cumulative, 0.002875804901123047s individual

.
current test PASSED/SKIPPED -- test_custom_error_serializer_optional_representation in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.7506256103516s cumulative, 0.008561372756958008s individual

.
current test PASSED/SKIPPED -- test_416 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.760862827301s cumulative, 0.01023721694946289s individual

.
current test PASSED/SKIPPED -- test_401 in /home/kaiyaok2/PythonProjects/falcon/tests/test_httperror.py: 1106.7693541049957s cumulative, 0.008491277694702148s individual


tests/asgi/test_boundedstream_asgi.py .
current test PASSED/SKIPPED -- test_exhaust in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1106.7736341953278s cumulative, 0.00428009033203125s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1106.7782549858093s cumulative, 0.004620790481567383s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1106.7831683158875s cumulative, 0.004913330078125s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1106.795265674591s cumulative, 0.012097358703613281s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1119.8863217830658s cumulative, 13.091056108474731s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1119.8925988674164s cumulative, 0.0062770843505859375s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1119.897245645523s cumulative, 0.004646778106689453s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1119.9020228385925s cumulative, 0.004777193069458008s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1119.9111547470093s cumulative, 0.009131908416748047s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1119.9298739433289s cumulative, 0.018719196319580078s individual

.
current test PASSED/SKIPPED -- test_exhaust_with_disconnect in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1119.935227394104s cumulative, 0.005353450775146484s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1119.943469285965s cumulative, 0.008241891860961914s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1119.9515857696533s cumulative, 0.008116483688354492s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1119.9602756500244s cumulative, 0.00868988037109375s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1119.9774358272552s cumulative, 0.01716017723083496s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1119.984785079956s cumulative, 0.007349252700805664s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1119.9906334877014s cumulative, 0.005848407745361328s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1119.9964051246643s cumulative, 0.005771636962890625s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1120.0018408298492s cumulative, 0.0054357051849365234s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1142.1528193950653s cumulative, 22.150978565216064s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1142.1665885448456s cumulative, 0.013769149780273438s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1142.1879489421844s cumulative, 0.021360397338867188s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1142.2090644836426s cumulative, 0.021115541458129883s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1142.2315509319305s cumulative, 0.022486448287963867s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1142.2601211071014s cumulative, 0.028570175170898438s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1142.2733805179596s cumulative, 0.013259410858154297s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1142.2939579486847s cumulative, 0.020577430725097656s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1142.310881137848s cumulative, 0.016923189163208008s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1142.3257393836975s cumulative, 0.014858245849609375s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1142.338234424591s cumulative, 0.012495040893554688s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1142.3520431518555s cumulative, 0.013808727264404297s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1142.3665862083435s cumulative, 0.01454305648803711s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1142.3764922618866s cumulative, 0.00990605354309082s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1142.3849725723267s cumulative, 0.008480310440063477s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1142.392486333847s cumulative, 0.007513761520385742s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1142.4022209644318s cumulative, 0.009734630584716797s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1142.4107496738434s cumulative, 0.008528709411621094s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1142.4224939346313s cumulative, 0.011744260787963867s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1142.4390890598297s cumulative, 0.016595125198364258s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1142.453066110611s cumulative, 0.01397705078125s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1142.4609673023224s cumulative, 0.007901191711425781s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1142.4655447006226s cumulative, 0.0045773983001708984s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1142.4745523929596s cumulative, 0.009007692337036133s individual

.
current test PASSED/SKIPPED -- test_iteration_already_started in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1142.4805233478546s cumulative, 0.005970954895019531s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1142.4848511219025s cumulative, 0.0043277740478515625s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1142.488894701004s cumulative, 0.0040435791015625s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1158.5062487125397s cumulative, 16.017354011535645s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1158.5149173736572s cumulative, 0.008668661117553711s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1158.5230357646942s cumulative, 0.008118391036987305s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1158.5310032367706s cumulative, 0.007967472076416016s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1158.5390067100525s cumulative, 0.008003473281860352s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1158.5452678203583s cumulative, 0.006261110305786133s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1158.5514438152313s cumulative, 0.006175994873046875s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1158.5612795352936s cumulative, 0.00983572006225586s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1158.5718364715576s cumulative, 0.010556936264038086s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1158.584835767746s cumulative, 0.012999296188354492s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1158.5995347499847s cumulative, 0.014698982238769531s individual

.
current test PASSED/SKIPPED -- test_filelike in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1158.606983423233s cumulative, 0.007448673248291016s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1158.6147673130035s cumulative, 0.0077838897705078125s individual

.
current test PASSED/SKIPPED -- test_iterate_streaming_request in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1158.6191046237946s cumulative, 0.004337310791015625s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1158.6268429756165s cumulative, 0.007738351821899414s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1158.6329054832458s cumulative, 0.006062507629394531s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1158.6389389038086s cumulative, 0.006033420562744141s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1158.6466917991638s cumulative, 0.007752895355224609s individual

.
current test PASSED/SKIPPED -- test_read_all in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1158.651995897293s cumulative, 0.005304098129272461s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1158.659507036209s cumulative, 0.007511138916015625s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1158.668565273285s cumulative, 0.009058237075805664s individual

.
current test PASSED/SKIPPED -- test_read_chunks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_boundedstream_asgi.py: 1158.6756887435913s cumulative, 0.007123470306396484s individual


tests/test_request_body.py .
current test PASSED/SKIPPED -- test_body_stream_wrapper in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_body.py: 1158.6853358745575s cumulative, 0.009647130966186523s individual

.
current test PASSED/SKIPPED -- test_request_repr in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_body.py: 1158.6926736831665s cumulative, 0.007337808609008789s individual

.
current test PASSED/SKIPPED -- test_bounded_stream_property_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_body.py: 1158.699069261551s cumulative, 0.006395578384399414s individual

.
current test PASSED/SKIPPED -- test_read_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_body.py: 1158.7191030979156s cumulative, 0.020033836364746094s individual

.
current test PASSED/SKIPPED -- test_tiny_body_overflow in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_body.py: 1158.731938123703s cumulative, 0.012835025787353516s individual

.
current test PASSED/SKIPPED -- test_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_body.py: 1158.7441544532776s cumulative, 0.012216329574584961s individual

.
current test PASSED/SKIPPED -- test_tiny_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_body.py: 1158.7592113018036s cumulative, 0.015056848526000977s individual


tests/test_request_media.py .
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1158.7717134952545s cumulative, 0.012502193450927734s individual

.
current test PASSED/SKIPPED -- test_fallback_not_for_error_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1158.7888553142548s cumulative, 0.01714181900024414s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1158.7991471290588s cumulative, 0.010291814804077148s individual

.
current test PASSED/SKIPPED -- test_complete_consumption in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1158.8117933273315s cumulative, 0.012646198272705078s individual

.
current test PASSED/SKIPPED -- test_fallback_not_for_error_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1158.8276138305664s cumulative, 0.01582050323486328s individual

.
current test PASSED/SKIPPED -- test_repeated_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1158.8427002429962s cumulative, 0.01508641242980957s individual

.
current test PASSED/SKIPPED -- test_fallback_does_not_override_media_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1158.8571441173553s cumulative, 0.01444387435913086s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1158.878737449646s cumulative, 0.021593332290649414s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1158.8978941440582s cumulative, 0.019156694412231445s individual

.
current test PASSED/SKIPPED -- test_fallback_not_for_error_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1158.9195458889008s cumulative, 0.021651744842529297s individual

.
current test PASSED/SKIPPED -- test_null_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1158.934818983078s cumulative, 0.015273094177246094s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1158.9584894180298s cumulative, 0.023670434951782227s individual

.
current test PASSED/SKIPPED -- test_fallback_not_for_error_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1158.9791259765625s cumulative, 0.020636558532714844s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1159.0005447864532s cumulative, 0.02141880989074707s individual

.
current test PASSED/SKIPPED -- test_error_after_first_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1159.0250790119171s cumulative, 0.024534225463867188s individual

.
current test PASSED/SKIPPED -- test_fallback in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1159.048728942871s cumulative, 0.023649930953979492s individual

.
current test PASSED/SKIPPED -- test_fallback_not_for_error_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1159.0657079219818s cumulative, 0.016978979110717773s individual

.
current test PASSED/SKIPPED -- test_fallback_not_for_error_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1159.0777864456177s cumulative, 0.012078523635864258s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1159.091857433319s cumulative, 0.014070987701416016s individual

.
current test PASSED/SKIPPED -- test_invalid_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1159.1466665267944s cumulative, 0.0548090934753418s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1159.1714642047882s cumulative, 0.024797677993774414s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1159.189995765686s cumulative, 0.01853156089782715s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1159.2106738090515s cumulative, 0.020678043365478516s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1159.227140903473s cumulative, 0.01646709442138672s individual

.
current test PASSED/SKIPPED -- test_invalid_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1159.2481982707977s cumulative, 0.0210573673248291s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1159.2616231441498s cumulative, 0.013424873352050781s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1159.275571346283s cumulative, 0.013948202133178711s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1159.2890467643738s cumulative, 0.013475418090820312s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1159.3192191123962s cumulative, 0.030172348022460938s individual

.
current test PASSED/SKIPPED -- test_complete_consumption in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1159.3346116542816s cumulative, 0.015392541885375977s individual

.
current test PASSED/SKIPPED -- test_invalid_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1159.3503112792969s cumulative, 0.01569962501525879s individual

.
current test PASSED/SKIPPED -- test_fallback_does_not_override_media_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1159.364714384079s cumulative, 0.014403104782104492s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1159.3822963237762s cumulative, 0.017581939697265625s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1159.4069640636444s cumulative, 0.024667739868164062s individual

.
current test PASSED/SKIPPED -- test_fallback_not_for_error_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1159.4364936351776s cumulative, 0.029529571533203125s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1159.4553916454315s cumulative, 0.01889801025390625s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1159.4748921394348s cumulative, 0.0195004940032959s individual

.
current test PASSED/SKIPPED -- test_fallback in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1159.4950714111328s cumulative, 0.020179271697998047s individual

.
current test PASSED/SKIPPED -- test_fallback_not_for_error_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1159.5128889083862s cumulative, 0.01781749725341797s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1159.530588388443s cumulative, 0.017699480056762695s individual

.
current test PASSED/SKIPPED -- test_msgpack in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1159.5488033294678s cumulative, 0.018214941024780273s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1159.56800699234s cumulative, 0.019203662872314453s individual

.
current test PASSED/SKIPPED -- test_unknown_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1159.5906200408936s cumulative, 0.022613048553466797s individual

.
current test PASSED/SKIPPED -- test_invalid_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1159.6132934093475s cumulative, 0.022673368453979492s individual

.
current test PASSED/SKIPPED -- test_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1159.6320805549622s cumulative, 0.018787145614624023s individual

.
current test PASSED/SKIPPED -- test_null_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1159.658982515335s cumulative, 0.026901960372924805s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1159.6827170848846s cumulative, 0.023734569549560547s individual

.
current test PASSED/SKIPPED -- test_repeated_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1159.7106182575226s cumulative, 0.027901172637939453s individual

.
current test PASSED/SKIPPED -- test_error_after_first_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1159.7441532611847s cumulative, 0.033535003662109375s individual

.
current test PASSED/SKIPPED -- test_repeated_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1159.7676243782043s cumulative, 0.02347111701965332s individual

.
current test PASSED/SKIPPED -- test_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1159.788949251175s cumulative, 0.021324872970581055s individual

.
current test PASSED/SKIPPED -- test_repeated_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1159.8120074272156s cumulative, 0.023058176040649414s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1159.8345401287079s cumulative, 0.02253270149230957s individual

.
current test PASSED/SKIPPED -- test_empty_json_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1159.8567380905151s cumulative, 0.022197961807250977s individual

.
current test PASSED/SKIPPED -- test_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1159.8838233947754s cumulative, 0.027085304260253906s individual

.
current test PASSED/SKIPPED -- test_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1159.9131593704224s cumulative, 0.029335975646972656s individual

.
current test PASSED/SKIPPED -- test_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1159.9463696479797s cumulative, 0.03321027755737305s individual

.
current test PASSED/SKIPPED -- test_unknown_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_media.py: 1159.9835088253021s cumulative, 0.037139177322387695s individual


tests/test_slots.py .
current test PASSED/SKIPPED -- test_slots_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_slots.py: 1159.9980428218842s cumulative, 0.01453399658203125s individual

.
current test PASSED/SKIPPED -- test_slots_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_slots.py: 1160.0103313922882s cumulative, 0.012288570404052734s individual

.
current test PASSED/SKIPPED -- test_slots_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_slots.py: 1160.02196931839s cumulative, 0.01163792610168457s individual

.
current test PASSED/SKIPPED -- test_slots_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_slots.py: 1160.031513929367s cumulative, 0.009544610977172852s individual


tests/test_python_version_requirements.py .
current test PASSED/SKIPPED -- test_asgi in /home/kaiyaok2/PythonProjects/falcon/tests/test_python_version_requirements.py: 1160.0387406349182s cumulative, 0.007226705551147461s individual


tests/test_middleware.py .
current test PASSED/SKIPPED -- test_skip_process_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1160.0618495941162s cumulative, 0.023108959197998047s individual

.
current test PASSED/SKIPPED -- test_response_middleware_raises_exception in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1160.0920994281769s cumulative, 0.030249834060668945s individual

.
current test PASSED/SKIPPED -- test_log_get_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1160.1100447177887s cumulative, 0.017945289611816406s individual

.
current test PASSED/SKIPPED -- test_add_invalid_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1160.122154712677s cumulative, 0.012109994888305664s individual

.
current test PASSED/SKIPPED -- test_log_get_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1160.1455240249634s cumulative, 0.023369312286376953s individual

.
current test PASSED/SKIPPED -- test_add_invalid_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1160.1569356918335s cumulative, 0.011411666870117188s individual

.
current test PASSED/SKIPPED -- test_base_path_is_removed_before_routing in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1160.178230524063s cumulative, 0.021294832229614258s individual

.
current test PASSED/SKIPPED -- test_generate_trans_id_with_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1160.1992840766907s cumulative, 0.021053552627563477s individual

.
current test PASSED/SKIPPED -- test_http_status_raised_from_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1160.2169182300568s cumulative, 0.017634153366088867s individual

.
current test PASSED/SKIPPED -- test_error_composed_before_resp_middleware_called in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1160.2380435466766s cumulative, 0.021125316619873047s individual

.
current test PASSED/SKIPPED -- test_can_access_resource_params in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1160.265522480011s cumulative, 0.027478933334350586s individual

.
current test PASSED/SKIPPED -- test_can_access_resource_params in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1160.3010680675507s cumulative, 0.03554558753967285s individual

.
current test PASSED/SKIPPED -- test_process_request_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1160.3237988948822s cumulative, 0.02273082733154297s individual

.
current test PASSED/SKIPPED -- test_process_resource_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1160.350784778595s cumulative, 0.026985883712768555s individual

.
current test PASSED/SKIPPED -- test_process_request_not_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1160.3739306926727s cumulative, 0.02314591407775879s individual

.
current test PASSED/SKIPPED -- test_process_request_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1160.3926448822021s cumulative, 0.018714189529418945s individual

.
current test PASSED/SKIPPED -- test_process_resource_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1160.418408870697s cumulative, 0.025763988494873047s individual

.
current test PASSED/SKIPPED -- test_dont_need_params_in_signature in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1160.4357233047485s cumulative, 0.017314434051513672s individual

.
current test PASSED/SKIPPED -- test_api_initialization_with_cors_enabled_and_middleware_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1160.4564871788025s cumulative, 0.020763874053955078s individual

.
current test PASSED/SKIPPED -- test_api_initialization_with_cors_enabled_and_middleware_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1160.4738245010376s cumulative, 0.017337322235107422s individual

.
current test PASSED/SKIPPED -- test_api_initialization_with_cors_enabled_and_middleware_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1160.4917950630188s cumulative, 0.017970561981201172s individual

.
current test PASSED/SKIPPED -- test_api_initialization_with_cors_enabled_and_middleware_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1160.5142629146576s cumulative, 0.022467851638793945s individual

.
current test PASSED/SKIPPED -- test_inner_mw_throw_exception in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1160.5409624576569s cumulative, 0.026699542999267578s individual

.
current test PASSED/SKIPPED -- test_middleware_execution_order in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1160.5572226047516s cumulative, 0.016260147094726562s individual

.
current test PASSED/SKIPPED -- test_order_independent_mw_executed_when_exception_in_resp in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1160.5723206996918s cumulative, 0.015098094940185547s individual

.
current test PASSED/SKIPPED -- test_order_independent_mw_executed_when_exception_in_rsrc in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1160.5881497859955s cumulative, 0.015829086303710938s individual

.
current test PASSED/SKIPPED -- test_independent_middleware_execution_order in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1160.604655265808s cumulative, 0.01650547981262207s individual

.
current test PASSED/SKIPPED -- test_inner_mw_with_ex_handler_throw_exception in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1160.6249678134918s cumulative, 0.02031254768371582s individual

.
current test PASSED/SKIPPED -- test_order_mw_executed_when_exception_in_rsrc in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1160.65780210495s cumulative, 0.03283429145812988s individual

.
current test PASSED/SKIPPED -- test_multiple_response_mw_throw_exception in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1160.6867849826813s cumulative, 0.028982877731323242s individual

.
current test PASSED/SKIPPED -- test_generate_trans_id_and_time_with_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1160.7139718532562s cumulative, 0.027186870574951172s individual

.
current test PASSED/SKIPPED -- test_order_independent_mw_executed_when_exception_in_req in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1160.7303380966187s cumulative, 0.016366243362426758s individual

.
current test PASSED/SKIPPED -- test_inner_mw_throw_exception_while_processing_resp in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1160.762690782547s cumulative, 0.03235268592834473s individual

.
current test PASSED/SKIPPED -- test_legacy_middleware_called_with_correct_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1160.7962067127228s cumulative, 0.03351593017578125s individual

.
current test PASSED/SKIPPED -- test_order_mw_executed_when_exception_in_req in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1160.8236074447632s cumulative, 0.027400732040405273s individual

.
current test PASSED/SKIPPED -- test_order_mw_executed_when_exception_in_resp in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1160.8505442142487s cumulative, 0.026936769485473633s individual

.
current test PASSED/SKIPPED -- test_outer_mw_with_ex_handler_throw_exception in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1160.8834419250488s cumulative, 0.0328977108001709s individual

.
current test PASSED/SKIPPED -- test_generate_trans_id_and_time_with_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1160.9199104309082s cumulative, 0.036468505859375s individual


tests/test_http_method_routing.py .
current test PASSED/SKIPPED -- test_default_on_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 1160.959350347519s cumulative, 0.03943991661071777s individual

.
current test PASSED/SKIPPED -- test_put in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 1161.0079650878906s cumulative, 0.0486147403717041s individual

.
current test PASSED/SKIPPED -- test_put in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 1161.0477049350739s cumulative, 0.03973984718322754s individual

.
current test PASSED/SKIPPED -- test_methods_not_allowed_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 1161.1517989635468s cumulative, 0.10409402847290039s individual

.
current test PASSED/SKIPPED -- test_meta_and_others_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 1161.1821053028107s cumulative, 0.030306339263916016s individual

.
current test PASSED/SKIPPED -- test_meta_and_others_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 1161.2170147895813s cumulative, 0.03490948677062988s individual

.
current test PASSED/SKIPPED -- test_method_not_allowed_with_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 1161.2919921875s cumulative, 0.07497739791870117s individual

.
current test PASSED/SKIPPED -- test_method_not_allowed_with_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 1161.3935315608978s cumulative, 0.10153937339782715s individual

.
current test PASSED/SKIPPED -- test_on_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 1161.4511172771454s cumulative, 0.057585716247558594s individual

.
current test PASSED/SKIPPED -- test_post_not_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 1161.4939396381378s cumulative, 0.04282236099243164s individual

.
current test PASSED/SKIPPED -- test_misc in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 1161.544355392456s cumulative, 0.050415754318237305s individual

.
current test PASSED/SKIPPED -- test_report in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 1161.5871014595032s cumulative, 0.04274606704711914s individual

.
current test PASSED/SKIPPED -- test_meta_and_others_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 1161.619392156601s cumulative, 0.03229069709777832s individual

.
current test PASSED/SKIPPED -- test_on_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 1161.6435310840607s cumulative, 0.024138927459716797s individual

.
current test PASSED/SKIPPED -- test_post_not_allowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 1161.6601428985596s cumulative, 0.016611814498901367s individual

.
current test PASSED/SKIPPED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 1161.6794304847717s cumulative, 0.019287586212158203s individual

.
current test PASSED/SKIPPED -- test_misc in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 1161.6998467445374s cumulative, 0.020416259765625s individual

.
current test PASSED/SKIPPED -- test_get in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 1161.7285525798798s cumulative, 0.028705835342407227s individual

.
current test PASSED/SKIPPED -- test_meta_and_others_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 1161.7452774047852s cumulative, 0.016724824905395508s individual

.
current test PASSED/SKIPPED -- test_default_on_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 1161.76527094841s cumulative, 0.01999354362487793s individual

.
current test PASSED/SKIPPED -- test_methods_not_allowed_simple in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 1161.7839567661285s cumulative, 0.01868581771850586s individual

.
current test PASSED/SKIPPED -- test_report in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 1161.7983629703522s cumulative, 0.014406204223632812s individual

.
current test PASSED/SKIPPED -- test_methods_not_allowed_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 1161.8263761997223s cumulative, 0.028013229370117188s individual

.
current test PASSED/SKIPPED -- test_methods_not_allowed_simple in /home/kaiyaok2/PythonProjects/falcon/tests/test_http_method_routing.py: 1161.8482892513275s cumulative, 0.02191305160522461s individual


tests/test_query_params.py .
current test PASSED/SKIPPED -- test_get_param_as_json_handler_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1161.8579647541046s cumulative, 0.00967550277709961s individual

.
current test PASSED/SKIPPED -- test_get_param_as_json_no_handler_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1161.8649096488953s cumulative, 0.006944894790649414s individual

.
current test PASSED/SKIPPED -- test_dont_auto_parse_by_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1161.878615140915s cumulative, 0.01370549201965332s individual

.
current test PASSED/SKIPPED -- test_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1161.8864192962646s cumulative, 0.007804155349731445s individual

.
current test PASSED/SKIPPED -- test_http_methods_body_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1161.8948965072632s cumulative, 0.008477210998535156s individual

.
current test PASSED/SKIPPED -- test_http_methods_body_not_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1161.9037046432495s cumulative, 0.008808135986328125s individual

.
current test PASSED/SKIPPED -- test_non_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1161.9132151603699s cumulative, 0.009510517120361328s individual

.
current test PASSED/SKIPPED -- test_http_methods_body_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1161.920244216919s cumulative, 0.007029056549072266s individual

.
current test PASSED/SKIPPED -- test_http_methods_body_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1161.928076505661s cumulative, 0.00783228874206543s individual

.
current test PASSED/SKIPPED -- test_explicitly_disable_auto_parse in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1161.9352917671204s cumulative, 0.007215261459350586s individual

.
current test PASSED/SKIPPED -- test_http_methods_body_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1161.9407823085785s cumulative, 0.005490541458129883s individual

.
current test PASSED/SKIPPED -- test_http_methods_body_not_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1161.9464547634125s cumulative, 0.005672454833984375s individual

.
current test PASSED/SKIPPED -- test_http_methods_body_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1161.9537615776062s cumulative, 0.007306814193725586s individual

.
current test PASSED/SKIPPED -- test_empty_body_no_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1161.96160531044s cumulative, 0.007843732833862305s individual


tests/test_media_multipart.py .
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1161.9702768325806s cumulative, 0.00867152214050293s individual

.
current test PASSED/SKIPPED -- test_invalid_random_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1162.0124311447144s cumulative, 0.04215431213378906s individual

.
current test PASSED/SKIPPED -- test_unsupported_charset in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1162.0293292999268s cumulative, 0.016898155212402344s individual

.
current test PASSED/SKIPPED -- test_truncated_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1162.0437610149384s cumulative, 0.01443171501159668s individual

.
current test PASSED/SKIPPED -- test_empty_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1162.048108100891s cumulative, 0.004347085952758789s individual

.
current test PASSED/SKIPPED -- test_deserialize_custom_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1162.0618827342987s cumulative, 0.013774633407592773s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1162.0772395133972s cumulative, 0.015356779098510742s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1162.0823984146118s cumulative, 0.005158901214599609s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1162.0873620510101s cumulative, 0.00496363639831543s individual

.
current test PASSED/SKIPPED -- test_body_part_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1162.0914874076843s cumulative, 0.004125356674194336s individual

.
current test PASSED/SKIPPED -- test_deserialize_part_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1162.106430053711s cumulative, 0.014942646026611328s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1162.1208136081696s cumulative, 0.014383554458618164s individual

.
current test PASSED/SKIPPED -- test_serialize in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1162.1245052814484s cumulative, 0.0036916732788085938s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1162.1411728858948s cumulative, 0.016667604446411133s individual

.
current test PASSED/SKIPPED -- test_missing_boundary in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1162.1468770503998s cumulative, 0.005704164505004883s individual

.
current test PASSED/SKIPPED -- test_deserialize_part_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1162.1658663749695s cumulative, 0.01898932456970215s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1162.175654888153s cumulative, 0.00978851318359375s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1162.1901905536652s cumulative, 0.014535665512084961s individual

.
current test PASSED/SKIPPED -- test_random_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1162.9130437374115s cumulative, 0.7228531837463379s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1162.9207224845886s cumulative, 0.0076787471771240234s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1162.9325308799744s cumulative, 0.011808395385742188s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1162.9559526443481s cumulative, 0.023421764373779297s individual

.
current test PASSED/SKIPPED -- test_truncated_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1162.9716634750366s cumulative, 0.015710830688476562s individual

.
current test PASSED/SKIPPED -- test_parse in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1162.9809324741364s cumulative, 0.009268999099731445s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1162.9985537528992s cumulative, 0.017621278762817383s individual

.
current test PASSED/SKIPPED -- test_body_part_properties in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1163.005074262619s cumulative, 0.006520509719848633s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1163.0222117900848s cumulative, 0.017137527465820312s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1163.0463380813599s cumulative, 0.024126291275024414s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1163.0793755054474s cumulative, 0.033037424087524414s individual

.
current test PASSED/SKIPPED -- test_truncated_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1163.1032693386078s cumulative, 0.02389383316040039s individual

.
current test PASSED/SKIPPED -- test_invalid_text_or_charset in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1163.11115026474s cumulative, 0.007880926132202148s individual

.
current test PASSED/SKIPPED -- test_filename_star in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1163.1415331363678s cumulative, 0.030382871627807617s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1163.1496114730835s cumulative, 0.008078336715698242s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1163.1562163829803s cumulative, 0.006604909896850586s individual

.
current test PASSED/SKIPPED -- test_unexected_form_structure in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1163.1798639297485s cumulative, 0.023647546768188477s individual

.
current test PASSED/SKIPPED -- test_filename_star in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1163.1946294307709s cumulative, 0.014765501022338867s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1163.2057621479034s cumulative, 0.01113271713256836s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1163.2112305164337s cumulative, 0.0054683685302734375s individual

.
current test PASSED/SKIPPED -- test_unsupported_charset in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1163.2322354316711s cumulative, 0.021004915237426758s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1163.238495349884s cumulative, 0.006259918212890625s individual

.
current test PASSED/SKIPPED -- test_from_buffered_stream in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1163.2433607578278s cumulative, 0.004865407943725586s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1163.2501301765442s cumulative, 0.006769418716430664s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1163.2693915367126s cumulative, 0.01926136016845703s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1163.285695552826s cumulative, 0.01630401611328125s individual

.
current test PASSED/SKIPPED -- test_truncated_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1163.3024730682373s cumulative, 0.016777515411376953s individual

.
current test PASSED/SKIPPED -- test_truncated_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1163.322688817978s cumulative, 0.020215749740600586s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1163.3304703235626s cumulative, 0.007781505584716797s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1163.3453295230865s cumulative, 0.014859199523925781s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1163.3508915901184s cumulative, 0.0055620670318603516s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1163.356228351593s cumulative, 0.005336761474609375s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1163.3635997772217s cumulative, 0.007371425628662109s individual

.
current test PASSED/SKIPPED -- test_upload_multipart in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1163.3830025196075s cumulative, 0.019402742385864258s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1163.3897199630737s cumulative, 0.0067174434661865234s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1163.3967044353485s cumulative, 0.0069844722747802734s individual

.
current test PASSED/SKIPPED -- test_nested_multipart_mixed in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1163.4075474739075s cumulative, 0.010843038558959961s individual

.
current test PASSED/SKIPPED -- test_data_too_large in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1163.4419574737549s cumulative, 0.03440999984741211s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1163.4561240673065s cumulative, 0.014166593551635742s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1163.4631478786469s cumulative, 0.007023811340332031s individual

.
current test PASSED/SKIPPED -- test_invalid_text_or_charset in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1163.468028306961s cumulative, 0.004880428314208984s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1163.4731612205505s cumulative, 0.005132913589477539s individual

.
current test PASSED/SKIPPED -- test_invalid_text_or_charset in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1163.478178024292s cumulative, 0.005016803741455078s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1163.492704629898s cumulative, 0.014526605606079102s individual

.
current test PASSED/SKIPPED -- test_empty_input in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1163.498021364212s cumulative, 0.005316734313964844s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1163.503785610199s cumulative, 0.0057642459869384766s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1163.5106420516968s cumulative, 0.006856441497802734s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1163.5180196762085s cumulative, 0.00737762451171875s individual

.
current test PASSED/SKIPPED -- test_random_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1164.1919856071472s cumulative, 0.6739659309387207s individual

.
current test PASSED/SKIPPED -- test_upload_multipart in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1164.2176070213318s cumulative, 0.025621414184570312s individual

.
current test PASSED/SKIPPED -- test_content_transfer_encoding_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1164.239021539688s cumulative, 0.021414518356323242s individual

.
current test PASSED/SKIPPED -- test_parse in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1164.2460086345673s cumulative, 0.006987094879150391s individual

.
current test PASSED/SKIPPED -- test_unexected_form_structure in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1164.2688817977905s cumulative, 0.0228731632232666s individual

.
current test PASSED/SKIPPED -- test_deserialize_custom_media in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1164.282325744629s cumulative, 0.013443946838378906s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1164.300618171692s cumulative, 0.01829242706298828s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1164.3172278404236s cumulative, 0.016609668731689453s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1164.3316838741302s cumulative, 0.014456033706665039s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1164.3483090400696s cumulative, 0.016625165939331055s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1164.368628501892s cumulative, 0.020319461822509766s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1164.3842585086823s cumulative, 0.015630006790161133s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1164.3913300037384s cumulative, 0.007071495056152344s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1164.3969068527222s cumulative, 0.0055768489837646484s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1164.4112935066223s cumulative, 0.014386653900146484s individual

.
current test PASSED/SKIPPED -- test_content_transfer_encoding_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1164.4281122684479s cumulative, 0.016818761825561523s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1164.4443953037262s cumulative, 0.016283035278320312s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1164.4589540958405s cumulative, 0.014558792114257812s individual

.
current test PASSED/SKIPPED -- test_invalid_random_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1164.5161576271057s cumulative, 0.05720353126525879s individual

.
current test PASSED/SKIPPED -- test_unknown_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1164.5233306884766s cumulative, 0.007173061370849609s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1164.5457797050476s cumulative, 0.022449016571044922s individual

.
current test PASSED/SKIPPED -- test_data_too_large in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1164.5800476074219s cumulative, 0.03426790237426758s individual

.
current test PASSED/SKIPPED -- test_truncated_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1164.6230096817017s cumulative, 0.042962074279785156s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1164.6442062854767s cumulative, 0.021196603775024414s individual

.
current test PASSED/SKIPPED -- test_headers_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1164.664276599884s cumulative, 0.020070314407348633s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1164.6894841194153s cumulative, 0.02520751953125s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1164.7015204429626s cumulative, 0.012036323547363281s individual

.
current test PASSED/SKIPPED -- test_truncated_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1164.7388279438019s cumulative, 0.0373075008392334s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1164.7535827159882s cumulative, 0.014754772186279297s individual

.
current test PASSED/SKIPPED -- test_parse in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1164.8047935962677s cumulative, 0.051210880279541016s individual

.
current test PASSED/SKIPPED -- test_truncated_form in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1164.8316781520844s cumulative, 0.02688455581665039s individual

.
current test PASSED/SKIPPED -- test_parse in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1164.8387982845306s cumulative, 0.0071201324462890625s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1164.8521950244904s cumulative, 0.013396739959716797s individual

.
current test PASSED/SKIPPED -- test_too_many_body_parts in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1164.8817851543427s cumulative, 0.029590129852294922s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1164.8892164230347s cumulative, 0.0074312686920166016s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1164.8977615833282s cumulative, 0.008545160293579102s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1164.910145998001s cumulative, 0.012384414672851562s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1164.9203131198883s cumulative, 0.010167121887207031s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1164.925950050354s cumulative, 0.005636930465698242s individual

.
current test PASSED/SKIPPED -- test_invalid_text_or_charset in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1164.9313995838165s cumulative, 0.005449533462524414s individual

.
current test PASSED/SKIPPED -- test_parsing_correctness in /home/kaiyaok2/PythonProjects/falcon/tests/test_media_multipart.py: 1164.9357035160065s cumulative, 0.004303932189941406s individual


tests/test_compiled_router.py .
current test PASSED/SKIPPED -- test_cannot_replace_compiled in /home/kaiyaok2/PythonProjects/falcon/tests/test_compiled_router.py: 1164.9451892375946s cumulative, 0.009485721588134766s individual

.
current test PASSED/SKIPPED -- test_no_compile_kw in /home/kaiyaok2/PythonProjects/falcon/tests/test_compiled_router.py: 1164.9612181186676s cumulative, 0.016028881072998047s individual

.
current test PASSED/SKIPPED -- test_multithread_compile in /home/kaiyaok2/PythonProjects/falcon/tests/test_compiled_router.py: 1165.0516119003296s cumulative, 0.0903937816619873s individual

.
current test PASSED/SKIPPED -- test_add_route_after_first_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_compiled_router.py: 1165.0738248825073s cumulative, 0.022212982177734375s individual

.
current test PASSED/SKIPPED -- test_find_src in /home/kaiyaok2/PythonProjects/falcon/tests/test_compiled_router.py: 1165.0857274532318s cumulative, 0.011902570724487305s individual

.
current test PASSED/SKIPPED -- test_no_compile_kw in /home/kaiyaok2/PythonProjects/falcon/tests/test_compiled_router.py: 1165.1024634838104s cumulative, 0.01673603057861328s individual

.
current test PASSED/SKIPPED -- test_no_compile_kw in /home/kaiyaok2/PythonProjects/falcon/tests/test_compiled_router.py: 1165.1153082847595s cumulative, 0.01284480094909668s individual

.
current test PASSED/SKIPPED -- test_compile in /home/kaiyaok2/PythonProjects/falcon/tests/test_compiled_router.py: 1165.1317348480225s cumulative, 0.016426563262939453s individual

.
current test PASSED/SKIPPED -- test_converter_not_subclass in /home/kaiyaok2/PythonProjects/falcon/tests/test_compiled_router.py: 1165.141720533371s cumulative, 0.009985685348510742s individual

.
current test PASSED/SKIPPED -- test_no_compile_kw in /home/kaiyaok2/PythonProjects/falcon/tests/test_compiled_router.py: 1165.153341293335s cumulative, 0.011620759963989258s individual


tests/test_redirects.py .
current test PASSED/SKIPPED -- test_redirect_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 1165.1775829792023s cumulative, 0.02424168586730957s individual

.
current test PASSED/SKIPPED -- test_redirect_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 1165.201132774353s cumulative, 0.023549795150756836s individual

.
current test PASSED/SKIPPED -- test_redirect in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 1165.2191021442413s cumulative, 0.017969369888305664s individual

.
current test PASSED/SKIPPED -- test_redirect in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 1165.2342581748962s cumulative, 0.015156030654907227s individual

.
current test PASSED/SKIPPED -- test_redirect_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 1165.2497584819794s cumulative, 0.015500307083129883s individual

.
current test PASSED/SKIPPED -- test_redirect in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 1165.26429271698s cumulative, 0.014534235000610352s individual

.
current test PASSED/SKIPPED -- test_redirect_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 1165.2794783115387s cumulative, 0.01518559455871582s individual

.
current test PASSED/SKIPPED -- test_redirect_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 1165.2981190681458s cumulative, 0.018640756607055664s individual

.
current test PASSED/SKIPPED -- test_redirect in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 1165.3138663768768s cumulative, 0.0157473087310791s individual

.
current test PASSED/SKIPPED -- test_redirect in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 1165.3232686519623s cumulative, 0.009402275085449219s individual

.
current test PASSED/SKIPPED -- test_redirect_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 1165.3315048217773s cumulative, 0.008236169815063477s individual

.
current test PASSED/SKIPPED -- test_redirect in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 1165.341016292572s cumulative, 0.009511470794677734s individual

.
current test PASSED/SKIPPED -- test_redirect_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 1165.3510365486145s cumulative, 0.010020256042480469s individual

.
current test PASSED/SKIPPED -- test_redirect in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 1165.3616025447845s cumulative, 0.010565996170043945s individual

.
current test PASSED/SKIPPED -- test_redirect in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 1165.3704714775085s cumulative, 0.008868932723999023s individual

.
current test PASSED/SKIPPED -- test_redirect_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 1165.3789157867432s cumulative, 0.00844430923461914s individual

.
current test PASSED/SKIPPED -- test_redirect in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 1165.3851833343506s cumulative, 0.006267547607421875s individual

.
current test PASSED/SKIPPED -- test_redirect_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 1165.391235589981s cumulative, 0.006052255630493164s individual

.
current test PASSED/SKIPPED -- test_redirect in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 1165.3972420692444s cumulative, 0.006006479263305664s individual

.
current test PASSED/SKIPPED -- test_redirect_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_redirects.py: 1165.4075946807861s cumulative, 0.010352611541748047s individual


tests/test_wsgi_interface.py .
current test PASSED/SKIPPED -- test_pep3333 in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_interface.py: 1165.4147446155548s cumulative, 0.007149934768676758s individual

.
current test PASSED/SKIPPED -- test_srmock in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_interface.py: 1165.4198162555695s cumulative, 0.0050716400146484375s individual


tests/test_cython.py F
current test FAILED -- test_imported_from_c_modules in /home/kaiyaok2/PythonProjects/falcon/tests/test_cython.py: 1165.4354870319366s cumulative, 0.0156707763671875s individual

F
current test FAILED -- test_stream_has_private_read in /home/kaiyaok2/PythonProjects/falcon/tests/test_cython.py: 1165.4419960975647s cumulative, 0.006509065628051758s individual


tests/test_headers.py .
current test PASSED/SKIPPED -- test_append_link_with_hreflang in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1165.449859380722s cumulative, 0.007863283157348633s individual

.
current test PASSED/SKIPPED -- test_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1165.4579739570618s cumulative, 0.00811457633972168s individual

.
current test PASSED/SKIPPED -- test_headers_as_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1165.4648559093475s cumulative, 0.0068819522857666016s individual

.
current test PASSED/SKIPPED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1165.4722275733948s cumulative, 0.007371664047241211s individual

.
current test PASSED/SKIPPED -- test_no_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1165.4805221557617s cumulative, 0.00829458236694336s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1165.48708152771s cumulative, 0.0065593719482421875s individual

.
current test PASSED/SKIPPED -- test_declared_content_length_overriden_by_data_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1165.4942271709442s cumulative, 0.00714564323425293s individual

.
current test PASSED/SKIPPED -- test_append_link_with_type_hint in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1165.5003044605255s cumulative, 0.006077289581298828s individual

.
current test PASSED/SKIPPED -- test_override_default_media_type_missing_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1165.5171346664429s cumulative, 0.0168302059173584s individual

.
current test PASSED/SKIPPED -- test_content_length_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1165.5310308933258s cumulative, 0.01389622688293457s individual

.
current test PASSED/SKIPPED -- test_vary_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1165.555396080017s cumulative, 0.02436518669128418s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1165.56720328331s cumulative, 0.01180720329284668s individual

.
current test PASSED/SKIPPED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1165.5793771743774s cumulative, 0.012173891067504883s individual

.
current test PASSED/SKIPPED -- test_declared_content_length_overridden_by_no_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1165.5914905071259s cumulative, 0.012113332748413086s individual

.
current test PASSED/SKIPPED -- test_append_link_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1165.6037554740906s cumulative, 0.01226496696472168s individual

.
current test PASSED/SKIPPED -- test_headers_with_custom_class_not_callable in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1165.6273629665375s cumulative, 0.023607492446899414s individual

.
current test PASSED/SKIPPED -- test_content_disposition_inline_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1165.6520028114319s cumulative, 0.02463984489440918s individual

.
current test PASSED/SKIPPED -- test_append_link_invalid_crossorigin_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1165.6628313064575s cumulative, 0.010828495025634766s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1165.6858932971954s cumulative, 0.02306199073791504s individual

.
current test PASSED/SKIPPED -- test_no_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1165.6993598937988s cumulative, 0.013466596603393555s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1165.7157766819s cumulative, 0.01641678810119629s individual

.
current test PASSED/SKIPPED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1165.7505145072937s cumulative, 0.03473782539367676s individual

.
current test PASSED/SKIPPED -- test_required_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1165.7764790058136s cumulative, 0.02596449851989746s individual

.
current test PASSED/SKIPPED -- test_passthrough_request_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1165.8026418685913s cumulative, 0.02616286277770996s individual

.
current test PASSED/SKIPPED -- test_response_set_and_get_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1165.829612493515s cumulative, 0.026970624923706055s individual

.
current test PASSED/SKIPPED -- test_append_link_invalid_crossorigin_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1165.845899105072s cumulative, 0.016286611557006836s individual

.
current test PASSED/SKIPPED -- test_unicode_headers_contain_only_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1165.8765738010406s cumulative, 0.03067469596862793s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1165.898378610611s cumulative, 0.0218048095703125s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1165.9316666126251s cumulative, 0.033288002014160156s individual

.
current test PASSED/SKIPPED -- test_override_default_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1165.9568378925323s cumulative, 0.025171279907226562s individual

.
current test PASSED/SKIPPED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1165.9818799495697s cumulative, 0.025042057037353516s individual

.
current test PASSED/SKIPPED -- test_content_disposition_inline_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1166.0033905506134s cumulative, 0.021510601043701172s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1166.0215780735016s cumulative, 0.018187522888183594s individual

.
current test PASSED/SKIPPED -- test_unicode_location_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1166.0441942214966s cumulative, 0.022616147994995117s individual

.
current test PASSED/SKIPPED -- test_custom_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1166.0643818378448s cumulative, 0.0201876163482666s individual

.
current test PASSED/SKIPPED -- test_no_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1166.087700843811s cumulative, 0.023319005966186523s individual

.
current test PASSED/SKIPPED -- test_append_link_with_title in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1166.1048786640167s cumulative, 0.017177820205688477s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1166.124451160431s cumulative, 0.01957249641418457s individual

.
current test PASSED/SKIPPED -- test_content_header_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1166.1387498378754s cumulative, 0.014298677444458008s individual

.
current test PASSED/SKIPPED -- test_default_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1166.1539993286133s cumulative, 0.015249490737915039s individual

.
current test PASSED/SKIPPED -- test_override_default_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1166.1776416301727s cumulative, 0.023642301559448242s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1166.192719221115s cumulative, 0.015077590942382812s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1166.2087097167969s cumulative, 0.015990495681762695s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1166.2350988388062s cumulative, 0.026389122009277344s individual

.
current test PASSED/SKIPPED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1166.262350320816s cumulative, 0.027251482009887695s individual

.
current test PASSED/SKIPPED -- test_append_link_invalid_crossorigin_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1166.2781116962433s cumulative, 0.015761375427246094s individual

.
current test PASSED/SKIPPED -- test_response_append_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1166.3226916790009s cumulative, 0.04457998275756836s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1166.3490240573883s cumulative, 0.026332378387451172s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1166.3831906318665s cumulative, 0.034166574478149414s individual

.
current test PASSED/SKIPPED -- test_unicode_headers_contain_non_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1166.4112396240234s cumulative, 0.028048992156982422s individual

.
current test PASSED/SKIPPED -- test_unset_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1166.4384996891022s cumulative, 0.02726006507873535s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1166.4693248271942s cumulative, 0.030825138092041016s individual

.
current test PASSED/SKIPPED -- test_vary_star in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1166.4956974983215s cumulative, 0.026372671127319336s individual

.
current test PASSED/SKIPPED -- test_content_disposition_inline_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1166.5189123153687s cumulative, 0.02321481704711914s individual

.
current test PASSED/SKIPPED -- test_append_link_with_title_star in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1166.5401105880737s cumulative, 0.021198272705078125s individual

.
current test PASSED/SKIPPED -- test_append_link_with_anchor in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1166.5565090179443s cumulative, 0.01639842987060547s individual

.
current test PASSED/SKIPPED -- test_content_header_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1166.574018239975s cumulative, 0.01750922203063965s individual

.
current test PASSED/SKIPPED -- test_unicode_headers_contain_non_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1166.5922627449036s cumulative, 0.018244504928588867s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1166.6058330535889s cumulative, 0.013570308685302734s individual

.
current test PASSED/SKIPPED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1166.616755247116s cumulative, 0.01092219352722168s individual

.
current test PASSED/SKIPPED -- test_get_header_as_int in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1166.6278133392334s cumulative, 0.01105809211730957s individual

.
current test PASSED/SKIPPED -- test_unicode_headers_contain_non_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1166.642662525177s cumulative, 0.014849185943603516s individual

.
current test PASSED/SKIPPED -- test_unset_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1166.6563591957092s cumulative, 0.013696670532226562s individual

.
current test PASSED/SKIPPED -- test_request_multiple_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1166.6693632602692s cumulative, 0.013004064559936523s individual

.
current test PASSED/SKIPPED -- test_append_link_invalid_crossorigin_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1166.6754519939423s cumulative, 0.006088733673095703s individual

.
current test PASSED/SKIPPED -- test_expires_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1166.687572002411s cumulative, 0.01212000846862793s individual

.
current test PASSED/SKIPPED -- test_append_link_with_hreflang_multi in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1166.6972887516022s cumulative, 0.00971674919128418s individual

.
current test PASSED/SKIPPED -- test_set_headers_with_custom_class in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1166.710955619812s cumulative, 0.013666868209838867s individual

.
current test PASSED/SKIPPED -- test_request_latin1_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1166.72615981102s cumulative, 0.015204191207885742s individual

.
current test PASSED/SKIPPED -- test_response_header_helpers_on_get in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1166.7394766807556s cumulative, 0.013316869735717773s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1166.7497205734253s cumulative, 0.010243892669677734s individual

.
current test PASSED/SKIPPED -- test_append_link_multiple in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1166.7653238773346s cumulative, 0.015603303909301758s individual

.
current test PASSED/SKIPPED -- test_append_link_invalid_crossorigin_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1166.7722651958466s cumulative, 0.006941318511962891s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1166.7951407432556s cumulative, 0.022875547409057617s individual

.
current test PASSED/SKIPPED -- test_content_length_options in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1166.8112964630127s cumulative, 0.016155719757080078s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1166.8225455284119s cumulative, 0.011249065399169922s individual

.
current test PASSED/SKIPPED -- test_content_type_no_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1166.8380422592163s cumulative, 0.01549673080444336s individual

.
current test PASSED/SKIPPED -- test_set_cookie_disallowed in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1166.8489117622375s cumulative, 0.010869503021240234s individual

.
current test PASSED/SKIPPED -- test_default_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1169.2672748565674s cumulative, 2.418363094329834s individual

.
current test PASSED/SKIPPED -- test_no_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1169.2748470306396s cumulative, 0.007572174072265625s individual

.
current test PASSED/SKIPPED -- test_append_link_with_link_extension in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1169.2803983688354s cumulative, 0.005551338195800781s individual

.
current test PASSED/SKIPPED -- test_declared_content_length_on_head in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1169.2858805656433s cumulative, 0.005482196807861328s individual

.
current test PASSED/SKIPPED -- test_declared_content_length_overriden_by_body_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1169.2964913845062s cumulative, 0.010610818862915039s individual

.
current test PASSED/SKIPPED -- test_vary_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1169.3095951080322s cumulative, 0.013103723526000977s individual

.
current test PASSED/SKIPPED -- test_append_link_single in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1169.3175904750824s cumulative, 0.007995367050170898s individual

.
current test PASSED/SKIPPED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1169.3242514133453s cumulative, 0.006660938262939453s individual

.
current test PASSED/SKIPPED -- test_append_link_invalid_crossorigin_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1169.3277208805084s cumulative, 0.0034694671630859375s individual


tests/test_cors_middleware.py .
current test PASSED/SKIPPED -- test_allow_origin_allow_credential in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 1169.3384335041046s cumulative, 0.010712623596191406s individual

.
current test PASSED/SKIPPED -- test_allow_origin in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 1169.3479199409485s cumulative, 0.00948643684387207s individual

.
current test PASSED/SKIPPED -- test_allow_credential_list_or_str in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 1169.3625621795654s cumulative, 0.01464223861694336s individual

.
current test PASSED/SKIPPED -- test_allow_credential_existing_origin in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 1169.3708891868591s cumulative, 0.008327007293701172s individual

.
current test PASSED/SKIPPED -- test_allow_origin in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 1169.382797241211s cumulative, 0.01190805435180664s individual

.
current test PASSED/SKIPPED -- test_expose_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 1169.3900022506714s cumulative, 0.007205009460449219s individual

.
current test PASSED/SKIPPED -- test_allow_credential_wildcard in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 1169.3998148441315s cumulative, 0.009812593460083008s individual

.
current test PASSED/SKIPPED -- test_allow_origin in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 1169.41339802742s cumulative, 0.013583183288574219s individual

.
current test PASSED/SKIPPED -- test_expose_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 1169.4229683876038s cumulative, 0.00957036018371582s individual

.
current test PASSED/SKIPPED -- test_allow_credential_list_or_str in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 1169.4370565414429s cumulative, 0.014088153839111328s individual

.
current test PASSED/SKIPPED -- test_expose_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 1169.445447921753s cumulative, 0.008391380310058594s individual

.
current test PASSED/SKIPPED -- test_enabled_cors_handles_preflighting in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 1169.4528303146362s cumulative, 0.007382392883300781s individual

.
current test PASSED/SKIPPED -- test_enabled_cors_no_origin in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 1169.4648976325989s cumulative, 0.012067317962646484s individual

.
current test PASSED/SKIPPED -- test_enabled_cors_should_add_extra_headers_on_response in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 1169.473828792572s cumulative, 0.008931159973144531s individual

.
current test PASSED/SKIPPED -- test_enabled_cors_handles_preflighting_no_headers_in_req in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 1169.483151435852s cumulative, 0.009322643280029297s individual

.
current test PASSED/SKIPPED -- test_enabled_cors_should_accept_all_origins_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 1169.4959125518799s cumulative, 0.012761116027832031s individual

.
current test PASSED/SKIPPED -- test_disabled_cors_should_not_add_any_extra_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_cors_middleware.py: 1169.5052347183228s cumulative, 0.009322166442871094s individual


tests/asgi/test_cythonized_asgi.py F
current test FAILED -- test_hooks in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 1169.6901454925537s cumulative, 0.18491077423095703s individual

F
current test FAILED -- test_jsonchema_validator in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_cythonized_asgi.py: 1169.852950334549s cumulative, 0.16280484199523926s individual


tests/test_after_hooks.py F
current test FAILED -- test_resource_with_uri_fields in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 1169.9992866516113s cumulative, 0.14633631706237793s individual

F
current test FAILED -- test_resource_with_uri_fields in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 1170.1122298240662s cumulative, 0.11294317245483398s individual

F
current test FAILED -- test_wrapped_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 1170.2436828613281s cumulative, 0.1314530372619629s individual

F
current test FAILED -- test_wrapped_resource_with_hooks_aware_of_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 1170.4540340900421s cumulative, 0.21035122871398926s individual

F
current test FAILED -- test_wrapped_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_after_hooks.py: 1170.82106590271s cumulative, 0.3670318126678467s individual


tests/test_cookies.py E
current test FAILED -- test_none_same_site_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1171.1740145683289s cumulative, 0.3529486656188965s individual

.
current test PASSED/SKIPPED -- test_unicode_inside_ascii_range in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1171.1858894824982s cumulative, 0.011874914169311523s individual

.
current test PASSED/SKIPPED -- test_cookies_setable in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1171.1978125572205s cumulative, 0.011923074722290039s individual

.
current test PASSED/SKIPPED -- test_cookie_header_is_missing in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1171.2039144039154s cumulative, 0.006101846694946289s individual

E
current test FAILED -- test_response_base_case in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1171.445886850357s cumulative, 0.2419724464416504s individual

E
current test FAILED -- test_cookies_setable in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1173.8350718021393s cumulative, 2.3891849517822266s individual

.
current test PASSED/SKIPPED -- test_non_ascii_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1173.8419680595398s cumulative, 0.006896257400512695s individual

.
current test PASSED/SKIPPED -- test_non_ascii_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1173.846913576126s cumulative, 0.004945516586303711s individual

.
current test PASSED/SKIPPED -- test_non_ascii_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1173.8516113758087s cumulative, 0.0046977996826171875s individual

.
current test PASSED/SKIPPED -- test_cookie_expires_aware in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1173.8649597167969s cumulative, 0.01334834098815918s individual

.
current test PASSED/SKIPPED -- test_cookie_expires_naive in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1173.8750050067902s cumulative, 0.010045289993286133s individual

E
current test FAILED -- test_cookie_timezone in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1174.059975862503s cumulative, 0.18497085571289062s individual

.
current test PASSED/SKIPPED -- test_non_ascii_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1174.069572687149s cumulative, 0.009596824645996094s individual

.
current test PASSED/SKIPPED -- test_invalid_same_site_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1174.0763146877289s cumulative, 0.006742000579833984s individual

.
current test PASSED/SKIPPED -- test_request_cookie_parsing in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1174.081972360611s cumulative, 0.005657672882080078s individual

.
current test PASSED/SKIPPED -- test_non_ascii_name in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1174.087653875351s cumulative, 0.005681514739990234s individual

.
current test PASSED/SKIPPED -- test_same_site_empty_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1174.102257490158s cumulative, 0.014603614807128906s individual

.
current test PASSED/SKIPPED -- test_none_same_site_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1174.112999200821s cumulative, 0.010741710662841797s individual

.
current test PASSED/SKIPPED -- test_non_ascii_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1174.118491411209s cumulative, 0.005492210388183594s individual

.
current test PASSED/SKIPPED -- test_response_unset_cookie in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1174.1306936740875s cumulative, 0.012202262878417969s individual

.
current test PASSED/SKIPPED -- test_invalid_cookies_are_ignored in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1174.1595392227173s cumulative, 0.028845548629760742s individual

.
current test PASSED/SKIPPED -- test_same_site_value_case_insensitive in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1174.164915561676s cumulative, 0.005376338958740234s individual

E
current test FAILED -- test_unset_cookies_samesite in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1174.3619112968445s cumulative, 0.19699573516845703s individual

E
current test FAILED -- test_same_site_empty_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1174.5386431217194s cumulative, 0.17673182487487793s individual

.
current test PASSED/SKIPPED -- test_response_complex_case in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1174.5580360889435s cumulative, 0.019392967224121094s individual

.
current test PASSED/SKIPPED -- test_duplicate_cookie in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1174.5672793388367s cumulative, 0.009243249893188477s individual

E
current test FAILED -- test_cookie_max_age_float_and_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1174.7724528312683s cumulative, 0.20517349243164062s individual

.
current test PASSED/SKIPPED -- test_same_site_value_case_insensitive in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1174.7779166698456s cumulative, 0.005463838577270508s individual

E
current test FAILED -- test_cookie_max_age_float_and_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1174.9628701210022s cumulative, 0.1849534511566162s individual

.
current test PASSED/SKIPPED -- test_invalid_same_site_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1174.9713418483734s cumulative, 0.00847172737121582s individual

.
current test PASSED/SKIPPED -- test_response_disable_secure_globally in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1174.9880156517029s cumulative, 0.016673803329467773s individual

.
current test PASSED/SKIPPED -- test_cookie_max_age_float_and_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1175.0083105564117s cumulative, 0.020294904708862305s individual

E
current test FAILED -- test_response_unset_cookie in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1175.2741606235504s cumulative, 0.2658500671386719s individual

.
current test PASSED/SKIPPED -- test_response_base_case in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1175.2969846725464s cumulative, 0.02282404899597168s individual

E
current test FAILED -- test_response_complex_case in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1175.5276565551758s cumulative, 0.23067188262939453s individual

.
current test PASSED/SKIPPED -- test_unset_cookies in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1175.5564091205597s cumulative, 0.028752565383911133s individual

.
current test PASSED/SKIPPED -- test_same_site_value_case_insensitive in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1175.5647711753845s cumulative, 0.008362054824829102s individual

.
current test PASSED/SKIPPED -- test_cookie_timezone in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1175.5786139965057s cumulative, 0.01384282112121582s individual

.
current test PASSED/SKIPPED -- test_lax_same_site_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1175.5972981452942s cumulative, 0.01868414878845215s individual

.
current test PASSED/SKIPPED -- test_cookie_max_age_float_and_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1175.6115341186523s cumulative, 0.014235973358154297s individual

E
current test FAILED -- test_cookie_expires_aware in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1175.850174665451s cumulative, 0.23864054679870605s individual

E
current test FAILED -- test_strict_same_site_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1176.096048116684s cumulative, 0.24587345123291016s individual

.
current test PASSED/SKIPPED -- test_unset_cookies_samesite in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1176.1234266757965s cumulative, 0.027378559112548828s individual

E
current test FAILED -- test_lax_same_site_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1178.6259219646454s cumulative, 2.502495288848877s individual

E
current test FAILED -- test_response_disable_secure_globally in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1178.7584853172302s cumulative, 0.13256335258483887s individual

E
current test FAILED -- test_cookie_expires_naive in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1178.9381158351898s cumulative, 0.17963051795959473s individual

.
current test PASSED/SKIPPED -- test_same_site_value_case_insensitive in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1178.9486474990845s cumulative, 0.01053166389465332s individual

.
current test PASSED/SKIPPED -- test_strict_same_site_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1178.9648365974426s cumulative, 0.016189098358154297s individual

.
current test PASSED/SKIPPED -- test_same_site_value_case_insensitive in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1178.9709477424622s cumulative, 0.00611114501953125s individual

.
current test PASSED/SKIPPED -- test_invalid_same_site_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1178.9751391410828s cumulative, 0.004191398620605469s individual

.
current test PASSED/SKIPPED -- test_same_site_value_case_insensitive in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1178.9809563159943s cumulative, 0.0058171749114990234s individual

E
current test FAILED -- test_unset_cookies in /home/kaiyaok2/PythonProjects/falcon/tests/test_cookies.py: 1179.2225613594055s cumulative, 0.24160504341125488s individual


tests/asgi/test_scope.py .
current test PASSED/SKIPPED -- test_scheme in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.228818655014s cumulative, 0.006257295608520508s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.2391757965088s cumulative, 0.010357141494750977s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.2493698596954s cumulative, 0.010194063186645508s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_default_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.2656903266907s cumulative, 0.016320466995239258s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.2807326316833s cumulative, 0.015042304992675781s individual

.
current test PASSED/SKIPPED -- test_unsupported_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.293838262558s cumulative, 0.013105630874633789s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.3067984580994s cumulative, 0.012960195541381836s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.3169803619385s cumulative, 0.010181903839111328s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.3309552669525s cumulative, 0.013974905014038086s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.3473460674286s cumulative, 0.01639080047607422s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.3586225509644s cumulative, 0.011276483535766602s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.3731036186218s cumulative, 0.014481067657470703s individual

.
current test PASSED/SKIPPED -- test_unsupported_scope_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.3880977630615s cumulative, 0.014994144439697266s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.4028849601746s cumulative, 0.01478719711303711s individual

.
current test PASSED/SKIPPED -- test_unsupported_scope_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.4167952537537s cumulative, 0.013910293579101562s individual

.
current test PASSED/SKIPPED -- test_scheme in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.4230947494507s cumulative, 0.006299495697021484s individual

.
current test PASSED/SKIPPED -- test_scheme in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.4284517765045s cumulative, 0.005357027053833008s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.4390304088593s cumulative, 0.010578632354736328s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.4509160518646s cumulative, 0.011885643005371094s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.457926273346s cumulative, 0.007010221481323242s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.464738368988s cumulative, 0.006812095642089844s individual

.
current test PASSED/SKIPPED -- test_missing_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.4731159210205s cumulative, 0.008377552032470703s individual

.
current test PASSED/SKIPPED -- test_unsupported_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.4781930446625s cumulative, 0.0050771236419677734s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.4861028194427s cumulative, 0.007909774780273438s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.4907901287079s cumulative, 0.004687309265136719s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.4952704906464s cumulative, 0.0044803619384765625s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.4999477863312s cumulative, 0.004677295684814453s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.5062663555145s cumulative, 0.006318569183349609s individual

.
current test PASSED/SKIPPED -- test_unsupported_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.5121777057648s cumulative, 0.005911350250244141s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.5181374549866s cumulative, 0.005959749221801758s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.522526025772s cumulative, 0.004388570785522461s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.5270595550537s cumulative, 0.004533529281616211s individual

.
current test PASSED/SKIPPED -- test_scheme in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.5308375358582s cumulative, 0.0037779808044433594s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.5373525619507s cumulative, 0.006515026092529297s individual

.
current test PASSED/SKIPPED -- test_scheme in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.540687084198s cumulative, 0.003334522247314453s individual

.
current test PASSED/SKIPPED -- test_scheme in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.5440926551819s cumulative, 0.0034055709838867188s individual

.
current test PASSED/SKIPPED -- test_scheme in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.548368692398s cumulative, 0.0042760372161865234s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.5534822940826s cumulative, 0.0051136016845703125s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.558352470398s cumulative, 0.004870176315307617s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.5644917488098s cumulative, 0.006139278411865234s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.570055961609s cumulative, 0.005564212799072266s individual

.
current test PASSED/SKIPPED -- test_cookies_options_meathod in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.5735411643982s cumulative, 0.0034852027893066406s individual

.
current test PASSED/SKIPPED -- test_cookies in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.5768656730652s cumulative, 0.0033245086669921875s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.5820398330688s cumulative, 0.005174160003662109s individual

.
current test PASSED/SKIPPED -- test_unsupported_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.589653968811s cumulative, 0.0076141357421875s individual

.
current test PASSED/SKIPPED -- test_query_string_values in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.5993943214417s cumulative, 0.009740352630615234s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.606659412384s cumulative, 0.0072650909423828125s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.614497423172s cumulative, 0.007838010787963867s individual

.
current test PASSED/SKIPPED -- test_unsupported_scope_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.6202600002289s cumulative, 0.005762577056884766s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.6312656402588s cumulative, 0.011005640029907227s individual

.
current test PASSED/SKIPPED -- test_cookies in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.6381468772888s cumulative, 0.006881237030029297s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.6453392505646s cumulative, 0.007192373275756836s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.6522209644318s cumulative, 0.0068817138671875s individual

.
current test PASSED/SKIPPED -- test_supported_http_spec in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.6616804599762s cumulative, 0.009459495544433594s individual

.
current test PASSED/SKIPPED -- test_lifespan_scope_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.6731777191162s cumulative, 0.011497259140014648s individual

.
current test PASSED/SKIPPED -- test_supported_asgi_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_scope.py: 1179.6833381652832s cumulative, 0.010160446166992188s individual


tests/test_sink_and_static.py .
current test PASSED/SKIPPED -- test_sink_before_static_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_sink_and_static.py: 1179.7082588672638s cumulative, 0.02492070198059082s individual

.
current test PASSED/SKIPPED -- test_sink_before_static_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_sink_and_static.py: 1179.7241380214691s cumulative, 0.015879154205322266s individual

.
current test PASSED/SKIPPED -- test_sink_after_static_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_sink_and_static.py: 1179.7429320812225s cumulative, 0.01879405975341797s individual

.
current test PASSED/SKIPPED -- test_sink_after_static_route in /home/kaiyaok2/PythonProjects/falcon/tests/test_sink_and_static.py: 1179.7553968429565s cumulative, 0.012464761734008789s individual


tests/test_middleware.py F
current test FAILED -- test_http_status_raised_from_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1179.9435012340546s cumulative, 0.18810439109802246s individual

F
current test FAILED -- test_error_composed_before_resp_middleware_called in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1180.1165375709534s cumulative, 0.1730363368988037s individual

F
current test FAILED -- test_can_access_resource_params in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1180.264725446701s cumulative, 0.14818787574768066s individual

F
current test FAILED -- test_can_access_resource_params in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1180.3813891410828s cumulative, 0.11666369438171387s individual

F
current test FAILED -- test_dont_need_params_in_signature in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1180.5706312656403s cumulative, 0.18924212455749512s individual

F
current test FAILED -- test_skip_process_resource in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1180.7443981170654s cumulative, 0.1737668514251709s individual

F
current test FAILED -- test_log_get_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1183.2374606132507s cumulative, 2.4930624961853027s individual

F
current test FAILED -- test_response_middleware_raises_exception in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1183.4053790569305s cumulative, 0.16791844367980957s individual

F
current test FAILED -- test_log_get_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1183.586758852005s cumulative, 0.1813797950744629s individual

F
current test FAILED -- test_process_request_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1183.7935154438019s cumulative, 0.206756591796875s individual

F
current test FAILED -- test_process_request_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1184.0244510173798s cumulative, 0.23093557357788086s individual

F
current test FAILED -- test_process_resource_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1184.2042031288147s cumulative, 0.17975211143493652s individual

F
current test FAILED -- test_process_request_not_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1184.3840291500092s cumulative, 0.179826021194458s individual

F
current test FAILED -- test_process_resource_cached in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1184.6557500362396s cumulative, 0.27172088623046875s individual

sF
current test FAILED -- test_generate_trans_id_with_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1184.967980146408s cumulative, 0.31223011016845703s individual

F
current test FAILED -- test_base_path_is_removed_before_routing in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1187.634799003601s cumulative, 2.666818857192993s individual

F
current test FAILED -- test_order_independent_mw_executed_when_exception_in_req in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1187.9589304924011s cumulative, 0.32413148880004883s individual

F
current test FAILED -- test_legacy_middleware_called_with_correct_args in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1188.2591643333435s cumulative, 0.3002338409423828s individual

F
current test FAILED -- test_outer_mw_with_ex_handler_throw_exception in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1188.5807354450226s cumulative, 0.32157111167907715s individual

F
current test FAILED -- test_order_mw_executed_when_exception_in_resp in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1188.8246581554413s cumulative, 0.24392271041870117s individual

F
current test FAILED -- test_inner_mw_throw_exception_while_processing_resp in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1189.0321578979492s cumulative, 0.20749974250793457s individual

F
current test FAILED -- test_order_independent_mw_executed_when_exception_in_rsrc in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1189.1733825206757s cumulative, 0.14122462272644043s individual

F
current test FAILED -- test_multiple_response_mw_throw_exception in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1189.3156402111053s cumulative, 0.1422576904296875s individual

F
current test FAILED -- test_inner_mw_throw_exception in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1189.4661388397217s cumulative, 0.150498628616333s individual

F
current test FAILED -- test_order_independent_mw_executed_when_exception_in_resp in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1189.6228840351105s cumulative, 0.15674519538879395s individual

F
current test FAILED -- test_independent_middleware_execution_order in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1192.413545370102s cumulative, 2.790661334991455s individual

F
current test FAILED -- test_inner_mw_with_ex_handler_throw_exception in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1192.614319562912s cumulative, 0.2007741928100586s individual

F
current test FAILED -- test_order_mw_executed_when_exception_in_req in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1192.802148103714s cumulative, 0.18782854080200195s individual

F
current test FAILED -- test_middleware_execution_order in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1192.9891817569733s cumulative, 0.18703365325927734s individual

F
current test FAILED -- test_generate_trans_id_and_time_with_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1193.2386264801025s cumulative, 0.24944472312927246s individual

F
current test FAILED -- test_generate_trans_id_and_time_with_request in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1193.4142768383026s cumulative, 0.17565035820007324s individual

F
current test FAILED -- test_order_mw_executed_when_exception_in_rsrc in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1193.5782761573792s cumulative, 0.16399931907653809s individual

F
current test FAILED -- test_api_initialization_with_cors_enabled_and_middleware_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1193.7623076438904s cumulative, 0.18403148651123047s individual

F
current test FAILED -- test_api_initialization_with_cors_enabled_and_middleware_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1193.9387373924255s cumulative, 0.17642974853515625s individual

F
current test FAILED -- test_api_initialization_with_cors_enabled_and_middleware_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1194.0830173492432s cumulative, 0.14427995681762695s individual

F
current test FAILED -- test_api_initialization_with_cors_enabled_and_middleware_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_middleware.py: 1194.204302072525s cumulative, 0.12128472328186035s individual


tests/test_utils.py .
current test PASSED/SKIPPED -- test_keys_and_values in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.208117723465s cumulative, 0.0038156509399414062s individual

.
current test PASSED/SKIPPED -- test_dict_interface in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.2125480175018s cumulative, 0.004430294036865234s individual

.
current test PASSED/SKIPPED -- test_attributes in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.2156789302826s cumulative, 0.0031309127807617188s individual

.
current test PASSED/SKIPPED -- test_items_from_attributes in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.2188811302185s cumulative, 0.003202199935913086s individual

.
current test PASSED/SKIPPED -- test_dict_interface in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.2244818210602s cumulative, 0.005600690841674805s individual

.
current test PASSED/SKIPPED -- test_items_from_attributes in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.2274377346039s cumulative, 0.002955913543701172s individual

.
current test PASSED/SKIPPED -- test_attributes_from_items in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.2305805683136s cumulative, 0.003142833709716797s individual

.
current test PASSED/SKIPPED -- test_attributes in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.2343096733093s cumulative, 0.003729104995727539s individual

.
current test PASSED/SKIPPED -- test_attributes_from_items in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.2380125522614s cumulative, 0.003702878952026367s individual

.
current test PASSED/SKIPPED -- test_keys_and_values in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.241982460022s cumulative, 0.003969907760620117s individual

.
current test PASSED/SKIPPED -- test_method in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.2480900287628s cumulative, 0.0061075687408447266s individual

.
current test PASSED/SKIPPED -- test_function in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.2528409957886s cumulative, 0.004750967025756836s individual

.
current test PASSED/SKIPPED -- test_something in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.259719133377s cumulative, 0.0068781375885009766s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.2644891738892s cumulative, 0.004770040512084961s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.272357225418s cumulative, 0.007868051528930664s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.2780022621155s cumulative, 0.005645036697387695s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.2839226722717s cumulative, 0.00592041015625s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.287929534912s cumulative, 0.004006862640380859s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.2929427623749s cumulative, 0.005013227462768555s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.2977118492126s cumulative, 0.004769086837768555s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.3166270256042s cumulative, 0.018915176391601562s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.3290407657623s cumulative, 0.012413740158081055s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.3360340595245s cumulative, 0.006993293762207031s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.3400752544403s cumulative, 0.004041194915771484s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.3437106609344s cumulative, 0.003635406494140625s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.3478038311005s cumulative, 0.004093170166015625s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.3518478870392s cumulative, 0.004044055938720703s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.355539560318s cumulative, 0.0036916732788085938s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.3589792251587s cumulative, 0.003439664840698242s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.3629002571106s cumulative, 0.003921031951904297s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.3664467334747s cumulative, 0.003546476364135742s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.3712844848633s cumulative, 0.004837751388549805s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.3751327991486s cumulative, 0.0038483142852783203s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.380791425705s cumulative, 0.005658626556396484s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.384262084961s cumulative, 0.0034706592559814453s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.3875315189362s cumulative, 0.0032694339752197266s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.391900062561s cumulative, 0.00436854362487793s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.3958539962769s cumulative, 0.0039539337158203125s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.4002003669739s cumulative, 0.004346370697021484s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.4038271903992s cumulative, 0.0036268234252929688s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.40793800354s cumulative, 0.004110813140869141s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.4123847484589s cumulative, 0.004446744918823242s individual

.
current test PASSED/SKIPPED -- test_something in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.4188523292542s cumulative, 0.006467580795288086s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.4226849079132s cumulative, 0.003832578659057617s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.4262437820435s cumulative, 0.0035588741302490234s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.4304690361023s cumulative, 0.004225254058837891s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.4340724945068s cumulative, 0.0036034584045410156s individual

.
current test PASSED/SKIPPED -- test_get_argnames in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.437222480774s cumulative, 0.0031499862670898438s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.4407901763916s cumulative, 0.0035676956176757812s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.4454860687256s cumulative, 0.004695892333984375s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.4491958618164s cumulative, 0.0037097930908203125s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.4529564380646s cumulative, 0.0037605762481689453s individual

.
current test PASSED/SKIPPED -- test_json_deprecation in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.4561831951141s cumulative, 0.003226757049560547s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.460037946701s cumulative, 0.0038547515869140625s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.463635444641s cumulative, 0.0035974979400634766s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.4674096107483s cumulative, 0.0037741661071777344s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.47083735466s cumulative, 0.003427743911743164s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.4761936664581s cumulative, 0.005356311798095703s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.4808733463287s cumulative, 0.004679679870605469s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.4848597049713s cumulative, 0.003986358642578125s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.488285779953s cumulative, 0.003426074981689453s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.4943180084229s cumulative, 0.006032228469848633s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.498151063919s cumulative, 0.0038330554962158203s individual

.
current test PASSED/SKIPPED -- test_simulate_request_protocol in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.5015609264374s cumulative, 0.003409862518310547s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.5069437026978s cumulative, 0.0053827762603759766s individual

.
current test PASSED/SKIPPED -- test_simulate_free_functions in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.514548778534s cumulative, 0.007605075836181641s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.517935037613s cumulative, 0.003386259078979492s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.5210864543915s cumulative, 0.003151416778564453s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.524401664734s cumulative, 0.0033152103424072266s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.527939081192s cumulative, 0.003537416458129883s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.5314300060272s cumulative, 0.003490924835205078s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.5342779159546s cumulative, 0.002847909927368164s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.5376374721527s cumulative, 0.003359556198120117s individual

.
current test PASSED/SKIPPED -- test_parse_query_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.5405898094177s cumulative, 0.0029523372650146484s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_coding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.5445601940155s cumulative, 0.00397038459777832s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.5486497879028s cumulative, 0.0040895938873291016s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_coding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.5520164966583s cumulative, 0.003366708755493164s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.5554852485657s cumulative, 0.003468751907348633s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.5584263801575s cumulative, 0.002941131591796875s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.5635149478912s cumulative, 0.0050885677337646484s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_unicode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.5701303482056s cumulative, 0.006615400314331055s individual

.
current test PASSED/SKIPPED -- test_secure_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.5741636753082s cumulative, 0.004033327102661133s individual

.
current test PASSED/SKIPPED -- test_secure_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.5777990818024s cumulative, 0.003635406494140625s individual

.
current test PASSED/SKIPPED -- test_to_query_str_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.5817604064941s cumulative, 0.003961324691772461s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.584998846054s cumulative, 0.0032384395599365234s individual

.
current test PASSED/SKIPPED -- test_deprecated_decorator in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.5888016223907s cumulative, 0.003802776336669922s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.5920531749725s cumulative, 0.0032515525817871094s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.5954837799072s cumulative, 0.003430604934692383s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_unicode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.5992577075958s cumulative, 0.003773927688598633s individual

.
current test PASSED/SKIPPED -- test_dt_to_http in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.602782011032s cumulative, 0.003524303436279297s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.6064774990082s cumulative, 0.0036954879760742188s individual

.
current test PASSED/SKIPPED -- test_pack_query_params_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.6094822883606s cumulative, 0.003004789352416992s individual

.
current test PASSED/SKIPPED -- test_to_query_str_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.6128180027008s cumulative, 0.003335714340209961s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.6170771121979s cumulative, 0.0042591094970703125s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_unicode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.6217920780182s cumulative, 0.0047149658203125s individual

.
current test PASSED/SKIPPED -- test_secure_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.626315832138s cumulative, 0.004523754119873047s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.6305041313171s cumulative, 0.0041882991790771484s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.6350359916687s cumulative, 0.0045318603515625s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.6396384239197s cumulative, 0.0046024322509765625s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_coding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.6454536914825s cumulative, 0.005815267562866211s individual

.
current test PASSED/SKIPPED -- test_prop_uri_encode_value_models_stdlib_quote_safe_tilde in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.654935836792s cumulative, 0.009482145309448242s individual

.
current test PASSED/SKIPPED -- test_uri_decode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.660376548767s cumulative, 0.005440711975097656s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.6668448448181s cumulative, 0.006468296051025391s individual

.
current test PASSED/SKIPPED -- test_to_query_str_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.6714284420013s cumulative, 0.004583597183227539s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_coding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.6763324737549s cumulative, 0.004904031753540039s individual

.
current test PASSED/SKIPPED -- test_http_now in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.6818323135376s cumulative, 0.005499839782714844s individual

.
current test PASSED/SKIPPED -- test_unquote_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.6859719753265s cumulative, 0.00413966178894043s individual

.
current test PASSED/SKIPPED -- test_secure_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.6901226043701s cumulative, 0.0041506290435791016s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.6954832077026s cumulative, 0.005360603332519531s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.700299024582s cumulative, 0.004815816879272461s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.7057094573975s cumulative, 0.005410432815551758s individual

.
current test PASSED/SKIPPED -- test_secure_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.710357427597s cumulative, 0.004647970199584961s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.7151799201965s cumulative, 0.004822492599487305s individual

.
current test PASSED/SKIPPED -- test_uri_encode_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.7195074558258s cumulative, 0.004327535629272461s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.7250554561615s cumulative, 0.005548000335693359s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.7308750152588s cumulative, 0.005819559097290039s individual

.
current test PASSED/SKIPPED -- test_secure_filename_empty_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.7347300052643s cumulative, 0.003854990005493164s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.7392327785492s cumulative, 0.004502773284912109s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.7442843914032s cumulative, 0.005051612854003906s individual

.
current test PASSED/SKIPPED -- test_secure_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.7502920627594s cumulative, 0.006007671356201172s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_unicode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.7593667507172s cumulative, 0.009074687957763672s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.7673125267029s cumulative, 0.007945775985717773s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.7725443840027s cumulative, 0.0052318572998046875s individual

.
current test PASSED/SKIPPED -- test_uri_encode_double in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.7792212963104s cumulative, 0.006676912307739258s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.7844383716583s cumulative, 0.005217075347900391s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.789286851883s cumulative, 0.004848480224609375s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.7941670417786s cumulative, 0.004880189895629883s individual

.
current test PASSED/SKIPPED -- test_etag_dumps_to_header_format in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.7992289066315s cumulative, 0.0050618648529052734s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.8047432899475s cumulative, 0.005514383316040039s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.8093945980072s cumulative, 0.004651308059692383s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.8138732910156s cumulative, 0.0044786930084228516s individual

.
current test PASSED/SKIPPED -- test_get_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.8192129135132s cumulative, 0.005339622497558594s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.824140548706s cumulative, 0.004927635192871094s individual

.
current test PASSED/SKIPPED -- test_uri_decode_unquote_plus in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.8308930397034s cumulative, 0.006752490997314453s individual

.
current test PASSED/SKIPPED -- test_uri_decode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.834596157074s cumulative, 0.0037031173706054688s individual

.
current test PASSED/SKIPPED -- test_get_http_status_warns in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.8386249542236s cumulative, 0.004028797149658203s individual

.
current test PASSED/SKIPPED -- test_to_query_str_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.84197473526s cumulative, 0.003349781036376953s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.845255613327s cumulative, 0.0032808780670166016s individual

.
current test PASSED/SKIPPED -- test_to_query_str_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.848647594452s cumulative, 0.0033919811248779297s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.8517899513245s cumulative, 0.0031423568725585938s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_coding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.8558123111725s cumulative, 0.004022359848022461s individual

.
current test PASSED/SKIPPED -- test_prop_uri_encode_models_stdlib_quote in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.8629174232483s cumulative, 0.007105112075805664s individual

.
current test PASSED/SKIPPED -- test_pack_query_params_several in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.8660383224487s cumulative, 0.003120899200439453s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_unicode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.8701241016388s cumulative, 0.0040857791900634766s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.8735871315002s cumulative, 0.0034630298614501953s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.8767607212067s cumulative, 0.0031735897064208984s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.8808546066284s cumulative, 0.00409388542175293s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.8838555812836s cumulative, 0.003000974655151367s individual

.
current test PASSED/SKIPPED -- test_pack_query_params_one in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.8871698379517s cumulative, 0.0033142566680908203s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.8905990123749s cumulative, 0.0034291744232177734s individual

.
current test PASSED/SKIPPED -- test_prop_uri_decode_models_stdlib_unquote_plus in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.9038271903992s cumulative, 0.013228178024291992s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.9093835353851s cumulative, 0.005556344985961914s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.914707183838s cumulative, 0.005323648452758789s individual

.
current test PASSED/SKIPPED -- test_etag_strong_vs_weak_comparison in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.9189550876617s cumulative, 0.004247903823852539s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.9235036373138s cumulative, 0.004548549652099609s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.9269800186157s cumulative, 0.003476381301879883s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.9342267513275s cumulative, 0.007246732711791992s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_unicode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.9399831295013s cumulative, 0.005756378173828125s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.949092388153s cumulative, 0.009109258651733398s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.9554600715637s cumulative, 0.006367683410644531s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.9609322547913s cumulative, 0.0054721832275390625s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.9663710594177s cumulative, 0.005438804626464844s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_unicode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.9724283218384s cumulative, 0.006057262420654297s individual

.
current test PASSED/SKIPPED -- test_uri_encode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.9769365787506s cumulative, 0.004508256912231445s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.9817893505096s cumulative, 0.004852771759033203s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.985316991806s cumulative, 0.0035276412963867188s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_coding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1194.9908514022827s cumulative, 0.00553441047668457s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.019746541977s cumulative, 0.028895139694213867s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.0302448272705s cumulative, 0.010498285293579102s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.0367450714111s cumulative, 0.006500244140625s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.0407240390778s cumulative, 0.0039789676666259766s individual

.
current test PASSED/SKIPPED -- test_uri_decode_bad_unicode in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.0463123321533s cumulative, 0.0055882930755615234s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.051893234253s cumulative, 0.005580902099609375s individual

.
current test PASSED/SKIPPED -- test_uri_decode_unquote_plus in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.0568714141846s cumulative, 0.004978179931640625s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.0610179901123s cumulative, 0.004146575927734375s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.0645084381104s cumulative, 0.003490447998046875s individual

.
current test PASSED/SKIPPED -- test_to_query_str_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.0686717033386s cumulative, 0.004163265228271484s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.072146654129s cumulative, 0.0034749507904052734s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status_value_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.0756323337555s cumulative, 0.0034856796264648438s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.0797102451324s cumulative, 0.004077911376953125s individual

.
current test PASSED/SKIPPED -- test_to_query_str_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.083177804947s cumulative, 0.003467559814453125s individual

.
current test PASSED/SKIPPED -- test_parse_host in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.0861432552338s cumulative, 0.0029654502868652344s individual

.
current test PASSED/SKIPPED -- test_http_date_to_dt in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.0975975990295s cumulative, 0.011454343795776367s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.1008021831512s cumulative, 0.0032045841217041016s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.103990316391s cumulative, 0.0031881332397460938s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.1071281433105s cumulative, 0.003137826919555664s individual

.
current test PASSED/SKIPPED -- test_to_query_str_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.110432624817s cumulative, 0.0033044815063476562s individual

.
current test PASSED/SKIPPED -- test_secure_filename in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.113723039627s cumulative, 0.003290414810180664s individual

.
current test PASSED/SKIPPED -- test_misc_isascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.1170372962952s cumulative, 0.0033142566680908203s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.1201055049896s cumulative, 0.003068208694458008s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.1233294010162s cumulative, 0.003223896026611328s individual

.
current test PASSED/SKIPPED -- test_parse_query_string_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.1265397071838s cumulative, 0.003210306167602539s individual

.
current test PASSED/SKIPPED -- test_code_to_http_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.129753112793s cumulative, 0.0032134056091308594s individual

.
current test PASSED/SKIPPED -- test_to_query_str_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.1335146427155s cumulative, 0.0037615299224853516s individual

.
current test PASSED/SKIPPED -- test_to_query_str_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.1366930007935s cumulative, 0.0031783580780029297s individual

.
current test PASSED/SKIPPED -- test_http_status_to_code in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.1398520469666s cumulative, 0.003159046173095703s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type_extra_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.1489160060883s cumulative, 0.009063959121704102s individual

.
current test PASSED/SKIPPED -- test_none_header_value_in_create_environ in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.1515650749207s cumulative, 0.002649068832397461s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.1614301204681s cumulative, 0.009865045547485352s individual

.
current test PASSED/SKIPPED -- test_query_string in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.1691620349884s cumulative, 0.007731914520263672s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.17537856102s cumulative, 0.006216526031494141s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.1820747852325s cumulative, 0.006696224212646484s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.1883552074432s cumulative, 0.006280422210693359s individual

.
current test PASSED/SKIPPED -- test_simulate_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.1945261955261s cumulative, 0.006170988082885742s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type_extra_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.2003309726715s cumulative, 0.005804777145385742s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.2057497501373s cumulative, 0.0054187774658203125s individual

.
current test PASSED/SKIPPED -- test_no_prefix_allowed_for_query_strings_in_create_environ in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.2083427906036s cumulative, 0.0025930404663085938s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.2155966758728s cumulative, 0.007253885269165039s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.2215144634247s cumulative, 0.005917787551879883s individual

.
current test PASSED/SKIPPED -- test_simulate_hostname in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.2261531352997s cumulative, 0.004638671875s individual

.
current test PASSED/SKIPPED -- test_default_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.2319662570953s cumulative, 0.005813121795654297s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.2384159564972s cumulative, 0.006449699401855469s individual

.
current test PASSED/SKIPPED -- test_simulate_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.24720454216s cumulative, 0.008788585662841797s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.2582840919495s cumulative, 0.011079549789428711s individual

.
current test PASSED/SKIPPED -- test_path_must_start_with_slash in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.263230085373s cumulative, 0.004945993423461914s individual

.
current test PASSED/SKIPPED -- test_simple_resource_body_json_xor in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.2668612003326s cumulative, 0.003631114959716797s individual

.
current test PASSED/SKIPPED -- test_simulate_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.2737262248993s cumulative, 0.006865024566650391s individual

.
current test PASSED/SKIPPED -- test_decode_empty_result in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.2796087265015s cumulative, 0.0058825016021728516s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.2869226932526s cumulative, 0.007313966751098633s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.293973684311s cumulative, 0.007050991058349609s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.30015873909s cumulative, 0.006185054779052734s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.3057174682617s cumulative, 0.00555872917175293s individual

.
current test PASSED/SKIPPED -- test_decode_empty_result in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.313230752945s cumulative, 0.007513284683227539s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.3219363689423s cumulative, 0.008705615997314453s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.3327519893646s cumulative, 0.010815620422363281s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type_extra_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.3458843231201s cumulative, 0.013132333755493164s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.355070590973s cumulative, 0.009186267852783203s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.3624908924103s cumulative, 0.00742030143737793s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.3695030212402s cumulative, 0.007012128829956055s individual

.
current test PASSED/SKIPPED -- test_simulate_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.3775296211243s cumulative, 0.008026599884033203s individual

.
current test PASSED/SKIPPED -- test_repr_without_content_type_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.3830916881561s cumulative, 0.0055620670318603516s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.3955099582672s cumulative, 0.012418270111083984s individual

.
current test PASSED/SKIPPED -- test_simulate_remote_addr in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.4056541919708s cumulative, 0.010144233703613281s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type_extra_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.4171900749207s cumulative, 0.011535882949829102s individual

.
current test PASSED/SKIPPED -- test_simulate_with_environ_extras in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.4249031543732s cumulative, 0.0077130794525146484s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.4360868930817s cumulative, 0.011183738708496094s individual

.
current test PASSED/SKIPPED -- test_path_escape_chars_in_create_environ in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.4389488697052s cumulative, 0.0028619766235351562s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.4469125270844s cumulative, 0.00796365737915039s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.4539921283722s cumulative, 0.007079601287841797s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.4620215892792s cumulative, 0.008029460906982422s individual

.
current test PASSED/SKIPPED -- test_repr_without_content_type_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.4653346538544s cumulative, 0.0033130645751953125s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.4744963645935s cumulative, 0.009161710739135742s individual

.
current test PASSED/SKIPPED -- test_wsgi_iterable_not_closeable in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.4788246154785s cumulative, 0.004328250885009766s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.4893624782562s cumulative, 0.010537862777709961s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.5018758773804s cumulative, 0.012513399124145508s individual

.
current test PASSED/SKIPPED -- test_httpnow_alias_for_backwards_compat in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.5057725906372s cumulative, 0.0038967132568359375s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.514059305191s cumulative, 0.008286714553833008s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type_extra_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.521407365799s cumulative, 0.007348060607910156s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type_extra_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.5270366668701s cumulative, 0.005629301071166992s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.5341050624847s cumulative, 0.0070683956146240234s individual

.
current test PASSED/SKIPPED -- test_query_string_no_question in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.53813290596s cumulative, 0.004027843475341797s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.5449705123901s cumulative, 0.006837606430053711s individual

.
current test PASSED/SKIPPED -- test_simple_resource_body_json_xor in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.5479719638824s cumulative, 0.0030014514923095703s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type_extra_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.554151058197s cumulative, 0.006179094314575195s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.5647175312042s cumulative, 0.010566473007202148s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.5719392299652s cumulative, 0.007221698760986328s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type_extra_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.5791873931885s cumulative, 0.0072481632232666016s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.5863411426544s cumulative, 0.007153749465942383s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.6021838188171s cumulative, 0.015842676162719727s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.6124415397644s cumulative, 0.010257720947265625s individual

.
current test PASSED/SKIPPED -- test_cached_text_in_result in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.62091755867s cumulative, 0.008476018905639648s individual

.
current test PASSED/SKIPPED -- test_plus_in_path_in_create_environ in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.6252026557922s cumulative, 0.004285097122192383s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.6354718208313s cumulative, 0.0102691650390625s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.6439743041992s cumulative, 0.008502483367919922s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.6502697467804s cumulative, 0.006295442581176758s individual

.
current test PASSED/SKIPPED -- test_simulate_with_environ_extras in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.6550598144531s cumulative, 0.004790067672729492s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type_extra_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.6606023311615s cumulative, 0.0055425167083740234s individual

.
current test PASSED/SKIPPED -- test_simulate_content_type_extra_handler in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.6677253246307s cumulative, 0.007122993469238281s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.6744389533997s cumulative, 0.0067136287689208984s individual

.
current test PASSED/SKIPPED -- test_query_string_in_path in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.680727481842s cumulative, 0.0062885284423828125s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.6879382133484s cumulative, 0.007210731506347656s individual

.
current test PASSED/SKIPPED -- test_override_method_with_extras in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.6935105323792s cumulative, 0.005572319030761719s individual

.
current test PASSED/SKIPPED -- test_default_headers_with_override in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.7006151676178s cumulative, 0.007104635238647461s individual

.
current test PASSED/SKIPPED -- test_status in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.7063436508179s cumulative, 0.005728483200073242s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.7117202281952s cumulative, 0.005376577377319336s individual

.
current test PASSED/SKIPPED -- test_simulate_json_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.7174146175385s cumulative, 0.005694389343261719s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.7245407104492s cumulative, 0.0071260929107666016s individual

.
current test PASSED/SKIPPED -- test_repr_result_when_body_varies in /home/kaiyaok2/PythonProjects/falcon/tests/test_utils.py: 1195.7304759025574s cumulative, 0.005935192108154297s individual


tests/test_request_forwarded.py .
current test PASSED/SKIPPED -- test_forwarded_quote_escaping in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 1195.734218120575s cumulative, 0.003742218017578125s individual

.
current test PASSED/SKIPPED -- test_no_forwarded_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 1195.7392330169678s cumulative, 0.005014896392822266s individual

.
current test PASSED/SKIPPED -- test_no_forwarded_headers_with_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 1195.7444455623627s cumulative, 0.005212545394897461s individual

.
current test PASSED/SKIPPED -- test_escape_malformed_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 1195.7489204406738s cumulative, 0.0044748783111572266s individual

.
current test PASSED/SKIPPED -- test_no_forwarded_headers_with_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 1195.7523336410522s cumulative, 0.0034132003784179688s individual

.
current test PASSED/SKIPPED -- test_forwarded_multiple_params in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 1195.755520582199s cumulative, 0.003186941146850586s individual

.
current test PASSED/SKIPPED -- test_forwarded_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 1195.759430885315s cumulative, 0.0039103031158447266s individual

.
current test PASSED/SKIPPED -- test_forwarded_quote_escaping in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 1195.7627272605896s cumulative, 0.003296375274658203s individual

.
current test PASSED/SKIPPED -- test_escape_malformed_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 1195.7666277885437s cumulative, 0.0039005279541015625s individual

.
current test PASSED/SKIPPED -- test_forwarded_multiple_params in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 1195.7699494361877s cumulative, 0.0033216476440429688s individual

.
current test PASSED/SKIPPED -- test_escape_malformed_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 1195.773167848587s cumulative, 0.003218412399291992s individual

.
current test PASSED/SKIPPED -- test_escape_malformed_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 1195.7764780521393s cumulative, 0.0033102035522460938s individual

.
current test PASSED/SKIPPED -- test_x_forwarded_proto in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 1195.7805745601654s cumulative, 0.004096508026123047s individual

.
current test PASSED/SKIPPED -- test_forwarded_host in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 1195.7847888469696s cumulative, 0.004214286804199219s individual

.
current test PASSED/SKIPPED -- test_x_forwarded_proto in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 1195.7877843379974s cumulative, 0.0029954910278320312s individual

.
current test PASSED/SKIPPED -- test_escape_malformed_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 1195.7909939289093s cumulative, 0.0032095909118652344s individual

.
current test PASSED/SKIPPED -- test_forwarded_host in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 1195.7940752506256s cumulative, 0.0030813217163085938s individual

.
current test PASSED/SKIPPED -- test_escape_malformed_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 1195.7974898815155s cumulative, 0.003414630889892578s individual

.
current test PASSED/SKIPPED -- test_forwarded_missing_first_hop_host in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 1195.8006029129028s cumulative, 0.0031130313873291016s individual

.
current test PASSED/SKIPPED -- test_escape_malformed_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 1195.8037786483765s cumulative, 0.0031757354736328125s individual

.
current test PASSED/SKIPPED -- test_forwarded_missing_first_hop_host in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 1195.8066692352295s cumulative, 0.0028905868530273438s individual

.
current test PASSED/SKIPPED -- test_x_forwarded_host in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 1195.8096652030945s cumulative, 0.0029959678649902344s individual

.
current test PASSED/SKIPPED -- test_forwarded_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 1195.8132119178772s cumulative, 0.0035467147827148438s individual

.
current test PASSED/SKIPPED -- test_escape_malformed_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 1195.8165373802185s cumulative, 0.0033254623413085938s individual

.
current test PASSED/SKIPPED -- test_no_forwarded_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 1195.8221628665924s cumulative, 0.005625486373901367s individual

.
current test PASSED/SKIPPED -- test_x_forwarded_host_with_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 1195.8277921676636s cumulative, 0.005629301071166992s individual

.
current test PASSED/SKIPPED -- test_escape_malformed_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 1195.8322570323944s cumulative, 0.004464864730834961s individual

.
current test PASSED/SKIPPED -- test_x_forwarded_host in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 1195.8369140625s cumulative, 0.00465703010559082s individual

.
current test PASSED/SKIPPED -- test_escape_malformed_requests in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 1195.8418414592743s cumulative, 0.004927396774291992s individual

.
current test PASSED/SKIPPED -- test_x_forwarded_host_with_port in /home/kaiyaok2/PythonProjects/falcon/tests/test_request_forwarded.py: 1195.846108675003s cumulative, 0.004267215728759766s individual


tests/test_alias.py .
current test PASSED/SKIPPED -- test_cookies in /home/kaiyaok2/PythonProjects/falcon/tests/test_alias.py: 1195.8631596565247s cumulative, 0.017050981521606445s individual

.
current test PASSED/SKIPPED -- test_alias_equals_to_app in /home/kaiyaok2/PythonProjects/falcon/tests/test_alias.py: 1195.875238418579s cumulative, 0.01207876205444336s individual


tests/asgi/test_ws.py s
tests/test_wsgi_errors.py .
current test PASSED/SKIPPED -- test_responder_logged_bytestring in /home/kaiyaok2/PythonProjects/falcon/tests/test_wsgi_errors.py: 1195.891301393509s cumulative, 0.01606297492980957s individual


tests/test_headers.py F
current test FAILED -- test_response_append_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1198.3301990032196s cumulative, 2.4388976097106934s individual

F
current test FAILED -- test_unicode_location_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1198.4560363292694s cumulative, 0.1258373260498047s individual

F
current test FAILED -- test_no_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1198.582930803299s cumulative, 0.12689447402954102s individual

F
current test FAILED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1198.7257225513458s cumulative, 0.142791748046875s individual

F
current test FAILED -- test_content_disposition_inline_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1198.9061379432678s cumulative, 0.18041539192199707s individual

F
current test FAILED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1199.1132564544678s cumulative, 0.20711851119995117s individual

F
current test FAILED -- test_declared_content_length_overriden_by_body_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1199.33691573143s cumulative, 0.22365927696228027s individual

F
current test FAILED -- test_content_type_no_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1201.715726852417s cumulative, 2.3788111209869385s individual

F
current test FAILED -- test_append_link_with_type_hint in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1202.0823233127594s cumulative, 0.3665964603424072s individual

F
current test FAILED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1202.3807709217072s cumulative, 0.2984476089477539s individual

F
current test FAILED -- test_unicode_headers_contain_non_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1202.5537221431732s cumulative, 0.17295122146606445s individual

F
current test FAILED -- test_unicode_headers_contain_non_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1202.6840844154358s cumulative, 0.13036227226257324s individual

F
current test FAILED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1202.8452067375183s cumulative, 0.16112232208251953s individual

F
current test FAILED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1203.0395653247833s cumulative, 0.19435858726501465s individual

F
current test FAILED -- test_override_default_media_type_missing_encoding in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1203.1817994117737s cumulative, 0.14223408699035645s individual

F
current test FAILED -- test_override_default_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1205.5004284381866s cumulative, 2.318629026412964s individual

F
current test FAILED -- test_headers_with_custom_class_not_callable in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1205.6904563903809s cumulative, 0.19002795219421387s individual

F
current test FAILED -- test_append_link_single in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1205.8425376415253s cumulative, 0.15208125114440918s individual

F
current test FAILED -- test_request_latin1_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1205.9772942066193s cumulative, 0.13475656509399414s individual

F
current test FAILED -- test_vary_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1206.1809141635895s cumulative, 0.20361995697021484s individual

F
current test FAILED -- test_append_link_with_hreflang_multi in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1206.4568128585815s cumulative, 0.27589869499206543s individual

F
current test FAILED -- test_append_link_with_anchor in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1206.6699681282043s cumulative, 0.21315526962280273s individual

F
current test FAILED -- test_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1209.0521850585938s cumulative, 2.3822169303894043s individual

F
current test FAILED -- test_unset_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1209.2847247123718s cumulative, 0.23253965377807617s individual

F
current test FAILED -- test_unicode_headers_contain_non_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1209.4340641498566s cumulative, 0.1493394374847412s individual

F
current test FAILED -- test_append_link_complex in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1209.672681570053s cumulative, 0.2386174201965332s individual

s
current test PASSED/SKIPPED -- test_unicode_headers_contain_non_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1209.6810410022736s cumulative, 0.008359432220458984s individual

F
current test FAILED -- test_default_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1209.862048149109s cumulative, 0.18100714683532715s individual

F
current test FAILED -- test_passthrough_request_headers in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1210.0697309970856s cumulative, 0.20768284797668457s individual

F
current test FAILED -- test_append_link_with_title in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1210.227115869522s cumulative, 0.15738487243652344s individual

F
current test FAILED -- test_append_link_with_hreflang in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1210.4226806163788s cumulative, 0.19556474685668945s individual

F
current test FAILED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1212.9760248661041s cumulative, 2.553344249725342s individual

F
current test FAILED -- test_get_header_as_int in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1213.1388142108917s cumulative, 0.16278934478759766s individual

F
current test FAILED -- test_declared_content_length_on_head in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1213.3723282814026s cumulative, 0.23351407051086426s individual

F
current test FAILED -- test_unicode_headers_contain_non_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1213.7207260131836s cumulative, 0.34839773178100586s individual

F
current test FAILED -- test_append_link_with_link_extension in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1214.0883796215057s cumulative, 0.36765360832214355s individual

F
current test FAILED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1214.2413766384125s cumulative, 0.15299701690673828s individual

F
current test FAILED -- test_custom_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1214.4565377235413s cumulative, 0.21516108512878418s individual

F
current test FAILED -- test_request_multiple_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1214.6138780117035s cumulative, 0.15734028816223145s individual

F
current test FAILED -- test_content_disposition_inline_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1217.0462772846222s cumulative, 2.432399272918701s individual

F
current test FAILED -- test_vary_star in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1217.1923842430115s cumulative, 0.14610695838928223s individual

F
current test FAILED -- test_set_headers_with_custom_class in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1217.3952836990356s cumulative, 0.20289945602416992s individual

F
current test FAILED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1217.5872411727905s cumulative, 0.1919574737548828s individual

F
current test FAILED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1217.769701719284s cumulative, 0.18246054649353027s individual

F
current test FAILED -- test_no_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1217.8996288776398s cumulative, 0.1299271583557129s individual

F
current test FAILED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1218.0769057273865s cumulative, 0.1772768497467041s individual

F
current test FAILED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1218.2374205589294s cumulative, 0.16051483154296875s individual

F
current test FAILED -- test_override_default_media_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1221.3113412857056s cumulative, 3.073920726776123s individual

F
current test FAILED -- test_default_value in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1221.499523639679s cumulative, 0.18818235397338867s individual

F
current test FAILED -- test_declared_content_length_overriden_by_data_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1221.6837334632874s cumulative, 0.18420982360839844s individual

F
current test FAILED -- test_append_link_with_title_star in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1221.9825475215912s cumulative, 0.298814058303833s individual

F
current test FAILED -- test_unicode_headers_contain_only_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1222.202300310135s cumulative, 0.21975278854370117s individual

F
current test FAILED -- test_vary_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1222.378310918808s cumulative, 0.1760106086730957s individual

F
current test FAILED -- test_declared_content_length_overridden_by_no_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1222.559092760086s cumulative, 0.18078184127807617s individual

F
current test FAILED -- test_append_link_crossorigin in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1222.9007210731506s cumulative, 0.3416283130645752s individual

F
current test FAILED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1226.294361591339s cumulative, 3.3936405181884766s individual

F
current test FAILED -- test_headers_as_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1226.592797756195s cumulative, 0.29843616485595703s individual

F
current test FAILED -- test_required_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1226.7837352752686s cumulative, 0.19093751907348633s individual

F
current test FAILED -- test_response_header_helpers_on_get in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1226.9584679603577s cumulative, 0.17473268508911133s individual

F
current test FAILED -- test_content_disposition_attachment_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1227.1036026477814s cumulative, 0.14513468742370605s individual

F
current test FAILED -- test_no_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1227.2395503520966s cumulative, 0.13594770431518555s individual

F
current test FAILED -- test_unset_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1227.366229057312s cumulative, 0.1266787052154541s individual

F
current test FAILED -- test_response_set_and_get_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1229.8098392486572s cumulative, 2.443610191345215s individual

F
current test FAILED -- test_expires_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1230.036895275116s cumulative, 0.22705602645874023s individual

F
current test FAILED -- test_content_disposition_inline_header in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1230.1937777996063s cumulative, 0.15688252449035645s individual

F
current test FAILED -- test_append_link_multiple in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1230.4075376987457s cumulative, 0.2137598991394043s individual

F
current test FAILED -- test_no_content_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_headers.py: 1230.58855342865s cumulative, 0.1810157299041748s individual


tests/asgi/test_ws.py .
current test PASSED/SKIPPED -- test_media in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1230.6113879680634s cumulative, 0.02283453941345215s individual

.
current test PASSED/SKIPPED -- test_missing_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1230.6202764511108s cumulative, 0.008888483047485352s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1230.6364607810974s cumulative, 0.016184329986572266s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1230.6467506885529s cumulative, 0.010289907455444336s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1230.6565101146698s cumulative, 0.00975942611694336s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1230.6667168140411s cumulative, 0.01020669937133789s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1230.6766669750214s cumulative, 0.00995016098022461s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1230.686717748642s cumulative, 0.010050773620605469s individual

.
current test PASSED/SKIPPED -- test_bad_spec_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1230.6976218223572s cumulative, 0.010904073715209961s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1230.7125899791718s cumulative, 0.014968156814575195s individual

.
current test PASSED/SKIPPED -- test_ws_base_not_implemented in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1230.7159464359283s cumulative, 0.003356456756591797s individual

.
current test PASSED/SKIPPED -- test_ws_not_accepted in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1230.724202156067s cumulative, 0.008255720138549805s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1230.7318105697632s cumulative, 0.0076084136962890625s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1230.742083787918s cumulative, 0.010273218154907227s individual

.
current test PASSED/SKIPPED -- test_subprotocol_bad_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1230.7573461532593s cumulative, 0.015262365341186523s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1230.7708559036255s cumulative, 0.013509750366210938s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1230.7863306999207s cumulative, 0.015474796295166016s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1230.7943713665009s cumulative, 0.008040666580200195s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1230.8024003505707s cumulative, 0.008028984069824219s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1230.8101818561554s cumulative, 0.007781505584716797s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1230.8187096118927s cumulative, 0.008527755737304688s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1230.826843738556s cumulative, 0.008134126663208008s individual

.
current test PASSED/SKIPPED -- test_bad_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1230.8342764377594s cumulative, 0.007432699203491211s individual

.
current test PASSED/SKIPPED -- test_accept_with_headers_not_supported in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1230.844159603119s cumulative, 0.00988316535949707s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1230.8505544662476s cumulative, 0.006394863128662109s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1230.8580694198608s cumulative, 0.00751495361328125s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1230.8669745922089s cumulative, 0.008905172348022461s individual

.
current test PASSED/SKIPPED -- test_bad_spec_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1230.87175822258s cumulative, 0.00478363037109375s individual

.
current test PASSED/SKIPPED -- test_ws_simulator_client_require_accepted in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1230.8788912296295s cumulative, 0.007133007049560547s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1230.8925459384918s cumulative, 0.013654708862304688s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1230.9010288715363s cumulative, 0.008482933044433594s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1230.9078624248505s cumulative, 0.006833553314208984s individual

.
current test PASSED/SKIPPED -- test_unexpected_param in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1230.9143648147583s cumulative, 0.006502389907836914s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1230.9200291633606s cumulative, 0.005664348602294922s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1230.9333982467651s cumulative, 0.013369083404541016s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1230.9465115070343s cumulative, 0.013113260269165039s individual

.
current test PASSED/SKIPPED -- test_send_receive_data in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1230.9565663337708s cumulative, 0.010054826736450195s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1230.966249704361s cumulative, 0.009683370590209961s individual

.
current test PASSED/SKIPPED -- test_responder_raises_unhandled_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1230.9776511192322s cumulative, 0.01140141487121582s individual

.
current test PASSED/SKIPPED -- test_subprotocol in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1230.9877715110779s cumulative, 0.010120391845703125s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1230.9974656105042s cumulative, 0.009694099426269531s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1231.0156078338623s cumulative, 0.018142223358154297s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1231.027771949768s cumulative, 0.012164115905761719s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1231.0362219810486s cumulative, 0.008450031280517578s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1231.047215461731s cumulative, 0.010993480682373047s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1231.0567247867584s cumulative, 0.00950932502746582s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1231.0663647651672s cumulative, 0.009639978408813477s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1231.0797777175903s cumulative, 0.013412952423095703s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1231.0895113945007s cumulative, 0.00973367691040039s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1231.0987331867218s cumulative, 0.009221792221069336s individual

.
current test PASSED/SKIPPED -- test_send_receive_data in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1231.1129484176636s cumulative, 0.014215230941772461s individual

.
current test PASSED/SKIPPED -- test_missing_ws_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1231.120932340622s cumulative, 0.007983922958374023s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1231.1332848072052s cumulative, 0.012352466583251953s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1231.1469931602478s cumulative, 0.013708353042602539s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1231.1589086055756s cumulative, 0.011915445327758789s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1231.1708898544312s cumulative, 0.01198124885559082s individual

.
current test PASSED/SKIPPED -- test_accept_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1231.1801629066467s cumulative, 0.009273052215576172s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1231.1870818138123s cumulative, 0.006918907165527344s individual

.
current test PASSED/SKIPPED -- test_bad_spec_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1231.1957292556763s cumulative, 0.008647441864013672s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1231.2056016921997s cumulative, 0.0098724365234375s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1231.2192029953003s cumulative, 0.013601303100585938s individual

.
current test PASSED/SKIPPED -- test_accept_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1231.2288224697113s cumulative, 0.009619474411010742s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1231.240245103836s cumulative, 0.01142263412475586s individual

.
current test PASSED/SKIPPED -- test_send_receive_data in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1231.2507770061493s cumulative, 0.010531902313232422s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1231.2665746212006s cumulative, 0.01579761505126953s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1231.278419494629s cumulative, 0.011844873428344727s individual

.
current test PASSED/SKIPPED -- test_accept_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1231.2924573421478s cumulative, 0.014037847518920898s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1231.305073261261s cumulative, 0.01261591911315918s individual

.
current test PASSED/SKIPPED -- test_media in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1231.3193275928497s cumulative, 0.014254331588745117s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1231.3710222244263s cumulative, 0.051694631576538086s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1231.383380651474s cumulative, 0.012358427047729492s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1231.4013831615448s cumulative, 0.01800251007080078s individual

.
current test PASSED/SKIPPED -- test_responder_raises_unhandled_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1231.4274516105652s cumulative, 0.026068449020385742s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1231.4533431529999s cumulative, 0.025891542434692383s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1231.4811191558838s cumulative, 0.027776002883911133s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1231.5120389461517s cumulative, 0.030919790267944336s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1231.5419690608978s cumulative, 0.02993011474609375s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1231.5710136890411s cumulative, 0.029044628143310547s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1231.6165113449097s cumulative, 0.04549765586853027s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1231.6521906852722s cumulative, 0.03567934036254883s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1231.6932244300842s cumulative, 0.04103374481201172s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1231.7335653305054s cumulative, 0.04034090042114258s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1231.7636284828186s cumulative, 0.030063152313232422s individual

.
current test PASSED/SKIPPED -- test_ws_not_accepted in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1231.7854137420654s cumulative, 0.021785259246826172s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1231.8074660301208s cumulative, 0.022052288055419922s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1231.8466048240662s cumulative, 0.0391387939453125s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1231.9030582904816s cumulative, 0.05645346641540527s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1231.9436571598053s cumulative, 0.04059886932373047s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1231.984139919281s cumulative, 0.04048275947570801s individual

.
current test PASSED/SKIPPED -- test_accept_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1232.0113072395325s cumulative, 0.027167320251464844s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1232.0395674705505s cumulative, 0.028260231018066406s individual

.
current test PASSED/SKIPPED -- test_ws_context_timeout in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1237.0752539634705s cumulative, 5.035686492919922s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1237.0976250171661s cumulative, 0.02237105369567871s individual

.
current test PASSED/SKIPPED -- test_bad_spec_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1237.1343400478363s cumulative, 0.036715030670166016s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1237.164428472519s cumulative, 0.030088424682617188s individual

.
current test PASSED/SKIPPED -- test_accept_with_bad_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1237.1758518218994s cumulative, 0.011423349380493164s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1237.1904594898224s cumulative, 0.014607667922973633s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1237.2057995796204s cumulative, 0.015340089797973633s individual

.
current test PASSED/SKIPPED -- test_ws_simulator_collect_edge_cases in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1237.2242906093597s cumulative, 0.018491029739379883s individual

.
current test PASSED/SKIPPED -- test_echo in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1247.577256679535s cumulative, 10.352966070175171s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1247.6440138816833s cumulative, 0.0667572021484375s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1247.6894130706787s cumulative, 0.04539918899536133s individual

.
current test PASSED/SKIPPED -- test_subprotocol_bad_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1247.743266582489s cumulative, 0.053853511810302734s individual

.
current test PASSED/SKIPPED -- test_subprotocol in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1247.7995586395264s cumulative, 0.056292057037353516s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1247.8421108722687s cumulative, 0.04255223274230957s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1247.8756790161133s cumulative, 0.03356814384460449s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1247.9208989143372s cumulative, 0.04521989822387695s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1247.9585099220276s cumulative, 0.03761100769042969s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1248.0046899318695s cumulative, 0.046180009841918945s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1248.0621008872986s cumulative, 0.05741095542907715s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1248.1023540496826s cumulative, 0.0402531623840332s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1248.1321067810059s cumulative, 0.029752731323242188s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1248.1680390834808s cumulative, 0.035932302474975586s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1248.2144589424133s cumulative, 0.04641985893249512s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1248.2667667865753s cumulative, 0.052307844161987305s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1248.3699922561646s cumulative, 0.1032254695892334s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1248.424646139145s cumulative, 0.05465388298034668s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1248.4712517261505s cumulative, 0.046605587005615234s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1248.5460720062256s cumulative, 0.07482028007507324s individual

.
current test PASSED/SKIPPED -- test_subprotocol_bad_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1248.5844132900238s cumulative, 0.03834128379821777s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1248.6334931850433s cumulative, 0.04907989501953125s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1248.7417006492615s cumulative, 0.10820746421813965s individual

.
current test PASSED/SKIPPED -- test_accept_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1248.8122308254242s cumulative, 0.07053017616271973s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1248.8735139369965s cumulative, 0.061283111572265625s individual

.
current test PASSED/SKIPPED -- test_bad_http_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1248.9121425151825s cumulative, 0.038628578186035156s individual

.
current test PASSED/SKIPPED -- test_accept_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1248.9686150550842s cumulative, 0.0564725399017334s individual

.
current test PASSED/SKIPPED -- test_subprotocol_bad_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1249.0137662887573s cumulative, 0.0451512336730957s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1249.0567200183868s cumulative, 0.0429537296295166s individual

.
current test PASSED/SKIPPED -- test_accept_with_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1249.0889098644257s cumulative, 0.03218984603881836s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1249.1282737255096s cumulative, 0.039363861083984375s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1249.1622009277344s cumulative, 0.033927202224731445s individual

.
current test PASSED/SKIPPED -- test_translate_webserver_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1249.1955635547638s cumulative, 0.033362627029418945s individual

.
current test PASSED/SKIPPED -- test_missing_spec_version in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1249.224960565567s cumulative, 0.029397010803222656s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1249.2779173851013s cumulative, 0.05295681953430176s individual

.
current test PASSED/SKIPPED -- test_accept_with_bad_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1249.3186733722687s cumulative, 0.0407559871673584s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1249.3768417835236s cumulative, 0.05816841125488281s individual

.
current test PASSED/SKIPPED -- test_accept_with_bad_headers in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1249.414978981018s cumulative, 0.038137197494506836s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1249.4752748012543s cumulative, 0.060295820236206055s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_middleware in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1249.5464642047882s cumulative, 0.07118940353393555s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1249.5932576656342s cumulative, 0.046793460845947266s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1249.6458201408386s cumulative, 0.05256247520446777s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1249.7063059806824s cumulative, 0.06048583984375s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1249.77384018898s cumulative, 0.06753420829772949s individual

.
current test PASSED/SKIPPED -- test_media in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1249.8557133674622s cumulative, 0.08187317848205566s individual

.
current test PASSED/SKIPPED -- test_mw_methods_must_be_coroutines in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1249.9022889137268s cumulative, 0.04657554626464844s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1249.9948272705078s cumulative, 0.09253835678100586s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1250.0941483974457s cumulative, 0.09932112693786621s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1250.1797082424164s cumulative, 0.08555984497070312s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1250.2690813541412s cumulative, 0.08937311172485352s individual

.
current test PASSED/SKIPPED -- test_media in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1250.3525223731995s cumulative, 0.08344101905822754s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1250.4227123260498s cumulative, 0.0701899528503418s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1250.497276544571s cumulative, 0.07456421852111816s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1250.55437541008s cumulative, 0.0570988655090332s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_uncaught_error in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1250.6032333374023s cumulative, 0.048857927322387695s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1250.6772310733795s cumulative, 0.07399773597717285s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1250.7181050777435s cumulative, 0.04087400436401367s individual

.
current test PASSED/SKIPPED -- test_subprotocol in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1250.7561569213867s cumulative, 0.03805184364318848s individual

.
current test PASSED/SKIPPED -- test_send_receive_wrong_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1250.7971799373627s cumulative, 0.04102301597595215s individual

.
current test PASSED/SKIPPED -- test_subprotocol_bad_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1250.8438656330109s cumulative, 0.04668569564819336s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1250.8923110961914s cumulative, 0.04844546318054199s individual

.
current test PASSED/SKIPPED -- test_bad_first_event in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1250.9231214523315s cumulative, 0.03081035614013672s individual

.
current test PASSED/SKIPPED -- test_send_receive_data in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1250.9692554473877s cumulative, 0.046133995056152344s individual

.
current test PASSED/SKIPPED -- test_path_not_found in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1251.0196158885956s cumulative, 0.05036044120788574s individual

.
current test PASSED/SKIPPED -- test_client_disconnect_early in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1251.0618824958801s cumulative, 0.0422666072845459s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1251.1065068244934s cumulative, 0.04462432861328125s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_response in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1251.183879852295s cumulative, 0.07737302780151367s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1251.2588555812836s cumulative, 0.07497572898864746s individual

.
current test PASSED/SKIPPED -- test_subprotocol_bad_type in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1251.3017964363098s cumulative, 0.04294085502624512s individual

.
current test PASSED/SKIPPED -- test_ws_http_error_or_status_error_handler in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1251.3497591018677s cumulative, 0.04796266555786133s individual

.
current test PASSED/SKIPPED -- test_subprotocol in /home/kaiyaok2/PythonProjects/falcon/tests/asgi/test_ws.py: 1251.4031884670258s cumulative, 0.053429365158081055s individual


tests/test_query_params.py .
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1251.4719879627228s cumulative, 0.06879949569702148s individual

F
current test FAILED -- test_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1252.3990767002106s cumulative, 0.927088737487793s individual

F
current test FAILED -- test_boolean_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1253.208565235138s cumulative, 0.8094885349273682s individual

F
current test FAILED -- test_simple in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1258.7905299663544s cumulative, 5.581964731216431s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1259.4938020706177s cumulative, 0.7032721042633057s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_simple_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1260.096432685852s cumulative, 0.602630615234375s individual

F
current test FAILED -- test_get_param_as_json_no_handler_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1260.672568321228s cumulative, 0.5761356353759766s individual

F
current test FAILED -- test_get_dict_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1261.3027346134186s cumulative, 0.6301662921905518s individual

F
current test FAILED -- test_get_dict_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1262.0799856185913s cumulative, 0.7772510051727295s individual

.
current test PASSED/SKIPPED -- test_allowed_names in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1262.1277494430542s cumulative, 0.047763824462890625s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_complex_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1262.920488834381s cumulative, 0.7927393913269043s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1262.962602853775s cumulative, 0.0421140193939209s individual

F
current test FAILED -- test_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1263.8331894874573s cumulative, 0.870586633682251s individual

.
current test PASSED/SKIPPED -- test_get_datetime_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1263.886396408081s cumulative, 0.0532069206237793s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1268.8799664974213s cumulative, 4.99357008934021s individual

F
current test FAILED -- test_get_datetime_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1269.3393535614014s cumulative, 0.45938706398010254s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1269.8498876094818s cumulative, 0.5105340480804443s individual

.
current test PASSED/SKIPPED -- test_get_date_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1269.8831589221954s cumulative, 0.03327131271362305s individual

F
current test FAILED -- test_get_date_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1270.4853248596191s cumulative, 0.602165937423706s individual

F
current test FAILED -- test_boolean in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1270.8664898872375s cumulative, 0.3811650276184082s individual

.
current test PASSED/SKIPPED -- test_get_date_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1270.8841135501862s cumulative, 0.0176236629486084s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1271.1380109786987s cumulative, 0.25389742851257324s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1271.1558139324188s cumulative, 0.017802953720092773s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_simple_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1271.1678173542023s cumulative, 0.012003421783447266s individual

F
current test FAILED -- test_get_date_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1271.4390652179718s cumulative, 0.27124786376953125s individual

F
current test FAILED -- test_get_param_as_json_handler_json in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1274.6098670959473s cumulative, 3.170801877975464s individual

F
current test FAILED -- test_get_datetime_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1274.8776977062225s cumulative, 0.26783061027526855s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1274.8929517269135s cumulative, 0.015254020690917969s individual

F
current test FAILED -- test_get_date_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1275.1320359706879s cumulative, 0.23908424377441406s individual

F
current test FAILED -- test_percent_encoded in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1275.3910326957703s cumulative, 0.25899672508239746s individual

F
current test FAILED -- test_get_date_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1275.7363011837006s cumulative, 0.34526848793029785s individual

.
current test PASSED/SKIPPED -- test_list_transformer in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1275.7509198188782s cumulative, 0.014618635177612305s individual

.
current test PASSED/SKIPPED -- test_get_date_valid_with_format in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1275.7652747631073s cumulative, 0.014354944229125977s individual

F
current test FAILED -- test_get_datetime_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1276.0408120155334s cumulative, 0.27553725242614746s individual

F
current test FAILED -- test_float_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1276.2753870487213s cumulative, 0.2345750331878662s individual

F
current test FAILED -- test_default_auto_parse_csv_behaviour in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1280.1917436122894s cumulative, 3.9163565635681152s individual

.
current test PASSED/SKIPPED -- test_float_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1280.2226333618164s cumulative, 0.03088974952697754s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1280.2403318881989s cumulative, 0.01769852638244629s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1280.654771566391s cumulative, 0.41443967819213867s individual

F
current test FAILED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1281.0163362026215s cumulative, 0.36156463623046875s individual

.
current test PASSED/SKIPPED -- test_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1281.039047718048s cumulative, 0.022711515426635742s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1281.0580885410309s cumulative, 0.019040822982788086s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1281.432209968567s cumulative, 0.37412142753601074s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1281.4645156860352s cumulative, 0.03230571746826172s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_complex_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1281.9592537879944s cumulative, 0.4947381019592285s individual

F
current test FAILED -- test_simple in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1282.5104546546936s cumulative, 0.5512008666992188s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1282.5409309864044s cumulative, 0.03047633171081543s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1282.5702695846558s cumulative, 0.029338598251342773s individual

.
current test PASSED/SKIPPED -- test_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1282.5989263057709s cumulative, 0.028656721115112305s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_complex_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1282.6255931854248s cumulative, 0.026666879653930664s individual

.
current test PASSED/SKIPPED -- test_percent_encoded in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1282.6553993225098s cumulative, 0.029806137084960938s individual

F
current test FAILED -- test_int in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1283.2647902965546s cumulative, 0.6093909740447998s individual

.
current test PASSED/SKIPPED -- test_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1283.2911381721497s cumulative, 0.026347875595092773s individual

F
current test FAILED -- test_uuid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1288.0515143871307s cumulative, 4.760376214981079s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1288.0755927562714s cumulative, 0.024078369140625s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_simple_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1288.0996022224426s cumulative, 0.02400946617126465s individual

.
current test PASSED/SKIPPED -- test_simple in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1288.1177532672882s cumulative, 0.018151044845581055s individual

F
current test FAILED -- test_get_datetime_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1288.6180284023285s cumulative, 0.5002751350402832s individual

F
current test FAILED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1289.2723548412323s cumulative, 0.6543264389038086s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1290.0221018791199s cumulative, 0.7497470378875732s individual

F
current test FAILED -- test_float in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1290.78932762146s cumulative, 0.7672257423400879s individual

.
current test PASSED/SKIPPED -- test_get_date_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1290.849573135376s cumulative, 0.060245513916015625s individual

.
current test PASSED/SKIPPED -- test_multiple_form_keys in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1290.8954274654388s cumulative, 0.04585433006286621s individual

F
current test FAILED -- test_get_dict_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1291.415437221527s cumulative, 0.5200097560882568s individual

F
current test FAILED -- test_multiple_keys_as_int in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1291.916203737259s cumulative, 0.5007665157318115s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_simple_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1296.052843093872s cumulative, 4.136639356613159s individual

.
current test PASSED/SKIPPED -- test_get_date_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1296.0731525421143s cumulative, 0.0203094482421875s individual

.
current test PASSED/SKIPPED -- test_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1296.0826814174652s cumulative, 0.009528875350952148s individual

.
current test PASSED/SKIPPED -- test_float in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1296.096018075943s cumulative, 0.013336658477783203s individual

F
current test FAILED -- test_float_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1296.3829534053802s cumulative, 0.28693532943725586s individual

.
current test PASSED/SKIPPED -- test_int_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1296.4196019172668s cumulative, 0.03664851188659668s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1296.4338850975037s cumulative, 0.014283180236816406s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_simple_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1296.4455528259277s cumulative, 0.011667728424072266s individual

F
current test FAILED -- test_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1296.7748699188232s cumulative, 0.3293170928955078s individual

.
current test PASSED/SKIPPED -- test_list_transformer in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1296.801825761795s cumulative, 0.026955842971801758s individual

F
current test FAILED -- test_param_property in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1297.1892590522766s cumulative, 0.3874332904815674s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_simple_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1297.4935624599457s cumulative, 0.3043034076690674s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1297.517482995987s cumulative, 0.023920536041259766s individual

.
current test PASSED/SKIPPED -- test_default_auto_parse_csv_behaviour in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1297.541579246521s cumulative, 0.024096250534057617s individual

.
current test PASSED/SKIPPED -- test_get_date_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1297.5574588775635s cumulative, 0.01587963104248047s individual

F
current test FAILED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1297.9823093414307s cumulative, 0.4248504638671875s individual

.
current test PASSED/SKIPPED -- test_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1297.997845172882s cumulative, 0.015535831451416016s individual

.
current test PASSED/SKIPPED -- test_param_property in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1298.0150969028473s cumulative, 0.01725172996520996s individual

F
current test FAILED -- test_multiple_keys_as_int in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1298.402645111084s cumulative, 0.38754820823669434s individual

F
current test FAILED -- test_list_transformer in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1298.8129515647888s cumulative, 0.410306453704834s individual

.
current test PASSED/SKIPPED -- test_boolean_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1298.8303809165955s cumulative, 0.017429351806640625s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1301.8974153995514s cumulative, 3.0670344829559326s individual

F
current test FAILED -- test_multiple_form_keys_as_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1302.125846862793s cumulative, 0.22843146324157715s individual

.
current test PASSED/SKIPPED -- test_get_date_valid_with_format in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1302.1444733142853s cumulative, 0.01862645149230957s individual

.
current test PASSED/SKIPPED -- test_default_auto_parse_csv_behaviour in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1302.156098127365s cumulative, 0.011624813079833984s individual

F
current test FAILED -- test_param_property in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1302.4140012264252s cumulative, 0.2579030990600586s individual

.
current test PASSED/SKIPPED -- test_simple in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1302.4294135570526s cumulative, 0.015412330627441406s individual

.
current test PASSED/SKIPPED -- test_multiple_keys_as_bool in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1302.4400198459625s cumulative, 0.01060628890991211s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1302.7891972064972s cumulative, 0.34917736053466797s individual

F
current test FAILED -- test_get_date_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1303.0805282592773s cumulative, 0.29133105278015137s individual

F
current test FAILED -- test_list_type_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1303.3642001152039s cumulative, 0.28367185592651367s individual

.
current test PASSED/SKIPPED -- test_percent_encoded in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1303.3854298591614s cumulative, 0.02122974395751953s individual

.
current test PASSED/SKIPPED -- test_multiple_keys_as_int in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1303.4050824642181s cumulative, 0.019652605056762695s individual

.
current test PASSED/SKIPPED -- test_get_dict_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1303.4191918373108s cumulative, 0.014109373092651367s individual

.
current test PASSED/SKIPPED -- test_get_datetime_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1303.4301342964172s cumulative, 0.010942459106445312s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1303.44456076622s cumulative, 0.014426469802856445s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1303.4559471607208s cumulative, 0.011386394500732422s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1303.7243914604187s cumulative, 0.268444299697876s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1303.7453124523163s cumulative, 0.020920991897583008s individual

.
current test PASSED/SKIPPED -- test_get_datetime_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1303.7569317817688s cumulative, 0.011619329452514648s individual

.
current test PASSED/SKIPPED -- test_boolean in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1303.7704713344574s cumulative, 0.013539552688598633s individual

.
current test PASSED/SKIPPED -- test_get_datetime_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1303.7872152328491s cumulative, 0.016743898391723633s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1303.7987060546875s cumulative, 0.011490821838378906s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_simple_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1303.8126184940338s cumulative, 0.013912439346313477s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1307.384675502777s cumulative, 3.572057008743286s individual

.
current test PASSED/SKIPPED -- test_get_datetime_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1307.3959956169128s cumulative, 0.011320114135742188s individual

.
current test PASSED/SKIPPED -- test_bad_percentage in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1307.403113603592s cumulative, 0.0071179866790771484s individual

F
current test FAILED -- test_percent_encoded in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1307.6235494613647s cumulative, 0.22043585777282715s individual

F
current test FAILED -- test_allowed_names in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1307.8488132953644s cumulative, 0.2252638339996338s individual

F
current test FAILED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1308.1410114765167s cumulative, 0.29219818115234375s individual

F
current test FAILED -- test_get_datetime_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1308.389895439148s cumulative, 0.24888396263122559s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1308.410548210144s cumulative, 0.02065277099609375s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1308.4205820560455s cumulative, 0.010033845901489258s individual

.
current test PASSED/SKIPPED -- test_has_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1308.4301571846008s cumulative, 0.009575128555297852s individual

.
current test PASSED/SKIPPED -- test_list_type_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1308.4451496601105s cumulative, 0.014992475509643555s individual

.
current test PASSED/SKIPPED -- test_get_dict_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1308.4541509151459s cumulative, 0.00900125503540039s individual

F
current test FAILED -- test_allowed_names in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1308.7147748470306s cumulative, 0.2606239318847656s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1311.8387265205383s cumulative, 3.1239516735076904s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1311.8562774658203s cumulative, 0.017550945281982422s individual

F
current test FAILED -- test_int in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1312.0505063533783s cumulative, 0.1942288875579834s individual

F
current test FAILED -- test_list_transformer in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1312.2301423549652s cumulative, 0.17963600158691406s individual

F
current test FAILED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1312.4471368789673s cumulative, 0.2169945240020752s individual

.
current test PASSED/SKIPPED -- test_multiple_form_keys_as_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1312.466415643692s cumulative, 0.019278764724731445s individual

F
current test FAILED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1312.7579362392426s cumulative, 0.2915205955505371s individual

F
current test FAILED -- test_get_date_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1313.0239598751068s cumulative, 0.2660236358642578s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1313.046611070633s cumulative, 0.022651195526123047s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1313.0603392124176s cumulative, 0.013728141784667969s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1313.3191211223602s cumulative, 0.25878190994262695s individual

F
current test FAILED -- test_bad_percentage in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1313.6294887065887s cumulative, 0.3103675842285156s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1313.6488621234894s cumulative, 0.019373416900634766s individual

.
current test PASSED/SKIPPED -- test_get_date_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1313.661166191101s cumulative, 0.012304067611694336s individual

F
current test FAILED -- test_multiple_keys_as_bool in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1316.4578919410706s cumulative, 2.7967257499694824s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1316.8922989368439s cumulative, 0.43440699577331543s individual

.
current test PASSED/SKIPPED -- test_allowed_names in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1316.9168915748596s cumulative, 0.02459263801574707s individual

.
current test PASSED/SKIPPED -- test_int_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1316.9383945465088s cumulative, 0.021502971649169922s individual

.
current test PASSED/SKIPPED -- test_get_date_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1316.9542264938354s cumulative, 0.015831947326660156s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1317.4112703800201s cumulative, 0.4570438861846924s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1317.4550032615662s cumulative, 0.04373288154602051s individual

F
current test FAILED -- test_float in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1317.8834722042084s cumulative, 0.4284689426422119s individual

F
current test FAILED -- test_get_dict_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1318.378583431244s cumulative, 0.49511122703552246s individual

.
current test PASSED/SKIPPED -- test_list_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1318.4027290344238s cumulative, 0.02414560317993164s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1318.7941954135895s cumulative, 0.3914663791656494s individual

.
current test PASSED/SKIPPED -- test_int in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1318.820909023285s cumulative, 0.02671360969543457s individual

F
current test FAILED -- test_multiple_keys_as_bool in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1319.3297817707062s cumulative, 0.5088727474212646s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1319.3611855506897s cumulative, 0.03140377998352051s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1319.3910851478577s cumulative, 0.02989959716796875s individual

F
current test FAILED -- test_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1323.8046746253967s cumulative, 4.4135894775390625s individual

.
current test PASSED/SKIPPED -- test_get_date_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1323.8280420303345s cumulative, 0.02336740493774414s individual

.
current test PASSED/SKIPPED -- test_list_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1323.842122554779s cumulative, 0.014080524444580078s individual

F
current test FAILED -- test_multiple_keys_as_float in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1324.2618162631989s cumulative, 0.4196937084197998s individual

.
current test PASSED/SKIPPED -- test_boolean in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1324.289281129837s cumulative, 0.027464866638183594s individual

F
current test FAILED -- test_get_date_valid_with_format in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1324.6702303886414s cumulative, 0.3809492588043213s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_simple_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1325.0030088424683s cumulative, 0.3327784538269043s individual

F
current test FAILED -- test_has_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1325.3795614242554s cumulative, 0.3765525817871094s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1325.400830745697s cumulative, 0.02126932144165039s individual

.
current test PASSED/SKIPPED -- test_param_property in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1325.4198529720306s cumulative, 0.019022226333618164s individual

.
current test PASSED/SKIPPED -- test_get_dict_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1325.4365451335907s cumulative, 0.016692161560058594s individual

.
current test PASSED/SKIPPED -- test_boolean_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1325.4519295692444s cumulative, 0.015384435653686523s individual

.
current test PASSED/SKIPPED -- test_bad_percentage in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1325.463306427002s cumulative, 0.01137685775756836s individual

F
current test FAILED -- test_list_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1325.7623190879822s cumulative, 0.2990126609802246s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1326.0531232357025s cumulative, 0.2908041477203369s individual

.
current test PASSED/SKIPPED -- test_get_datetime_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1326.081256389618s cumulative, 0.028133153915405273s individual

.
current test PASSED/SKIPPED -- test_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1326.0933411121368s cumulative, 0.012084722518920898s individual

F
current test FAILED -- test_get_dict_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1328.988713502884s cumulative, 2.8953723907470703s individual

.
current test PASSED/SKIPPED -- test_int in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1329.0070843696594s cumulative, 0.018370866775512695s individual

F
current test FAILED -- test_multiple_form_keys in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1329.4325280189514s cumulative, 0.4254436492919922s individual

F
current test FAILED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1329.8678662776947s cumulative, 0.43533825874328613s individual

F
current test FAILED -- test_get_datetime_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1330.2929935455322s cumulative, 0.4251272678375244s individual

F
current test FAILED -- test_multiple_form_keys in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1330.8226654529572s cumulative, 0.5296719074249268s individual

.
current test PASSED/SKIPPED -- test_has_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1330.8492839336395s cumulative, 0.026618480682373047s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1330.8666830062866s cumulative, 0.017399072647094727s individual

F
current test FAILED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1331.309760093689s cumulative, 0.44307708740234375s individual

.
current test PASSED/SKIPPED -- test_uuid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1331.3775861263275s cumulative, 0.0678260326385498s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1331.4057404994965s cumulative, 0.028154373168945312s individual

.
current test PASSED/SKIPPED -- test_multiple_keys_as_float in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1331.4304239749908s cumulative, 0.024683475494384766s individual

.
current test PASSED/SKIPPED -- test_list_type_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1331.4589006900787s cumulative, 0.028476715087890625s individual

.
current test PASSED/SKIPPED -- test_get_datetime_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1331.4762308597565s cumulative, 0.017330169677734375s individual

F
current test FAILED -- test_list_type_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1331.9299476146698s cumulative, 0.4537167549133301s individual

.
current test PASSED/SKIPPED -- test_float in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1331.9539906978607s cumulative, 0.02404308319091797s individual

F
current test FAILED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1332.337177991867s cumulative, 0.38318729400634766s individual

.
current test PASSED/SKIPPED -- test_get_dict_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1332.3648319244385s cumulative, 0.027653932571411133s individual

F
current test FAILED -- test_list_type in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1336.762689113617s cumulative, 4.397857189178467s individual

F
current test FAILED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1337.3080577850342s cumulative, 0.5453686714172363s individual

.
current test PASSED/SKIPPED -- test_get_datetime_valid_with_format in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1337.341106414795s cumulative, 0.03304862976074219s individual

F
current test FAILED -- test_default_auto_parse_csv_behaviour in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1337.7578332424164s cumulative, 0.41672682762145996s individual

.
current test PASSED/SKIPPED -- test_multiple_keys_as_int in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1337.79008436203s cumulative, 0.03225111961364746s individual

.
current test PASSED/SKIPPED -- test_get_dict_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1337.8232727050781s cumulative, 0.0331883430480957s individual

.
current test PASSED/SKIPPED -- test_multiple_form_keys in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1337.8487520217896s cumulative, 0.02547931671142578s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1338.3014845848083s cumulative, 0.45273256301879883s individual

.
current test PASSED/SKIPPED -- test_multiple_form_keys_as_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1338.330049276352s cumulative, 0.0285646915435791s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1338.7824506759644s cumulative, 0.45240139961242676s individual

.
current test PASSED/SKIPPED -- test_get_datetime_valid_with_format in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1338.8083503246307s cumulative, 0.025899648666381836s individual

F
current test FAILED -- test_get_dict_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1339.258633852005s cumulative, 0.4502835273742676s individual

.
current test PASSED/SKIPPED -- test_get_dict_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1339.2949628829956s cumulative, 0.036329030990600586s individual

F
current test FAILED -- test_get_dict_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1339.7892792224884s cumulative, 0.49431633949279785s individual

F
current test FAILED -- test_bad_percentage in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1343.0695657730103s cumulative, 3.2802865505218506s individual

F
current test FAILED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1343.4911341667175s cumulative, 0.4215683937072754s individual

.
current test PASSED/SKIPPED -- test_get_dict_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1343.5136263370514s cumulative, 0.022492170333862305s individual

F
current test FAILED -- test_get_datetime_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1343.9175188541412s cumulative, 0.40389251708984375s individual

.
current test PASSED/SKIPPED -- test_uuid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1343.9384417533875s cumulative, 0.02092289924621582s individual

F
current test FAILED -- test_get_date_valid_with_format in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1344.320012807846s cumulative, 0.38157105445861816s individual

F
current test FAILED -- test_none in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1344.620709180832s cumulative, 0.30069637298583984s individual

F
current test FAILED -- test_multiple_form_keys_as_list in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1344.8646354675293s cumulative, 0.2439262866973877s individual

.
current test PASSED/SKIPPED -- test_multiple_keys_as_float in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1344.876701593399s cumulative, 0.012066125869750977s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1344.884625673294s cumulative, 0.007924079895019531s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_complex_false in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1344.891856431961s cumulative, 0.0072307586669921875s individual

F
current test FAILED -- test_has_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1345.079434633255s cumulative, 0.1875782012939453s individual

F
current test FAILED -- test_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1349.5500230789185s cumulative, 4.470588445663452s individual

F
current test FAILED -- test_boolean_blank in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1349.737958908081s cumulative, 0.18793582916259766s individual

F
current test FAILED -- test_get_datetime_valid_with_format in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1350.0425958633423s cumulative, 0.30463695526123047s individual

F
current test FAILED -- test_get_datetime_valid_with_format in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1350.3550078868866s cumulative, 0.3124120235443115s individual

.
current test PASSED/SKIPPED -- test_float_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1350.374319076538s cumulative, 0.019311189651489258s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1350.382559299469s cumulative, 0.008240222930908203s individual

F
current test FAILED -- test_uuid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1350.6357126235962s cumulative, 0.25315332412719727s individual

F
current test FAILED -- test_multiple_keys_as_float in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1351.017310142517s cumulative, 0.38159751892089844s individual

F
current test FAILED -- test_get_date_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1351.3328778743744s cumulative, 0.3155677318572998s individual

F
current test FAILED -- test_int_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1351.5899844169617s cumulative, 0.2571065425872803s individual

F
current test FAILED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1354.6443333625793s cumulative, 3.054348945617676s individual

.
current test PASSED/SKIPPED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1354.6604692935944s cumulative, 0.01613593101501465s individual

F
current test FAILED -- test_boolean in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1355.0832571983337s cumulative, 0.4227879047393799s individual

.
current test PASSED/SKIPPED -- test_get_datetime_store in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1355.1144967079163s cumulative, 0.03123950958251953s individual

.
current test PASSED/SKIPPED -- test_required in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1355.139574289322s cumulative, 0.02507758140563965s individual

F
current test FAILED -- test_int_neg in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1355.7528984546661s cumulative, 0.6133241653442383s individual

F
current test FAILED -- test_option_auto_parse_qs_csv_multiple_fields_true in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1356.2462434768677s cumulative, 0.4933450222015381s individual

F
current test FAILED -- test_get_datetime_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1356.7670662403107s cumulative, 0.5208227634429932s individual

.
current test PASSED/SKIPPED -- test_multiple_keys_as_bool in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1356.7915081977844s cumulative, 0.024441957473754883s individual

.
current test PASSED/SKIPPED -- test_get_dict_invalid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1356.8209359645844s cumulative, 0.029427766799926758s individual

F
current test FAILED -- test_get_date_missing_param in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1357.3949439525604s cumulative, 0.5740079879760742s individual

F
current test FAILED -- test_get_dict_valid in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1362.0759015083313s cumulative, 4.680957555770874s individual

F
current test FAILED -- test_empty_body in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1362.57763338089s cumulative, 0.5017318725585938s individual

F
current test FAILED -- test_empty_body_no_content_length in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1363.325496673584s cumulative, 0.7478632926940918s individual

F
current test FAILED -- test_asgi_raises_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1364.1940033435822s cumulative, 0.868506669998169s individual

F
current test FAILED -- test_http_methods_body_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1364.8369348049164s cumulative, 0.6429314613342285s individual

F
current test FAILED -- test_http_methods_body_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1365.3611855506897s cumulative, 0.5242507457733154s individual

F
current test FAILED -- test_http_methods_body_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1365.8878691196442s cumulative, 0.5266835689544678s individual

F
current test FAILED -- test_non_ascii in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1366.3214046955109s cumulative, 0.4335355758666992s individual

F
current test FAILED -- test_http_methods_body_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1370.8535804748535s cumulative, 4.532175779342651s individual

F
current test FAILED -- test_http_methods_body_not_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1371.063461303711s cumulative, 0.20988082885742188s individual

F
current test FAILED -- test_http_methods_body_not_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1371.2628228664398s cumulative, 0.19936156272888184s individual

F
current test FAILED -- test_http_methods_body_expected in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1371.4561195373535s cumulative, 0.1932966709136963s individual

F
current test FAILED -- test_explicitly_disable_auto_parse in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1371.692120552063s cumulative, 0.23600101470947266s individual

F
current test FAILED -- test_dont_auto_parse_by_default in /home/kaiyaok2/PythonProjects/falcon/tests/test_query_params.py: 1371.9218981266022s cumulative, 0.22977757453918457s individual


tests/test_cmd_inspect_app.py .
current test PASSED/SKIPPED -- test_make_parser in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 1371.9319078922272s cumulative, 0.010009765625s individual

.
current test PASSED/SKIPPED -- test_make_parser in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 1371.9407103061676s cumulative, 0.008802413940429688s individual

.
current test PASSED/SKIPPED -- test_make_parser in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 1371.9483654499054s cumulative, 0.007655143737792969s individual

.
current test PASSED/SKIPPED -- test_make_parser in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 1371.9547860622406s cumulative, 0.006420612335205078s individual

.
current test PASSED/SKIPPED -- test_route_main in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 1371.9583868980408s cumulative, 0.0036008358001708984s individual

.
current test PASSED/SKIPPED -- test_make_parser in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 1371.9642918109894s cumulative, 0.0059049129486083984s individual

.
current test PASSED/SKIPPED -- test_make_parser in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 1371.9698951244354s cumulative, 0.005603313446044922s individual

.
current test PASSED/SKIPPED -- test_make_parser in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 1371.9753651618958s cumulative, 0.0054700374603271484s individual

.
current test PASSED/SKIPPED -- test_make_parser in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 1371.980465888977s cumulative, 0.005100727081298828s individual

.
current test PASSED/SKIPPED -- test_make_parser_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 1371.9886236190796s cumulative, 0.008157730102539062s individual

.
current test PASSED/SKIPPED -- test_load_app_module_error in /home/kaiyaok2/PythonProjects/falcon/tests/test_cmd_inspect_app.py: 1371.9971833229065s cumulative, 0.008559703826904297s individual



==================================== ERRORS ====================================
_ ERROR at setup of TestWSGIServer.test_static_file_byte_range[uvicorn--47-The content of this comment is part of a test.\n] _

server_args = <function _uvicorn_args at 0x7fe8578d5d80>

    @pytest.fixture
    def server_url(server_args):
        if sys.platform.startswith('win'):
            pytest.skip('WSGI server tests are currently unsupported on Windows')
    
        for attempt in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}'.format(_SERVER_HOST, server_port)
    
            args = server_args(_SERVER_HOST, server_port)
            print('Starting {}...'.format(server_args.__doc__))
            print(' '.join(args))
            try:
                server = subprocess.Popen(args, cwd=_HERE)
            except FileNotFoundError:
                pytest.skip('{} executable is not installed'.format(args[0]))
    
            # NOTE(vytas): give the app server some time to start.
            start_time = time.time()
            while time.time() - start_time < _STARTUP_TIMEOUT:
                try:
                    requests.get(base_url + '/hello', timeout=0.2)
                except (requests.exceptions.Timeout, requests.exceptions.ConnectionError):
                    time.sleep(0.2)
                else:
                    break
            else:
                if server.poll() is None:
                    pytest.fail('Server is not responding to requests')
                else:
                    # NOTE(kgriffs): The server did not start up; probably due to
                    #   the port being in use. We could check the output but
                    #   capsys fixture may not have buffered the error output
                    #   yet, so we just retry.
                    continue
    
            yield base_url
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/test_wsgi_servers.py:175: Failed
_ ERROR at setup of TestWSGIServer.test_static_file_byte_range[uvicorn-7--hashlib] _

server_args = <function _uvicorn_args at 0x7fe8578d5d80>

    @pytest.fixture
    def server_url(server_args):
        if sys.platform.startswith('win'):
            pytest.skip('WSGI server tests are currently unsupported on Windows')
    
        for attempt in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}'.format(_SERVER_HOST, server_port)
    
            args = server_args(_SERVER_HOST, server_port)
            print('Starting {}...'.format(server_args.__doc__))
            print(' '.join(args))
            try:
                server = subprocess.Popen(args, cwd=_HERE)
            except FileNotFoundError:
                pytest.skip('{} executable is not installed'.format(args[0]))
    
            # NOTE(vytas): give the app server some time to start.
            start_time = time.time()
            while time.time() - start_time < _STARTUP_TIMEOUT:
                try:
                    requests.get(base_url + '/hello', timeout=0.2)
                except (requests.exceptions.Timeout, requests.exceptions.ConnectionError):
                    time.sleep(0.2)
                else:
                    break
            else:
                if server.poll() is None:
                    pytest.fail('Server is not responding to requests')
                else:
                    # NOTE(kgriffs): The server did not start up; probably due to
                    #   the port being in use. We could check the output but
                    #   capsys fixture may not have buffered the error output
                    #   yet, so we just retry.
                    continue
    
            yield base_url
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/test_wsgi_servers.py:175: Failed
_ ERROR at setup of TestWSGIServer.test_static_file_byte_range[uvicorn-32-38-random] _

server_args = <function _uvicorn_args at 0x7fe8578d5d80>

    @pytest.fixture
    def server_url(server_args):
        if sys.platform.startswith('win'):
            pytest.skip('WSGI server tests are currently unsupported on Windows')
    
        for attempt in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}'.format(_SERVER_HOST, server_port)
    
            args = server_args(_SERVER_HOST, server_port)
            print('Starting {}...'.format(server_args.__doc__))
            print(' '.join(args))
            try:
                server = subprocess.Popen(args, cwd=_HERE)
            except FileNotFoundError:
                pytest.skip('{} executable is not installed'.format(args[0]))
    
            # NOTE(vytas): give the app server some time to start.
            start_time = time.time()
            while time.time() - start_time < _STARTUP_TIMEOUT:
                try:
                    requests.get(base_url + '/hello', timeout=0.2)
                except (requests.exceptions.Timeout, requests.exceptions.ConnectionError):
                    time.sleep(0.2)
                else:
                    break
            else:
                if server.poll() is None:
                    pytest.fail('Server is not responding to requests')
                else:
                    # NOTE(kgriffs): The server did not start up; probably due to
                    #   the port being in use. We could check the output but
                    #   capsys fixture may not have buffered the error output
                    #   yet, so we just retry.
                    continue
    
            yield base_url
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/test_wsgi_servers.py:175: Failed
______ ERROR at setup of TestWSGIServer.test_post_multipart_form[uvicorn] ______

server_args = <function _uvicorn_args at 0x7fe8578d5d80>

    @pytest.fixture
    def server_url(server_args):
        if sys.platform.startswith('win'):
            pytest.skip('WSGI server tests are currently unsupported on Windows')
    
        for attempt in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}'.format(_SERVER_HOST, server_port)
    
            args = server_args(_SERVER_HOST, server_port)
            print('Starting {}...'.format(server_args.__doc__))
            print(' '.join(args))
            try:
                server = subprocess.Popen(args, cwd=_HERE)
            except FileNotFoundError:
                pytest.skip('{} executable is not installed'.format(args[0]))
    
            # NOTE(vytas): give the app server some time to start.
            start_time = time.time()
            while time.time() - start_time < _STARTUP_TIMEOUT:
                try:
                    requests.get(base_url + '/hello', timeout=0.2)
                except (requests.exceptions.Timeout, requests.exceptions.ConnectionError):
                    time.sleep(0.2)
                else:
                    break
            else:
                if server.poll() is None:
                    pytest.fail('Server is not responding to requests')
                else:
                    # NOTE(kgriffs): The server did not start up; probably due to
                    #   the port being in use. We could check the output but
                    #   capsys fixture may not have buffered the error output
                    #   yet, so we just retry.
                    continue
    
            yield base_url
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/test_wsgi_servers.py:175: Failed
______________ ERROR at setup of TestWSGIServer.test_get[uvicorn] ______________

server_args = <function _uvicorn_args at 0x7fe8578d5d80>

    @pytest.fixture
    def server_url(server_args):
        if sys.platform.startswith('win'):
            pytest.skip('WSGI server tests are currently unsupported on Windows')
    
        for attempt in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}'.format(_SERVER_HOST, server_port)
    
            args = server_args(_SERVER_HOST, server_port)
            print('Starting {}...'.format(server_args.__doc__))
            print(' '.join(args))
            try:
                server = subprocess.Popen(args, cwd=_HERE)
            except FileNotFoundError:
                pytest.skip('{} executable is not installed'.format(args[0]))
    
            # NOTE(vytas): give the app server some time to start.
            start_time = time.time()
            while time.time() - start_time < _STARTUP_TIMEOUT:
                try:
                    requests.get(base_url + '/hello', timeout=0.2)
                except (requests.exceptions.Timeout, requests.exceptions.ConnectionError):
                    time.sleep(0.2)
                else:
                    break
            else:
                if server.poll() is None:
                    pytest.fail('Server is not responding to requests')
                else:
                    # NOTE(kgriffs): The server did not start up; probably due to
                    #   the port being in use. We could check the output but
                    #   capsys fixture may not have buffered the error output
                    #   yet, so we just retry.
                    continue
    
            yield base_url
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/test_wsgi_servers.py:175: Failed
_ ERROR at setup of TestWSGIServer.test_static_file_byte_range[uvicorn-2-6-port] _

server_args = <function _uvicorn_args at 0x7fe8578d5d80>

    @pytest.fixture
    def server_url(server_args):
        if sys.platform.startswith('win'):
            pytest.skip('WSGI server tests are currently unsupported on Windows')
    
        for attempt in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}'.format(_SERVER_HOST, server_port)
    
            args = server_args(_SERVER_HOST, server_port)
            print('Starting {}...'.format(server_args.__doc__))
            print(' '.join(args))
            try:
                server = subprocess.Popen(args, cwd=_HERE)
            except FileNotFoundError:
                pytest.skip('{} executable is not installed'.format(args[0]))
    
            # NOTE(vytas): give the app server some time to start.
            start_time = time.time()
            while time.time() - start_time < _STARTUP_TIMEOUT:
                try:
                    requests.get(base_url + '/hello', timeout=0.2)
                except (requests.exceptions.Timeout, requests.exceptions.ConnectionError):
                    time.sleep(0.2)
                else:
                    break
            else:
                if server.poll() is None:
                    pytest.fail('Server is not responding to requests')
                else:
                    # NOTE(kgriffs): The server did not start up; probably due to
                    #   the port being in use. We could check the output but
                    #   capsys fixture may not have buffered the error output
                    #   yet, so we just retry.
                    continue
    
            yield base_url
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/test_wsgi_servers.py:175: Failed
_ ERROR at setup of TestWSGIServer.test_static_file_byte_range[gunicorn--47-The content of this comment is part of a test.\n] _

server_args = <function _gunicorn_args at 0x7fe8578d5c60>

    @pytest.fixture
    def server_url(server_args):
        if sys.platform.startswith('win'):
            pytest.skip('WSGI server tests are currently unsupported on Windows')
    
        for attempt in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}'.format(_SERVER_HOST, server_port)
    
            args = server_args(_SERVER_HOST, server_port)
            print('Starting {}...'.format(server_args.__doc__))
            print(' '.join(args))
            try:
                server = subprocess.Popen(args, cwd=_HERE)
            except FileNotFoundError:
                pytest.skip('{} executable is not installed'.format(args[0]))
    
            # NOTE(vytas): give the app server some time to start.
            start_time = time.time()
            while time.time() - start_time < _STARTUP_TIMEOUT:
                try:
                    requests.get(base_url + '/hello', timeout=0.2)
                except (requests.exceptions.Timeout, requests.exceptions.ConnectionError):
                    time.sleep(0.2)
                else:
                    break
            else:
                if server.poll() is None:
                    pytest.fail('Server is not responding to requests')
                else:
                    # NOTE(kgriffs): The server did not start up; probably due to
                    #   the port being in use. We could check the output but
                    #   capsys fixture may not have buffered the error output
                    #   yet, so we just retry.
                    continue
    
            yield base_url
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/test_wsgi_servers.py:175: Failed
_ ERROR at setup of TestWSGIServer.test_static_file_byte_range[gunicorn-2-6-port] _

server_args = <function _gunicorn_args at 0x7fe8578d5c60>

    @pytest.fixture
    def server_url(server_args):
        if sys.platform.startswith('win'):
            pytest.skip('WSGI server tests are currently unsupported on Windows')
    
        for attempt in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}'.format(_SERVER_HOST, server_port)
    
            args = server_args(_SERVER_HOST, server_port)
            print('Starting {}...'.format(server_args.__doc__))
            print(' '.join(args))
            try:
                server = subprocess.Popen(args, cwd=_HERE)
            except FileNotFoundError:
                pytest.skip('{} executable is not installed'.format(args[0]))
    
            # NOTE(vytas): give the app server some time to start.
            start_time = time.time()
            while time.time() - start_time < _STARTUP_TIMEOUT:
                try:
                    requests.get(base_url + '/hello', timeout=0.2)
                except (requests.exceptions.Timeout, requests.exceptions.ConnectionError):
                    time.sleep(0.2)
                else:
                    break
            else:
                if server.poll() is None:
                    pytest.fail('Server is not responding to requests')
                else:
                    # NOTE(kgriffs): The server did not start up; probably due to
                    #   the port being in use. We could check the output but
                    #   capsys fixture may not have buffered the error output
                    #   yet, so we just retry.
                    continue
    
            yield base_url
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/test_wsgi_servers.py:175: Failed
_________ ERROR at setup of TestWSGIServer.test_static_file[gunicorn] __________

server_args = <function _gunicorn_args at 0x7fe8578d5c60>

    @pytest.fixture
    def server_url(server_args):
        if sys.platform.startswith('win'):
            pytest.skip('WSGI server tests are currently unsupported on Windows')
    
        for attempt in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}'.format(_SERVER_HOST, server_port)
    
            args = server_args(_SERVER_HOST, server_port)
            print('Starting {}...'.format(server_args.__doc__))
            print(' '.join(args))
            try:
                server = subprocess.Popen(args, cwd=_HERE)
            except FileNotFoundError:
                pytest.skip('{} executable is not installed'.format(args[0]))
    
            # NOTE(vytas): give the app server some time to start.
            start_time = time.time()
            while time.time() - start_time < _STARTUP_TIMEOUT:
                try:
                    requests.get(base_url + '/hello', timeout=0.2)
                except (requests.exceptions.Timeout, requests.exceptions.ConnectionError):
                    time.sleep(0.2)
                else:
                    break
            else:
                if server.poll() is None:
                    pytest.fail('Server is not responding to requests')
                else:
                    # NOTE(kgriffs): The server did not start up; probably due to
                    #   the port being in use. We could check the output but
                    #   capsys fixture may not have buffered the error output
                    #   yet, so we just retry.
                    continue
    
            yield base_url
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/test_wsgi_servers.py:175: Failed
_ ERROR at setup of TestWSGIServer.test_static_file_byte_range[gunicorn-7--hashlib] _

server_args = <function _gunicorn_args at 0x7fe8578d5c60>

    @pytest.fixture
    def server_url(server_args):
        if sys.platform.startswith('win'):
            pytest.skip('WSGI server tests are currently unsupported on Windows')
    
        for attempt in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}'.format(_SERVER_HOST, server_port)
    
            args = server_args(_SERVER_HOST, server_port)
            print('Starting {}...'.format(server_args.__doc__))
            print(' '.join(args))
            try:
                server = subprocess.Popen(args, cwd=_HERE)
            except FileNotFoundError:
                pytest.skip('{} executable is not installed'.format(args[0]))
    
            # NOTE(vytas): give the app server some time to start.
            start_time = time.time()
            while time.time() - start_time < _STARTUP_TIMEOUT:
                try:
                    requests.get(base_url + '/hello', timeout=0.2)
                except (requests.exceptions.Timeout, requests.exceptions.ConnectionError):
                    time.sleep(0.2)
                else:
                    break
            else:
                if server.poll() is None:
                    pytest.fail('Server is not responding to requests')
                else:
                    # NOTE(kgriffs): The server did not start up; probably due to
                    #   the port being in use. We could check the output but
                    #   capsys fixture may not have buffered the error output
                    #   yet, so we just retry.
                    continue
    
            yield base_url
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/test_wsgi_servers.py:175: Failed
________ ERROR at setup of TestWSGIServer.test_get_deprecated[gunicorn] ________

server_args = <function _gunicorn_args at 0x7fe8578d5c60>

    @pytest.fixture
    def server_url(server_args):
        if sys.platform.startswith('win'):
            pytest.skip('WSGI server tests are currently unsupported on Windows')
    
        for attempt in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}'.format(_SERVER_HOST, server_port)
    
            args = server_args(_SERVER_HOST, server_port)
            print('Starting {}...'.format(server_args.__doc__))
            print(' '.join(args))
            try:
                server = subprocess.Popen(args, cwd=_HERE)
            except FileNotFoundError:
                pytest.skip('{} executable is not installed'.format(args[0]))
    
            # NOTE(vytas): give the app server some time to start.
            start_time = time.time()
            while time.time() - start_time < _STARTUP_TIMEOUT:
                try:
                    requests.get(base_url + '/hello', timeout=0.2)
                except (requests.exceptions.Timeout, requests.exceptions.ConnectionError):
                    time.sleep(0.2)
                else:
                    break
            else:
                if server.poll() is None:
                    pytest.fail('Server is not responding to requests')
                else:
                    # NOTE(kgriffs): The server did not start up; probably due to
                    #   the port being in use. We could check the output but
                    #   capsys fixture may not have buffered the error output
                    #   yet, so we just retry.
                    continue
    
            yield base_url
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/test_wsgi_servers.py:175: Failed
__________ ERROR at setup of TestWSGIServer.test_static_file[uvicorn] __________

server_args = <function _uvicorn_args at 0x7fe8578d5d80>

    @pytest.fixture
    def server_url(server_args):
        if sys.platform.startswith('win'):
            pytest.skip('WSGI server tests are currently unsupported on Windows')
    
        for attempt in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}'.format(_SERVER_HOST, server_port)
    
            args = server_args(_SERVER_HOST, server_port)
            print('Starting {}...'.format(server_args.__doc__))
            print(' '.join(args))
            try:
                server = subprocess.Popen(args, cwd=_HERE)
            except FileNotFoundError:
                pytest.skip('{} executable is not installed'.format(args[0]))
    
            # NOTE(vytas): give the app server some time to start.
            start_time = time.time()
            while time.time() - start_time < _STARTUP_TIMEOUT:
                try:
                    requests.get(base_url + '/hello', timeout=0.2)
                except (requests.exceptions.Timeout, requests.exceptions.ConnectionError):
                    time.sleep(0.2)
                else:
                    break
            else:
                if server.poll() is None:
                    pytest.fail('Server is not responding to requests')
                else:
                    # NOTE(kgriffs): The server did not start up; probably due to
                    #   the port being in use. We could check the output but
                    #   capsys fixture may not have buffered the error output
                    #   yet, so we just retry.
                    continue
    
            yield base_url
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/test_wsgi_servers.py:175: Failed
_____________ ERROR at setup of TestWSGIServer.test_get[gunicorn] ______________

server_args = <function _gunicorn_args at 0x7fe8578d5c60>

    @pytest.fixture
    def server_url(server_args):
        if sys.platform.startswith('win'):
            pytest.skip('WSGI server tests are currently unsupported on Windows')
    
        for attempt in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}'.format(_SERVER_HOST, server_port)
    
            args = server_args(_SERVER_HOST, server_port)
            print('Starting {}...'.format(server_args.__doc__))
            print(' '.join(args))
            try:
                server = subprocess.Popen(args, cwd=_HERE)
            except FileNotFoundError:
                pytest.skip('{} executable is not installed'.format(args[0]))
    
            # NOTE(vytas): give the app server some time to start.
            start_time = time.time()
            while time.time() - start_time < _STARTUP_TIMEOUT:
                try:
                    requests.get(base_url + '/hello', timeout=0.2)
                except (requests.exceptions.Timeout, requests.exceptions.ConnectionError):
                    time.sleep(0.2)
                else:
                    break
            else:
                if server.poll() is None:
                    pytest.fail('Server is not responding to requests')
                else:
                    # NOTE(kgriffs): The server did not start up; probably due to
                    #   the port being in use. We could check the output but
                    #   capsys fixture may not have buffered the error output
                    #   yet, so we just retry.
                    continue
    
            yield base_url
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/test_wsgi_servers.py:175: Failed
_____ ERROR at setup of TestWSGIServer.test_post_multipart_form[gunicorn] ______

server_args = <function _gunicorn_args at 0x7fe8578d5c60>

    @pytest.fixture
    def server_url(server_args):
        if sys.platform.startswith('win'):
            pytest.skip('WSGI server tests are currently unsupported on Windows')
    
        for attempt in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}'.format(_SERVER_HOST, server_port)
    
            args = server_args(_SERVER_HOST, server_port)
            print('Starting {}...'.format(server_args.__doc__))
            print(' '.join(args))
            try:
                server = subprocess.Popen(args, cwd=_HERE)
            except FileNotFoundError:
                pytest.skip('{} executable is not installed'.format(args[0]))
    
            # NOTE(vytas): give the app server some time to start.
            start_time = time.time()
            while time.time() - start_time < _STARTUP_TIMEOUT:
                try:
                    requests.get(base_url + '/hello', timeout=0.2)
                except (requests.exceptions.Timeout, requests.exceptions.ConnectionError):
                    time.sleep(0.2)
                else:
                    break
            else:
                if server.poll() is None:
                    pytest.fail('Server is not responding to requests')
                else:
                    # NOTE(kgriffs): The server did not start up; probably due to
                    #   the port being in use. We could check the output but
                    #   capsys fixture may not have buffered the error output
                    #   yet, so we just retry.
                    continue
    
            yield base_url
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/test_wsgi_servers.py:175: Failed
________ ERROR at setup of TestWSGIServer.test_get_deprecated[uvicorn] _________

server_args = <function _uvicorn_args at 0x7fe8578d5d80>

    @pytest.fixture
    def server_url(server_args):
        if sys.platform.startswith('win'):
            pytest.skip('WSGI server tests are currently unsupported on Windows')
    
        for attempt in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}'.format(_SERVER_HOST, server_port)
    
            args = server_args(_SERVER_HOST, server_port)
            print('Starting {}...'.format(server_args.__doc__))
            print(' '.join(args))
            try:
                server = subprocess.Popen(args, cwd=_HERE)
            except FileNotFoundError:
                pytest.skip('{} executable is not installed'.format(args[0]))
    
            # NOTE(vytas): give the app server some time to start.
            start_time = time.time()
            while time.time() - start_time < _STARTUP_TIMEOUT:
                try:
                    requests.get(base_url + '/hello', timeout=0.2)
                except (requests.exceptions.Timeout, requests.exceptions.ConnectionError):
                    time.sleep(0.2)
                else:
                    break
            else:
                if server.poll() is None:
                    pytest.fail('Server is not responding to requests')
                else:
                    # NOTE(kgriffs): The server did not start up; probably due to
                    #   the port being in use. We could check the output but
                    #   capsys fixture may not have buffered the error output
                    #   yet, so we just retry.
                    continue
    
            yield base_url
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/test_wsgi_servers.py:175: Failed
_ ERROR at setup of TestWSGIServer.test_static_file_byte_range[gunicorn-32-38-random] _

server_args = <function _gunicorn_args at 0x7fe8578d5c60>

    @pytest.fixture
    def server_url(server_args):
        if sys.platform.startswith('win'):
            pytest.skip('WSGI server tests are currently unsupported on Windows')
    
        for attempt in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}'.format(_SERVER_HOST, server_port)
    
            args = server_args(_SERVER_HOST, server_port)
            print('Starting {}...'.format(server_args.__doc__))
            print(' '.join(args))
            try:
                server = subprocess.Popen(args, cwd=_HERE)
            except FileNotFoundError:
                pytest.skip('{} executable is not installed'.format(args[0]))
    
            # NOTE(vytas): give the app server some time to start.
            start_time = time.time()
            while time.time() - start_time < _STARTUP_TIMEOUT:
                try:
                    requests.get(base_url + '/hello', timeout=0.2)
                except (requests.exceptions.Timeout, requests.exceptions.ConnectionError):
                    time.sleep(0.2)
                else:
                    break
            else:
                if server.poll() is None:
                    pytest.fail('Server is not responding to requests')
                else:
                    # NOTE(kgriffs): The server did not start up; probably due to
                    #   the port being in use. We could check the output but
                    #   capsys fixture may not have buffered the error output
                    #   yet, so we just retry.
                    continue
    
            yield base_url
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/test_wsgi_servers.py:175: Failed
_ ERROR at setup of TestASGIServer.test_post_multipart_form[_uvicorn_factory] __

request = <SubRequest 'server_base_url' for <Function test_post_multipart_form[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
                        pytest.fail('Server is not responding to requests')
                    else:
                        # NOTE(kgriffs): The server did not start up; probably due to
                        #   the port being in use. We could check the output but
                        #   capsys fixture may not have buffered the error output
                        #   yet, so we just retry.
                        continue
    
                yield base_url
    
            assert server.returncode == 0
    
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/asgi/test_asgi_servers.py:628: Failed
____ ERROR at setup of TestASGIServer.test_post_multiple[_uvicorn_factory] _____

request = <SubRequest 'server_base_url' for <Function test_post_multiple[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
                        pytest.fail('Server is not responding to requests')
                    else:
                        # NOTE(kgriffs): The server did not start up; probably due to
                        #   the port being in use. We could check the output but
                        #   capsys fixture may not have buffered the error output
                        #   yet, so we just retry.
                        continue
    
                yield base_url
    
            assert server.returncode == 0
    
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/asgi/test_asgi_servers.py:628: Failed
_ ERROR at setup of TestASGIServer.test_post_read_bounded_stream[_uvicorn_factory] _

request = <SubRequest 'server_base_url' for <Function test_post_read_bounded_stream[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
                        pytest.fail('Server is not responding to requests')
                    else:
                        # NOTE(kgriffs): The server did not start up; probably due to
                        #   the port being in use. We could check the output but
                        #   capsys fixture may not have buffered the error output
                        #   yet, so we just retry.
                        continue
    
                yield base_url
    
            assert server.returncode == 0
    
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/asgi/test_asgi_servers.py:628: Failed
_______ ERROR at setup of TestASGIServer.test_head_405[_uvicorn_factory] _______

request = <SubRequest 'server_base_url' for <Function test_head_405[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
                        pytest.fail('Server is not responding to requests')
                    else:
                        # NOTE(kgriffs): The server did not start up; probably due to
                        #   the port being in use. We could check the output but
                        #   capsys fixture may not have buffered the error output
                        #   yet, so we just retry.
                        continue
    
                yield base_url
    
            assert server.returncode == 0
    
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/asgi/test_asgi_servers.py:628: Failed
_ ERROR at setup of TestASGIServer.test_post_read_bounded_stream_no_body[_uvicorn_factory] _

request = <SubRequest 'server_base_url' for <Function test_post_read_bounded_stream_no_body[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
                        pytest.fail('Server is not responding to requests')
                    else:
                        # NOTE(kgriffs): The server did not start up; probably due to
                        #   the port being in use. We could check the output but
                        #   capsys fixture may not have buffered the error output
                        #   yet, so we just retry.
                        continue
    
                yield base_url
    
            assert server.returncode == 0
    
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/asgi/test_asgi_servers.py:628: Failed
_ ERROR at setup of TestASGIServer.test_post_invalid_content_length[_uvicorn_factory] _

request = <SubRequest 'server_base_url' for <Function test_post_invalid_content_length[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
                        pytest.fail('Server is not responding to requests')
                    else:
                        # NOTE(kgriffs): The server did not start up; probably due to
                        #   the port being in use. We could check the output but
                        #   capsys fixture may not have buffered the error output
                        #   yet, so we just retry.
                        continue
    
                yield base_url
    
            assert server.returncode == 0
    
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/asgi/test_asgi_servers.py:628: Failed
_________ ERROR at setup of TestASGIServer.test_get[_uvicorn_factory] __________

request = <SubRequest 'server_base_url' for <Function test_get[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
                        pytest.fail('Server is not responding to requests')
                    else:
                        # NOTE(kgriffs): The server did not start up; probably due to
                        #   the port being in use. We could check the output but
                        #   capsys fixture may not have buffered the error output
                        #   yet, so we just retry.
                        continue
    
                yield base_url
    
            assert server.returncode == 0
    
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/asgi/test_asgi_servers.py:628: Failed
_ ERROR at setup of TestASGIServer.test_post_read_bounded_stream_large[_uvicorn_factory] _

request = <SubRequest 'server_base_url' for <Function test_post_read_bounded_stream_large[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
                        pytest.fail('Server is not responding to requests')
                    else:
                        # NOTE(kgriffs): The server did not start up; probably due to
                        #   the port being in use. We could check the output but
                        #   capsys fixture may not have buffered the error output
                        #   yet, so we just retry.
                        continue
    
                yield base_url
    
            assert server.returncode == 0
    
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/asgi/test_asgi_servers.py:628: Failed
_________ ERROR at setup of TestASGIServer.test_put[_uvicorn_factory] __________

request = <SubRequest 'server_base_url' for <Function test_put[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
                        pytest.fail('Server is not responding to requests')
                    else:
                        # NOTE(kgriffs): The server did not start up; probably due to
                        #   the port being in use. We could check the output but
                        #   capsys fixture may not have buffered the error output
                        #   yet, so we just retry.
                        continue
    
                yield base_url
    
            assert server.returncode == 0
    
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/asgi/test_asgi_servers.py:628: Failed
_ ERROR at setup of TestASGIServer.test_stream_chunked_request[_uvicorn_factory] _

request = <SubRequest 'server_base_url' for <Function test_stream_chunked_request[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
                        pytest.fail('Server is not responding to requests')
                    else:
                        # NOTE(kgriffs): The server did not start up; probably due to
                        #   the port being in use. We could check the output but
                        #   capsys fixture may not have buffered the error output
                        #   yet, so we just retry.
                        continue
    
                yield base_url
    
            assert server.returncode == 0
    
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/asgi/test_asgi_servers.py:628: Failed
_ ERROR at setup of TestASGIServer.test_sse_client_disconnects_early[_uvicorn_factory] _

request = <SubRequest 'server_base_url' for <Function test_sse_client_disconnects_early[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
                        pytest.fail('Server is not responding to requests')
                    else:
                        # NOTE(kgriffs): The server did not start up; probably due to
                        #   the port being in use. We could check the output but
                        #   capsys fixture may not have buffered the error output
                        #   yet, so we just retry.
                        continue
    
                yield base_url
    
            assert server.returncode == 0
    
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/asgi/test_asgi_servers.py:628: Failed
_________ ERROR at setup of TestASGIServer.test_sse[_uvicorn_factory] __________

request = <SubRequest 'server_base_url' for <Function test_sse[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
                        pytest.fail('Server is not responding to requests')
                    else:
                        # NOTE(kgriffs): The server did not start up; probably due to
                        #   the port being in use. We could check the output but
                        #   capsys fixture may not have buffered the error output
                        #   yet, so we just retry.
                        continue
    
                yield base_url
    
            assert server.returncode == 0
    
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/asgi/test_asgi_servers.py:628: Failed
_ ERROR at setup of TestWebSocket.test_type_mismatch[_uvicorn_factory-text-send] _

request = <SubRequest 'server_base_url' for <Function test_type_mismatch[_uvicorn_factory-text-send]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
                        pytest.fail('Server is not responding to requests')
                    else:
                        # NOTE(kgriffs): The server did not start up; probably due to
                        #   the port being in use. We could check the output but
                        #   capsys fixture may not have buffered the error output
                        #   yet, so we just retry.
                        continue
    
                yield base_url
    
            assert server.returncode == 0
    
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/asgi/test_asgi_servers.py:628: Failed
_ ERROR at setup of TestWebSocket.test_close_code_on_unhandled_error[_uvicorn_factory] _

request = <SubRequest 'server_base_url' for <Function test_close_code_on_unhandled_error[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
                        pytest.fail('Server is not responding to requests')
                    else:
                        # NOTE(kgriffs): The server did not start up; probably due to
                        #   the port being in use. We could check the output but
                        #   capsys fixture may not have buffered the error output
                        #   yet, so we just retry.
                        continue
    
                yield base_url
    
            assert server.returncode == 0
    
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/asgi/test_asgi_servers.py:628: Failed
__ ERROR at setup of TestWebSocket.test_rejected[_uvicorn_factory-4040-True] ___

request = <SubRequest 'server_base_url' for <Function test_rejected[_uvicorn_factory-4040-True]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
                        pytest.fail('Server is not responding to requests')
                    else:
                        # NOTE(kgriffs): The server did not start up; probably due to
                        #   the port being in use. We could check the output but
                        #   capsys fixture may not have buffered the error output
                        #   yet, so we just retry.
                        continue
    
                yield base_url
    
            assert server.returncode == 0
    
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/asgi/test_asgi_servers.py:628: Failed
__ ERROR at setup of TestWebSocket.test_recv_before_accept[_uvicorn_factory] ___

request = <SubRequest 'server_base_url' for <Function test_recv_before_accept[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
                        pytest.fail('Server is not responding to requests')
                    else:
                        # NOTE(kgriffs): The server did not start up; probably due to
                        #   the port being in use. We could check the output but
                        #   capsys fixture may not have buffered the error output
                        #   yet, so we just retry.
                        continue
    
                yield base_url
    
            assert server.returncode == 0
    
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/asgi/test_asgi_servers.py:628: Failed
__ ERROR at setup of TestWebSocket.test_rejected[_uvicorn_factory-None-False] __

request = <SubRequest 'server_base_url' for <Function test_rejected[_uvicorn_factory-None-False]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
                        pytest.fail('Server is not responding to requests')
                    else:
                        # NOTE(kgriffs): The server did not start up; probably due to
                        #   the port being in use. We could check the output but
                        #   capsys fixture may not have buffered the error output
                        #   yet, so we just retry.
                        continue
    
                yield base_url
    
            assert server.returncode == 0
    
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/asgi/test_asgi_servers.py:628: Failed
__ ERROR at setup of TestWebSocket.test_rejected[_uvicorn_factory-4040-False] __

request = <SubRequest 'server_base_url' for <Function test_rejected[_uvicorn_factory-4040-False]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
                        pytest.fail('Server is not responding to requests')
                    else:
                        # NOTE(kgriffs): The server did not start up; probably due to
                        #   the port being in use. We could check the output but
                        #   capsys fixture may not have buffered the error output
                        #   yet, so we just retry.
                        continue
    
                yield base_url
    
            assert server.returncode == 0
    
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/asgi/test_asgi_servers.py:628: Failed
_ ERROR at setup of TestWebSocket.test_disconnecting_client_early[_uvicorn_factory] _

request = <SubRequest 'server_base_url' for <Function test_disconnecting_client_early[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
                        pytest.fail('Server is not responding to requests')
                    else:
                        # NOTE(kgriffs): The server did not start up; probably due to
                        #   the port being in use. We could check the output but
                        #   capsys fixture may not have buffered the error output
                        #   yet, so we just retry.
                        continue
    
                yield base_url
    
            assert server.returncode == 0
    
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/asgi/test_asgi_servers.py:628: Failed
____ ERROR at setup of TestWebSocket.test_hello[_uvicorn_factory-4321-True] ____

request = <SubRequest 'server_base_url' for <Function test_hello[_uvicorn_factory-4321-True]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
                        pytest.fail('Server is not responding to requests')
                    else:
                        # NOTE(kgriffs): The server did not start up; probably due to
                        #   the port being in use. We could check the output but
                        #   capsys fixture may not have buffered the error output
                        #   yet, so we just retry.
                        continue
    
                yield base_url
    
            assert server.returncode == 0
    
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/asgi/test_asgi_servers.py:628: Failed
_ ERROR at setup of TestWebSocket.test_select_subprotocol_unknown[_uvicorn_factory] _

request = <SubRequest 'server_base_url' for <Function test_select_subprotocol_unknown[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
                        pytest.fail('Server is not responding to requests')
                    else:
                        # NOTE(kgriffs): The server did not start up; probably due to
                        #   the port being in use. We could check the output but
                        #   capsys fixture may not have buffered the error output
                        #   yet, so we just retry.
                        continue
    
                yield base_url
    
            assert server.returncode == 0
    
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/asgi/test_asgi_servers.py:628: Failed
__ ERROR at setup of TestWebSocket.test_rejected[_uvicorn_factory-None-True] ___

request = <SubRequest 'server_base_url' for <Function test_rejected[_uvicorn_factory-None-True]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
                        pytest.fail('Server is not responding to requests')
                    else:
                        # NOTE(kgriffs): The server did not start up; probably due to
                        #   the port being in use. We could check the output but
                        #   capsys fixture may not have buffered the error output
                        #   yet, so we just retry.
                        continue
    
                yield base_url
    
            assert server.returncode == 0
    
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/asgi/test_asgi_servers.py:628: Failed
____ ERROR at setup of TestWebSocket.test_hello[_uvicorn_factory-None-True] ____

request = <SubRequest 'server_base_url' for <Function test_hello[_uvicorn_factory-None-True]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
                        pytest.fail('Server is not responding to requests')
                    else:
                        # NOTE(kgriffs): The server did not start up; probably due to
                        #   the port being in use. We could check the output but
                        #   capsys fixture may not have buffered the error output
                        #   yet, so we just retry.
                        continue
    
                yield base_url
    
            assert server.returncode == 0
    
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/asgi/test_asgi_servers.py:628: Failed
__ ERROR at setup of TestWebSocket.test_send_before_accept[_uvicorn_factory] ___

request = <SubRequest 'server_base_url' for <Function test_send_before_accept[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
                        pytest.fail('Server is not responding to requests')
                    else:
                        # NOTE(kgriffs): The server did not start up; probably due to
                        #   the port being in use. We could check the output but
                        #   capsys fixture may not have buffered the error output
                        #   yet, so we just retry.
                        continue
    
                yield base_url
    
            assert server.returncode == 0
    
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/asgi/test_asgi_servers.py:628: Failed
_ ERROR at setup of TestWebSocket.test_select_subprotocol_known[_uvicorn_factory-*-amqp] _

request = <SubRequest 'server_base_url' for <Function test_select_subprotocol_known[_uvicorn_factory-*-amqp]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
                        pytest.fail('Server is not responding to requests')
                    else:
                        # NOTE(kgriffs): The server did not start up; probably due to
                        #   the port being in use. We could check the output but
                        #   capsys fixture may not have buffered the error output
                        #   yet, so we just retry.
                        continue
    
                yield base_url
    
            assert server.returncode == 0
    
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/asgi/test_asgi_servers.py:628: Failed
_ ERROR at setup of TestWebSocket.test_type_mismatch[_uvicorn_factory-text-recv] _

request = <SubRequest 'server_base_url' for <Function test_type_mismatch[_uvicorn_factory-text-recv]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
                        pytest.fail('Server is not responding to requests')
                    else:
                        # NOTE(kgriffs): The server did not start up; probably due to
                        #   the port being in use. We could check the output but
                        #   capsys fixture may not have buffered the error output
                        #   yet, so we just retry.
                        continue
    
                yield base_url
    
            assert server.returncode == 0
    
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/asgi/test_asgi_servers.py:628: Failed
__ ERROR at setup of TestWebSocket.test_passing_path_params[_uvicorn_factory] __

request = <SubRequest 'server_base_url' for <Function test_passing_path_params[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
                        pytest.fail('Server is not responding to requests')
                    else:
                        # NOTE(kgriffs): The server did not start up; probably due to
                        #   the port being in use. We could check the output but
                        #   capsys fixture may not have buffered the error output
                        #   yet, so we just retry.
                        continue
    
                yield base_url
    
            assert server.returncode == 0
    
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/asgi/test_asgi_servers.py:628: Failed
_ ERROR at setup of TestWebSocket.test_type_mismatch[_uvicorn_factory-data-recv] _

request = <SubRequest 'server_base_url' for <Function test_type_mismatch[_uvicorn_factory-data-recv]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
                        pytest.fail('Server is not responding to requests')
                    else:
                        # NOTE(kgriffs): The server did not start up; probably due to
                        #   the port being in use. We could check the output but
                        #   capsys fixture may not have buffered the error output
                        #   yet, so we just retry.
                        continue
    
                yield base_url
    
            assert server.returncode == 0
    
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/asgi/test_asgi_servers.py:628: Failed
_ ERROR at setup of TestWebSocket.test_close_code_on_unhandled_http_error[_uvicorn_factory] _

request = <SubRequest 'server_base_url' for <Function test_close_code_on_unhandled_http_error[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
                        pytest.fail('Server is not responding to requests')
                    else:
                        # NOTE(kgriffs): The server did not start up; probably due to
                        #   the port being in use. We could check the output but
                        #   capsys fixture may not have buffered the error output
                        #   yet, so we just retry.
                        continue
    
                yield base_url
    
            assert server.returncode == 0
    
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/asgi/test_asgi_servers.py:628: Failed
_ ERROR at setup of TestWebSocket.test_select_subprotocol_known[_uvicorn_factory-wamp-wamp] _

request = <SubRequest 'server_base_url' for <Function test_select_subprotocol_known[_uvicorn_factory-wamp-wamp]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
                        pytest.fail('Server is not responding to requests')
                    else:
                        # NOTE(kgriffs): The server did not start up; probably due to
                        #   the port being in use. We could check the output but
                        #   capsys fixture may not have buffered the error output
                        #   yet, so we just retry.
                        continue
    
                yield base_url
    
            assert server.returncode == 0
    
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/asgi/test_asgi_servers.py:628: Failed
_ ERROR at setup of TestWebSocket.test_type_mismatch[_uvicorn_factory-data-send] _

request = <SubRequest 'server_base_url' for <Function test_type_mismatch[_uvicorn_factory-data-send]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
                        pytest.fail('Server is not responding to requests')
                    else:
                        # NOTE(kgriffs): The server did not start up; probably due to
                        #   the port being in use. We could check the output but
                        #   capsys fixture may not have buffered the error output
                        #   yet, so we just retry.
                        continue
    
                yield base_url
    
            assert server.returncode == 0
    
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/asgi/test_asgi_servers.py:628: Failed
__ ERROR at setup of TestWebSocket.test_invalid_close_code[_uvicorn_factory] ___

request = <SubRequest 'server_base_url' for <Function test_invalid_close_code[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
                        pytest.fail('Server is not responding to requests')
                    else:
                        # NOTE(kgriffs): The server did not start up; probably due to
                        #   the port being in use. We could check the output but
                        #   capsys fixture may not have buffered the error output
                        #   yet, so we just retry.
                        continue
    
                yield base_url
    
            assert server.returncode == 0
    
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/asgi/test_asgi_servers.py:628: Failed
___ ERROR at setup of TestWebSocket.test_hello[_uvicorn_factory-4321-False] ____

request = <SubRequest 'server_base_url' for <Function test_hello[_uvicorn_factory-4321-False]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
                        pytest.fail('Server is not responding to requests')
                    else:
                        # NOTE(kgriffs): The server did not start up; probably due to
                        #   the port being in use. We could check the output but
                        #   capsys fixture may not have buffered the error output
                        #   yet, so we just retry.
                        continue
    
                yield base_url
    
            assert server.returncode == 0
    
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/asgi/test_asgi_servers.py:628: Failed
___ ERROR at setup of TestWebSocket.test_hello[_uvicorn_factory-None-False] ____

request = <SubRequest 'server_base_url' for <Function test_hello[_uvicorn_factory-None-False]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
                        pytest.fail('Server is not responding to requests')
                    else:
                        # NOTE(kgriffs): The server did not start up; probably due to
                        #   the port being in use. We could check the output but
                        #   capsys fixture may not have buffered the error output
                        #   yet, so we just retry.
                        continue
    
                yield base_url
    
            assert server.returncode == 0
    
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/asgi/test_asgi_servers.py:628: Failed
___ ERROR at setup of TestWebSocket.test_missing_responder[_uvicorn_factory] ___

request = <SubRequest 'server_base_url' for <Function test_missing_responder[_uvicorn_factory]>>

    @pytest.fixture(params=[_uvicorn_factory, _daphne_factory, _hypercorn_factory])
    def server_base_url(request):
        process_factory = request.param
        _can_run(process_factory)
    
        for i in range(3):
            server_port = testing.get_unused_port()
            base_url = 'http://{}:{}/'.format(_SERVER_HOST, server_port)
    
            with _run_server_isolated(process_factory, _SERVER_HOST, server_port) as server:
                # NOTE(kgriffs): Let the server start up. Give up after 5 seconds.
                start_ts = time.time()
                while (time.time() - start_ts) < 5:
                    try:
                        requests.get(base_url, timeout=0.2)
                    except (
                        requests.exceptions.Timeout,
                        requests.exceptions.ConnectionError,
                    ):
                        time.sleep(0.2)
                    else:
                        break
                else:
                    if server.poll() is None:
                        pytest.fail('Server is not responding to requests')
                    else:
                        # NOTE(kgriffs): The server did not start up; probably due to
                        #   the port being in use. We could check the output but
                        #   capsys fixture may not have buffered the error output
                        #   yet, so we just retry.
                        continue
    
                yield base_url
    
            assert server.returncode == 0
    
            break
    
        else:
>           pytest.fail('Could not start server')
E           Failed: Could not start server

tests/asgi/test_asgi_servers.py:628: Failed
______________ ERROR at setup of test_none_same_site_value[asgi] _______________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', CookieResource())

tests/test_cookies.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996b121f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9969fb5b0>, 'CHECK...b5b0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9969fb5b0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CookieResource.on_get of <test_cookies.CookieResource object at 0x7fe84402dcc0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______________ ERROR at setup of test_response_base_case[asgi] ________________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', CookieResource())

tests/test_cookies.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe9979dba00>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996bf37f0>, 'CHECK...37f0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996bf37f0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CookieResource.on_get of <test_cookies.CookieResource object at 0x7fe996472fb0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________________ ERROR at setup of test_cookies_setable[asgi] _________________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', CookieResource())

tests/test_cookies.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe9979dac70>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9969fa710>, 'CHECK...a710>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9969fa710>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CookieResource.on_get of <test_cookies.CookieResource object at 0x7fe8440f1e10>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________________ ERROR at setup of test_cookie_timezone[asgi] _________________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', CookieResource())

tests/test_cookies.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996fa7ae0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9969c31c0>, 'CHECK...31c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9969c31c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CookieResource.on_get of <test_cookies.CookieResource object at 0x7fe996792fb0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________ ERROR at setup of test_unset_cookies_samesite[asgi] ______________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', CookieResource())

tests/test_cookies.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe9979da180>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9969c0f70>, 'CHECK...0f70>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9969c0f70>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CookieResource.on_get of <test_cookies.CookieResource object at 0x7fe99694b610>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________ ERROR at setup of test_same_site_empty_string[asgi] ______________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', CookieResource())

tests/test_cookies.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996b127a0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9969c32e0>, 'CHECK...32e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9969c32e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CookieResource.on_get of <test_cookies.CookieResource object at 0x7fe99690ee00>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____ ERROR at setup of test_cookie_max_age_float_and_string[asgi-foostring] ____

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', CookieResource())

tests/test_cookies.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996b25150>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe8440860e0>, 'CHECK...60e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe8440860e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CookieResource.on_get of <test_cookies.CookieResource object at 0x7fe8441c9e40>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____ ERROR at setup of test_cookie_max_age_float_and_string[asgi-foofloat] _____

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', CookieResource())

tests/test_cookies.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996b250e0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996cc6b00>, 'CHECK...6b00>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996cc6b00>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CookieResource.on_get of <test_cookies.CookieResource object at 0x7fe8441ae680>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______________ ERROR at setup of test_response_unset_cookie[asgi] ______________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', CookieResource())

tests/test_cookies.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996be8040>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9969f9630>, 'CHECK...9630>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9969f9630>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CookieResource.on_get of <test_cookies.CookieResource object at 0x7fe996d4afb0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______________ ERROR at setup of test_response_complex_case[asgi] ______________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', CookieResource())

tests/test_cookies.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996b9f060>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9969faf80>, 'CHECK...af80>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9969faf80>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CookieResource.on_get of <test_cookies.CookieResource object at 0x7fe8441cef20>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______________ ERROR at setup of test_cookie_expires_aware[asgi] _______________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', CookieResource())

tests/test_cookies.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe857ca2ce0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe997b5bb50>, 'CHECK...bb50>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe997b5bb50>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CookieResource.on_get of <test_cookies.CookieResource object at 0x7fe996772410>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________ ERROR at setup of test_strict_same_site_value[asgi] ______________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', CookieResource())

tests/test_cookies.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe9966e7ed0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9969f93f0>, 'CHECK...93f0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9969f93f0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CookieResource.on_get of <test_cookies.CookieResource object at 0x7fe8440e20e0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______________ ERROR at setup of test_lax_same_site_value[asgi] _______________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', CookieResource())

tests/test_cookies.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe9966e4eb0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996bf35b0>, 'CHECK...35b0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996bf35b0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CookieResource.on_get of <test_cookies.CookieResource object at 0x7fe8441c9090>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ ERROR at setup of test_response_disable_secure_globally[asgi] _________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', CookieResource())

tests/test_cookies.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe9966e6960>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe8440535b0>, 'CHECK...35b0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe8440535b0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CookieResource.on_get of <test_cookies.CookieResource object at 0x7fe9967b9e10>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______________ ERROR at setup of test_cookie_expires_naive[asgi] _______________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', CookieResource())

tests/test_cookies.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe9966e4120>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996b39360>, 'CHECK...9360>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996b39360>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CookieResource.on_get of <test_cookies.CookieResource object at 0x7fe9964abd00>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ ERROR at setup of test_unset_cookies[asgi] __________________

asgi = True

    @pytest.fixture
    def client(asgi):
        app = create_app(asgi)
>       app.add_route('/', CookieResource())

tests/test_cookies.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe9966e6f80>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9969c01f0>, 'CHECK...01f0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9969c01f0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CookieResource.on_get of <test_cookies.CookieResource object at 0x7fe8441ccdf0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
=================================== FAILURES ===================================
_________________ TestMain.test_routes_only[internal-verbose] __________________

self = <test_cmd_inspect_app.TestMain object at 0x7fe8642c7130>, verbose = True
internal = True
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fe99690e590>

    def test_routes_only(self, verbose, internal, monkeypatch):
        args = ['some-file.py', '{}:{}'.format(_MODULE, '_APP'), '-r']
        if verbose:
            args.append('-v')
        if internal:
            args.append('-i')
        monkeypatch.setattr('sys.argv', args)
        output = io.StringIO()
        with redirected(stdout=output):
>           inspect_app.main()

tests/test_cmd_inspect_app.py:163: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:100: in main
    app = load_app(parser, args)
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7fe99be47400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
_________________ TestMain.test_inspect[not-internal-verbose] __________________

self = <test_cmd_inspect_app.TestMain object at 0x7fe8642c7640>, verbose = True
internal = False
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fe8441add20>

    def test_inspect(self, verbose, internal, monkeypatch):
        args = ['some-file.py', '{}:{}'.format(_MODULE, '_APP')]
        if verbose:
            args.append('-v')
        if internal:
            args.append('-i')
        monkeypatch.setattr('sys.argv', args)
        output = io.StringIO()
        with redirected(stdout=output):
>           inspect_app.main()

tests/test_cmd_inspect_app.py:178: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:100: in main
    app = load_app(parser, args)
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7fe99be47400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
_______________ TestMain.test_inspect[not-internal-not-verbose] ________________

self = <test_cmd_inspect_app.TestMain object at 0x7fe8642c76d0>, verbose = False
internal = False
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fe99690cd00>

    def test_inspect(self, verbose, internal, monkeypatch):
        args = ['some-file.py', '{}:{}'.format(_MODULE, '_APP')]
        if verbose:
            args.append('-v')
        if internal:
            args.append('-i')
        monkeypatch.setattr('sys.argv', args)
        output = io.StringIO()
        with redirected(stdout=output):
>           inspect_app.main()

tests/test_cmd_inspect_app.py:178: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:100: in main
    app = load_app(parser, args)
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7fe99be47400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
_________________ TestMain.test_inspect[internal-not-verbose] __________________

self = <test_cmd_inspect_app.TestMain object at 0x7fe8642c75b0>, verbose = False
internal = True
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fe99692c4c0>

    def test_inspect(self, verbose, internal, monkeypatch):
        args = ['some-file.py', '{}:{}'.format(_MODULE, '_APP')]
        if verbose:
            args.append('-v')
        if internal:
            args.append('-i')
        monkeypatch.setattr('sys.argv', args)
        output = io.StringIO()
        with redirected(stdout=output):
>           inspect_app.main()

tests/test_cmd_inspect_app.py:178: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:100: in main
    app = load_app(parser, args)
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7fe99be47400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
___________________ TestMain.test_inspect[internal-verbose] ____________________

self = <test_cmd_inspect_app.TestMain object at 0x7fe8642c7520>, verbose = True
internal = True
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fe8440e0580>

    def test_inspect(self, verbose, internal, monkeypatch):
        args = ['some-file.py', '{}:{}'.format(_MODULE, '_APP')]
        if verbose:
            args.append('-v')
        if internal:
            args.append('-i')
        monkeypatch.setattr('sys.argv', args)
        output = io.StringIO()
        with redirected(stdout=output):
>           inspect_app.main()

tests/test_cmd_inspect_app.py:178: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:100: in main
    app = load_app(parser, args)
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7fe99be47400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
_______________ TestMain.test_routes_only[internal-not-verbose] ________________

self = <test_cmd_inspect_app.TestMain object at 0x7fe8642c71c0>, verbose = False
internal = True
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fe9964bdea0>

    def test_routes_only(self, verbose, internal, monkeypatch):
        args = ['some-file.py', '{}:{}'.format(_MODULE, '_APP'), '-r']
        if verbose:
            args.append('-v')
        if internal:
            args.append('-i')
        monkeypatch.setattr('sys.argv', args)
        output = io.StringIO()
        with redirected(stdout=output):
>           inspect_app.main()

tests/test_cmd_inspect_app.py:163: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:100: in main
    app = load_app(parser, args)
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7fe99be47400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
_______________ TestMain.test_routes_only[not-internal-verbose] ________________

self = <test_cmd_inspect_app.TestMain object at 0x7fe8642c7250>, verbose = True
internal = False
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fe996e01810>

    def test_routes_only(self, verbose, internal, monkeypatch):
        args = ['some-file.py', '{}:{}'.format(_MODULE, '_APP'), '-r']
        if verbose:
            args.append('-v')
        if internal:
            args.append('-i')
        monkeypatch.setattr('sys.argv', args)
        output = io.StringIO()
        with redirected(stdout=output):
>           inspect_app.main()

tests/test_cmd_inspect_app.py:163: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:100: in main
    app = load_app(parser, args)
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7fe99be47400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
_____________ TestMain.test_routes_only[not-internal-not-verbose] ______________

self = <test_cmd_inspect_app.TestMain object at 0x7fe8642c72e0>, verbose = False
internal = False
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fe9965a13c0>

    def test_routes_only(self, verbose, internal, monkeypatch):
        args = ['some-file.py', '{}:{}'.format(_MODULE, '_APP'), '-r']
        if verbose:
            args.append('-v')
        if internal:
            args.append('-i')
        monkeypatch.setattr('sys.argv', args)
        output = io.StringIO()
        with redirected(stdout=output):
>           inspect_app.main()

tests/test_cmd_inspect_app.py:163: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:100: in main
    app = load_app(parser, args)
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7fe99be47400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
_______________________ TestLoadApp.test_load_app[_APP] ________________________

self = <test_cmd_inspect_app.TestLoadApp object at 0x7fe8642c69b0>
name = '_APP'

    @pytest.mark.parametrize('name', ('_APP', 'make_app'))
    def test_load_app(self, name):
        parser = inspect_app.make_parser()
        args = Namespace(
            app_module='{}:{}'.format(_MODULE, name), route_only=False, verbose=False
        )
>       app = inspect_app.load_app(parser, args)

tests/test_cmd_inspect_app.py:116: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7fe99be47400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
_____________________ TestLoadApp.test_load_app_error[foo] _____________________

self = <test_cmd_inspect_app.TestLoadApp object at 0x7fe8642c6bf0>, name = 'foo'

    @pytest.mark.parametrize(
        'name',
        (
            'foo',  # not exists
            '_MODULE',  # not callable and not app
            'DummyResource',  # callable and not app
        ),
    )
    def test_load_app_error(self, name):
        parser = inspect_app.make_parser()
        args = Namespace(
            app_module='{}:{}'.format(_MODULE, name), route_only=False, verbose=False
        )
        with pytest.raises(SystemExit):
>           inspect_app.load_app(parser, args)

tests/test_cmd_inspect_app.py:134: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7fe99be47400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
_____________________ TestLoadApp.test_load_app[make_app] ______________________

self = <test_cmd_inspect_app.TestLoadApp object at 0x7fe8642c6a40>
name = 'make_app'

    @pytest.mark.parametrize('name', ('_APP', 'make_app'))
    def test_load_app(self, name):
        parser = inspect_app.make_parser()
        args = Namespace(
            app_module='{}:{}'.format(_MODULE, name), route_only=False, verbose=False
        )
>       app = inspect_app.load_app(parser, args)

tests/test_cmd_inspect_app.py:116: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7fe99be47400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
___________________ TestLoadApp.test_load_app_error[_MODULE] ___________________

self = <test_cmd_inspect_app.TestLoadApp object at 0x7fe8642c6c80>
name = '_MODULE'

    @pytest.mark.parametrize(
        'name',
        (
            'foo',  # not exists
            '_MODULE',  # not callable and not app
            'DummyResource',  # callable and not app
        ),
    )
    def test_load_app_error(self, name):
        parser = inspect_app.make_parser()
        args = Namespace(
            app_module='{}:{}'.format(_MODULE, name), route_only=False, verbose=False
        )
        with pytest.raises(SystemExit):
>           inspect_app.load_app(parser, args)

tests/test_cmd_inspect_app.py:134: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7fe99be47400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
________________ TestLoadApp.test_load_app_error[DummyResource] ________________

self = <test_cmd_inspect_app.TestLoadApp object at 0x7fe8642c6d10>
name = 'DummyResource'

    @pytest.mark.parametrize(
        'name',
        (
            'foo',  # not exists
            '_MODULE',  # not callable and not app
            'DummyResource',  # callable and not app
        ),
    )
    def test_load_app_error(self, name):
        parser = inspect_app.make_parser()
        args = Namespace(
            app_module='{}:{}'.format(_MODULE, name), route_only=False, verbose=False
        )
        with pytest.raises(SystemExit):
>           inspect_app.load_app(parser, args)

tests/test_cmd_inspect_app.py:134: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/cmd/inspect_app.py:70: in load_app
    app = getattr(importlib.import_module(module), instance)
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'tests.test_cmd_inspect_app'
import_ = <function _gcd_import at 0x7fe99be47400>

>   ???
E   ModuleNotFoundError: No module named 'tests.test_cmd_inspect_app'

<frozen importlib._bootstrap>:1004: ModuleNotFoundError
_________________ TestCythonized.test_imported_from_c_modules __________________

self = <test_cython.TestCythonized object at 0x7fe8584bcd30>

    @pytest.mark.skipif(not has_cython, reason='Cython not installed')
    def test_imported_from_c_modules(self):
>       assert 'falcon/app.py' not in str(falcon.app)
E       assert 'falcon/app.py' not in "<module 'fa...con/app.py'>"
E         'falcon/app.py' is contained here:
E           ts/falcon/falcon/app.py'>

tests/test_cython.py:14: AssertionError
_________________ TestCythonized.test_stream_has_private_read __________________

self = <test_cython.TestCythonized object at 0x7fe8584bceb0>

    def test_stream_has_private_read(self):
        stream = falcon.util.BufferedReader(io.BytesIO().read, 8)
    
        if has_cython and falcon.util.IS_64_BITS:
>           assert not hasattr(stream, '_read')
E           AssertionError: assert not True
E            +  where True = hasattr(<falcon.util.reader.BufferedReader object at 0x7fe99674a380>, '_read')

tests/test_cython.py:20: AssertionError
__________________________________ test_hooks __________________________________

client = <falcon.testing.client.TestClient object at 0x7fe9967b93c0>

    @pytest.mark.skipif(not pyximport, reason='Cython not installed')
    def test_hooks(client):
        with disable_asgi_non_coroutine_wrapping():
            if CYTHON_COROUTINE_HINT:
>               client.app.add_route('/', _cythonized.TestResourceWithHooksNoHint())

tests/asgi/test_cythonized_asgi.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe9969ea0a0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996cc5d80>, 'CHECK...5d80>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996cc5d80>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestResourceWithHooksNoHint.on_get of <asgi._cythonized.TestResourceWithHooksNoHint object at 0x7fe9967bab30>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________________________ test_jsonchema_validator ___________________________

client = <falcon.testing.client.TestClient object at 0x7fe8441f0c10>

    @pytest.mark.skipif(not pyximport, reason='Cython not installed')
    def test_jsonchema_validator(client):
        with disable_asgi_non_coroutine_wrapping():
            if CYTHON_COROUTINE_HINT:
>               client.app.add_route('/', _cythonized.TestResourceWithValidationNoHint())

tests/asgi/test_cythonized_asgi.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996b9f060>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9969c31c0>, 'CHECK...31c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9969c31c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestResourceWithValidationNoHint.on_get of <asgi._cythonized.TestResourceWithValidationNoHint object at 0x7fe8441f32b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ test_resource_with_uri_fields[asgi-resource1] _________________

client = <falcon.testing.client.TestClient object at 0x7fe9964b6200>
resource = <test_after_hooks.ClassResourceWithURIFieldsChild object at 0x7fe8644012a0>

    @pytest.mark.parametrize(
        'resource', [ClassResourceWithURIFields(), ClassResourceWithURIFieldsChild()]
    )
    def test_resource_with_uri_fields(client, resource):
>       client.app.add_route('/{field1}/{field2}', resource)

tests/test_after_hooks.py:255: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996b9de00>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9969c2560>, 'CHECK...2560>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9969c2560>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ClassResourceWithURIFieldsChild.on_get of <test_after_hooks.ClassResourceWithURIFieldsChild object at 0x7fe8644012a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ test_resource_with_uri_fields[asgi-resource0] _________________

client = <falcon.testing.client.TestClient object at 0x7fe996736560>
resource = <test_after_hooks.ClassResourceWithURIFields object at 0x7fe864401390>

    @pytest.mark.parametrize(
        'resource', [ClassResourceWithURIFields(), ClassResourceWithURIFieldsChild()]
    )
    def test_resource_with_uri_fields(client, resource):
>       client.app.add_route('/{field1}/{field2}', resource)

tests/test_after_hooks.py:255: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996be85f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9969fac20>, 'CHECK...ac20>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9969fac20>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ClassResourceWithURIFields.on_get of <test_after_hooks.ClassResourceWithURIFields object at 0x7fe864401390>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________________ test_wrapped_resource[asgi-resource1] _____________________

client = <falcon.testing.client.TestClient object at 0x7fe997a4efb0>
resource = <test_after_hooks.WrappedClassResourceChild object at 0x7fe8644013c0>

    @pytest.mark.parametrize(
        'resource', [WrappedClassResource(), WrappedClassResourceChild()]
    )
    def test_wrapped_resource(client, resource):
>       client.app.add_route('/wrapped', resource)

tests/test_after_hooks.py:293: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996b275a0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9969fa560>, 'CHECK...a560>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9969fa560>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method WrappedClassResource.on_get of <test_after_hooks.WrappedClassResourceChild object at 0x7fe8644013c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________ test_wrapped_resource_with_hooks_aware_of_resource[asgi] ___________

client = <falcon.testing.client.TestClient object at 0x7fe997a7b9d0>
wrapped_resource_aware = <test_after_hooks.ClassResourceWithAwareHooks object at 0x7fe997a7a0b0>

    def test_wrapped_resource_with_hooks_aware_of_resource(client, wrapped_resource_aware):
>       client.app.add_route('/wrapped_aware', wrapped_resource_aware)

tests/test_after_hooks.py:319: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996b25850>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9969f9900>, 'CHECK...9900>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9969f9900>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ClassResourceWithAwareHooks.on_get of <test_after_hooks.ClassResourceWithAwareHooks object at 0x7fe997a7a0b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________________ test_wrapped_resource[asgi-resource0] _____________________

client = <falcon.testing.client.TestClient object at 0x7fe997b1e530>
resource = <test_after_hooks.WrappedClassResource object at 0x7fe864400ac0>

    @pytest.mark.parametrize(
        'resource', [WrappedClassResource(), WrappedClassResourceChild()]
    )
    def test_wrapped_resource(client, resource):
>       client.app.add_route('/wrapped', resource)

tests/test_after_hooks.py:293: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996b12b20>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9969fa950>, 'CHECK...a950>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9969fa950>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method WrappedClassResource.on_get of <test_after_hooks.WrappedClassResource object at 0x7fe864400ac0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ TestErrorHandling.test_http_status_raised_from_error_handler[asgi] ______

self = <test_middleware.TestErrorHandling object at 0x7fe857e7dae0>, asgi = True

    def test_http_status_raised_from_error_handler(self, asgi):
        mw = CaptureResponseMiddleware()
>       app = create_app(asgi, middleware=mw)

tests/test_middleware.py:894: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.CaptureResponseMiddleware object at 0x7fe84495b280>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method CaptureResponseMiddleware.process_response of <test_middleware.CaptureResponseMiddleware object at 0x7fe84495b280>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
__ TestErrorHandling.test_error_composed_before_resp_middleware_called[asgi] ___

self = <test_middleware.TestErrorHandling object at 0x7fe857e7da80>, asgi = True

    def test_error_composed_before_resp_middleware_called(self, asgi):
        mw = CaptureResponseMiddleware()
>       app = create_app(asgi, middleware=mw)

tests/test_middleware.py:874: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.CaptureResponseMiddleware object at 0x7fe9964a91e0>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method CaptureResponseMiddleware.process_response of <test_middleware.CaptureResponseMiddleware object at 0x7fe9964a91e0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
______ TestResourceMiddleware.test_can_access_resource_params[asgi-False] ______

self = <test_middleware.TestResourceMiddleware object at 0x7fe857e7d0c0>
asgi = True, independent_middleware = False

    @pytest.mark.parametrize('independent_middleware', [True, False])
    def test_can_access_resource_params(self, asgi, independent_middleware):
        """Test that params can be accessed from within process_resource"""
        global context
    
        class Resource:
            def on_get(self, req, resp, **params):
                resp.text = json.dumps(params)
    
>       app = create_app(
            asgi,
            middleware=AccessParamsMiddleware(),
            independent_middleware=independent_middleware,
        )

tests/test_middleware.py:844: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.AccessParamsMiddleware object at 0x7fe996509510>]
independent_middleware = False, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method AccessParamsMiddleware.process_resource of <test_middleware.AccessParamsMiddleware object at 0x7fe996509510>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
______ TestResourceMiddleware.test_can_access_resource_params[asgi-True] _______

self = <test_middleware.TestResourceMiddleware object at 0x7fe857e7cfd0>
asgi = True, independent_middleware = True

    @pytest.mark.parametrize('independent_middleware', [True, False])
    def test_can_access_resource_params(self, asgi, independent_middleware):
        """Test that params can be accessed from within process_resource"""
        global context
    
        class Resource:
            def on_get(self, req, resp, **params):
                resp.text = json.dumps(params)
    
>       app = create_app(
            asgi,
            middleware=AccessParamsMiddleware(),
            independent_middleware=independent_middleware,
        )

tests/test_middleware.py:844: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.AccessParamsMiddleware object at 0x7fe996e00760>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method AccessParamsMiddleware.process_resource of <test_middleware.AccessParamsMiddleware object at 0x7fe996e00760>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
____ TestEmptySignatureMiddleware.test_dont_need_params_in_signature[asgi] _____

self = <test_middleware.TestEmptySignatureMiddleware object at 0x7fe857e7d510>
asgi = True

    def test_dont_need_params_in_signature(self, asgi):
        """
        Verify that we don't need parameters in the process_* signatures (for
        side-effect-only middlewares, mostly). Makes no difference on py27
        but does affect py36.
    
        https://github.com/falconry/falcon/issues/1254
        """
>       create_app(asgi, middleware=EmptySignatureMiddleware())

tests/test_middleware.py:868: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.EmptySignatureMiddleware object at 0x7fe996ea8d90>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method EmptySignatureMiddleware.process_request of <test_middleware.EmptySignatureMiddleware object at 0x7fe996ea8d90>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
__________ TestRequestTimeMiddleware.test_skip_process_resource[asgi] __________

self = <test_middleware.TestRequestTimeMiddleware object at 0x7fe857e552a0>
asgi = True

    def test_skip_process_resource(self, asgi):
        global context
        app = create_app(asgi, middleware=[RequestTimeMiddleware()])
    
>       app.add_route('/', MiddlewareClassResource())

tests/test_middleware.py:183: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996946f80>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe844052c20>, 'CHECK...2c20>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe844052c20>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method MiddlewareClassResource.on_get of <test_middleware.MiddlewareClassResource object at 0x7fe996967cd0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________ TestRequestTimeMiddleware.test_log_get_request[asgi-True] ___________

self = <test_middleware.TestRequestTimeMiddleware object at 0x7fe857e55b40>
independent_middleware = True, asgi = True

    @pytest.mark.parametrize('independent_middleware', [True, False])
    def test_log_get_request(self, independent_middleware, asgi):
        """Test that Log middleware is executed"""
        global context
        app = create_app(
            asgi,
            middleware=[RequestTimeMiddleware()],
            independent_middleware=independent_middleware,
        )
    
>       app.add_route(TEST_ROUTE, MiddlewareClassResource())

tests/test_middleware.py:237: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996d65fc0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9969f9480>, 'CHECK...9480>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9969f9480>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method MiddlewareClassResource.on_get of <test_middleware.MiddlewareClassResource object at 0x7fe9964a9990>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__ TestRequestTimeMiddleware.test_response_middleware_raises_exception[asgi] ___

self = <test_middleware.TestRequestTimeMiddleware object at 0x7fe857e55540>
asgi = True

    def test_response_middleware_raises_exception(self, asgi):
        """Test that error in response middleware is propagated up"""
    
        class RaiseErrorMiddleware:
            def process_response(self, req, resp, resource):
                raise Exception('Always fail')
    
>       app = create_app(asgi, middleware=[RaiseErrorMiddleware()])

tests/test_middleware.py:219: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.TestRequestTimeMiddleware.test_response_middleware_raises_exception.<locals>.RaiseErrorMiddleware object at 0x7fe996770100>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method TestRequestTimeMiddleware.test_response_middleware_raises_exception.<locals>.RaiseErrorMiddleware.process_response of <test_middleware.TestRequestTimeMiddleware.test_response_middleware_raises_exception.<locals>.RaiseErrorMiddleware object at 0x7fe996770100>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
__________ TestRequestTimeMiddleware.test_log_get_request[asgi-False] __________

self = <test_middleware.TestRequestTimeMiddleware object at 0x7fe857e55c00>
independent_middleware = False, asgi = True

    @pytest.mark.parametrize('independent_middleware', [True, False])
    def test_log_get_request(self, independent_middleware, asgi):
        """Test that Log middleware is executed"""
        global context
        app = create_app(
            asgi,
            middleware=[RequestTimeMiddleware()],
            independent_middleware=independent_middleware,
        )
    
>       app.add_route(TEST_ROUTE, MiddlewareClassResource())

tests/test_middleware.py:237: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996d65a10>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996b39bd0>, 'CHECK...9bd0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996b39bd0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method MiddlewareClassResource.on_get of <test_middleware.MiddlewareClassResource object at 0x7fe9967728f0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________ TestShortCircuiting.test_process_request_cached[asgi-False] __________

self = <test_middleware.TestShortCircuiting object at 0x7fe857e7e4a0>
asgi = True, independent_middleware = False

    @pytest.mark.parametrize('independent_middleware', [True, False])
    def test_process_request_cached(self, asgi, independent_middleware):
>       response = self._make_client(asgi, independent_middleware).simulate_get(
            '/cached'
        )

tests/test_middleware.py:947: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_middleware.py:927: in _make_client
    app = create_app(
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.RequestTimeMiddleware object at 0x7fe996968910>, <test_middleware.ResponseCacheMiddlware object at 0x7fe996969f00>, <test_middleware.TransactionIdMiddleware object at 0x7fe99696ae30>]
independent_middleware = False, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ResponseCacheMiddlware.process_request of <test_middleware.ResponseCacheMiddlware object at 0x7fe996969f00>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
__________ TestShortCircuiting.test_process_request_cached[asgi-True] __________

self = <test_middleware.TestShortCircuiting object at 0x7fe857e7e3e0>
asgi = True, independent_middleware = True

    @pytest.mark.parametrize('independent_middleware', [True, False])
    def test_process_request_cached(self, asgi, independent_middleware):
>       response = self._make_client(asgi, independent_middleware).simulate_get(
            '/cached'
        )

tests/test_middleware.py:947: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_middleware.py:927: in _make_client
    app = create_app(
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.RequestTimeMiddleware object at 0x7fe996e01450>, <test_middleware.ResponseCacheMiddlware object at 0x7fe996e01000>, <test_middleware.TransactionIdMiddleware object at 0x7fe996e00160>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ResponseCacheMiddlware.process_request of <test_middleware.ResponseCacheMiddlware object at 0x7fe996e01000>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_________ TestShortCircuiting.test_process_resource_cached[asgi-True] __________

self = <test_middleware.TestShortCircuiting object at 0x7fe857e7e7d0>
asgi = True, independent_middleware = True

    @pytest.mark.parametrize('independent_middleware', [True, False])
    def test_process_resource_cached(self, asgi, independent_middleware):
>       response = self._make_client(asgi, independent_middleware).simulate_get(
            '/cached/resource'
        )

tests/test_middleware.py:970: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_middleware.py:927: in _make_client
    app = create_app(
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.RequestTimeMiddleware object at 0x7fe996d70610>, <test_middleware.ResponseCacheMiddlware object at 0x7fe996d739a0>, <test_middleware.TransactionIdMiddleware object at 0x7fe996d712a0>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ResponseCacheMiddlware.process_request of <test_middleware.ResponseCacheMiddlware object at 0x7fe996d739a0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
__________ TestShortCircuiting.test_process_request_not_cached[asgi] ___________

self = <test_middleware.TestShortCircuiting object at 0x7fe857e7ddb0>
asgi = True

    def test_process_request_not_cached(self, asgi):
>       response = self._make_client(asgi).simulate_get('/')

tests/test_middleware.py:937: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_middleware.py:927: in _make_client
    app = create_app(
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.RequestTimeMiddleware object at 0x7fe996909210>, <test_middleware.ResponseCacheMiddlware object at 0x7fe99690b370>, <test_middleware.TransactionIdMiddleware object at 0x7fe996908400>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ResponseCacheMiddlware.process_request of <test_middleware.ResponseCacheMiddlware object at 0x7fe99690b370>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_________ TestShortCircuiting.test_process_resource_cached[asgi-False] _________

self = <test_middleware.TestShortCircuiting object at 0x7fe857e7e800>
asgi = True, independent_middleware = False

    @pytest.mark.parametrize('independent_middleware', [True, False])
    def test_process_resource_cached(self, asgi, independent_middleware):
>       response = self._make_client(asgi, independent_middleware).simulate_get(
            '/cached/resource'
        )

tests/test_middleware.py:970: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_middleware.py:927: in _make_client
    app = create_app(
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.RequestTimeMiddleware object at 0x7fe997b1c580>, <test_middleware.ResponseCacheMiddlware object at 0x7fe997b1cc70>, <test_middleware.TransactionIdMiddleware object at 0x7fe997b1c6d0>]
independent_middleware = False, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ResponseCacheMiddlware.process_request of <test_middleware.ResponseCacheMiddlware object at 0x7fe997b1cc70>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
____ TestTransactionIdMiddleware.test_generate_trans_id_with_request[asgi] _____

self = <test_middleware.TestTransactionIdMiddleware object at 0x7fe857e56050>
asgi = True

    def test_generate_trans_id_with_request(self, asgi):
        """Test that TransactionIdmiddleware is executed"""
        global context
    
        middleware = (
            TransactionIdMiddlewareAsync() if asgi else TransactionIdMiddleware()
        )
        app = create_app(asgi, middleware=middleware)
    
>       app.add_route(TEST_ROUTE, MiddlewareClassResource())

tests/test_middleware.py:267: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe9966e5230>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9969fa7a0>, 'CHECK...a7a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9969fa7a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method MiddlewareClassResource.on_get of <test_middleware.MiddlewareClassResource object at 0x7fe996ea9150>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestRemoveBasePathMiddleware.test_base_path_is_removed_before_routing[asgi] __

self = <test_middleware.TestRemoveBasePathMiddleware object at 0x7fe857e7c8b0>
asgi = True

    def test_base_path_is_removed_before_routing(self, asgi):
        """Test that RemoveBasePathMiddleware is executed before routing"""
>       app = create_app(asgi, middleware=RemoveBasePathMiddleware())

tests/test_middleware.py:821: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.RemoveBasePathMiddleware object at 0x7fe996eab580>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method RemoveBasePathMiddleware.process_request of <test_middleware.RemoveBasePathMiddleware object at 0x7fe996eab580>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_ TestSeveralMiddlewares.test_order_independent_mw_executed_when_exception_in_req[asgi] _

self = <test_middleware.TestSeveralMiddlewares object at 0x7fe857e57fa0>
asgi = True

    def test_order_independent_mw_executed_when_exception_in_req(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        class RaiseErrorMiddleware:
            def process_request(self, req, resp):
                raise Exception('Always fail')
    
        class RaiseErrorMiddlewareAsync:
            async def process_request(self, req, resp):
                raise Exception('Always fail')
    
        rem = RaiseErrorMiddlewareAsync() if asgi else RaiseErrorMiddleware()
    
>       app = create_app(
            asgi,
            independent_middleware=True,
            middleware=[ExecutedFirstMiddleware(), rem, ExecutedLastMiddleware()],
        )

tests/test_middleware.py:713: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.ExecutedFirstMiddleware object at 0x7fe996748550>, <test_middleware.TestSeveralMiddlewares.test_orde...RaiseErrorMiddlewareAsync object at 0x7fe996749e70>, <test_middleware.ExecutedLastMiddleware object at 0x7fe99674be50>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ExecutedFirstMiddleware.process_request of <test_middleware.ExecutedFirstMiddleware object at 0x7fe996748550>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_ TestSeveralMiddlewares.test_legacy_middleware_called_with_correct_args[asgi] _

self = <test_middleware.TestSeveralMiddlewares object at 0x7fe857e567d0>
asgi = True

    def test_legacy_middleware_called_with_correct_args(self, asgi):
        global context
>       app = create_app(asgi, middleware=[ExecutedFirstMiddleware()])

tests/test_middleware.py:326: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.ExecutedFirstMiddleware object at 0x7fe996e8ba90>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ExecutedFirstMiddleware.process_request of <test_middleware.ExecutedFirstMiddleware object at 0x7fe996e8ba90>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
__ TestSeveralMiddlewares.test_outer_mw_with_ex_handler_throw_exception[asgi] __

self = <test_middleware.TestSeveralMiddlewares object at 0x7fe857e575e0>
asgi = True

    def test_outer_mw_with_ex_handler_throw_exception(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        class RaiseErrorMiddleware:
            def process_request(self, req, resp):
                raise Exception('Always fail')
    
>       app = create_app(
            asgi,
            middleware=[
                TransactionIdMiddleware(),
                RaiseErrorMiddleware(),
                RequestTimeMiddleware(),
            ],
        )

tests/test_middleware.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.TransactionIdMiddleware object at 0x7fe996e03ee0>, <test_middleware.TestSeveralMiddlewares.test_oute...cals>.RaiseErrorMiddleware object at 0x7fe996e019c0>, <test_middleware.RequestTimeMiddleware object at 0x7fe996e01540>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method TransactionIdMiddleware.process_request of <test_middleware.TransactionIdMiddleware object at 0x7fe996e03ee0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
__ TestSeveralMiddlewares.test_order_mw_executed_when_exception_in_resp[asgi] __

self = <test_middleware.TestSeveralMiddlewares object at 0x7fe857e57850>
asgi = True

    def test_order_mw_executed_when_exception_in_resp(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        class RaiseErrorMiddleware:
            def process_response(self, req, resp, resource):
                raise Exception('Always fail')
    
>       app = create_app(
            asgi,
            middleware=[
                ExecutedFirstMiddleware(),
                RaiseErrorMiddleware(),
                ExecutedLastMiddleware(),
            ],
        )

tests/test_middleware.py:594: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.ExecutedFirstMiddleware object at 0x7fe8440f1ea0>, <test_middleware.TestSeveralMiddlewares.test_orde...als>.RaiseErrorMiddleware object at 0x7fe8440f00d0>, <test_middleware.ExecutedLastMiddleware object at 0x7fe8440e2b30>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ExecutedFirstMiddleware.process_request of <test_middleware.ExecutedFirstMiddleware object at 0x7fe8440f1ea0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_ TestSeveralMiddlewares.test_inner_mw_throw_exception_while_processing_resp[asgi] _

self = <test_middleware.TestSeveralMiddlewares object at 0x7fe857e57100>
asgi = True

    def test_inner_mw_throw_exception_while_processing_resp(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        class MyException(Exception):
            pass
    
        class RaiseErrorMiddleware:
            def process_response(self, req, resp, resource, req_succeeded):
                raise MyException('Always fail')
    
>       app = create_app(
            asgi,
            middleware=[
                TransactionIdMiddleware(),
                RequestTimeMiddleware(),
                RaiseErrorMiddleware(),
            ],
        )

tests/test_middleware.py:484: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.TransactionIdMiddleware object at 0x7fe996d71540>, <test_middleware.RequestTimeMiddleware object at ...iddlewares.test_inner_mw_throw_exception_while_processing_resp.<locals>.RaiseErrorMiddleware object at 0x7fe996d71f60>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method TransactionIdMiddleware.process_request of <test_middleware.TransactionIdMiddleware object at 0x7fe996d71540>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_ TestSeveralMiddlewares.test_order_independent_mw_executed_when_exception_in_rsrc[asgi] _

self = <test_middleware.TestSeveralMiddlewares object at 0x7fe857e7c3d0>
asgi = True

    def test_order_independent_mw_executed_when_exception_in_rsrc(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        class RaiseErrorMiddleware:
            def process_resource(self, req, resp, resource):
                raise Exception('Always fail')
    
        class RaiseErrorMiddlewareAsync:
            async def process_resource(self, req, resp, resource):
                raise Exception('Always fail')
    
        rem = RaiseErrorMiddlewareAsync() if asgi else RaiseErrorMiddleware()
    
>       app = create_app(
            asgi,
            independent_middleware=True,
            middleware=[ExecutedFirstMiddleware(), rem, ExecutedLastMiddleware()],
        )

tests/test_middleware.py:791: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.ExecutedFirstMiddleware object at 0x7fe9967730a0>, <test_middleware.TestSeveralMiddlewares.test_orde...RaiseErrorMiddlewareAsync object at 0x7fe996772e30>, <test_middleware.ExecutedLastMiddleware object at 0x7fe9967738b0>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ExecutedFirstMiddleware.process_request of <test_middleware.ExecutedFirstMiddleware object at 0x7fe9967730a0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
____ TestSeveralMiddlewares.test_multiple_response_mw_throw_exception[asgi] ____

self = <test_middleware.TestSeveralMiddlewares object at 0x7fe857e56c20>
asgi = True

    def test_multiple_response_mw_throw_exception(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        context['req_succeeded'] = []
    
        class RaiseStatusMiddleware:
            def process_response(self, req, resp, resource, req_succeeded):
                raise falcon.HTTPStatus(falcon.HTTP_201)
    
        class RaiseErrorMiddleware:
            def process_response(self, req, resp, resource, req_succeeded):
                raise falcon.HTTPError(falcon.HTTP_748)
    
        class ProcessResponseMiddleware:
            def process_response(self, req, resp, resource, req_succeeded):
                context['executed_methods'].append('process_response')
                context['req_succeeded'].append(req_succeeded)
    
>       app = create_app(
            asgi,
            middleware=[
                ProcessResponseMiddleware(),
                RaiseErrorMiddleware(),
                ProcessResponseMiddleware(),
                RaiseStatusMiddleware(),
                ProcessResponseMiddleware(),
            ],
        )

tests/test_middleware.py:406: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.TestSeveralMiddlewares.test_multiple_response_mw_throw_exception.<locals>.ProcessResponseMiddleware ...eralMiddlewares.test_multiple_response_mw_throw_exception.<locals>.ProcessResponseMiddleware object at 0x7fe996e89e70>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method TestSeveralMiddlewares.test_multiple_response_mw_throw_exception.<locals>.ProcessResponseMiddleware.process_response of <test_middleware.TestSeveralMiddlewares.test_multiple_response_mw_throw_exception.<locals>.ProcessResponseMiddleware object at 0x7fe996e89600>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
__________ TestSeveralMiddlewares.test_inner_mw_throw_exception[asgi] __________

self = <test_middleware.TestSeveralMiddlewares object at 0x7fe857e56e90>
asgi = True

    def test_inner_mw_throw_exception(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        class MyException(Exception):
            pass
    
        class RaiseErrorMiddleware:
            def process_request(self, req, resp):
                raise MyException('Always fail')
    
>       app = create_app(
            asgi,
            middleware=[
                TransactionIdMiddleware(),
                RequestTimeMiddleware(),
                RaiseErrorMiddleware(),
            ],
        )

tests/test_middleware.py:439: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.TransactionIdMiddleware object at 0x7fe996b7ee30>, <test_middleware.RequestTimeMiddleware object at ...iddleware.TestSeveralMiddlewares.test_inner_mw_throw_exception.<locals>.RaiseErrorMiddleware object at 0x7fe996b7d150>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method TransactionIdMiddleware.process_request of <test_middleware.TransactionIdMiddleware object at 0x7fe996b7ee30>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_ TestSeveralMiddlewares.test_order_independent_mw_executed_when_exception_in_resp[asgi] _

self = <test_middleware.TestSeveralMiddlewares object at 0x7fe857e57ac0>
asgi = True

    def test_order_independent_mw_executed_when_exception_in_resp(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        class RaiseErrorMiddleware:
            def process_response(self, req, resp, resource):
                raise Exception('Always fail')
    
>       app = create_app(
            asgi,
            independent_middleware=True,
            middleware=[
                ExecutedFirstMiddleware(),
                RaiseErrorMiddleware(),
                ExecutedLastMiddleware(),
            ],
        )

tests/test_middleware.py:632: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.ExecutedFirstMiddleware object at 0x7fe996cee9e0>, <test_middleware.TestSeveralMiddlewares.test_orde...als>.RaiseErrorMiddleware object at 0x7fe996cef0d0>, <test_middleware.ExecutedLastMiddleware object at 0x7fe996cef610>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ExecutedFirstMiddleware.process_request of <test_middleware.ExecutedFirstMiddleware object at 0x7fe996cee9e0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
___ TestSeveralMiddlewares.test_independent_middleware_execution_order[asgi] ___

self = <test_middleware.TestSeveralMiddlewares object at 0x7fe857e569e0>
asgi = True

    def test_independent_middleware_execution_order(self, asgi):
        global context
>       app = create_app(
            asgi,
            independent_middleware=True,
            middleware=[ExecutedFirstMiddleware(), ExecutedLastMiddleware()],
        )

tests/test_middleware.py:363: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.ExecutedFirstMiddleware object at 0x7fe9967b9cf0>, <test_middleware.ExecutedLastMiddleware object at 0x7fe9967ba170>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ExecutedFirstMiddleware.process_request of <test_middleware.ExecutedFirstMiddleware object at 0x7fe9967b9cf0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
__ TestSeveralMiddlewares.test_inner_mw_with_ex_handler_throw_exception[asgi] __

self = <test_middleware.TestSeveralMiddlewares object at 0x7fe857e57370>
asgi = True

    def test_inner_mw_with_ex_handler_throw_exception(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        class RaiseErrorMiddleware:
            def process_request(self, req, resp, resource):
                raise Exception('Always fail')
    
>       app = create_app(
            asgi,
            middleware=[
                TransactionIdMiddleware(),
                RequestTimeMiddleware(),
                RaiseErrorMiddleware(),
            ],
        )

tests/test_middleware.py:526: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.TransactionIdMiddleware object at 0x7fe99690bf40>, <test_middleware.RequestTimeMiddleware object at ...veralMiddlewares.test_inner_mw_with_ex_handler_throw_exception.<locals>.RaiseErrorMiddleware object at 0x7fe996908190>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method TransactionIdMiddleware.process_request of <test_middleware.TransactionIdMiddleware object at 0x7fe99690bf40>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
__ TestSeveralMiddlewares.test_order_mw_executed_when_exception_in_req[asgi] ___

self = <test_middleware.TestSeveralMiddlewares object at 0x7fe857e57d30>
asgi = True

    def test_order_mw_executed_when_exception_in_req(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        class RaiseErrorMiddleware:
            def process_request(self, req, resp):
                raise Exception('Always fail')
    
        class RaiseErrorMiddlewareAsync:
            async def process_request(self, req, resp):
                raise Exception('Always fail')
    
        rem = RaiseErrorMiddlewareAsync() if asgi else RaiseErrorMiddleware()
    
>       app = create_app(
            asgi, middleware=[ExecutedFirstMiddleware(), rem, ExecutedLastMiddleware()]
        )

tests/test_middleware.py:677: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.ExecutedFirstMiddleware object at 0x7fe996909450>, <test_middleware.TestSeveralMiddlewares.test_orde...RaiseErrorMiddlewareAsync object at 0x7fe996908dc0>, <test_middleware.ExecutedLastMiddleware object at 0x7fe996909060>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ExecutedFirstMiddleware.process_request of <test_middleware.ExecutedFirstMiddleware object at 0x7fe996909450>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_________ TestSeveralMiddlewares.test_middleware_execution_order[asgi] _________

self = <test_middleware.TestSeveralMiddlewares object at 0x7fe857e56a10>
asgi = True

    def test_middleware_execution_order(self, asgi):
        global context
>       app = create_app(
            asgi,
            independent_middleware=False,
            middleware=[ExecutedFirstMiddleware(), ExecutedLastMiddleware()],
        )

tests/test_middleware.py:337: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.ExecutedFirstMiddleware object at 0x7fe996d4a8f0>, <test_middleware.ExecutedLastMiddleware object at 0x7fe996d49f30>]
independent_middleware = False, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ExecutedFirstMiddleware.process_request of <test_middleware.ExecutedFirstMiddleware object at 0x7fe996d4a8f0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_ TestSeveralMiddlewares.test_generate_trans_id_and_time_with_request[asgi-False] _

self = <test_middleware.TestSeveralMiddlewares object at 0x7fe857e56830>
independent_middleware = False, asgi = True

    @pytest.mark.parametrize('independent_middleware', [True, False])
    def test_generate_trans_id_and_time_with_request(
        self, independent_middleware, asgi
    ):
        # NOTE(kgriffs): We test both so that we can cover the code paths
        # where only a single middleware method is implemented by a
        # component.
        creq = CaptureRequestMiddleware()
        cresp = CaptureResponseMiddleware()
    
        global context
>       app = create_app(
            asgi,
            independent_middleware=independent_middleware,
            # NOTE(kgriffs): Pass as a generic iterable to verify that works.
            middleware=iter(
                [
                    TransactionIdMiddleware(),
                    RequestTimeMiddleware(),
                ]
            ),
        )

tests/test_middleware.py:289: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.TransactionIdMiddleware object at 0x7fe84402de40>, <test_middleware.RequestTimeMiddleware object at 0x7fe84402d690>]
independent_middleware = False, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method TransactionIdMiddleware.process_request of <test_middleware.TransactionIdMiddleware object at 0x7fe84402de40>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_ TestSeveralMiddlewares.test_generate_trans_id_and_time_with_request[asgi-True] _

self = <test_middleware.TestSeveralMiddlewares object at 0x7fe857e56740>
independent_middleware = True, asgi = True

    @pytest.mark.parametrize('independent_middleware', [True, False])
    def test_generate_trans_id_and_time_with_request(
        self, independent_middleware, asgi
    ):
        # NOTE(kgriffs): We test both so that we can cover the code paths
        # where only a single middleware method is implemented by a
        # component.
        creq = CaptureRequestMiddleware()
        cresp = CaptureResponseMiddleware()
    
        global context
>       app = create_app(
            asgi,
            independent_middleware=independent_middleware,
            # NOTE(kgriffs): Pass as a generic iterable to verify that works.
            middleware=iter(
                [
                    TransactionIdMiddleware(),
                    RequestTimeMiddleware(),
                ]
            ),
        )

tests/test_middleware.py:289: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.TransactionIdMiddleware object at 0x7fe9969840d0>, <test_middleware.RequestTimeMiddleware object at 0x7fe996986530>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method TransactionIdMiddleware.process_request of <test_middleware.TransactionIdMiddleware object at 0x7fe9969840d0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
__ TestSeveralMiddlewares.test_order_mw_executed_when_exception_in_rsrc[asgi] __

self = <test_middleware.TestSeveralMiddlewares object at 0x7fe857e57fd0>
asgi = True

    def test_order_mw_executed_when_exception_in_rsrc(self, asgi):
        """Test that error in inner middleware leaves"""
        global context
    
        class RaiseErrorMiddleware:
            def process_resource(self, req, resp, resource):
                raise Exception('Always fail')
    
        class RaiseErrorMiddlewareAsync:
            # NOTE(kgriffs): The *_async postfix is not required in this
            #   case, but we include it to make sure it works as expected.
            async def process_resource_async(self, req, resp, resource):
                raise Exception('Always fail')
    
        rem = RaiseErrorMiddlewareAsync() if asgi else RaiseErrorMiddleware()
    
>       app = create_app(
            asgi, middleware=[ExecutedFirstMiddleware(), rem, ExecutedLastMiddleware()]
        )

tests/test_middleware.py:753: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.ExecutedFirstMiddleware object at 0x7fe996966ec0>, <test_middleware.TestSeveralMiddlewares.test_orde...RaiseErrorMiddlewareAsync object at 0x7fe996966260>, <test_middleware.ExecutedLastMiddleware object at 0x7fe996967640>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method ExecutedFirstMiddleware.process_request of <test_middleware.ExecutedFirstMiddleware object at 0x7fe996966ec0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_ TestCORSMiddlewareWithAnotherMiddleware.test_api_initialization_with_cors_enabled_and_middleware_param[asgi-mw3] _

self = <test_middleware.TestCORSMiddlewareWithAnotherMiddleware object at 0x7fe857e7f0a0>
mw = <list_iterator object at 0x7fe857e54670>, asgi = True

    @pytest.mark.parametrize(
        'mw',
        [
            CaptureResponseMiddleware(),
            [CaptureResponseMiddleware()],
            (CaptureResponseMiddleware(),),
            iter([CaptureResponseMiddleware()]),
        ],
    )
    def test_api_initialization_with_cors_enabled_and_middleware_param(self, mw, asgi):
        app = create_app(asgi, middleware=mw, cors_enable=True)
>       app.add_route('/', TestCorsResource())

tests/test_middleware.py:1007: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe9966e6340>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9965e69e0>, 'CHECK...69e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9965e69e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method TestCorsResource.on_get of <test_middleware.TestCorsResource object at 0x7fe996e8add0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestCORSMiddlewareWithAnotherMiddleware.test_api_initialization_with_cors_enabled_and_middleware_param[asgi-mw0] _

self = <test_middleware.TestCORSMiddlewareWithAnotherMiddleware object at 0x7fe857e7ee60>
mw = <test_middleware.CaptureResponseMiddleware object at 0x7fe857e54160>
asgi = True

    @pytest.mark.parametrize(
        'mw',
        [
            CaptureResponseMiddleware(),
            [CaptureResponseMiddleware()],
            (CaptureResponseMiddleware(),),
            iter([CaptureResponseMiddleware()]),
        ],
    )
    def test_api_initialization_with_cors_enabled_and_middleware_param(self, mw, asgi):
>       app = create_app(asgi, middleware=mw, cors_enable=True)

tests/test_middleware.py:1006: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.CaptureResponseMiddleware object at 0x7fe857e54160>, <falcon.middleware.CORSMiddleware object at 0x7fe996ec6950>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method CaptureResponseMiddleware.process_response of <test_middleware.CaptureResponseMiddleware object at 0x7fe857e54160>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_ TestCORSMiddlewareWithAnotherMiddleware.test_api_initialization_with_cors_enabled_and_middleware_param[asgi-mw2] _

self = <test_middleware.TestCORSMiddlewareWithAnotherMiddleware object at 0x7fe857e7f010>
mw = (<test_middleware.CaptureResponseMiddleware object at 0x7fe857e544c0>,)
asgi = True

    @pytest.mark.parametrize(
        'mw',
        [
            CaptureResponseMiddleware(),
            [CaptureResponseMiddleware()],
            (CaptureResponseMiddleware(),),
            iter([CaptureResponseMiddleware()]),
        ],
    )
    def test_api_initialization_with_cors_enabled_and_middleware_param(self, mw, asgi):
>       app = create_app(asgi, middleware=mw, cors_enable=True)

tests/test_middleware.py:1006: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.CaptureResponseMiddleware object at 0x7fe857e544c0>, <falcon.middleware.CORSMiddleware object at 0x7fe9964c8640>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method CaptureResponseMiddleware.process_response of <test_middleware.CaptureResponseMiddleware object at 0x7fe857e544c0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
_ TestCORSMiddlewareWithAnotherMiddleware.test_api_initialization_with_cors_enabled_and_middleware_param[asgi-mw1] _

self = <test_middleware.TestCORSMiddlewareWithAnotherMiddleware object at 0x7fe857e7ef80>
mw = [<test_middleware.CaptureResponseMiddleware object at 0x7fe857e543a0>]
asgi = True

    @pytest.mark.parametrize(
        'mw',
        [
            CaptureResponseMiddleware(),
            [CaptureResponseMiddleware()],
            (CaptureResponseMiddleware(),),
            iter([CaptureResponseMiddleware()]),
        ],
    )
    def test_api_initialization_with_cors_enabled_and_middleware_param(self, mw, asgi):
>       app = create_app(asgi, middleware=mw, cors_enable=True)

tests/test_middleware.py:1006: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_util.py:32: in create_app
    app = App(**app_kwargs)
falcon/asgi/app.py:272: in __init__
    super().__init__(
falcon/app.py:272: in __init__
    self.add_middleware(middleware)
falcon/app.py:471: in add_middleware
    self._middleware = self._prepare_middleware(
falcon/asgi/app.py:1035: in _prepare_middleware
    return prepare_middleware(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

middleware = [<test_middleware.CaptureResponseMiddleware object at 0x7fe857e543a0>, <falcon.middleware.CORSMiddleware object at 0x7fe996bc4c10>]
independent_middleware = True, asgi = True

    def prepare_middleware(
        middleware: Iterable, independent_middleware: bool = False, asgi: bool = False
    ) -> Tuple[tuple, tuple, tuple]:
        """Check middleware interfaces and prepare the methods for request handling.
    
        Note:
            This method is only applicable to WSGI apps.
    
        Arguments:
            middleware (iterable): An iterable of middleware objects.
    
        Keyword Args:
            independent_middleware (bool): ``True`` if the request and
                response middleware methods should be treated independently
                (default ``False``)
            asgi (bool): ``True`` if an ASGI app, ``False`` otherwise
                (default ``False``)
    
        Returns:
            tuple: A tuple of prepared middleware method tuples
        """
    
        # PERF(kgriffs): do getattr calls once, in advance, so we don't
        # have to do them every time in the request path.
        request_mw: List = []
        resource_mw: List = []
        response_mw: List = []
    
        for component in middleware:
            # NOTE(kgriffs): Middleware that supports both WSGI and ASGI can
            #   append an *_async postfix to the ASGI version of the method
            #   to distinguish the two. Otherwise, the prefix is unnecessary.
    
            if asgi:
                process_request = util.get_bound_method(
                    component, 'process_request_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_request')
                )
    
                process_resource = util.get_bound_method(
                    component, 'process_resource_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_resource')
                )
    
                process_response = util.get_bound_method(
                    component, 'process_response_async'
                ) or _wrap_non_coroutine_unsafe(
                    util.get_bound_method(component, 'process_response')
                )
    
                for m in (process_request, process_resource, process_response):
                    # NOTE(kgriffs): iscoroutinefunction() always returns False
                    #   for cythonized functions.
                    #
                    #   https://github.com/cython/cython/issues/2273
                    #   https://bugs.python.org/issue38225
                    #
                    if m and not iscoroutinefunction(m) and util.is_python_func(m):
                        msg = (
                            '{} must be implemented as an awaitable coroutine. If '
                            'you would like to retain compatibility '
                            'with WSGI apps, the coroutine versions of the '
                            'middleware methods may be implemented side-by-side '
                            'by applying an *_async postfix to the method names. '
                        )
>                       raise CompatibilityError(msg.format(m))
E                       falcon.errors.CompatibilityError: <bound method CaptureResponseMiddleware.process_response of <test_middleware.CaptureResponseMiddleware object at 0x7fe857e543a0>> must be implemented as an awaitable coroutine. If you would like to retain compatibility with WSGI apps, the coroutine versions of the middleware methods may be implemented side-by-side by applying an *_async postfix to the method names.

falcon/app_helpers.py:103: CompatibilityError
________________ TestHeaders.test_response_append_header[asgi] _________________

self = <test_headers.TestHeaders object at 0x7fe8582b46a0>
client = <falcon.testing.client.TestClient object at 0x7fe857a04370>

    def test_response_append_header(self, client):
>       client.app.add_route('/', AppendHeaderResource())

tests/test_headers.py:781: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996f20350>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9969f9120>, 'CHECK...9120>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9969f9120>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method AppendHeaderResource.on_get of <test_headers.AppendHeaderResource object at 0x7fe857a04130>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______________ TestHeaders.test_unicode_location_headers[asgi] ________________

self = <test_headers.TestHeaders object at 0x7fe8582739a0>
client = <falcon.testing.client.TestClient object at 0x7fe9964bd2d0>

    def test_unicode_location_headers(self, client):
>       client.app.add_route('/', LocationHeaderUnicodeResource())

tests/test_headers.py:686: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe857ca21f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996eb2c20>, 'CHECK...2c20>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996eb2c20>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method LocationHeaderUnicodeResource.on_get of <test_headers.LocationHeaderUnicodeResource object at 0x7fe9964bca60>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________ TestHeaders.test_no_content_length[asgi-204 No Content] ____________

self = <test_headers.TestHeaders object at 0x7fe858271690>
client = <falcon.testing.client.TestClient object at 0x7fe84402cee0>
status = '204 No Content'

    @pytest.mark.parametrize('status', (falcon.HTTP_204, falcon.HTTP_304))
    def test_no_content_length(self, client, status):
>       client.app.add_route('/xxx', testing.SimpleTestResource(status=status))

tests/test_headers.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996d2d070>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9965e5ab0>, 'CHECK...5ab0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9965e5ab0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fe84402db40>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_content_disposition_attachment_header[asgi-[f\xf2\xf3]@b\xe0r,b\xe4z.txt-attachment; filename=_fo_o___ba_r_ba_z.txt; filename*=UTF-8''%5Bf%C3%B2%C3%B3%5D%40b%C3%A0r%2Cb%C3%A4z.txt] _

self = <test_headers.TestHeaders object at 0x7fe858272f20>
client = <falcon.testing.client.TestClient object at 0x7fe996d85030>
filename = '[fòó]@bàr,bäz.txt'
expected = "attachment; filename=_fo_o___ba_r_ba_z.txt; filename*=UTF-8''%5Bf%C3%B2%C3%B3%5D%40b%C3%A0r%2Cb%C3%A4z.txt"

    @pytest.mark.parametrize(
        'filename,expected',
        [
            ('report.csv', 'attachment; filename="report.csv"'),
            ('Hello World.txt', 'attachment; filename="Hello World.txt"'),
            (
                'Bold Digit 𝟏.txt',
                'attachment; filename=Bold_Digit_1.txt; '
                "filename*=UTF-8''Bold%20Digit%20%F0%9D%9F%8F.txt",
            ),
            (
                'Ångström unit.txt',
                'attachment; filename=A_ngstro_m_unit.txt; '
                "filename*=UTF-8''%C3%85ngstr%C3%B6m%20unit.txt",
            ),
            ('one,two.txt', 'attachment; filename="one,two.txt"'),
            (
                '½,²⁄₂.txt',
                'attachment; filename=1_2_2_2.txt; '
                "filename*=UTF-8''%C2%BD%2C%C2%B2%E2%81%84%E2%82%82.txt",
            ),
            ('[foo] @ bar.txt', 'attachment; filename="[foo] @ bar.txt"'),
            (
                '[fòó]@bàr,bäz.txt',
                'attachment; filename=_fo_o___ba_r_ba_z.txt; '
                "filename*=UTF-8''%5Bf%C3%B2%C3%B3%5D%40b%C3%A0r%2Cb%C3%A4z.txt",
            ),
        ],
    )
    def test_content_disposition_attachment_header(self, client, filename, expected):
        resource = DownloadableResource(filename)
>       client.app.add_route('/', resource)

tests/test_headers.py:622: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996d64d60>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996cc4ca0>, 'CHECK...4ca0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996cc4ca0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method DownloadableResource.on_get of <test_headers.DownloadableResource object at 0x7fe996d87460>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_content_disposition_inline_header[asgi-Bold Digit \U0001d7cf.txt-inline; filename=Bold_Digit_1.txt; filename*=UTF-8''Bold%20Digit%20%F0%9D%9F%8F.txt] _

self = <test_headers.TestHeaders object at 0x7fe858273730>
client = <falcon.testing.client.TestClient object at 0x7fe997a572e0>
filename = 'Bold Digit 𝟏.txt'
expected = "inline; filename=Bold_Digit_1.txt; filename*=UTF-8''Bold%20Digit%20%F0%9D%9F%8F.txt"

    @pytest.mark.parametrize(
        'filename,expected',
        [
            ('report.csv', 'inline; filename="report.csv"'),
            ('Hello World.txt', 'inline; filename="Hello World.txt"'),
            (
                'Bold Digit 𝟏.txt',
                'inline; filename=Bold_Digit_1.txt; '
                "filename*=UTF-8''Bold%20Digit%20%F0%9D%9F%8F.txt",
            ),
        ],
    )
    def test_content_disposition_inline_header(self, client, filename, expected):
        resource = ViewableResource(filename)
>       client.app.add_route('/', resource)

tests/test_headers.py:642: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996ce8dd0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9965e60e0>, 'CHECK...60e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9965e60e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ViewableResource.on_get of <test_headers.ViewableResource object at 0x7fe997a541c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_content_disposition_attachment_header[asgi-one,two.txt-attachment; filename="one,two.txt"] _

self = <test_headers.TestHeaders object at 0x7fe858272d40>
client = <falcon.testing.client.TestClient object at 0x7fe99648c3d0>
filename = 'one,two.txt', expected = 'attachment; filename="one,two.txt"'

    @pytest.mark.parametrize(
        'filename,expected',
        [
            ('report.csv', 'attachment; filename="report.csv"'),
            ('Hello World.txt', 'attachment; filename="Hello World.txt"'),
            (
                'Bold Digit 𝟏.txt',
                'attachment; filename=Bold_Digit_1.txt; '
                "filename*=UTF-8''Bold%20Digit%20%F0%9D%9F%8F.txt",
            ),
            (
                'Ångström unit.txt',
                'attachment; filename=A_ngstro_m_unit.txt; '
                "filename*=UTF-8''%C3%85ngstr%C3%B6m%20unit.txt",
            ),
            ('one,two.txt', 'attachment; filename="one,two.txt"'),
            (
                '½,²⁄₂.txt',
                'attachment; filename=1_2_2_2.txt; '
                "filename*=UTF-8''%C2%BD%2C%C2%B2%E2%81%84%E2%82%82.txt",
            ),
            ('[foo] @ bar.txt', 'attachment; filename="[foo] @ bar.txt"'),
            (
                '[fòó]@bàr,bäz.txt',
                'attachment; filename=_fo_o___ba_r_ba_z.txt; '
                "filename*=UTF-8''%5Bf%C3%B2%C3%B3%5D%40b%C3%A0r%2Cb%C3%A4z.txt",
            ),
        ],
    )
    def test_content_disposition_attachment_header(self, client, filename, expected):
        resource = DownloadableResource(filename)
>       client.app.add_route('/', resource)

tests/test_headers.py:622: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996ce8eb0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9965e5cf0>, 'CHECK...5cf0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9965e5cf0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method DownloadableResource.on_get of <test_headers.DownloadableResource object at 0x7fe99648ceb0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___ TestHeaders.test_declared_content_length_overriden_by_body_length[asgi] ____

self = <test_headers.TestHeaders object at 0x7fe858270370>
client = <falcon.testing.client.TestClient object at 0x7fe996790e50>

    def test_declared_content_length_overriden_by_body_length(self, client):
        resource = ContentLengthHeaderResource(42, body=SAMPLE_BODY)
>       client.app.add_route('/', resource)

tests/test_headers.py:347: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996f21e00>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996d231c0>, 'CHECK...31c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996d231c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ContentLengthHeaderResource.on_get of <test_headers.ContentLengthHeaderResource object at 0x7fe996790670>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________________ TestHeaders.test_content_type_no_body[asgi] __________________

self = <test_headers.TestHeaders object at 0x7fe8582b54b0>
client = <falcon.testing.client.TestClient object at 0x7fe857848070>

    def test_content_type_no_body(self, client):
>       client.app.add_route('/', testing.SimpleTestResource())

tests/test_headers.py:832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996f22e30>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c85630>, 'CHECK...5630>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c85630>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fe857848820>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______________ TestHeaders.test_append_link_with_type_hint[asgi] _______________

self = <test_headers.TestHeaders object at 0x7fe8582b6da0>
client = <falcon.testing.client.TestClient object at 0x7fe857cce5f0>

    def test_append_link_with_type_hint(self, client):
        expected_value = (
            '</related/thing>; rel=alternate; type="video/mp4; codecs=avc1.640028"'
        )
    
        resource = LinkHeaderResource()
        resource.append_link(
            '/related/thing', 'alternate', type_hint='video/mp4; codecs=avc1.640028'
        )
    
>       self._check_link_header(client, resource, expected_value)

tests/test_headers.py:943: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1060: in _check_link_header
    self._check_header(client, resource, 'Link', expected_value)
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996ce8f90>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9965e7400>, 'CHECK...7400>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9965e7400>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method LinkHeaderResource.on_get of <test_headers.LinkHeaderResource object at 0x7fe857cce140>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_append_link_crossorigin[asgi-None-</related/thing>; rel=alternate] _

self = <test_headers.TestHeaders object at 0x7fe8582b72b0>
client = <falcon.testing.client.TestClient object at 0x7fe84402ea70>
crossorigin = None, expected_value = '</related/thing>; rel=alternate'

    @pytest.mark.parametrize(
        'crossorigin,expected_value',
        [
            (None, '</related/thing>; rel=alternate'),
            ('anonymous', '</related/thing>; rel=alternate; crossorigin'),
            ('Anonymous', '</related/thing>; rel=alternate; crossorigin'),
            ('AnOnYmOUs', '</related/thing>; rel=alternate; crossorigin'),
            (
                'Use-Credentials',
                '</related/thing>; rel=alternate; crossorigin="use-credentials"',
            ),
            (
                'use-credentials',
                '</related/thing>; rel=alternate; crossorigin="use-credentials"',
            ),
        ],
    )
    def test_append_link_crossorigin(self, client, crossorigin, expected_value):
        resource = LinkHeaderResource()
        resource.append_link('/related/thing', 'alternate', crossorigin=crossorigin)
    
>       self._check_link_header(client, resource, expected_value)

tests/test_headers.py:987: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1060: in _check_link_header
    self._check_header(client, resource, 'Link', expected_value)
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996d2f1b0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996d21870>, 'CHECK...1870>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996d21870>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method LinkHeaderResource.on_get of <test_headers.LinkHeaderResource object at 0x7fe84402fc10>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ TestHeaders.test_unicode_headers_contain_non_ascii[asgi-PATCH] ________

self = <test_headers.TestHeaders object at 0x7fe8582b4280>, method = 'PATCH'
client = <falcon.testing.client.TestClient object at 0x7fe996ceeb30>

    @pytest.mark.parametrize('method', ['CONNECT', 'PATCH', 'POST', 'PUT'])
    def test_unicode_headers_contain_non_ascii(self, method, client):
        app = client.app
>       app.add_route('/', UnicodeHeaderResource())

tests/test_headers.py:709: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996f22c00>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9965e4e50>, 'CHECK...500>>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9965e4e50>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method UnicodeHeaderResource.on_connect of <test_headers.UnicodeHeaderResource object at 0x7fe996cee500>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ TestHeaders.test_unicode_headers_contain_non_ascii[asgi-POST] _________

self = <test_headers.TestHeaders object at 0x7fe8582b4310>, method = 'POST'
client = <falcon.testing.client.TestClient object at 0x7fe9964b6f20>

    @pytest.mark.parametrize('method', ['CONNECT', 'PATCH', 'POST', 'PUT'])
    def test_unicode_headers_contain_non_ascii(self, method, client):
        app = client.app
>       app.add_route('/', UnicodeHeaderResource())

tests/test_headers.py:709: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996f238b0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996eb3ac0>, 'CHECK...b60>>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996eb3ac0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method UnicodeHeaderResource.on_connect of <test_headers.UnicodeHeaderResource object at 0x7fe9964b6b60>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_content_disposition_attachment_header[asgi-\xbd,\xb2\u2044\u2082.txt-attachment; filename=1_2_2_2.txt; filename*=UTF-8''%C2%BD%2C%C2%B2%E2%81%84%E2%82%82.txt] _

self = <test_headers.TestHeaders object at 0x7fe858272dd0>
client = <falcon.testing.client.TestClient object at 0x7fe8441ccf70>
filename = '½,²⁄₂.txt'
expected = "attachment; filename=1_2_2_2.txt; filename*=UTF-8''%C2%BD%2C%C2%B2%E2%81%84%E2%82%82.txt"

    @pytest.mark.parametrize(
        'filename,expected',
        [
            ('report.csv', 'attachment; filename="report.csv"'),
            ('Hello World.txt', 'attachment; filename="Hello World.txt"'),
            (
                'Bold Digit 𝟏.txt',
                'attachment; filename=Bold_Digit_1.txt; '
                "filename*=UTF-8''Bold%20Digit%20%F0%9D%9F%8F.txt",
            ),
            (
                'Ångström unit.txt',
                'attachment; filename=A_ngstro_m_unit.txt; '
                "filename*=UTF-8''%C3%85ngstr%C3%B6m%20unit.txt",
            ),
            ('one,two.txt', 'attachment; filename="one,two.txt"'),
            (
                '½,²⁄₂.txt',
                'attachment; filename=1_2_2_2.txt; '
                "filename*=UTF-8''%C2%BD%2C%C2%B2%E2%81%84%E2%82%82.txt",
            ),
            ('[foo] @ bar.txt', 'attachment; filename="[foo] @ bar.txt"'),
            (
                '[fòó]@bàr,bäz.txt',
                'attachment; filename=_fo_o___ba_r_ba_z.txt; '
                "filename*=UTF-8''%5Bf%C3%B2%C3%B3%5D%40b%C3%A0r%2Cb%C3%A4z.txt",
            ),
        ],
    )
    def test_content_disposition_attachment_header(self, client, filename, expected):
        resource = DownloadableResource(filename)
>       client.app.add_route('/', resource)

tests/test_headers.py:622: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996f21690>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c849d0>, 'CHECK...49d0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c849d0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method DownloadableResource.on_get of <test_headers.DownloadableResource object at 0x7fe8441cd6f0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_append_link_crossorigin[asgi-Anonymous-</related/thing>; rel=alternate; crossorigin] _

self = <test_headers.TestHeaders object at 0x7fe8582b6b60>
client = <falcon.testing.client.TestClient object at 0x7fe996b7dea0>
crossorigin = 'Anonymous'
expected_value = '</related/thing>; rel=alternate; crossorigin'

    @pytest.mark.parametrize(
        'crossorigin,expected_value',
        [
            (None, '</related/thing>; rel=alternate'),
            ('anonymous', '</related/thing>; rel=alternate; crossorigin'),
            ('Anonymous', '</related/thing>; rel=alternate; crossorigin'),
            ('AnOnYmOUs', '</related/thing>; rel=alternate; crossorigin'),
            (
                'Use-Credentials',
                '</related/thing>; rel=alternate; crossorigin="use-credentials"',
            ),
            (
                'use-credentials',
                '</related/thing>; rel=alternate; crossorigin="use-credentials"',
            ),
        ],
    )
    def test_append_link_crossorigin(self, client, crossorigin, expected_value):
        resource = LinkHeaderResource()
        resource.append_link('/related/thing', 'alternate', crossorigin=crossorigin)
    
>       self._check_link_header(client, resource, expected_value)

tests/test_headers.py:987: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1060: in _check_link_header
    self._check_header(client, resource, 'Link', expected_value)
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996e20cf0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c85e10>, 'CHECK...5e10>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c85e10>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method LinkHeaderResource.on_get of <test_headers.LinkHeaderResource object at 0x7fe996b7cc40>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____ TestHeaders.test_override_default_media_type_missing_encoding[True] ______

self = <test_headers.TestHeaders object at 0x7fe8582727a0>, asgi = True
client = <falcon.testing.client.TestClient object at 0x7fe996639b40>

    @pytest.mark.parametrize('asgi', [True, False])
    def test_override_default_media_type_missing_encoding(self, asgi, client):
        body = '{"msg": "Hello Unicode! \U0001F638"}'
    
        client.app = create_app(asgi=asgi, media_type='application/json')
>       client.app.add_route('/', testing.SimpleTestResource(body=body))

tests/test_headers.py:520: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996fc95b0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c86200>, 'CHECK...6200>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c86200>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fe99663ad70>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_override_default_media_type[text/plain; charset=UTF-8-Hello Unicode! \U0001f638-True] _

self = <test_headers.TestHeaders object at 0x7fe8582724d0>, asgi = True
client = <falcon.testing.client.TestClient object at 0x7fe9964bd8a0>
content_type = 'text/plain; charset=UTF-8', body = 'Hello Unicode! 😸'

    @pytest.mark.parametrize('asgi', [True, False])
    @pytest.mark.parametrize(
        'content_type,body',
        [
            ('text/plain; charset=UTF-8', 'Hello Unicode! \U0001F638'),
            # NOTE(kgriffs): This only works because the client defaults to
            # ISO-8859-1 IFF the media type is 'text'.
            ('text/plain', 'Hello ISO-8859-1!'),
        ],
    )
    def test_override_default_media_type(self, asgi, client, content_type, body):
        client.app = create_app(asgi=asgi, media_type=content_type)
>       client.app.add_route('/', testing.SimpleTestResource(body=body))

tests/test_headers.py:509: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996fca180>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c84af0>, 'CHECK...4af0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c84af0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fe9964bee30>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ TestHeaders.test_headers_with_custom_class_not_callable[asgi] _________

self = <test_headers.TestHeaders object at 0x7fe8582f44f0>
client = <falcon.testing.client.TestClient object at 0x7fe996470c70>

    def test_headers_with_custom_class_not_callable(self, client):
>       client.app.add_route('/', CustomHeadersResource())

tests/test_headers.py:1031: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996fca3b0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996cc7010>, 'CHECK...7010>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996cc7010>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CustomHeadersResource.on_get of <test_headers.CustomHeadersResource object at 0x7fe996473580>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ TestHeaders.test_append_link_single[asgi] ___________________

self = <test_headers.TestHeaders object at 0x7fe8582b5ea0>
client = <falcon.testing.client.TestClient object at 0x7fe8579cb640>

    def test_append_link_single(self, client):
        expected_value = '</things/2842>; rel=next'
    
        resource = LinkHeaderResource()
        resource.append_link('/things/2842', 'next')
    
>       self._check_link_header(client, resource, expected_value)

tests/test_headers.py:858: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1060: in _check_link_header
    self._check_header(client, resource, 'Link', expected_value)
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996fc8900>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9965e4e50>, 'CHECK...4e50>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9965e4e50>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method LinkHeaderResource.on_get of <test_headers.LinkHeaderResource object at 0x7fe8579c9600>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ TestHeaders.test_request_latin1_headers[asgi] _________________

self = <test_headers.TestHeaders object at 0x7fe8582734c0>
client = <falcon.testing.client.TestClient object at 0x7fe996b7de40>

    def test_request_latin1_headers(self, client):
>       client.app.add_route('/headers', HeadersDebugResource())

tests/test_headers.py:649: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996fc9930>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9965e7400>, 'CHECK...7400>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9965e7400>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method HeadersDebugResource.on_get of <test_headers.HeadersDebugResource object at 0x7fe996b7d180>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________ TestHeaders.test_vary_header[asgi-vary0-accept-encoding] ___________

self = <test_headers.TestHeaders object at 0x7fe8582b5600>
client = <falcon.testing.client.TestClient object at 0x7fe9967a86d0>
vary = ['accept-encoding'], expected_value = 'accept-encoding'

    @pytest.mark.parametrize(
        'vary,expected_value',
        [
            (['accept-encoding'], 'accept-encoding'),
            (('accept-encoding', 'x-auth-token'), 'accept-encoding, x-auth-token'),
        ],
    )
    def test_vary_header(self, client, vary, expected_value):
        resource = VaryHeaderResource(vary)
>       self._check_header(client, resource, 'Vary', expected_value)

tests/test_headers.py:829: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996fcbbc0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c87130>, 'CHECK...7130>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c87130>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method VaryHeaderResource.on_get of <test_headers.VaryHeaderResource object at 0x7fe9964d3dc0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ TestHeaders.test_append_link_with_hreflang_multi[asgi] ____________

self = <test_headers.TestHeaders object at 0x7fe8582b6b30>
client = <falcon.testing.client.TestClient object at 0x7fe8441c8c40>

    def test_append_link_with_hreflang_multi(self, client):
        expected_value = '</related/thing>; rel=about; hreflang=en-GB; hreflang=de'
    
        resource = LinkHeaderResource()
        resource.append_link('/related/thing', 'about', hreflang=('en-GB', 'de'))
    
>       self._check_link_header(client, resource, expected_value)

tests/test_headers.py:931: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1060: in _check_link_header
    self._check_header(client, resource, 'Link', expected_value)
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996d2f4c0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c87640>, 'CHECK...7640>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c87640>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method LinkHeaderResource.on_get of <test_headers.LinkHeaderResource object at 0x7fe8441cb910>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ TestHeaders.test_append_link_with_anchor[asgi] ________________

self = <test_headers.TestHeaders object at 0x7fe8582b6650>
client = <falcon.testing.client.TestClient object at 0x7fe996986440>

    def test_append_link_with_anchor(self, client):
        expected_value = '</related/thing>; rel=item; anchor="/some%20thing/or-other"'
    
        resource = LinkHeaderResource()
        resource.append_link('/related/thing', 'item', anchor='/some thing/or-other')
    
>       self._check_link_header(client, resource, expected_value)

tests/test_headers.py:915: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1060: in _check_link_header
    self._check_header(client, resource, 'Link', expected_value)
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996ceb7d0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c84c10>, 'CHECK...4c10>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c84c10>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method LinkHeaderResource.on_get of <test_headers.LinkHeaderResource object at 0x7fe996441300>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________________ TestHeaders.test_content_length[asgi] _____________________

self = <test_headers.TestHeaders object at 0x7fe858437d90>
client = <falcon.testing.client.TestClient object at 0x7fe996c13820>

    def test_content_length(self, client):
        resource = testing.SimpleTestResource(body=SAMPLE_BODY)
>       client.app.add_route('/', resource)

tests/test_headers.py:329: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996f23140>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c85ab0>, 'CHECK...5ab0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c85ab0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fe996771ab0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________________ TestHeaders.test_unset_header[asgi-True] ___________________

self = <test_headers.TestHeaders object at 0x7fe858270fa0>
client = <falcon.testing.client.TestClient object at 0x7fe8441c8af0>
with_double_quotes = True

    @pytest.mark.parametrize('with_double_quotes', [True, False])
    def test_unset_header(self, client, with_double_quotes):
>       client.app.add_route('/', RemoveHeaderResource(with_double_quotes))

tests/test_headers.py:414: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe99646c7b0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9965e5990>, 'CHECK...5990>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9965e5990>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method RemoveHeaderResource.on_get of <test_headers.RemoveHeaderResource object at 0x7fe9967aba60>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________ TestHeaders.test_unicode_headers_contain_non_ascii[asgi-PUT] _________

self = <test_headers.TestHeaders object at 0x7fe8582b43a0>, method = 'PUT'
client = <falcon.testing.client.TestClient object at 0x7fe9967910c0>

    @pytest.mark.parametrize('method', ['CONNECT', 'PATCH', 'POST', 'PUT'])
    def test_unicode_headers_contain_non_ascii(self, method, client):
        app = client.app
>       app.add_route('/', UnicodeHeaderResource())

tests/test_headers.py:709: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe99646c0b0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996cc63b0>, 'CHECK...210>>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996cc63b0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method UnicodeHeaderResource.on_connect of <test_headers.UnicodeHeaderResource object at 0x7fe996791210>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ TestHeaders.test_append_link_complex[asgi] __________________

self = <test_headers.TestHeaders object at 0x7fe8582b7010>
client = <falcon.testing.client.TestClient object at 0x7fe996748490>

    def test_append_link_complex(self, client):
        expected_value = (
            '</related/thing>; rel=alternate; '
            'title="A related thing"; '
            "title*=UTF-8'en'A%20%C3%A7runchy%20thing; "
            'type="application/json"; '
            'hreflang=en-GB; hreflang=de'
        )
    
        resource = LinkHeaderResource()
        resource.append_link(
            '/related/thing',
            'alternate',
            title='A related thing',
            hreflang=('en-GB', 'de'),
            type_hint='application/json',
            title_star=('en', 'A \u00e7runchy thing'),
        )
    
>       self._check_link_header(client, resource, expected_value)

tests/test_headers.py:964: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1060: in _check_link_header
    self._check_header(client, resource, 'Link', expected_value)
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe99646cba0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c86cb0>, 'CHECK...6cb0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c86cb0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method LinkHeaderResource.on_get of <test_headers.LinkHeaderResource object at 0x7fe99674b8e0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ TestHeaders.test_default_media_type[asgi] ___________________

self = <test_headers.TestHeaders object at 0x7fe858271de0>
client = <falcon.testing.client.TestClient object at 0x7fe9967b94b0>

    def test_default_media_type(self, client):
        resource = testing.SimpleTestResource(body='Hello world!')
>       self._check_header(client, resource, 'Content-Type', falcon.DEFAULT_MEDIA_TYPE)

tests/test_headers.py:495: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe99646de70>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c84f70>, 'CHECK...4f70>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c84f70>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fe9967b9510>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______________ TestHeaders.test_passthrough_request_headers[asgi] ______________

self = <test_headers.TestHeaders object at 0x7fe858271930>
client = <falcon.testing.client.TestClient object at 0x7fe8579cb760>

    def test_passthrough_request_headers(self, client):
        resource = testing.SimpleTestResource(body=SAMPLE_BODY)
>       client.app.add_route('/', resource)

tests/test_headers.py:451: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996f22dc0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c856c0>, 'CHECK...56c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c856c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fe8579c9600>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ TestHeaders.test_append_link_with_title[asgi] _________________

self = <test_headers.TestHeaders object at 0x7fe8582b6170>
client = <falcon.testing.client.TestClient object at 0x7fe9964b4400>

    def test_append_link_with_title(self, client):
        expected_value = '</related/thing>; rel=item; title="A related thing"'
    
        resource = LinkHeaderResource()
        resource.append_link('/related/thing', 'item', title='A related thing')
    
>       self._check_link_header(client, resource, expected_value)

tests/test_headers.py:888: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1060: in _check_link_header
    self._check_header(client, resource, 'Link', expected_value)
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996f20f20>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c85480>, 'CHECK...5480>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c85480>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method LinkHeaderResource.on_get of <test_headers.LinkHeaderResource object at 0x7fe9964b56c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______________ TestHeaders.test_append_link_with_hreflang[asgi] _______________

self = <test_headers.TestHeaders object at 0x7fe8582b68c0>
client = <falcon.testing.client.TestClient object at 0x7fe996d724a0>

    def test_append_link_with_hreflang(self, client):
        expected_value = '</related/thing>; rel=about; hreflang=en'
    
        resource = LinkHeaderResource()
        resource.append_link('/related/thing', 'about', hreflang='en')
    
>       self._check_link_header(client, resource, expected_value)

tests/test_headers.py:923: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1060: in _check_link_header
    self._check_header(client, resource, 'Link', expected_value)
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996fcbc30>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c841f0>, 'CHECK...41f0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c841f0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method LinkHeaderResource.on_get of <test_headers.LinkHeaderResource object at 0x7fe996d720e0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_append_link_crossorigin[asgi-Use-Credentials-</related/thing>; rel=alternate; crossorigin="use-credentials"] _

self = <test_headers.TestHeaders object at 0x7fe8582b6410>
client = <falcon.testing.client.TestClient object at 0x7fe996e8b6a0>
crossorigin = 'Use-Credentials'
expected_value = '</related/thing>; rel=alternate; crossorigin="use-credentials"'

    @pytest.mark.parametrize(
        'crossorigin,expected_value',
        [
            (None, '</related/thing>; rel=alternate'),
            ('anonymous', '</related/thing>; rel=alternate; crossorigin'),
            ('Anonymous', '</related/thing>; rel=alternate; crossorigin'),
            ('AnOnYmOUs', '</related/thing>; rel=alternate; crossorigin'),
            (
                'Use-Credentials',
                '</related/thing>; rel=alternate; crossorigin="use-credentials"',
            ),
            (
                'use-credentials',
                '</related/thing>; rel=alternate; crossorigin="use-credentials"',
            ),
        ],
    )
    def test_append_link_crossorigin(self, client, crossorigin, expected_value):
        resource = LinkHeaderResource()
        resource.append_link('/related/thing', 'alternate', crossorigin=crossorigin)
    
>       self._check_link_header(client, resource, expected_value)

tests/test_headers.py:987: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1060: in _check_link_header
    self._check_header(client, resource, 'Link', expected_value)
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996fc8eb0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c84280>, 'CHECK...4280>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c84280>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method LinkHeaderResource.on_get of <test_headers.LinkHeaderResource object at 0x7fe996e88550>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________________ TestHeaders.test_get_header_as_int[asgi] ___________________

self = <test_headers.TestHeaders object at 0x7fe858270ac0>
client = <falcon.testing.client.TestClient object at 0x7fe99663a260>

    def test_get_header_as_int(self, client):
        resource = testing.SimpleTestResource(body=SAMPLE_BODY)
>       client.app.add_route('/', resource)

tests/test_headers.py:370: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe99646e570>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9965e5ab0>, 'CHECK...5ab0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9965e5ab0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fe99663b8b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ TestHeaders.test_declared_content_length_on_head[asgi] ____________

self = <test_headers.TestHeaders object at 0x7fe858270130>
client = <falcon.testing.client.TestClient object at 0x7fe8579c9a20>

    def test_declared_content_length_on_head(self, client):
>       client.app.add_route('/', ContentLengthHeaderResource(42))

tests/test_headers.py:336: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe99646e6c0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c85990>, 'CHECK...5990>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c85990>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ContentLengthHeaderResource.on_get of <test_headers.ContentLengthHeaderResource object at 0x7fe8579cbf40>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______ TestHeaders.test_unicode_headers_contain_non_ascii[asgi-CONNECT] _______

self = <test_headers.TestHeaders object at 0x7fe8582b4160>, method = 'CONNECT'
client = <falcon.testing.client.TestClient object at 0x7fe996956c20>

    @pytest.mark.parametrize('method', ['CONNECT', 'PATCH', 'POST', 'PUT'])
    def test_unicode_headers_contain_non_ascii(self, method, client):
        app = client.app
>       app.add_route('/', UnicodeHeaderResource())

tests/test_headers.py:709: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe99646e110>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996d21870>, 'CHECK...550>>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996d21870>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method UnicodeHeaderResource.on_connect of <test_headers.UnicodeHeaderResource object at 0x7fe996957550>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ TestHeaders.test_append_link_with_link_extension[asgi] ____________

self = <test_headers.TestHeaders object at 0x7fe8582f4070>
client = <falcon.testing.client.TestClient object at 0x7fe996b7ce80>

    def test_append_link_with_link_extension(self, client):
        expected_value = '</related/thing>; rel=item; sizes=72x72'
    
        resource = LinkHeaderResource()
        resource.append_link(
            '/related/thing', 'item', link_extension=[('sizes', '72x72')]
        )
    
>       self._check_link_header(client, resource, expected_value)

tests/test_headers.py:1014: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1060: in _check_link_header
    self._check_header(client, resource, 'Link', expected_value)
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe99646c270>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c85360>, 'CHECK...5360>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c85360>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method LinkHeaderResource.on_get of <test_headers.LinkHeaderResource object at 0x7fe996b7df00>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_content_disposition_attachment_header[asgi-Bold Digit \U0001d7cf.txt-attachment; filename=Bold_Digit_1.txt; filename*=UTF-8''Bold%20Digit%20%F0%9D%9F%8F.txt] _

self = <test_headers.TestHeaders object at 0x7fe858272c20>
client = <falcon.testing.client.TestClient object at 0x7fe997a57040>
filename = 'Bold Digit 𝟏.txt'
expected = "attachment; filename=Bold_Digit_1.txt; filename*=UTF-8''Bold%20Digit%20%F0%9D%9F%8F.txt"

    @pytest.mark.parametrize(
        'filename,expected',
        [
            ('report.csv', 'attachment; filename="report.csv"'),
            ('Hello World.txt', 'attachment; filename="Hello World.txt"'),
            (
                'Bold Digit 𝟏.txt',
                'attachment; filename=Bold_Digit_1.txt; '
                "filename*=UTF-8''Bold%20Digit%20%F0%9D%9F%8F.txt",
            ),
            (
                'Ångström unit.txt',
                'attachment; filename=A_ngstro_m_unit.txt; '
                "filename*=UTF-8''%C3%85ngstr%C3%B6m%20unit.txt",
            ),
            ('one,two.txt', 'attachment; filename="one,two.txt"'),
            (
                '½,²⁄₂.txt',
                'attachment; filename=1_2_2_2.txt; '
                "filename*=UTF-8''%C2%BD%2C%C2%B2%E2%81%84%E2%82%82.txt",
            ),
            ('[foo] @ bar.txt', 'attachment; filename="[foo] @ bar.txt"'),
            (
                '[fòó]@bàr,bäz.txt',
                'attachment; filename=_fo_o___ba_r_ba_z.txt; '
                "filename*=UTF-8''%5Bf%C3%B2%C3%B3%5D%40b%C3%A0r%2Cb%C3%A4z.txt",
            ),
        ],
    )
    def test_content_disposition_attachment_header(self, client, filename, expected):
        resource = DownloadableResource(filename)
>       client.app.add_route('/', resource)

tests/test_headers.py:622: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996fca180>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c848b0>, 'CHECK...48b0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c848b0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method DownloadableResource.on_get of <test_headers.DownloadableResource object at 0x7fe997a55900>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ TestHeaders.test_custom_content_type[asgi] __________________

self = <test_headers.TestHeaders object at 0x7fe8582b5c90>
client = <falcon.testing.client.TestClient object at 0x7fe996985a80>

    def test_custom_content_type(self, client):
        content_type = 'application/xml; charset=utf-8'
        resource = XmlResource(content_type)
>       self._check_header(client, resource, 'Content-Type', content_type)

tests/test_headers.py:850: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996fc8040>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c86830>, 'CHECK...6830>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c86830>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method XmlResource.on_get of <test_headers.XmlResource object at 0x7fe8578931f0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________________ TestHeaders.test_request_multiple_header[asgi] ________________

self = <test_headers.TestHeaders object at 0x7fe8582b7ca0>
client = <falcon.testing.client.TestClient object at 0x7fe996908a30>

    def test_request_multiple_header(self, client):
        resource = HeaderHelpersResource()
>       client.app.add_route('/', resource)

tests/test_headers.py:1039: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996f20900>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c87b50>, 'CHECK...7b50>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c87b50>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method HeaderHelpersResource.on_get of <test_headers.HeaderHelpersResource object at 0x7fe99690a4a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_content_disposition_inline_header[asgi-report.csv-inline; filename="report.csv"] _

self = <test_headers.TestHeaders object at 0x7fe858273610>
client = <falcon.testing.client.TestClient object at 0x7fe996ced4b0>
filename = 'report.csv', expected = 'inline; filename="report.csv"'

    @pytest.mark.parametrize(
        'filename,expected',
        [
            ('report.csv', 'inline; filename="report.csv"'),
            ('Hello World.txt', 'inline; filename="Hello World.txt"'),
            (
                'Bold Digit 𝟏.txt',
                'inline; filename=Bold_Digit_1.txt; '
                "filename*=UTF-8''Bold%20Digit%20%F0%9D%9F%8F.txt",
            ),
        ],
    )
    def test_content_disposition_inline_header(self, client, filename, expected):
        resource = ViewableResource(filename)
>       client.app.add_route('/', resource)

tests/test_headers.py:642: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996cea8f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996f43250>, 'CHECK...3250>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996f43250>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ViewableResource.on_get of <test_headers.ViewableResource object at 0x7fe996ceea10>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______________________ TestHeaders.test_vary_star[asgi] _______________________

self = <test_headers.TestHeaders object at 0x7fe8582b5210>
client = <falcon.testing.client.TestClient object at 0x7fe996b88250>

    def test_vary_star(self, client):
>       client.app.add_route('/', VaryHeaderResource(['*']))

tests/test_headers.py:816: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996f05fc0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9965e5d80>, 'CHECK...5d80>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9965e5d80>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method VaryHeaderResource.on_get of <test_headers.VaryHeaderResource object at 0x7fe996b8ad40>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________ TestHeaders.test_set_headers_with_custom_class[asgi] _____________

self = <test_headers.TestHeaders object at 0x7fe8582f42b0>
client = <falcon.testing.client.TestClient object at 0x7fe996d3f1c0>

    def test_set_headers_with_custom_class(self, client):
>       client.app.add_route('/', CustomHeadersResource())

tests/test_headers.py:1023: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996f06490>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c84af0>, 'CHECK...4af0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c84af0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method CustomHeadersResource.on_get of <test_headers.CustomHeadersResource object at 0x7fe996d3f100>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_content_disposition_attachment_header[asgi-report.csv-attachment; filename="report.csv"] _

self = <test_headers.TestHeaders object at 0x7fe858272b00>
client = <falcon.testing.client.TestClient object at 0x7fe9969840d0>
filename = 'report.csv', expected = 'attachment; filename="report.csv"'

    @pytest.mark.parametrize(
        'filename,expected',
        [
            ('report.csv', 'attachment; filename="report.csv"'),
            ('Hello World.txt', 'attachment; filename="Hello World.txt"'),
            (
                'Bold Digit 𝟏.txt',
                'attachment; filename=Bold_Digit_1.txt; '
                "filename*=UTF-8''Bold%20Digit%20%F0%9D%9F%8F.txt",
            ),
            (
                'Ångström unit.txt',
                'attachment; filename=A_ngstro_m_unit.txt; '
                "filename*=UTF-8''%C3%85ngstr%C3%B6m%20unit.txt",
            ),
            ('one,two.txt', 'attachment; filename="one,two.txt"'),
            (
                '½,²⁄₂.txt',
                'attachment; filename=1_2_2_2.txt; '
                "filename*=UTF-8''%C2%BD%2C%C2%B2%E2%81%84%E2%82%82.txt",
            ),
            ('[foo] @ bar.txt', 'attachment; filename="[foo] @ bar.txt"'),
            (
                '[fòó]@bàr,bäz.txt',
                'attachment; filename=_fo_o___ba_r_ba_z.txt; '
                "filename*=UTF-8''%5Bf%C3%B2%C3%B3%5D%40b%C3%A0r%2Cb%C3%A4z.txt",
            ),
        ],
    )
    def test_content_disposition_attachment_header(self, client, filename, expected):
        resource = DownloadableResource(filename)
>       client.app.add_route('/', resource)

tests/test_headers.py:622: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996f050e0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c84550>, 'CHECK...4550>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c84550>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method DownloadableResource.on_get of <test_headers.DownloadableResource object at 0x7fe996966560>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_append_link_crossorigin[asgi-anonymous-</related/thing>; rel=alternate; crossorigin] _

self = <test_headers.TestHeaders object at 0x7fe8582b6fe0>
client = <falcon.testing.client.TestClient object at 0x7fe996ec6ce0>
crossorigin = 'anonymous'
expected_value = '</related/thing>; rel=alternate; crossorigin'

    @pytest.mark.parametrize(
        'crossorigin,expected_value',
        [
            (None, '</related/thing>; rel=alternate'),
            ('anonymous', '</related/thing>; rel=alternate; crossorigin'),
            ('Anonymous', '</related/thing>; rel=alternate; crossorigin'),
            ('AnOnYmOUs', '</related/thing>; rel=alternate; crossorigin'),
            (
                'Use-Credentials',
                '</related/thing>; rel=alternate; crossorigin="use-credentials"',
            ),
            (
                'use-credentials',
                '</related/thing>; rel=alternate; crossorigin="use-credentials"',
            ),
        ],
    )
    def test_append_link_crossorigin(self, client, crossorigin, expected_value):
        resource = LinkHeaderResource()
        resource.append_link('/related/thing', 'alternate', crossorigin=crossorigin)
    
>       self._check_link_header(client, resource, expected_value)

tests/test_headers.py:987: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1060: in _check_link_header
    self._check_header(client, resource, 'Link', expected_value)
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996f05af0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c84b80>, 'CHECK...4b80>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c84b80>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method LinkHeaderResource.on_get of <test_headers.LinkHeaderResource object at 0x7fe996ec7820>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________ TestHeaders.test_no_content_type[asgi-304 Not Modified] ____________

self = <test_headers.TestHeaders object at 0x7fe8582b5cc0>
client = <falcon.testing.client.TestClient object at 0x7fe9964aeb90>
status = '304 Not Modified'

    @pytest.mark.parametrize('status', (falcon.HTTP_204, falcon.HTTP_304))
    def test_no_content_type(self, client, status):
>       client.app.add_route('/', testing.SimpleTestResource(status=status))

tests/test_headers.py:842: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996f07530>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c84940>, 'CHECK...4940>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c84940>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fe9964ac700>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_append_link_crossorigin[asgi-use-credentials-</related/thing>; rel=alternate; crossorigin="use-credentials"] _

self = <test_headers.TestHeaders object at 0x7fe8582b6140>
client = <falcon.testing.client.TestClient object at 0x7fe996956080>
crossorigin = 'use-credentials'
expected_value = '</related/thing>; rel=alternate; crossorigin="use-credentials"'

    @pytest.mark.parametrize(
        'crossorigin,expected_value',
        [
            (None, '</related/thing>; rel=alternate'),
            ('anonymous', '</related/thing>; rel=alternate; crossorigin'),
            ('Anonymous', '</related/thing>; rel=alternate; crossorigin'),
            ('AnOnYmOUs', '</related/thing>; rel=alternate; crossorigin'),
            (
                'Use-Credentials',
                '</related/thing>; rel=alternate; crossorigin="use-credentials"',
            ),
            (
                'use-credentials',
                '</related/thing>; rel=alternate; crossorigin="use-credentials"',
            ),
        ],
    )
    def test_append_link_crossorigin(self, client, crossorigin, expected_value):
        resource = LinkHeaderResource()
        resource.append_link('/related/thing', 'alternate', crossorigin=crossorigin)
    
>       self._check_link_header(client, resource, expected_value)

tests/test_headers.py:987: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1060: in _check_link_header
    self._check_header(client, resource, 'Link', expected_value)
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe99646c350>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996f40d30>, 'CHECK...0d30>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996f40d30>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method LinkHeaderResource.on_get of <test_headers.LinkHeaderResource object at 0x7fe996956740>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_content_disposition_attachment_header[asgi-Hello World.txt-attachment; filename="Hello World.txt"] _

self = <test_headers.TestHeaders object at 0x7fe858272b90>
client = <falcon.testing.client.TestClient object at 0x7fe9964a9420>
filename = 'Hello World.txt'
expected = 'attachment; filename="Hello World.txt"'

    @pytest.mark.parametrize(
        'filename,expected',
        [
            ('report.csv', 'attachment; filename="report.csv"'),
            ('Hello World.txt', 'attachment; filename="Hello World.txt"'),
            (
                'Bold Digit 𝟏.txt',
                'attachment; filename=Bold_Digit_1.txt; '
                "filename*=UTF-8''Bold%20Digit%20%F0%9D%9F%8F.txt",
            ),
            (
                'Ångström unit.txt',
                'attachment; filename=A_ngstro_m_unit.txt; '
                "filename*=UTF-8''%C3%85ngstr%C3%B6m%20unit.txt",
            ),
            ('one,two.txt', 'attachment; filename="one,two.txt"'),
            (
                '½,²⁄₂.txt',
                'attachment; filename=1_2_2_2.txt; '
                "filename*=UTF-8''%C2%BD%2C%C2%B2%E2%81%84%E2%82%82.txt",
            ),
            ('[foo] @ bar.txt', 'attachment; filename="[foo] @ bar.txt"'),
            (
                '[fòó]@bàr,bäz.txt',
                'attachment; filename=_fo_o___ba_r_ba_z.txt; '
                "filename*=UTF-8''%5Bf%C3%B2%C3%B3%5D%40b%C3%A0r%2Cb%C3%A4z.txt",
            ),
        ],
    )
    def test_content_disposition_attachment_header(self, client, filename, expected):
        resource = DownloadableResource(filename)
>       client.app.add_route('/', resource)

tests/test_headers.py:622: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe99646db60>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996f432e0>, 'CHECK...32e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996f432e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method DownloadableResource.on_get of <test_headers.DownloadableResource object at 0x7fe996473220>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_override_default_media_type[text/plain-Hello ISO-8859-1!-True] _

self = <test_headers.TestHeaders object at 0x7fe8582725f0>, asgi = True
client = <falcon.testing.client.TestClient object at 0x7fe8441cbeb0>
content_type = 'text/plain', body = 'Hello ISO-8859-1!'

    @pytest.mark.parametrize('asgi', [True, False])
    @pytest.mark.parametrize(
        'content_type,body',
        [
            ('text/plain; charset=UTF-8', 'Hello Unicode! \U0001F638'),
            # NOTE(kgriffs): This only works because the client defaults to
            # ISO-8859-1 IFF the media type is 'text'.
            ('text/plain', 'Hello ISO-8859-1!'),
        ],
    )
    def test_override_default_media_type(self, asgi, client, content_type, body):
        client.app = create_app(asgi=asgi, media_type=content_type)
>       client.app.add_route('/', testing.SimpleTestResource(body=body))

tests/test_headers.py:509: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe99646ee30>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996f40430>, 'CHECK...0430>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996f40430>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fe8579c94e0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____________________ TestHeaders.test_default_value[asgi] _____________________

self = <test_headers.TestHeaders object at 0x7fe858270d30>
client = <falcon.testing.client.TestClient object at 0x7fe996c10250>

    def test_default_value(self, client):
        resource = testing.SimpleTestResource(body=SAMPLE_BODY)
>       client.app.add_route('/', resource)

tests/test_headers.py:398: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe9964f45f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c841f0>, 'CHECK...41f0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c841f0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fe9964aa140>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___ TestHeaders.test_declared_content_length_overriden_by_data_length[asgi] ____

self = <test_headers.TestHeaders object at 0x7fe8582705e0>
client = <falcon.testing.client.TestClient object at 0x7fe996e618d0>

    def test_declared_content_length_overriden_by_data_length(self, client):
        data = SAMPLE_BODY.encode()
    
        resource = ContentLengthHeaderResource(42, data=data)
>       client.app.add_route('/', resource)

tests/test_headers.py:356: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe9964f4190>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c84b80>, 'CHECK...4b80>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c84b80>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ContentLengthHeaderResource.on_get of <test_headers.ContentLengthHeaderResource object at 0x7fe996e61690>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______________ TestHeaders.test_append_link_with_title_star[asgi] ______________

self = <test_headers.TestHeaders object at 0x7fe8582b63e0>
client = <falcon.testing.client.TestClient object at 0x7fe9964ea110>

    def test_append_link_with_title_star(self, client):
        expected_value = (
            '</related/thing>; rel=item; '
            "title*=UTF-8''A%20related%20thing, "
            '</%C3%A7runchy/thing>; rel=item; '
            "title*=UTF-8'en'A%20%C3%A7runchy%20thing"
        )
    
        resource = LinkHeaderResource()
        resource.append_link(
            '/related/thing', 'item', title_star=('', 'A related thing')
        )
    
        resource.append_link(
            '/\u00e7runchy/thing', 'item', title_star=('en', 'A \u00e7runchy thing')
        )
    
>       self._check_link_header(client, resource, expected_value)

tests/test_headers.py:907: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1060: in _check_link_header
    self._check_header(client, resource, 'Link', expected_value)
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe9964f49e0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c84af0>, 'CHECK...4af0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c84af0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method LinkHeaderResource.on_get of <test_headers.LinkHeaderResource object at 0x7fe9964ebe50>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________ TestHeaders.test_unicode_headers_contain_only_ascii[asgi] ___________

self = <test_headers.TestHeaders object at 0x7fe858273af0>
client = <falcon.testing.client.TestClient object at 0x7fe996441480>

    def test_unicode_headers_contain_only_ascii(self, client):
>       client.app.add_route('/', UnicodeHeaderResource())

tests/test_headers.py:698: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe9964f5a80>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c84ca0>, 'CHECK...a30>>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c84ca0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method UnicodeHeaderResource.on_connect of <test_headers.UnicodeHeaderResource object at 0x7fe996440a30>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____ TestHeaders.test_vary_header[asgi-vary1-accept-encoding, x-auth-token] ____

self = <test_headers.TestHeaders object at 0x7fe8582b5690>
client = <falcon.testing.client.TestClient object at 0x7fe99648de40>
vary = ('accept-encoding', 'x-auth-token')
expected_value = 'accept-encoding, x-auth-token'

    @pytest.mark.parametrize(
        'vary,expected_value',
        [
            (['accept-encoding'], 'accept-encoding'),
            (('accept-encoding', 'x-auth-token'), 'accept-encoding, x-auth-token'),
        ],
    )
    def test_vary_header(self, client, vary, expected_value):
        resource = VaryHeaderResource(vary)
>       self._check_header(client, resource, 'Vary', expected_value)

tests/test_headers.py:829: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe9964f6ff0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996f41e10>, 'CHECK...1e10>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996f41e10>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method VaryHeaderResource.on_get of <test_headers.VaryHeaderResource object at 0x7fe99648ee00>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____ TestHeaders.test_declared_content_length_overridden_by_no_body[asgi] _____

self = <test_headers.TestHeaders object at 0x7fe858270160>
client = <falcon.testing.client.TestClient object at 0x7fe996791e70>

    def test_declared_content_length_overridden_by_no_body(self, client):
>       client.app.add_route('/', ContentLengthHeaderResource(42))

tests/test_headers.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe99646d3f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996f431c0>, 'CHECK...31c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996f431c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ContentLengthHeaderResource.on_get of <test_headers.ContentLengthHeaderResource object at 0x7fe996790c40>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_append_link_crossorigin[asgi-AnOnYmOUs-</related/thing>; rel=alternate; crossorigin] _

self = <test_headers.TestHeaders object at 0x7fe8582b6890>
client = <falcon.testing.client.TestClient object at 0x7fe997a54f40>
crossorigin = 'AnOnYmOUs'
expected_value = '</related/thing>; rel=alternate; crossorigin'

    @pytest.mark.parametrize(
        'crossorigin,expected_value',
        [
            (None, '</related/thing>; rel=alternate'),
            ('anonymous', '</related/thing>; rel=alternate; crossorigin'),
            ('Anonymous', '</related/thing>; rel=alternate; crossorigin'),
            ('AnOnYmOUs', '</related/thing>; rel=alternate; crossorigin'),
            (
                'Use-Credentials',
                '</related/thing>; rel=alternate; crossorigin="use-credentials"',
            ),
            (
                'use-credentials',
                '</related/thing>; rel=alternate; crossorigin="use-credentials"',
            ),
        ],
    )
    def test_append_link_crossorigin(self, client, crossorigin, expected_value):
        resource = LinkHeaderResource()
        resource.append_link('/related/thing', 'alternate', crossorigin=crossorigin)
    
>       self._check_link_header(client, resource, expected_value)

tests/test_headers.py:987: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1060: in _check_link_header
    self._check_header(client, resource, 'Link', expected_value)
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996fcbca0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996f40b80>, 'CHECK...0b80>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996f40b80>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method LinkHeaderResource.on_get of <test_headers.LinkHeaderResource object at 0x7fe997a559f0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_content_disposition_attachment_header[asgi-\xc5ngstr\xf6m unit.txt-attachment; filename=A_ngstro_m_unit.txt; filename*=UTF-8''%C3%85ngstr%C3%B6m%20unit.txt] _

self = <test_headers.TestHeaders object at 0x7fe858272cb0>
client = <falcon.testing.client.TestClient object at 0x7fe996614340>
filename = 'Ångström unit.txt'
expected = "attachment; filename=A_ngstro_m_unit.txt; filename*=UTF-8''%C3%85ngstr%C3%B6m%20unit.txt"

    @pytest.mark.parametrize(
        'filename,expected',
        [
            ('report.csv', 'attachment; filename="report.csv"'),
            ('Hello World.txt', 'attachment; filename="Hello World.txt"'),
            (
                'Bold Digit 𝟏.txt',
                'attachment; filename=Bold_Digit_1.txt; '
                "filename*=UTF-8''Bold%20Digit%20%F0%9D%9F%8F.txt",
            ),
            (
                'Ångström unit.txt',
                'attachment; filename=A_ngstro_m_unit.txt; '
                "filename*=UTF-8''%C3%85ngstr%C3%B6m%20unit.txt",
            ),
            ('one,two.txt', 'attachment; filename="one,two.txt"'),
            (
                '½,²⁄₂.txt',
                'attachment; filename=1_2_2_2.txt; '
                "filename*=UTF-8''%C2%BD%2C%C2%B2%E2%81%84%E2%82%82.txt",
            ),
            ('[foo] @ bar.txt', 'attachment; filename="[foo] @ bar.txt"'),
            (
                '[fòó]@bàr,bäz.txt',
                'attachment; filename=_fo_o___ba_r_ba_z.txt; '
                "filename*=UTF-8''%5Bf%C3%B2%C3%B3%5D%40b%C3%A0r%2Cb%C3%A4z.txt",
            ),
        ],
    )
    def test_content_disposition_attachment_header(self, client, filename, expected):
        resource = DownloadableResource(filename)
>       client.app.add_route('/', resource)

tests/test_headers.py:622: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996f07a00>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996f43eb0>, 'CHECK...3eb0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996f43eb0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method DownloadableResource.on_get of <test_headers.DownloadableResource object at 0x7fe996615c00>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________________ TestHeaders.test_headers_as_list[asgi] ____________________

self = <test_headers.TestHeaders object at 0x7fe858271b70>
client = <falcon.testing.client.TestClient object at 0x7fe9964875b0>

    def test_headers_as_list(self, client):
        headers = [
            ('Client-ID', '692ba466-74bb-11e3-bf3f-7567c531c7ca'),
            ('Accept', 'audio/*; q=0.2, audio/basic'),
        ]
    
        # Unit test
        environ = testing.create_environ(headers=headers)
        req = falcon.Request(environ)
    
        for name, value in headers:
            assert (name.upper(), value) in req.headers.items()
            assert (name.lower(), value) in req.headers_lower.items()
    
        # Functional test
>       client.app.add_route('/', testing.SimpleTestResource(headers=headers))

tests/test_headers.py:487: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996f06b20>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c84940>, 'CHECK...4940>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c84940>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fe996487a60>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________________ TestHeaders.test_required_header[asgi] ____________________

self = <test_headers.TestHeaders object at 0x7fe858270a90>
client = <falcon.testing.client.TestClient object at 0x7fe996749ba0>

    def test_required_header(self, client):
        resource = testing.SimpleTestResource(body=SAMPLE_BODY)
>       client.app.add_route('/', resource)

tests/test_headers.py:422: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996f04820>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9965e4af0>, 'CHECK...4af0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9965e4af0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fe99674b610>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ TestHeaders.test_response_header_helpers_on_get[asgi] _____________

self = <test_headers.TestHeaders object at 0x7fe858272860>
client = <falcon.testing.client.TestClient object at 0x7fe9964be560>

    def test_response_header_helpers_on_get(self, client):
        last_modified = datetime(2013, 1, 1, 10, 30, 30)
        resource = HeaderHelpersResource(last_modified)
>       client.app.add_route('/', resource)

tests/test_headers.py:531: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996fc9d90>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996f43e20>, 'CHECK...3e20>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996f43e20>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method HeaderHelpersResource.on_get of <test_headers.HeaderHelpersResource object at 0x7fe9964bd420>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_content_disposition_attachment_header[asgi-[foo] @ bar.txt-attachment; filename="[foo] @ bar.txt"] _

self = <test_headers.TestHeaders object at 0x7fe858272e90>
client = <falcon.testing.client.TestClient object at 0x7fe996736a70>
filename = '[foo] @ bar.txt'
expected = 'attachment; filename="[foo] @ bar.txt"'

    @pytest.mark.parametrize(
        'filename,expected',
        [
            ('report.csv', 'attachment; filename="report.csv"'),
            ('Hello World.txt', 'attachment; filename="Hello World.txt"'),
            (
                'Bold Digit 𝟏.txt',
                'attachment; filename=Bold_Digit_1.txt; '
                "filename*=UTF-8''Bold%20Digit%20%F0%9D%9F%8F.txt",
            ),
            (
                'Ångström unit.txt',
                'attachment; filename=A_ngstro_m_unit.txt; '
                "filename*=UTF-8''%C3%85ngstr%C3%B6m%20unit.txt",
            ),
            ('one,two.txt', 'attachment; filename="one,two.txt"'),
            (
                '½,²⁄₂.txt',
                'attachment; filename=1_2_2_2.txt; '
                "filename*=UTF-8''%C2%BD%2C%C2%B2%E2%81%84%E2%82%82.txt",
            ),
            ('[foo] @ bar.txt', 'attachment; filename="[foo] @ bar.txt"'),
            (
                '[fòó]@bàr,bäz.txt',
                'attachment; filename=_fo_o___ba_r_ba_z.txt; '
                "filename*=UTF-8''%5Bf%C3%B2%C3%B3%5D%40b%C3%A0r%2Cb%C3%A4z.txt",
            ),
        ],
    )
    def test_content_disposition_attachment_header(self, client, filename, expected):
        resource = DownloadableResource(filename)
>       client.app.add_route('/', resource)

tests/test_headers.py:622: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe9964f6ea0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996f427a0>, 'CHECK...27a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996f427a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method DownloadableResource.on_get of <test_headers.DownloadableResource object at 0x7fe996736b30>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________ TestHeaders.test_no_content_length[asgi-304 Not Modified] ___________

self = <test_headers.TestHeaders object at 0x7fe858271750>
client = <falcon.testing.client.TestClient object at 0x7fe996cef100>
status = '304 Not Modified'

    @pytest.mark.parametrize('status', (falcon.HTTP_204, falcon.HTTP_304))
    def test_no_content_length(self, client, status):
>       client.app.add_route('/xxx', testing.SimpleTestResource(status=status))

tests/test_headers.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe9964f45f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996f41c60>, 'CHECK...1c60>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996f41c60>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fe996cefbe0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ TestHeaders.test_unset_header[asgi-False] ___________________

self = <test_headers.TestHeaders object at 0x7fe8582713f0>
client = <falcon.testing.client.TestClient object at 0x7fe996bc4880>
with_double_quotes = False

    @pytest.mark.parametrize('with_double_quotes', [True, False])
    def test_unset_header(self, client, with_double_quotes):
>       client.app.add_route('/', RemoveHeaderResource(with_double_quotes))

tests/test_headers.py:414: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe9964f4040>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996f42d40>, 'CHECK...2d40>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996f42d40>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method RemoveHeaderResource.on_get of <test_headers.RemoveHeaderResource object at 0x7fe996bc4e50>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______________ TestHeaders.test_response_set_and_get_header[asgi] ______________

self = <test_headers.TestHeaders object at 0x7fe8582b4190>
client = <falcon.testing.client.TestClient object at 0x7fe9964a9180>

    def test_response_set_and_get_header(self, client):
        resource = HeaderHelpersResource()
>       client.app.add_route('/', resource)

tests/test_headers.py:745: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996f228f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996f42950>, 'CHECK...2950>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996f42950>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method HeaderHelpersResource.on_get of <test_headers.HeaderHelpersResource object at 0x7fe9964a92a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________________ TestHeaders.test_expires_header[asgi] _____________________

self = <test_headers.TestHeaders object at 0x7fe858270850>
client = <falcon.testing.client.TestClient object at 0x7fe996956110>

    def test_expires_header(self, client):
        expires = datetime(2013, 1, 1, 10, 30, 30)
>       client.app.add_route('/', ExpiresHeaderResource(expires))

tests/test_headers.py:363: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe99646e570>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c852d0>, 'CHECK...52d0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c852d0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ExpiresHeaderResource.on_get of <test_headers.ExpiresHeaderResource object at 0x7fe996957e80>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestHeaders.test_content_disposition_inline_header[asgi-Hello World.txt-inline; filename="Hello World.txt"] _

self = <test_headers.TestHeaders object at 0x7fe8582736a0>
client = <falcon.testing.client.TestClient object at 0x7fe9964df2b0>
filename = 'Hello World.txt', expected = 'inline; filename="Hello World.txt"'

    @pytest.mark.parametrize(
        'filename,expected',
        [
            ('report.csv', 'inline; filename="report.csv"'),
            ('Hello World.txt', 'inline; filename="Hello World.txt"'),
            (
                'Bold Digit 𝟏.txt',
                'inline; filename=Bold_Digit_1.txt; '
                "filename*=UTF-8''Bold%20Digit%20%F0%9D%9F%8F.txt",
            ),
        ],
    )
    def test_content_disposition_inline_header(self, client, filename, expected):
        resource = ViewableResource(filename)
>       client.app.add_route('/', resource)

tests/test_headers.py:642: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe9964f6f10>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996f42290>, 'CHECK...2290>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996f42290>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method ViewableResource.on_get of <test_headers.ViewableResource object at 0x7fe9964df3a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________________ TestHeaders.test_append_link_multiple[asgi] __________________

self = <test_headers.TestHeaders object at 0x7fe8582b60e0>
client = <falcon.testing.client.TestClient object at 0x7fe996e61540>

    def test_append_link_multiple(self, client):
        expected_value = (
            '</things/2842>; rel=next, '
            + '<http://%C3%A7runchy/bacon>; rel=contents, '
            + '<ab%C3%A7>; rel="http://example.com/ext-type", '
            + '<ab%C3%A7>; rel="http://example.com/%C3%A7runchy", '
            + '<ab%C3%A7>; rel="https://example.com/too-%C3%A7runchy", '
            + '</alt-thing>; rel="alternate http://example.com/%C3%A7runchy"'
        )
    
        uri = 'ab\u00e7'
    
        resource = LinkHeaderResource()
        resource.add_link('/things/2842', 'next')
        resource.append_link('http://\u00e7runchy/bacon', 'contents')
        resource.append_link(uri, 'http://example.com/ext-type')
        resource.add_link(uri, 'http://example.com/\u00e7runchy')
        resource.append_link(uri, 'https://example.com/too-\u00e7runchy')
        resource.add_link('/alt-thing', 'alternate http://example.com/\u00e7runchy')
    
>       self._check_link_header(client, resource, expected_value)

tests/test_headers.py:880: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_headers.py:1060: in _check_link_header
    self._check_header(client, resource, 'Link', expected_value)
tests/test_headers.py:1063: in _check_header
    client.app.add_route('/', resource)
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996ceaf80>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996f42d40>, 'CHECK...2d40>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996f42d40>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method LinkHeaderResource.on_get of <test_headers.LinkHeaderResource object at 0x7fe996e608b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____________ TestHeaders.test_no_content_type[asgi-204 No Content] _____________

self = <test_headers.TestHeaders object at 0x7fe8582b5c00>
client = <falcon.testing.client.TestClient object at 0x7fe996b8a290>
status = '204 No Content'

    @pytest.mark.parametrize('status', (falcon.HTTP_204, falcon.HTTP_304))
    def test_no_content_type(self, client, status):
>       client.app.add_route('/', testing.SimpleTestResource(status=status))

tests/test_headers.py:842: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996f05fc0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996f428c0>, 'CHECK...28c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996f428c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fe996b8b940>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____ TestQueryParams.test_default[simulate_request_post_query_params-asgi] _____

self = <test_query_params.TestQueryParams object at 0x7fe857eb2ad0>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe996749330>
resource = <test_query_params.Resource object at 0x7fe99674a860>

    def test_default(self, simulate_request, client, resource):
        default = 'foobar'
        query_string = ''
>       client.app.add_route('/', resource)  # TODO: DRY up this setup logic

tests/test_query_params.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe99645c0b0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996cc4ca0>, 'CHECK...4ca0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996cc4ca0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe99674a860>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__ TestQueryParams.test_boolean_blank[simulate_request_get_query_params-asgi] __

self = <test_query_params.TestQueryParams object at 0x7fe857d2c3a0>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe9964affd0>
resource = <test_query_params.Resource object at 0x7fe9964acd90>

    def test_boolean_blank(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:591: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996a33290>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9969c16c0>, 'CHECK...16c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9969c16c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe9964acd90>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____ TestQueryParams.test_simple[simulate_request_get_query_params-asgi] ______

self = <test_query_params.TestQueryParams object at 0x7fe857eb2c20>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe996e88820>
resource = <test_query_params.Resource object at 0x7fe996e8bdc0>

    def test_simple(self, simulate_request, client, resource):
        query_string = 'marker=deadbeef&limit=25'
>       client.app.add_route('/', resource)

tests/test_query_params.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996f06260>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c87640>, 'CHECK...7640>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c87640>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996e8bdc0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_get_query_params-asgi-t=1&t=,1,4,,5&t=a,b,c-True-expected8] _

self = <test_query_params.TestQueryParams object at 0x7fe857edc790>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe996a0f460>
resource = <test_query_params.Resource object at 0x7fe996a0f220>
qs = 't=1&t=,1,4,,5&t=a,b,c', keep_blank = True
expected = ['1', '', '1', '4', '', '5', ...]

    @pytest.mark.parametrize(
        'qs, keep_blank, expected',
        [
            ('t=1&t=3,4', False, ['1', '3', '4']),
            ('t=1&t=2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', True, ['1', '', '2', '3', '4']),
            ('t=1,2&t=3,4,,5', False, ['1', '2', '3', '4', '5']),
            ('t=1&t=,1,4,,5', False, ['1', '1', '4', '5']),
            ('t=1&t=,1,4,,5', True, ['1', '', '1', '4', '', '5']),
            (
                't=1&t=,1,4,,5&t=a,b,c',
                True,
                ['1', '', '1', '4', '', '5', 'a', 'b', 'c'],
            ),
        ],
    )
    def test_option_auto_parse_qs_csv_multiple_fields_true(
        self,
        simulate_request,
        client,
        resource,
        qs,
        keep_blank,
        expected,
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996a1d380>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996f671c0>, 'CHECK...71c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996f671c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996a0f220>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_simple_true[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fe857eb3760>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe997081c00>
resource = <test_query_params.Resource object at 0x7fe997081c90>

    def test_option_auto_parse_qs_csv_simple_true(
        self, simulate_request, client, resource
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:175: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996a1d5b0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe99649ec20>, 'CHECK...ec20>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe99649ec20>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe997081c90>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________ TestQueryParams.test_get_param_as_json_no_handler_json[asgi] _________

self = <test_query_params.TestQueryParams object at 0x7fe857d71a50>
client = <falcon.testing.client.TestClient object at 0x7fe9964abbb0>
resource = <test_query_params.Resource object at 0x7fe9964aa980>

    def test_get_param_as_json_no_handler_json(self, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:938: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996a1c5f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996cc4ca0>, 'CHECK...4ca0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996cc4ca0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe9964aa980>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_dict_missing_param[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fe857d71180>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe996d3c580>
resource = <test_query_params.Resource object at 0x7fe996d3c700>

    def test_get_dict_missing_param(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:900: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996a1dfc0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe99643e320>, 'CHECK...e320>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe99643e320>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996d3c700>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_dict_missing_param[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fe857d70580>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe9964be8f0>
resource = <test_query_params.Resource object at 0x7fe9964bdbd0>

    def test_get_dict_missing_param(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:900: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996a1f7d0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9965e4e50>, 'CHECK...4e50>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9965e4e50>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe9964bdbd0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_complex_false[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fe857edd9f0>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe996b7d930>
resource = <test_query_params.Resource object at 0x7fe996b7e500>

    def test_option_auto_parse_qs_csv_complex_false(
        self, simulate_request, client, resource
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:245: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe9964ec120>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe99643f880>, 'CHECK...f880>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe99643f880>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996b7e500>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ TestQueryParams.test_none[simulate_request_post_query_params-asgi] ______

self = <test_query_params.TestQueryParams object at 0x7fe857eb2710>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe9964dd330>
resource = <test_query_params.Resource object at 0x7fe9964dfa30>

    def test_none(self, simulate_request, client, resource):
        query_string = ''
>       client.app.add_route('/', resource)  # TODO: DRY up this setup logic

tests/test_query_params.py:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996f06880>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe99643ce50>, 'CHECK...ce50>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe99643ce50>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe9964dfa30>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_get_query_params-asgi-t=1&t=,1,4,,5-True-expected7] _

self = <test_query_params.TestQueryParams object at 0x7fe857edc700>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe996773580>
resource = <test_query_params.Resource object at 0x7fe9967729e0>
qs = 't=1&t=,1,4,,5', keep_blank = True, expected = ['1', '', '1', '4', '', '5']

    @pytest.mark.parametrize(
        'qs, keep_blank, expected',
        [
            ('t=1&t=3,4', False, ['1', '3', '4']),
            ('t=1&t=2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', True, ['1', '', '2', '3', '4']),
            ('t=1,2&t=3,4,,5', False, ['1', '2', '3', '4', '5']),
            ('t=1&t=,1,4,,5', False, ['1', '1', '4', '5']),
            ('t=1&t=,1,4,,5', True, ['1', '', '1', '4', '', '5']),
            (
                't=1&t=,1,4,,5&t=a,b,c',
                True,
                ['1', '', '1', '4', '', '5', 'a', 'b', 'c'],
            ),
        ],
    )
    def test_option_auto_parse_qs_csv_multiple_fields_true(
        self,
        simulate_request,
        client,
        resource,
        qs,
        keep_blank,
        expected,
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe99646d690>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996f428c0>, 'CHECK...28c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996f428c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe9967729e0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_datetime_invalid[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fe857d70550>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe996614a60>
resource = <test_query_params.Resource object at 0x7fe996615e40>

    def test_get_datetime_invalid(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:882: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe9964f6f10>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe99643f010>, 'CHECK...f010>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe99643f010>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996615e40>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_get_query_params-asgi-t=1&t=2&t=3,4-False-expected1] _

self = <test_query_params.TestQueryParams object at 0x7fe857edc460>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe996790910>
resource = <test_query_params.Resource object at 0x7fe996791b70>
qs = 't=1&t=2&t=3,4', keep_blank = False, expected = ['1', '2', '3', '4']

    @pytest.mark.parametrize(
        'qs, keep_blank, expected',
        [
            ('t=1&t=3,4', False, ['1', '3', '4']),
            ('t=1&t=2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', True, ['1', '', '2', '3', '4']),
            ('t=1,2&t=3,4,,5', False, ['1', '2', '3', '4', '5']),
            ('t=1&t=,1,4,,5', False, ['1', '1', '4', '5']),
            ('t=1&t=,1,4,,5', True, ['1', '', '1', '4', '', '5']),
            (
                't=1&t=,1,4,,5&t=a,b,c',
                True,
                ['1', '', '1', '4', '', '5', 'a', 'b', 'c'],
            ),
        ],
    )
    def test_option_auto_parse_qs_csv_multiple_fields_true(
        self,
        simulate_request,
        client,
        resource,
        qs,
        keep_blank,
        expected,
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe9964ec9e0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe99649d7e0>, 'CHECK...d7e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe99649d7e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996791b70>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_date_missing_param[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fe857d2ef20>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe996ec6440>
resource = <test_query_params.Resource object at 0x7fe996ec6aa0>

    def test_get_date_missing_param(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:807: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996a1c2e0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c87880>, 'CHECK...7880>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c87880>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996ec6aa0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____ TestQueryParams.test_boolean[simulate_request_post_query_params-asgi] _____

self = <test_query_params.TestQueryParams object at 0x7fe857d2c5e0>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe9964f03d0>
resource = <test_query_params.Resource object at 0x7fe9964f33a0>

    def test_boolean(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:531: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996a1f060>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe99643e710>, 'CHECK...e710>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe99643e710>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe9964f33a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_get_query_params-asgi-t=1,,2&t=3,4-True-expected4] _

self = <test_query_params.TestQueryParams object at 0x7fe857edc610>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe99646bc10>
resource = <test_query_params.Resource object at 0x7fe99646b040>
qs = 't=1,,2&t=3,4', keep_blank = True, expected = ['1', '', '2', '3', '4']

    @pytest.mark.parametrize(
        'qs, keep_blank, expected',
        [
            ('t=1&t=3,4', False, ['1', '3', '4']),
            ('t=1&t=2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', True, ['1', '', '2', '3', '4']),
            ('t=1,2&t=3,4,,5', False, ['1', '2', '3', '4', '5']),
            ('t=1&t=,1,4,,5', False, ['1', '1', '4', '5']),
            ('t=1&t=,1,4,,5', True, ['1', '', '1', '4', '', '5']),
            (
                't=1&t=,1,4,,5&t=a,b,c',
                True,
                ['1', '', '1', '4', '', '5', 'a', 'b', 'c'],
            ),
        ],
    )
    def test_option_auto_parse_qs_csv_multiple_fields_true(
        self,
        simulate_request,
        client,
        resource,
        qs,
        keep_blank,
        expected,
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996f06ea0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe99643dcf0>, 'CHECK...dcf0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe99643dcf0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe99646b040>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_date_valid[simulate_request_get_query_params-asgi] __

self = <test_query_params.TestQueryParams object at 0x7fe857d2e8f0>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe996abb760>
resource = <test_query_params.Resource object at 0x7fe996ab92d0>

    def test_get_date_valid(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:799: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996a50040>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996a13d90>, 'CHECK...3d90>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996a13d90>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996ab92d0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________ TestQueryParams.test_get_param_as_json_handler_json[asgi] ___________

self = <test_query_params.TestQueryParams object at 0x7fe857d71690>
client = <falcon.testing.client.TestClient object at 0x7fe996b98250>
resource = <test_query_params.Resource object at 0x7fe996b98220>

    def test_get_param_as_json_handler_json(self, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:927: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996a50ba0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996a13760>, 'CHECK...3760>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996a13760>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996b98220>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_datetime_valid[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fe857d2fc40>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe99646bf10>
resource = <test_query_params.Resource object at 0x7fe99646b4f0>

    def test_get_datetime_valid(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:845: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996a511c0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996f67b50>, 'CHECK...7b50>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996f67b50>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe99646b4f0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_date_invalid[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fe857d2f430>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe996b9a950>
resource = <test_query_params.Resource object at 0x7fe996b992a0>

    def test_get_date_invalid(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:835: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996a534c0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996f41480>, 'CHECK...1480>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996f41480>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996b992a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_percent_encoded[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fe857eb3610>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe8445068f0>
resource = <test_query_params.Resource object at 0x7fe8445078e0>

    def test_percent_encoded(self, simulate_request, client, resource):
        query_string = 'id=23,42&q=%e8%b1%86+%e7%93%a3'
>       client.app.add_route('/', resource)

tests/test_query_params.py:144: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996a51e70>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996f428c0>, 'CHECK...28c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996f428c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe8445078e0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_date_store[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fe857d2f6a0>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe996ab3af0>
resource = <test_query_params.Resource object at 0x7fe996ab19c0>

    def test_get_date_store(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:825: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996a53b50>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996f41000>, 'CHECK...1000>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996f41000>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996ab19c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_datetime_store[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fe857d701c0>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe996aba230>
resource = <test_query_params.Resource object at 0x7fe996ab80a0>

    def test_get_datetime_store(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:871: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996a1dee0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996a11cf0>, 'CHECK...1cf0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996a11cf0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996ab80a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____ TestQueryParams.test_float_neg[simulate_request_get_query_params-asgi] ____

self = <test_query_params.TestQueryParams object at 0x7fe857edf940>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe996bc6050>
resource = <test_query_params.Resource object at 0x7fe9964bc5e0>

    def test_float_neg(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:478: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe99646f060>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c87760>, 'CHECK...7760>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c87760>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe9964bc5e0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_default_auto_parse_csv_behaviour[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fe857edd780>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe9967363b0>
resource = <test_query_params.Resource object at 0x7fe996736e30>

    def test_default_auto_parse_csv_behaviour(self, simulate_request, client, resource):
>       client.app.add_route('/', resource=resource)

tests/test_query_params.py:279: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996f07ed0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c85bd0>, 'CHECK...5bd0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c85bd0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996736e30>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_post_query_params-asgi-t=1&t=,1,4,,5-True-expected7] _

self = <test_query_params.TestQueryParams object at 0x7fe857edd120>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe99690bd30>
resource = <test_query_params.Resource object at 0x7fe996909690>
qs = 't=1&t=,1,4,,5', keep_blank = True, expected = ['1', '', '1', '4', '', '5']

    @pytest.mark.parametrize(
        'qs, keep_blank, expected',
        [
            ('t=1&t=3,4', False, ['1', '3', '4']),
            ('t=1&t=2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', True, ['1', '', '2', '3', '4']),
            ('t=1,2&t=3,4,,5', False, ['1', '2', '3', '4', '5']),
            ('t=1&t=,1,4,,5', False, ['1', '1', '4', '5']),
            ('t=1&t=,1,4,,5', True, ['1', '', '1', '4', '', '5']),
            (
                't=1&t=,1,4,,5&t=a,b,c',
                True,
                ['1', '', '1', '4', '', '5', 'a', 'b', 'c'],
            ),
        ],
    )
    def test_option_auto_parse_qs_csv_multiple_fields_true(
        self,
        simulate_request,
        client,
        resource,
        qs,
        keep_blank,
        expected,
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996a43840>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c85ea0>, 'CHECK...5ea0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c85ea0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996909690>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_required[simulate_request_post_query_params-asgi-get_param_as_int] _

self = <test_query_params.TestQueryParams object at 0x7fe857edef50>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe9968a1ab0>
resource = <test_query_params.Resource object at 0x7fe9968a01c0>
method_name = 'get_param_as_int'

    @pytest.mark.parametrize(
        'method_name',
        [
            'get_param',
            'get_param_as_int',
            'get_param_as_float',
            'get_param_as_uuid',
            'get_param_as_bool',
            'get_param_as_list',
        ],
    )
    def test_required(self, simulate_request, client, resource, method_name):
>       client.app.add_route('/', resource)

tests/test_query_params.py:334: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996a1eb20>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996f428c0>, 'CHECK...28c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996f428c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe9968a01c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_post_query_params-asgi-t=1,,2&t=3,4-False-expected3] _

self = <test_query_params.TestQueryParams object at 0x7fe857edcee0>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe99662ee30>
resource = <test_query_params.Resource object at 0x7fe99662d0f0>
qs = 't=1,,2&t=3,4', keep_blank = False, expected = ['1', '2', '3', '4']

    @pytest.mark.parametrize(
        'qs, keep_blank, expected',
        [
            ('t=1&t=3,4', False, ['1', '3', '4']),
            ('t=1&t=2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', True, ['1', '', '2', '3', '4']),
            ('t=1,2&t=3,4,,5', False, ['1', '2', '3', '4', '5']),
            ('t=1&t=,1,4,,5', False, ['1', '1', '4', '5']),
            ('t=1&t=,1,4,,5', True, ['1', '', '1', '4', '', '5']),
            (
                't=1&t=,1,4,,5&t=a,b,c',
                True,
                ['1', '', '1', '4', '', '5', 'a', 'b', 'c'],
            ),
        ],
    )
    def test_option_auto_parse_qs_csv_multiple_fields_true(
        self,
        simulate_request,
        client,
        resource,
        qs,
        keep_blank,
        expected,
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996a41e00>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9964f9a20>, 'CHECK...9a20>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9964f9a20>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe99662d0f0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_complex_false[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fe857edc370>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe84402d7e0>
resource = <test_query_params.Resource object at 0x7fe84402cc70>

    def test_option_auto_parse_qs_csv_complex_false(
        self, simulate_request, client, resource
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:245: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996a52420>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9964f9360>, 'CHECK...9360>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9964f9360>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe84402cc70>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____ TestQueryParams.test_simple[simulate_request_post_query_params-asgi] _____

self = <test_query_params.TestQueryParams object at 0x7fe857eb3250>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe9966a8c10>
resource = <test_query_params.Resource object at 0x7fe9966a9420>

    def test_simple(self, simulate_request, client, resource):
        query_string = 'marker=deadbeef&limit=25'
>       client.app.add_route('/', resource)

tests/test_query_params.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996a51460>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9964f8790>, 'CHECK...8790>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9964f8790>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe9966a9420>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ TestQueryParams.test_int[simulate_request_post_query_params-asgi] _______

self = <test_query_params.TestQueryParams object at 0x7fe857edf820>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe996405510>
resource = <test_query_params.Resource object at 0x7fe9964057b0>

    def test_int(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:350: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996a436f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996a13760>, 'CHECK...3760>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996a13760>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe9964057b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ TestQueryParams.test_uuid[simulate_request_get_query_params-asgi] _______

self = <test_query_params.TestQueryParams object at 0x7fe857e7ebc0>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe996889960>
resource = <test_query_params.Resource object at 0x7fe996888610>

    def test_uuid(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:502: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996a40120>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996a12b90>, 'CHECK...2b90>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996a12b90>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996888610>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_datetime_missing_param[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fe857d70040>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe996443e50>
resource = <test_query_params.Resource object at 0x7fe996440670>

    def test_get_datetime_missing_param(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:853: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996a1e9d0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe99643fd00>, 'CHECK...fd00>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe99643fd00>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996440670>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_required[simulate_request_get_query_params-asgi-get_param_as_bool] _

self = <test_query_params.TestQueryParams object at 0x7fe857edeb00>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe996956200>
resource = <test_query_params.Resource object at 0x7fe996957280>
method_name = 'get_param_as_bool'

    @pytest.mark.parametrize(
        'method_name',
        [
            'get_param',
            'get_param_as_int',
            'get_param_as_float',
            'get_param_as_uuid',
            'get_param_as_bool',
            'get_param_as_list',
        ],
    )
    def test_required(self, simulate_request, client, resource, method_name):
>       client.app.add_route('/', resource)

tests/test_query_params.py:334: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996a419a0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996ac0dc0>, 'CHECK...0dc0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996ac0dc0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996957280>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_get_query_params-asgi-t=1&t=3,4-False-expected0] _

self = <test_query_params.TestQueryParams object at 0x7fe857edc3d0>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe996b8bfa0>
resource = <test_query_params.Resource object at 0x7fe996b88220>
qs = 't=1&t=3,4', keep_blank = False, expected = ['1', '3', '4']

    @pytest.mark.parametrize(
        'qs, keep_blank, expected',
        [
            ('t=1&t=3,4', False, ['1', '3', '4']),
            ('t=1&t=2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', True, ['1', '', '2', '3', '4']),
            ('t=1,2&t=3,4,,5', False, ['1', '2', '3', '4', '5']),
            ('t=1&t=,1,4,,5', False, ['1', '1', '4', '5']),
            ('t=1&t=,1,4,,5', True, ['1', '', '1', '4', '', '5']),
            (
                't=1&t=,1,4,,5&t=a,b,c',
                True,
                ['1', '', '1', '4', '', '5', 'a', 'b', 'c'],
            ),
        ],
    )
    def test_option_auto_parse_qs_csv_multiple_fields_true(
        self,
        simulate_request,
        client,
        resource,
        qs,
        keep_blank,
        expected,
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996a41bd0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996a12950>, 'CHECK...2950>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996a12950>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996b88220>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____ TestQueryParams.test_float[simulate_request_post_query_params-asgi] ______

self = <test_query_params.TestQueryParams object at 0x7fe857edffa0>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe996ec6440>
resource = <test_query_params.Resource object at 0x7fe9964b5de0>

    def test_float(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:426: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996a409e0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c87eb0>, 'CHECK...7eb0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996c87eb0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe9964b5de0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_dict_invalid[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fe857d71900>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe996e88640>
resource = <test_query_params.Resource object at 0x7fe996e8bd60>

    def test_get_dict_invalid(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:918: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996a53ae0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996ac3490>, 'CHECK...3490>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996ac3490>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996e8bd60>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_multiple_keys_as_int[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fe857d2dbd0>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe9968777c0>
resource = <test_query_params.Resource object at 0x7fe996877940>

    def test_multiple_keys_as_int(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:772: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996a525e0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9964f8c10>, 'CHECK...8c10>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9964f8c10>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996877940>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_simple_false[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fe857eb39d0>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe99688a8f0>
resource = <test_query_params.Resource object at 0x7fe99688a980>

    def test_option_auto_parse_qs_csv_simple_false(
        self, simulate_request, client, resource
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:160: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996af7f40>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9964f83a0>, 'CHECK...83a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9964f83a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe99688a980>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___ TestQueryParams.test_float_neg[simulate_request_post_query_params-asgi] ____

self = <test_query_params.TestQueryParams object at 0x7fe857ede5f0>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe844541840>
resource = <test_query_params.Resource object at 0x7fe8445426e0>

    def test_float_neg(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:478: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996af6420>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9964fa4d0>, 'CHECK...a4d0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9964fa4d0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe8445426e0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____ TestQueryParams.test_default[simulate_request_get_query_params-asgi] _____

self = <test_query_params.TestQueryParams object at 0x7fe857eb24a0>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe9964f2800>
resource = <test_query_params.Resource object at 0x7fe9964f3760>

    def test_default(self, simulate_request, client, resource):
        default = 'foobar'
        query_string = ''
>       client.app.add_route('/', resource)  # TODO: DRY up this setup logic

tests/test_query_params.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996af4c10>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996ac2710>, 'CHECK...2710>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996ac2710>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe9964f3760>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_param_property[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fe857d2d6c0>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe996617040>
resource = <test_query_params.Resource object at 0x7fe996615e40>

    def test_param_property(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:738: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996af4b30>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996a13f40>, 'CHECK...3f40>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996a13f40>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996615e40>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_simple_true[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fe857eb3c10>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe9966aa0e0>
resource = <test_query_params.Resource object at 0x7fe9966abf10>

    def test_option_auto_parse_qs_csv_simple_true(
        self, simulate_request, client, resource
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:175: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996af5b60>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe99643f370>, 'CHECK...f370>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe99643f370>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe9966abf10>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_required[simulate_request_get_query_params-asgi-get_param] _

self = <test_query_params.TestQueryParams object at 0x7fe857ede7d0>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe996e5efe0>
resource = <test_query_params.Resource object at 0x7fe996e5fa60>
method_name = 'get_param'

    @pytest.mark.parametrize(
        'method_name',
        [
            'get_param',
            'get_param_as_int',
            'get_param_as_float',
            'get_param_as_uuid',
            'get_param_as_bool',
            'get_param_as_list',
        ],
    )
    def test_required(self, simulate_request, client, resource, method_name):
>       client.app.add_route('/', resource)

tests/test_query_params.py:334: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996af7d80>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996ac16c0>, 'CHECK...16c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996ac16c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996e5fa60>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_multiple_keys_as_int[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fe857d2e200>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe996735720>
resource = <test_query_params.Resource object at 0x7fe996735840>

    def test_multiple_keys_as_int(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:772: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996a519a0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996aa5120>, 'CHECK...5120>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996aa5120>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996735840>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_list_transformer[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fe857e7dab0>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe9964ae500>
resource = <test_query_params.Resource object at 0x7fe9964afee0>

    def test_list_transformer(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:702: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996a431b0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996aa7b50>, 'CHECK...7b50>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996aa7b50>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe9964afee0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_get_query_params-asgi-t=1,2&t=3,4,,5-False-expected5] _

self = <test_query_params.TestQueryParams object at 0x7fe857edc6a0>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe99662df60>
resource = <test_query_params.Resource object at 0x7fe99662c2b0>
qs = 't=1,2&t=3,4,,5', keep_blank = False, expected = ['1', '2', '3', '4', '5']

    @pytest.mark.parametrize(
        'qs, keep_blank, expected',
        [
            ('t=1&t=3,4', False, ['1', '3', '4']),
            ('t=1&t=2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', True, ['1', '', '2', '3', '4']),
            ('t=1,2&t=3,4,,5', False, ['1', '2', '3', '4', '5']),
            ('t=1&t=,1,4,,5', False, ['1', '1', '4', '5']),
            ('t=1&t=,1,4,,5', True, ['1', '', '1', '4', '', '5']),
            (
                't=1&t=,1,4,,5&t=a,b,c',
                True,
                ['1', '', '1', '4', '', '5', 'a', 'b', 'c'],
            ),
        ],
    )
    def test_option_auto_parse_qs_csv_multiple_fields_true(
        self,
        simulate_request,
        client,
        resource,
        qs,
        keep_blank,
        expected,
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996a409e0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996aa4f70>, 'CHECK...4f70>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996aa4f70>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe99662c2b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_multiple_form_keys_as_list[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fe857d2df60>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe996afa6e0>
resource = <test_query_params.Resource object at 0x7fe996af95d0>

    def test_multiple_form_keys_as_list(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:786: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe997043220>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe99643f370>, 'CHECK...f370>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe99643f370>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996af95d0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_param_property[simulate_request_get_query_params-asgi] __

self = <test_query_params.TestQueryParams object at 0x7fe857d2c760>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe996b99e70>
resource = <test_query_params.Resource object at 0x7fe996b9a1d0>

    def test_param_property(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:738: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe997042730>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996aa6d40>, 'CHECK...6d40>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996aa6d40>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996b9a1d0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_false[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fe857eb3fd0>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe996a0f2e0>
resource = <test_query_params.Resource object at 0x7fe996a0e8c0>

    def test_option_auto_parse_qs_csv_multiple_fields_false(
        self, simulate_request, client, resource
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:191: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996a1c190>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996aa5630>, 'CHECK...5630>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996aa5630>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996a0e8c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_date_valid[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fe857d2eb60>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe996416a70>
resource = <test_query_params.Resource object at 0x7fe9964156f0>

    def test_get_date_valid(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:799: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996af5c40>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996ac1a20>, 'CHECK...1a20>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996ac1a20>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe9964156f0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_list_type_blank[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fe857d2d120>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe996a62c80>
resource = <test_query_params.Resource object at 0x7fe996a61630>

    def test_list_type_blank(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:652: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996af7060>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996aa55a0>, 'CHECK...55a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996aa55a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996a61630>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_get_query_params-asgi-t=1,,2&t=3,4-False-expected3] _

self = <test_query_params.TestQueryParams object at 0x7fe857edc580>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe996ab8b20>
resource = <test_query_params.Resource object at 0x7fe996ab9ae0>
qs = 't=1,,2&t=3,4', keep_blank = False, expected = ['1', '2', '3', '4']

    @pytest.mark.parametrize(
        'qs, keep_blank, expected',
        [
            ('t=1&t=3,4', False, ['1', '3', '4']),
            ('t=1&t=2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', True, ['1', '', '2', '3', '4']),
            ('t=1,2&t=3,4,,5', False, ['1', '2', '3', '4', '5']),
            ('t=1&t=,1,4,,5', False, ['1', '1', '4', '5']),
            ('t=1&t=,1,4,,5', True, ['1', '', '1', '4', '', '5']),
            (
                't=1&t=,1,4,,5&t=a,b,c',
                True,
                ['1', '', '1', '4', '', '5', 'a', 'b', 'c'],
            ),
        ],
    )
    def test_option_auto_parse_qs_csv_multiple_fields_true(
        self,
        simulate_request,
        client,
        resource,
        qs,
        keep_blank,
        expected,
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996af5540>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996aa4a60>, 'CHECK...4a60>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996aa4a60>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996ab9ae0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_post_query_params-asgi-t=1&t=3,4-False-expected0] _

self = <test_query_params.TestQueryParams object at 0x7fe857edcd30>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe99662c1c0>
resource = <test_query_params.Resource object at 0x7fe99662ce50>
qs = 't=1&t=3,4', keep_blank = False, expected = ['1', '3', '4']

    @pytest.mark.parametrize(
        'qs, keep_blank, expected',
        [
            ('t=1&t=3,4', False, ['1', '3', '4']),
            ('t=1&t=2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', True, ['1', '', '2', '3', '4']),
            ('t=1,2&t=3,4,,5', False, ['1', '2', '3', '4', '5']),
            ('t=1&t=,1,4,,5', False, ['1', '1', '4', '5']),
            ('t=1&t=,1,4,,5', True, ['1', '', '1', '4', '', '5']),
            (
                't=1&t=,1,4,,5&t=a,b,c',
                True,
                ['1', '', '1', '4', '', '5', 'a', 'b', 'c'],
            ),
        ],
    )
    def test_option_auto_parse_qs_csv_multiple_fields_true(
        self,
        simulate_request,
        client,
        resource,
        qs,
        keep_blank,
        expected,
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe997043990>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996a64a60>, 'CHECK...4a60>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996a64a60>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe99662ce50>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_percent_encoded[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fe857eb2fe0>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe8445072b0>
resource = <test_query_params.Resource object at 0x7fe99688aaa0>

    def test_percent_encoded(self, simulate_request, client, resource):
        query_string = 'id=23,42&q=%e8%b1%86+%e7%93%a3'
>       client.app.add_route('/', resource)

tests/test_query_params.py:144: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996af5310>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996aa7be0>, 'CHECK...7be0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996aa7be0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe99688aaa0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_allowed_names[simulate_request_post_query_params-asgi] __

self = <test_query_params.TestQueryParams object at 0x7fe857ede4d0>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe99641a3b0>
resource = <test_query_params.Resource object at 0x7fe9964184f0>

    def test_allowed_names(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:301: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe997043a00>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996aa6a70>, 'CHECK...6a70>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996aa6a70>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe9964184f0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_required[simulate_request_post_query_params-asgi-get_param_as_float] _

self = <test_query_params.TestQueryParams object at 0x7fe857edefe0>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe996b9bcd0>
resource = <test_query_params.Resource object at 0x7fe996b99db0>
method_name = 'get_param_as_float'

    @pytest.mark.parametrize(
        'method_name',
        [
            'get_param',
            'get_param_as_int',
            'get_param_as_float',
            'get_param_as_uuid',
            'get_param_as_bool',
            'get_param_as_list',
        ],
    )
    def test_required(self, simulate_request, client, resource, method_name):
>       client.app.add_route('/', resource)

tests/test_query_params.py:334: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe997041850>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996aa5000>, 'CHECK...5000>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996aa5000>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996b99db0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_datetime_invalid[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fe857d70b80>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe996ab8340>
resource = <test_query_params.Resource object at 0x7fe996aba710>

    def test_get_datetime_invalid(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:882: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe997040350>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996aa7f40>, 'CHECK...7f40>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996aa7f40>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996aba710>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__ TestQueryParams.test_allowed_names[simulate_request_get_query_params-asgi] __

self = <test_query_params.TestQueryParams object at 0x7fe857eddea0>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe996815cc0>
resource = <test_query_params.Resource object at 0x7fe996815d80>

    def test_allowed_names(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:301: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996a1c040>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996a65ab0>, 'CHECK...5ab0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996a65ab0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996815d80>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_get_query_params-asgi-t=1&t=,1,4,,5-False-expected6] _

self = <test_query_params.TestQueryParams object at 0x7fe857eb2c50>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe9964defe0>
resource = <test_query_params.Resource object at 0x7fe9964dfeb0>
qs = 't=1&t=,1,4,,5', keep_blank = False, expected = ['1', '1', '4', '5']

    @pytest.mark.parametrize(
        'qs, keep_blank, expected',
        [
            ('t=1&t=3,4', False, ['1', '3', '4']),
            ('t=1&t=2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', True, ['1', '', '2', '3', '4']),
            ('t=1,2&t=3,4,,5', False, ['1', '2', '3', '4', '5']),
            ('t=1&t=,1,4,,5', False, ['1', '1', '4', '5']),
            ('t=1&t=,1,4,,5', True, ['1', '', '1', '4', '', '5']),
            (
                't=1&t=,1,4,,5&t=a,b,c',
                True,
                ['1', '', '1', '4', '', '5', 'a', 'b', 'c'],
            ),
        ],
    )
    def test_option_auto_parse_qs_csv_multiple_fields_true(
        self,
        simulate_request,
        client,
        resource,
        qs,
        keep_blank,
        expected,
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996a43b50>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996a64c10>, 'CHECK...4c10>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996a64c10>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe9964dfeb0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______ TestQueryParams.test_int[simulate_request_get_query_params-asgi] _______

self = <test_query_params.TestQueryParams object at 0x7fe857ede8c0>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe996430250>
resource = <test_query_params.Resource object at 0x7fe996433850>

    def test_int(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:350: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe997059310>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996aa56c0>, 'CHECK...56c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996aa56c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996433850>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_list_transformer[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fe857d2d450>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe99648cbb0>
resource = <test_query_params.Resource object at 0x7fe99648dc60>

    def test_list_transformer(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:702: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe99705b290>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996aa7ac0>, 'CHECK...7ac0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996aa7ac0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe99648dc60>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_required[simulate_request_get_query_params-asgi-get_param_as_list] _

self = <test_query_params.TestQueryParams object at 0x7fe857edeb90>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe9964eafb0>
resource = <test_query_params.Resource object at 0x7fe9964e8bb0>
method_name = 'get_param_as_list'

    @pytest.mark.parametrize(
        'method_name',
        [
            'get_param',
            'get_param_as_int',
            'get_param_as_float',
            'get_param_as_uuid',
            'get_param_as_bool',
            'get_param_as_list',
        ],
    )
    def test_required(self, simulate_request, client, resource, method_name):
>       client.app.add_route('/', resource)

tests/test_query_params.py:334: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe997058430>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996aa5870>, 'CHECK...5870>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996aa5870>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe9964e8bb0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_required[simulate_request_post_query_params-asgi-get_param] _

self = <test_query_params.TestQueryParams object at 0x7fe857edeec0>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe996bee350>
resource = <test_query_params.Resource object at 0x7fe996bec8b0>
method_name = 'get_param'

    @pytest.mark.parametrize(
        'method_name',
        [
            'get_param',
            'get_param_as_int',
            'get_param_as_float',
            'get_param_as_uuid',
            'get_param_as_bool',
            'get_param_as_list',
        ],
    )
    def test_required(self, simulate_request, client, resource, method_name):
>       client.app.add_route('/', resource)

tests/test_query_params.py:334: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe99705b760>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996a66ef0>, 'CHECK...6ef0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996a66ef0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996bec8b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_date_store[simulate_request_get_query_params-asgi] __

self = <test_query_params.TestQueryParams object at 0x7fe857d2f070>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe996889ea0>
resource = <test_query_params.Resource object at 0x7fe996888820>

    def test_get_date_store(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:825: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe99705a6c0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996a643a0>, 'CHECK...43a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996a643a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996888820>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_post_query_params-asgi-t=1&t=,1,4,,5&t=a,b,c-True-expected8] _

self = <test_query_params.TestQueryParams object at 0x7fe857edd1b0>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe996861090>
resource = <test_query_params.Resource object at 0x7fe996863580>
qs = 't=1&t=,1,4,,5&t=a,b,c', keep_blank = True
expected = ['1', '', '1', '4', '', '5', ...]

    @pytest.mark.parametrize(
        'qs, keep_blank, expected',
        [
            ('t=1&t=3,4', False, ['1', '3', '4']),
            ('t=1&t=2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', True, ['1', '', '2', '3', '4']),
            ('t=1,2&t=3,4,,5', False, ['1', '2', '3', '4', '5']),
            ('t=1&t=,1,4,,5', False, ['1', '1', '4', '5']),
            ('t=1&t=,1,4,,5', True, ['1', '', '1', '4', '', '5']),
            (
                't=1&t=,1,4,,5&t=a,b,c',
                True,
                ['1', '', '1', '4', '', '5', 'a', 'b', 'c'],
            ),
        ],
    )
    def test_option_auto_parse_qs_csv_multiple_fields_true(
        self,
        simulate_request,
        client,
        resource,
        qs,
        keep_blank,
        expected,
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996af5a80>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996a67370>, 'CHECK...7370>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996a67370>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996863580>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_bad_percentage[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fe857ede110>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe996afa200>
resource = <test_query_params.Resource object at 0x7fe996afae60>

    def test_bad_percentage(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:290: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe997040200>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996a656c0>, 'CHECK...56c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996a656c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996afae60>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_multiple_keys_as_bool[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fe857d2de40>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe996b98be0>
resource = <test_query_params.Resource object at 0x7fe996b98a00>

    def test_multiple_keys_as_bool(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:765: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe997041cb0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996a67520>, 'CHECK...7520>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996a67520>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996b98a00>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_false[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fe857eb2bf0>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe996d85ba0>
resource = <test_query_params.Resource object at 0x7fe996d84d00>

    def test_option_auto_parse_qs_csv_multiple_fields_false(
        self, simulate_request, client, resource
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:191: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996af6dc0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996aa4ca0>, 'CHECK...4ca0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996aa4ca0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996d84d00>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_post_query_params-asgi-t=1,,2&t=3,4-True-expected4] _

self = <test_query_params.TestQueryParams object at 0x7fe857edcf70>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe9969563b0>
resource = <test_query_params.Resource object at 0x7fe996956c20>
qs = 't=1,,2&t=3,4', keep_blank = True, expected = ['1', '', '2', '3', '4']

    @pytest.mark.parametrize(
        'qs, keep_blank, expected',
        [
            ('t=1&t=3,4', False, ['1', '3', '4']),
            ('t=1&t=2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', True, ['1', '', '2', '3', '4']),
            ('t=1,2&t=3,4,,5', False, ['1', '2', '3', '4', '5']),
            ('t=1&t=,1,4,,5', False, ['1', '1', '4', '5']),
            ('t=1&t=,1,4,,5', True, ['1', '', '1', '4', '', '5']),
            (
                't=1&t=,1,4,,5&t=a,b,c',
                True,
                ['1', '', '1', '4', '', '5', 'a', 'b', 'c'],
            ),
        ],
    )
    def test_option_auto_parse_qs_csv_multiple_fields_true(
        self,
        simulate_request,
        client,
        resource,
        qs,
        keep_blank,
        expected,
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe99705b990>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996ac16c0>, 'CHECK...16c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996ac16c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996956c20>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ TestQueryParams.test_float[simulate_request_get_query_params-asgi] ______

self = <test_query_params.TestQueryParams object at 0x7fe857edf970>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe996872800>
resource = <test_query_params.Resource object at 0x7fe996872f20>

    def test_float(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:426: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe99705b450>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996a66680>, 'CHECK...6680>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996a66680>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996872f20>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_dict_invalid[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fe857d712d0>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe996ab3220>
resource = <test_query_params.Resource object at 0x7fe996ab14b0>

    def test_get_dict_invalid(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:918: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe997058c10>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996a67a30>, 'CHECK...7a30>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996a67a30>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996ab14b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_post_query_params-asgi-t=1,2&t=3,4-False-expected2] _

self = <test_query_params.TestQueryParams object at 0x7fe857edce50>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe996821ff0>
resource = <test_query_params.Resource object at 0x7fe996821f30>
qs = 't=1,2&t=3,4', keep_blank = False, expected = ['1', '2', '3', '4']

    @pytest.mark.parametrize(
        'qs, keep_blank, expected',
        [
            ('t=1&t=3,4', False, ['1', '3', '4']),
            ('t=1&t=2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', True, ['1', '', '2', '3', '4']),
            ('t=1,2&t=3,4,,5', False, ['1', '2', '3', '4', '5']),
            ('t=1&t=,1,4,,5', False, ['1', '1', '4', '5']),
            ('t=1&t=,1,4,,5', True, ['1', '', '1', '4', '', '5']),
            (
                't=1&t=,1,4,,5&t=a,b,c',
                True,
                ['1', '', '1', '4', '', '5', 'a', 'b', 'c'],
            ),
        ],
    )
    def test_option_auto_parse_qs_csv_multiple_fields_true(
        self,
        simulate_request,
        client,
        resource,
        qs,
        keep_blank,
        expected,
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe997040c10>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996a64e50>, 'CHECK...4e50>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996a64e50>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996821f30>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_multiple_keys_as_bool[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fe857d2d810>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe996bee380>
resource = <test_query_params.Resource object at 0x7fe996bed5a0>

    def test_multiple_keys_as_bool(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:765: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe997046110>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996a65bd0>, 'CHECK...5bd0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996a65bd0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996bed5a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____ TestQueryParams.test_blank[simulate_request_post_query_params-asgi] ______

self = <test_query_params.TestQueryParams object at 0x7fe857eb2e90>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe9970f27a0>
resource = <test_query_params.Resource object at 0x7fe9970f05b0>

    def test_blank(self, simulate_request, client, resource):
        query_string = 'marker='
>       client.app.add_route('/', resource)

tests/test_query_params.py:118: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe9970442e0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9970d4b80>, 'CHECK...4b80>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9970d4b80>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe9970f05b0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_multiple_keys_as_float[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fe857d2e5c0>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe996ab1120>
resource = <test_query_params.Resource object at 0x7fe996ab0070>

    def test_multiple_keys_as_float(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:779: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe997044890>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996a67370>, 'CHECK...7370>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996a67370>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996ab0070>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_date_valid_with_format[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fe857d2f2e0>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe99663a530>
resource = <test_query_params.Resource object at 0x7fe996639090>

    def test_get_date_valid_with_format(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:814: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe99705b840>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996a67130>, 'CHECK...7130>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996a67130>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996639090>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_simple_false[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fe857eb33a0>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe996e5e200>
resource = <test_query_params.Resource object at 0x7fe996e5c250>

    def test_option_auto_parse_qs_csv_simple_false(
        self, simulate_request, client, resource
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:160: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe99705bbc0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996a668c0>, 'CHECK...68c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996a668c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996e5c250>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____ TestQueryParams.test_has_param[simulate_request_get_query_params-asgi] ____

self = <test_query_params.TestQueryParams object at 0x7fe857d71cc0>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe996a62590>
resource = <test_query_params.Resource object at 0x7fe996a63730>

    def test_has_param(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:947: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe997040350>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996a649d0>, 'CHECK...49d0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996a649d0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996a63730>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____ TestQueryParams.test_list_type[simulate_request_get_query_params-asgi] ____

self = <test_query_params.TestQueryParams object at 0x7fe857d2c730>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe9970ed990>
resource = <test_query_params.Resource object at 0x7fe9970ecdc0>

    def test_list_type(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:609: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe997046c00>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9970d60e0>, 'CHECK...60e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9970d60e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe9970ecdc0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_post_query_params-asgi-t=1&t=,1,4,,5-False-expected6] _

self = <test_query_params.TestQueryParams object at 0x7fe857edd090>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe996771e10>
resource = <test_query_params.Resource object at 0x7fe996771060>
qs = 't=1&t=,1,4,,5', keep_blank = False, expected = ['1', '1', '4', '5']

    @pytest.mark.parametrize(
        'qs, keep_blank, expected',
        [
            ('t=1&t=3,4', False, ['1', '3', '4']),
            ('t=1&t=2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', True, ['1', '', '2', '3', '4']),
            ('t=1,2&t=3,4,,5', False, ['1', '2', '3', '4', '5']),
            ('t=1&t=,1,4,,5', False, ['1', '1', '4', '5']),
            ('t=1&t=,1,4,,5', True, ['1', '', '1', '4', '', '5']),
            (
                't=1&t=,1,4,,5&t=a,b,c',
                True,
                ['1', '', '1', '4', '', '5', 'a', 'b', 'c'],
            ),
        ],
    )
    def test_option_auto_parse_qs_csv_multiple_fields_true(
        self,
        simulate_request,
        client,
        resource,
        qs,
        keep_blank,
        expected,
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe9970474c0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9970d7520>, 'CHECK...7520>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9970d7520>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996771060>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_dict_store[simulate_request_get_query_params-asgi] __

self = <test_query_params.TestQueryParams object at 0x7fe857d70520>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe996442980>
resource = <test_query_params.Resource object at 0x7fe996443430>

    def test_get_dict_store(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:908: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe997047ca0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9970d6d40>, 'CHECK...6d40>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9970d6d40>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996443430>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_multiple_form_keys[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fe857d2c700>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe996ab13f0>
resource = <test_query_params.Resource object at 0x7fe996ab1060>

    def test_multiple_form_keys(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:751: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe9968e8200>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996a67370>, 'CHECK...7370>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996a67370>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996ab1060>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_required[simulate_request_get_query_params-asgi-get_param_as_int] _

self = <test_query_params.TestQueryParams object at 0x7fe857ede950>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe996e88790>
resource = <test_query_params.Resource object at 0x7fe996e89c00>
method_name = 'get_param_as_int'

    @pytest.mark.parametrize(
        'method_name',
        [
            'get_param',
            'get_param_as_int',
            'get_param_as_float',
            'get_param_as_uuid',
            'get_param_as_bool',
            'get_param_as_list',
        ],
    )
    def test_required(self, simulate_request, client, resource, method_name):
>       client.app.add_route('/', resource)

tests/test_query_params.py:334: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe9968e8a50>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996a668c0>, 'CHECK...68c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996a668c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996e89c00>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_datetime_store[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fe857d707c0>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe9964313c0>
resource = <test_query_params.Resource object at 0x7fe996432fe0>

    def test_get_datetime_store(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:871: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe9968e90e0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996a66290>, 'CHECK...6290>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996a66290>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996432fe0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_multiple_form_keys[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fe857d2da80>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe996e5e230>
resource = <test_query_params.Resource object at 0x7fe996e5c310>

    def test_multiple_form_keys(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:751: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe9968e9700>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9970d57e0>, 'CHECK...57e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9970d57e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996e5c310>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_required[simulate_request_get_query_params-asgi-get_param_as_float] _

self = <test_query_params.TestQueryParams object at 0x7fe857ede9e0>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe996815090>
resource = <test_query_params.Resource object at 0x7fe996814490>
method_name = 'get_param_as_float'

    @pytest.mark.parametrize(
        'method_name',
        [
            'get_param',
            'get_param_as_int',
            'get_param_as_float',
            'get_param_as_uuid',
            'get_param_as_bool',
            'get_param_as_list',
        ],
    )
    def test_required(self, simulate_request, client, resource, method_name):
>       client.app.add_route('/', resource)

tests/test_query_params.py:334: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe9968eb610>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9970d7010>, 'CHECK...7010>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9970d7010>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996814490>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_list_type_blank[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fe857d2caf0>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe996418a60>
resource = <test_query_params.Resource object at 0x7fe996419c60>

    def test_list_type_blank(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:652: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe997059b60>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9970d67a0>, 'CHECK...67a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9970d67a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996419c60>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_required[simulate_request_get_query_params-asgi-get_param_as_uuid] _

self = <test_query_params.TestQueryParams object at 0x7fe857edea70>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe996426a70>
resource = <test_query_params.Resource object at 0x7fe996426da0>
method_name = 'get_param_as_uuid'

    @pytest.mark.parametrize(
        'method_name',
        [
            'get_param',
            'get_param_as_int',
            'get_param_as_float',
            'get_param_as_uuid',
            'get_param_as_bool',
            'get_param_as_list',
        ],
    )
    def test_required(self, simulate_request, client, resource, method_name):
>       client.app.add_route('/', resource)

tests/test_query_params.py:334: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe997041700>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9970d7d90>, 'CHECK...7d90>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9970d7d90>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996426da0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___ TestQueryParams.test_list_type[simulate_request_post_query_params-asgi] ____

self = <test_query_params.TestQueryParams object at 0x7fe857d2cd60>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe9968a1ed0>
resource = <test_query_params.Resource object at 0x7fe9968a0790>

    def test_list_type(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:609: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe997047c30>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9970d6b90>, 'CHECK...6b90>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9970d6b90>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe9968a0790>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_required[simulate_request_post_query_params-asgi-get_param_as_bool] _

self = <test_query_params.TestQueryParams object at 0x7fe857edf100>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe996adf880>
resource = <test_query_params.Resource object at 0x7fe996ade410>
method_name = 'get_param_as_bool'

    @pytest.mark.parametrize(
        'method_name',
        [
            'get_param',
            'get_param_as_int',
            'get_param_as_float',
            'get_param_as_uuid',
            'get_param_as_bool',
            'get_param_as_list',
        ],
    )
    def test_required(self, simulate_request, client, resource, method_name):
>       client.app.add_route('/', resource)

tests/test_query_params.py:334: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe9968e8660>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996aa6c20>, 'CHECK...6c20>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996aa6c20>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996ade410>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_default_auto_parse_csv_behaviour[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fe857edd7b0>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe996840af0>
resource = <test_query_params.Resource object at 0x7fe9968429e0>

    def test_default_auto_parse_csv_behaviour(self, simulate_request, client, resource):
>       client.app.add_route('/', resource=resource)

tests/test_query_params.py:279: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe9968e8890>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9970d4550>, 'CHECK...4550>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9970d4550>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe9968429e0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_post_query_params-asgi-t=1,2&t=3,4,,5-False-expected5] _

self = <test_query_params.TestQueryParams object at 0x7fe857edd000>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe996853820>
resource = <test_query_params.Resource object at 0x7fe996852230>
qs = 't=1,2&t=3,4,,5', keep_blank = False, expected = ['1', '2', '3', '4', '5']

    @pytest.mark.parametrize(
        'qs, keep_blank, expected',
        [
            ('t=1&t=3,4', False, ['1', '3', '4']),
            ('t=1&t=2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', True, ['1', '', '2', '3', '4']),
            ('t=1,2&t=3,4,,5', False, ['1', '2', '3', '4', '5']),
            ('t=1&t=,1,4,,5', False, ['1', '1', '4', '5']),
            ('t=1&t=,1,4,,5', True, ['1', '', '1', '4', '', '5']),
            (
                't=1&t=,1,4,,5&t=a,b,c',
                True,
                ['1', '', '1', '4', '', '5', 'a', 'b', 'c'],
            ),
        ],
    )
    def test_option_auto_parse_qs_csv_multiple_fields_true(
        self,
        simulate_request,
        client,
        resource,
        qs,
        keep_blank,
        expected,
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe9968e9460>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9970d7910>, 'CHECK...7910>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9970d7910>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996852230>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_post_query_params-asgi-t=1&t=2&t=3,4-False-expected1] _

self = <test_query_params.TestQueryParams object at 0x7fe857edcdc0>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe9923abaf0>
resource = <test_query_params.Resource object at 0x7fe9923abac0>
qs = 't=1&t=2&t=3,4', keep_blank = False, expected = ['1', '2', '3', '4']

    @pytest.mark.parametrize(
        'qs, keep_blank, expected',
        [
            ('t=1&t=3,4', False, ['1', '3', '4']),
            ('t=1&t=2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', True, ['1', '', '2', '3', '4']),
            ('t=1,2&t=3,4,,5', False, ['1', '2', '3', '4', '5']),
            ('t=1&t=,1,4,,5', False, ['1', '1', '4', '5']),
            ('t=1&t=,1,4,,5', True, ['1', '', '1', '4', '', '5']),
            (
                't=1&t=,1,4,,5&t=a,b,c',
                True,
                ['1', '', '1', '4', '', '5', 'a', 'b', 'c'],
            ),
        ],
    )
    def test_option_auto_parse_qs_csv_multiple_fields_true(
        self,
        simulate_request,
        client,
        resource,
        qs,
        keep_blank,
        expected,
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe997041690>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9970d6170>, 'CHECK...6170>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9970d6170>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe9923abac0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_dict_valid[simulate_request_get_query_params-asgi] __

self = <test_query_params.TestQueryParams object at 0x7fe857d70910>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe996852860>
resource = <test_query_params.Resource object at 0x7fe996850400>

    def test_get_dict_valid(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:892: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe997044d60>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9968cd6c0>, 'CHECK...d6c0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9968cd6c0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996850400>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_dict_store[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fe857d71540>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe996e623b0>
resource = <test_query_params.Resource object at 0x7fe996e62560>

    def test_get_dict_store(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:908: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe997044190>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9968ce200>, 'CHECK...e200>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9968ce200>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996e62560>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_bad_percentage[simulate_request_get_query_params-asgi] __

self = <test_query_params.TestQueryParams object at 0x7fe857eddb40>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe996e8b9a0>
resource = <test_query_params.Resource object at 0x7fe996e8b6a0>

    def test_bad_percentage(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:290: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe99681fed0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9968cc160>, 'CHECK...c160>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9968cc160>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996e8b6a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_required[simulate_request_post_query_params-asgi-get_param_as_list] _

self = <test_query_params.TestQueryParams object at 0x7fe857edf190>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe9967712d0>
resource = <test_query_params.Resource object at 0x7fe996773a30>
method_name = 'get_param_as_list'

    @pytest.mark.parametrize(
        'method_name',
        [
            'get_param',
            'get_param_as_int',
            'get_param_as_float',
            'get_param_as_uuid',
            'get_param_as_bool',
            'get_param_as_list',
        ],
    )
    def test_required(self, simulate_request, client, resource, method_name):
>       client.app.add_route('/', resource)

tests/test_query_params.py:334: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe99681fd10>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9970d70a0>, 'CHECK...70a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9970d70a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996773a30>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_datetime_missing_param[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fe857d2f820>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe9964b6c20>
resource = <test_query_params.Resource object at 0x7fe9964b4520>

    def test_get_datetime_missing_param(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:853: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe99681e960>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9970d7e20>, 'CHECK...7e20>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9970d7e20>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe9964b4520>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_date_valid_with_format[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fe857d2ecb0>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe9923a8e80>
resource = <test_query_params.Resource object at 0x7fe9923a9330>

    def test_get_date_valid_with_format(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:814: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe99681f610>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9968ce170>, 'CHECK...e170>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9968ce170>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe9923a9330>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ TestQueryParams.test_none[simulate_request_get_query_params-asgi] _______

self = <test_query_params.TestQueryParams object at 0x7fe857eb2470>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe996815900>
resource = <test_query_params.Resource object at 0x7fe996816f50>

    def test_none(self, simulate_request, client, resource):
        query_string = ''
>       client.app.add_route('/', resource)  # TODO: DRY up this setup logic

tests/test_query_params.py:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe99681edc0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9968ceb90>, 'CHECK...eb90>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9968ceb90>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996816f50>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_multiple_form_keys_as_list[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fe857d2e710>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe996e5efe0>
resource = <test_query_params.Resource object at 0x7fe996e5dea0>

    def test_multiple_form_keys_as_list(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:786: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe9968e8660>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9968cfa30>, 'CHECK...fa30>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9968cfa30>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996e5dea0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___ TestQueryParams.test_has_param[simulate_request_post_query_params-asgi] ____

self = <test_query_params.TestQueryParams object at 0x7fe857d721a0>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe996405840>
resource = <test_query_params.Resource object at 0x7fe996404bb0>

    def test_has_param(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:947: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996af66c0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9968cd3f0>, 'CHECK...d3f0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9968cd3f0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996404bb0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ TestQueryParams.test_blank[simulate_request_get_query_params-asgi] ______

self = <test_query_params.TestQueryParams object at 0x7fe857eb2860>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe9964ac190>
resource = <test_query_params.Resource object at 0x7fe9964ae710>

    def test_blank(self, simulate_request, client, resource):
        query_string = 'marker='
>       client.app.add_route('/', resource)

tests/test_query_params.py:118: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe9970447b0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9968cf9a0>, 'CHECK...f9a0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9968cf9a0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe9964ae710>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_boolean_blank[simulate_request_post_query_params-asgi] __

self = <test_query_params.TestQueryParams object at 0x7fe857d2c9a0>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe996405d50>
resource = <test_query_params.Resource object at 0x7fe996407a60>

    def test_boolean_blank(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:591: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe9968eb840>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9968cc1f0>, 'CHECK...c1f0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9968cc1f0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996407a60>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_datetime_valid_with_format[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fe857d70190>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe9964b6ec0>
resource = <test_query_params.Resource object at 0x7fe9964b5b70>

    def test_get_datetime_valid_with_format(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:860: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe99681f840>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9970d4700>, 'CHECK...4700>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9970d4700>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe9964b5b70>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_datetime_valid_with_format[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fe857d70400>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe996736260>
resource = <test_query_params.Resource object at 0x7fe996737df0>

    def test_get_datetime_valid_with_format(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:860: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe99681f5a0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9968cdbd0>, 'CHECK...dbd0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9968cdbd0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996737df0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ TestQueryParams.test_uuid[simulate_request_post_query_params-asgi] ______

self = <test_query_params.TestQueryParams object at 0x7fe8581269e0>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe996a0d780>
resource = <test_query_params.Resource object at 0x7fe9970813c0>

    def test_uuid(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:502: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe99681c580>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9968cfac0>, 'CHECK...fac0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9968cfac0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe9970813c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_multiple_keys_as_float[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fe857d2df90>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe9970ef460>
resource = <test_query_params.Resource object at 0x7fe9970ecbe0>

    def test_multiple_keys_as_float(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:779: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe997044660>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9968cd990>, 'CHECK...d990>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9968cd990>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe9970ecbe0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_date_invalid[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fe857d2fa60>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe996842bc0>
resource = <test_query_params.Resource object at 0x7fe996843ee0>

    def test_get_date_invalid(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:835: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe99686da10>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9968ccaf0>, 'CHECK...caf0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9968ccaf0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996843ee0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____ TestQueryParams.test_int_neg[simulate_request_get_query_params-asgi] _____

self = <test_query_params.TestQueryParams object at 0x7fe857edf5b0>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe996b98c10>
resource = <test_query_params.Resource object at 0x7fe996b98940>

    def test_int_neg(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:402: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe99686d230>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9968cf760>, 'CHECK...f760>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9968cf760>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996b98940>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_required[simulate_request_post_query_params-asgi-get_param_as_uuid] _

self = <test_query_params.TestQueryParams object at 0x7fe857edf070>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe996892aa0>
resource = <test_query_params.Resource object at 0x7fe996893670>
method_name = 'get_param_as_uuid'

    @pytest.mark.parametrize(
        'method_name',
        [
            'get_param',
            'get_param_as_int',
            'get_param_as_float',
            'get_param_as_uuid',
            'get_param_as_bool',
            'get_param_as_list',
        ],
    )
    def test_required(self, simulate_request, client, resource, method_name):
>       client.app.add_route('/', resource)

tests/test_query_params.py:334: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe99686f7d0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9968cfbe0>, 'CHECK...fbe0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9968cfbe0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996893670>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_____ TestQueryParams.test_boolean[simulate_request_get_query_params-asgi] _____

self = <test_query_params.TestQueryParams object at 0x7fe857d2c310>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe996a63c40>
resource = <test_query_params.Resource object at 0x7fe996a61c30>

    def test_boolean(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:531: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe99686cb30>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9968cd990>, 'CHECK...d990>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9968cd990>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996a61c30>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
____ TestQueryParams.test_int_neg[simulate_request_post_query_params-asgi] _____

self = <test_query_params.TestQueryParams object at 0x7fe857edfbe0>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe996425330>
resource = <test_query_params.Resource object at 0x7fe996424880>

    def test_int_neg(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:402: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe99686c2e0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9968cf5b0>, 'CHECK...f5b0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9968cf5b0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996424880>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_get_query_params-asgi-t=1,2&t=3,4-False-expected2] _

self = <test_query_params.TestQueryParams object at 0x7fe857edc4f0>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe9964bdbd0>
resource = <test_query_params.Resource object at 0x7fe9964bec20>
qs = 't=1,2&t=3,4', keep_blank = False, expected = ['1', '2', '3', '4']

    @pytest.mark.parametrize(
        'qs, keep_blank, expected',
        [
            ('t=1&t=3,4', False, ['1', '3', '4']),
            ('t=1&t=2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', False, ['1', '2', '3', '4']),
            ('t=1,,2&t=3,4', True, ['1', '', '2', '3', '4']),
            ('t=1,2&t=3,4,,5', False, ['1', '2', '3', '4', '5']),
            ('t=1&t=,1,4,,5', False, ['1', '1', '4', '5']),
            ('t=1&t=,1,4,,5', True, ['1', '', '1', '4', '', '5']),
            (
                't=1&t=,1,4,,5&t=a,b,c',
                True,
                ['1', '', '1', '4', '', '5', 'a', 'b', 'c'],
            ),
        ],
    )
    def test_option_auto_parse_qs_csv_multiple_fields_true(
        self,
        simulate_request,
        client,
        resource,
        qs,
        keep_blank,
        expected,
    ):
>       client.app.add_route('/', resource)

tests/test_query_params.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe99681cba0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9968cd480>, 'CHECK...d480>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9968cd480>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe9964bec20>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_datetime_valid[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fe857d2f7f0>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe9964eac80>
resource = <test_query_params.Resource object at 0x7fe9964e89d0>

    def test_get_datetime_valid(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:845: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe9970413f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9968cf490>, 'CHECK...f490>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9968cf490>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe9964e89d0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_date_missing_param[simulate_request_get_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fe857d2e920>
simulate_request = <function simulate_request_get_query_params at 0x7fe857eab010>
client = <falcon.testing.client.TestClient object at 0x7fe99662d570>
resource = <test_query_params.Resource object at 0x7fe99662fe20>

    def test_get_date_missing_param(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:807: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe9968ea730>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9968560e0>, 'CHECK...60e0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9968560e0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe99662fe20>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_ TestQueryParams.test_get_dict_valid[simulate_request_post_query_params-asgi] _

self = <test_query_params.TestQueryParams object at 0x7fe857d70f40>
simulate_request = <function simulate_request_post_query_params at 0x7fe857eab0a0>
client = <falcon.testing.client.TestClient object at 0x7fe996ab3d00>
resource = <test_query_params.Resource object at 0x7fe996ab28c0>

    def test_get_dict_valid(self, simulate_request, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:892: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe99686d930>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996855120>, 'CHECK...5120>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996855120>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996ab28c0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ TestPostQueryParams.test_empty_body[asgi] ___________________

self = <test_query_params.TestPostQueryParams object at 0x7fe857d72c50>
client = <falcon.testing.client.TestClient object at 0x7fe9964ac6d0>
resource = <test_query_params.Resource object at 0x7fe9964ac9a0>

    def test_empty_body(self, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:999: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996834eb0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9968cf760>, 'CHECK...f760>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9968cf760>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe9964ac9a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________ TestPostQueryParams.test_empty_body_no_content_length[asgi] __________

self = <test_query_params.TestPostQueryParams object at 0x7fe857d72ec0>
client = <falcon.testing.client.TestClient object at 0x7fe996a0ec80>
resource = <test_query_params.Resource object at 0x7fe996a0d060>

    def test_empty_body_no_content_length(self, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:1006: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996834430>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9970d4700>, 'CHECK...4700>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9970d4700>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996a0d060>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
__________________ TestPostQueryParams.test_asgi_raises_error __________________

self = <test_query_params.TestPostQueryParams object at 0x7fe857d733a0>
resource = <test_query_params.Resource object at 0x7fe9964b7b20>

    def test_asgi_raises_error(self, resource):
        app = create_app(asgi=True)
>       app.add_route('/', resource)

tests/test_query_params.py:1022: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996834cf0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9968cd360>, 'CHECK...d360>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9968cd360>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe9964b7b20>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ TestPostQueryParams.test_http_methods_body_expected[asgi-PUT] _________

self = <test_query_params.TestPostQueryParams object at 0x7fe857d72500>
client = <falcon.testing.client.TestClient object at 0x7fe9968214e0>
resource = <test_query_params.Resource object at 0x7fe996821a80>
http_method = 'PUT'

    @pytest.mark.parametrize(
        'http_method', ('POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS')
    )
    def test_http_methods_body_expected(self, client, resource, http_method):
>       client.app.add_route('/', resource)

tests/test_query_params.py:965: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996834e40>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9968cd3f0>, 'CHECK...d3f0>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9968cd3f0>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996821a80>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
________ TestPostQueryParams.test_http_methods_body_expected[asgi-POST] ________

self = <test_query_params.TestPostQueryParams object at 0x7fe857d723b0>
client = <falcon.testing.client.TestClient object at 0x7fe996815090>
resource = <test_query_params.Resource object at 0x7fe996814520>
http_method = 'POST'

    @pytest.mark.parametrize(
        'http_method', ('POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS')
    )
    def test_http_methods_body_expected(self, client, resource, http_method):
>       client.app.add_route('/', resource)

tests/test_query_params.py:965: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996836ce0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996856320>, 'CHECK...6320>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996856320>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996814520>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______ TestPostQueryParams.test_http_methods_body_expected[asgi-DELETE] _______

self = <test_query_params.TestPostQueryParams object at 0x7fe857d71a80>
client = <falcon.testing.client.TestClient object at 0x7fe9970dd390>
resource = <test_query_params.Resource object at 0x7fe9970de1a0>
http_method = 'DELETE'

    @pytest.mark.parametrize(
        'http_method', ('POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS')
    )
    def test_http_methods_body_expected(self, client, resource, http_method):
>       client.app.add_route('/', resource)

tests/test_query_params.py:965: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe9970447b0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996856680>, 'CHECK...6680>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996856680>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe9970de1a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___________________ TestPostQueryParams.test_non_ascii[asgi] ___________________

self = <test_query_params.TestPostQueryParams object at 0x7fe857d72a70>
client = <falcon.testing.client.TestClient object at 0x7fe996424f40>
resource = <test_query_params.Resource object at 0x7fe996425600>

    def test_non_ascii(self, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:988: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe99681daf0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996857880>, 'CHECK...7880>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996857880>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996425600>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_______ TestPostQueryParams.test_http_methods_body_expected[asgi-PATCH] ________

self = <test_query_params.TestPostQueryParams object at 0x7fe857d71f00>
client = <falcon.testing.client.TestClient object at 0x7fe996ab8e20>
resource = <test_query_params.Resource object at 0x7fe996aba1d0>
http_method = 'PATCH'

    @pytest.mark.parametrize(
        'http_method', ('POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS')
    )
    def test_http_methods_body_expected(self, client, resource, http_method):
>       client.app.add_route('/', resource)

tests/test_query_params.py:965: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe99686e5e0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996856f80>, 'CHECK...6f80>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996856f80>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe996aba1d0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ TestPostQueryParams.test_http_methods_body_not_expected[asgi-HEAD] ______

self = <test_query_params.TestPostQueryParams object at 0x7fe857d72a10>
client = <falcon.testing.client.TestClient object at 0x7fe9970efb20>
resource = <test_query_params.Resource object at 0x7fe9970eca60>
http_method = 'HEAD'

    @pytest.mark.parametrize('http_method', ('GET', 'HEAD'))
    def test_http_methods_body_not_expected(self, client, resource, http_method):
>       client.app.add_route('/', resource)

tests/test_query_params.py:977: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe996834dd0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9968cf490>, 'CHECK...f490>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9968cf490>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe9970eca60>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ TestPostQueryParams.test_http_methods_body_not_expected[asgi-GET] _______

self = <test_query_params.TestPostQueryParams object at 0x7fe857d729e0>
client = <falcon.testing.client.TestClient object at 0x7fe996955180>
resource = <test_query_params.Resource object at 0x7fe9969568f0>
http_method = 'GET'

    @pytest.mark.parametrize('http_method', ('GET', 'HEAD'))
    def test_http_methods_body_not_expected(self, client, resource, http_method):
>       client.app.add_route('/', resource)

tests/test_query_params.py:977: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe9968361f0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9968cfa30>, 'CHECK...fa30>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9968cfa30>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe9969568f0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
______ TestPostQueryParams.test_http_methods_body_expected[asgi-OPTIONS] _______

self = <test_query_params.TestPostQueryParams object at 0x7fe857d71660>
client = <falcon.testing.client.TestClient object at 0x7fe99648d9f0>
resource = <test_query_params.Resource object at 0x7fe99648e320>
http_method = 'OPTIONS'

    @pytest.mark.parametrize(
        'http_method', ('POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS')
    )
    def test_http_methods_body_expected(self, client, resource, http_method):
>       client.app.add_route('/', resource)

tests/test_query_params.py:965: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe9968357e0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9968cf880>, 'CHECK...f880>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe9968cf880>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe99648e320>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
_________ TestPostQueryParams.test_explicitly_disable_auto_parse[asgi] _________

self = <test_query_params.TestPostQueryParams object at 0x7fe857d73130>
client = <falcon.testing.client.TestClient object at 0x7fe99225f490>
resource = <test_query_params.Resource object at 0x7fe99225f3a0>

    def test_explicitly_disable_auto_parse(self, client, resource):
>       client.app.add_route('/', resource)

tests/test_query_params.py:1013: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe9968359a0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996856950>, 'CHECK...6950>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996856950>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method Resource.on_delete of <test_query_params.Resource object at 0x7fe99225f3a0>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
___ TestPostQueryParamsDefaultBehavior.test_dont_auto_parse_by_default[True] ___

self = <test_query_params.TestPostQueryParamsDefaultBehavior object at 0x7fe857d73640>
asgi = True

    def test_dont_auto_parse_by_default(self, asgi):
        app = create_app(asgi)
        resource = testing.SimpleTestResource()
>       app.add_route('/', resource)

tests/test_query_params.py:1035: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
falcon/asgi/app.py:731: in add_route
    super().add_route(uri_template, resource, **kwargs)
falcon/app.py:580: in add_route
    self._router.add_route(uri_template, resource, **kwargs)
falcon/routing/compiled.py:196: in add_route
    self._require_coroutine_responders(method_map)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <falcon.routing.compiled.CompiledRouter object at 0x7fe99686dbd0>
method_map = {'CHECKIN': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996857760>, 'CHECK...7760>, 'COPY': <function create_method_not_allowed.<locals>.method_not_allowed_responder_async at 0x7fe996857760>, ...}

    def _require_coroutine_responders(self, method_map):
        for method, responder in method_map.items():
            # NOTE(kgriffs): We don't simply wrap non-async functions
            #   since they likely perform relatively long blocking
            #   operations that need to be explicitly made non-blocking
            #   by the developer; raising an error helps highlight this
            #   issue.
            if not iscoroutinefunction(responder) and is_python_func(responder):
                if _should_wrap_non_coroutines():
    
                    def let(responder=responder):
                        method_map[method] = wrap_sync_to_async(responder)
    
                    let()
    
                else:
                    msg = (
                        'The {} responder must be a non-blocking '
                        'async coroutine (i.e., defined using async def) to '
                        'avoid blocking the main request thread.'
                    )
                    msg = msg.format(responder)
>                   raise TypeError(msg)
E                   TypeError: The <bound method SimpleTestResource.on_get of <falcon.testing.resource.SimpleTestResource object at 0x7fe992309840>> responder must be a non-blocking async coroutine (i.e., defined using async def) to avoid blocking the main request thread.

falcon/routing/compiled.py:344: TypeError
=============================== warnings summary ===============================
../../.local/lib/python3.10/site-packages/pyximport/pyximport.py:51
  /home/kaiyaok2/.local/lib/python3.10/site-packages/pyximport/pyximport.py:51: DeprecationWarning: the imp module is deprecated in favour of importlib and slated for removal in Python 3.12; see the module's documentation for alternative uses
    import imp

../../.local/lib/python3.10/site-packages/Cython/Distutils/old_build_ext.py:15
../../.local/lib/python3.10/site-packages/Cython/Distutils/old_build_ext.py:15
  /home/kaiyaok2/.local/lib/python3.10/site-packages/Cython/Distutils/old_build_ext.py:15: DeprecationWarning: dep_util is Deprecated. Use functions from setuptools instead.
    from distutils.dep_util import newer, newer_group

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/test_cmd_inspect_app.py::TestMain::test_routes_only[internal-verbose]
FAILED tests/test_cmd_inspect_app.py::TestMain::test_inspect[not-internal-verbose]
FAILED tests/test_cmd_inspect_app.py::TestMain::test_inspect[not-internal-not-verbose]
FAILED tests/test_cmd_inspect_app.py::TestMain::test_inspect[internal-not-verbose]
FAILED tests/test_cmd_inspect_app.py::TestMain::test_inspect[internal-verbose]
FAILED tests/test_cmd_inspect_app.py::TestMain::test_routes_only[internal-not-verbose]
FAILED tests/test_cmd_inspect_app.py::TestMain::test_routes_only[not-internal-verbose]
FAILED tests/test_cmd_inspect_app.py::TestMain::test_routes_only[not-internal-not-verbose]
FAILED tests/test_cmd_inspect_app.py::TestLoadApp::test_load_app[_APP] - Modu...
FAILED tests/test_cmd_inspect_app.py::TestLoadApp::test_load_app_error[foo]
FAILED tests/test_cmd_inspect_app.py::TestLoadApp::test_load_app[make_app] - ...
FAILED tests/test_cmd_inspect_app.py::TestLoadApp::test_load_app_error[_MODULE]
FAILED tests/test_cmd_inspect_app.py::TestLoadApp::test_load_app_error[DummyResource]
FAILED tests/test_cython.py::TestCythonized::test_imported_from_c_modules - a...
FAILED tests/test_cython.py::TestCythonized::test_stream_has_private_read - A...
FAILED tests/asgi/test_cythonized_asgi.py::test_hooks - TypeError: The <bound...
FAILED tests/asgi/test_cythonized_asgi.py::test_jsonchema_validator - TypeErr...
FAILED tests/test_after_hooks.py::test_resource_with_uri_fields[asgi-resource1]
FAILED tests/test_after_hooks.py::test_resource_with_uri_fields[asgi-resource0]
FAILED tests/test_after_hooks.py::test_wrapped_resource[asgi-resource1] - Typ...
FAILED tests/test_after_hooks.py::test_wrapped_resource_with_hooks_aware_of_resource[asgi]
FAILED tests/test_after_hooks.py::test_wrapped_resource[asgi-resource0] - Typ...
FAILED tests/test_middleware.py::TestErrorHandling::test_http_status_raised_from_error_handler[asgi]
FAILED tests/test_middleware.py::TestErrorHandling::test_error_composed_before_resp_middleware_called[asgi]
FAILED tests/test_middleware.py::TestResourceMiddleware::test_can_access_resource_params[asgi-False]
FAILED tests/test_middleware.py::TestResourceMiddleware::test_can_access_resource_params[asgi-True]
FAILED tests/test_middleware.py::TestEmptySignatureMiddleware::test_dont_need_params_in_signature[asgi]
FAILED tests/test_middleware.py::TestRequestTimeMiddleware::test_skip_process_resource[asgi]
FAILED tests/test_middleware.py::TestRequestTimeMiddleware::test_log_get_request[asgi-True]
FAILED tests/test_middleware.py::TestRequestTimeMiddleware::test_response_middleware_raises_exception[asgi]
FAILED tests/test_middleware.py::TestRequestTimeMiddleware::test_log_get_request[asgi-False]
FAILED tests/test_middleware.py::TestShortCircuiting::test_process_request_cached[asgi-False]
FAILED tests/test_middleware.py::TestShortCircuiting::test_process_request_cached[asgi-True]
FAILED tests/test_middleware.py::TestShortCircuiting::test_process_resource_cached[asgi-True]
FAILED tests/test_middleware.py::TestShortCircuiting::test_process_request_not_cached[asgi]
FAILED tests/test_middleware.py::TestShortCircuiting::test_process_resource_cached[asgi-False]
FAILED tests/test_middleware.py::TestTransactionIdMiddleware::test_generate_trans_id_with_request[asgi]
FAILED tests/test_middleware.py::TestRemoveBasePathMiddleware::test_base_path_is_removed_before_routing[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_order_independent_mw_executed_when_exception_in_req[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_legacy_middleware_called_with_correct_args[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_outer_mw_with_ex_handler_throw_exception[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_order_mw_executed_when_exception_in_resp[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_inner_mw_throw_exception_while_processing_resp[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_order_independent_mw_executed_when_exception_in_rsrc[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_multiple_response_mw_throw_exception[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_inner_mw_throw_exception[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_order_independent_mw_executed_when_exception_in_resp[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_independent_middleware_execution_order[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_inner_mw_with_ex_handler_throw_exception[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_order_mw_executed_when_exception_in_req[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_middleware_execution_order[asgi]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_generate_trans_id_and_time_with_request[asgi-False]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_generate_trans_id_and_time_with_request[asgi-True]
FAILED tests/test_middleware.py::TestSeveralMiddlewares::test_order_mw_executed_when_exception_in_rsrc[asgi]
FAILED tests/test_middleware.py::TestCORSMiddlewareWithAnotherMiddleware::test_api_initialization_with_cors_enabled_and_middleware_param[asgi-mw3]
FAILED tests/test_middleware.py::TestCORSMiddlewareWithAnotherMiddleware::test_api_initialization_with_cors_enabled_and_middleware_param[asgi-mw0]
FAILED tests/test_middleware.py::TestCORSMiddlewareWithAnotherMiddleware::test_api_initialization_with_cors_enabled_and_middleware_param[asgi-mw2]
FAILED tests/test_middleware.py::TestCORSMiddlewareWithAnotherMiddleware::test_api_initialization_with_cors_enabled_and_middleware_param[asgi-mw1]
FAILED tests/test_headers.py::TestHeaders::test_response_append_header[asgi]
FAILED tests/test_headers.py::TestHeaders::test_unicode_location_headers[asgi]
FAILED tests/test_headers.py::TestHeaders::test_no_content_length[asgi-204 No Content]
FAILED tests/test_headers.py::TestHeaders::test_content_disposition_attachment_header[asgi-[f\xf2\xf3]@b\xe0r,b\xe4z.txt-attachment; filename=_fo_o___ba_r_ba_z.txt; filename*=UTF-8''%5Bf%C3%B2%C3%B3%5D%40b%C3%A0r%2Cb%C3%A4z.txt]
FAILED tests/test_headers.py::TestHeaders::test_content_disposition_inline_header[asgi-Bold Digit \U0001d7cf.txt-inline; filename=Bold_Digit_1.txt; filename*=UTF-8''Bold%20Digit%20%F0%9D%9F%8F.txt]
FAILED tests/test_headers.py::TestHeaders::test_content_disposition_attachment_header[asgi-one,two.txt-attachment; filename="one,two.txt"]
FAILED tests/test_headers.py::TestHeaders::test_declared_content_length_overriden_by_body_length[asgi]
FAILED tests/test_headers.py::TestHeaders::test_content_type_no_body[asgi] - ...
FAILED tests/test_headers.py::TestHeaders::test_append_link_with_type_hint[asgi]
FAILED tests/test_headers.py::TestHeaders::test_append_link_crossorigin[asgi-None-</related/thing>; rel=alternate]
FAILED tests/test_headers.py::TestHeaders::test_unicode_headers_contain_non_ascii[asgi-PATCH]
FAILED tests/test_headers.py::TestHeaders::test_unicode_headers_contain_non_ascii[asgi-POST]
FAILED tests/test_headers.py::TestHeaders::test_content_disposition_attachment_header[asgi-\xbd,\xb2\u2044\u2082.txt-attachment; filename=1_2_2_2.txt; filename*=UTF-8''%C2%BD%2C%C2%B2%E2%81%84%E2%82%82.txt]
FAILED tests/test_headers.py::TestHeaders::test_append_link_crossorigin[asgi-Anonymous-</related/thing>; rel=alternate; crossorigin]
FAILED tests/test_headers.py::TestHeaders::test_override_default_media_type_missing_encoding[True]
FAILED tests/test_headers.py::TestHeaders::test_override_default_media_type[text/plain; charset=UTF-8-Hello Unicode! \U0001f638-True]
FAILED tests/test_headers.py::TestHeaders::test_headers_with_custom_class_not_callable[asgi]
FAILED tests/test_headers.py::TestHeaders::test_append_link_single[asgi] - Ty...
FAILED tests/test_headers.py::TestHeaders::test_request_latin1_headers[asgi]
FAILED tests/test_headers.py::TestHeaders::test_vary_header[asgi-vary0-accept-encoding]
FAILED tests/test_headers.py::TestHeaders::test_append_link_with_hreflang_multi[asgi]
FAILED tests/test_headers.py::TestHeaders::test_append_link_with_anchor[asgi]
FAILED tests/test_headers.py::TestHeaders::test_content_length[asgi] - TypeEr...
FAILED tests/test_headers.py::TestHeaders::test_unset_header[asgi-True] - Typ...
FAILED tests/test_headers.py::TestHeaders::test_unicode_headers_contain_non_ascii[asgi-PUT]
FAILED tests/test_headers.py::TestHeaders::test_append_link_complex[asgi] - T...
FAILED tests/test_headers.py::TestHeaders::test_default_media_type[asgi] - Ty...
FAILED tests/test_headers.py::TestHeaders::test_passthrough_request_headers[asgi]
FAILED tests/test_headers.py::TestHeaders::test_append_link_with_title[asgi]
FAILED tests/test_headers.py::TestHeaders::test_append_link_with_hreflang[asgi]
FAILED tests/test_headers.py::TestHeaders::test_append_link_crossorigin[asgi-Use-Credentials-</related/thing>; rel=alternate; crossorigin="use-credentials"]
FAILED tests/test_headers.py::TestHeaders::test_get_header_as_int[asgi] - Typ...
FAILED tests/test_headers.py::TestHeaders::test_declared_content_length_on_head[asgi]
FAILED tests/test_headers.py::TestHeaders::test_unicode_headers_contain_non_ascii[asgi-CONNECT]
FAILED tests/test_headers.py::TestHeaders::test_append_link_with_link_extension[asgi]
FAILED tests/test_headers.py::TestHeaders::test_content_disposition_attachment_header[asgi-Bold Digit \U0001d7cf.txt-attachment; filename=Bold_Digit_1.txt; filename*=UTF-8''Bold%20Digit%20%F0%9D%9F%8F.txt]
FAILED tests/test_headers.py::TestHeaders::test_custom_content_type[asgi] - T...
FAILED tests/test_headers.py::TestHeaders::test_request_multiple_header[asgi]
FAILED tests/test_headers.py::TestHeaders::test_content_disposition_inline_header[asgi-report.csv-inline; filename="report.csv"]
FAILED tests/test_headers.py::TestHeaders::test_vary_star[asgi] - TypeError: ...
FAILED tests/test_headers.py::TestHeaders::test_set_headers_with_custom_class[asgi]
FAILED tests/test_headers.py::TestHeaders::test_content_disposition_attachment_header[asgi-report.csv-attachment; filename="report.csv"]
FAILED tests/test_headers.py::TestHeaders::test_append_link_crossorigin[asgi-anonymous-</related/thing>; rel=alternate; crossorigin]
FAILED tests/test_headers.py::TestHeaders::test_no_content_type[asgi-304 Not Modified]
FAILED tests/test_headers.py::TestHeaders::test_append_link_crossorigin[asgi-use-credentials-</related/thing>; rel=alternate; crossorigin="use-credentials"]
FAILED tests/test_headers.py::TestHeaders::test_content_disposition_attachment_header[asgi-Hello World.txt-attachment; filename="Hello World.txt"]
FAILED tests/test_headers.py::TestHeaders::test_override_default_media_type[text/plain-Hello ISO-8859-1!-True]
FAILED tests/test_headers.py::TestHeaders::test_default_value[asgi] - TypeErr...
FAILED tests/test_headers.py::TestHeaders::test_declared_content_length_overriden_by_data_length[asgi]
FAILED tests/test_headers.py::TestHeaders::test_append_link_with_title_star[asgi]
FAILED tests/test_headers.py::TestHeaders::test_unicode_headers_contain_only_ascii[asgi]
FAILED tests/test_headers.py::TestHeaders::test_vary_header[asgi-vary1-accept-encoding, x-auth-token]
FAILED tests/test_headers.py::TestHeaders::test_declared_content_length_overridden_by_no_body[asgi]
FAILED tests/test_headers.py::TestHeaders::test_append_link_crossorigin[asgi-AnOnYmOUs-</related/thing>; rel=alternate; crossorigin]
FAILED tests/test_headers.py::TestHeaders::test_content_disposition_attachment_header[asgi-\xc5ngstr\xf6m unit.txt-attachment; filename=A_ngstro_m_unit.txt; filename*=UTF-8''%C3%85ngstr%C3%B6m%20unit.txt]
FAILED tests/test_headers.py::TestHeaders::test_headers_as_list[asgi] - TypeE...
FAILED tests/test_headers.py::TestHeaders::test_required_header[asgi] - TypeE...
FAILED tests/test_headers.py::TestHeaders::test_response_header_helpers_on_get[asgi]
FAILED tests/test_headers.py::TestHeaders::test_content_disposition_attachment_header[asgi-[foo] @ bar.txt-attachment; filename="[foo] @ bar.txt"]
FAILED tests/test_headers.py::TestHeaders::test_no_content_length[asgi-304 Not Modified]
FAILED tests/test_headers.py::TestHeaders::test_unset_header[asgi-False] - Ty...
FAILED tests/test_headers.py::TestHeaders::test_response_set_and_get_header[asgi]
FAILED tests/test_headers.py::TestHeaders::test_expires_header[asgi] - TypeEr...
FAILED tests/test_headers.py::TestHeaders::test_content_disposition_inline_header[asgi-Hello World.txt-inline; filename="Hello World.txt"]
FAILED tests/test_headers.py::TestHeaders::test_append_link_multiple[asgi] - ...
FAILED tests/test_headers.py::TestHeaders::test_no_content_type[asgi-204 No Content]
FAILED tests/test_query_params.py::TestQueryParams::test_default[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_boolean_blank[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_simple[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_get_query_params-asgi-t=1&t=,1,4,,5&t=a,b,c-True-expected8]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_simple_true[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_param_as_json_no_handler_json[asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_dict_missing_param[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_dict_missing_param[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_complex_false[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_none[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_get_query_params-asgi-t=1&t=,1,4,,5-True-expected7]
FAILED tests/test_query_params.py::TestQueryParams::test_get_datetime_invalid[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_get_query_params-asgi-t=1&t=2&t=3,4-False-expected1]
FAILED tests/test_query_params.py::TestQueryParams::test_get_date_missing_param[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_boolean[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_get_query_params-asgi-t=1,,2&t=3,4-True-expected4]
FAILED tests/test_query_params.py::TestQueryParams::test_get_date_valid[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_param_as_json_handler_json[asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_datetime_valid[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_date_invalid[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_percent_encoded[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_date_store[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_datetime_store[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_float_neg[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_default_auto_parse_csv_behaviour[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_post_query_params-asgi-t=1&t=,1,4,,5-True-expected7]
FAILED tests/test_query_params.py::TestQueryParams::test_required[simulate_request_post_query_params-asgi-get_param_as_int]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_post_query_params-asgi-t=1,,2&t=3,4-False-expected3]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_complex_false[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_simple[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_int[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_uuid[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_datetime_missing_param[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_required[simulate_request_get_query_params-asgi-get_param_as_bool]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_get_query_params-asgi-t=1&t=3,4-False-expected0]
FAILED tests/test_query_params.py::TestQueryParams::test_float[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_dict_invalid[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_multiple_keys_as_int[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_simple_false[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_float_neg[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_default[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_param_property[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_simple_true[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_required[simulate_request_get_query_params-asgi-get_param]
FAILED tests/test_query_params.py::TestQueryParams::test_multiple_keys_as_int[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_list_transformer[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_get_query_params-asgi-t=1,2&t=3,4,,5-False-expected5]
FAILED tests/test_query_params.py::TestQueryParams::test_multiple_form_keys_as_list[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_param_property[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_false[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_date_valid[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_list_type_blank[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_get_query_params-asgi-t=1,,2&t=3,4-False-expected3]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_post_query_params-asgi-t=1&t=3,4-False-expected0]
FAILED tests/test_query_params.py::TestQueryParams::test_percent_encoded[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_allowed_names[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_required[simulate_request_post_query_params-asgi-get_param_as_float]
FAILED tests/test_query_params.py::TestQueryParams::test_get_datetime_invalid[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_allowed_names[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_get_query_params-asgi-t=1&t=,1,4,,5-False-expected6]
FAILED tests/test_query_params.py::TestQueryParams::test_int[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_list_transformer[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_required[simulate_request_get_query_params-asgi-get_param_as_list]
FAILED tests/test_query_params.py::TestQueryParams::test_required[simulate_request_post_query_params-asgi-get_param]
FAILED tests/test_query_params.py::TestQueryParams::test_get_date_store[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_post_query_params-asgi-t=1&t=,1,4,,5&t=a,b,c-True-expected8]
FAILED tests/test_query_params.py::TestQueryParams::test_bad_percentage[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_multiple_keys_as_bool[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_false[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_post_query_params-asgi-t=1,,2&t=3,4-True-expected4]
FAILED tests/test_query_params.py::TestQueryParams::test_float[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_dict_invalid[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_post_query_params-asgi-t=1,2&t=3,4-False-expected2]
FAILED tests/test_query_params.py::TestQueryParams::test_multiple_keys_as_bool[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_blank[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_multiple_keys_as_float[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_date_valid_with_format[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_simple_false[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_has_param[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_list_type[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_post_query_params-asgi-t=1&t=,1,4,,5-False-expected6]
FAILED tests/test_query_params.py::TestQueryParams::test_get_dict_store[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_multiple_form_keys[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_required[simulate_request_get_query_params-asgi-get_param_as_int]
FAILED tests/test_query_params.py::TestQueryParams::test_get_datetime_store[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_multiple_form_keys[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_required[simulate_request_get_query_params-asgi-get_param_as_float]
FAILED tests/test_query_params.py::TestQueryParams::test_list_type_blank[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_required[simulate_request_get_query_params-asgi-get_param_as_uuid]
FAILED tests/test_query_params.py::TestQueryParams::test_list_type[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_required[simulate_request_post_query_params-asgi-get_param_as_bool]
FAILED tests/test_query_params.py::TestQueryParams::test_default_auto_parse_csv_behaviour[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_post_query_params-asgi-t=1,2&t=3,4,,5-False-expected5]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_post_query_params-asgi-t=1&t=2&t=3,4-False-expected1]
FAILED tests/test_query_params.py::TestQueryParams::test_get_dict_valid[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_dict_store[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_bad_percentage[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_required[simulate_request_post_query_params-asgi-get_param_as_list]
FAILED tests/test_query_params.py::TestQueryParams::test_get_datetime_missing_param[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_date_valid_with_format[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_none[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_multiple_form_keys_as_list[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_has_param[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_blank[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_boolean_blank[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_datetime_valid_with_format[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_datetime_valid_with_format[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_uuid[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_multiple_keys_as_float[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_date_invalid[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_int_neg[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_required[simulate_request_post_query_params-asgi-get_param_as_uuid]
FAILED tests/test_query_params.py::TestQueryParams::test_boolean[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_int_neg[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_option_auto_parse_qs_csv_multiple_fields_true[simulate_request_get_query_params-asgi-t=1,2&t=3,4-False-expected2]
FAILED tests/test_query_params.py::TestQueryParams::test_get_datetime_valid[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_date_missing_param[simulate_request_get_query_params-asgi]
FAILED tests/test_query_params.py::TestQueryParams::test_get_dict_valid[simulate_request_post_query_params-asgi]
FAILED tests/test_query_params.py::TestPostQueryParams::test_empty_body[asgi]
FAILED tests/test_query_params.py::TestPostQueryParams::test_empty_body_no_content_length[asgi]
FAILED tests/test_query_params.py::TestPostQueryParams::test_asgi_raises_error
FAILED tests/test_query_params.py::TestPostQueryParams::test_http_methods_body_expected[asgi-PUT]
FAILED tests/test_query_params.py::TestPostQueryParams::test_http_methods_body_expected[asgi-POST]
FAILED tests/test_query_params.py::TestPostQueryParams::test_http_methods_body_expected[asgi-DELETE]
FAILED tests/test_query_params.py::TestPostQueryParams::test_non_ascii[asgi]
FAILED tests/test_query_params.py::TestPostQueryParams::test_http_methods_body_expected[asgi-PATCH]
FAILED tests/test_query_params.py::TestPostQueryParams::test_http_methods_body_not_expected[asgi-HEAD]
FAILED tests/test_query_params.py::TestPostQueryParams::test_http_methods_body_not_expected[asgi-GET]
FAILED tests/test_query_params.py::TestPostQueryParams::test_http_methods_body_expected[asgi-OPTIONS]
FAILED tests/test_query_params.py::TestPostQueryParams::test_explicitly_disable_auto_parse[asgi]
FAILED tests/test_query_params.py::TestPostQueryParamsDefaultBehavior::test_dont_auto_parse_by_default[True]
ERROR tests/test_wsgi_servers.py::TestWSGIServer::test_static_file_byte_range[uvicorn--47-The content of this comment is part of a test.\n]
ERROR tests/test_wsgi_servers.py::TestWSGIServer::test_static_file_byte_range[uvicorn-7--hashlib]
ERROR tests/test_wsgi_servers.py::TestWSGIServer::test_static_file_byte_range[uvicorn-32-38-random]
ERROR tests/test_wsgi_servers.py::TestWSGIServer::test_post_multipart_form[uvicorn]
ERROR tests/test_wsgi_servers.py::TestWSGIServer::test_get[uvicorn] - Failed:...
ERROR tests/test_wsgi_servers.py::TestWSGIServer::test_static_file_byte_range[uvicorn-2-6-port]
ERROR tests/test_wsgi_servers.py::TestWSGIServer::test_static_file_byte_range[gunicorn--47-The content of this comment is part of a test.\n]
ERROR tests/test_wsgi_servers.py::TestWSGIServer::test_static_file_byte_range[gunicorn-2-6-port]
ERROR tests/test_wsgi_servers.py::TestWSGIServer::test_static_file[gunicorn]
ERROR tests/test_wsgi_servers.py::TestWSGIServer::test_static_file_byte_range[gunicorn-7--hashlib]
ERROR tests/test_wsgi_servers.py::TestWSGIServer::test_get_deprecated[gunicorn]
ERROR tests/test_wsgi_servers.py::TestWSGIServer::test_static_file[uvicorn]
ERROR tests/test_wsgi_servers.py::TestWSGIServer::test_get[gunicorn] - Failed...
ERROR tests/test_wsgi_servers.py::TestWSGIServer::test_post_multipart_form[gunicorn]
ERROR tests/test_wsgi_servers.py::TestWSGIServer::test_get_deprecated[uvicorn]
ERROR tests/test_wsgi_servers.py::TestWSGIServer::test_static_file_byte_range[gunicorn-32-38-random]
ERROR tests/asgi/test_asgi_servers.py::TestASGIServer::test_post_multipart_form[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestASGIServer::test_post_multiple[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestASGIServer::test_post_read_bounded_stream[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestASGIServer::test_head_405[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestASGIServer::test_post_read_bounded_stream_no_body[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestASGIServer::test_post_invalid_content_length[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestASGIServer::test_get[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestASGIServer::test_post_read_bounded_stream_large[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestASGIServer::test_put[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestASGIServer::test_stream_chunked_request[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestASGIServer::test_sse_client_disconnects_early[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestASGIServer::test_sse[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_type_mismatch[_uvicorn_factory-text-send]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_close_code_on_unhandled_error[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_rejected[_uvicorn_factory-4040-True]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_recv_before_accept[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_rejected[_uvicorn_factory-None-False]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_rejected[_uvicorn_factory-4040-False]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_disconnecting_client_early[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_hello[_uvicorn_factory-4321-True]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_select_subprotocol_unknown[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_rejected[_uvicorn_factory-None-True]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_hello[_uvicorn_factory-None-True]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_send_before_accept[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_select_subprotocol_known[_uvicorn_factory-*-amqp]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_type_mismatch[_uvicorn_factory-text-recv]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_passing_path_params[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_type_mismatch[_uvicorn_factory-data-recv]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_close_code_on_unhandled_http_error[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_select_subprotocol_known[_uvicorn_factory-wamp-wamp]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_type_mismatch[_uvicorn_factory-data-send]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_invalid_close_code[_uvicorn_factory]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_hello[_uvicorn_factory-4321-False]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_hello[_uvicorn_factory-None-False]
ERROR tests/asgi/test_asgi_servers.py::TestWebSocket::test_missing_responder[_uvicorn_factory]
ERROR tests/test_cookies.py::test_none_same_site_value[asgi] - TypeError: The...
ERROR tests/test_cookies.py::test_response_base_case[asgi] - TypeError: The <...
ERROR tests/test_cookies.py::test_cookies_setable[asgi] - TypeError: The <bou...
ERROR tests/test_cookies.py::test_cookie_timezone[asgi] - TypeError: The <bou...
ERROR tests/test_cookies.py::test_unset_cookies_samesite[asgi] - TypeError: T...
ERROR tests/test_cookies.py::test_same_site_empty_string[asgi] - TypeError: T...
ERROR tests/test_cookies.py::test_cookie_max_age_float_and_string[asgi-foostring]
ERROR tests/test_cookies.py::test_cookie_max_age_float_and_string[asgi-foofloat]
ERROR tests/test_cookies.py::test_response_unset_cookie[asgi] - TypeError: Th...
ERROR tests/test_cookies.py::test_response_complex_case[asgi] - TypeError: Th...
ERROR tests/test_cookies.py::test_cookie_expires_aware[asgi] - TypeError: The...
ERROR tests/test_cookies.py::test_strict_same_site_value[asgi] - TypeError: T...
ERROR tests/test_cookies.py::test_lax_same_site_value[asgi] - TypeError: The ...
ERROR tests/test_cookies.py::test_response_disable_secure_globally[asgi] - Ty...
ERROR tests/test_cookies.py::test_cookie_expires_naive[asgi] - TypeError: The...
ERROR tests/test_cookies.py::test_unset_cookies[asgi] - TypeError: The <bound...
= 255 failed, 3229 passed, 111 skipped, 3 warnings, 67 errors in 1445.08s (0:24:05) =
